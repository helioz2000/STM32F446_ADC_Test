
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f240  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ac8  0800f410  0800f410  0001f410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ed8  08013ed8  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08013ed8  08013ed8  00023ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013ee0  08013ee0  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013ee0  08013ee0  00023ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013ee4  08013ee4  00023ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08013ee8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f08  20000220  08014108  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009128  08014108  00039128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162eb  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000382f  00000000  00000000  0004657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00049db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbf  00000000  00000000  0004b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b0f  00000000  00000000  0004c1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad7d  00000000  00000000  00072cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3121  00000000  00000000  0008da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c50  00000000  00000000  00170b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001777e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f3f8 	.word	0x0800f3f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800f3f8 	.word	0x0800f3f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0bc      	b.n	80011c2 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4951      	ldr	r1, [pc, #324]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	494c      	ldr	r1, [pc, #304]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4947      	ldr	r1, [pc, #284]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4942      	ldr	r1, [pc, #264]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	492c      	ldr	r1, [pc, #176]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	82fb      	strh	r3, [r7, #22]
 8001144:	e030      	b.n	80011a8 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001146:	8af9      	ldrh	r1, [r7, #22]
 8001148:	7c7a      	ldrb	r2, [r7, #17]
 800114a:	8a7b      	ldrh	r3, [r7, #18]
 800114c:	4c20      	ldr	r4, [pc, #128]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001154:	fb05 f000 	mul.w	r0, r5, r0
 8001158:	4401      	add	r1, r0
 800115a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800115e:	491d      	ldr	r1, [pc, #116]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	4622      	mov	r2, r4
 800116c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	7c3a      	ldrb	r2, [r7, #16]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	8278      	strh	r0, [r7, #18]
 800117c:	461d      	mov	r5, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001186:	fb04 f303 	mul.w	r3, r4, r3
 800118a:	440b      	add	r3, r1
 800118c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001192:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	442b      	add	r3, r5
 800119c:	4602      	mov	r2, r0
 800119e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3302      	adds	r3, #2
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d9ca      	bls.n	8001146 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f93c 	bl	8001430 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f938 	bl	8001430 <calc_downsample>
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	20002334 	.word	0x20002334
 80011d4:	200057b4 	.word	0x200057b4

080011d8 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	f200 8117 	bhi.w	800141c <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0df      	b.n	80013de <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <calc_zero_detector+0x250>)
 8001222:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001226:	fb03 f202 	mul.w	r2, r3, r2
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	f300 80ce 	bgt.w	80013d8 <calc_zero_detector+0x200>
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	497a      	ldr	r1, [pc, #488]	; (8001428 <calc_zero_detector+0x250>)
 8001240:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4293      	cmp	r3, r2
 8001256:	f2c0 80bf 	blt.w	80013d8 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <calc_zero_detector+0x250>)
 800125e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4293      	cmp	r3, r2
 8001274:	da3d      	bge.n	80012f2 <calc_zero_detector+0x11a>
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3b01      	subs	r3, #1
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <calc_zero_detector+0x250>)
 800127e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	db2e      	blt.n	80012f2 <calc_zero_detector+0x11a>
				detected++;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	3301      	adds	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd11      	ble.n	80012c4 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <calc_zero_detector+0x250>)
 80012a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ac:	fb00 f202 	mul.w	r2, r0, r2
 80012b0:	4413      	add	r3, r2
 80012b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	dd02      	ble.n	80012c4 <calc_zero_detector+0xec>
						detected++;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3301      	adds	r3, #1
 80012c2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012cc:	d211      	bcs.n	80012f2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3302      	adds	r3, #2
 80012d4:	4954      	ldr	r1, [pc, #336]	; (8001428 <calc_zero_detector+0x250>)
 80012d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012da:	fb00 f202 	mul.w	r2, r0, r2
 80012de:	4413      	add	r3, r2
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	da02      	bge.n	80012f2 <calc_zero_detector+0x11a>
						detected++;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	3301      	adds	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90f      	bls.n	8001318 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	494c      	ldr	r1, [pc, #304]	; (800142c <calc_zero_detector+0x254>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]
				detected = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 8001316:	e05f      	b.n	80013d8 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4942      	ldr	r1, [pc, #264]	; (8001428 <calc_zero_detector+0x250>)
 8001320:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4413      	add	r3, r2
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	dd4f      	ble.n	80013d8 <calc_zero_detector+0x200>
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	493a      	ldr	r1, [pc, #232]	; (8001428 <calc_zero_detector+0x250>)
 8001340:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	4413      	add	r3, r2
 800134a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc40      	bgt.n	80013d8 <calc_zero_detector+0x200>
				detected++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd11      	ble.n	8001386 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b02      	subs	r3, #2
 8001368:	492f      	ldr	r1, [pc, #188]	; (8001428 <calc_zero_detector+0x250>)
 800136a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136e:	fb00 f202 	mul.w	r2, r0, r2
 8001372:	4413      	add	r3, r2
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4293      	cmp	r3, r2
 800137e:	dc02      	bgt.n	8001386 <calc_zero_detector+0x1ae>
						detected++;
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3302      	adds	r3, #2
 800138a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800138e:	d211      	bcs.n	80013b4 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <calc_zero_detector+0x250>)
 8001398:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800139c:	fb00 f202 	mul.w	r2, r0, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd02      	ble.n	80013b4 <calc_zero_detector+0x1dc>
						detected++;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d90c      	bls.n	80013d4 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <calc_zero_detector+0x254>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3308      	adds	r3, #8
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013e4:	f4ff af1b 	bcc.w	800121e <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <calc_zero_detector+0x254>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	f06f 0208 	mvn.w	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <calc_zero_detector+0x254>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f06f 0208 	mvn.w	r2, #8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e000      	b.n	800141e <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800141c:	bf00      	nop
	}
}
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	200071f4 	.word	0x200071f4
 800142c:	2000023c 	.word	0x2000023c

08001430 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800143a:	2300      	movs	r3, #0
 800143c:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80f1 	bhi.w	8001628 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e083      	b.n	8001554 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <calc_downsample+0x200>)
 8001450:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001454:	fb03 f202 	mul.w	r2, r3, r2
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001460:	461c      	mov	r4, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3b01      	subs	r3, #1
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <calc_downsample+0x200>)
 800146a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	4423      	add	r3, r4
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	3201      	adds	r2, #1
 8001480:	486b      	ldr	r0, [pc, #428]	; (8001630 <calc_downsample+0x200>)
 8001482:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001486:	fb04 f101 	mul.w	r1, r4, r1
 800148a:	440a      	add	r2, r1
 800148c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001490:	4413      	add	r3, r2
 8001492:	4a68      	ldr	r2, [pc, #416]	; (8001634 <calc_downsample+0x204>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	b28c      	uxth	r4, r1
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <calc_downsample+0x208>)
 80014a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014a8:	fb00 f202 	mul.w	r2, r0, r2
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <calc_downsample+0x20c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	82bb      	strh	r3, [r7, #20]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	8bfb      	ldrh	r3, [r7, #30]
 80014ca:	495b      	ldr	r1, [pc, #364]	; (8001638 <calc_downsample+0x208>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf28      	it	cs
 80014e4:	4613      	movcs	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <calc_downsample+0x20c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	494f      	ldr	r1, [pc, #316]	; (800163c <calc_downsample+0x20c>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	823b      	strh	r3, [r7, #16]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	4948      	ldr	r1, [pc, #288]	; (8001638 <calc_downsample+0x208>)
 8001516:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800151a:	fb00 f202 	mul.w	r2, r0, r2
 800151e:	4413      	add	r3, r2
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	8a3b      	ldrh	r3, [r7, #16]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf38      	it	cc
 800152e:	4613      	movcc	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	b298      	uxth	r0, r3
 8001536:	4941      	ldr	r1, [pc, #260]	; (800163c <calc_downsample+0x20c>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3302      	adds	r3, #2
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	3301      	adds	r3, #1
 800154c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3302      	adds	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f240 3245 	movw	r2, #837	; 0x345
 800155a:	4293      	cmp	r3, r2
 800155c:	f67f af76 	bls.w	800144c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <calc_downsample+0x200>)
 8001564:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <calc_downsample+0x200>)
 800157a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4403      	add	r3, r0
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	4618      	mov	r0, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	83f9      	strh	r1, [r7, #30]
 800159c:	461c      	mov	r4, r3
 800159e:	b280      	uxth	r0, r0
 80015a0:	4925      	ldr	r1, [pc, #148]	; (8001638 <calc_downsample+0x208>)
 80015a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4423      	add	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015b8:	d20a      	bcs.n	80015d0 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <calc_downsample+0x208>)
 80015c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015c4:	fb00 f202 	mul.w	r2, r0, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <calc_downsample+0x20c>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <calc_downsample+0x20c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <calc_downsample+0x20c>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	18c1      	adds	r1, r0, r3
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <calc_downsample+0x210>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdd9 	bl	80011d8 <calc_zero_detector>
 8001626:	e000      	b.n	800162a <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001628:	bf00      	nop
}
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200057b4 	.word	0x200057b4
 8001634:	55555556 	.word	0x55555556
 8001638:	200071f4 	.word	0x200071f4
 800163c:	2000023c 	.word	0x2000023c
 8001640:	cccccccd 	.word	0xcccccccd

08001644 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e039      	b.n	80016c4 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	4a74      	ldr	r2, [pc, #464]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4972      	ldr	r1, [pc, #456]	; (8001828 <calc_filter_measurements+0x1e4>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	4a70      	ldr	r2, [pc, #448]	; (800182c <calc_filter_measurements+0x1e8>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	496e      	ldr	r1, [pc, #440]	; (800182c <calc_filter_measurements+0x1e8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <calc_filter_measurements+0x1ec>)
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4969      	ldr	r1, [pc, #420]	; (8001830 <calc_filter_measurements+0x1ec>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a62      	ldr	r2, [pc, #392]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4960      	ldr	r1, [pc, #384]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	ddc2      	ble.n	8001650 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <calc_filter_measurements+0x1f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a56      	ldr	r2, [pc, #344]	; (8001828 <calc_filter_measurements+0x1e4>)
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <calc_filter_measurements+0x1fc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <calc_filter_measurements+0x1e8>)
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <calc_filter_measurements+0x200>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a54      	ldr	r2, [pc, #336]	; (8001830 <calc_filter_measurements+0x1ec>)
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <calc_filter_measurements+0x204>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <calc_filter_measurements+0x208>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016f0:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <calc_filter_measurements+0x20c>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <calc_filter_measurements+0x210>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <calc_filter_measurements+0x214>)
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <calc_filter_measurements+0x218>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <calc_filter_measurements+0x21c>)
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e048      	b.n	80017b2 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001720:	4a41      	ldr	r2, [pc, #260]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <calc_filter_measurements+0x20c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <calc_filter_measurements+0x20c>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <calc_filter_measurements+0x1e8>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <calc_filter_measurements+0x210>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <calc_filter_measurements+0x210>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <calc_filter_measurements+0x1ec>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <calc_filter_measurements+0x214>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <calc_filter_measurements+0x214>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <calc_filter_measurements+0x218>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <calc_filter_measurements+0x218>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <calc_filter_measurements+0x1f4>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <calc_filter_measurements+0x21c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <calc_filter_measurements+0x21c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	ddb3      	ble.n	8001720 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <calc_filter_measurements+0x20c>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <calc_filter_measurements+0x20c>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <calc_filter_measurements+0x210>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <calc_filter_measurements+0x210>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <calc_filter_measurements+0x214>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <calc_filter_measurements+0x214>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <calc_filter_measurements+0x218>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <calc_filter_measurements+0x218>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <calc_filter_measurements+0x21c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <calc_filter_measurements+0x21c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000290 	.word	0x20000290
 800182c:	200002b8 	.word	0x200002b8
 8001830:	200002e0 	.word	0x200002e0
 8001834:	20000308 	.word	0x20000308
 8001838:	20000330 	.word	0x20000330
 800183c:	20000358 	.word	0x20000358
 8001840:	2000035c 	.word	0x2000035c
 8001844:	20000360 	.word	0x20000360
 8001848:	20000364 	.word	0x20000364
 800184c:	20000368 	.word	0x20000368
 8001850:	20007f14 	.word	0x20007f14
 8001854:	20007f18 	.word	0x20007f18
 8001858:	20007f1c 	.word	0x20007f1c
 800185c:	20007f20 	.word	0x20007f20
 8001860:	20007f24 	.word	0x20007f24

08001864 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	ed2d 8b02 	vpush	{d8}
 800186c:	b0a8      	sub	sp, #160	; 0xa0
 800186e:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t i1_zero;
	float w=0, va=0;
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80018b2:	4bb3      	ldr	r3, [pc, #716]	; (8001b80 <calc_measurements+0x31c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da05      	bge.n	80018c6 <calc_measurements+0x62>
		meter_readings_invalid = 1;
 80018ba:	4bb2      	ldr	r3, [pc, #712]	; (8001b84 <calc_measurements+0x320>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	e2b0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 80018c6:	4bae      	ldr	r3, [pc, #696]	; (8001b80 <calc_measurements+0x31c>)
 80018c8:	885b      	ldrh	r3, [r3, #2]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4bac      	ldr	r3, [pc, #688]	; (8001b80 <calc_measurements+0x31c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dc05      	bgt.n	80018e6 <calc_measurements+0x82>
		meter_readings_invalid = 1;
 80018da:	4baa      	ldr	r3, [pc, #680]	; (8001b84 <calc_measurements+0x320>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e4:	e2a0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	meter_readings_invalid = 0;		// readings are valid
 80018e6:	4aa7      	ldr	r2, [pc, #668]	; (8001b84 <calc_measurements+0x320>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	7013      	strb	r3, [r2, #0]

	v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 80018ec:	4ba4      	ldr	r3, [pc, #656]	; (8001b80 <calc_measurements+0x31c>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <calc_measurements+0x31c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	0fd3      	lsrs	r3, r2, #31
 80018fa:	4413      	add	r3, r2
 80018fc:	105b      	asrs	r3, r3, #1
 80018fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 8001902:	4b9f      	ldr	r3, [pc, #636]	; (8001b80 <calc_measurements+0x31c>)
 8001904:	8adb      	ldrh	r3, [r3, #22]
 8001906:	461a      	mov	r2, r3
 8001908:	4b9d      	ldr	r3, [pc, #628]	; (8001b80 <calc_measurements+0x31c>)
 800190a:	8a9b      	ldrh	r3, [r3, #20]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	0fd3      	lsrs	r3, r2, #31
 8001910:	4413      	add	r3, r2
 8001912:	105b      	asrs	r3, r3, #1
 8001914:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	// Calculate values using the positive half of the sine wave

	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <calc_measurements+0x31c>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <calc_measurements+0x31c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	f280 8091 	bge.w	8001a48 <calc_measurements+0x1e4>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001926:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <calc_measurements+0x31c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800192e:	e083      	b.n	8001a38 <calc_measurements+0x1d4>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001930:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <calc_measurements+0x324>)
 8001932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001936:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800193a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001946:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800194a:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	17da      	asrs	r2, r3, #31
 8001954:	461c      	mov	r4, r3
 8001956:	4615      	mov	r5, r2
 8001958:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800195c:	eb12 0a04 	adds.w	sl, r2, r4
 8001960:	eb43 0b05 	adc.w	fp, r3, r5
 8001964:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <calc_measurements+0x324>)
 800196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001972:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001976:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001982:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001986:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	4698      	mov	r8, r3
 8001992:	4691      	mov	r9, r2
 8001994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001998:	eb12 0108 	adds.w	r1, r2, r8
 800199c:	6239      	str	r1, [r7, #32]
 800199e:	eb43 0309 	adc.w	r3, r3, r9
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 80019ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 80019b6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fa88 	bl	8001ed0 <calc_adc_raw_to_V>
 80019c0:	eeb0 8a40 	vmov.f32	s16, s0
 80019c4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa9f 	bl	8001f0c <calc_adc_raw_to_A>
 80019ce:	eef0 7a40 	vmov.f32	s15, s0
 80019d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019d6:	ee17 0a90 	vmov	r0, s15
 80019da:	f7fe fdd5 	bl	8000588 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80019e6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0a      	blt.n	8001a04 <calc_measurements+0x1a0>
				i1_va_acc += va_instant;
 80019ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80019f6:	f7fe fc69 	bl	80002cc <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a02:	e014      	b.n	8001a2e <calc_measurements+0x1ca>
			} else {
				i1_w_acc += abs(va_instant);
 8001a04:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a08:	f7ff f8c6 	bl	8000b98 <__aeabi_d2iz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fda5 	bl	8000564 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a22:	f7fe fc53 	bl	80002cc <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a32:	3301      	adds	r3, #1
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <calc_measurements+0x31c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f6ff af75 	blt.w	8001930 <calc_measurements+0xcc>
 8001a46:	e134      	b.n	8001cb2 <calc_measurements+0x44e>
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <calc_measurements+0x31c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a50:	e08b      	b.n	8001b6a <calc_measurements+0x306>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001a52:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <calc_measurements+0x324>)
 8001a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001a68:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a6c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	17da      	asrs	r2, r3, #31
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
 8001a78:	657a      	str	r2, [r7, #84]	; 0x54
 8001a7a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a82:	4621      	mov	r1, r4
 8001a84:	1851      	adds	r1, r2, r1
 8001a86:	61b9      	str	r1, [r7, #24]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	414b      	adcs	r3, r1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a92:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001a96:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <calc_measurements+0x324>)
 8001a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001aa0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aa4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001ab0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001ab4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	17da      	asrs	r2, r3, #31
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ac2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001aca:	4621      	mov	r1, r4
 8001acc:	1851      	adds	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	414b      	adcs	r3, r1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ada:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001ade:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001ae8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f9ef 	bl	8001ed0 <calc_adc_raw_to_V>
 8001af2:	eeb0 8a40 	vmov.f32	s16, s0
 8001af6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fa06 	bl	8001f0c <calc_adc_raw_to_A>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001b18:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <calc_measurements+0x2d2>
				i1_va_acc += va_instant;
 8001b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b24:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b28:	f7fe fbd0 	bl	80002cc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b34:	e014      	b.n	8001b60 <calc_measurements+0x2fc>
			} else {
				i1_w_acc += abs(va_instant);
 8001b36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b3a:	f7ff f82d 	bl	8000b98 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bfb8      	it	lt
 8001b44:	425b      	neglt	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd0c 	bl	8000564 <__aeabi_i2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b54:	f7fe fbba 	bl	80002cc <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	3301      	adds	r3, #1
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b72:	f4ff af6e 	bcc.w	8001a52 <calc_measurements+0x1ee>
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	2314      	movs	r3, #20
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b7c:	e092      	b.n	8001ca4 <calc_measurements+0x440>
 8001b7e:	bf00      	nop
 8001b80:	2000023c 	.word	0x2000023c
 8001b84:	2000028c 	.word	0x2000028c
 8001b88:	200071f4 	.word	0x200071f4
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b8c:	4aaa      	ldr	r2, [pc, #680]	; (8001e38 <calc_measurements+0x5d4>)
 8001b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b96:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001ba2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001ba6:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8001bb4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001bb8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	1851      	adds	r1, r2, r1
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	414b      	adcs	r3, r1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bcc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bd0:	4a99      	ldr	r2, [pc, #612]	; (8001e38 <calc_measurements+0x5d4>)
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001bda:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bde:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001bea:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001bee:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	17da      	asrs	r2, r3, #31
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c00:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c04:	4621      	mov	r1, r4
 8001c06:	1851      	adds	r1, r2, r1
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	414b      	adcs	r3, r1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c14:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001c18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c22:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f952 	bl	8001ed0 <calc_adc_raw_to_V>
 8001c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8001c30:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f969 	bl	8001f0c <calc_adc_raw_to_A>
 8001c3a:	eef0 7a40 	vmov.f32	s15, s0
 8001c3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fc9f 	bl	8000588 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001c52:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0a      	blt.n	8001c70 <calc_measurements+0x40c>
				i1_va_acc += va_instant;
 8001c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c62:	f7fe fb33 	bl	80002cc <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c6e:	e014      	b.n	8001c9a <calc_measurements+0x436>
			} else {
				i1_w_acc += abs(va_instant);
 8001c70:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c74:	f7fe ff90 	bl	8000b98 <__aeabi_d2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bfb8      	it	lt
 8001c7e:	425b      	neglt	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc6f 	bl	8000564 <__aeabi_i2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c8e:	f7fe fb1d 	bl	80002cc <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <calc_measurements+0x5d8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f6ff af6d 	blt.w	8001b8c <calc_measurements+0x328>
			}
		}
	}

	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001cb2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cba:	637a      	str	r2, [r7, #52]	; 0x34
 8001cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cc4:	f7fe ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fc84 	bl	80005dc <__aeabi_l2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b10 	vmov	d0, r2, r3
 8001cdc:	f00d f9f0 	bl	800f0c0 <sqrt>
 8001ce0:	ec53 2b10 	vmov	r2, r3, d0
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe ff56 	bl	8000b98 <__aeabi_d2iz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8ed 	bl	8001ed0 <calc_adc_raw_to_V>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <calc_measurements+0x5dc>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
	i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001d00:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d04:	2200      	movs	r2, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d0e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d12:	f7fe ffb9 	bl	8000c88 <__aeabi_ldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fc5d 	bl	80005dc <__aeabi_l2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f00d f9c9 	bl	800f0c0 <sqrt>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff2f 	bl	8000b98 <__aeabi_d2iz>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f8e4 	bl	8001f0c <calc_adc_raw_to_A>
 8001d44:	eef0 7a40 	vmov.f32	s15, s0
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <calc_measurements+0x5e0>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d5a:	f7fe fefd 	bl	8000b58 <__aeabi_dcmpgt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <calc_measurements+0x526>
 8001d64:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbfb 	bl	8000564 <__aeabi_i2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d76:	f7fe fd89 	bl	800088c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff31 	bl	8000be8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d96:	f7fe fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <calc_measurements+0x562>
 8001da0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbdd 	bl	8000564 <__aeabi_i2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001db2:	f7fe fd6b 	bl	800088c <__aeabi_ddiv>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff13 	bl	8000be8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
	va1_measured = v_measured * i1_measured;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <calc_measurements+0x5dc>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <calc_measurements+0x5e0>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <calc_measurements+0x5e4>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001ddc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd09      	ble.n	8001dfe <calc_measurements+0x59a>
		w1_measured = va - w;
 8001dea:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001dee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <calc_measurements+0x5e8>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
 8001dfc:	e003      	b.n	8001e06 <calc_measurements+0x5a2>
	} else {
		w1_measured = va1_measured;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <calc_measurements+0x5e4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <calc_measurements+0x5e8>)
 8001e04:	6013      	str	r3, [r2, #0]
	}
	pf1_measured = w1_measured / va1_measured;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <calc_measurements+0x5e8>)
 8001e08:	edd3 6a00 	vldr	s13, [r3]
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <calc_measurements+0x5e4>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <calc_measurements+0x5ec>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <calc_measurements+0x5d8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	731a      	strb	r2, [r3, #12]

	// add measurements to filter
	calc_filter_measurements();
 8001e22:	f7ff fc0f 	bl	8001644 <calc_filter_measurements>

	return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	37a0      	adds	r7, #160	; 0xa0
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	ecbd 8b02 	vpop	{d8}
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	200071f4 	.word	0x200071f4
 8001e3c:	2000023c 	.word	0x2000023c
 8001e40:	20000358 	.word	0x20000358
 8001e44:	2000035c 	.word	0x2000035c
 8001e48:	20000360 	.word	0x20000360
 8001e4c:	20000364 	.word	0x20000364
 8001e50:	20000368 	.word	0x20000368

08001e54 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f816 	bl	8001e94 <calc_adc_raw_to_mv_float>
 8001e68:	ee10 3a10 	vmov	r3, s0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b10 	vmov	d0, r2, r3
 8001e7a:	f00d fa31 	bl	800f2e0 <round>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe87 	bl	8000b98 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eaa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ec8 <calc_adc_raw_to_mv_float+0x34>
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ecc <calc_adc_raw_to_mv_float+0x38>
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001eba:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	457ff000 	.word	0x457ff000
 8001ecc:	454e4000 	.word	0x454e4000

08001ed0 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f04 <calc_adc_raw_to_V+0x34>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f08 <calc_adc_raw_to_V+0x38>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	457ff000 	.word	0x457ff000
 8001f08:	44480000 	.word	0x44480000

08001f0c <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f40 <calc_adc_raw_to_A+0x34>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f44 <calc_adc_raw_to_A+0x38>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	457ff000 	.word	0x457ff000
 8001f44:	43480000 	.word	0x43480000

08001f48 <cmd_error>:
extern uint8_t tft_display;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <cmd_error+0x18>)
 8001f54:	f002 fc3e 	bl	80047d4 <term_print>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	0800f410 	.word	0x0800f410

08001f64 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b74      	cmp	r3, #116	; 0x74
 8001f74:	d014      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f76:	2b74      	cmp	r3, #116	; 0x74
 8001f78:	dc17      	bgt.n	8001faa <cmd_t+0x46>
 8001f7a:	2b54      	cmp	r3, #84	; 0x54
 8001f7c:	d010      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f7e:	2b54      	cmp	r3, #84	; 0x54
 8001f80:	dc13      	bgt.n	8001faa <cmd_t+0x46>
 8001f82:	2b30      	cmp	r3, #48	; 0x30
 8001f84:	d002      	beq.n	8001f8c <cmd_t+0x28>
 8001f86:	2b31      	cmp	r3, #49	; 0x31
 8001f88:	d005      	beq.n	8001f96 <cmd_t+0x32>
 8001f8a:	e00e      	b.n	8001faa <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <cmd_t+0x58>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00b      	b.n	8001fae <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <cmd_t+0x58>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e006      	b.n	8001fae <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <cmd_t+0x58>)
 8001fa2:	2209      	movs	r2, #9
 8001fa4:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e001      	b.n	8001fae <cmd_t+0x4a>
	}
	return -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2000231c 	.word	0x2000231c

08001fc0 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <cmd_p+0x38>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 feda 	bl	800bd8c <siscanf>
 8001fd8:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <cmd_p+0x26>
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	e004      	b.n	8001ff0 <cmd_p+0x30>
	new_time_period = value;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <cmd_p+0x3c>)
 8001fec:	801a      	strh	r2, [r3, #0]
	return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	0800f428 	.word	0x0800f428
 8001ffc:	2000231e 	.word	0x2000231e

08002000 <cmd_led>:

int cmd_led(int cmd) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	dd05      	ble.n	800201a <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <cmd_led+0x30>)
 8002014:	f006 f99e 	bl	8008354 <HAL_GPIO_WritePin>
 8002018:	e004      	b.n	8002024 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2120      	movs	r1, #32
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_led+0x30>)
 8002020:	f006 f998 	bl	8008354 <HAL_GPIO_WritePin>
	}
	return(0);
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020000 	.word	0x40020000

08002034 <cmd_help>:


int cmd_help(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002038:	4811      	ldr	r0, [pc, #68]	; (8002080 <cmd_help+0x4c>)
 800203a:	f002 fbcb 	bl	80047d4 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <cmd_help+0x50>)
 8002040:	f002 fbc8 	bl	80047d4 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <cmd_help+0x54>)
 8002046:	f002 fbc5 	bl	80047d4 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 800204a:	4810      	ldr	r0, [pc, #64]	; (800208c <cmd_help+0x58>)
 800204c:	f002 fbc2 	bl	80047d4 <term_print>
#endif
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002050:	480f      	ldr	r0, [pc, #60]	; (8002090 <cmd_help+0x5c>)
 8002052:	f002 fbbf 	bl	80047d4 <term_print>
	term_print("M show measurements using all channels");
 8002056:	480f      	ldr	r0, [pc, #60]	; (8002094 <cmd_help+0x60>)
 8002058:	f002 fbbc 	bl	80047d4 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <cmd_help+0x64>)
 800205e:	f002 fbb9 	bl	80047d4 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <cmd_help+0x68>)
 8002064:	f002 fbb6 	bl	80047d4 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <cmd_help+0x6c>)
 800206a:	f002 fbb3 	bl	80047d4 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <cmd_help+0x70>)
 8002070:	f002 fbb0 	bl	80047d4 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <cmd_help+0x74>)
 8002076:	f002 fbad 	bl	80047d4 <term_print>
	return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	0800f42c 	.word	0x0800f42c
 8002084:	0800f440 	.word	0x0800f440
 8002088:	0800f478 	.word	0x0800f478
 800208c:	0800f4ac 	.word	0x0800f4ac
 8002090:	0800f4d8 	.word	0x0800f4d8
 8002094:	0800f4f4 	.word	0x0800f4f4
 8002098:	0800f51c 	.word	0x0800f51c
 800209c:	0800f564 	.word	0x0800f564
 80020a0:	0800f598 	.word	0x0800f598
 80020a4:	0800f5b4 	.word	0x0800f5b4
 80020a8:	0800f5f4 	.word	0x0800f5f4

080020ac <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b8:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	3b3f      	subs	r3, #63	; 0x3f
 80020c0:	2b35      	cmp	r3, #53	; 0x35
 80020c2:	f200 80c9 	bhi.w	8002258 <cmd_process+0x1ac>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <cmd_process+0x20>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002253 	.word	0x08002253
 80020d0:	08002259 	.word	0x08002259
 80020d4:	08002259 	.word	0x08002259
 80020d8:	08002259 	.word	0x08002259
 80020dc:	080021a5 	.word	0x080021a5
 80020e0:	080021bb 	.word	0x080021bb
 80020e4:	08002259 	.word	0x08002259
 80020e8:	08002259 	.word	0x08002259
 80020ec:	08002259 	.word	0x08002259
 80020f0:	08002253 	.word	0x08002253
 80020f4:	08002259 	.word	0x08002259
 80020f8:	08002259 	.word	0x08002259
 80020fc:	08002259 	.word	0x08002259
 8002100:	080021e3 	.word	0x080021e3
 8002104:	080021f5 	.word	0x080021f5
 8002108:	08002259 	.word	0x08002259
 800210c:	08002259 	.word	0x08002259
 8002110:	0800221d 	.word	0x0800221d
 8002114:	08002259 	.word	0x08002259
 8002118:	08002227 	.word	0x08002227
 800211c:	08002233 	.word	0x08002233
 8002120:	08002249 	.word	0x08002249
 8002124:	08002259 	.word	0x08002259
 8002128:	08002259 	.word	0x08002259
 800212c:	08002259 	.word	0x08002259
 8002130:	08002259 	.word	0x08002259
 8002134:	08002259 	.word	0x08002259
 8002138:	08002259 	.word	0x08002259
 800213c:	08002259 	.word	0x08002259
 8002140:	08002259 	.word	0x08002259
 8002144:	08002259 	.word	0x08002259
 8002148:	08002259 	.word	0x08002259
 800214c:	08002259 	.word	0x08002259
 8002150:	08002259 	.word	0x08002259
 8002154:	08002259 	.word	0x08002259
 8002158:	08002259 	.word	0x08002259
 800215c:	080021a5 	.word	0x080021a5
 8002160:	080021bb 	.word	0x080021bb
 8002164:	08002259 	.word	0x08002259
 8002168:	08002259 	.word	0x08002259
 800216c:	08002259 	.word	0x08002259
 8002170:	08002253 	.word	0x08002253
 8002174:	08002259 	.word	0x08002259
 8002178:	08002259 	.word	0x08002259
 800217c:	08002259 	.word	0x08002259
 8002180:	080021e3 	.word	0x080021e3
 8002184:	080021f5 	.word	0x080021f5
 8002188:	08002259 	.word	0x08002259
 800218c:	08002259 	.word	0x08002259
 8002190:	0800221d 	.word	0x0800221d
 8002194:	08002259 	.word	0x08002259
 8002198:	08002227 	.word	0x08002227
 800219c:	08002233 	.word	0x08002233
 80021a0:	08002249 	.word	0x08002249
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3301      	adds	r3, #1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3b31      	subs	r3, #49	; 0x31
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fce8 	bl	8004b84 <term_csv_buffer>
		retval = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
		break;
 80021b8:	e04e      	b.n	8002258 <cmd_process+0x1ac>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe f878 	bl	80002b0 <strlen>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d908      	bls.n	80021d8 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3b31      	subs	r3, #49	; 0x31
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 f85d 	bl	8003290 <display_show_curve>
 80021d6:	e001      	b.n	80021dc <cmd_process+0x130>
		} else {
			display_show_curves();
 80021d8:	f001 f826 	bl	8003228 <display_show_curves>
		}
		retval = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
		break;
 80021e0:	e03a      	b.n	8002258 <cmd_process+0x1ac>
#endif
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3301      	adds	r3, #1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3b2f      	subs	r3, #47	; 0x2f
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff08 	bl	8002000 <cmd_led>
 80021f0:	60f8      	str	r0, [r7, #12]
		break;
 80021f2:	e031      	b.n	8002258 <cmd_process+0x1ac>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe f85b 	bl	80002b0 <strlen>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d908      	bls.n	8002212 <cmd_process+0x166>
		    term_show_channel(cmd_str[1] - 0x31);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3b31      	subs	r3, #49	; 0x31
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fbd0 	bl	80049b0 <term_show_channel>
 8002210:	e001      	b.n	8002216 <cmd_process+0x16a>
		} else {
			term_show_measurements();
 8002212:	f002 fb59 	bl	80048c8 <term_show_measurements>
		}
		retval = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
		break;
 800221a:	e01d      	b.n	8002258 <cmd_process+0x1ac>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fecf 	bl	8001fc0 <cmd_p>
 8002222:	60f8      	str	r0, [r7, #12]
		break;
 8002224:	e018      	b.n	8002258 <cmd_process+0x1ac>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <cmd_process+0x1b8>)
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
		break;
 8002230:	e012      	b.n	8002258 <cmd_process+0x1ac>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3301      	adds	r3, #1
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	3b31      	subs	r3, #49	; 0x31
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f002 faed 	bl	800481c <term_show_buffer>
		retval = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
		break;
 8002246:	e007      	b.n	8002258 <cmd_process+0x1ac>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fe8b 	bl	8001f64 <cmd_t>
 800224e:	60f8      	str	r0, [r7, #12]
		break;
 8002250:	e002      	b.n	8002258 <cmd_process+0x1ac>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8002252:	f7ff feef 	bl	8002034 <cmd_help>
 8002256:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000231b 	.word	0x2000231b

08002268 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe f81d 	bl	80002b0 <strlen>
 8002276:	4603      	mov	r3, r0
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <CMD_Handler+0x3c>)
 800227c:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <CMD_Handler+0x3c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fe5e 	bl	8001f48 <cmd_error>
		return -1;
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002290:	e003      	b.n	800229a <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff0a 	bl	80020ac <cmd_process>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000036c 	.word	0x2000036c

080022a8 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80022ac:	2302      	movs	r3, #2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fdce 	bl	8004e50 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80022b4:	2302      	movs	r3, #2
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d002      	beq.n	80022c0 <display_init+0x18>
 80022ba:	2302      	movs	r3, #2
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d107      	bne.n	80022d0 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <display_init+0x3c>)
 80022c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022c6:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <display_init+0x40>)
 80022ca:	22f0      	movs	r2, #240	; 0xf0
 80022cc:	801a      	strh	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <display_init+0x40>)
 80022d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022d6:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <display_init+0x3c>)
 80022da:	22f0      	movs	r2, #240	; 0xf0
 80022dc:	801a      	strh	r2, [r3, #0]
	}
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20001fe2 	.word	0x20001fe2
 80022e8:	20001fe4 	.word	0x20001fe4

080022ec <display_splash_screen>:

void display_splash_screen() {
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f003 f802 	bl	80052fc <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 80022f8:	2302      	movs	r3, #2
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <display_splash_screen+0xe4>)
 8002302:	4a34      	ldr	r2, [pc, #208]	; (80023d4 <display_splash_screen+0xe8>)
 8002304:	2120      	movs	r1, #32
 8002306:	4834      	ldr	r0, [pc, #208]	; (80023d8 <display_splash_screen+0xec>)
 8002308:	f009 fcec 	bl	800bce4 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 800230c:	4b33      	ldr	r3, [pc, #204]	; (80023dc <display_splash_screen+0xf0>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	461c      	mov	r4, r3
 8002312:	4831      	ldr	r0, [pc, #196]	; (80023d8 <display_splash_screen+0xec>)
 8002314:	f7fd ffcc 	bl	80002b0 <strlen>
 8002318:	4603      	mov	r3, r0
 800231a:	4a31      	ldr	r2, [pc, #196]	; (80023e0 <display_splash_screen+0xf4>)
 800231c:	8892      	ldrh	r2, [r2, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	1ae3      	subs	r3, r4, r3
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	b29c      	uxth	r4, r3
 8002328:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <display_splash_screen+0xf8>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <display_splash_screen+0xf4>)
 8002330:	88db      	ldrh	r3, [r3, #6]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	0fda      	lsrs	r2, r3, #31
 8002336:	4413      	add	r3, r2
 8002338:	105b      	asrs	r3, r3, #1
 800233a:	b29d      	uxth	r5, r3
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <display_splash_screen+0xf4>)
 800233e:	2200      	movs	r2, #0
 8002340:	9204      	str	r2, [sp, #16]
 8002342:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002346:	9203      	str	r2, [sp, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	9202      	str	r2, [sp, #8]
 800234c:	466e      	mov	r6, sp
 800234e:	1d1a      	adds	r2, r3, #4
 8002350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002354:	e886 0003 	stmia.w	r6, {r0, r1}
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <display_splash_screen+0xec>)
 800235c:	4629      	mov	r1, r5
 800235e:	4620      	mov	r0, r4
 8002360:	f003 ff3e 	bl	80061e0 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <display_splash_screen+0xf0>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461c      	mov	r4, r3
 800236a:	481f      	ldr	r0, [pc, #124]	; (80023e8 <display_splash_screen+0xfc>)
 800236c:	f7fd ffa0 	bl	80002b0 <strlen>
 8002370:	4603      	mov	r3, r0
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <display_splash_screen+0x100>)
 8002374:	8892      	ldrh	r2, [r2, #4]
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	1ae3      	subs	r3, r4, r3
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	b29c      	uxth	r4, r3
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <display_splash_screen+0xf8>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <display_splash_screen+0xf4>)
 8002388:	88db      	ldrh	r3, [r3, #6]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	0fda      	lsrs	r2, r3, #31
 800238e:	4413      	add	r3, r2
 8002390:	105b      	asrs	r3, r3, #1
 8002392:	b29b      	uxth	r3, r3
 8002394:	3319      	adds	r3, #25
 8002396:	b29d      	uxth	r5, r3
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <display_splash_screen+0x100>)
 800239a:	2200      	movs	r2, #0
 800239c:	9204      	str	r2, [sp, #16]
 800239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a2:	9203      	str	r2, [sp, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	9202      	str	r2, [sp, #8]
 80023a8:	466e      	mov	r6, sp
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b0:	e886 0003 	stmia.w	r6, {r0, r1}
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <display_splash_screen+0xfc>)
 80023b8:	4629      	mov	r1, r5
 80023ba:	4620      	mov	r0, r4
 80023bc:	f003 ff10 	bl	80061e0 <Displ_WString>

	Displ_BackLight('1');
 80023c0:	2031      	movs	r0, #49	; 0x31
 80023c2:	f003 ff4d 	bl	8006260 <Displ_BackLight>
}
 80023c6:	bf00      	nop
 80023c8:	3704      	adds	r7, #4
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08013af8 	.word	0x08013af8
 80023d4:	0800f628 	.word	0x0800f628
 80023d8:	20001fc0 	.word	0x20001fc0
 80023dc:	20001fe2 	.word	0x20001fe2
 80023e0:	20000018 	.word	0x20000018
 80023e4:	20001fe4 	.word	0x20001fe4
 80023e8:	08013afc 	.word	0x08013afc
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <display_screen1>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// main screen
void display_screen1() {
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 80023f6:	4b86      	ldr	r3, [pc, #536]	; (8002610 <display_screen1+0x220>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8122 	bne.w	8002644 <display_screen1+0x254>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <display_screen1+0x224>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8bf 	bl	8000588 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9cd 2300 	strd	r2, r3, [sp]
 8002412:	4a81      	ldr	r2, [pc, #516]	; (8002618 <display_screen1+0x228>)
 8002414:	2120      	movs	r1, #32
 8002416:	4881      	ldr	r0, [pc, #516]	; (800261c <display_screen1+0x22c>)
 8002418:	f009 fc64 	bl	800bce4 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800241c:	4b80      	ldr	r3, [pc, #512]	; (8002620 <display_screen1+0x230>)
 800241e:	2200      	movs	r2, #0
 8002420:	9204      	str	r2, [sp, #16]
 8002422:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002426:	9203      	str	r2, [sp, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	9202      	str	r2, [sp, #8]
 800242c:	466c      	mov	r4, sp
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002434:	e884 0003 	stmia.w	r4, {r0, r1}
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a78      	ldr	r2, [pc, #480]	; (800261c <display_screen1+0x22c>)
 800243c:	2107      	movs	r1, #7
 800243e:	2009      	movs	r0, #9
 8002440:	f003 fece 	bl	80061e0 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 8002444:	4b77      	ldr	r3, [pc, #476]	; (8002624 <display_screen1+0x234>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f89d 	bl	8000588 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9cd 2300 	strd	r2, r3, [sp]
 8002456:	4a74      	ldr	r2, [pc, #464]	; (8002628 <display_screen1+0x238>)
 8002458:	2120      	movs	r1, #32
 800245a:	4870      	ldr	r0, [pc, #448]	; (800261c <display_screen1+0x22c>)
 800245c:	f009 fc42 	bl	800bce4 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 8002460:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <display_screen1+0x230>)
 8002462:	2200      	movs	r2, #0
 8002464:	9204      	str	r2, [sp, #16]
 8002466:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800246a:	9203      	str	r2, [sp, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	9202      	str	r2, [sp, #8]
 8002470:	466c      	mov	r4, sp
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002478:	e884 0003 	stmia.w	r4, {r0, r1}
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a67      	ldr	r2, [pc, #412]	; (800261c <display_screen1+0x22c>)
 8002480:	2107      	movs	r1, #7
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f003 feac 	bl	80061e0 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <display_screen1+0x23c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f87b 	bl	8000588 <__aeabi_f2d>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	e9cd 2300 	strd	r2, r3, [sp]
 800249a:	4a65      	ldr	r2, [pc, #404]	; (8002630 <display_screen1+0x240>)
 800249c:	2120      	movs	r1, #32
 800249e:	485f      	ldr	r0, [pc, #380]	; (800261c <display_screen1+0x22c>)
 80024a0:	f009 fc20 	bl	800bce4 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <display_screen1+0x230>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	9204      	str	r2, [sp, #16]
 80024aa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024ae:	9203      	str	r2, [sp, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	9202      	str	r2, [sp, #8]
 80024b4:	466c      	mov	r4, sp
 80024b6:	1d1a      	adds	r2, r3, #4
 80024b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a56      	ldr	r2, [pc, #344]	; (800261c <display_screen1+0x22c>)
 80024c4:	2130      	movs	r1, #48	; 0x30
 80024c6:	2009      	movs	r0, #9
 80024c8:	f003 fe8a 	bl	80061e0 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <display_screen1+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f859 	bl	8000588 <__aeabi_f2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	e9cd 2300 	strd	r2, r3, [sp]
 80024de:	4a54      	ldr	r2, [pc, #336]	; (8002630 <display_screen1+0x240>)
 80024e0:	2120      	movs	r1, #32
 80024e2:	484e      	ldr	r0, [pc, #312]	; (800261c <display_screen1+0x22c>)
 80024e4:	f009 fbfe 	bl	800bce4 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <display_screen1+0x230>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	9204      	str	r2, [sp, #16]
 80024ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024f2:	9203      	str	r2, [sp, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	9202      	str	r2, [sp, #8]
 80024f8:	466c      	mov	r4, sp
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002500:	e884 0003 	stmia.w	r4, {r0, r1}
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a45      	ldr	r2, [pc, #276]	; (800261c <display_screen1+0x22c>)
 8002508:	2159      	movs	r1, #89	; 0x59
 800250a:	2009      	movs	r0, #9
 800250c:	f003 fe68 	bl	80061e0 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf1) );
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <display_screen1+0x248>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eef0 7ae7 	vabs.f32	s15, s15
 800251a:	ee17 0a90 	vmov	r0, s15
 800251e:	f7fe f833 	bl	8000588 <__aeabi_f2d>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	e9cd 2300 	strd	r2, r3, [sp]
 800252a:	4a44      	ldr	r2, [pc, #272]	; (800263c <display_screen1+0x24c>)
 800252c:	2120      	movs	r1, #32
 800252e:	483b      	ldr	r0, [pc, #236]	; (800261c <display_screen1+0x22c>)
 8002530:	f009 fbd8 	bl	800bce4 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <display_screen1+0x230>)
 8002536:	2200      	movs	r2, #0
 8002538:	9204      	str	r2, [sp, #16]
 800253a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253e:	9203      	str	r2, [sp, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	9202      	str	r2, [sp, #8]
 8002544:	466c      	mov	r4, sp
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a32      	ldr	r2, [pc, #200]	; (800261c <display_screen1+0x22c>)
 8002554:	2182      	movs	r1, #130	; 0x82
 8002556:	2009      	movs	r0, #9
 8002558:	f003 fe42 	bl	80061e0 <Displ_WString>
		// Angle
		if (metervalue_pf1 < 0) {
 800255c:	4b36      	ldr	r3, [pc, #216]	; (8002638 <display_screen1+0x248>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256a:	d51b      	bpl.n	80025a4 <display_screen1+0x1b4>
			snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <display_screen1+0x248>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe f809 	bl	8000588 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	ec43 2b10 	vmov	d0, r2, r3
 800257e:	f00c fb0b 	bl	800eb98 <acos>
 8002582:	ec51 0b10 	vmov	r0, r1, d0
 8002586:	a320      	add	r3, pc, #128	; (adr r3, 8002608 <display_screen1+0x218>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe f854 	bl	8000638 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9cd 2300 	strd	r2, r3, [sp]
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <display_screen1+0x250>)
 800259a:	2120      	movs	r1, #32
 800259c:	481f      	ldr	r0, [pc, #124]	; (800261c <display_screen1+0x22c>)
 800259e:	f009 fba1 	bl	800bce4 <sniprintf>
 80025a2:	e01a      	b.n	80025da <display_screen1+0x1ea>
		} else {
			snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <display_screen1+0x248>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffed 	bl	8000588 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	ec43 2b10 	vmov	d0, r2, r3
 80025b6:	f00c faef 	bl	800eb98 <acos>
 80025ba:	ec51 0b10 	vmov	r0, r1, d0
 80025be:	a312      	add	r3, pc, #72	; (adr r3, 8002608 <display_screen1+0x218>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f838 	bl	8000638 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	e9cd 2300 	strd	r2, r3, [sp]
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <display_screen1+0x238>)
 80025d2:	2120      	movs	r1, #32
 80025d4:	4811      	ldr	r0, [pc, #68]	; (800261c <display_screen1+0x22c>)
 80025d6:	f009 fb85 	bl	800bce4 <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <display_screen1+0x230>)
 80025dc:	2200      	movs	r2, #0
 80025de:	9204      	str	r2, [sp, #16]
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	9203      	str	r2, [sp, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	9202      	str	r2, [sp, #8]
 80025ea:	466c      	mov	r4, sp
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <display_screen1+0x22c>)
 80025fa:	2182      	movs	r1, #130	; 0x82
 80025fc:	208a      	movs	r0, #138	; 0x8a
 80025fe:	f003 fdef 	bl	80061e0 <Displ_WString>
 8002602:	e097      	b.n	8002734 <display_screen1+0x344>
 8002604:	f3af 8000 	nop.w
 8002608:	1af05a77 	.word	0x1af05a77
 800260c:	404ca5dc 	.word	0x404ca5dc
 8002610:	2000028c 	.word	0x2000028c
 8002614:	20007f14 	.word	0x20007f14
 8002618:	0800f644 	.word	0x0800f644
 800261c:	20001fc0 	.word	0x20001fc0
 8002620:	20000024 	.word	0x20000024
 8002624:	20007f18 	.word	0x20007f18
 8002628:	0800f64c 	.word	0x0800f64c
 800262c:	20007f1c 	.word	0x20007f1c
 8002630:	0800f654 	.word	0x0800f654
 8002634:	20007f20 	.word	0x20007f20
 8002638:	20007f24 	.word	0x20007f24
 800263c:	0800f65c 	.word	0x0800f65c
 8002640:	0800f664 	.word	0x0800f664
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 8002644:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <display_screen1+0x350>)
 8002646:	2200      	movs	r2, #0
 8002648:	9204      	str	r2, [sp, #16]
 800264a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800264e:	9203      	str	r2, [sp, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	9202      	str	r2, [sp, #8]
 8002654:	466c      	mov	r4, sp
 8002656:	1d1a      	adds	r2, r3, #4
 8002658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a38      	ldr	r2, [pc, #224]	; (8002744 <display_screen1+0x354>)
 8002664:	2107      	movs	r1, #7
 8002666:	2009      	movs	r0, #9
 8002668:	f003 fdba 	bl	80061e0 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <display_screen1+0x350>)
 800266e:	2200      	movs	r2, #0
 8002670:	9204      	str	r2, [sp, #16]
 8002672:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 8002676:	9203      	str	r2, [sp, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	9202      	str	r2, [sp, #8]
 800267c:	466c      	mov	r4, sp
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	e884 0003 	stmia.w	r4, {r0, r1}
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2f      	ldr	r2, [pc, #188]	; (8002748 <display_screen1+0x358>)
 800268c:	2107      	movs	r1, #7
 800268e:	2078      	movs	r0, #120	; 0x78
 8002690:	f003 fda6 	bl	80061e0 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 8002694:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <display_screen1+0x350>)
 8002696:	2200      	movs	r2, #0
 8002698:	9204      	str	r2, [sp, #16]
 800269a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800269e:	9203      	str	r2, [sp, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	9202      	str	r2, [sp, #8]
 80026a4:	466c      	mov	r4, sp
 80026a6:	1d1a      	adds	r2, r3, #4
 80026a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <display_screen1+0x35c>)
 80026b4:	2130      	movs	r1, #48	; 0x30
 80026b6:	2009      	movs	r0, #9
 80026b8:	f003 fd92 	bl	80061e0 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <display_screen1+0x350>)
 80026be:	2200      	movs	r2, #0
 80026c0:	9204      	str	r2, [sp, #16]
 80026c2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026c6:	9203      	str	r2, [sp, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	9202      	str	r2, [sp, #8]
 80026cc:	466c      	mov	r4, sp
 80026ce:	1d1a      	adds	r2, r3, #4
 80026d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1c      	ldr	r2, [pc, #112]	; (800274c <display_screen1+0x35c>)
 80026dc:	2159      	movs	r1, #89	; 0x59
 80026de:	2009      	movs	r0, #9
 80026e0:	f003 fd7e 	bl	80061e0 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <display_screen1+0x350>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	9204      	str	r2, [sp, #16]
 80026ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ee:	9203      	str	r2, [sp, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	466c      	mov	r4, sp
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <display_screen1+0x360>)
 8002704:	2182      	movs	r1, #130	; 0x82
 8002706:	2009      	movs	r0, #9
 8002708:	f003 fd6a 	bl	80061e0 <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <display_screen1+0x350>)
 800270e:	2200      	movs	r2, #0
 8002710:	9204      	str	r2, [sp, #16]
 8002712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002716:	9203      	str	r2, [sp, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	9202      	str	r2, [sp, #8]
 800271c:	466c      	mov	r4, sp
 800271e:	1d1a      	adds	r2, r3, #4
 8002720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002724:	e884 0003 	stmia.w	r4, {r0, r1}
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <display_screen1+0x358>)
 800272c:	2182      	movs	r1, #130	; 0x82
 800272e:	208a      	movs	r0, #138	; 0x8a
 8002730:	f003 fd56 	bl	80061e0 <Displ_WString>
		}
	display_show_curves();
 8002734:	f000 fd78 	bl	8003228 <display_show_curves>
}
 8002738:	bf00      	nop
 800273a:	3704      	adds	r7, #4
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	20000024 	.word	0x20000024
 8002744:	0800f66c 	.word	0x0800f66c
 8002748:	0800f670 	.word	0x0800f670
 800274c:	0800f678 	.word	0x0800f678
 8002750:	0800f680 	.word	0x0800f680

08002754 <display_screen2>:

void display_screen2() {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af06      	add	r7, sp, #24
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <display_update_meter+0x7c>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	429a      	cmp	r2, r3
 8002776:	d023      	beq.n	80027c0 <display_update_meter+0x5c>
		switch(screen) {
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d002      	beq.n	8002784 <display_update_meter+0x20>
 800277e:	2b02      	cmp	r3, #2
 8002780:	d003      	beq.n	800278a <display_update_meter+0x26>
 8002782:	e01a      	b.n	80027ba <display_update_meter+0x56>
		case 1:
			display_meter_mask();
 8002784:	f000 f83e 	bl	8002804 <display_meter_mask>
			break;
 8002788:	e017      	b.n	80027ba <display_update_meter+0x56>
		case 2:
			Displ_CLS(BLACK);
 800278a:	2000      	movs	r0, #0
 800278c:	f002 fdb6 	bl	80052fc <Displ_CLS>
			Displ_WString(20, 20, "Screen 2" , Font24, 1, WHITE, BLACK);
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <display_update_meter+0x80>)
 8002792:	2200      	movs	r2, #0
 8002794:	9204      	str	r2, [sp, #16]
 8002796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800279a:	9203      	str	r2, [sp, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	466c      	mov	r4, sp
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <display_update_meter+0x84>)
 80027b0:	2114      	movs	r1, #20
 80027b2:	2014      	movs	r0, #20
 80027b4:	f003 fd14 	bl	80061e0 <Displ_WString>
			break;
 80027b8:	bf00      	nop

		}
		last_screen = screen;
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <display_update_meter+0x7c>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <display_update_meter+0x68>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <display_update_meter+0x6e>
		break;
	case 2:
		display_screen2();
		break;
	}
}
 80027ca:	e005      	b.n	80027d8 <display_update_meter+0x74>
		display_screen1();
 80027cc:	f7ff fe10 	bl	80023f0 <display_screen1>
		break;
 80027d0:	e002      	b.n	80027d8 <display_update_meter+0x74>
		display_screen2();
 80027d2:	f7ff ffbf 	bl	8002754 <display_screen2>
		break;
 80027d6:	bf00      	nop
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}
 80027e0:	20001fe0 	.word	0x20001fe0
 80027e4:	20000018 	.word	0x20000018
 80027e8:	0800f688 	.word	0x0800f688

080027ec <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
	last_screen = 0;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <display_update_mask+0x14>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	20001fe0 	.word	0x20001fe0

08002804 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 800280e:	2328      	movs	r3, #40	; 0x28
 8002810:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8002812:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002816:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8002818:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800281c:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 800281e:	2300      	movs	r3, #0
 8002820:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fd69 	bl	80052fc <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800282a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800282e:	4ba5      	ldr	r3, [pc, #660]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	b21a      	sxth	r2, r3
 8002838:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4603      	mov	r3, r0
 8002842:	2000      	movs	r0, #0
 8002844:	f002 ff43 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002848:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800284c:	89fa      	ldrh	r2, [r7, #14]
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	b21a      	sxth	r2, r3
 8002856:	897b      	ldrh	r3, [r7, #10]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	2200      	movs	r2, #0
 800285e:	2000      	movs	r0, #0
 8002860:	f002 ff35 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002864:	89fa      	ldrh	r2, [r7, #14]
 8002866:	89bb      	ldrh	r3, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	b219      	sxth	r1, r3
 800286e:	4b95      	ldr	r3, [pc, #596]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	b29b      	uxth	r3, r3
 8002876:	b218      	sxth	r0, r3
 8002878:	89fa      	ldrh	r2, [r7, #14]
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	4413      	add	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	b21a      	sxth	r2, r3
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	4602      	mov	r2, r0
 800288a:	2000      	movs	r0, #0
 800288c:	f002 ff1f 	bl	80056ce <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8002890:	4b8c      	ldr	r3, [pc, #560]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	3b01      	subs	r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	b218      	sxth	r0, r3
 800289a:	89fa      	ldrh	r2, [r7, #14]
 800289c:	89bb      	ldrh	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b219      	sxth	r1, r3
 80028a4:	4b87      	ldr	r3, [pc, #540]	; (8002ac4 <display_meter_mask+0x2c0>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2300      	movs	r3, #0
 80028b4:	f002 ff0b 	bl	80056ce <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	3309      	adds	r3, #9
 80028bc:	b29c      	uxth	r4, r3
 80028be:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <display_meter_mask+0x2c4>)
 80028c0:	88fa      	ldrh	r2, [r7, #6]
 80028c2:	9204      	str	r2, [sp, #16]
 80028c4:	893a      	ldrh	r2, [r7, #8]
 80028c6:	9203      	str	r2, [sp, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	9202      	str	r2, [sp, #8]
 80028cc:	466d      	mov	r5, sp
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2256      	movs	r2, #86	; 0x56
 80028dc:	4621      	mov	r1, r4
 80028de:	204b      	movs	r0, #75	; 0x4b
 80028e0:	f003 fa00 	bl	8005ce4 <Displ_WChar>
	font_col = ORANGE;
 80028e4:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80028e8:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <display_meter_mask+0x2c0>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	3b1e      	subs	r3, #30
 80028f0:	b29c      	uxth	r4, r3
 80028f2:	4b75      	ldr	r3, [pc, #468]	; (8002ac8 <display_meter_mask+0x2c4>)
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	9204      	str	r2, [sp, #16]
 80028f8:	893a      	ldrh	r2, [r7, #8]
 80028fa:	9203      	str	r2, [sp, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	9202      	str	r2, [sp, #8]
 8002900:	466d      	mov	r5, sp
 8002902:	1d1a      	adds	r2, r3, #4
 8002904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002908:	e885 0003 	stmia.w	r5, {r0, r1}
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2241      	movs	r2, #65	; 0x41
 8002910:	2109      	movs	r1, #9
 8002912:	4620      	mov	r0, r4
 8002914:	f003 f9e6 	bl	8005ce4 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002918:	89ba      	ldrh	r2, [r7, #12]
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	4413      	add	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002924:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002928:	813b      	strh	r3, [r7, #8]
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800292e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	3b01      	subs	r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	b21a      	sxth	r2, r3
 800293c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	2000      	movs	r0, #0
 8002948:	f002 fec1 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800294c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002950:	89fa      	ldrh	r2, [r7, #14]
 8002952:	89bb      	ldrh	r3, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	b21a      	sxth	r2, r3
 800295a:	897b      	ldrh	r3, [r7, #10]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	2200      	movs	r2, #0
 8002962:	2000      	movs	r0, #0
 8002964:	f002 feb3 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002968:	89fa      	ldrh	r2, [r7, #14]
 800296a:	89bb      	ldrh	r3, [r7, #12]
 800296c:	4413      	add	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	b219      	sxth	r1, r3
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	b29b      	uxth	r3, r3
 800297a:	b218      	sxth	r0, r3
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	89bb      	ldrh	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	b21a      	sxth	r2, r3
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	4602      	mov	r2, r0
 800298e:	2000      	movs	r0, #0
 8002990:	f002 fe9d 	bl	80056ce <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	3b01      	subs	r3, #1
 800299a:	b29b      	uxth	r3, r3
 800299c:	b218      	sxth	r0, r3
 800299e:	89fa      	ldrh	r2, [r7, #14]
 80029a0:	89bb      	ldrh	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b219      	sxth	r1, r3
 80029a8:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <display_meter_mask+0x2c0>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4623      	mov	r3, r4
 80029bc:	f002 fe87 	bl	80056ce <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 80029c0:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <display_meter_mask+0x2c0>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	3b50      	subs	r3, #80	; 0x50
 80029c6:	b29c      	uxth	r4, r3
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	3309      	adds	r3, #9
 80029cc:	b29d      	uxth	r5, r3
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <display_meter_mask+0x2c4>)
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	9204      	str	r2, [sp, #16]
 80029d4:	893a      	ldrh	r2, [r7, #8]
 80029d6:	9203      	str	r2, [sp, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	9202      	str	r2, [sp, #8]
 80029dc:	466e      	mov	r6, sp
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e4:	e886 0003 	stmia.w	r6, {r0, r1}
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a38      	ldr	r2, [pc, #224]	; (8002acc <display_meter_mask+0x2c8>)
 80029ec:	4629      	mov	r1, r5
 80029ee:	4620      	mov	r0, r4
 80029f0:	f003 fbf6 	bl	80061e0 <Displ_WString>
	// W
	ypos += box_height+1;
 80029f4:	89ba      	ldrh	r2, [r7, #12]
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	4413      	add	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002a00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	893b      	ldrh	r3, [r7, #8]
 8002a08:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002a0a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002a1c:	897b      	ldrh	r3, [r7, #10]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4603      	mov	r3, r0
 8002a22:	2000      	movs	r0, #0
 8002a24:	f002 fe53 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002a28:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a2c:	89fa      	ldrh	r2, [r7, #14]
 8002a2e:	89bb      	ldrh	r3, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f002 fe45 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a44:	89fa      	ldrh	r2, [r7, #14]
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	4413      	add	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b219      	sxth	r1, r3
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b218      	sxth	r0, r3
 8002a58:	89fa      	ldrh	r2, [r7, #14]
 8002a5a:	89bb      	ldrh	r3, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	4602      	mov	r2, r0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f002 fe2f 	bl	80056ce <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002a70:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	b218      	sxth	r0, r3
 8002a7a:	89fa      	ldrh	r2, [r7, #14]
 8002a7c:	89bb      	ldrh	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	b219      	sxth	r1, r3
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4623      	mov	r3, r4
 8002a98:	f002 fe19 	bl	80056ce <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <display_meter_mask+0x2c0>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	3b50      	subs	r3, #80	; 0x50
 8002aa2:	b29c      	uxth	r4, r3
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
 8002aa6:	3309      	adds	r3, #9
 8002aa8:	b29d      	uxth	r5, r3
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <display_meter_mask+0x2c4>)
 8002aac:	88fa      	ldrh	r2, [r7, #6]
 8002aae:	9204      	str	r2, [sp, #16]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	9203      	str	r2, [sp, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	9202      	str	r2, [sp, #8]
 8002ab8:	466e      	mov	r6, sp
 8002aba:	1d1a      	adds	r2, r3, #4
 8002abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac0:	e006      	b.n	8002ad0 <display_meter_mask+0x2cc>
 8002ac2:	bf00      	nop
 8002ac4:	20001fe2 	.word	0x20001fe2
 8002ac8:	20000018 	.word	0x20000018
 8002acc:	0800f694 	.word	0x0800f694
 8002ad0:	e886 0003 	stmia.w	r6, {r0, r1}
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2257      	movs	r2, #87	; 0x57
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4620      	mov	r0, r4
 8002adc:	f003 f902 	bl	8005ce4 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002ae0:	89ba      	ldrh	r2, [r7, #12]
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af0:	813b      	strh	r3, [r7, #8]
 8002af2:	893b      	ldrh	r3, [r7, #8]
 8002af4:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002af6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <display_meter_mask+0x478>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b08:	897b      	ldrh	r3, [r7, #10]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f002 fddd 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002b14:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b18:	89fa      	ldrh	r2, [r7, #14]
 8002b1a:	89bb      	ldrh	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	b21a      	sxth	r2, r3
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f002 fdcf 	bl	80056ce <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b30:	89fa      	ldrh	r2, [r7, #14]
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b219      	sxth	r1, r3
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <display_meter_mask+0x478>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b218      	sxth	r0, r3
 8002b44:	89fa      	ldrh	r2, [r7, #14]
 8002b46:	89bb      	ldrh	r3, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	4602      	mov	r2, r0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f002 fdb9 	bl	80056ce <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002b5c:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <display_meter_mask+0x478>)
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b218      	sxth	r0, r3
 8002b66:	89fa      	ldrh	r2, [r7, #14]
 8002b68:	89bb      	ldrh	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b219      	sxth	r1, r3
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <display_meter_mask+0x478>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b21a      	sxth	r2, r3
 8002b7a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4623      	mov	r3, r4
 8002b84:	f002 fda3 	bl	80056ce <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	3309      	adds	r3, #9
 8002b8c:	b29c      	uxth	r4, r3
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <display_meter_mask+0x47c>)
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	9204      	str	r2, [sp, #16]
 8002b94:	893a      	ldrh	r2, [r7, #8]
 8002b96:	9203      	str	r2, [sp, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	9202      	str	r2, [sp, #8]
 8002b9c:	466d      	mov	r5, sp
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <display_meter_mask+0x480>)
 8002bac:	4621      	mov	r1, r4
 8002bae:	205f      	movs	r0, #95	; 0x5f
 8002bb0:	f003 fb16 	bl	80061e0 <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <display_meter_mask+0x478>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	3b16      	subs	r3, #22
 8002bba:	b29c      	uxth	r4, r3
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <display_meter_mask+0x484>)
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	9204      	str	r2, [sp, #16]
 8002bc2:	893a      	ldrh	r2, [r7, #8]
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	9202      	str	r2, [sp, #8]
 8002bca:	466d      	mov	r5, sp
 8002bcc:	1d1a      	adds	r2, r3, #4
 8002bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2260      	movs	r2, #96	; 0x60
 8002bda:	2182      	movs	r1, #130	; 0x82
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f003 f881 	bl	8005ce4 <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002be2:	89ba      	ldrh	r2, [r7, #12]
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	4413      	add	r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002bee:	231f      	movs	r3, #31
 8002bf0:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002bf2:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <display_meter_mask+0x488>)
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <display_meter_mask+0x48c>)
 8002c08:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <display_meter_mask+0x48c>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	89fb      	ldrh	r3, [r7, #14]
 8002c14:	4413      	add	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <display_meter_mask+0x490>)
 8002c20:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002c22:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <display_meter_mask+0x478>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b218      	sxth	r0, r3
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <display_meter_mask+0x488>)
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b21c      	sxth	r4, r3
 8002c38:	2302      	movs	r3, #2
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	897a      	ldrh	r2, [r7, #10]
 8002c3e:	9201      	str	r2, [sp, #4]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4623      	mov	r3, r4
 8002c44:	4602      	mov	r2, r0
 8002c46:	2000      	movs	r0, #0
 8002c48:	f002 fe72 	bl	8005930 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002c4c:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <display_meter_mask+0x494>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b218      	sxth	r0, r3
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <display_meter_mask+0x490>)
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b219      	sxth	r1, r3
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <display_meter_mask+0x494>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	33d2      	adds	r3, #210	; 0xd2
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <display_meter_mask+0x490>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002c6c:	9400      	str	r4, [sp, #0]
 8002c6e:	f002 fd2e 	bl	80056ce <Displ_Line>
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20001fe2 	.word	0x20001fe2
 8002c80:	20000018 	.word	0x20000018
 8002c84:	0800f698 	.word	0x0800f698
 8002c88:	20000024 	.word	0x20000024
 8002c8c:	20001fe4 	.word	0x20001fe4
 8002c90:	20000008 	.word	0x20000008
 8002c94:	200006b8 	.word	0x200006b8
 8002c98:	2000000a 	.word	0x2000000a

08002c9c <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca6:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cac:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002cae:	4b3a      	ldr	r3, [pc, #232]	; (8002d98 <display_align_curves+0xfc>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da20      	bge.n	8002cf8 <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	e016      	b.n	8002cea <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002cbc:	4a37      	ldr	r2, [pc, #220]	; (8002d9c <display_align_curves+0x100>)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002cc4:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <display_align_curves+0x104>)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <display_align_curves+0x100>)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002cd4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002cd8:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <display_align_curves+0x104>)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002cf0:	d3e4      	bcc.n	8002cbc <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002cf2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002cf6:	e049      	b.n	8002d8c <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <display_align_curves+0xfc>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	e019      	b.n	8002d34 <display_align_curves+0x98>
		dest_idx++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <display_align_curves+0x100>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d0e:	4a24      	ldr	r2, [pc, #144]	; (8002da0 <display_align_curves+0x104>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d16:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <display_align_curves+0x100>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <display_align_curves+0x104>)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d3a:	d3e1      	bcc.n	8002d00 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002d3c:	2314      	movs	r3, #20
 8002d3e:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	e019      	b.n	8002d7a <display_align_curves+0xde>
		dest_idx++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <display_align_curves+0x100>)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <display_align_curves+0x104>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d5c:	4a0f      	ldr	r2, [pc, #60]	; (8002d9c <display_align_curves+0x100>)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d64:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <display_align_curves+0x104>)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <display_align_curves+0xfc>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	dbe0      	blt.n	8002d46 <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	2000023c 	.word	0x2000023c
 8002d9c:	200071f4 	.word	0x200071f4
 8002da0:	200006bc 	.word	0x200006bc

08002da4 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af06      	add	r7, sp, #24
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
 8002dae:	460b      	mov	r3, r1
 8002db0:	717b      	strb	r3, [r7, #5]
 8002db2:	4613      	mov	r3, r2
 8002db4:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8002db6:	797b      	ldrb	r3, [r7, #5]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <draw_curve+0x20>
 8002dbc:	4b65      	ldr	r3, [pc, #404]	; (8002f54 <draw_curve+0x1b0>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d015      	beq.n	8002df0 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <draw_curve+0x1b4>)
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <draw_curve+0x1b8>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b02      	subs	r3, #2
 8002dd2:	b299      	uxth	r1, r3
 8002dd4:	4b62      	ldr	r3, [pc, #392]	; (8002f60 <draw_curve+0x1bc>)
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b5e      	ldr	r3, [pc, #376]	; (8002f5c <draw_curve+0x1b8>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	2000      	movs	r0, #0
 8002de8:	9000      	str	r0, [sp, #0]
 8002dea:	2002      	movs	r0, #2
 8002dec:	f002 f8d2 	bl	8004f94 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8002df0:	4b58      	ldr	r3, [pc, #352]	; (8002f54 <draw_curve+0x1b0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d023      	beq.n	8002e40 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8002df8:	4b5a      	ldr	r3, [pc, #360]	; (8002f64 <draw_curve+0x1c0>)
 8002dfa:	889a      	ldrh	r2, [r3, #4]
 8002dfc:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <draw_curve+0x1c4>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	b29c      	uxth	r4, r3
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <draw_curve+0x1c8>)
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	4b56      	ldr	r3, [pc, #344]	; (8002f64 <draw_curve+0x1c0>)
 8002e0a:	88db      	ldrh	r3, [r3, #6]
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b29d      	uxth	r5, r3
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <draw_curve+0x1c0>)
 8002e16:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e1a:	9204      	str	r2, [sp, #16]
 8002e1c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e20:	9203      	str	r2, [sp, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	9202      	str	r2, [sp, #8]
 8002e26:	466e      	mov	r6, sp
 8002e28:	1d1a      	adds	r2, r3, #4
 8002e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e2e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4e      	ldr	r2, [pc, #312]	; (8002f70 <draw_curve+0x1cc>)
 8002e36:	4629      	mov	r1, r5
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f003 f9d1 	bl	80061e0 <Displ_WString>
		return;
 8002e3e:	e086      	b.n	8002f4e <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8002e40:	793b      	ldrb	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04c      	beq.n	8002ee0 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002e46:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <draw_curve+0x1c4>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b218      	sxth	r0, r3
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <draw_curve+0x1c8>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b219      	sxth	r1, r3
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <draw_curve+0x1c4>)
 8002e54:	881a      	ldrh	r2, [r3, #0]
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <draw_curve+0x1d0>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b21a      	sxth	r2, r3
 8002e60:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <draw_curve+0x1c8>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b21b      	sxth	r3, r3
 8002e66:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e6a:	9400      	str	r4, [sp, #0]
 8002e6c:	f002 fc2f 	bl	80056ce <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_len; x++) {
 8002e70:	2301      	movs	r3, #1
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	e02d      	b.n	8002ed2 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <draw_curve+0x1c4>)
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b218      	sxth	r0, r3
 8002e88:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <draw_curve+0x1c8>)
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	4939      	ldr	r1, [pc, #228]	; (8002f78 <draw_curve+0x1d4>)
 8002e92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b219      	sxth	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <draw_curve+0x1c4>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b21c      	sxth	r4, r3
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <draw_curve+0x1c8>)
 8002eae:	881a      	ldrh	r2, [r3, #0]
 8002eb0:	4d31      	ldr	r5, [pc, #196]	; (8002f78 <draw_curve+0x1d4>)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	f002 fc01 	bl	80056ce <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <draw_curve+0x1d0>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4293      	cmp	r3, r2
 8002edc:	dbcb      	blt.n	8002e76 <draw_curve+0xd2>
 8002ede:	e036      	b.n	8002f4e <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_len; x++) {
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	e02d      	b.n	8002f42 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <draw_curve+0x1c4>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b218      	sxth	r0, r3
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <draw_curve+0x1c8>)
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	491d      	ldr	r1, [pc, #116]	; (8002f78 <draw_curve+0x1d4>)
 8002f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b219      	sxth	r1, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <draw_curve+0x1c4>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b21c      	sxth	r4, r3
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <draw_curve+0x1c8>)
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	4d15      	ldr	r5, [pc, #84]	; (8002f78 <draw_curve+0x1d4>)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b21a      	sxth	r2, r3
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	4622      	mov	r2, r4
 8002f38:	f002 fbc9 	bl	80056ce <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <draw_curve+0x1d0>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	dbcb      	blt.n	8002ee6 <draw_curve+0x142>
		}
	}
}
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f54:	2000028c 	.word	0x2000028c
 8002f58:	20001fe4 	.word	0x20001fe4
 8002f5c:	20000008 	.word	0x20000008
 8002f60:	20001fe2 	.word	0x20001fe2
 8002f64:	20000018 	.word	0x20000018
 8002f68:	2000000a 	.word	0x2000000a
 8002f6c:	200006b8 	.word	0x200006b8
 8002f70:	0800f69c 	.word	0x0800f69c
 8002f74:	20001fbc 	.word	0x20001fbc
 8002f78:	20000370 	.word	0x20000370

08002f7c <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum) {
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b093      	sub	sp, #76	; 0x4c
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	int value;
	int scale_factor = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
	int src_idx = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
	int zero_value = ADC_FS_RAW / 2;	// zero should be half way if DC-Bias is accurate
 8002f8e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002f92:	637b      	str	r3, [r7, #52]	; 0x34
	//	zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
	}

	//term_print("zero_value = %d\r\n", zero_value);

	float fScale = (float)curve_y_size / (float)sample_buf_meta[bufnum].max;
 8002f94:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <make_curve+0x294>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa0:	79fa      	ldrb	r2, [r7, #7]
 8002fa2:	499c      	ldr	r1, [pc, #624]	; (8003214 <make_curve+0x298>)
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3302      	adds	r3, #2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (fScale < 1) {
 8002fc2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d51f      	bpl.n	8003014 <make_curve+0x98>
		scale_factor = trunc(1/fScale)+1; // divisor
 8002fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe0:	ee16 0a90 	vmov	r0, s13
 8002fe4:	f7fd fad0 	bl	8000588 <__aeabi_f2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	ec43 2b10 	vmov	d0, r2, r3
 8002ff0:	f00c f9be 	bl	800f370 <trunc>
 8002ff4:	ec51 0b10 	vmov	r0, r1, d0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	4b86      	ldr	r3, [pc, #536]	; (8003218 <make_curve+0x29c>)
 8002ffe:	f7fd f965 	bl	80002cc <__adddf3>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fdc5 	bl	8000b98 <__aeabi_d2iz>
 800300e:	4603      	mov	r3, r0
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	e010      	b.n	8003036 <make_curve+0xba>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8003014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003016:	f7fd fab7 	bl	8000588 <__aeabi_f2d>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	ec43 2b10 	vmov	d0, r2, r3
 8003022:	f00c f9a5 	bl	800f370 <trunc>
 8003026:	ec53 2b10 	vmov	r2, r3, d0
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fdb3 	bl	8000b98 <__aeabi_d2iz>
 8003032:	4603      	mov	r3, r0
 8003034:	647b      	str	r3, [r7, #68]	; 0x44
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;		// half the data points to fit screen size
 8003036:	f7ff fe31 	bl	8002c9c <display_align_curves>
 800303a:	4603      	mov	r3, r0
 800303c:	0fda      	lsrs	r2, r3, #31
 800303e:	4413      	add	r3, r2
 8003040:	105b      	asrs	r3, r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b75      	ldr	r3, [pc, #468]	; (800321c <make_curve+0x2a0>)
 8003046:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <make_curve+0x294>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	085b      	lsrs	r3, r3, #1
 800304e:	b29b      	uxth	r3, r3
 8003050:	f1c3 0301 	rsb	r3, r3, #1
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003056:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800305a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d567      	bpl.n	8003138 <make_curve+0x1bc>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	496d      	ldr	r1, [pc, #436]	; (8003220 <make_curve+0x2a4>)
 800306c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003070:	fb03 f202 	mul.w	r2, r3, r2
 8003074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003076:	4413      	add	r3, r2
 8003078:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800307c:	461c      	mov	r4, r3
 800307e:	79fa      	ldrb	r2, [r7, #7]
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	3301      	adds	r3, #1
 8003084:	4966      	ldr	r1, [pc, #408]	; (8003220 <make_curve+0x2a4>)
 8003086:	f44f 7048 	mov.w	r0, #800	; 0x320
 800308a:	fb00 f202 	mul.w	r2, r0, r2
 800308e:	4413      	add	r3, r2
 8003090:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003094:	4423      	add	r3, r4
 8003096:	0fda      	lsrs	r2, r3, #31
 8003098:	4413      	add	r3, r2
 800309a:	105b      	asrs	r3, r3, #1
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bfb8      	it	lt
 80030b8:	4613      	movlt	r3, r2
 80030ba:	4a5a      	ldr	r2, [pc, #360]	; (8003224 <make_curve+0x2a8>)
 80030bc:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80030be:	2301      	movs	r3, #1
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	e032      	b.n	800312a <make_curve+0x1ae>
			src_idx+=2;
 80030c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c6:	3302      	adds	r3, #2
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	4954      	ldr	r1, [pc, #336]	; (8003220 <make_curve+0x2a4>)
 80030ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80030d2:	fb03 f202 	mul.w	r2, r3, r2
 80030d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d8:	4413      	add	r3, r2
 80030da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030de:	461c      	mov	r4, r3
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	3301      	adds	r3, #1
 80030e6:	494e      	ldr	r1, [pc, #312]	; (8003220 <make_curve+0x2a4>)
 80030e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030ec:	fb00 f202 	mul.w	r2, r0, r2
 80030f0:	4413      	add	r3, r2
 80030f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030f6:	4423      	add	r3, r4
 80030f8:	0fda      	lsrs	r2, r3, #31
 80030fa:	4413      	add	r3, r2
 80030fc:	105b      	asrs	r3, r3, #1
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003104:	1ad2      	subs	r2, r2, r3
 8003106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003108:	fb92 f3f3 	sdiv	r3, r2, r3
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	bfb8      	it	lt
 800311a:	461a      	movlt	r2, r3
 800311c:	4941      	ldr	r1, [pc, #260]	; (8003224 <make_curve+0x2a8>)
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003126:	3301      	adds	r3, #1
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800312a:	4b3c      	ldr	r3, [pc, #240]	; (800321c <make_curve+0x2a0>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	4293      	cmp	r3, r2
 8003134:	dbc6      	blt.n	80030c4 <make_curve+0x148>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 8003136:	e066      	b.n	8003206 <make_curve+0x28a>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	4939      	ldr	r1, [pc, #228]	; (8003220 <make_curve+0x2a4>)
 800313c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003140:	fb03 f202 	mul.w	r2, r3, r2
 8003144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003146:	4413      	add	r3, r2
 8003148:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800314c:	461c      	mov	r4, r3
 800314e:	79fa      	ldrb	r2, [r7, #7]
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	3301      	adds	r3, #1
 8003154:	4932      	ldr	r1, [pc, #200]	; (8003220 <make_curve+0x2a4>)
 8003156:	f44f 7048 	mov.w	r0, #800	; 0x320
 800315a:	fb00 f202 	mul.w	r2, r0, r2
 800315e:	4413      	add	r3, r2
 8003160:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003164:	4423      	add	r3, r4
 8003166:	0fda      	lsrs	r2, r3, #31
 8003168:	4413      	add	r3, r2
 800316a:	105b      	asrs	r3, r3, #1
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800316e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	1ad2      	subs	r2, r2, r3
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	4293      	cmp	r3, r2
 8003186:	bfb8      	it	lt
 8003188:	4613      	movlt	r3, r2
 800318a:	4a26      	ldr	r2, [pc, #152]	; (8003224 <make_curve+0x2a8>)
 800318c:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800318e:	2301      	movs	r3, #1
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
 8003192:	e032      	b.n	80031fa <make_curve+0x27e>
			src_idx+=2;
 8003194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003196:	3302      	adds	r3, #2
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	4920      	ldr	r1, [pc, #128]	; (8003220 <make_curve+0x2a4>)
 800319e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	4413      	add	r3, r2
 80031aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031ae:	461c      	mov	r4, r3
 80031b0:	79fa      	ldrb	r2, [r7, #7]
 80031b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b4:	3301      	adds	r3, #1
 80031b6:	491a      	ldr	r1, [pc, #104]	; (8003220 <make_curve+0x2a4>)
 80031b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031bc:	fb00 f202 	mul.w	r2, r0, r2
 80031c0:	4413      	add	r3, r2
 80031c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031c6:	4423      	add	r3, r4
 80031c8:	0fda      	lsrs	r2, r3, #31
 80031ca:	4413      	add	r3, r2
 80031cc:	105b      	asrs	r3, r3, #1
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 80031d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bfb8      	it	lt
 80031ea:	461a      	movlt	r2, r3
 80031ec:	490d      	ldr	r1, [pc, #52]	; (8003224 <make_curve+0x2a8>)
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	3301      	adds	r3, #1
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <make_curve+0x2a0>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	4293      	cmp	r3, r2
 8003204:	dbc6      	blt.n	8003194 <make_curve+0x218>
}
 8003206:	bf00      	nop
 8003208:	374c      	adds	r7, #76	; 0x4c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000008 	.word	0x20000008
 8003214:	2000023c 	.word	0x2000023c
 8003218:	3ff00000 	.word	0x3ff00000
 800321c:	20001fbc 	.word	0x20001fbc
 8003220:	200006bc 	.word	0x200006bc
 8003224:	20000370 	.word	0x20000370

08003228 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
	uint8_t dont_clear = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 8003232:	2300      	movs	r3, #0
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	e01e      	b.n	8003276 <display_show_curves+0x4e>
		make_curve(i);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fe9d 	bl	8002f7c <make_curve>
		draw_curve(channel_colour[i], dont_clear, (sample_buf_meta[i].zero_cross_pos >= 0));
 8003242:	4a11      	ldr	r2, [pc, #68]	; (8003288 <display_show_curves+0x60>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800324a:	4910      	ldr	r1, [pc, #64]	; (800328c <display_show_curves+0x64>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3304      	adds	r3, #4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	43db      	mvns	r3, r3
 800325e:	0fdb      	lsrs	r3, r3, #31
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	4619      	mov	r1, r3
 8003268:	f7ff fd9c 	bl	8002da4 <draw_curve>
		dont_clear = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	dddd      	ble.n	8003238 <display_show_curves+0x10>
	}
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	2000023c 	.word	0x2000023c

08003290 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d81a      	bhi.n	80032d6 <display_show_curve+0x46>

	make_curve(bufnum);
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe6a 	bl	8002f7c <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <display_show_curve+0x50>)
 80032ac:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	490c      	ldr	r1, [pc, #48]	; (80032e4 <display_show_curve+0x54>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	330c      	adds	r3, #12
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	f7ff fd68 	bl	8002da4 <draw_curve>
 80032d4:	e000      	b.n	80032d8 <display_show_curve+0x48>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80032d6:	bf00      	nop

}
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000
 80032e4:	2000023c 	.word	0x2000023c

080032e8 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80032ec:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <start_adcs+0x40>)
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <start_adcs+0x44>)
 80032f4:	f003 fdae 	bl	8006e54 <HAL_ADC_Start_DMA>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 80032fe:	480c      	ldr	r0, [pc, #48]	; (8003330 <start_adcs+0x48>)
 8003300:	f001 fa68 	bl	80047d4 <term_print>
  	  Error_Handler();
 8003304:	f000 fe7e 	bl	8004004 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003308:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800330c:	4909      	ldr	r1, [pc, #36]	; (8003334 <start_adcs+0x4c>)
 800330e:	480a      	ldr	r0, [pc, #40]	; (8003338 <start_adcs+0x50>)
 8003310:	f003 fda0 	bl	8006e54 <HAL_ADC_Start_DMA>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 800331a:	4808      	ldr	r0, [pc, #32]	; (800333c <start_adcs+0x54>)
 800331c:	f001 fa5a 	bl	80047d4 <term_print>
 	  Error_Handler();
 8003320:	f000 fe70 	bl	8004004 <Error_Handler>
	}
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20002334 	.word	0x20002334
 800332c:	20001fe8 	.word	0x20001fe8
 8003330:	0800f6a8 	.word	0x0800f6a8
 8003334:	20003d74 	.word	0x20003d74
 8003338:	20002030 	.word	0x20002030
 800333c:	0800f6c4 	.word	0x0800f6c4

08003340 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	460a      	mov	r2, r1
 800334a:	80fb      	strh	r3, [r7, #6]
 800334c:	4613      	mov	r3, r2
 800334e:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003356:	4293      	cmp	r3, r2
 8003358:	d803      	bhi.n	8003362 <adjust_TIM2_period+0x22>
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003360:	d205      	bcs.n	800336e <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	4619      	mov	r1, r3
 8003366:	4808      	ldr	r0, [pc, #32]	; (8003388 <adjust_TIM2_period+0x48>)
 8003368:	f001 fa34 	bl	80047d4 <term_print>
		return;
 800336c:	e008      	b.n	8003380 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 800336e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	4619      	mov	r1, r3
 800337a:	4804      	ldr	r0, [pc, #16]	; (800338c <adjust_TIM2_period+0x4c>)
 800337c:	f001 fa2a 	bl	80047d4 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	0800f6e0 	.word	0x0800f6e0
 800338c:	0800f700 	.word	0x0800f700

08003390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003396:	f003 fc83 	bl	8006ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800339a:	f000 fa1b 	bl	80037d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800339e:	f000 fc5f 	bl	8003c60 <MX_GPIO_Init>
  MX_DMA_Init();
 80033a2:	f000 fc1f 	bl	8003be4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033a6:	f000 fbc9 	bl	8003b3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80033aa:	f000 fb7b 	bl	8003aa4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80033ae:	f000 fa83 	bl	80038b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80033b2:	f000 fae1 	bl	8003978 <MX_ADC2_Init>
  MX_SPI2_Init();
 80033b6:	f000 fb3f 	bl	8003a38 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80033ba:	f000 fbe9 	bl	8003b90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80033be:	f7fe ff73 	bl	80022a8 <display_init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 80033c2:	2201      	movs	r2, #1
 80033c4:	498d      	ldr	r1, [pc, #564]	; (80035fc <main+0x26c>)
 80033c6:	488e      	ldr	r0, [pc, #568]	; (8003600 <main+0x270>)
 80033c8:	f007 f88d 	bl	800a4e6 <HAL_UART_Receive_IT>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <main+0x46>
    Error_Handler();
 80033d2:	f000 fe17 	bl	8004004 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80033d6:	488b      	ldr	r0, [pc, #556]	; (8003604 <main+0x274>)
 80033d8:	f006 fb6a 	bl	8009ab0 <HAL_TIM_Base_Start_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <main+0x56>
     Error_Handler();
 80033e2:	f000 fe0f 	bl	8004004 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 80033e6:	f7ff ff7f 	bl	80032e8 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 80033ea:	f7fe ff7f 	bl	80022ec <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 80033ee:	f003 fcbd 	bl	8006d6c <HAL_GetTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80033f8:	4a83      	ldr	r2, [pc, #524]	; (8003608 <main+0x278>)
 80033fa:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 80033fc:	4b83      	ldr	r3, [pc, #524]	; (800360c <main+0x27c>)
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2302      	movs	r3, #2
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	4a82      	ldr	r2, [pc, #520]	; (8003610 <main+0x280>)
 8003408:	4982      	ldr	r1, [pc, #520]	; (8003614 <main+0x284>)
 800340a:	4883      	ldr	r0, [pc, #524]	; (8003618 <main+0x288>)
 800340c:	f008 fc9e 	bl	800bd4c <siprintf>
  if (HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8003410:	4881      	ldr	r0, [pc, #516]	; (8003618 <main+0x288>)
 8003412:	f7fc ff4d 	bl	80002b0 <strlen>
 8003416:	4603      	mov	r3, r0
 8003418:	b29a      	uxth	r2, r3
 800341a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800341e:	497e      	ldr	r1, [pc, #504]	; (8003618 <main+0x288>)
 8003420:	4877      	ldr	r0, [pc, #476]	; (8003600 <main+0x270>)
 8003422:	f006 ffce 	bl	800a3c2 <HAL_UART_Transmit>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <main+0xa0>
    Error_Handler();
 800342c:	f000 fdea 	bl	8004004 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 8003430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4619      	mov	r1, r3
 8003438:	4878      	ldr	r0, [pc, #480]	; (800361c <main+0x28c>)
 800343a:	f001 f9cb 	bl	80047d4 <term_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 800343e:	f003 fc95 	bl	8006d6c <HAL_GetTick>
 8003442:	4603      	mov	r3, r0
 8003444:	3364      	adds	r3, #100	; 0x64
 8003446:	4a76      	ldr	r2, [pc, #472]	; (8003620 <main+0x290>)
 8003448:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 800344a:	f003 fc8f 	bl	8006d6c <HAL_GetTick>
 800344e:	4603      	mov	r3, r0
 8003450:	33c8      	adds	r3, #200	; 0xc8
 8003452:	4a74      	ldr	r2, [pc, #464]	; (8003624 <main+0x294>)
 8003454:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 8003456:	f003 fc89 	bl	8006d6c <HAL_GetTick>
 800345a:	4603      	mov	r3, r0
 800345c:	4a72      	ldr	r2, [pc, #456]	; (8003628 <main+0x298>)
 800345e:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 8003460:	4b71      	ldr	r3, [pc, #452]	; (8003628 <main+0x298>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b71      	ldr	r3, [pc, #452]	; (800362c <main+0x29c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d21b      	bcs.n	80034a4 <main+0x114>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 800346c:	4b6e      	ldr	r3, [pc, #440]	; (8003628 <main+0x298>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3364      	adds	r3, #100	; 0x64
 8003472:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <main+0x290>)
 8003474:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 8003476:	4b6e      	ldr	r3, [pc, #440]	; (8003630 <main+0x2a0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <main+0xfe>
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <main+0x298>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003486:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800348a:	4a69      	ldr	r2, [pc, #420]	; (8003630 <main+0x2a0>)
 800348c:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 800348e:	4b66      	ldr	r3, [pc, #408]	; (8003628 <main+0x298>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8003496:	4a67      	ldr	r2, [pc, #412]	; (8003634 <main+0x2a4>)
 8003498:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <main+0x298>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	33c8      	adds	r3, #200	; 0xc8
 80034a0:	4a60      	ldr	r2, [pc, #384]	; (8003624 <main+0x294>)
 80034a2:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80034a4:	4b60      	ldr	r3, [pc, #384]	; (8003628 <main+0x298>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a60      	ldr	r2, [pc, #384]	; (800362c <main+0x29c>)
 80034aa:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80034ac:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <main+0x298>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <main+0x294>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d316      	bcc.n	80034e6 <main+0x156>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80034b8:	4b5a      	ldr	r3, [pc, #360]	; (8003624 <main+0x294>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	33c8      	adds	r3, #200	; 0xc8
 80034be:	4a59      	ldr	r2, [pc, #356]	; (8003624 <main+0x294>)
 80034c0:	6013      	str	r3, [r2, #0]
		calc_measurements();
 80034c2:	f7fe f9cf 	bl	8001864 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	485b      	ldr	r0, [pc, #364]	; (8003638 <main+0x2a8>)
 80034ca:	f004 ff2b 	bl	8008324 <HAL_GPIO_ReadPin>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d108      	bne.n	80034e6 <main+0x156>
 80034d4:	4b59      	ldr	r3, [pc, #356]	; (800363c <main+0x2ac>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <main+0x156>
			display_update_meter(display_screen);
 80034dc:	4b57      	ldr	r3, [pc, #348]	; (800363c <main+0x2ac>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f93f 	bl	8002764 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 80034e6:	4b50      	ldr	r3, [pc, #320]	; (8003628 <main+0x298>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b4d      	ldr	r3, [pc, #308]	; (8003620 <main+0x290>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	f0c0 80df 	bcc.w	80036b2 <main+0x322>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80034f4:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <main+0x298>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3364      	adds	r3, #100	; 0x64
 80034fa:	4a49      	ldr	r2, [pc, #292]	; (8003620 <main+0x290>)
 80034fc:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 80034fe:	4b42      	ldr	r3, [pc, #264]	; (8003608 <main+0x278>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d013      	beq.n	800352e <main+0x19e>
			if (now_ticks >= display_splash_ticks) {
 8003506:	4b48      	ldr	r3, [pc, #288]	; (8003628 <main+0x298>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <main+0x278>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d30d      	bcc.n	800352e <main+0x19e>
				display_splash_ticks = 0;
 8003512:	4b3d      	ldr	r3, [pc, #244]	; (8003608 <main+0x278>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <main+0x2ac>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 800351e:	4b42      	ldr	r3, [pc, #264]	; (8003628 <main+0x298>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003526:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800352a:	4a41      	ldr	r2, [pc, #260]	; (8003630 <main+0x2a0>)
 800352c:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle UART communication
		if (rx_cmd_ready) {
 800352e:	4b44      	ldr	r3, [pc, #272]	; (8003640 <main+0x2b0>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <main+0x1b8>
		  CMD_Handler((uint8_t*)rx_buff);
 8003536:	4843      	ldr	r0, [pc, #268]	; (8003644 <main+0x2b4>)
 8003538:	f7fe fe96 	bl	8002268 <CMD_Handler>
		  rx_count = 0;
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <main+0x2b8>)
 800353e:	2200      	movs	r2, #0
 8003540:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <main+0x2b0>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
		}

		if (adc_restart) {
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <main+0x2bc>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <main+0x1ca>
		  adc_restart = 0;
 8003550:	4b3e      	ldr	r3, [pc, #248]	; (800364c <main+0x2bc>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8003556:	f7ff fec7 	bl	80032e8 <start_adcs>
		}

		if (new_time_period) {
 800355a:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <main+0x2c0>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <main+0x1e4>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <main+0x2c0>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fee9 	bl	8003340 <adjust_TIM2_period>
		  new_time_period = 0;
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <main+0x2c0>)
 8003570:	2200      	movs	r2, #0
 8003572:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <main+0x2c4>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00f      	beq.n	800359e <main+0x20e>
			display_screen++;
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <main+0x2ac>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <main+0x2ac>)
 8003588:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 800358a:	4b2c      	ldr	r3, [pc, #176]	; (800363c <main+0x2ac>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <main+0x208>
				display_screen = 1;
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <main+0x2ac>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
			}
			//term_print("display_screen = %d\r\n", display_screen);
			display_change = 0;
 8003598:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <main+0x2c4>)
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <main+0x2a0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <main+0x22e>
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <main+0x298>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <main+0x2a0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d305      	bcc.n	80035be <main+0x22e>
			Displ_BackLight('0');
 80035b2:	2030      	movs	r0, #48	; 0x30
 80035b4:	f002 fe54 	bl	8006260 <Displ_BackLight>
	  		display_off_ticks = 0;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <main+0x2a0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <main+0x2c8>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d05f      	beq.n	8003686 <main+0x2f6>
			if (tft_display == 9) {
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <main+0x2c8>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d10e      	bne.n	80035ec <main+0x25c>
				term_print("Running TFT performance test ...\r\n");
 80035ce:	4823      	ldr	r0, [pc, #140]	; (800365c <main+0x2cc>)
 80035d0:	f001 f900 	bl	80047d4 <term_print>
				Displ_BackLight('1');
 80035d4:	2031      	movs	r0, #49	; 0x31
 80035d6:	f002 fe43 	bl	8006260 <Displ_BackLight>
				Displ_TestAll();
 80035da:	f003 fb0b 	bl	8006bf4 <Displ_TestAll>
				Displ_BackLight('0');
 80035de:	2030      	movs	r0, #48	; 0x30
 80035e0:	f002 fe3e 	bl	8006260 <Displ_BackLight>
				term_print("....completed\r\n");
 80035e4:	481e      	ldr	r0, [pc, #120]	; (8003660 <main+0x2d0>)
 80035e6:	f001 f8f5 	bl	80047d4 <term_print>
 80035ea:	e049      	b.n	8003680 <main+0x2f0>
			} else {
				if (tft_display == 1) {
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <main+0x2c8>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d137      	bne.n	8003664 <main+0x2d4>
					Displ_BackLight('0');
 80035f4:	2030      	movs	r0, #48	; 0x30
 80035f6:	f002 fe33 	bl	8006260 <Displ_BackLight>
 80035fa:	e041      	b.n	8003680 <main+0x2f0>
 80035fc:	20002302 	.word	0x20002302
 8003600:	20002238 	.word	0x20002238
 8003604:	200021f0 	.word	0x200021f0
 8003608:	20007f2c 	.word	0x20007f2c
 800360c:	08013afc 	.word	0x08013afc
 8003610:	08013af8 	.word	0x08013af8
 8003614:	0800f710 	.word	0x0800f710
 8003618:	200022c0 	.word	0x200022c0
 800361c:	0800f724 	.word	0x0800f724
 8003620:	20007f40 	.word	0x20007f40
 8003624:	20007f3c 	.word	0x20007f3c
 8003628:	20007f34 	.word	0x20007f34
 800362c:	20007f38 	.word	0x20007f38
 8003630:	20007f28 	.word	0x20007f28
 8003634:	20007f30 	.word	0x20007f30
 8003638:	40020000 	.word	0x40020000
 800363c:	20002320 	.word	0x20002320
 8003640:	20002318 	.word	0x20002318
 8003644:	20002304 	.word	0x20002304
 8003648:	20002300 	.word	0x20002300
 800364c:	2000231b 	.word	0x2000231b
 8003650:	2000231e 	.word	0x2000231e
 8003654:	2000231a 	.word	0x2000231a
 8003658:	2000231c 	.word	0x2000231c
 800365c:	0800f734 	.word	0x0800f734
 8003660:	0800f758 	.word	0x0800f758
				} else {
					Displ_BackLight('1');
 8003664:	2031      	movs	r0, #49	; 0x31
 8003666:	f002 fdfb 	bl	8006260 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 800366a:	f003 fb7f 	bl	8006d6c <HAL_GetTick>
 800366e:	4603      	mov	r3, r0
 8003670:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003674:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003678:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <main+0x418>)
 800367a:	6013      	str	r3, [r2, #0]
					display_update_mask();
 800367c:	f7ff f8b6 	bl	80027ec <display_update_mask>
				}
			}
		tft_display = 0;
 8003680:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <main+0x41c>)
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <main+0x420>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <main+0x322>
			display_activate = 0;
 8003690:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <main+0x420>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8003696:	f7ff f8a9 	bl	80027ec <display_update_mask>
			Displ_BackLight('1');
 800369a:	2031      	movs	r0, #49	; 0x31
 800369c:	f002 fde0 	bl	8006260 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80036a0:	f003 fb64 	bl	8006d6c <HAL_GetTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80036aa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80036ae:	4a3e      	ldr	r2, [pc, #248]	; (80037a8 <main+0x418>)
 80036b0:	6013      	str	r3, [r2, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 80036b2:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <main+0x424>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	dc0b      	bgt.n	80036d2 <main+0x342>
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <main+0x428>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	dc07      	bgt.n	80036d2 <main+0x342>
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <main+0x42c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	dc03      	bgt.n	80036d2 <main+0x342>
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <main+0x430>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	dd1b      	ble.n	800370a <main+0x37a>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <main+0x424>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	dd02      	ble.n	80036e0 <main+0x350>
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <main+0x424>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <main+0x428>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	dd02      	ble.n	80036ee <main+0x35e>
 80036e8:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <main+0x428>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <main+0x42c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	dd02      	ble.n	80036fc <main+0x36c>
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <main+0x42c>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <main+0x430>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	dd02      	ble.n	800370a <main+0x37a>
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <main+0x430>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <main+0x424>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	dd0e      	ble.n	8003730 <main+0x3a0>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8003712:	2100      	movs	r1, #0
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd fc85 	bl	8001024 <calc_process_dma_buffer>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <main+0x396>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8003720:	4828      	ldr	r0, [pc, #160]	; (80037c4 <main+0x434>)
 8003722:	f001 f857 	bl	80047d4 <term_print>
			}
			adc1_dma_l_count--;
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <main+0x424>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b01      	subs	r3, #1
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <main+0x424>)
 800372e:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <main+0x428>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	dd0e      	ble.n	8003756 <main+0x3c6>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8003738:	2100      	movs	r1, #0
 800373a:	2001      	movs	r0, #1
 800373c:	f7fd fc72 	bl	8001024 <calc_process_dma_buffer>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <main+0x3bc>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8003746:	4820      	ldr	r0, [pc, #128]	; (80037c8 <main+0x438>)
 8003748:	f001 f844 	bl	80047d4 <term_print>
			}
			adc1_dma_h_count--;
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <main+0x428>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <main+0x428>)
 8003754:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8003756:	4b19      	ldr	r3, [pc, #100]	; (80037bc <main+0x42c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	dd0e      	ble.n	800377c <main+0x3ec>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 800375e:	2101      	movs	r1, #1
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd fc5f 	bl	8001024 <calc_process_dma_buffer>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <main+0x3e2>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 800376c:	4817      	ldr	r0, [pc, #92]	; (80037cc <main+0x43c>)
 800376e:	f001 f831 	bl	80047d4 <term_print>
			}
			adc2_dma_l_count--;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <main+0x42c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3b01      	subs	r3, #1
 8003778:	4a10      	ldr	r2, [pc, #64]	; (80037bc <main+0x42c>)
 800377a:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <main+0x430>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f77f ae68 	ble.w	8003456 <main+0xc6>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8003786:	2101      	movs	r1, #1
 8003788:	2001      	movs	r0, #1
 800378a:	f7fd fc4b 	bl	8001024 <calc_process_dma_buffer>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <main+0x40a>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8003794:	480e      	ldr	r0, [pc, #56]	; (80037d0 <main+0x440>)
 8003796:	f001 f81d 	bl	80047d4 <term_print>
			}
			adc2_dma_h_count--;
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <main+0x430>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3b01      	subs	r3, #1
 80037a0:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <main+0x430>)
 80037a2:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 80037a4:	e657      	b.n	8003456 <main+0xc6>
 80037a6:	bf00      	nop
 80037a8:	20007f28 	.word	0x20007f28
 80037ac:	2000231c 	.word	0x2000231c
 80037b0:	20002319 	.word	0x20002319
 80037b4:	20002324 	.word	0x20002324
 80037b8:	20002328 	.word	0x20002328
 80037bc:	2000232c 	.word	0x2000232c
 80037c0:	20002330 	.word	0x20002330
 80037c4:	0800f768 	.word	0x0800f768
 80037c8:	0800f790 	.word	0x0800f790
 80037cc:	0800f7b8 	.word	0x0800f7b8
 80037d0:	0800f7e0 	.word	0x0800f7e0

080037d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b094      	sub	sp, #80	; 0x50
 80037d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037da:	f107 031c 	add.w	r3, r7, #28
 80037de:	2234      	movs	r2, #52	; 0x34
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f008 fc52 	bl	800c08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e8:	f107 0308 	add.w	r3, r7, #8
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <SystemClock_Config+0xdc>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	4a2b      	ldr	r2, [pc, #172]	; (80038b0 <SystemClock_Config+0xdc>)
 8003802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	; 0x40
 8003808:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <SystemClock_Config+0xdc>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <SystemClock_Config+0xe0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <SystemClock_Config+0xe0>)
 800381e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <SystemClock_Config+0xe0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003830:	2302      	movs	r3, #2
 8003832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003834:	2301      	movs	r3, #1
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003838:	2310      	movs	r3, #16
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800383c:	2302      	movs	r3, #2
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003840:	2300      	movs	r3, #0
 8003842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003844:	2308      	movs	r3, #8
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003848:	23b4      	movs	r3, #180	; 0xb4
 800384a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800384c:	2302      	movs	r3, #2
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003850:	2302      	movs	r3, #2
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003854:	2302      	movs	r3, #2
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	4618      	mov	r0, r3
 800385e:	f005 f95f 	bl	8008b20 <HAL_RCC_OscConfig>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003868:	f000 fbcc 	bl	8004004 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800386c:	f004 fdbe 	bl	80083ec <HAL_PWREx_EnableOverDrive>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003876:	f000 fbc5 	bl	8004004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800387a:	230f      	movs	r3, #15
 800387c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387e:	2302      	movs	r3, #2
 8003880:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800388a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800388c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003890:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	2105      	movs	r1, #5
 8003898:	4618      	mov	r0, r3
 800389a:	f004 fdf7 	bl	800848c <HAL_RCC_ClockConfig>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80038a4:	f000 fbae 	bl	8004004 <Error_Handler>
  }
}
 80038a8:	bf00      	nop
 80038aa:	3750      	adds	r7, #80	; 0x50
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000

080038b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038be:	463b      	mov	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038cc:	4a29      	ldr	r2, [pc, #164]	; (8003974 <MX_ADC1_Init+0xbc>)
 80038ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <MX_ADC1_Init+0xb8>)
 80038fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003900:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <MX_ADC1_Init+0xb8>)
 8003904:	2200      	movs	r2, #0
 8003906:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <MX_ADC1_Init+0xb8>)
 800390a:	2202      	movs	r2, #2
 800390c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800390e:	4b18      	ldr	r3, [pc, #96]	; (8003970 <MX_ADC1_Init+0xb8>)
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <MX_ADC1_Init+0xb8>)
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800391c:	4814      	ldr	r0, [pc, #80]	; (8003970 <MX_ADC1_Init+0xb8>)
 800391e:	f003 fa55 	bl	8006dcc <HAL_ADC_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003928:	f000 fb6c 	bl	8004004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800392c:	2300      	movs	r3, #0
 800392e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003930:	2301      	movs	r3, #1
 8003932:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003934:	2303      	movs	r3, #3
 8003936:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003938:	463b      	mov	r3, r7
 800393a:	4619      	mov	r1, r3
 800393c:	480c      	ldr	r0, [pc, #48]	; (8003970 <MX_ADC1_Init+0xb8>)
 800393e:	f003 fb99 	bl	8007074 <HAL_ADC_ConfigChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003948:	f000 fb5c 	bl	8004004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800394c:	230a      	movs	r3, #10
 800394e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003950:	2302      	movs	r3, #2
 8003952:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003954:	463b      	mov	r3, r7
 8003956:	4619      	mov	r1, r3
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <MX_ADC1_Init+0xb8>)
 800395a:	f003 fb8b 	bl	8007074 <HAL_ADC_ConfigChannel>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003964:	f000 fb4e 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001fe8 	.word	0x20001fe8
 8003974:	40012000 	.word	0x40012000

08003978 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800397e:	463b      	mov	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800398a:	4b29      	ldr	r3, [pc, #164]	; (8003a30 <MX_ADC2_Init+0xb8>)
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <MX_ADC2_Init+0xbc>)
 800398e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <MX_ADC2_Init+0xb8>)
 8003992:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003996:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <MX_ADC2_Init+0xb8>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80039a4:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80039aa:	4b21      	ldr	r3, [pc, #132]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039ca:	2202      	movs	r2, #2
 80039cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80039dc:	4814      	ldr	r0, [pc, #80]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039de:	f003 f9f5 	bl	8006dcc <HAL_ADC_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80039e8:	f000 fb0c 	bl	8004004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80039f4:	2303      	movs	r3, #3
 80039f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039f8:	463b      	mov	r3, r7
 80039fa:	4619      	mov	r1, r3
 80039fc:	480c      	ldr	r0, [pc, #48]	; (8003a30 <MX_ADC2_Init+0xb8>)
 80039fe:	f003 fb39 	bl	8007074 <HAL_ADC_ConfigChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003a08:	f000 fafc 	bl	8004004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003a0c:	230b      	movs	r3, #11
 8003a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a10:	2302      	movs	r3, #2
 8003a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a14:	463b      	mov	r3, r7
 8003a16:	4619      	mov	r1, r3
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_ADC2_Init+0xb8>)
 8003a1a:	f003 fb2b 	bl	8007074 <HAL_ADC_ConfigChannel>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003a24:	f000 faee 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20002030 	.word	0x20002030
 8003a34:	40012100 	.word	0x40012100

08003a38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <MX_SPI2_Init+0x68>)
 8003a40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a4a:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7c:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a84:	220a      	movs	r2, #10
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <MX_SPI2_Init+0x64>)
 8003a8a:	f005 fae7 	bl	800905c <HAL_SPI_Init>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a94:	f000 fab6 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20002138 	.word	0x20002138
 8003aa0:	40003800 	.word	0x40003800

08003aa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab8:	463b      	mov	r3, r7
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ac6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003ad6:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003ada:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae2:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ae8:	4813      	ldr	r0, [pc, #76]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003aea:	f005 ff91 	bl	8009a10 <HAL_TIM_Base_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003af4:	f000 fa86 	bl	8004004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003b06:	f006 f94b 	bl	8009da0 <HAL_TIM_ConfigClockSource>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003b10:	f000 fa78 	bl	8004004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b14:	2320      	movs	r3, #32
 8003b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4805      	ldr	r0, [pc, #20]	; (8003b38 <MX_TIM2_Init+0x94>)
 8003b22:	f006 fb71 	bl	800a208 <HAL_TIMEx_MasterConfigSynchronization>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b2c:	f000 fa6a 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200021f0 	.word	0x200021f0

08003b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <MX_USART2_UART_Init+0x50>)
 8003b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b62:	220c      	movs	r2, #12
 8003b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b72:	4805      	ldr	r0, [pc, #20]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b74:	f006 fbd8 	bl	800a328 <HAL_UART_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b7e:	f000 fa41 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20002238 	.word	0x20002238
 8003b8c:	40004400 	.word	0x40004400

08003b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <MX_USART3_UART_Init+0x50>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <MX_USART3_UART_Init+0x4c>)
 8003bc8:	f006 fbae 	bl	800a328 <HAL_UART_Init>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bd2:	f000 fa17 	bl	8004004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000227c 	.word	0x2000227c
 8003be0:	40004800 	.word	0x40004800

08003be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <MX_DMA_Init+0x78>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	; (8003c5c <MX_DMA_Init+0x78>)
 8003bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <MX_DMA_Init+0x78>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	607b      	str	r3, [r7, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_DMA_Init+0x78>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <MX_DMA_Init+0x78>)
 8003c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_DMA_Init+0x78>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	200f      	movs	r0, #15
 8003c28:	f003 fdaf 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c2c:	200f      	movs	r0, #15
 8003c2e:	f003 fdc8 	bl	80077c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2100      	movs	r1, #0
 8003c36:	2038      	movs	r0, #56	; 0x38
 8003c38:	f003 fda7 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c3c:	2038      	movs	r0, #56	; 0x38
 8003c3e:	f003 fdc0 	bl	80077c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	203a      	movs	r0, #58	; 0x3a
 8003c48:	f003 fd9f 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c4c:	203a      	movs	r0, #58	; 0x3a
 8003c4e:	f003 fdb8 	bl	80077c2 <HAL_NVIC_EnableIRQ>

}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800

08003c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a60      	ldr	r2, [pc, #384]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a59      	ldr	r2, [pc, #356]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b57      	ldr	r3, [pc, #348]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cd4:	f043 0302 	orr.w	r3, r3, #2
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <MX_GPIO_Init+0x1a0>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003cec:	4845      	ldr	r0, [pc, #276]	; (8003e04 <MX_GPIO_Init+0x1a4>)
 8003cee:	f004 fb31 	bl	8008354 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	4844      	ldr	r0, [pc, #272]	; (8003e08 <MX_GPIO_Init+0x1a8>)
 8003cf8:	f004 fb2c 	bl	8008354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d02:	4840      	ldr	r0, [pc, #256]	; (8003e04 <MX_GPIO_Init+0x1a4>)
 8003d04:	f004 fb26 	bl	8008354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	21c0      	movs	r1, #192	; 0xc0
 8003d0c:	483f      	ldr	r0, [pc, #252]	; (8003e0c <MX_GPIO_Init+0x1ac>)
 8003d0e:	f004 fb21 	bl	8008354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d22:	f107 0314 	add.w	r3, r7, #20
 8003d26:	4619      	mov	r1, r3
 8003d28:	4837      	ldr	r0, [pc, #220]	; (8003e08 <MX_GPIO_Init+0x1a8>)
 8003d2a:	f004 f967 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8003d2e:	f248 4360 	movw	r3, #33888	; 0x8460
 8003d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d34:	2301      	movs	r3, #1
 8003d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4619      	mov	r1, r3
 8003d46:	482f      	ldr	r0, [pc, #188]	; (8003e04 <MX_GPIO_Init+0x1a4>)
 8003d48:	f004 f958 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d50:	2301      	movs	r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	4619      	mov	r1, r3
 8003d62:	4828      	ldr	r0, [pc, #160]	; (8003e04 <MX_GPIO_Init+0x1a4>)
 8003d64:	f004 f94a 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d74:	2303      	movs	r3, #3
 8003d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4822      	ldr	r0, [pc, #136]	; (8003e08 <MX_GPIO_Init+0x1a8>)
 8003d80:	f004 f93c 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d92:	2303      	movs	r3, #3
 8003d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4819      	ldr	r0, [pc, #100]	; (8003e04 <MX_GPIO_Init+0x1a4>)
 8003d9e:	f004 f92d 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003da2:	2310      	movs	r3, #16
 8003da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003da6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4619      	mov	r1, r3
 8003db6:	4815      	ldr	r0, [pc, #84]	; (8003e0c <MX_GPIO_Init+0x1ac>)
 8003db8:	f004 f920 	bl	8007ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8003dbc:	23c0      	movs	r3, #192	; 0xc0
 8003dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	480e      	ldr	r0, [pc, #56]	; (8003e0c <MX_GPIO_Init+0x1ac>)
 8003dd4:	f004 f912 	bl	8007ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2100      	movs	r1, #0
 8003ddc:	200a      	movs	r0, #10
 8003dde:	f003 fcd4 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003de2:	200a      	movs	r0, #10
 8003de4:	f003 fced 	bl	80077c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	2028      	movs	r0, #40	; 0x28
 8003dee:	f003 fccc 	bl	800778a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003df2:	2028      	movs	r0, #40	; 0x28
 8003df4:	f003 fce5 	bl	80077c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	; 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020800 	.word	0x40020800
 8003e0c:	40020400 	.word	0x40020400

08003e10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_EXTI_Callback+0x18>
 8003e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e24:	d004      	beq.n	8003e30 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8003e26:	e007      	b.n	8003e38 <HAL_GPIO_EXTI_Callback+0x28>
		display_activate = 1;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_GPIO_EXTI_Callback+0x34>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
		break;
 8003e2e:	e003      	b.n	8003e38 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_GPIO_EXTI_Callback+0x38>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
		break;
 8003e36:	bf00      	nop
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20002319 	.word	0x20002319
 8003e48:	2000231a 	.word	0x2000231a

08003e4c <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_ADC_ConvCpltCallback+0x34>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d105      	bne.n	8003e68 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_ADC_ConvCpltCallback+0x38>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_ADC_ConvCpltCallback+0x38>)
 8003e64:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8003e66:	e004      	b.n	8003e72 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003e70:	6013      	str	r3, [r2, #0]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20001fe8 	.word	0x20001fe8
 8003e84:	20002328 	.word	0x20002328
 8003e88:	20002330 	.word	0x20002330

08003e8c <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d105      	bne.n	8003ea8 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003ea4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8003ea6:	e004      	b.n	8003eb2 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8003eb0:	6013      	str	r3, [r2, #0]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20001fe8 	.word	0x20001fe8
 8003ec4:	20002324 	.word	0x20002324
 8003ec8:	2000232c 	.word	0x2000232c

08003ecc <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_ADC_ErrorCallback+0x94>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d102      	bne.n	8003ee2 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8003edc:	2301      	movs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e001      	b.n	8003ee6 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d82c      	bhi.n	8003f48 <HAL_ADC_ErrorCallback+0x7c>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_ADC_ErrorCallback+0x28>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f09 	.word	0x08003f09
 8003ef8:	08003f19 	.word	0x08003f19
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f39 	.word	0x08003f39
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	4814      	ldr	r0, [pc, #80]	; (8003f64 <HAL_ADC_ErrorCallback+0x98>)
 8003f12:	f000 fc5f 	bl	80047d4 <term_print>
		break;
 8003f16:	e01e      	b.n	8003f56 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	4811      	ldr	r0, [pc, #68]	; (8003f68 <HAL_ADC_ErrorCallback+0x9c>)
 8003f22:	f000 fc57 	bl	80047d4 <term_print>
		break;
 8003f26:	e016      	b.n	8003f56 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	480e      	ldr	r0, [pc, #56]	; (8003f6c <HAL_ADC_ErrorCallback+0xa0>)
 8003f32:	f000 fc4f 	bl	80047d4 <term_print>
		break;
 8003f36:	e00e      	b.n	8003f56 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	480b      	ldr	r0, [pc, #44]	; (8003f70 <HAL_ADC_ErrorCallback+0xa4>)
 8003f42:	f000 fc47 	bl	80047d4 <term_print>
		break;
 8003f46:	e006      	b.n	8003f56 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4809      	ldr	r0, [pc, #36]	; (8003f74 <HAL_ADC_ErrorCallback+0xa8>)
 8003f50:	f000 fc40 	bl	80047d4 <term_print>
	}
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20001fe8 	.word	0x20001fe8
 8003f64:	0800f808 	.word	0x0800f808
 8003f68:	0800f824 	.word	0x0800f824
 8003f6c:	0800f848 	.word	0x0800f848
 8003f70:	0800f868 	.word	0x0800f868
 8003f74:	0800f884 	.word	0x0800f884

08003f78 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	2b13      	cmp	r3, #19
 8003f86:	d902      	bls.n	8003f8e <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8003f88:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8003f8e:	2201      	movs	r2, #1
 8003f90:	4918      	ldr	r1, [pc, #96]	; (8003ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8003f92:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <HAL_UART_RxCpltCallback+0x80>)
 8003f94:	f006 faa7 	bl	800a4e6 <HAL_UART_Receive_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d124      	bne.n	8003fe8 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b0a      	cmp	r3, #10
 8003fa4:	d00f      	beq.n	8003fc6 <HAL_UART_RxCpltCallback+0x4e>
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b0d      	cmp	r3, #13
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	b291      	uxth	r1, r2
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003fb8:	8011      	strh	r1, [r2, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_UART_RxCpltCallback+0x7c>)
 8003fbe:	7819      	ldrb	r1, [r3, #0]
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <HAL_UART_RxCpltCallback+0x84>)
 8003fc2:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8003fc4:	e010      	b.n	8003fe8 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_UART_RxCpltCallback+0x88>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	b291      	uxth	r1, r2
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_UART_RxCpltCallback+0x78>)
 8003fde:	8011      	strh	r1, [r2, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_UART_RxCpltCallback+0x84>)
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	5499      	strb	r1, [r3, r2]
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20002300 	.word	0x20002300
 8003ff4:	20002302 	.word	0x20002302
 8003ff8:	20002238 	.word	0x20002238
 8003ffc:	20002304 	.word	0x20002304
 8004000:	20002318 	.word	0x20002318

08004004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <Error_Handler+0x10>)
 800400a:	f008 f82d 	bl	800c068 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800400e:	b672      	cpsid	i
}
 8004010:	bf00      	nop
    __disable_irq();
    while (1)
 8004012:	e7fe      	b.n	8004012 <Error_Handler+0xe>
 8004014:	0800f8a4 	.word	0x0800f8a4

08004018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_MspInit+0x4c>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <HAL_MspInit+0x4c>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_MspInit+0x4c>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_MspInit+0x4c>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <HAL_MspInit+0x4c>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_MspInit+0x4c>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004056:	2007      	movs	r0, #7
 8004058:	f003 fb8c 	bl	8007774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800

08004068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	; 0x38
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a79      	ldr	r2, [pc, #484]	; (800426c <HAL_ADC_MspInit+0x204>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d173      	bne.n	8004172 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_ADC_MspInit+0x208>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	4a77      	ldr	r2, [pc, #476]	; (8004270 <HAL_ADC_MspInit+0x208>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6453      	str	r3, [r2, #68]	; 0x44
 800409a:	4b75      	ldr	r3, [pc, #468]	; (8004270 <HAL_ADC_MspInit+0x208>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	4b71      	ldr	r3, [pc, #452]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a70      	ldr	r2, [pc, #448]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b6e      	ldr	r3, [pc, #440]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	4a69      	ldr	r2, [pc, #420]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6313      	str	r3, [r2, #48]	; 0x30
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040de:	2301      	movs	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040e2:	2303      	movs	r3, #3
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ee:	4619      	mov	r1, r3
 80040f0:	4860      	ldr	r0, [pc, #384]	; (8004274 <HAL_ADC_MspInit+0x20c>)
 80040f2:	f003 ff83 	bl	8007ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040f6:	2301      	movs	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040fa:	2303      	movs	r3, #3
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004106:	4619      	mov	r1, r3
 8004108:	485b      	ldr	r0, [pc, #364]	; (8004278 <HAL_ADC_MspInit+0x210>)
 800410a:	f003 ff77 	bl	8007ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800410e:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004110:	4a5b      	ldr	r2, [pc, #364]	; (8004280 <HAL_ADC_MspInit+0x218>)
 8004112:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004116:	2200      	movs	r2, #0
 8004118:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800411a:	4b58      	ldr	r3, [pc, #352]	; (800427c <HAL_ADC_MspInit+0x214>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004120:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004126:	4b55      	ldr	r3, [pc, #340]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800412c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800412e:	4b53      	ldr	r3, [pc, #332]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004134:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004136:	4b51      	ldr	r3, [pc, #324]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004138:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800413c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800413e:	4b4f      	ldr	r3, [pc, #316]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004144:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004146:	4b4d      	ldr	r3, [pc, #308]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004148:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800414c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004150:	2200      	movs	r2, #0
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004154:	4849      	ldr	r0, [pc, #292]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004156:	f003 fb4f 	bl	80077f8 <HAL_DMA_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004160:	f7ff ff50 	bl	8004004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a45      	ldr	r2, [pc, #276]	; (800427c <HAL_ADC_MspInit+0x214>)
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
 800416a:	4a44      	ldr	r2, [pc, #272]	; (800427c <HAL_ADC_MspInit+0x214>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004170:	e078      	b.n	8004264 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a43      	ldr	r2, [pc, #268]	; (8004284 <HAL_ADC_MspInit+0x21c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d173      	bne.n	8004264 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <HAL_ADC_MspInit+0x208>)
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	4a3a      	ldr	r2, [pc, #232]	; (8004270 <HAL_ADC_MspInit+0x208>)
 8004186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418a:	6453      	str	r3, [r2, #68]	; 0x44
 800418c:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_ADC_MspInit+0x208>)
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_ADC_MspInit+0x208>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	4a33      	ldr	r2, [pc, #204]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6313      	str	r3, [r2, #48]	; 0x30
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4a2c      	ldr	r2, [pc, #176]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6313      	str	r3, [r2, #48]	; 0x30
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_ADC_MspInit+0x208>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041d0:	2302      	movs	r3, #2
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041d4:	2303      	movs	r3, #3
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e0:	4619      	mov	r1, r3
 80041e2:	4824      	ldr	r0, [pc, #144]	; (8004274 <HAL_ADC_MspInit+0x20c>)
 80041e4:	f003 ff0a 	bl	8007ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041e8:	2302      	movs	r3, #2
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ec:	2303      	movs	r3, #3
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f8:	4619      	mov	r1, r3
 80041fa:	481f      	ldr	r0, [pc, #124]	; (8004278 <HAL_ADC_MspInit+0x210>)
 80041fc:	f003 fefe 	bl	8007ffc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004202:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_ADC_MspInit+0x224>)
 8004204:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_ADC_MspInit+0x220>)
 800421c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004220:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004228:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_ADC_MspInit+0x220>)
 800422c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004230:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004238:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_ADC_MspInit+0x220>)
 800423c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004240:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004244:	2200      	movs	r2, #0
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004248:	480f      	ldr	r0, [pc, #60]	; (8004288 <HAL_ADC_MspInit+0x220>)
 800424a:	f003 fad5 	bl	80077f8 <HAL_DMA_Init>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8004254:	f7ff fed6 	bl	8004004 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <HAL_ADC_MspInit+0x220>)
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_ADC_MspInit+0x220>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004264:	bf00      	nop
 8004266:	3738      	adds	r7, #56	; 0x38
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012000 	.word	0x40012000
 8004270:	40023800 	.word	0x40023800
 8004274:	40020800 	.word	0x40020800
 8004278:	40020000 	.word	0x40020000
 800427c:	20002078 	.word	0x20002078
 8004280:	40026410 	.word	0x40026410
 8004284:	40012100 	.word	0x40012100
 8004288:	200020d8 	.word	0x200020d8
 800428c:	40026440 	.word	0x40026440

08004290 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a43      	ldr	r2, [pc, #268]	; (80043bc <HAL_SPI_MspInit+0x12c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d17f      	bne.n	80043b2 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	4b42      	ldr	r3, [pc, #264]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a41      	ldr	r2, [pc, #260]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a3a      	ldr	r2, [pc, #232]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_SPI_MspInit+0x130>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 8004306:	230c      	movs	r3, #12
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004316:	2305      	movs	r3, #5
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	4828      	ldr	r0, [pc, #160]	; (80043c4 <HAL_SPI_MspInit+0x134>)
 8004322:	f003 fe6b 	bl	8007ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 8004326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004338:	2305      	movs	r3, #5
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4619      	mov	r1, r3
 8004342:	4821      	ldr	r0, [pc, #132]	; (80043c8 <HAL_SPI_MspInit+0x138>)
 8004344:	f003 fe5a 	bl	8007ffc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004348:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <HAL_SPI_MspInit+0x140>)
 800434c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800434e:	4b1f      	ldr	r3, [pc, #124]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004350:	2200      	movs	r2, #0
 8004352:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004354:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800435a:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800435c:	2200      	movs	r2, #0
 800435e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004366:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800436e:	4b17      	ldr	r3, [pc, #92]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004374:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004376:	2200      	movs	r2, #0
 8004378:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800437c:	2200      	movs	r2, #0
 800437e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004382:	2200      	movs	r2, #0
 8004384:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004386:	4811      	ldr	r0, [pc, #68]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 8004388:	f003 fa36 	bl	80077f8 <HAL_DMA_Init>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004392:	f7ff fe37 	bl	8004004 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800439a:	649a      	str	r2, [r3, #72]	; 0x48
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_SPI_MspInit+0x13c>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	2024      	movs	r0, #36	; 0x24
 80043a8:	f003 f9ef 	bl	800778a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80043ac:	2024      	movs	r0, #36	; 0x24
 80043ae:	f003 fa08 	bl	80077c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3728      	adds	r7, #40	; 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40003800 	.word	0x40003800
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40020800 	.word	0x40020800
 80043c8:	40020400 	.word	0x40020400
 80043cc:	20002190 	.word	0x20002190
 80043d0:	40026070 	.word	0x40026070

080043d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d115      	bne.n	8004412 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_TIM_Base_MspInit+0x48>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <HAL_TIM_Base_MspInit+0x48>)
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_TIM_Base_MspInit+0x48>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2100      	movs	r1, #0
 8004406:	201c      	movs	r0, #28
 8004408:	f003 f9bf 	bl	800778a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800440c:	201c      	movs	r0, #28
 800440e:	f003 f9d8 	bl	80077c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a36      	ldr	r2, [pc, #216]	; (8004518 <HAL_UART_MspInit+0xf8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d134      	bne.n	80044ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_UART_MspInit+0xfc>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a34      	ldr	r2, [pc, #208]	; (800451c <HAL_UART_MspInit+0xfc>)
 800444c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_UART_MspInit+0xfc>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_UART_MspInit+0xfc>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_UART_MspInit+0xfc>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	6313      	str	r3, [r2, #48]	; 0x30
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_UART_MspInit+0xfc>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800447a:	230c      	movs	r3, #12
 800447c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800448a:	2307      	movs	r3, #7
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448e:	f107 031c 	add.w	r3, r7, #28
 8004492:	4619      	mov	r1, r3
 8004494:	4822      	ldr	r0, [pc, #136]	; (8004520 <HAL_UART_MspInit+0x100>)
 8004496:	f003 fdb1 	bl	8007ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	2100      	movs	r1, #0
 800449e:	2026      	movs	r0, #38	; 0x26
 80044a0:	f003 f973 	bl	800778a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044a4:	2026      	movs	r0, #38	; 0x26
 80044a6:	f003 f98c 	bl	80077c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80044aa:	e031      	b.n	8004510 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_UART_MspInit+0x104>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d12c      	bne.n	8004510 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_UART_MspInit+0xfc>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80044ee:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80044f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004500:	2307      	movs	r3, #7
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	4619      	mov	r1, r3
 800450a:	4807      	ldr	r0, [pc, #28]	; (8004528 <HAL_UART_MspInit+0x108>)
 800450c:	f003 fd76 	bl	8007ffc <HAL_GPIO_Init>
}
 8004510:	bf00      	nop
 8004512:	3730      	adds	r7, #48	; 0x30
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40004400 	.word	0x40004400
 800451c:	40023800 	.word	0x40023800
 8004520:	40020000 	.word	0x40020000
 8004524:	40004800 	.word	0x40004800
 8004528:	40020800 	.word	0x40020800

0800452c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004530:	e7fe      	b.n	8004530 <NMI_Handler+0x4>

08004532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004536:	e7fe      	b.n	8004536 <HardFault_Handler+0x4>

08004538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453c:	e7fe      	b.n	800453c <MemManage_Handler+0x4>

0800453e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <BusFault_Handler+0x4>

08004544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <UsageFault_Handler+0x4>

0800454a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004578:	f002 fbe4 	bl	8006d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}

08004580 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8004584:	2010      	movs	r0, #16
 8004586:	f003 ff19 	bl	80083bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <DMA1_Stream4_IRQHandler+0x10>)
 8004596:	f003 fac7 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20002190 	.word	0x20002190

080045a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045a8:	4804      	ldr	r0, [pc, #16]	; (80045bc <TIM2_IRQHandler+0x18>)
 80045aa:	f005 faf1 	bl	8009b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 80045ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80045b2:	4803      	ldr	r0, [pc, #12]	; (80045c0 <TIM2_IRQHandler+0x1c>)
 80045b4:	f003 fee7 	bl	8008386 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 80045b8:	bf00      	nop
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	200021f0 	.word	0x200021f0
 80045c0:	40020000 	.word	0x40020000

080045c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <SPI2_IRQHandler+0x10>)
 80045ca:	f004 ffc3 	bl	8009554 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20002138 	.word	0x20002138

080045d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045dc:	4802      	ldr	r0, [pc, #8]	; (80045e8 <USART2_IRQHandler+0x10>)
 80045de:	f005 ffb3 	bl	800a548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20002238 	.word	0x20002238

080045ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80045f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045f4:	f003 fee2 	bl	80083bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}

080045fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <DMA2_Stream0_IRQHandler+0x10>)
 8004602:	f003 fa91 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20002078 	.word	0x20002078

08004610 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004614:	4802      	ldr	r0, [pc, #8]	; (8004620 <DMA2_Stream2_IRQHandler+0x10>)
 8004616:	f003 fa87 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	200020d8 	.word	0x200020d8

08004624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return 1;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <_kill>:

int _kill(int pid, int sig)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800463e:	f007 fd77 	bl	800c130 <__errno>
 8004642:	4603      	mov	r3, r0
 8004644:	2216      	movs	r2, #22
 8004646:	601a      	str	r2, [r3, #0]
  return -1;
 8004648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <_exit>:

void _exit (int status)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800465c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ffe7 	bl	8004634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004666:	e7fe      	b.n	8004666 <_exit+0x12>

08004668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e00a      	b.n	8004690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800467a:	f3af 8000 	nop.w
 800467e:	4601      	mov	r1, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	60ba      	str	r2, [r7, #8]
 8004686:	b2ca      	uxtb	r2, r1
 8004688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	3301      	adds	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	dbf0      	blt.n	800467a <_read+0x12>
  }

  return len;
 8004698:	687b      	ldr	r3, [r7, #4]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b086      	sub	sp, #24
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	e009      	b.n	80046c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	60ba      	str	r2, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	3301      	adds	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	dbf1      	blt.n	80046b4 <_write+0x12>
  }
  return len;
 80046d0:	687b      	ldr	r3, [r7, #4]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <_close>:

int _close(int file)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004702:	605a      	str	r2, [r3, #4]
  return 0;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_isatty>:

int _isatty(int file)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800471a:	2301      	movs	r3, #1
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <_sbrk+0x5c>)
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <_sbrk+0x60>)
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004758:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <_sbrk+0x64>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <_sbrk+0x64>)
 8004762:	4a12      	ldr	r2, [pc, #72]	; (80047ac <_sbrk+0x68>)
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <_sbrk+0x64>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d207      	bcs.n	8004784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004774:	f007 fcdc 	bl	800c130 <__errno>
 8004778:	4603      	mov	r3, r0
 800477a:	220c      	movs	r2, #12
 800477c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004782:	e009      	b.n	8004798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <_sbrk+0x64>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <_sbrk+0x64>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <_sbrk+0x64>)
 8004794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20020000 	.word	0x20020000
 80047a4:	00000400 	.word	0x00000400
 80047a8:	20007f44 	.word	0x20007f44
 80047ac:	20009128 	.word	0x20009128

080047b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <SystemInit+0x20>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <SystemInit+0x20>)
 80047bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 80047d4:	b40f      	push	{r0, r1, r2, r3}
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	480a      	ldr	r0, [pc, #40]	; (8004814 <term_print+0x40>)
 80047ea:	f007 fc2f 	bl	800c04c <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 80047ee:	4809      	ldr	r0, [pc, #36]	; (8004814 <term_print+0x40>)
 80047f0:	f7fb fd5e 	bl	80002b0 <strlen>
 80047f4:	4603      	mov	r3, r0
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fc:	4905      	ldr	r1, [pc, #20]	; (8004814 <term_print+0x40>)
 80047fe:	4806      	ldr	r0, [pc, #24]	; (8004818 <term_print+0x44>)
 8004800:	f005 fddf 	bl	800a3c2 <HAL_UART_Transmit>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004810:	b004      	add	sp, #16
 8004812:	4770      	bx	lr
 8004814:	20007f48 	.word	0x20007f48
 8004818:	20002238 	.word	0x20002238

0800481c <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d838      	bhi.n	80048a6 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	4619      	mov	r1, r3
 8004838:	481d      	ldr	r0, [pc, #116]	; (80048b0 <term_show_buffer+0x94>)
 800483a:	f7ff ffcb 	bl	80047d4 <term_print>
	term_print("%3d: ", 0);
 800483e:	2100      	movs	r1, #0
 8004840:	481c      	ldr	r0, [pc, #112]	; (80048b4 <term_show_buffer+0x98>)
 8004842:	f7ff ffc7 	bl	80047d4 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e020      	b.n	800488e <term_show_buffer+0x72>
		if (count >= 20) {
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b13      	cmp	r3, #19
 8004850:	dd06      	ble.n	8004860 <term_show_buffer+0x44>
			count =0;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004856:	8a7b      	ldrh	r3, [r7, #18]
 8004858:	4619      	mov	r1, r3
 800485a:	4817      	ldr	r0, [pc, #92]	; (80048b8 <term_show_buffer+0x9c>)
 800485c:	f7ff ffba 	bl	80047d4 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	4916      	ldr	r1, [pc, #88]	; (80048bc <term_show_buffer+0xa0>)
 8004864:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004868:	fb03 f202 	mul.w	r2, r3, r2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004874:	4619      	mov	r1, r3
 8004876:	4812      	ldr	r0, [pc, #72]	; (80048c0 <term_show_buffer+0xa4>)
 8004878:	f7ff ffac 	bl	80047d4 <term_print>
		count++; address++;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	8a7b      	ldrh	r3, [r7, #18]
 8004884:	3301      	adds	r3, #1
 8004886:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004894:	d3da      	bcc.n	800484c <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004896:	480b      	ldr	r0, [pc, #44]	; (80048c4 <term_show_buffer+0xa8>)
 8004898:	f7ff ff9c 	bl	80047d4 <term_print>
	term_show_channel(bufnum);
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f886 	bl	80049b0 <term_show_channel>
 80048a4:	e000      	b.n	80048a8 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80048a6:	bf00      	nop
}
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	0800f8d8 	.word	0x0800f8d8
 80048b4:	0800f8e4 	.word	0x0800f8e4
 80048b8:	0800f8ec 	.word	0x0800f8ec
 80048bc:	200071f4 	.word	0x200071f4
 80048c0:	0800f8f4 	.word	0x0800f8f4
 80048c4:	0800f8fc 	.word	0x0800f8fc

080048c8 <term_show_measurements>:

void term_show_measurements() {
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b08e      	sub	sp, #56	; 0x38
 80048ce:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 80048d0:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <term_show_measurements+0xc8>)
 80048d2:	7b1b      	ldrb	r3, [r3, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d008      	beq.n	80048ea <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 80048d8:	f7fc ffc4 	bl	8001864 <calc_measurements>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 80048e2:	482c      	ldr	r0, [pc, #176]	; (8004994 <term_show_measurements+0xcc>)
 80048e4:	f7ff ff76 	bl	80047d4 <term_print>
			return;
 80048e8:	e047      	b.n	800497a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 80048ea:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <term_show_measurements+0xd0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fe4a 	bl	8000588 <__aeabi_f2d>
 80048f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <term_show_measurements+0xd4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fb fe43 	bl	8000588 <__aeabi_f2d>
 8004902:	4604      	mov	r4, r0
 8004904:	460d      	mov	r5, r1
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <term_show_measurements+0xd8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fe3c 	bl	8000588 <__aeabi_f2d>
 8004910:	4680      	mov	r8, r0
 8004912:	4689      	mov	r9, r1
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <term_show_measurements+0xdc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7fb fe35 	bl	8000588 <__aeabi_f2d>
 800491e:	4682      	mov	sl, r0
 8004920:	468b      	mov	fp, r1
 8004922:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <term_show_measurements+0xe0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fb fe2e 	bl	8000588 <__aeabi_f2d>
 800492c:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <term_show_measurements+0xe0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fb fe27 	bl	8000588 <__aeabi_f2d>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	ec43 2b10 	vmov	d0, r2, r3
 8004942:	f00a f929 	bl	800eb98 <acos>
 8004946:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 800494a:	a30f      	add	r3, pc, #60	; (adr r3, 8004988 <term_show_measurements+0xc0>)
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f7fb fe72 	bl	8000638 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800495c:	ed97 7b00 	vldr	d7, [r7]
 8004960:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004964:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004968:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800496c:	e9cd 4500 	strd	r4, r5, [sp]
 8004970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004974:	480d      	ldr	r0, [pc, #52]	; (80049ac <term_show_measurements+0xe4>)
 8004976:	f7ff ff2d 	bl	80047d4 <term_print>
}
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	f3af 8000 	nop.w
 8004988:	1af05a77 	.word	0x1af05a77
 800498c:	404ca5dc 	.word	0x404ca5dc
 8004990:	2000023c 	.word	0x2000023c
 8004994:	0800f900 	.word	0x0800f900
 8004998:	20007f14 	.word	0x20007f14
 800499c:	20007f18 	.word	0x20007f18
 80049a0:	20007f1c 	.word	0x20007f1c
 80049a4:	20007f20 	.word	0x20007f20
 80049a8:	20007f24 	.word	0x20007f24
 80049ac:	0800f914 	.word	0x0800f914

080049b0 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	f200 80ce 	bhi.w	8004b5e <term_show_channel+0x1ae>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 80049c2:	79fa      	ldrb	r2, [r7, #7]
 80049c4:	4968      	ldr	r1, [pc, #416]	; (8004b68 <term_show_channel+0x1b8>)
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	330c      	adds	r3, #12
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d050      	beq.n	8004a7a <term_show_channel+0xca>
		term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min  );
 80049d8:	79fa      	ldrb	r2, [r7, #7]
 80049da:	4963      	ldr	r1, [pc, #396]	; (8004b68 <term_show_channel+0x1b8>)
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	461c      	mov	r4, r3
 80049ea:	79fa      	ldrb	r2, [r7, #7]
 80049ec:	495e      	ldr	r1, [pc, #376]	; (8004b68 <term_show_channel+0x1b8>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3302      	adds	r3, #2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	461d      	mov	r5, r3
 80049fe:	79fa      	ldrb	r2, [r7, #7]
 8004a00:	4959      	ldr	r1, [pc, #356]	; (8004b68 <term_show_channel+0x1b8>)
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	79fa      	ldrb	r2, [r7, #7]
 8004a14:	4954      	ldr	r1, [pc, #336]	; (8004b68 <term_show_channel+0x1b8>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	1ac3      	subs	r3, r0, r3
 8004a24:	462a      	mov	r2, r5
 8004a26:	4621      	mov	r1, r4
 8004a28:	4850      	ldr	r0, [pc, #320]	; (8004b6c <term_show_channel+0x1bc>)
 8004a2a:	f7ff fed3 	bl	80047d4 <term_print>
		term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004a2e:	79fa      	ldrb	r2, [r7, #7]
 8004a30:	494d      	ldr	r1, [pc, #308]	; (8004b68 <term_show_channel+0x1b8>)
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd fa07 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004a46:	4604      	mov	r4, r0
 8004a48:	79fa      	ldrb	r2, [r7, #7]
 8004a4a:	4947      	ldr	r1, [pc, #284]	; (8004b68 <term_show_channel+0x1b8>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3302      	adds	r3, #2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fd f9f9 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	4621      	mov	r1, r4
 8004a68:	4841      	ldr	r0, [pc, #260]	; (8004b70 <term_show_channel+0x1c0>)
 8004a6a:	f7ff feb3 	bl	80047d4 <term_print>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004a6e:	79fb      	ldrb	r3, [r7, #7]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4840      	ldr	r0, [pc, #256]	; (8004b74 <term_show_channel+0x1c4>)
 8004a74:	f7ff feae 	bl	80047d4 <term_print>
		return;
 8004a78:	e072      	b.n	8004b60 <term_show_channel+0x1b0>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004a7a:	79fa      	ldrb	r2, [r7, #7]
 8004a7c:	493a      	ldr	r1, [pc, #232]	; (8004b68 <term_show_channel+0x1b8>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3302      	adds	r3, #2
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	79fa      	ldrb	r2, [r7, #7]
 8004a90:	4935      	ldr	r1, [pc, #212]	; (8004b68 <term_show_channel+0x1b8>)
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	1ac3      	subs	r3, r0, r3
 8004aa0:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4834      	ldr	r0, [pc, #208]	; (8004b78 <term_show_channel+0x1c8>)
 8004aa8:	f7ff fe94 	bl	80047d4 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004aac:	79fa      	ldrb	r2, [r7, #7]
 8004aae:	492e      	ldr	r1, [pc, #184]	; (8004b68 <term_show_channel+0x1b8>)
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	3310      	adds	r3, #16
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b21b      	sxth	r3, r3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd f9c7 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fd f9c1 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ad2:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	0fda      	lsrs	r2, r3, #31
 8004ad8:	4413      	add	r3, r2
 8004ada:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd f9b8 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4824      	ldr	r0, [pc, #144]	; (8004b7c <term_show_channel+0x1cc>)
 8004aec:	f7ff fe72 	bl	80047d4 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004af0:	79fa      	ldrb	r2, [r7, #7]
 8004af2:	491d      	ldr	r1, [pc, #116]	; (8004b68 <term_show_channel+0x1b8>)
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd f9a6 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	4916      	ldr	r1, [pc, #88]	; (8004b68 <term_show_channel+0x1b8>)
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3302      	adds	r3, #2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd f998 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4811      	ldr	r0, [pc, #68]	; (8004b70 <term_show_channel+0x1c0>)
 8004b2c:	f7ff fe52 	bl	80047d4 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004b30:	79fa      	ldrb	r2, [r7, #7]
 8004b32:	490d      	ldr	r1, [pc, #52]	; (8004b68 <term_show_channel+0x1b8>)
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3304      	adds	r3, #4
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	79fa      	ldrb	r2, [r7, #7]
 8004b44:	4808      	ldr	r0, [pc, #32]	; (8004b68 <term_show_channel+0x1b8>)
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4403      	add	r3, r0
 8004b50:	3308      	adds	r3, #8
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	480a      	ldr	r0, [pc, #40]	; (8004b80 <term_show_channel+0x1d0>)
 8004b58:	f7ff fe3c 	bl	80047d4 <term_print>
 8004b5c:	e000      	b.n	8004b60 <term_show_channel+0x1b0>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004b5e:	bf00      	nop
}
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bdb0      	pop	{r4, r5, r7, pc}
 8004b66:	bf00      	nop
 8004b68:	2000023c 	.word	0x2000023c
 8004b6c:	0800f944 	.word	0x0800f944
 8004b70:	0800f95c 	.word	0x0800f95c
 8004b74:	0800f974 	.word	0x0800f974
 8004b78:	0800f994 	.word	0x0800f994
 8004b7c:	0800f9b0 	.word	0x0800f9b0
 8004b80:	0800f9d4 	.word	0x0800f9d4

08004b84 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d821      	bhi.n	8004bd8 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4811      	ldr	r0, [pc, #68]	; (8004be0 <term_csv_buffer+0x5c>)
 8004b9a:	f7ff fe1b 	bl	80047d4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e011      	b.n	8004bc8 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	490f      	ldr	r1, [pc, #60]	; (8004be4 <term_csv_buffer+0x60>)
 8004ba8:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004bac:	fb03 f202 	mul.w	r2, r3, r2
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	480a      	ldr	r0, [pc, #40]	; (8004be8 <term_csv_buffer+0x64>)
 8004bbe:	f7ff fe09 	bl	80047d4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004bce:	d3e9      	bcc.n	8004ba4 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004bd0:	4806      	ldr	r0, [pc, #24]	; (8004bec <term_csv_buffer+0x68>)
 8004bd2:	f7ff fdff 	bl	80047d4 <term_print>
 8004bd6:	e000      	b.n	8004bda <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004bd8:	bf00      	nop
}
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	0800f8d8 	.word	0x0800f8d8
 8004be4:	200057b4 	.word	0x200057b4
 8004be8:	0800f9f4 	.word	0x0800f9f4
 8004bec:	0800f9fc 	.word	0x0800f9fc

08004bf0 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8004bf4:	2180      	movs	r1, #128	; 0x80
 8004bf6:	480f      	ldr	r0, [pc, #60]	; (8004c34 <Displ_Select+0x44>)
 8004bf8:	f003 fb94 	bl	8008324 <HAL_GPIO_ReadPin>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d015      	beq.n	8004c2e <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8004c02:	2201      	movs	r2, #1
 8004c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c08:	480b      	ldr	r0, [pc, #44]	; (8004c38 <Displ_Select+0x48>)
 8004c0a:	f003 fba3 	bl	8008354 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8004c0e:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <Displ_Select+0x4c>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	490a      	ldr	r1, [pc, #40]	; (8004c3c <Displ_Select+0x4c>)
 8004c14:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004c18:	4013      	ands	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <Displ_Select+0x4c>)
 8004c1e:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <Displ_Select+0x4c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	4802      	ldr	r0, [pc, #8]	; (8004c34 <Displ_Select+0x44>)
 8004c2a:	f003 fb93 	bl	8008354 <HAL_GPIO_WritePin>
		}
	}
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40020800 	.word	0x40020800
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40003800 	.word	0x40003800

08004c40 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6039      	str	r1, [r7, #0]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	71fb      	strb	r3, [r7, #7]
 8004c50:	460b      	mov	r3, r1
 8004c52:	80bb      	strh	r3, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004c58:	bf00      	nop
 8004c5a:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <Displ_Transmit+0xa4>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0fa      	beq.n	8004c5a <Displ_Transmit+0x1a>

	Displ_Select();
 8004c64:	f7ff ffc4 	bl	8004bf0 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	481e      	ldr	r0, [pc, #120]	; (8004ce8 <Displ_Transmit+0xa8>)
 8004c70:	f003 fb70 	bl	8008354 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8004c74:	79bb      	ldrb	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8004c7a:	88bb      	ldrh	r3, [r7, #4]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	4413      	add	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e00b      	b.n	8004ca0 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	ba5b      	rev16	r3, r3
 8004c92:	60bb      	str	r3, [r7, #8]
  return result;
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d3ef      	bcc.n	8004c88 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8004ca8:	88bb      	ldrh	r3, [r7, #4]
 8004caa:	2b13      	cmp	r3, #19
 8004cac:	d80d      	bhi.n	8004cca <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <Displ_Transmit+0xa4>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004cb4:	88ba      	ldrh	r2, [r7, #4]
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	480b      	ldr	r0, [pc, #44]	; (8004cec <Displ_Transmit+0xac>)
 8004cbe:	f004 fa56 	bl	800916e <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8004cc2:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <Displ_Transmit+0xa4>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8004cc8:	e008      	b.n	8004cdc <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <Displ_Transmit+0xa4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004cd0:	88bb      	ldrh	r3, [r7, #4]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <Displ_Transmit+0xac>)
 8004cd8:	f004 fb86 	bl	80093e8 <HAL_SPI_Transmit_DMA>
	}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20000034 	.word	0x20000034
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	20002138 	.word	0x20002138

08004cf0 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004cfa:	1df9      	adds	r1, r7, #7
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7ff ff9d 	bl	8004c40 <Displ_Transmit>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f7ff ff88 	bl	8004c40 <Displ_Transmit>
 8004d30:	e000      	b.n	8004d34 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8004d32:	bf00      	nop
}
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	Displ_Select();
 8004d40:	f7ff ff56 	bl	8004bf0 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004d44:	2200      	movs	r2, #0
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	4819      	ldr	r0, [pc, #100]	; (8004db0 <ILI9XXX_Init+0x74>)
 8004d4a:	f003 fb03 	bl	8008354 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004d4e:	2001      	movs	r0, #1
 8004d50:	f002 f818 	bl	8006d84 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004d54:	2201      	movs	r2, #1
 8004d56:	2140      	movs	r1, #64	; 0x40
 8004d58:	4815      	ldr	r0, [pc, #84]	; (8004db0 <ILI9XXX_Init+0x74>)
 8004d5a:	f003 fafb 	bl	8008354 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8004d5e:	20a5      	movs	r0, #165	; 0xa5
 8004d60:	f002 f810 	bl	8006d84 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004d64:	203a      	movs	r0, #58	; 0x3a
 8004d66:	f7ff ffc3 	bl	8004cf0 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	4811      	ldr	r0, [pc, #68]	; (8004db4 <ILI9XXX_Init+0x78>)
 8004d70:	f7ff ffcd 	bl	8004d0e <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004d74:	20b0      	movs	r0, #176	; 0xb0
 8004d76:	f7ff ffbb 	bl	8004cf0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	480e      	ldr	r0, [pc, #56]	; (8004db8 <ILI9XXX_Init+0x7c>)
 8004d80:	f7ff ffc5 	bl	8004d0e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004d84:	20b0      	movs	r0, #176	; 0xb0
 8004d86:	f7ff ffb3 	bl	8004cf0 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	480a      	ldr	r0, [pc, #40]	; (8004db8 <ILI9XXX_Init+0x7c>)
 8004d90:	f7ff ffbd 	bl	8004d0e <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004d94:	2011      	movs	r0, #17
 8004d96:	f7ff ffab 	bl	8004cf0 <Displ_WriteCommand>
	HAL_Delay(120);
 8004d9a:	2078      	movs	r0, #120	; 0x78
 8004d9c:	f001 fff2 	bl	8006d84 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004da0:	2029      	movs	r0, #41	; 0x29
 8004da2:	f7ff ffa5 	bl	8004cf0 <Displ_WriteCommand>
	HAL_Delay(5);
 8004da6:	2005      	movs	r0, #5
 8004da8:	f001 ffec 	bl	8006d84 <HAL_Delay>

}
 8004dac:	bf00      	nop
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40020400 	.word	0x40020400
 8004db4:	0800fa04 	.word	0x0800fa04
 8004db8:	0800fa08 	.word	0x0800fa08

08004dbc <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4623      	mov	r3, r4
 8004dcc:	80fb      	strh	r3, [r7, #6]
 8004dce:	4603      	mov	r3, r0
 8004dd0:	80bb      	strh	r3, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	807b      	strh	r3, [r7, #2]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	061a      	lsls	r2, r3, #24
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004de6:	431a      	orrs	r2, r3
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	0a12      	lsrs	r2, r2, #8
 8004df4:	b292      	uxth	r2, r2
 8004df6:	431a      	orrs	r2, r3
 8004df8:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <Displ_SetAddressWindow+0x90>)
 8004dfa:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004dfc:	202a      	movs	r0, #42	; 0x2a
 8004dfe:	f7ff ff77 	bl	8004cf0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2104      	movs	r1, #4
 8004e06:	4811      	ldr	r0, [pc, #68]	; (8004e4c <Displ_SetAddressWindow+0x90>)
 8004e08:	f7ff ff81 	bl	8004d0e <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004e0c:	883b      	ldrh	r3, [r7, #0]
 8004e0e:	061a      	lsls	r2, r3, #24
 8004e10:	883b      	ldrh	r3, [r7, #0]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	88bb      	ldrh	r3, [r7, #4]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	88ba      	ldrh	r2, [r7, #4]
 8004e24:	0a12      	lsrs	r2, r2, #8
 8004e26:	b292      	uxth	r2, r2
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <Displ_SetAddressWindow+0x90>)
 8004e2c:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004e2e:	202b      	movs	r0, #43	; 0x2b
 8004e30:	f7ff ff5e 	bl	8004cf0 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004e34:	2200      	movs	r2, #0
 8004e36:	2104      	movs	r1, #4
 8004e38:	4804      	ldr	r0, [pc, #16]	; (8004e4c <Displ_SetAddressWindow+0x90>)
 8004e3a:	f7ff ff68 	bl	8004d0e <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8004e3e:	202c      	movs	r0, #44	; 0x2c
 8004e40:	f7ff ff56 	bl	8004cf0 <Displ_WriteCommand>
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}
 8004e4c:	20008fd0 	.word	0x20008fd0

08004e50 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	4809      	ldr	r0, [pc, #36]	; (8004e84 <Displ_Init+0x34>)
 8004e60:	f003 fa78 	bl	8008354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8004e64:	2201      	movs	r2, #1
 8004e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e6a:	4807      	ldr	r0, [pc, #28]	; (8004e88 <Displ_Init+0x38>)
 8004e6c:	f003 fa72 	bl	8008354 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8004e70:	f7ff ff64 	bl	8004d3c <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f808 	bl	8004e8c <Displ_Orientation>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40020800 	.word	0x40020800
 8004e88:	40020000 	.word	0x40020000

08004e8c <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d837      	bhi.n	8004f0c <Displ_Orientation+0x80>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <Displ_Orientation+0x18>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ecb 	.word	0x08004ecb
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004ef7 	.word	0x08004ef7
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <Displ_Orientation+0xa0>)
 8004eb6:	2288      	movs	r2, #136	; 0x88
 8004eb8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <Displ_Orientation+0xa4>)
 8004ebc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ec0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <Displ_Orientation+0xa8>)
 8004ec4:	22f0      	movs	r2, #240	; 0xf0
 8004ec6:	801a      	strh	r2, [r3, #0]
			break;
 8004ec8:	e020      	b.n	8004f0c <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <Displ_Orientation+0xa0>)
 8004ecc:	22e8      	movs	r2, #232	; 0xe8
 8004ece:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004ed0:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <Displ_Orientation+0xa4>)
 8004ed2:	22f0      	movs	r2, #240	; 0xf0
 8004ed4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <Displ_Orientation+0xa8>)
 8004ed8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004edc:	801a      	strh	r2, [r3, #0]
			break;
 8004ede:	e015      	b.n	8004f0c <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8004ee0:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <Displ_Orientation+0xa0>)
 8004ee2:	2248      	movs	r2, #72	; 0x48
 8004ee4:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <Displ_Orientation+0xa4>)
 8004ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004eec:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <Displ_Orientation+0xa8>)
 8004ef0:	22f0      	movs	r2, #240	; 0xf0
 8004ef2:	801a      	strh	r2, [r3, #0]
			break;
 8004ef4:	e00a      	b.n	8004f0c <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <Displ_Orientation+0xa0>)
 8004ef8:	2228      	movs	r2, #40	; 0x28
 8004efa:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <Displ_Orientation+0xa4>)
 8004efe:	22f0      	movs	r2, #240	; 0xf0
 8004f00:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004f02:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <Displ_Orientation+0xa8>)
 8004f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f08:	801a      	strh	r2, [r3, #0]
			break;
 8004f0a:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8004f0c:	2036      	movs	r0, #54	; 0x36
 8004f0e:	f7ff feef 	bl	8004cf0 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2101      	movs	r1, #1
 8004f16:	4805      	ldr	r0, [pc, #20]	; (8004f2c <Displ_Orientation+0xa0>)
 8004f18:	f7ff fef9 	bl	8004d0e <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004f1c:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <Displ_Orientation+0xac>)
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	7013      	strb	r3, [r2, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20008fd4 	.word	0x20008fd4
 8004f30:	20007fcc 	.word	0x20007fcc
 8004f34:	20007fca 	.word	0x20007fca
 8004f38:	20007fc8 	.word	0x20007fc8

08004f3c <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <HAL_SPI_ErrorCallback+0x24>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_SPI_ErrorCallback+0x28>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
	}
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40003800 	.word	0x40003800
 8004f64:	20000034 	.word	0x20000034

08004f68 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a05      	ldr	r2, [pc, #20]	; (8004f8c <HAL_SPI_TxCpltCallback+0x24>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d102      	bne.n	8004f80 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_SPI_TxCpltCallback+0x28>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40003800 	.word	0x40003800
 8004f90:	20000034 	.word	0x20000034

08004f94 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b08b      	sub	sp, #44	; 0x2c
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	80fb      	strh	r3, [r7, #6]
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	80bb      	strh	r3, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	807b      	strh	r3, [r7, #2]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4a4f      	ldr	r2, [pc, #316]	; (80050f4 <Displ_FillArea+0x160>)
 8004fb6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f280 8096 	bge.w	80050ec <Displ_FillArea+0x158>
 8004fc0:	88bb      	ldrh	r3, [r7, #4]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	; (80050f8 <Displ_FillArea+0x164>)
 8004fc4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	f280 808f 	bge.w	80050ec <Displ_FillArea+0x158>
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 808b 	beq.w	80050ec <Displ_FillArea+0x158>
 8004fd6:	883b      	ldrh	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8087 	beq.w	80050ec <Displ_FillArea+0x158>

	x1=x + w - 1;
 8004fde:	88fa      	ldrh	r2, [r7, #6]
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <Displ_FillArea+0x160>)
 8004fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d903      	bls.n	8004ffe <Displ_FillArea+0x6a>
		x1=_width;
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <Displ_FillArea+0x160>)
 8004ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ffc:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8004ffe:	88ba      	ldrh	r2, [r7, #4]
 8005000:	883b      	ldrh	r3, [r7, #0]
 8005002:	4413      	add	r3, r2
 8005004:	3b01      	subs	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8005008:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <Displ_FillArea+0x164>)
 800500a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800500e:	461a      	mov	r2, r3
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4293      	cmp	r3, r2
 8005014:	d903      	bls.n	800501e <Displ_FillArea+0x8a>
		y1=_height;
 8005016:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <Displ_FillArea+0x164>)
 8005018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800501c:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 800501e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	431a      	orrs	r2, r3
 800502c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8005034:	88bb      	ldrh	r3, [r7, #4]
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	3301      	adds	r3, #1
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	6a39      	ldr	r1, [r7, #32]
 8005040:	1a8a      	subs	r2, r1, r2
 8005042:	3201      	adds	r2, #1
 8005044:	fb02 f303 	mul.w	r3, r2, r3
 8005048:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 800504a:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <Displ_FillArea+0x168>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d204      	bcs.n	8005062 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	3301      	adds	r3, #1
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e002      	b.n	8005068 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8005062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005066:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005068:	2300      	movs	r3, #0
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	e007      	b.n	800507e <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	617a      	str	r2, [r7, #20]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	3301      	adds	r3, #1
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	429a      	cmp	r2, r3
 8005084:	d3f3      	bcc.n	800506e <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	b29a      	uxth	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	b29b      	uxth	r3, r3
 800508e:	88b9      	ldrh	r1, [r7, #4]
 8005090:	88f8      	ldrh	r0, [r7, #6]
 8005092:	f7ff fe93 	bl	8004dbc <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	0a9b      	lsrs	r3, r3, #10
 800509a:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	e00a      	b.n	80050b8 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 80050a2:	4b16      	ldr	r3, [pc, #88]	; (80050fc <Displ_FillArea+0x168>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fe2e 	bl	8004d0e <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d3f0      	bcc.n	80050a2 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <Displ_FillArea+0x168>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	005a      	lsls	r2, r3, #1
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	02db      	lsls	r3, r3, #11
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2200      	movs	r2, #0
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7ff fe1c 	bl	8004d0e <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <Displ_FillArea+0x168>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <Displ_FillArea+0x16c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <Displ_FillArea+0x150>
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <Displ_FillArea+0x170>)
 80050e2:	e000      	b.n	80050e6 <Displ_FillArea+0x152>
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <Displ_FillArea+0x16c>)
 80050e6:	4a05      	ldr	r2, [pc, #20]	; (80050fc <Displ_FillArea+0x168>)
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e000      	b.n	80050ee <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80050ec:	bf00      	nop

}
 80050ee:	372c      	adds	r7, #44	; 0x2c
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd90      	pop	{r4, r7, pc}
 80050f4:	20007fca 	.word	0x20007fca
 80050f8:	20007fcc 	.word	0x20007fcc
 80050fc:	20000038 	.word	0x20000038
 8005100:	20007fd0 	.word	0x20007fd0
 8005104:	200087d0 	.word	0x200087d0

08005108 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af02      	add	r7, sp, #8
 800510e:	4603      	mov	r3, r0
 8005110:	80fb      	strh	r3, [r7, #6]
 8005112:	460b      	mov	r3, r1
 8005114:	80bb      	strh	r3, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	4a0b      	ldr	r2, [pc, #44]	; (800514c <Displ_Pixel+0x44>)
 800511e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005122:	4293      	cmp	r3, r2
 8005124:	da0e      	bge.n	8005144 <Displ_Pixel+0x3c>
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	4a09      	ldr	r2, [pc, #36]	; (8005150 <Displ_Pixel+0x48>)
 800512a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800512e:	4293      	cmp	r3, r2
 8005130:	da08      	bge.n	8005144 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8005132:	88b9      	ldrh	r1, [r7, #4]
 8005134:	88f8      	ldrh	r0, [r7, #6]
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2301      	movs	r3, #1
 800513c:	2201      	movs	r2, #1
 800513e:	f7ff ff29 	bl	8004f94 <Displ_FillArea>
 8005142:	e000      	b.n	8005146 <Displ_Pixel+0x3e>
        return;
 8005144:	bf00      	nop

}
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20007fca 	.word	0x20007fca
 8005150:	20007fcc 	.word	0x20007fcc

08005154 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	461a      	mov	r2, r3
 8005162:	4623      	mov	r3, r4
 8005164:	80fb      	strh	r3, [r7, #6]
 8005166:	4603      	mov	r3, r0
 8005168:	80bb      	strh	r3, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	807b      	strh	r3, [r7, #2]
 800516e:	4613      	mov	r3, r2
 8005170:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	f1c3 0301 	rsb	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800517c:	2301      	movs	r3, #1
 800517e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005180:	887b      	ldrh	r3, [r7, #2]
 8005182:	461a      	mov	r2, r3
 8005184:	03d2      	lsls	r2, r2, #15
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	b29b      	uxth	r3, r3
 800518c:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8005192:	887b      	ldrh	r3, [r7, #2]
 8005194:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005196:	88f8      	ldrh	r0, [r7, #6]
 8005198:	88ba      	ldrh	r2, [r7, #4]
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	4413      	add	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	883a      	ldrh	r2, [r7, #0]
 80051a2:	4619      	mov	r1, r3
 80051a4:	f7ff ffb0 	bl	8005108 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80051a8:	88f8      	ldrh	r0, [r7, #6]
 80051aa:	88ba      	ldrh	r2, [r7, #4]
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	883a      	ldrh	r2, [r7, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	f7ff ffa7 	bl	8005108 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	887b      	ldrh	r3, [r7, #2]
 80051be:	4413      	add	r3, r2
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	88b9      	ldrh	r1, [r7, #4]
 80051c4:	883a      	ldrh	r2, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ff9e 	bl	8005108 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	887b      	ldrh	r3, [r7, #2]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	88b9      	ldrh	r1, [r7, #4]
 80051d6:	883a      	ldrh	r2, [r7, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff95 	bl	8005108 <Displ_Pixel>

    while (x<y) {
 80051de:	e081      	b.n	80052e4 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80051e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db0e      	blt.n	8005206 <Displ_drawCircle+0xb2>
            y--;
 80051e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80051f4:	8a7b      	ldrh	r3, [r7, #18]
 80051f6:	3302      	adds	r3, #2
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80051fc:	8afa      	ldrh	r2, [r7, #22]
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	4413      	add	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005206:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800520a:	b29b      	uxth	r3, r3
 800520c:	3301      	adds	r3, #1
 800520e:	b29b      	uxth	r3, r3
 8005210:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005212:	8abb      	ldrh	r3, [r7, #20]
 8005214:	3302      	adds	r3, #2
 8005216:	b29b      	uxth	r3, r3
 8005218:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	8abb      	ldrh	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	8a3b      	ldrh	r3, [r7, #16]
 8005228:	4413      	add	r3, r2
 800522a:	b298      	uxth	r0, r3
 800522c:	88ba      	ldrh	r2, [r7, #4]
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	4413      	add	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	883a      	ldrh	r2, [r7, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	f7ff ff66 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	8a3b      	ldrh	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	b298      	uxth	r0, r3
 8005244:	88ba      	ldrh	r2, [r7, #4]
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	4413      	add	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	883a      	ldrh	r2, [r7, #0]
 800524e:	4619      	mov	r1, r3
 8005250:	f7ff ff5a 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005254:	88fa      	ldrh	r2, [r7, #6]
 8005256:	8a3b      	ldrh	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	b298      	uxth	r0, r3
 800525c:	88ba      	ldrh	r2, [r7, #4]
 800525e:	89fb      	ldrh	r3, [r7, #14]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	883a      	ldrh	r2, [r7, #0]
 8005266:	4619      	mov	r1, r3
 8005268:	f7ff ff4e 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 800526c:	88fa      	ldrh	r2, [r7, #6]
 800526e:	8a3b      	ldrh	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	b298      	uxth	r0, r3
 8005274:	88ba      	ldrh	r2, [r7, #4]
 8005276:	89fb      	ldrh	r3, [r7, #14]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	883a      	ldrh	r2, [r7, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	f7ff ff42 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	89fb      	ldrh	r3, [r7, #14]
 8005288:	4413      	add	r3, r2
 800528a:	b298      	uxth	r0, r3
 800528c:	88ba      	ldrh	r2, [r7, #4]
 800528e:	8a3b      	ldrh	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	883a      	ldrh	r2, [r7, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	f7ff ff36 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	b298      	uxth	r0, r3
 80052a4:	88ba      	ldrh	r2, [r7, #4]
 80052a6:	8a3b      	ldrh	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	883a      	ldrh	r2, [r7, #0]
 80052ae:	4619      	mov	r1, r3
 80052b0:	f7ff ff2a 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	89fb      	ldrh	r3, [r7, #14]
 80052b8:	4413      	add	r3, r2
 80052ba:	b298      	uxth	r0, r3
 80052bc:	88ba      	ldrh	r2, [r7, #4]
 80052be:	8a3b      	ldrh	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	883a      	ldrh	r2, [r7, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	f7ff ff1e 	bl	8005108 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	b298      	uxth	r0, r3
 80052d4:	88ba      	ldrh	r2, [r7, #4]
 80052d6:	8a3b      	ldrh	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	883a      	ldrh	r2, [r7, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	f7ff ff12 	bl	8005108 <Displ_Pixel>
    while (x<y) {
 80052e4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80052e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	f6ff af77 	blt.w	80051e0 <Displ_drawCircle+0x8c>
    }
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd90      	pop	{r4, r7, pc}

080052fc <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af02      	add	r7, sp, #8
 8005302:	4603      	mov	r3, r0
 8005304:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <Displ_CLS+0x30>)
 8005308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800530c:	b29a      	uxth	r2, r3
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <Displ_CLS+0x34>)
 8005310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005314:	b299      	uxth	r1, r3
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	460b      	mov	r3, r1
 800531c:	2100      	movs	r1, #0
 800531e:	2000      	movs	r0, #0
 8005320:	f7ff fe38 	bl	8004f94 <Displ_FillArea>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20007fca 	.word	0x20007fca
 8005330:	20007fcc 	.word	0x20007fcc

08005334 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	4604      	mov	r4, r0
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4623      	mov	r3, r4
 8005344:	80fb      	strh	r3, [r7, #6]
 8005346:	4603      	mov	r3, r0
 8005348:	80bb      	strh	r3, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]
 800534e:	4613      	mov	r3, r2
 8005350:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	f1c3 0301 	rsb	r3, r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800535c:	2301      	movs	r3, #1
 800535e:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	461a      	mov	r2, r3
 8005364:	03d2      	lsls	r2, r2, #15
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	b29b      	uxth	r3, r3
 800536c:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8005376:	e095      	b.n	80054a4 <drawCircleHelper+0x170>
        if (f >= 0) {
 8005378:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800537c:	2b00      	cmp	r3, #0
 800537e:	db0e      	blt.n	800539e <drawCircleHelper+0x6a>
            y--;
 8005380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	3302      	adds	r3, #2
 8005390:	b29b      	uxth	r3, r3
 8005392:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005394:	8afa      	ldrh	r2, [r7, #22]
 8005396:	8a7b      	ldrh	r3, [r7, #18]
 8005398:	4413      	add	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800539e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3301      	adds	r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80053aa:	8abb      	ldrh	r3, [r7, #20]
 80053ac:	3302      	adds	r3, #2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80053b2:	8afa      	ldrh	r2, [r7, #22]
 80053b4:	8abb      	ldrh	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d017      	beq.n	80053f6 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	8a3b      	ldrh	r3, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	b298      	uxth	r0, r3
 80053ce:	88ba      	ldrh	r2, [r7, #4]
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	4413      	add	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053d8:	4619      	mov	r1, r3
 80053da:	f7ff fe95 	bl	8005108 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	4413      	add	r3, r2
 80053e4:	b298      	uxth	r0, r3
 80053e6:	88ba      	ldrh	r2, [r7, #4]
 80053e8:	8a3b      	ldrh	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053f0:	4619      	mov	r1, r3
 80053f2:	f7ff fe89 	bl	8005108 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80053f6:	787b      	ldrb	r3, [r7, #1]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d017      	beq.n	8005430 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	8a3b      	ldrh	r3, [r7, #16]
 8005404:	4413      	add	r3, r2
 8005406:	b298      	uxth	r0, r3
 8005408:	88ba      	ldrh	r2, [r7, #4]
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	b29b      	uxth	r3, r3
 8005410:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005412:	4619      	mov	r1, r3
 8005414:	f7ff fe78 	bl	8005108 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	4413      	add	r3, r2
 800541e:	b298      	uxth	r0, r3
 8005420:	88ba      	ldrh	r2, [r7, #4]
 8005422:	8a3b      	ldrh	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	b29b      	uxth	r3, r3
 8005428:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800542a:	4619      	mov	r1, r3
 800542c:	f7ff fe6c 	bl	8005108 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8005430:	787b      	ldrb	r3, [r7, #1]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d017      	beq.n	800546a <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	89fb      	ldrh	r3, [r7, #14]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	b298      	uxth	r0, r3
 8005442:	88ba      	ldrh	r2, [r7, #4]
 8005444:	8a3b      	ldrh	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800544c:	4619      	mov	r1, r3
 800544e:	f7ff fe5b 	bl	8005108 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	8a3b      	ldrh	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	b298      	uxth	r0, r3
 800545a:	88ba      	ldrh	r2, [r7, #4]
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	4413      	add	r3, r2
 8005460:	b29b      	uxth	r3, r3
 8005462:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005464:	4619      	mov	r1, r3
 8005466:	f7ff fe4f 	bl	8005108 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800546a:	787b      	ldrb	r3, [r7, #1]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b298      	uxth	r0, r3
 800547c:	88ba      	ldrh	r2, [r7, #4]
 800547e:	8a3b      	ldrh	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	b29b      	uxth	r3, r3
 8005484:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005486:	4619      	mov	r1, r3
 8005488:	f7ff fe3e 	bl	8005108 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	8a3b      	ldrh	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	b298      	uxth	r0, r3
 8005494:	88ba      	ldrh	r2, [r7, #4]
 8005496:	89fb      	ldrh	r3, [r7, #14]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	b29b      	uxth	r3, r3
 800549c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800549e:	4619      	mov	r1, r3
 80054a0:	f7ff fe32 	bl	8005108 <Displ_Pixel>
    while (x<y) {
 80054a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80054a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f6ff af63 	blt.w	8005378 <drawCircleHelper+0x44>
        }
    }
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	4604      	mov	r4, r0
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	461a      	mov	r2, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	80fb      	strh	r3, [r7, #6]
 80054ce:	4603      	mov	r3, r0
 80054d0:	80bb      	strh	r3, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	807b      	strh	r3, [r7, #2]
 80054d6:	4613      	mov	r3, r2
 80054d8:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	f1c3 0301 	rsb	r3, r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	461a      	mov	r2, r3
 80054ec:	03d2      	lsls	r2, r2, #15
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80054fe:	e0a7      	b.n	8005650 <fillCircleHelper+0x194>
    if (f >= 0) {
 8005500:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db0e      	blt.n	8005526 <fillCircleHelper+0x6a>
      y--;
 8005508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8005514:	8a7b      	ldrh	r3, [r7, #18]
 8005516:	3302      	adds	r3, #2
 8005518:	b29b      	uxth	r3, r3
 800551a:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 800551c:	8afa      	ldrh	r2, [r7, #22]
 800551e:	8a7b      	ldrh	r3, [r7, #18]
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8005526:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800552a:	b29b      	uxth	r3, r3
 800552c:	3301      	adds	r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8005532:	8abb      	ldrh	r3, [r7, #20]
 8005534:	3302      	adds	r3, #2
 8005536:	b29b      	uxth	r3, r3
 8005538:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800553a:	8afa      	ldrh	r2, [r7, #22]
 800553c:	8abb      	ldrh	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8005544:	787b      	ldrb	r3, [r7, #1]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d03d      	beq.n	80055ca <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	8a3b      	ldrh	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	b218      	sxth	r0, r3
 8005558:	88ba      	ldrh	r2, [r7, #4]
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	b29b      	uxth	r3, r3
 8005560:	b219      	sxth	r1, r3
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	8a3b      	ldrh	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	b29b      	uxth	r3, r3
 800556a:	b21c      	sxth	r4, r3
 800556c:	88ba      	ldrh	r2, [r7, #4]
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	4413      	add	r3, r2
 8005572:	b29a      	uxth	r2, r3
 8005574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005576:	4413      	add	r3, r2
 8005578:	b29b      	uxth	r3, r3
 800557a:	3301      	adds	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	b21a      	sxth	r2, r3
 8005580:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	4622      	mov	r2, r4
 8005588:	f000 f8a1 	bl	80056ce <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	4413      	add	r3, r2
 8005592:	b29b      	uxth	r3, r3
 8005594:	b218      	sxth	r0, r3
 8005596:	88ba      	ldrh	r2, [r7, #4]
 8005598:	8a3b      	ldrh	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	b29b      	uxth	r3, r3
 800559e:	b219      	sxth	r1, r3
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	89fb      	ldrh	r3, [r7, #14]
 80055a4:	4413      	add	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	b21c      	sxth	r4, r3
 80055aa:	88ba      	ldrh	r2, [r7, #4]
 80055ac:	8a3b      	ldrh	r3, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055b4:	4413      	add	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3301      	adds	r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	b21a      	sxth	r2, r3
 80055be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	4622      	mov	r2, r4
 80055c6:	f000 f882 	bl	80056ce <Displ_Line>
    }
    if (cornername & 0x2) {
 80055ca:	787b      	ldrb	r3, [r7, #1]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03d      	beq.n	8005650 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	8a3b      	ldrh	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	b29b      	uxth	r3, r3
 80055dc:	b218      	sxth	r0, r3
 80055de:	88ba      	ldrh	r2, [r7, #4]
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	b219      	sxth	r1, r3
 80055e8:	88fa      	ldrh	r2, [r7, #6]
 80055ea:	8a3b      	ldrh	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	b21c      	sxth	r4, r3
 80055f2:	88ba      	ldrh	r2, [r7, #4]
 80055f4:	89fb      	ldrh	r3, [r7, #14]
 80055f6:	4413      	add	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055fc:	4413      	add	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3301      	adds	r3, #1
 8005602:	b29b      	uxth	r3, r3
 8005604:	b21a      	sxth	r2, r3
 8005606:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	4622      	mov	r2, r4
 800560e:	f000 f85e 	bl	80056ce <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8005612:	88fa      	ldrh	r2, [r7, #6]
 8005614:	89fb      	ldrh	r3, [r7, #14]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	b29b      	uxth	r3, r3
 800561a:	b218      	sxth	r0, r3
 800561c:	88ba      	ldrh	r2, [r7, #4]
 800561e:	8a3b      	ldrh	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	b29b      	uxth	r3, r3
 8005624:	b219      	sxth	r1, r3
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	89fb      	ldrh	r3, [r7, #14]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	b29b      	uxth	r3, r3
 800562e:	b21c      	sxth	r4, r3
 8005630:	88ba      	ldrh	r2, [r7, #4]
 8005632:	8a3b      	ldrh	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800563a:	4413      	add	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	3301      	adds	r3, #1
 8005640:	b29b      	uxth	r3, r3
 8005642:	b21a      	sxth	r2, r3
 8005644:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	4622      	mov	r2, r4
 800564c:	f000 f83f 	bl	80056ce <Displ_Line>
  while (x<y) {
 8005650:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005658:	429a      	cmp	r2, r3
 800565a:	f6ff af51 	blt.w	8005500 <fillCircleHelper+0x44>
    }
  }
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd90      	pop	{r4, r7, pc}

08005668 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b085      	sub	sp, #20
 800566c:	af02      	add	r7, sp, #8
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	4611      	mov	r1, r2
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	80fb      	strh	r3, [r7, #6]
 800567a:	4603      	mov	r3, r0
 800567c:	80bb      	strh	r3, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	807b      	strh	r3, [r7, #2]
 8005682:	4613      	mov	r3, r2
 8005684:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8005686:	88ba      	ldrh	r2, [r7, #4]
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	b29b      	uxth	r3, r3
 800568e:	b219      	sxth	r1, r3
 8005690:	88ba      	ldrh	r2, [r7, #4]
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	4413      	add	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	b21c      	sxth	r4, r3
 800569a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800569e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056a2:	883b      	ldrh	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4623      	mov	r3, r4
 80056a8:	f000 f811 	bl	80056ce <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80056ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056b8:	883b      	ldrh	r3, [r7, #0]
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	2303      	movs	r3, #3
 80056c2:	f7ff fefb 	bl	80054bc <fillCircleHelper>
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd90      	pop	{r4, r7, pc}

080056ce <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80056ce:	b590      	push	{r4, r7, lr}
 80056d0:	b08b      	sub	sp, #44	; 0x2c
 80056d2:	af02      	add	r7, sp, #8
 80056d4:	4604      	mov	r4, r0
 80056d6:	4608      	mov	r0, r1
 80056d8:	4611      	mov	r1, r2
 80056da:	461a      	mov	r2, r3
 80056dc:	4623      	mov	r3, r4
 80056de:	80fb      	strh	r3, [r7, #6]
 80056e0:	4603      	mov	r3, r0
 80056e2:	80bb      	strh	r3, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	807b      	strh	r3, [r7, #2]
 80056e8:	4613      	mov	r3, r2
 80056ea:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80056ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d123      	bne.n	8005740 <Displ_Line+0x72>
    	if (y1>y0){
 80056f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	dd0e      	ble.n	8005722 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005704:	88f8      	ldrh	r0, [r7, #6]
 8005706:	88b9      	ldrh	r1, [r7, #4]
 8005708:	883a      	ldrh	r2, [r7, #0]
 800570a:	88bb      	ldrh	r3, [r7, #4]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	b29b      	uxth	r3, r3
 8005710:	3301      	adds	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	2201      	movs	r2, #1
 800571c:	f7ff fc3a 	bl	8004f94 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005720:	e103      	b.n	800592a <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005722:	88f8      	ldrh	r0, [r7, #6]
 8005724:	8839      	ldrh	r1, [r7, #0]
 8005726:	88ba      	ldrh	r2, [r7, #4]
 8005728:	883b      	ldrh	r3, [r7, #0]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	b29b      	uxth	r3, r3
 800572e:	3301      	adds	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	2201      	movs	r2, #1
 800573a:	f7ff fc2b 	bl	8004f94 <Displ_FillArea>
    	return;
 800573e:	e0f4      	b.n	800592a <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005740:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005744:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005748:	429a      	cmp	r2, r3
 800574a:	d121      	bne.n	8005790 <Displ_Line+0xc2>
    	if (x1>x0)
 800574c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005754:	429a      	cmp	r2, r3
 8005756:	dd0d      	ble.n	8005774 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005758:	88f8      	ldrh	r0, [r7, #6]
 800575a:	88b9      	ldrh	r1, [r7, #4]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	b29b      	uxth	r3, r3
 8005764:	3301      	adds	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2301      	movs	r3, #1
 800576e:	f7ff fc11 	bl	8004f94 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8005772:	e0da      	b.n	800592a <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8005774:	8878      	ldrh	r0, [r7, #2]
 8005776:	8839      	ldrh	r1, [r7, #0]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	887b      	ldrh	r3, [r7, #2]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	3301      	adds	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	2301      	movs	r3, #1
 800578a:	f7ff fc03 	bl	8004f94 <Displ_FillArea>
    	return;
 800578e:	e0cc      	b.n	800592a <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005790:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005794:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	dd05      	ble.n	80057a8 <Displ_Line+0xda>
 800579c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	e004      	b.n	80057b2 <Displ_Line+0xe4>
 80057a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80057ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057b0:	1ad2      	subs	r2, r2, r3
 80057b2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80057b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ba:	4299      	cmp	r1, r3
 80057bc:	dd05      	ble.n	80057ca <Displ_Line+0xfc>
 80057be:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80057c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057c6:	1acb      	subs	r3, r1, r3
 80057c8:	e004      	b.n	80057d4 <Displ_Line+0x106>
 80057ca:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80057ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057d2:	1acb      	subs	r3, r1, r3
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bfcc      	ite	gt
 80057d8:	2301      	movgt	r3, #1
 80057da:	2300      	movle	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80057e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00b      	beq.n	8005800 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80057e8:	88fb      	ldrh	r3, [r7, #6]
 80057ea:	827b      	strh	r3, [r7, #18]
 80057ec:	88bb      	ldrh	r3, [r7, #4]
 80057ee:	80fb      	strh	r3, [r7, #6]
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	823b      	strh	r3, [r7, #16]
 80057f8:	883b      	ldrh	r3, [r7, #0]
 80057fa:	807b      	strh	r3, [r7, #2]
 80057fc:	8a3b      	ldrh	r3, [r7, #16]
 80057fe:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005800:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005808:	429a      	cmp	r2, r3
 800580a:	dd0b      	ble.n	8005824 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	81fb      	strh	r3, [r7, #14]
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	80fb      	strh	r3, [r7, #6]
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005818:	88bb      	ldrh	r3, [r7, #4]
 800581a:	81bb      	strh	r3, [r7, #12]
 800581c:	883b      	ldrh	r3, [r7, #0]
 800581e:	80bb      	strh	r3, [r7, #4]
 8005820:	89bb      	ldrh	r3, [r7, #12]
 8005822:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005824:	887a      	ldrh	r2, [r7, #2]
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	b29b      	uxth	r3, r3
 800582c:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 800582e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005832:	105b      	asrs	r3, r3, #1
 8005834:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005836:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800583a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800583e:	429a      	cmp	r2, r3
 8005840:	da07      	bge.n	8005852 <Displ_Line+0x184>
        dy = y1-y0;
 8005842:	883a      	ldrh	r2, [r7, #0]
 8005844:	88bb      	ldrh	r3, [r7, #4]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	b29b      	uxth	r3, r3
 800584a:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 800584c:	2301      	movs	r3, #1
 800584e:	837b      	strh	r3, [r7, #26]
 8005850:	e007      	b.n	8005862 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005852:	88ba      	ldrh	r2, [r7, #4]
 8005854:	883b      	ldrh	r3, [r7, #0]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 800585c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005860:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005862:	2300      	movs	r3, #0
 8005864:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	83bb      	strh	r3, [r7, #28]
 800586a:	e03a      	b.n	80058e2 <Displ_Line+0x214>
    	l++;
 800586c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005870:	b29b      	uxth	r3, r3
 8005872:	3301      	adds	r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8005878:	8b3a      	ldrh	r2, [r7, #24]
 800587a:	8afb      	ldrh	r3, [r7, #22]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	b29b      	uxth	r3, r3
 8005880:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005882:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da25      	bge.n	80058d6 <Displ_Line+0x208>
        	if (steep) {
 800588a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005892:	88b8      	ldrh	r0, [r7, #4]
 8005894:	88f9      	ldrh	r1, [r7, #6]
 8005896:	8bfa      	ldrh	r2, [r7, #30]
 8005898:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	2201      	movs	r2, #1
 80058a0:	f7ff fb78 	bl	8004f94 <Displ_FillArea>
 80058a4:	e007      	b.n	80058b6 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80058a6:	88f8      	ldrh	r0, [r7, #6]
 80058a8:	88b9      	ldrh	r1, [r7, #4]
 80058aa:	8bfa      	ldrh	r2, [r7, #30]
 80058ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2301      	movs	r3, #1
 80058b2:	f7ff fb6f 	bl	8004f94 <Displ_FillArea>
            }
            y0 += ystep;
 80058b6:	88ba      	ldrh	r2, [r7, #4]
 80058b8:	8b7b      	ldrh	r3, [r7, #26]
 80058ba:	4413      	add	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	80bb      	strh	r3, [r7, #4]
            l=0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80058c4:	8bbb      	ldrh	r3, [r7, #28]
 80058c6:	3301      	adds	r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80058cc:	8b3a      	ldrh	r2, [r7, #24]
 80058ce:	897b      	ldrh	r3, [r7, #10]
 80058d0:	4413      	add	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80058d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	b29b      	uxth	r3, r3
 80058e0:	83bb      	strh	r3, [r7, #28]
 80058e2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80058e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	ddbe      	ble.n	800586c <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80058ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d019      	beq.n	800592a <Displ_Line+0x25c>
    	if (steep) {
 80058f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80058fe:	88b8      	ldrh	r0, [r7, #4]
 8005900:	88f9      	ldrh	r1, [r7, #6]
 8005902:	8bfb      	ldrh	r3, [r7, #30]
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	2201      	movs	r2, #1
 8005910:	f7ff fb40 	bl	8004f94 <Displ_FillArea>
 8005914:	e009      	b.n	800592a <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8005916:	88f8      	ldrh	r0, [r7, #6]
 8005918:	88b9      	ldrh	r1, [r7, #4]
 800591a:	8bfb      	ldrh	r3, [r7, #30]
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	2301      	movs	r3, #1
 8005926:	f7ff fb35 	bl	8004f94 <Displ_FillArea>
    	}
    }
}
 800592a:	3724      	adds	r7, #36	; 0x24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd90      	pop	{r4, r7, pc}

08005930 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b085      	sub	sp, #20
 8005934:	af02      	add	r7, sp, #8
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4623      	mov	r3, r4
 8005940:	80fb      	strh	r3, [r7, #6]
 8005942:	4603      	mov	r3, r0
 8005944:	80bb      	strh	r3, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	807b      	strh	r3, [r7, #2]
 800594a:	4613      	mov	r3, r2
 800594c:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 800594e:	88f8      	ldrh	r0, [r7, #6]
 8005950:	88b9      	ldrh	r1, [r7, #4]
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	8b3c      	ldrh	r4, [r7, #24]
 8005956:	8bbb      	ldrh	r3, [r7, #28]
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4623      	mov	r3, r4
 800595c:	f7ff fb1a 	bl	8004f94 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8005960:	88f8      	ldrh	r0, [r7, #6]
 8005962:	88ba      	ldrh	r2, [r7, #4]
 8005964:	883b      	ldrh	r3, [r7, #0]
 8005966:	4413      	add	r3, r2
 8005968:	b29a      	uxth	r2, r3
 800596a:	8b3b      	ldrh	r3, [r7, #24]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	b299      	uxth	r1, r3
 8005970:	887a      	ldrh	r2, [r7, #2]
 8005972:	8b3c      	ldrh	r4, [r7, #24]
 8005974:	8bbb      	ldrh	r3, [r7, #28]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4623      	mov	r3, r4
 800597a:	f7ff fb0b 	bl	8004f94 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 800597e:	88f8      	ldrh	r0, [r7, #6]
 8005980:	88b9      	ldrh	r1, [r7, #4]
 8005982:	8b3a      	ldrh	r2, [r7, #24]
 8005984:	883c      	ldrh	r4, [r7, #0]
 8005986:	8bbb      	ldrh	r3, [r7, #28]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	4623      	mov	r3, r4
 800598c:	f7ff fb02 	bl	8004f94 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	4413      	add	r3, r2
 8005996:	b29a      	uxth	r2, r3
 8005998:	8b3b      	ldrh	r3, [r7, #24]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	b298      	uxth	r0, r3
 800599e:	88b9      	ldrh	r1, [r7, #4]
 80059a0:	8b3a      	ldrh	r2, [r7, #24]
 80059a2:	883c      	ldrh	r4, [r7, #0]
 80059a4:	8bbb      	ldrh	r3, [r7, #28]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	4623      	mov	r3, r4
 80059aa:	f7ff faf3 	bl	8004f94 <Displ_FillArea>
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}

080059b6 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80059b6:	b590      	push	{r4, r7, lr}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	4604      	mov	r4, r0
 80059be:	4608      	mov	r0, r1
 80059c0:	4611      	mov	r1, r2
 80059c2:	461a      	mov	r2, r3
 80059c4:	4623      	mov	r3, r4
 80059c6:	80fb      	strh	r3, [r7, #6]
 80059c8:	4603      	mov	r3, r0
 80059ca:	80bb      	strh	r3, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
 80059d0:	4613      	mov	r3, r2
 80059d2:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80059d4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80059d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80059e4:	8c3b      	ldrh	r3, [r7, #32]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	4623      	mov	r3, r4
 80059ea:	f7ff fe70 	bl	80056ce <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80059ee:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80059f2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80059f6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80059fa:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80059fe:	8c3b      	ldrh	r3, [r7, #32]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4623      	mov	r3, r4
 8005a04:	f7ff fe63 	bl	80056ce <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8005a08:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005a0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a10:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005a14:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005a18:	8c3b      	ldrh	r3, [r7, #32]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	f7ff fe56 	bl	80056ce <Displ_Line>
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}

08005a2a <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005a2a:	b590      	push	{r4, r7, lr}
 8005a2c:	b091      	sub	sp, #68	; 0x44
 8005a2e:	af02      	add	r7, sp, #8
 8005a30:	4604      	mov	r4, r0
 8005a32:	4608      	mov	r0, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	80fb      	strh	r3, [r7, #6]
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	80bb      	strh	r3, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
 8005a44:	4613      	mov	r3, r2
 8005a46:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005a48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	dd0b      	ble.n	8005a6c <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005a54:	88bb      	ldrh	r3, [r7, #4]
 8005a56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005a58:	883b      	ldrh	r3, [r7, #0]
 8005a5a:	80bb      	strh	r3, [r7, #4]
 8005a5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a5e:	803b      	strh	r3, [r7, #0]
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	80fb      	strh	r3, [r7, #6]
 8005a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a6a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005a6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	dd0f      	ble.n	8005a98 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005a7c:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a7e:	883b      	ldrh	r3, [r7, #0]
 8005a80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a86:	803b      	strh	r3, [r7, #0]
 8005a88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a8c:	843b      	strh	r3, [r7, #32]
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005a94:	8c3b      	ldrh	r3, [r7, #32]
 8005a96:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005a98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005a9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dd0b      	ble.n	8005abc <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005aa4:	88bb      	ldrh	r3, [r7, #4]
 8005aa6:	83fb      	strh	r3, [r7, #30]
 8005aa8:	883b      	ldrh	r3, [r7, #0]
 8005aaa:	80bb      	strh	r3, [r7, #4]
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	803b      	strh	r3, [r7, #0]
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	83bb      	strh	r3, [r7, #28]
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	80fb      	strh	r3, [r7, #6]
 8005ab8:	8bbb      	ldrh	r3, [r7, #28]
 8005aba:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005abc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ac0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d136      	bne.n	8005b36 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005acc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ace:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005ad0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ad4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	da02      	bge.n	8005ae2 <Displ_fillTriangle+0xb8>
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ae0:	e007      	b.n	8005af2 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005ae2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ae6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dd01      	ble.n	8005af2 <Displ_fillTriangle+0xc8>
 8005aee:	887b      	ldrh	r3, [r7, #2]
 8005af0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005af2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005af6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005afa:	429a      	cmp	r2, r3
 8005afc:	da03      	bge.n	8005b06 <Displ_fillTriangle+0xdc>
 8005afe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b02:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005b04:	e008      	b.n	8005b18 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005b06:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005b0a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	dd02      	ble.n	8005b18 <Displ_fillTriangle+0xee>
 8005b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b16:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005b18:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005b1c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005b20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b24:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4623      	mov	r3, r4
 8005b30:	f7ff fdcd 	bl	80056ce <Displ_Line>
        return;
 8005b34:	e0d2      	b.n	8005cdc <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005b40:	883a      	ldrh	r2, [r7, #0]
 8005b42:	88bb      	ldrh	r3, [r7, #4]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005b4a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005b56:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005b5a:	88bb      	ldrh	r3, [r7, #4]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005b62:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005b66:	887b      	ldrh	r3, [r7, #2]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005b6e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005b72:	883b      	ldrh	r3, [r7, #0]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005b82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b86:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d102      	bne.n	8005b94 <Displ_fillTriangle+0x16a>
 8005b8e:	883b      	ldrh	r3, [r7, #0]
 8005b90:	863b      	strh	r3, [r7, #48]	; 0x30
 8005b92:	e003      	b.n	8005b9c <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005b94:	883b      	ldrh	r3, [r7, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005b9c:	88bb      	ldrh	r3, [r7, #4]
 8005b9e:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ba0:	e03d      	b.n	8005c1e <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005ba2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005bb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005bca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd0:	4413      	add	r3, r2
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005bd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bda:	4413      	add	r3, r2
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005bde:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005be2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005be6:	429a      	cmp	r2, r3
 8005be8:	dd05      	ble.n	8005bf6 <Displ_fillTriangle+0x1cc>
 8005bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bec:	81bb      	strh	r3, [r7, #12]
 8005bee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bf0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bf2:	89bb      	ldrh	r3, [r7, #12]
 8005bf4:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005bf6:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005bfa:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005bfe:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005c02:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	f7ff fd5e 	bl	80056ce <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005c12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c1e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005c22:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005c26:	429a      	cmp	r2, r3
 8005c28:	ddbb      	ble.n	8005ba2 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c2e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005c32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005c36:	1a8a      	subs	r2, r1, r2
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c42:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005c46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c4a:	1a8a      	subs	r2, r1, r2
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005c52:	e03d      	b.n	8005cd0 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	4413      	add	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	4413      	add	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c82:	4413      	add	r3, r2
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005c86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8c:	4413      	add	r3, r2
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005c90:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005c94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	dd05      	ble.n	8005ca8 <Displ_fillTriangle+0x27e>
 8005c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c9e:	81fb      	strh	r3, [r7, #14]
 8005ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005ca8:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005cac:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005cb0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005cb4:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005cb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	f7ff fd05 	bl	80056ce <Displ_Line>
    for(; y<=y2; y++) {
 8005cc4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	867b      	strh	r3, [r7, #50]	; 0x32
 8005cd0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005cd4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	ddbb      	ble.n	8005c54 <Displ_fillTriangle+0x22a>
    }
}
 8005cdc:	373c      	adds	r7, #60	; 0x3c
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd90      	pop	{r4, r7, pc}
	...

08005ce4 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	b590      	push	{r4, r7, lr}
 8005ce8:	b08f      	sub	sp, #60	; 0x3c
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	647b      	str	r3, [r7, #68]	; 0x44
 8005cee:	4603      	mov	r3, r0
 8005cf0:	80fb      	strh	r3, [r7, #6]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	80bb      	strh	r3, [r7, #4]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8005cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cfe:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8005d00:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d102      	bne.n	8005d0e <Displ_WChar+0x2a>
		wsize<<= 1;
 8005d08:	7efb      	ldrb	r3, [r7, #27]
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8005d12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d16:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	3b20      	subs	r3, #32
 8005d26:	4619      	mov	r1, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8005d32:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d005      	beq.n	8005d46 <Displ_WChar+0x62>
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d107      	bne.n	8005d4e <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8005d3e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d42:	61fb      	str	r3, [r7, #28]
			break;
 8005d44:	e005      	b.n	8005d52 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	61fb      	str	r3, [r7, #28]
			break;
 8005d4c:	e001      	b.n	8005d52 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8005d4e:	2380      	movs	r3, #128	; 0x80
 8005d50:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005d52:	4b68      	ldr	r3, [pc, #416]	; (8005ef4 <Displ_WChar+0x210>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005d58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	b21a      	sxth	r2, r3
 8005d60:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	b21b      	sxth	r3, r3
 8005d6e:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005d70:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	b21a      	sxth	r2, r3
 8005d78:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	b21b      	sxth	r3, r3
 8005d86:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8005d88:	2300      	movs	r3, #0
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d8c:	e06f      	b.n	8005e6e <Displ_WChar+0x18a>
		b=0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8005d92:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d015      	beq.n	8005dc6 <Displ_WChar+0xe2>
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d120      	bne.n	8005de0 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	4413      	add	r3, r2
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	041a      	lsls	r2, r3, #16
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	3301      	adds	r3, #1
 8005dac:	6939      	ldr	r1, [r7, #16]
 8005dae:	440b      	add	r3, r1
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	4313      	orrs	r3, r2
 8005db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db8:	3202      	adds	r2, #2
 8005dba:	6939      	ldr	r1, [r7, #16]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8005dc4:	e011      	b.n	8005dea <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	4413      	add	r3, r2
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	6939      	ldr	r1, [r7, #16]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	7812      	ldrb	r2, [r2, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8005dde:	e004      	b.n	8005dea <Displ_WChar+0x106>
			default:
				b=pos[i];
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	4413      	add	r3, r2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8005dea:	2300      	movs	r3, #0
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e032      	b.n	8005e56 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8005df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	409a      	lsls	r2, r3
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d014      	beq.n	8005e28 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	623a      	str	r2, [r7, #32]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	897a      	ldrh	r2, [r7, #10]
 8005e0c:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8005e0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d11c      	bne.n	8005e50 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	623a      	str	r2, [r7, #32]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	897a      	ldrh	r2, [r7, #10]
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e013      	b.n	8005e50 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	623a      	str	r2, [r7, #32]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	893a      	ldrh	r2, [r7, #8]
 8005e36:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8005e38:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d107      	bne.n	8005e50 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	623a      	str	r2, [r7, #32]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	893a      	ldrh	r2, [r7, #8]
 8005e4e:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	3301      	adds	r3, #1
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
 8005e56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d3c6      	bcc.n	8005df0 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8005e62:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005e66:	461a      	mov	r2, r3
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	4413      	add	r3, r2
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d38b      	bcc.n	8005d8e <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005e7c:	7efb      	ldrb	r3, [r7, #27]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	4413      	add	r3, r2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29c      	uxth	r4, r3
 8005e8a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005e8e:	88bb      	ldrh	r3, [r7, #4]
 8005e90:	4413      	add	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	88b9      	ldrh	r1, [r7, #4]
 8005e9a:	88f8      	ldrh	r0, [r7, #6]
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	f7fe ff8d 	bl	8004dbc <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d90b      	bls.n	8005ec2 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8005eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	f240 33ad 	movw	r3, #941	; 0x3ad
 8005eb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <Displ_WChar+0x214>)
 8005eba:	4910      	ldr	r1, [pc, #64]	; (8005efc <Displ_WChar+0x218>)
 8005ebc:	4810      	ldr	r0, [pc, #64]	; (8005f00 <Displ_WChar+0x21c>)
 8005ebe:	f7fe fc89 	bl	80047d4 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8005ec2:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <Displ_WChar+0x210>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	6a39      	ldr	r1, [r7, #32]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe ff1f 	bl	8004d0e <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <Displ_WChar+0x210>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0b      	ldr	r2, [pc, #44]	; (8005f04 <Displ_WChar+0x220>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <Displ_WChar+0x1fa>
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <Displ_WChar+0x224>)
 8005edc:	e000      	b.n	8005ee0 <Displ_WChar+0x1fc>
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <Displ_WChar+0x220>)
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <Displ_WChar+0x210>)
 8005ee2:	6013      	str	r3, [r2, #0]

}
 8005ee4:	bf00      	nop
 8005ee6:	3734      	adds	r7, #52	; 0x34
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005eee:	b002      	add	sp, #8
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000038 	.word	0x20000038
 8005ef8:	08013b38 	.word	0x08013b38
 8005efc:	0800fa0c 	.word	0x0800fa0c
 8005f00:	0800fa2c 	.word	0x0800fa2c
 8005f04:	20007fd0 	.word	0x20007fd0
 8005f08:	200087d0 	.word	0x200087d0

08005f0c <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	80fb      	strh	r3, [r7, #6]
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80bb      	strh	r3, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	807b      	strh	r3, [r7, #2]
 8005f26:	4613      	mov	r3, r2
 8005f28:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8005f2a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f32:	4293      	cmp	r3, r2
 8005f34:	bfa8      	it	ge
 8005f36:	4613      	movge	r3, r2
 8005f38:	b21b      	sxth	r3, r3
 8005f3a:	0fda      	lsrs	r2, r3, #31
 8005f3c:	4413      	add	r3, r2
 8005f3e:	105b      	asrs	r3, r3, #1
 8005f40:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8005f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	dd01      	ble.n	8005f52 <Displ_drawRoundRect+0x46>
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
 8005f50:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	8c3b      	ldrh	r3, [r7, #32]
 8005f56:	4413      	add	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	b218      	sxth	r0, r3
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	887b      	ldrh	r3, [r7, #2]
 8005f60:	4413      	add	r3, r2
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	8c3b      	ldrh	r3, [r7, #32]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	b21a      	sxth	r2, r3
 8005f70:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	4623      	mov	r3, r4
 8005f7e:	f7ff fba6 	bl	80056ce <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	8c3b      	ldrh	r3, [r7, #32]
 8005f86:	4413      	add	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	b218      	sxth	r0, r3
 8005f8c:	88ba      	ldrh	r2, [r7, #4]
 8005f8e:	883b      	ldrh	r3, [r7, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	b219      	sxth	r1, r3
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	887b      	ldrh	r3, [r7, #2]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	8c3b      	ldrh	r3, [r7, #32]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b21c      	sxth	r4, r3
 8005fae:	88ba      	ldrh	r2, [r7, #4]
 8005fb0:	883b      	ldrh	r3, [r7, #0]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b21a      	sxth	r2, r3
 8005fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	f7ff fb83 	bl	80056ce <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8005fc8:	88ba      	ldrh	r2, [r7, #4]
 8005fca:	8c3b      	ldrh	r3, [r7, #32]
 8005fcc:	4413      	add	r3, r2
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	b219      	sxth	r1, r3
 8005fd2:	88ba      	ldrh	r2, [r7, #4]
 8005fd4:	883b      	ldrh	r3, [r7, #0]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	8c3b      	ldrh	r3, [r7, #32]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	b21c      	sxth	r4, r3
 8005fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	f7ff fb6b 	bl	80056ce <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29b      	uxth	r3, r3
 8006004:	b218      	sxth	r0, r3
 8006006:	88ba      	ldrh	r2, [r7, #4]
 8006008:	8c3b      	ldrh	r3, [r7, #32]
 800600a:	4413      	add	r3, r2
 800600c:	b29b      	uxth	r3, r3
 800600e:	b219      	sxth	r1, r3
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	887b      	ldrh	r3, [r7, #2]
 8006014:	4413      	add	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29b      	uxth	r3, r3
 800601c:	b21c      	sxth	r4, r3
 800601e:	88ba      	ldrh	r2, [r7, #4]
 8006020:	883b      	ldrh	r3, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	b29a      	uxth	r2, r3
 8006026:	8c3b      	ldrh	r3, [r7, #32]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b01      	subs	r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	b21a      	sxth	r2, r3
 8006032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	4622      	mov	r2, r4
 800603a:	f7ff fb48 	bl	80056ce <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	8c3b      	ldrh	r3, [r7, #32]
 8006042:	4413      	add	r3, r2
 8006044:	b29b      	uxth	r3, r3
 8006046:	b218      	sxth	r0, r3
 8006048:	88ba      	ldrh	r2, [r7, #4]
 800604a:	8c3b      	ldrh	r3, [r7, #32]
 800604c:	4413      	add	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	b219      	sxth	r1, r3
 8006052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2301      	movs	r3, #1
 800605c:	f7ff f96a 	bl	8005334 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8006060:	88fa      	ldrh	r2, [r7, #6]
 8006062:	887b      	ldrh	r3, [r7, #2]
 8006064:	4413      	add	r3, r2
 8006066:	b29a      	uxth	r2, r3
 8006068:	8c3b      	ldrh	r3, [r7, #32]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	b218      	sxth	r0, r3
 8006074:	88ba      	ldrh	r2, [r7, #4]
 8006076:	8c3b      	ldrh	r3, [r7, #32]
 8006078:	4413      	add	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	b219      	sxth	r1, r3
 800607e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2302      	movs	r3, #2
 8006088:	f7ff f954 	bl	8005334 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 800608c:	88fa      	ldrh	r2, [r7, #6]
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	4413      	add	r3, r2
 8006092:	b29a      	uxth	r2, r3
 8006094:	8c3b      	ldrh	r3, [r7, #32]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29b      	uxth	r3, r3
 800609e:	b218      	sxth	r0, r3
 80060a0:	88ba      	ldrh	r2, [r7, #4]
 80060a2:	883b      	ldrh	r3, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	8c3b      	ldrh	r3, [r7, #32]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	b219      	sxth	r1, r3
 80060b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2304      	movs	r3, #4
 80060be:	f7ff f939 	bl	8005334 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	8c3b      	ldrh	r3, [r7, #32]
 80060c6:	4413      	add	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	b218      	sxth	r0, r3
 80060cc:	88ba      	ldrh	r2, [r7, #4]
 80060ce:	883b      	ldrh	r3, [r7, #0]
 80060d0:	4413      	add	r3, r2
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	8c3b      	ldrh	r3, [r7, #32]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b219      	sxth	r1, r3
 80060e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80060e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2308      	movs	r3, #8
 80060ea:	f7ff f923 	bl	8005334 <drawCircleHelper>
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd90      	pop	{r4, r7, pc}

080060f6 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80060f6:	b590      	push	{r4, r7, lr}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af02      	add	r7, sp, #8
 80060fc:	4604      	mov	r4, r0
 80060fe:	4608      	mov	r0, r1
 8006100:	4611      	mov	r1, r2
 8006102:	461a      	mov	r2, r3
 8006104:	4623      	mov	r3, r4
 8006106:	80fb      	strh	r3, [r7, #6]
 8006108:	4603      	mov	r3, r0
 800610a:	80bb      	strh	r3, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
 8006110:	4613      	mov	r3, r2
 8006112:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006114:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800611c:	4293      	cmp	r3, r2
 800611e:	bfa8      	it	ge
 8006120:	4613      	movge	r3, r2
 8006122:	b21b      	sxth	r3, r3
 8006124:	0fda      	lsrs	r2, r3, #31
 8006126:	4413      	add	r3, r2
 8006128:	105b      	asrs	r3, r3, #1
 800612a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800612c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006134:	429a      	cmp	r2, r3
 8006136:	dd01      	ble.n	800613c <Displ_fillRoundRect+0x46>
 8006138:	89fb      	ldrh	r3, [r7, #14]
 800613a:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	8c3b      	ldrh	r3, [r7, #32]
 8006140:	4413      	add	r3, r2
 8006142:	b298      	uxth	r0, r3
 8006144:	88b9      	ldrh	r1, [r7, #4]
 8006146:	887a      	ldrh	r2, [r7, #2]
 8006148:	8c3b      	ldrh	r3, [r7, #32]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	b29a      	uxth	r2, r3
 8006152:	883c      	ldrh	r4, [r7, #0]
 8006154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4623      	mov	r3, r4
 800615a:	f7fe ff1b 	bl	8004f94 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	4413      	add	r3, r2
 8006164:	b29a      	uxth	r2, r3
 8006166:	8c3b      	ldrh	r3, [r7, #32]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	b218      	sxth	r0, r3
 8006172:	88ba      	ldrh	r2, [r7, #4]
 8006174:	8c3b      	ldrh	r3, [r7, #32]
 8006176:	4413      	add	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	b219      	sxth	r1, r3
 800617c:	883a      	ldrh	r2, [r7, #0]
 800617e:	8c3b      	ldrh	r3, [r7, #32]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	b29b      	uxth	r3, r3
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29b      	uxth	r3, r3
 800618c:	b21b      	sxth	r3, r3
 800618e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006192:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2301      	movs	r3, #1
 800619a:	4622      	mov	r2, r4
 800619c:	f7ff f98e 	bl	80054bc <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	8c3b      	ldrh	r3, [r7, #32]
 80061a4:	4413      	add	r3, r2
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b218      	sxth	r0, r3
 80061aa:	88ba      	ldrh	r2, [r7, #4]
 80061ac:	8c3b      	ldrh	r3, [r7, #32]
 80061ae:	4413      	add	r3, r2
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	b219      	sxth	r1, r3
 80061b4:	883a      	ldrh	r2, [r7, #0]
 80061b6:	8c3b      	ldrh	r3, [r7, #32]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80061ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061cc:	9201      	str	r2, [sp, #4]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2302      	movs	r3, #2
 80061d2:	4622      	mov	r2, r4
 80061d4:	f7ff f972 	bl	80054bc <fillCircleHelper>
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}

080061e0 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80061e0:	b082      	sub	sp, #8
 80061e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e4:	b08b      	sub	sp, #44	; 0x2c
 80061e6:	af06      	add	r7, sp, #24
 80061e8:	603a      	str	r2, [r7, #0]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ec:	4603      	mov	r3, r0
 80061ee:	80fb      	strh	r3, [r7, #6]
 80061f0:	460b      	mov	r3, r1
 80061f2:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80061f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061f6:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80061f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d922      	bls.n	8006246 <Displ_WString+0x66>
		delta<<=1;
 8006200:	89fb      	ldrh	r3, [r7, #14]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8006206:	e01e      	b.n	8006246 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	88bd      	ldrh	r5, [r7, #4]
 800620e:	88fc      	ldrh	r4, [r7, #6]
 8006210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006214:	9304      	str	r3, [sp, #16]
 8006216:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006218:	9303      	str	r3, [sp, #12]
 800621a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	466e      	mov	r6, sp
 8006222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800622a:	e886 0003 	stmia.w	r6, {r0, r1}
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	4629      	mov	r1, r5
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff fd56 	bl	8005ce4 <Displ_WChar>
        x += delta;
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	89fb      	ldrh	r3, [r7, #14]
 800623c:	4413      	add	r3, r2
 800623e:	80fb      	strh	r3, [r7, #6]
        str++;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	603b      	str	r3, [r7, #0]
    while(*str) {
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1dc      	bne.n	8006208 <Displ_WString+0x28>
    }
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800625a:	b002      	add	sp, #8
 800625c:	4770      	bx	lr
	...

08006260 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	2b51      	cmp	r3, #81	; 0x51
 800626e:	d00a      	beq.n	8006286 <Displ_BackLight+0x26>
 8006270:	2b51      	cmp	r3, #81	; 0x51
 8006272:	dc16      	bgt.n	80062a2 <Displ_BackLight+0x42>
 8006274:	2b46      	cmp	r3, #70	; 0x46
 8006276:	d008      	beq.n	800628a <Displ_BackLight+0x2a>
 8006278:	2b46      	cmp	r3, #70	; 0x46
 800627a:	dc12      	bgt.n	80062a2 <Displ_BackLight+0x42>
 800627c:	2b30      	cmp	r3, #48	; 0x30
 800627e:	d00a      	beq.n	8006296 <Displ_BackLight+0x36>
 8006280:	2b31      	cmp	r3, #49	; 0x31
 8006282:	d002      	beq.n	800628a <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006284:	e00d      	b.n	80062a2 <Displ_BackLight+0x42>
		__NOP();
 8006286:	bf00      	nop
		break;
 8006288:	e00c      	b.n	80062a4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 800628a:	2201      	movs	r2, #1
 800628c:	2140      	movs	r1, #64	; 0x40
 800628e:	480a      	ldr	r0, [pc, #40]	; (80062b8 <Displ_BackLight+0x58>)
 8006290:	f002 f860 	bl	8008354 <HAL_GPIO_WritePin>
		break;
 8006294:	e006      	b.n	80062a4 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	; 0x40
 800629a:	4807      	ldr	r0, [pc, #28]	; (80062b8 <Displ_BackLight+0x58>)
 800629c:	f002 f85a 	bl	8008354 <HAL_GPIO_WritePin>
		break;
 80062a0:	e000      	b.n	80062a4 <Displ_BackLight+0x44>
		break;
 80062a2:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	4804      	ldr	r0, [pc, #16]	; (80062b8 <Displ_BackLight+0x58>)
 80062a8:	f002 f83c 	bl	8008324 <HAL_GPIO_ReadPin>
 80062ac:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40020000 	.word	0x40020000

080062bc <testLines>:




void testLines(uint16_t color)
{
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b08b      	sub	sp, #44	; 0x2c
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	4603      	mov	r3, r0
 80062c4:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 80062c6:	4b7c      	ldr	r3, [pc, #496]	; (80064b8 <testLines+0x1fc>)
 80062c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062cc:	617b      	str	r3, [r7, #20]
                  h = _height;
 80062ce:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <testLines+0x200>)
 80062d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062d4:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7ff f810 	bl	80052fc <Displ_CLS>

    x1 = y1 = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	e00f      	b.n	8006310 <testLines+0x54>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	b218      	sxth	r0, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	b219      	sxth	r1, r3
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	b21a      	sxth	r2, r3
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	b21c      	sxth	r4, r3
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4623      	mov	r3, r4
 8006306:	f7ff f9e2 	bl	80056ce <Displ_Line>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3306      	adds	r3, #6
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	429a      	cmp	r2, r3
 8006316:	dbeb      	blt.n	80062f0 <testLines+0x34>
    x2    = w - 1;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3b01      	subs	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e00f      	b.n	8006344 <testLines+0x88>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	b218      	sxth	r0, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	b219      	sxth	r1, r3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	b21a      	sxth	r2, r3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	b21c      	sxth	r4, r3
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4623      	mov	r3, r4
 800633a:	f7ff f9c8 	bl	80056ce <Displ_Line>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	3306      	adds	r3, #6
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	429a      	cmp	r2, r3
 800634a:	dbeb      	blt.n	8006324 <testLines+0x68>

    Displ_CLS(BLACK);
 800634c:	2000      	movs	r0, #0
 800634e:	f7fe ffd5 	bl	80052fc <Displ_CLS>

    x1    = w - 1;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	3b01      	subs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	3b01      	subs	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	e00f      	b.n	8006388 <testLines+0xcc>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	b218      	sxth	r0, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	b219      	sxth	r1, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	b21a      	sxth	r2, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	b21c      	sxth	r4, r3
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4623      	mov	r3, r4
 800637e:	f7ff f9a6 	bl	80056ce <Displ_Line>
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3306      	adds	r3, #6
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	dbeb      	blt.n	8006368 <testLines+0xac>
    x2    = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006394:	2300      	movs	r3, #0
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	e00f      	b.n	80063ba <testLines+0xfe>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	b218      	sxth	r0, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	b219      	sxth	r1, r3
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	b21c      	sxth	r4, r3
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4623      	mov	r3, r4
 80063b0:	f7ff f98d 	bl	80056ce <Displ_Line>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	3306      	adds	r3, #6
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	429a      	cmp	r2, r3
 80063c0:	dbeb      	blt.n	800639a <testLines+0xde>

    Displ_CLS(BLACK);
 80063c2:	2000      	movs	r0, #0
 80063c4:	f7fe ff9a 	bl	80052fc <Displ_CLS>

    x1    = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	e00f      	b.n	80063fc <testLines+0x140>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	b218      	sxth	r0, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	b219      	sxth	r1, r3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	b21a      	sxth	r2, r3
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	b21c      	sxth	r4, r3
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	4623      	mov	r3, r4
 80063f2:	f7ff f96c 	bl	80056ce <Displ_Line>
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	3306      	adds	r3, #6
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	dbeb      	blt.n	80063dc <testLines+0x120>
    x2    = w - 1;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	3b01      	subs	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e00f      	b.n	8006430 <testLines+0x174>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	b218      	sxth	r0, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	b219      	sxth	r1, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	b21a      	sxth	r2, r3
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	b21c      	sxth	r4, r3
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4623      	mov	r3, r4
 8006426:	f7ff f952 	bl	80056ce <Displ_Line>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3306      	adds	r3, #6
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	dbeb      	blt.n	8006410 <testLines+0x154>

    Displ_CLS(BLACK);
 8006438:	2000      	movs	r0, #0
 800643a:	f7fe ff5f 	bl	80052fc <Displ_CLS>

    x1    = w - 1;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3b01      	subs	r3, #1
 8006442:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3b01      	subs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e00f      	b.n	8006474 <testLines+0x1b8>
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	b218      	sxth	r0, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	b219      	sxth	r1, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	b21a      	sxth	r2, r3
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	b21c      	sxth	r4, r3
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4623      	mov	r3, r4
 800646a:	f7ff f930 	bl	80056ce <Displ_Line>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3306      	adds	r3, #6
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	429a      	cmp	r2, r3
 800647a:	dbeb      	blt.n	8006454 <testLines+0x198>
    x2    = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e00f      	b.n	80064a6 <testLines+0x1ea>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	b218      	sxth	r0, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	b219      	sxth	r1, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	b21a      	sxth	r2, r3
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	b21c      	sxth	r4, r3
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4623      	mov	r3, r4
 800649c:	f7ff f917 	bl	80056ce <Displ_Line>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3306      	adds	r3, #6
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	dbeb      	blt.n	8006486 <testLines+0x1ca>

}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	3724      	adds	r7, #36	; 0x24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}
 80064b8:	20007fca 	.word	0x20007fca
 80064bc:	20007fcc 	.word	0x20007fcc

080064c0 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	4603      	mov	r3, r0
 80064c8:	460a      	mov	r2, r1
 80064ca:	80fb      	strh	r3, [r7, #6]
 80064cc:	4613      	mov	r3, r2
 80064ce:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <testFastLines+0x94>)
 80064d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <testFastLines+0x98>)
 80064da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064de:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80064e0:	2000      	movs	r0, #0
 80064e2:	f7fe ff0b 	bl	80052fc <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	e011      	b.n	8006510 <testFastLines+0x50>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	b219      	sxth	r1, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	b21a      	sxth	r2, r3
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	b218      	sxth	r0, r3
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	4603      	mov	r3, r0
 8006504:	2000      	movs	r0, #0
 8006506:	f7ff f8e2 	bl	80056ce <Displ_Line>
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3305      	adds	r3, #5
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	dbe9      	blt.n	80064ec <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e011      	b.n	8006542 <testFastLines+0x82>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	b218      	sxth	r0, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	b21a      	sxth	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29b      	uxth	r3, r3
 800652e:	b219      	sxth	r1, r3
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	460b      	mov	r3, r1
 8006536:	2100      	movs	r1, #0
 8006538:	f7ff f8c9 	bl	80056ce <Displ_Line>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	3305      	adds	r3, #5
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	429a      	cmp	r2, r3
 8006548:	dbe9      	blt.n	800651e <testFastLines+0x5e>
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20007fca 	.word	0x20007fca
 8006558:	20007fcc 	.word	0x20007fcc

0800655c <testRects>:




void testRects(uint16_t color)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b08b      	sub	sp, #44	; 0x2c
 8006560:	af02      	add	r7, sp, #8
 8006562:	4603      	mov	r3, r0
 8006564:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8006566:	4b25      	ldr	r3, [pc, #148]	; (80065fc <testRects+0xa0>)
 8006568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656c:	0fda      	lsrs	r2, r3, #31
 800656e:	4413      	add	r3, r2
 8006570:	105b      	asrs	r3, r3, #1
 8006572:	b21b      	sxth	r3, r3
 8006574:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <testRects+0xa4>)
 8006578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800657c:	0fda      	lsrs	r2, r3, #31
 800657e:	4413      	add	r3, r2
 8006580:	105b      	asrs	r3, r3, #1
 8006582:	b21b      	sxth	r3, r3
 8006584:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006586:	2000      	movs	r0, #0
 8006588:	f7fe feb8 	bl	80052fc <Displ_CLS>
	n     = min(_width, _height);
 800658c:	4b1c      	ldr	r3, [pc, #112]	; (8006600 <testRects+0xa4>)
 800658e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006592:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <testRects+0xa0>)
 8006594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006598:	4293      	cmp	r3, r2
 800659a:	bfa8      	it	ge
 800659c:	4613      	movge	r3, r2
 800659e:	b21b      	sxth	r3, r3
 80065a0:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80065a2:	2302      	movs	r3, #2
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e020      	b.n	80065ea <testRects+0x8e>
		i2 = i / 2;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	0fda      	lsrs	r2, r3, #31
 80065ac:	4413      	add	r3, r2
 80065ae:	105b      	asrs	r3, r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	b29b      	uxth	r3, r3
 80065be:	b218      	sxth	r0, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	b219      	sxth	r1, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	b21a      	sxth	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	b21c      	sxth	r4, r3
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	2301      	movs	r3, #1
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	4623      	mov	r3, r4
 80065e0:	f7ff f9a6 	bl	8005930 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3306      	adds	r3, #6
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	dbda      	blt.n	80065a8 <testRects+0x4c>
	}
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	3724      	adds	r7, #36	; 0x24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd90      	pop	{r4, r7, pc}
 80065fc:	20007fca 	.word	0x20007fca
 8006600:	20007fcc 	.word	0x20007fcc

08006604 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b08b      	sub	sp, #44	; 0x2c
 8006608:	af02      	add	r7, sp, #8
 800660a:	4603      	mov	r3, r0
 800660c:	460a      	mov	r2, r1
 800660e:	80fb      	strh	r3, [r7, #6]
 8006610:	4613      	mov	r3, r2
 8006612:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8006614:	4b30      	ldr	r3, [pc, #192]	; (80066d8 <testFilledRects+0xd4>)
 8006616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800661a:	0fda      	lsrs	r2, r3, #31
 800661c:	4413      	add	r3, r2
 800661e:	105b      	asrs	r3, r3, #1
 8006620:	b21b      	sxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8006626:	4b2d      	ldr	r3, [pc, #180]	; (80066dc <testFilledRects+0xd8>)
 8006628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800662c:	0fda      	lsrs	r2, r3, #31
 800662e:	4413      	add	r3, r2
 8006630:	105b      	asrs	r3, r3, #1
 8006632:	b21b      	sxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006638:	2000      	movs	r0, #0
 800663a:	f7fe fe5f 	bl	80052fc <Displ_CLS>
	n = min(_width, _height);
 800663e:	4b27      	ldr	r3, [pc, #156]	; (80066dc <testFilledRects+0xd8>)
 8006640:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006644:	4b24      	ldr	r3, [pc, #144]	; (80066d8 <testFilledRects+0xd4>)
 8006646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800664a:	4293      	cmp	r3, r2
 800664c:	bfa8      	it	ge
 800664e:	4613      	movge	r3, r2
 8006650:	b21b      	sxth	r3, r3
 8006652:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	e035      	b.n	80066c6 <testFilledRects+0xc2>
		i2    = i / 2;
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	0fda      	lsrs	r2, r3, #31
 800665e:	4413      	add	r3, r2
 8006660:	105b      	asrs	r3, r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	b29b      	uxth	r3, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	b298      	uxth	r0, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	b29b      	uxth	r3, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	b299      	uxth	r1, r3
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	b29a      	uxth	r2, r3
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	b29c      	uxth	r4, r3
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4623      	mov	r3, r4
 800668a:	f7fe fc83 	bl	8004f94 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	b29b      	uxth	r3, r3
 800669a:	b218      	sxth	r0, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	b219      	sxth	r1, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	b21a      	sxth	r2, r3
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	b21c      	sxth	r4, r3
 80066b2:	88bb      	ldrh	r3, [r7, #4]
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	2301      	movs	r3, #1
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4623      	mov	r3, r4
 80066bc:	f7ff f938 	bl	8005930 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3b06      	subs	r3, #6
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dcc6      	bgt.n	800665a <testFilledRects+0x56>
	}
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20007fca 	.word	0x20007fca
 80066dc:	20007fcc 	.word	0x20007fcc

080066e0 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	460a      	mov	r2, r1
 80066ea:	71fb      	strb	r3, [r7, #7]
 80066ec:	4613      	mov	r3, r2
 80066ee:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80066f0:	4b18      	ldr	r3, [pc, #96]	; (8006754 <testFilledCircles+0x74>)
 80066f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	4b17      	ldr	r3, [pc, #92]	; (8006758 <testFilledCircles+0x78>)
 80066fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8006706:	2000      	movs	r0, #0
 8006708:	f7fe fdf8 	bl	80052fc <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	e017      	b.n	8006742 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e00c      	b.n	8006732 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	b218      	sxth	r0, r3
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	b219      	sxth	r1, r3
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	b21a      	sxth	r2, r3
 8006724:	88bb      	ldrh	r3, [r7, #4]
 8006726:	f7fe ff9f 	bl	8005668 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	dbee      	blt.n	8006718 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	429a      	cmp	r2, r3
 8006748:	dbe3      	blt.n	8006712 <testFilledCircles+0x32>
        }
    }
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20007fca 	.word	0x20007fca
 8006758:	20007fcc 	.word	0x20007fcc

0800675c <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	460a      	mov	r2, r1
 8006766:	71fb      	strb	r3, [r7, #7]
 8006768:	4613      	mov	r3, r2
 800676a:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8006772:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <testCircles+0x7c>)
 8006774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006778:	461a      	mov	r2, r3
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	4413      	add	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8006780:	4b16      	ldr	r3, [pc, #88]	; (80067dc <testCircles+0x80>)
 8006782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006786:	461a      	mov	r2, r3
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	4413      	add	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	e017      	b.n	80067c4 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	e00c      	b.n	80067b4 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	b218      	sxth	r0, r3
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	b219      	sxth	r1, r3
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	b21a      	sxth	r2, r3
 80067a6:	88bb      	ldrh	r3, [r7, #4]
 80067a8:	f7fe fcd4 	bl	8005154 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	4413      	add	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	dbee      	blt.n	800679a <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4413      	add	r3, r2
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	dbe3      	blt.n	8006794 <testCircles+0x38>
        }
    }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20007fca 	.word	0x20007fca
 80067dc:	20007fcc 	.word	0x20007fcc

080067e0 <testTriangles>:




void testTriangles()
{
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e2:	b089      	sub	sp, #36	; 0x24
 80067e4:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <testTriangles+0xc0>)
 80067e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ec:	0fda      	lsrs	r2, r3, #31
 80067ee:	4413      	add	r3, r2
 80067f0:	105b      	asrs	r3, r3, #1
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80067f8:	4b2a      	ldr	r3, [pc, #168]	; (80068a4 <testTriangles+0xc4>)
 80067fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067fe:	0fda      	lsrs	r2, r3, #31
 8006800:	4413      	add	r3, r2
 8006802:	105b      	asrs	r3, r3, #1
 8006804:	b21b      	sxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800680a:	2000      	movs	r0, #0
 800680c:	f7fe fd76 	bl	80052fc <Displ_CLS>
    n     = min(cx, cy);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4293      	cmp	r3, r2
 8006816:	bfa8      	it	ge
 8006818:	4613      	movge	r3, r2
 800681a:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e035      	b.n	800688e <testTriangles+0xae>
    	Displ_drawTriangle(
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	b29b      	uxth	r3, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006832:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	b29b      	uxth	r3, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006840:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	b29b      	uxth	r3, r3
 800684a:	4413      	add	r3, r2
 800684c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800684e:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	b29b      	uxth	r3, r3
 8006858:	4413      	add	r3, r2
 800685a:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800685c:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	b291      	uxth	r1, r2
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	b292      	uxth	r2, r2
 8006866:	440a      	add	r2, r1
 8006868:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800686a:	b212      	sxth	r2, r2
            color565(0, 0, i));
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	10c9      	asrs	r1, r1, #3
 8006870:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8006872:	f001 011f 	and.w	r1, r1, #31
 8006876:	b289      	uxth	r1, r1
 8006878:	9102      	str	r1, [sp, #8]
 800687a:	9201      	str	r2, [sp, #4]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	462a      	mov	r2, r5
 8006882:	4621      	mov	r1, r4
 8006884:	f7ff f897 	bl	80059b6 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3305      	adds	r3, #5
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	dbc5      	blt.n	8006822 <testTriangles+0x42>
    }
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068a0:	20007fca 	.word	0x20007fca
 80068a4:	20007fcc 	.word	0x20007fcc

080068a8 <testFilledTriangles>:





void testFilledTriangles() {
 80068a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80068ae:	4b53      	ldr	r3, [pc, #332]	; (80069fc <testFilledTriangles+0x154>)
 80068b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b4:	0fda      	lsrs	r2, r3, #31
 80068b6:	4413      	add	r3, r2
 80068b8:	105b      	asrs	r3, r3, #1
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80068c0:	4b4f      	ldr	r3, [pc, #316]	; (8006a00 <testFilledTriangles+0x158>)
 80068c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068c6:	0fda      	lsrs	r2, r3, #31
 80068c8:	4413      	add	r3, r2
 80068ca:	105b      	asrs	r3, r3, #1
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80068d2:	2000      	movs	r0, #0
 80068d4:	f7fe fd12 	bl	80052fc <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bfa8      	it	ge
 80068e0:	4613      	movge	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e080      	b.n	80069e8 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	b21c      	sxth	r4, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	b21d      	sxth	r5, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	b29b      	uxth	r3, r3
 8006904:	b21e      	sxth	r6, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	b29b      	uxth	r3, r3
 800690e:	4413      	add	r3, r2
 8006910:	b29b      	uxth	r3, r3
 8006912:	fa0f fc83 	sxth.w	ip, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	b29b      	uxth	r3, r3
 800691e:	4413      	add	r3, r2
 8006920:	b29b      	uxth	r3, r3
 8006922:	b21b      	sxth	r3, r3
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	b291      	uxth	r1, r2
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	b292      	uxth	r2, r2
 800692c:	440a      	add	r2, r1
 800692e:	b292      	uxth	r2, r2
 8006930:	b212      	sxth	r2, r2
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	00c9      	lsls	r1, r1, #3
 8006936:	b209      	sxth	r1, r1
 8006938:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 800693c:	b208      	sxth	r0, r1
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	10c9      	asrs	r1, r1, #3
 8006942:	b209      	sxth	r1, r1
 8006944:	f001 011f 	and.w	r1, r1, #31
 8006948:	b209      	sxth	r1, r1
 800694a:	4301      	orrs	r1, r0
 800694c:	b209      	sxth	r1, r1
 800694e:	b289      	uxth	r1, r1
 8006950:	9102      	str	r1, [sp, #8]
 8006952:	9201      	str	r2, [sp, #4]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4663      	mov	r3, ip
 8006958:	4632      	mov	r2, r6
 800695a:	4629      	mov	r1, r5
 800695c:	4620      	mov	r0, r4
 800695e:	f7ff f864 	bl	8005a2a <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	b21c      	sxth	r4, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	b29b      	uxth	r3, r3
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	b29b      	uxth	r3, r3
 8006972:	b21d      	sxth	r5, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	b29b      	uxth	r3, r3
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	b21e      	sxth	r6, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	b29b      	uxth	r3, r3
 800698a:	4413      	add	r3, r2
 800698c:	b29b      	uxth	r3, r3
 800698e:	fa0f fc83 	sxth.w	ip, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4413      	add	r3, r2
 800699c:	b29b      	uxth	r3, r3
 800699e:	b21a      	sxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	b299      	uxth	r1, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	440b      	add	r3, r1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	b219      	sxth	r1, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069b8:	f023 0307 	bic.w	r3, r3, #7
 80069bc:	b218      	sxth	r0, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	b21b      	sxth	r3, r3
 80069c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80069c8:	b21b      	sxth	r3, r3
 80069ca:	4303      	orrs	r3, r0
 80069cc:	b21b      	sxth	r3, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	9101      	str	r1, [sp, #4]
 80069d4:	9200      	str	r2, [sp, #0]
 80069d6:	4663      	mov	r3, ip
 80069d8:	4632      	mov	r2, r6
 80069da:	4629      	mov	r1, r5
 80069dc:	4620      	mov	r0, r4
 80069de:	f7fe ffea 	bl	80059b6 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3b05      	subs	r3, #5
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b0a      	cmp	r3, #10
 80069ec:	f73f af7b 	bgt.w	80068e6 <testFilledTriangles+0x3e>
    }
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20007fca 	.word	0x20007fca
 8006a00:	20007fcc 	.word	0x20007fcc

08006a04 <testRoundRects>:





void testRoundRects() {
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8006a0a:	4b33      	ldr	r3, [pc, #204]	; (8006ad8 <testRoundRects+0xd4>)
 8006a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a10:	0fda      	lsrs	r2, r3, #31
 8006a12:	4413      	add	r3, r2
 8006a14:	105b      	asrs	r3, r3, #1
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8006a1c:	4b2f      	ldr	r3, [pc, #188]	; (8006adc <testRoundRects+0xd8>)
 8006a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a22:	0fda      	lsrs	r2, r3, #31
 8006a24:	4413      	add	r3, r2
 8006a26:	105b      	asrs	r3, r3, #1
 8006a28:	b21b      	sxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f7fe fc64 	bl	80052fc <Displ_CLS>
    w     = min(_width, _height);
 8006a34:	4b29      	ldr	r3, [pc, #164]	; (8006adc <testRoundRects+0xd8>)
 8006a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a3a:	4b27      	ldr	r3, [pc, #156]	; (8006ad8 <testRoundRects+0xd4>)
 8006a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	bfa8      	it	ge
 8006a44:	4613      	movge	r3, r2
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	60fb      	str	r3, [r7, #12]
    red = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8006a4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a58:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e031      	b.n	8006ac4 <testRoundRects+0xc0>
        i2 = i / 2;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	0fda      	lsrs	r2, r3, #31
 8006a64:	4413      	add	r3, r2
 8006a66:	105b      	asrs	r3, r3, #1
 8006a68:	607b      	str	r3, [r7, #4]
        red += step;
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4413      	add	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	b218      	sxth	r0, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	b219      	sxth	r1, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	b21c      	sxth	r4, r3
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	b21d      	sxth	r5, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da00      	bge.n	8006a9e <testRoundRects+0x9a>
 8006a9c:	3307      	adds	r3, #7
 8006a9e:	10db      	asrs	r3, r3, #3
 8006aa0:	b21a      	sxth	r2, r3
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	9200      	str	r2, [sp, #0]
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	4622      	mov	r2, r4
 8006aba:	f7ff fa27 	bl	8005f0c <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	3306      	adds	r3, #6
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dbc9      	blt.n	8006a60 <testRoundRects+0x5c>
    }
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20007fca 	.word	0x20007fca
 8006adc:	20007fcc 	.word	0x20007fcc

08006ae0 <testFilledRoundRects>:





void testFilledRoundRects() {
 8006ae0:	b5b0      	push	{r4, r5, r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8006ae6:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <testFilledRoundRects+0xe0>)
 8006ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006aec:	0fda      	lsrs	r2, r3, #31
 8006aee:	4413      	add	r3, r2
 8006af0:	105b      	asrs	r3, r3, #1
 8006af2:	b21b      	sxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8006af8:	4b32      	ldr	r3, [pc, #200]	; (8006bc4 <testFilledRoundRects+0xe4>)
 8006afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006afe:	0fda      	lsrs	r2, r3, #31
 8006b00:	4413      	add	r3, r2
 8006b02:	105b      	asrs	r3, r3, #1
 8006b04:	b21b      	sxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f7fe fbf6 	bl	80052fc <Displ_CLS>
    green = 256;
 8006b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b14:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8006b16:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <testFilledRoundRects+0xe4>)
 8006b18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006b1c:	4b28      	ldr	r3, [pc, #160]	; (8006bc0 <testFilledRoundRects+0xe0>)
 8006b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bfa8      	it	ge
 8006b26:	4613      	movge	r3, r2
 8006b28:	b21b      	sxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b34:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006b36:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <testFilledRoundRects+0xe4>)
 8006b38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006b3c:	4b20      	ldr	r3, [pc, #128]	; (8006bc0 <testFilledRoundRects+0xe0>)
 8006b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	bfa8      	it	ge
 8006b46:	4613      	movge	r3, r2
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e02f      	b.n	8006bae <testFilledRoundRects+0xce>
        i2 = i / 2;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	0fda      	lsrs	r2, r3, #31
 8006b52:	4413      	add	r3, r2
 8006b54:	105b      	asrs	r3, r3, #1
 8006b56:	603b      	str	r3, [r7, #0]
        green -= step;
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	b218      	sxth	r0, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b219      	sxth	r1, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	b21c      	sxth	r4, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	b21d      	sxth	r5, r3
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da00      	bge.n	8006b8c <testFilledRoundRects+0xac>
 8006b8a:	3307      	adds	r3, #7
 8006b8c:	10db      	asrs	r3, r3, #3
 8006b8e:	b21b      	sxth	r3, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	00d2      	lsls	r2, r2, #3
 8006b94:	b292      	uxth	r2, r2
 8006b96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	9201      	str	r2, [sp, #4]
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	f7ff faa7 	bl	80060f6 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	3b06      	subs	r3, #6
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b14      	cmp	r3, #20
 8006bb2:	dccc      	bgt.n	8006b4e <testFilledRoundRects+0x6e>
    }
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20007fca 	.word	0x20007fca
 8006bc4:	20007fcc 	.word	0x20007fcc

08006bc8 <testFillScreen>:




void testFillScreen()
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8006bcc:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006bd0:	f7fe fb94 	bl	80052fc <Displ_CLS>
	Displ_CLS(GREEN);
 8006bd4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006bd8:	f7fe fb90 	bl	80052fc <Displ_CLS>
	Displ_CLS(BLUE);
 8006bdc:	201f      	movs	r0, #31
 8006bde:	f7fe fb8d 	bl	80052fc <Displ_CLS>
	Displ_CLS(YELLOW);
 8006be2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006be6:	f7fe fb89 	bl	80052fc <Displ_CLS>
	Displ_CLS(BLACK);
 8006bea:	2000      	movs	r0, #0
 8006bec:	f7fe fb86 	bl	80052fc <Displ_CLS>
}
 8006bf0:	bf00      	nop
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <Displ_TestAll>:





void Displ_TestAll (){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
	testFillScreen();
 8006bf8:	f7ff ffe6 	bl	8006bc8 <testFillScreen>
	testLines(CYAN);
 8006bfc:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8006c00:	f7ff fb5c 	bl	80062bc <testLines>
	testFastLines(RED, BLUE);
 8006c04:	211f      	movs	r1, #31
 8006c06:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006c0a:	f7ff fc59 	bl	80064c0 <testFastLines>
	testRects(GREEN);
 8006c0e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006c12:	f7ff fca3 	bl	800655c <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8006c16:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006c1a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006c1e:	f7ff fcf1 	bl	8006604 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8006c22:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006c26:	200a      	movs	r0, #10
 8006c28:	f7ff fd5a 	bl	80066e0 <testFilledCircles>
	testCircles(10, WHITE);
 8006c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c30:	200a      	movs	r0, #10
 8006c32:	f7ff fd93 	bl	800675c <testCircles>
	testTriangles();
 8006c36:	f7ff fdd3 	bl	80067e0 <testTriangles>
	testFilledTriangles();
 8006c3a:	f7ff fe35 	bl	80068a8 <testFilledTriangles>
	testRoundRects();
 8006c3e:	f7ff fee1 	bl	8006a04 <testRoundRects>
	testFilledRoundRects();
 8006c42:	f7ff ff4d 	bl	8006ae0 <testFilledRoundRects>
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c50:	480d      	ldr	r0, [pc, #52]	; (8006c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c52:	490e      	ldr	r1, [pc, #56]	; (8006c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c54:	4a0e      	ldr	r2, [pc, #56]	; (8006c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c58:	e002      	b.n	8006c60 <LoopCopyDataInit>

08006c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c5e:	3304      	adds	r3, #4

08006c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c64:	d3f9      	bcc.n	8006c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c66:	4a0b      	ldr	r2, [pc, #44]	; (8006c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c68:	4c0b      	ldr	r4, [pc, #44]	; (8006c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c6c:	e001      	b.n	8006c72 <LoopFillZerobss>

08006c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c70:	3204      	adds	r2, #4

08006c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c74:	d3fb      	bcc.n	8006c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006c76:	f7fd fd9b 	bl	80047b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c7a:	f005 fa5f 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c7e:	f7fc fb87 	bl	8003390 <main>
  bx  lr    
 8006c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c8c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006c90:	08013ee8 	.word	0x08013ee8
  ldr r2, =_sbss
 8006c94:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006c98:	20009128 	.word	0x20009128

08006c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c9c:	e7fe      	b.n	8006c9c <ADC_IRQHandler>
	...

08006ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	; (8006ce0 <HAL_Init+0x40>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0d      	ldr	r2, [pc, #52]	; (8006ce0 <HAL_Init+0x40>)
 8006caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <HAL_Init+0x40>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <HAL_Init+0x40>)
 8006cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cbc:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <HAL_Init+0x40>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a07      	ldr	r2, [pc, #28]	; (8006ce0 <HAL_Init+0x40>)
 8006cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cc8:	2003      	movs	r0, #3
 8006cca:	f000 fd53 	bl	8007774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f000 f808 	bl	8006ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cd4:	f7fd f9a0 	bl	8004018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40023c00 	.word	0x40023c00

08006ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <HAL_InitTick+0x54>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <HAL_InitTick+0x58>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fd6b 	bl	80077de <HAL_SYSTICK_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e00e      	b.n	8006d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b0f      	cmp	r3, #15
 8006d16:	d80a      	bhi.n	8006d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d20:	f000 fd33 	bl	800778a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d24:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <HAL_InitTick+0x5c>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000030 	.word	0x20000030
 8006d3c:	20000040 	.word	0x20000040
 8006d40:	2000003c 	.word	0x2000003c

08006d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d48:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <HAL_IncTick+0x20>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_IncTick+0x24>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <HAL_IncTick+0x24>)
 8006d56:	6013      	str	r3, [r2, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20000040 	.word	0x20000040
 8006d68:	20008fd8 	.word	0x20008fd8

08006d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <HAL_GetTick+0x14>)
 8006d72:	681b      	ldr	r3, [r3, #0]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20008fd8 	.word	0x20008fd8

08006d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d8c:	f7ff ffee 	bl	8006d6c <HAL_GetTick>
 8006d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d9c:	d005      	beq.n	8006daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <HAL_Delay+0x44>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006daa:	bf00      	nop
 8006dac:	f7ff ffde 	bl	8006d6c <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d8f7      	bhi.n	8006dac <HAL_Delay+0x28>
  {
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000040 	.word	0x20000040

08006dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e033      	b.n	8006e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fd f93c 	bl	8004068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d118      	bne.n	8006e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e12:	f023 0302 	bic.w	r3, r3, #2
 8006e16:	f043 0202 	orr.w	r2, r3, #2
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa5a 	bl	80072d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f023 0303 	bic.w	r3, r3, #3
 8006e32:	f043 0201 	orr.w	r2, r3, #1
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
 8006e3a:	e001      	b.n	8006e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_ADC_Start_DMA+0x1e>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e0e9      	b.n	8007046 <HAL_ADC_Start_DMA+0x1f2>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d018      	beq.n	8006eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689a      	ldr	r2, [r3, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e98:	4b6d      	ldr	r3, [pc, #436]	; (8007050 <HAL_ADC_Start_DMA+0x1fc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6d      	ldr	r2, [pc, #436]	; (8007054 <HAL_ADC_Start_DMA+0x200>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	0c9a      	lsrs	r2, r3, #18
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	4413      	add	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006eac:	e002      	b.n	8006eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f9      	bne.n	8006eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec8:	d107      	bne.n	8006eda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 80a1 	bne.w	800702c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f28:	d106      	bne.n	8006f38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	f023 0206 	bic.w	r2, r3, #6
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
 8006f36:	e002      	b.n	8006f3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f46:	4b44      	ldr	r3, [pc, #272]	; (8007058 <HAL_ADC_Start_DMA+0x204>)
 8006f48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4e:	4a43      	ldr	r2, [pc, #268]	; (800705c <HAL_ADC_Start_DMA+0x208>)
 8006f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	4a42      	ldr	r2, [pc, #264]	; (8007060 <HAL_ADC_Start_DMA+0x20c>)
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	4a41      	ldr	r2, [pc, #260]	; (8007064 <HAL_ADC_Start_DMA+0x210>)
 8006f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	334c      	adds	r3, #76	; 0x4c
 8006f96:	4619      	mov	r1, r3
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f000 fcda 	bl	8007954 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d12a      	bne.n	8007002 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_ADC_Start_DMA+0x214>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d015      	beq.n	8006fe2 <HAL_ADC_Start_DMA+0x18e>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <HAL_ADC_Start_DMA+0x218>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d105      	bne.n	8006fcc <HAL_ADC_Start_DMA+0x178>
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <HAL_ADC_Start_DMA+0x204>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a27      	ldr	r2, [pc, #156]	; (8007070 <HAL_ADC_Start_DMA+0x21c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d136      	bne.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
 8006fd6:	4b20      	ldr	r3, [pc, #128]	; (8007058 <HAL_ADC_Start_DMA+0x204>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 0310 	and.w	r3, r3, #16
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d130      	bne.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d129      	bne.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	e020      	b.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a18      	ldr	r2, [pc, #96]	; (8007068 <HAL_ADC_Start_DMA+0x214>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d11b      	bne.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d114      	bne.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007028:	609a      	str	r2, [r3, #8]
 800702a:	e00b      	b.n	8007044 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	f043 0210 	orr.w	r2, r3, #16
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703c:	f043 0201 	orr.w	r2, r3, #1
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000030 	.word	0x20000030
 8007054:	431bde83 	.word	0x431bde83
 8007058:	40012300 	.word	0x40012300
 800705c:	080074d1 	.word	0x080074d1
 8007060:	0800758b 	.word	0x0800758b
 8007064:	080075a7 	.word	0x080075a7
 8007068:	40012000 	.word	0x40012000
 800706c:	40012100 	.word	0x40012100
 8007070:	40012200 	.word	0x40012200

08007074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_ADC_ConfigChannel+0x1c>
 800708c:	2302      	movs	r3, #2
 800708e:	e113      	b.n	80072b8 <HAL_ADC_ConfigChannel+0x244>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	d925      	bls.n	80070ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68d9      	ldr	r1, [r3, #12]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	3b1e      	subs	r3, #30
 80070b6:	2207      	movs	r2, #7
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	43da      	mvns	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	400a      	ands	r2, r1
 80070c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68d9      	ldr	r1, [r3, #12]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	4618      	mov	r0, r3
 80070d8:	4603      	mov	r3, r0
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4403      	add	r3, r0
 80070de:	3b1e      	subs	r3, #30
 80070e0:	409a      	lsls	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	e022      	b.n	8007132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6919      	ldr	r1, [r3, #16]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	2207      	movs	r2, #7
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	43da      	mvns	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	400a      	ands	r2, r1
 800710e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6919      	ldr	r1, [r3, #16]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	4618      	mov	r0, r3
 8007122:	4603      	mov	r3, r0
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4403      	add	r3, r0
 8007128:	409a      	lsls	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b06      	cmp	r3, #6
 8007138:	d824      	bhi.n	8007184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	3b05      	subs	r3, #5
 800714c:	221f      	movs	r2, #31
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43da      	mvns	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	400a      	ands	r2, r1
 800715a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	4618      	mov	r0, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	3b05      	subs	r3, #5
 8007176:	fa00 f203 	lsl.w	r2, r0, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	635a      	str	r2, [r3, #52]	; 0x34
 8007182:	e04c      	b.n	800721e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b0c      	cmp	r3, #12
 800718a:	d824      	bhi.n	80071d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	3b23      	subs	r3, #35	; 0x23
 800719e:	221f      	movs	r2, #31
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	43da      	mvns	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	400a      	ands	r2, r1
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4618      	mov	r0, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	3b23      	subs	r3, #35	; 0x23
 80071c8:	fa00 f203 	lsl.w	r2, r0, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
 80071d4:	e023      	b.n	800721e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	3b41      	subs	r3, #65	; 0x41
 80071e8:	221f      	movs	r2, #31
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43da      	mvns	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	400a      	ands	r2, r1
 80071f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	4618      	mov	r0, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	3b41      	subs	r3, #65	; 0x41
 8007212:	fa00 f203 	lsl.w	r2, r0, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800721e:	4b29      	ldr	r3, [pc, #164]	; (80072c4 <HAL_ADC_ConfigChannel+0x250>)
 8007220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <HAL_ADC_ConfigChannel+0x254>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d10f      	bne.n	800724c <HAL_ADC_ConfigChannel+0x1d8>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b12      	cmp	r3, #18
 8007232:	d10b      	bne.n	800724c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <HAL_ADC_ConfigChannel+0x254>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d12b      	bne.n	80072ae <HAL_ADC_ConfigChannel+0x23a>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <HAL_ADC_ConfigChannel+0x258>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <HAL_ADC_ConfigChannel+0x1f4>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b11      	cmp	r3, #17
 8007266:	d122      	bne.n	80072ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <HAL_ADC_ConfigChannel+0x258>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d111      	bne.n	80072ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <HAL_ADC_ConfigChannel+0x25c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a11      	ldr	r2, [pc, #68]	; (80072d4 <HAL_ADC_ConfigChannel+0x260>)
 8007290:	fba2 2303 	umull	r2, r3, r2, r3
 8007294:	0c9a      	lsrs	r2, r3, #18
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80072a0:	e002      	b.n	80072a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1f9      	bne.n	80072a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40012300 	.word	0x40012300
 80072c8:	40012000 	.word	0x40012000
 80072cc:	10000012 	.word	0x10000012
 80072d0:	20000030 	.word	0x20000030
 80072d4:	431bde83 	.word	0x431bde83

080072d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072e0:	4b79      	ldr	r3, [pc, #484]	; (80074c8 <ADC_Init+0x1f0>)
 80072e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800730c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6859      	ldr	r1, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	021a      	lsls	r2, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6899      	ldr	r1, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	4a58      	ldr	r2, [pc, #352]	; (80074cc <ADC_Init+0x1f4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d022      	beq.n	80073b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800737e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6899      	ldr	r1, [r3, #8]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80073a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e00f      	b.n	80073d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80073d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0202 	bic.w	r2, r2, #2
 80073e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6899      	ldr	r1, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	7e1b      	ldrb	r3, [r3, #24]
 80073f0:	005a      	lsls	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01b      	beq.n	800743c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	3b01      	subs	r3, #1
 8007430:	035a      	lsls	r2, r3, #13
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	e007      	b.n	800744c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800744a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	3b01      	subs	r3, #1
 8007468:	051a      	lsls	r2, r3, #20
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6899      	ldr	r1, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800748e:	025a      	lsls	r2, r3, #9
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6899      	ldr	r1, [r3, #8]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	029a      	lsls	r2, r3, #10
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]
}
 80074bc:	bf00      	nop
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012300 	.word	0x40012300
 80074cc:	0f000001 	.word	0x0f000001

080074d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d13c      	bne.n	8007564 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d12b      	bne.n	800755c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007508:	2b00      	cmp	r3, #0
 800750a:	d127      	bne.n	800755c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007516:	2b00      	cmp	r3, #0
 8007518:	d006      	beq.n	8007528 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007524:	2b00      	cmp	r3, #0
 8007526:	d119      	bne.n	800755c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 0220 	bic.w	r2, r2, #32
 8007536:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	f043 0201 	orr.w	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7fc fc75 	bl	8003e4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007562:	e00e      	b.n	8007582 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7fc fcab 	bl	8003ecc <HAL_ADC_ErrorCallback>
}
 8007576:	e004      	b.n	8007582 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
}
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7fc fc77 	bl	8003e8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2240      	movs	r2, #64	; 0x40
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075be:	f043 0204 	orr.w	r2, r3, #4
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7fc fc80 	bl	8003ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <__NVIC_SetPriorityGrouping+0x44>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075f0:	4013      	ands	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <__NVIC_SetPriorityGrouping+0x44>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	60d3      	str	r3, [r2, #12]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	e000ed00 	.word	0xe000ed00

0800761c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <__NVIC_GetPriorityGrouping+0x18>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	0a1b      	lsrs	r3, r3, #8
 8007626:	f003 0307 	and.w	r3, r3, #7
}
 800762a:	4618      	mov	r0, r3
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	e000ed00 	.word	0xe000ed00

08007638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	db0b      	blt.n	8007662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	f003 021f 	and.w	r2, r3, #31
 8007650:	4907      	ldr	r1, [pc, #28]	; (8007670 <__NVIC_EnableIRQ+0x38>)
 8007652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	2001      	movs	r0, #1
 800765a:	fa00 f202 	lsl.w	r2, r0, r2
 800765e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	e000e100 	.word	0xe000e100

08007674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db0a      	blt.n	800769e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	490c      	ldr	r1, [pc, #48]	; (80076c0 <__NVIC_SetPriority+0x4c>)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	0112      	lsls	r2, r2, #4
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	440b      	add	r3, r1
 8007698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800769c:	e00a      	b.n	80076b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	4908      	ldr	r1, [pc, #32]	; (80076c4 <__NVIC_SetPriority+0x50>)
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	3b04      	subs	r3, #4
 80076ac:	0112      	lsls	r2, r2, #4
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	440b      	add	r3, r1
 80076b2:	761a      	strb	r2, [r3, #24]
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000e100 	.word	0xe000e100
 80076c4:	e000ed00 	.word	0xe000ed00

080076c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f1c3 0307 	rsb	r3, r3, #7
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	bf28      	it	cs
 80076e6:	2304      	movcs	r3, #4
 80076e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	3304      	adds	r3, #4
 80076ee:	2b06      	cmp	r3, #6
 80076f0:	d902      	bls.n	80076f8 <NVIC_EncodePriority+0x30>
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3b03      	subs	r3, #3
 80076f6:	e000      	b.n	80076fa <NVIC_EncodePriority+0x32>
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43da      	mvns	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	401a      	ands	r2, r3
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	43d9      	mvns	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007720:	4313      	orrs	r3, r2
         );
}
 8007722:	4618      	mov	r0, r3
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3b01      	subs	r3, #1
 800773c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007740:	d301      	bcc.n	8007746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007742:	2301      	movs	r3, #1
 8007744:	e00f      	b.n	8007766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007746:	4a0a      	ldr	r2, [pc, #40]	; (8007770 <SysTick_Config+0x40>)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3b01      	subs	r3, #1
 800774c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800774e:	210f      	movs	r1, #15
 8007750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007754:	f7ff ff8e 	bl	8007674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <SysTick_Config+0x40>)
 800775a:	2200      	movs	r2, #0
 800775c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <SysTick_Config+0x40>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	e000e010 	.word	0xe000e010

08007774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff29 	bl	80075d4 <__NVIC_SetPriorityGrouping>
}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800779c:	f7ff ff3e 	bl	800761c <__NVIC_GetPriorityGrouping>
 80077a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	6978      	ldr	r0, [r7, #20]
 80077a8:	f7ff ff8e 	bl	80076c8 <NVIC_EncodePriority>
 80077ac:	4602      	mov	r2, r0
 80077ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ff5d 	bl	8007674 <__NVIC_SetPriority>
}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	4603      	mov	r3, r0
 80077ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff ff31 	bl	8007638 <__NVIC_EnableIRQ>
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff ffa2 	bl	8007730 <SysTick_Config>
 80077ec:	4603      	mov	r3, r0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007804:	f7ff fab2 	bl	8006d6c <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e099      	b.n	8007948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007834:	e00f      	b.n	8007856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007836:	f7ff fa99 	bl	8006d6c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b05      	cmp	r3, #5
 8007842:	d908      	bls.n	8007856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2203      	movs	r2, #3
 800784e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e078      	b.n	8007948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e8      	bne.n	8007836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4b38      	ldr	r3, [pc, #224]	; (8007950 <HAL_DMA_Init+0x158>)
 8007870:	4013      	ands	r3, r2
 8007872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800788e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800789a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d107      	bne.n	80078c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	4313      	orrs	r3, r2
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f023 0307 	bic.w	r3, r3, #7
 80078d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d117      	bne.n	800791a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00e      	beq.n	800791a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fb01 	bl	8007f04 <DMA_CheckFifoParam>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2240      	movs	r2, #64	; 0x40
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007916:	2301      	movs	r3, #1
 8007918:	e016      	b.n	8007948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fab8 	bl	8007e98 <DMA_CalcBaseAndBitshift>
 8007928:	4603      	mov	r3, r0
 800792a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	223f      	movs	r2, #63	; 0x3f
 8007932:	409a      	lsls	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	f010803f 	.word	0xf010803f

08007954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <HAL_DMA_Start_IT+0x26>
 8007976:	2302      	movs	r3, #2
 8007978:	e040      	b.n	80079fc <HAL_DMA_Start_IT+0xa8>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b01      	cmp	r3, #1
 800798c:	d12f      	bne.n	80079ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2202      	movs	r2, #2
 8007992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fa4a 	bl	8007e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ac:	223f      	movs	r2, #63	; 0x3f
 80079ae:	409a      	lsls	r2, r3
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0216 	orr.w	r2, r2, #22
 80079c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0208 	orr.w	r2, r2, #8
 80079da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	e005      	b.n	80079fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
 80079f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a12:	f7ff f9ab 	bl	8006d6c <HAL_GetTick>
 8007a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d008      	beq.n	8007a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2280      	movs	r2, #128	; 0x80
 8007a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e052      	b.n	8007adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0216 	bic.w	r2, r2, #22
 8007a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d103      	bne.n	8007a66 <HAL_DMA_Abort+0x62>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0208 	bic.w	r2, r2, #8
 8007a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a86:	e013      	b.n	8007ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a88:	f7ff f970 	bl	8006d6c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	d90c      	bls.n	8007ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e015      	b.n	8007adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e4      	bne.n	8007a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac2:	223f      	movs	r2, #63	; 0x3f
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d004      	beq.n	8007b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2280      	movs	r2, #128	; 0x80
 8007afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e00c      	b.n	8007b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2205      	movs	r2, #5
 8007b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b34:	4b8e      	ldr	r3, [pc, #568]	; (8007d70 <HAL_DMA_IRQHandler+0x248>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a8e      	ldr	r2, [pc, #568]	; (8007d74 <HAL_DMA_IRQHandler+0x24c>)
 8007b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3e:	0a9b      	lsrs	r3, r3, #10
 8007b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b52:	2208      	movs	r2, #8
 8007b54:	409a      	lsls	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01a      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d013      	beq.n	8007b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0204 	bic.w	r2, r2, #4
 8007b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b80:	2208      	movs	r2, #8
 8007b82:	409a      	lsls	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b98:	2201      	movs	r2, #1
 8007b9a:	409a      	lsls	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d012      	beq.n	8007bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	409a      	lsls	r2, r3
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f043 0202 	orr.w	r2, r3, #2
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bce:	2204      	movs	r2, #4
 8007bd0:	409a      	lsls	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d012      	beq.n	8007c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bec:	2204      	movs	r2, #4
 8007bee:	409a      	lsls	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	f043 0204 	orr.w	r2, r3, #4
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c04:	2210      	movs	r2, #16
 8007c06:	409a      	lsls	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d043      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d03c      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	2210      	movs	r2, #16
 8007c24:	409a      	lsls	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d018      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d108      	bne.n	8007c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d024      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
 8007c56:	e01f      	b.n	8007c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01b      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
 8007c68:	e016      	b.n	8007c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d107      	bne.n	8007c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0208 	bic.w	r2, r2, #8
 8007c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 808f 	beq.w	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 8087 	beq.w	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	409a      	lsls	r2, r3
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d136      	bne.n	8007d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 0216 	bic.w	r2, r2, #22
 8007ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695a      	ldr	r2, [r3, #20]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <HAL_DMA_IRQHandler+0x1da>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0208 	bic.w	r2, r2, #8
 8007d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d16:	223f      	movs	r2, #63	; 0x3f
 8007d18:	409a      	lsls	r2, r3
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d07e      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
        }
        return;
 8007d3e:	e079      	b.n	8007e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01d      	beq.n	8007d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d031      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
 8007d6c:	e02c      	b.n	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
 8007d6e:	bf00      	nop
 8007d70:	20000030 	.word	0x20000030
 8007d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d023      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
 8007d88:	e01e      	b.n	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10f      	bne.n	8007db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0210 	bic.w	r2, r2, #16
 8007da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d032      	beq.n	8007e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d022      	beq.n	8007e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2205      	movs	r2, #5
 8007de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60bb      	str	r3, [r7, #8]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d307      	bcc.n	8007e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1f2      	bne.n	8007df4 <HAL_DMA_IRQHandler+0x2cc>
 8007e0e:	e000      	b.n	8007e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
 8007e32:	e000      	b.n	8007e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007e34:	bf00      	nop
    }
  }
}
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d108      	bne.n	8007e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007e7a:	e007      	b.n	8007e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	60da      	str	r2, [r3, #12]
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	3b10      	subs	r3, #16
 8007ea8:	4a14      	ldr	r2, [pc, #80]	; (8007efc <DMA_CalcBaseAndBitshift+0x64>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007eb2:	4a13      	ldr	r2, [pc, #76]	; (8007f00 <DMA_CalcBaseAndBitshift+0x68>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d909      	bls.n	8007eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	1d1a      	adds	r2, r3, #4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ed8:	e007      	b.n	8007eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	aaaaaaab 	.word	0xaaaaaaab
 8007f00:	08013b44 	.word	0x08013b44

08007f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d11f      	bne.n	8007f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d856      	bhi.n	8007fd2 <DMA_CheckFifoParam+0xce>
 8007f24:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <DMA_CheckFifoParam+0x28>)
 8007f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2a:	bf00      	nop
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f4f 	.word	0x08007f4f
 8007f34:	08007f3d 	.word	0x08007f3d
 8007f38:	08007fd3 	.word	0x08007fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d046      	beq.n	8007fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f4c:	e043      	b.n	8007fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f56:	d140      	bne.n	8007fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f5c:	e03d      	b.n	8007fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f66:	d121      	bne.n	8007fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d837      	bhi.n	8007fde <DMA_CheckFifoParam+0xda>
 8007f6e:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <DMA_CheckFifoParam+0x70>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f8b 	.word	0x08007f8b
 8007f7c:	08007f85 	.word	0x08007f85
 8007f80:	08007f9d 	.word	0x08007f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	73fb      	strb	r3, [r7, #15]
      break;
 8007f88:	e030      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d025      	beq.n	8007fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f9a:	e022      	b.n	8007fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fa4:	d11f      	bne.n	8007fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007faa:	e01c      	b.n	8007fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d903      	bls.n	8007fba <DMA_CheckFifoParam+0xb6>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d003      	beq.n	8007fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007fb8:	e018      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	e015      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00e      	beq.n	8007fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd0:	e00b      	b.n	8007fea <DMA_CheckFifoParam+0xe6>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e00a      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e008      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e006      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e004      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;   
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <DMA_CheckFifoParam+0xe8>
      break;
 8007fea:	bf00      	nop
    }
  } 
  
  return status; 
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop

08007ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800800e:	2300      	movs	r3, #0
 8008010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008012:	2300      	movs	r3, #0
 8008014:	61fb      	str	r3, [r7, #28]
 8008016:	e165      	b.n	80082e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008018:	2201      	movs	r2, #1
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4013      	ands	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	429a      	cmp	r2, r3
 8008032:	f040 8154 	bne.w	80082de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b01      	cmp	r3, #1
 8008040:	d005      	beq.n	800804e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800804a:	2b02      	cmp	r3, #2
 800804c:	d130      	bne.n	80080b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2203      	movs	r2, #3
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4313      	orrs	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008084:	2201      	movs	r2, #1
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	f003 0201 	and.w	r2, r3, #1
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d017      	beq.n	80080ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	2203      	movs	r2, #3
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	43db      	mvns	r3, r3
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	4013      	ands	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f003 0303 	and.w	r3, r3, #3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d123      	bne.n	8008140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	08da      	lsrs	r2, r3, #3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3208      	adds	r2, #8
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	f003 0307 	and.w	r3, r3, #7
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	220f      	movs	r2, #15
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	43db      	mvns	r3, r3
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	4013      	ands	r3, r2
 800811a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4313      	orrs	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	08da      	lsrs	r2, r3, #3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3208      	adds	r2, #8
 800813a:	69b9      	ldr	r1, [r7, #24]
 800813c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	2203      	movs	r2, #3
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	43db      	mvns	r3, r3
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	4013      	ands	r3, r2
 8008156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f003 0203 	and.w	r2, r3, #3
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	4313      	orrs	r3, r2
 800816c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80ae 	beq.w	80082de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	4b5d      	ldr	r3, [pc, #372]	; (80082fc <HAL_GPIO_Init+0x300>)
 8008188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818a:	4a5c      	ldr	r2, [pc, #368]	; (80082fc <HAL_GPIO_Init+0x300>)
 800818c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008190:	6453      	str	r3, [r2, #68]	; 0x44
 8008192:	4b5a      	ldr	r3, [pc, #360]	; (80082fc <HAL_GPIO_Init+0x300>)
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800819e:	4a58      	ldr	r2, [pc, #352]	; (8008300 <HAL_GPIO_Init+0x304>)
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	089b      	lsrs	r3, r3, #2
 80081a4:	3302      	adds	r3, #2
 80081a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	220f      	movs	r2, #15
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43db      	mvns	r3, r3
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	4013      	ands	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a4f      	ldr	r2, [pc, #316]	; (8008304 <HAL_GPIO_Init+0x308>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d025      	beq.n	8008216 <HAL_GPIO_Init+0x21a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a4e      	ldr	r2, [pc, #312]	; (8008308 <HAL_GPIO_Init+0x30c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01f      	beq.n	8008212 <HAL_GPIO_Init+0x216>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a4d      	ldr	r2, [pc, #308]	; (800830c <HAL_GPIO_Init+0x310>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d019      	beq.n	800820e <HAL_GPIO_Init+0x212>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a4c      	ldr	r2, [pc, #304]	; (8008310 <HAL_GPIO_Init+0x314>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d013      	beq.n	800820a <HAL_GPIO_Init+0x20e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a4b      	ldr	r2, [pc, #300]	; (8008314 <HAL_GPIO_Init+0x318>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00d      	beq.n	8008206 <HAL_GPIO_Init+0x20a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a4a      	ldr	r2, [pc, #296]	; (8008318 <HAL_GPIO_Init+0x31c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d007      	beq.n	8008202 <HAL_GPIO_Init+0x206>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a49      	ldr	r2, [pc, #292]	; (800831c <HAL_GPIO_Init+0x320>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d101      	bne.n	80081fe <HAL_GPIO_Init+0x202>
 80081fa:	2306      	movs	r3, #6
 80081fc:	e00c      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 80081fe:	2307      	movs	r3, #7
 8008200:	e00a      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 8008202:	2305      	movs	r3, #5
 8008204:	e008      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 8008206:	2304      	movs	r3, #4
 8008208:	e006      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 800820a:	2303      	movs	r3, #3
 800820c:	e004      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 800820e:	2302      	movs	r3, #2
 8008210:	e002      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 8008212:	2301      	movs	r3, #1
 8008214:	e000      	b.n	8008218 <HAL_GPIO_Init+0x21c>
 8008216:	2300      	movs	r3, #0
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	f002 0203 	and.w	r2, r2, #3
 800821e:	0092      	lsls	r2, r2, #2
 8008220:	4093      	lsls	r3, r2
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	4313      	orrs	r3, r2
 8008226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008228:	4935      	ldr	r1, [pc, #212]	; (8008300 <HAL_GPIO_Init+0x304>)
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	089b      	lsrs	r3, r3, #2
 800822e:	3302      	adds	r3, #2
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008236:	4b3a      	ldr	r3, [pc, #232]	; (8008320 <HAL_GPIO_Init+0x324>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	43db      	mvns	r3, r3
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	4013      	ands	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800825a:	4a31      	ldr	r2, [pc, #196]	; (8008320 <HAL_GPIO_Init+0x324>)
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008260:	4b2f      	ldr	r3, [pc, #188]	; (8008320 <HAL_GPIO_Init+0x324>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	43db      	mvns	r3, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4013      	ands	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008284:	4a26      	ldr	r2, [pc, #152]	; (8008320 <HAL_GPIO_Init+0x324>)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800828a:	4b25      	ldr	r3, [pc, #148]	; (8008320 <HAL_GPIO_Init+0x324>)
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	43db      	mvns	r3, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4013      	ands	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80082ae:	4a1c      	ldr	r2, [pc, #112]	; (8008320 <HAL_GPIO_Init+0x324>)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082b4:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <HAL_GPIO_Init+0x324>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	43db      	mvns	r3, r3
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	4013      	ands	r3, r2
 80082c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082d8:	4a11      	ldr	r2, [pc, #68]	; (8008320 <HAL_GPIO_Init+0x324>)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	3301      	adds	r3, #1
 80082e2:	61fb      	str	r3, [r7, #28]
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	f67f ae96 	bls.w	8008018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	3724      	adds	r7, #36	; 0x24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40023800 	.word	0x40023800
 8008300:	40013800 	.word	0x40013800
 8008304:	40020000 	.word	0x40020000
 8008308:	40020400 	.word	0x40020400
 800830c:	40020800 	.word	0x40020800
 8008310:	40020c00 	.word	0x40020c00
 8008314:	40021000 	.word	0x40021000
 8008318:	40021400 	.word	0x40021400
 800831c:	40021800 	.word	0x40021800
 8008320:	40013c00 	.word	0x40013c00

08008324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	887b      	ldrh	r3, [r7, #2]
 8008336:	4013      	ands	r3, r2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
 8008340:	e001      	b.n	8008346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	807b      	strh	r3, [r7, #2]
 8008360:	4613      	mov	r3, r2
 8008362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008364:	787b      	ldrb	r3, [r7, #1]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800836a:	887a      	ldrh	r2, [r7, #2]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008370:	e003      	b.n	800837a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008372:	887b      	ldrh	r3, [r7, #2]
 8008374:	041a      	lsls	r2, r3, #16
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	619a      	str	r2, [r3, #24]
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008386:	b480      	push	{r7}
 8008388:	b085      	sub	sp, #20
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008398:	887a      	ldrh	r2, [r7, #2]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4013      	ands	r3, r2
 800839e:	041a      	lsls	r2, r3, #16
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	43d9      	mvns	r1, r3
 80083a4:	887b      	ldrh	r3, [r7, #2]
 80083a6:	400b      	ands	r3, r1
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	619a      	str	r2, [r3, #24]
}
 80083ae:	bf00      	nop
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80083c6:	4b08      	ldr	r3, [pc, #32]	; (80083e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083c8:	695a      	ldr	r2, [r3, #20]
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d006      	beq.n	80083e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083d2:	4a05      	ldr	r2, [pc, #20]	; (80083e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083d8:	88fb      	ldrh	r3, [r7, #6]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fb fd18 	bl	8003e10 <HAL_GPIO_EXTI_Callback>
  }
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40013c00 	.word	0x40013c00

080083ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80083f6:	2300      	movs	r3, #0
 80083f8:	603b      	str	r3, [r7, #0]
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <HAL_PWREx_EnableOverDrive+0x90>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	4a1f      	ldr	r2, [pc, #124]	; (800847c <HAL_PWREx_EnableOverDrive+0x90>)
 8008400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008404:	6413      	str	r3, [r2, #64]	; 0x40
 8008406:	4b1d      	ldr	r3, [pc, #116]	; (800847c <HAL_PWREx_EnableOverDrive+0x90>)
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008412:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <HAL_PWREx_EnableOverDrive+0x94>)
 8008414:	2201      	movs	r2, #1
 8008416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008418:	f7fe fca8 	bl	8006d6c <HAL_GetTick>
 800841c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800841e:	e009      	b.n	8008434 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008420:	f7fe fca4 	bl	8006d6c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800842e:	d901      	bls.n	8008434 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e01f      	b.n	8008474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008434:	4b13      	ldr	r3, [pc, #76]	; (8008484 <HAL_PWREx_EnableOverDrive+0x98>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800843c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008440:	d1ee      	bne.n	8008420 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008444:	2201      	movs	r2, #1
 8008446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008448:	f7fe fc90 	bl	8006d6c <HAL_GetTick>
 800844c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800844e:	e009      	b.n	8008464 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008450:	f7fe fc8c 	bl	8006d6c <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800845e:	d901      	bls.n	8008464 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	e007      	b.n	8008474 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008464:	4b07      	ldr	r3, [pc, #28]	; (8008484 <HAL_PWREx_EnableOverDrive+0x98>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008470:	d1ee      	bne.n	8008450 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40023800 	.word	0x40023800
 8008480:	420e0040 	.word	0x420e0040
 8008484:	40007000 	.word	0x40007000
 8008488:	420e0044 	.word	0x420e0044

0800848c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e0cc      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084a0:	4b68      	ldr	r3, [pc, #416]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 030f 	and.w	r3, r3, #15
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d90c      	bls.n	80084c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ae:	4b65      	ldr	r3, [pc, #404]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b6:	4b63      	ldr	r3, [pc, #396]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e0b8      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d020      	beq.n	8008516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084e0:	4b59      	ldr	r3, [pc, #356]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	4a58      	ldr	r2, [pc, #352]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084f8:	4b53      	ldr	r3, [pc, #332]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	4a52      	ldr	r2, [pc, #328]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80084fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008504:	4b50      	ldr	r3, [pc, #320]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	494d      	ldr	r1, [pc, #308]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 8008512:	4313      	orrs	r3, r2
 8008514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d044      	beq.n	80085ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d107      	bne.n	800853a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800852a:	4b47      	ldr	r3, [pc, #284]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d119      	bne.n	800856a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e07f      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d003      	beq.n	800854a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008546:	2b03      	cmp	r3, #3
 8008548:	d107      	bne.n	800855a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800854a:	4b3f      	ldr	r3, [pc, #252]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e06f      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855a:	4b3b      	ldr	r3, [pc, #236]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e067      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800856a:	4b37      	ldr	r3, [pc, #220]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f023 0203 	bic.w	r2, r3, #3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4934      	ldr	r1, [pc, #208]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 8008578:	4313      	orrs	r3, r2
 800857a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800857c:	f7fe fbf6 	bl	8006d6c <HAL_GetTick>
 8008580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008582:	e00a      	b.n	800859a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008584:	f7fe fbf2 	bl	8006d6c <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008592:	4293      	cmp	r3, r2
 8008594:	d901      	bls.n	800859a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e04f      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859a:	4b2b      	ldr	r3, [pc, #172]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 020c 	and.w	r2, r3, #12
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d1eb      	bne.n	8008584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085ac:	4b25      	ldr	r3, [pc, #148]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d20c      	bcs.n	80085d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ba:	4b22      	ldr	r3, [pc, #136]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c2:	4b20      	ldr	r3, [pc, #128]	; (8008644 <HAL_RCC_ClockConfig+0x1b8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d001      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e032      	b.n	800863a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085e0:	4b19      	ldr	r3, [pc, #100]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4916      	ldr	r1, [pc, #88]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	490e      	ldr	r1, [pc, #56]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800860e:	4313      	orrs	r3, r2
 8008610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008612:	f000 f855 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008616:	4602      	mov	r2, r0
 8008618:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <HAL_RCC_ClockConfig+0x1bc>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	091b      	lsrs	r3, r3, #4
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	490a      	ldr	r1, [pc, #40]	; (800864c <HAL_RCC_ClockConfig+0x1c0>)
 8008624:	5ccb      	ldrb	r3, [r1, r3]
 8008626:	fa22 f303 	lsr.w	r3, r2, r3
 800862a:	4a09      	ldr	r2, [pc, #36]	; (8008650 <HAL_RCC_ClockConfig+0x1c4>)
 800862c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <HAL_RCC_ClockConfig+0x1c8>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fb56 	bl	8006ce4 <HAL_InitTick>

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40023c00 	.word	0x40023c00
 8008648:	40023800 	.word	0x40023800
 800864c:	08013b20 	.word	0x08013b20
 8008650:	20000030 	.word	0x20000030
 8008654:	2000003c 	.word	0x2000003c

08008658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800865c:	4b03      	ldr	r3, [pc, #12]	; (800866c <HAL_RCC_GetHCLKFreq+0x14>)
 800865e:	681b      	ldr	r3, [r3, #0]
}
 8008660:	4618      	mov	r0, r3
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000030 	.word	0x20000030

08008670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008674:	f7ff fff0 	bl	8008658 <HAL_RCC_GetHCLKFreq>
 8008678:	4602      	mov	r2, r0
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	0a9b      	lsrs	r3, r3, #10
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	4903      	ldr	r1, [pc, #12]	; (8008694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008686:	5ccb      	ldrb	r3, [r1, r3]
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40023800 	.word	0x40023800
 8008694:	08013b30 	.word	0x08013b30

08008698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800869c:	f7ff ffdc 	bl	8008658 <HAL_RCC_GetHCLKFreq>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	0b5b      	lsrs	r3, r3, #13
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	4903      	ldr	r1, [pc, #12]	; (80086bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80086ae:	5ccb      	ldrb	r3, [r1, r3]
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40023800 	.word	0x40023800
 80086bc:	08013b30 	.word	0x08013b30

080086c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c4:	b0ae      	sub	sp, #184	; 0xb8
 80086c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e6:	4bcb      	ldr	r3, [pc, #812]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b0c      	cmp	r3, #12
 80086f0:	f200 8206 	bhi.w	8008b00 <HAL_RCC_GetSysClockFreq+0x440>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008731 	.word	0x08008731
 8008700:	08008b01 	.word	0x08008b01
 8008704:	08008b01 	.word	0x08008b01
 8008708:	08008b01 	.word	0x08008b01
 800870c:	08008739 	.word	0x08008739
 8008710:	08008b01 	.word	0x08008b01
 8008714:	08008b01 	.word	0x08008b01
 8008718:	08008b01 	.word	0x08008b01
 800871c:	08008741 	.word	0x08008741
 8008720:	08008b01 	.word	0x08008b01
 8008724:	08008b01 	.word	0x08008b01
 8008728:	08008b01 	.word	0x08008b01
 800872c:	08008931 	.word	0x08008931
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008730:	4bb9      	ldr	r3, [pc, #740]	; (8008a18 <HAL_RCC_GetSysClockFreq+0x358>)
 8008732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008736:	e1e7      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008738:	4bb8      	ldr	r3, [pc, #736]	; (8008a1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800873a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800873e:	e1e3      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008740:	4bb4      	ldr	r3, [pc, #720]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800874c:	4bb1      	ldr	r3, [pc, #708]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d071      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008758:	4bae      	ldr	r3, [pc, #696]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	099b      	lsrs	r3, r3, #6
 800875e:	2200      	movs	r2, #0
 8008760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008764:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800876c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008774:	2300      	movs	r3, #0
 8008776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800877a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800877e:	4622      	mov	r2, r4
 8008780:	462b      	mov	r3, r5
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f04f 0100 	mov.w	r1, #0
 800878a:	0159      	lsls	r1, r3, #5
 800878c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008790:	0150      	lsls	r0, r2, #5
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4621      	mov	r1, r4
 8008798:	1a51      	subs	r1, r2, r1
 800879a:	6439      	str	r1, [r7, #64]	; 0x40
 800879c:	4629      	mov	r1, r5
 800879e:	eb63 0301 	sbc.w	r3, r3, r1
 80087a2:	647b      	str	r3, [r7, #68]	; 0x44
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80087b0:	4649      	mov	r1, r9
 80087b2:	018b      	lsls	r3, r1, #6
 80087b4:	4641      	mov	r1, r8
 80087b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087ba:	4641      	mov	r1, r8
 80087bc:	018a      	lsls	r2, r1, #6
 80087be:	4641      	mov	r1, r8
 80087c0:	1a51      	subs	r1, r2, r1
 80087c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80087c4:	4649      	mov	r1, r9
 80087c6:	eb63 0301 	sbc.w	r3, r3, r1
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087cc:	f04f 0200 	mov.w	r2, #0
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80087d8:	4649      	mov	r1, r9
 80087da:	00cb      	lsls	r3, r1, #3
 80087dc:	4641      	mov	r1, r8
 80087de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087e2:	4641      	mov	r1, r8
 80087e4:	00ca      	lsls	r2, r1, #3
 80087e6:	4610      	mov	r0, r2
 80087e8:	4619      	mov	r1, r3
 80087ea:	4603      	mov	r3, r0
 80087ec:	4622      	mov	r2, r4
 80087ee:	189b      	adds	r3, r3, r2
 80087f0:	633b      	str	r3, [r7, #48]	; 0x30
 80087f2:	462b      	mov	r3, r5
 80087f4:	460a      	mov	r2, r1
 80087f6:	eb42 0303 	adc.w	r3, r2, r3
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008808:	4629      	mov	r1, r5
 800880a:	024b      	lsls	r3, r1, #9
 800880c:	4621      	mov	r1, r4
 800880e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008812:	4621      	mov	r1, r4
 8008814:	024a      	lsls	r2, r1, #9
 8008816:	4610      	mov	r0, r2
 8008818:	4619      	mov	r1, r3
 800881a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800881e:	2200      	movs	r2, #0
 8008820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008828:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800882c:	f7f8 fa7c 	bl	8000d28 <__aeabi_uldivmod>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4613      	mov	r3, r2
 8008836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800883a:	e067      	b.n	800890c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800883c:	4b75      	ldr	r3, [pc, #468]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	099b      	lsrs	r3, r3, #6
 8008842:	2200      	movs	r2, #0
 8008844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008848:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800884c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008854:	67bb      	str	r3, [r7, #120]	; 0x78
 8008856:	2300      	movs	r3, #0
 8008858:	67fb      	str	r3, [r7, #124]	; 0x7c
 800885a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800885e:	4622      	mov	r2, r4
 8008860:	462b      	mov	r3, r5
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f04f 0100 	mov.w	r1, #0
 800886a:	0159      	lsls	r1, r3, #5
 800886c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008870:	0150      	lsls	r0, r2, #5
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4621      	mov	r1, r4
 8008878:	1a51      	subs	r1, r2, r1
 800887a:	62b9      	str	r1, [r7, #40]	; 0x28
 800887c:	4629      	mov	r1, r5
 800887e:	eb63 0301 	sbc.w	r3, r3, r1
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008890:	4649      	mov	r1, r9
 8008892:	018b      	lsls	r3, r1, #6
 8008894:	4641      	mov	r1, r8
 8008896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800889a:	4641      	mov	r1, r8
 800889c:	018a      	lsls	r2, r1, #6
 800889e:	4641      	mov	r1, r8
 80088a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80088a4:	4649      	mov	r1, r9
 80088a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088be:	4692      	mov	sl, r2
 80088c0:	469b      	mov	fp, r3
 80088c2:	4623      	mov	r3, r4
 80088c4:	eb1a 0303 	adds.w	r3, sl, r3
 80088c8:	623b      	str	r3, [r7, #32]
 80088ca:	462b      	mov	r3, r5
 80088cc:	eb4b 0303 	adc.w	r3, fp, r3
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
 80088d2:	f04f 0200 	mov.w	r2, #0
 80088d6:	f04f 0300 	mov.w	r3, #0
 80088da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80088de:	4629      	mov	r1, r5
 80088e0:	028b      	lsls	r3, r1, #10
 80088e2:	4621      	mov	r1, r4
 80088e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088e8:	4621      	mov	r1, r4
 80088ea:	028a      	lsls	r2, r1, #10
 80088ec:	4610      	mov	r0, r2
 80088ee:	4619      	mov	r1, r3
 80088f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f4:	2200      	movs	r2, #0
 80088f6:	673b      	str	r3, [r7, #112]	; 0x70
 80088f8:	677a      	str	r2, [r7, #116]	; 0x74
 80088fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80088fe:	f7f8 fa13 	bl	8000d28 <__aeabi_uldivmod>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4613      	mov	r3, r2
 8008908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800890c:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	0c1b      	lsrs	r3, r3, #16
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	3301      	adds	r3, #1
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800891e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008926:	fbb2 f3f3 	udiv	r3, r2, r3
 800892a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800892e:	e0eb      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008930:	4b38      	ldr	r3, [pc, #224]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800893c:	4b35      	ldr	r3, [pc, #212]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d06b      	beq.n	8008a20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008948:	4b32      	ldr	r3, [pc, #200]	; (8008a14 <HAL_RCC_GetSysClockFreq+0x354>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	099b      	lsrs	r3, r3, #6
 800894e:	2200      	movs	r2, #0
 8008950:	66bb      	str	r3, [r7, #104]	; 0x68
 8008952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	663b      	str	r3, [r7, #96]	; 0x60
 800895c:	2300      	movs	r3, #0
 800895e:	667b      	str	r3, [r7, #100]	; 0x64
 8008960:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	f04f 0000 	mov.w	r0, #0
 800896c:	f04f 0100 	mov.w	r1, #0
 8008970:	0159      	lsls	r1, r3, #5
 8008972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008976:	0150      	lsls	r0, r2, #5
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4621      	mov	r1, r4
 800897e:	1a51      	subs	r1, r2, r1
 8008980:	61b9      	str	r1, [r7, #24]
 8008982:	4629      	mov	r1, r5
 8008984:	eb63 0301 	sbc.w	r3, r3, r1
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008996:	4659      	mov	r1, fp
 8008998:	018b      	lsls	r3, r1, #6
 800899a:	4651      	mov	r1, sl
 800899c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80089a0:	4651      	mov	r1, sl
 80089a2:	018a      	lsls	r2, r1, #6
 80089a4:	4651      	mov	r1, sl
 80089a6:	ebb2 0801 	subs.w	r8, r2, r1
 80089aa:	4659      	mov	r1, fp
 80089ac:	eb63 0901 	sbc.w	r9, r3, r1
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089c4:	4690      	mov	r8, r2
 80089c6:	4699      	mov	r9, r3
 80089c8:	4623      	mov	r3, r4
 80089ca:	eb18 0303 	adds.w	r3, r8, r3
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	462b      	mov	r3, r5
 80089d2:	eb49 0303 	adc.w	r3, r9, r3
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80089e4:	4629      	mov	r1, r5
 80089e6:	024b      	lsls	r3, r1, #9
 80089e8:	4621      	mov	r1, r4
 80089ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089ee:	4621      	mov	r1, r4
 80089f0:	024a      	lsls	r2, r1, #9
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089fa:	2200      	movs	r2, #0
 80089fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80089fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a04:	f7f8 f990 	bl	8000d28 <__aeabi_uldivmod>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a12:	e065      	b.n	8008ae0 <HAL_RCC_GetSysClockFreq+0x420>
 8008a14:	40023800 	.word	0x40023800
 8008a18:	00f42400 	.word	0x00f42400
 8008a1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a20:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	099b      	lsrs	r3, r3, #6
 8008a26:	2200      	movs	r2, #0
 8008a28:	4618      	mov	r0, r3
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008a30:	653b      	str	r3, [r7, #80]	; 0x50
 8008a32:	2300      	movs	r3, #0
 8008a34:	657b      	str	r3, [r7, #84]	; 0x54
 8008a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008a3a:	4642      	mov	r2, r8
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	f04f 0000 	mov.w	r0, #0
 8008a42:	f04f 0100 	mov.w	r1, #0
 8008a46:	0159      	lsls	r1, r3, #5
 8008a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a4c:	0150      	lsls	r0, r2, #5
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4641      	mov	r1, r8
 8008a54:	1a51      	subs	r1, r2, r1
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	4649      	mov	r1, r9
 8008a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	018b      	lsls	r3, r1, #6
 8008a70:	4651      	mov	r1, sl
 8008a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a76:	4651      	mov	r1, sl
 8008a78:	018a      	lsls	r2, r1, #6
 8008a7a:	4651      	mov	r1, sl
 8008a7c:	1a54      	subs	r4, r2, r1
 8008a7e:	4659      	mov	r1, fp
 8008a80:	eb63 0501 	sbc.w	r5, r3, r1
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	00eb      	lsls	r3, r5, #3
 8008a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a92:	00e2      	lsls	r2, r4, #3
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	4643      	mov	r3, r8
 8008a9a:	18e3      	adds	r3, r4, r3
 8008a9c:	603b      	str	r3, [r7, #0]
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	eb45 0303 	adc.w	r3, r5, r3
 8008aa4:	607b      	str	r3, [r7, #4]
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	028b      	lsls	r3, r1, #10
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008abc:	4621      	mov	r1, r4
 8008abe:	028a      	lsls	r2, r1, #10
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ac8:	2200      	movs	r2, #0
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008acc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ace:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ad2:	f7f8 f929 	bl	8000d28 <__aeabi_uldivmod>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4613      	mov	r3, r2
 8008adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <HAL_RCC_GetSysClockFreq+0x458>)
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	0f1b      	lsrs	r3, r3, #28
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008afe:	e003      	b.n	8008b08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8008b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	37b8      	adds	r7, #184	; 0xb8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b16:	bf00      	nop
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	00f42400 	.word	0x00f42400

08008b20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e28d      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 8083 	beq.w	8008c46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b40:	4b94      	ldr	r3, [pc, #592]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f003 030c 	and.w	r3, r3, #12
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d019      	beq.n	8008b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b4c:	4b91      	ldr	r3, [pc, #580]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d106      	bne.n	8008b66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b58:	4b8e      	ldr	r3, [pc, #568]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b64:	d00c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b66:	4b8b      	ldr	r3, [pc, #556]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b6e:	2b0c      	cmp	r3, #12
 8008b70:	d112      	bne.n	8008b98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b72:	4b88      	ldr	r3, [pc, #544]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b7e:	d10b      	bne.n	8008b98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b80:	4b84      	ldr	r3, [pc, #528]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d05b      	beq.n	8008c44 <HAL_RCC_OscConfig+0x124>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d157      	bne.n	8008c44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e25a      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba0:	d106      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x90>
 8008ba2:	4b7c      	ldr	r3, [pc, #496]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a7b      	ldr	r2, [pc, #492]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e01d      	b.n	8008bec <HAL_RCC_OscConfig+0xcc>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_RCC_OscConfig+0xb4>
 8008bba:	4b76      	ldr	r3, [pc, #472]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a75      	ldr	r2, [pc, #468]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	4b73      	ldr	r3, [pc, #460]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a72      	ldr	r2, [pc, #456]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e00b      	b.n	8008bec <HAL_RCC_OscConfig+0xcc>
 8008bd4:	4b6f      	ldr	r3, [pc, #444]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a6e      	ldr	r2, [pc, #440]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	4b6c      	ldr	r3, [pc, #432]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a6b      	ldr	r2, [pc, #428]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d013      	beq.n	8008c1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf4:	f7fe f8ba 	bl	8006d6c <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fe f8b6 	bl	8006d6c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	; 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e21f      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c0e:	4b61      	ldr	r3, [pc, #388]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0xdc>
 8008c1a:	e014      	b.n	8008c46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1c:	f7fe f8a6 	bl	8006d6c <HAL_GetTick>
 8008c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c22:	e008      	b.n	8008c36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c24:	f7fe f8a2 	bl	8006d6c <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b64      	cmp	r3, #100	; 0x64
 8008c30:	d901      	bls.n	8008c36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e20b      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c36:	4b57      	ldr	r3, [pc, #348]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1f0      	bne.n	8008c24 <HAL_RCC_OscConfig+0x104>
 8008c42:	e000      	b.n	8008c46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d06f      	beq.n	8008d32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c52:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d017      	beq.n	8008c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c5e:	4b4d      	ldr	r3, [pc, #308]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c66:	2b08      	cmp	r3, #8
 8008c68:	d105      	bne.n	8008c76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c6a:	4b4a      	ldr	r3, [pc, #296]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c76:	4b47      	ldr	r3, [pc, #284]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c7e:	2b0c      	cmp	r3, #12
 8008c80:	d11c      	bne.n	8008cbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c82:	4b44      	ldr	r3, [pc, #272]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d116      	bne.n	8008cbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c8e:	4b41      	ldr	r3, [pc, #260]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x186>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e1d3      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca6:	4b3b      	ldr	r3, [pc, #236]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4937      	ldr	r1, [pc, #220]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cba:	e03a      	b.n	8008d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d020      	beq.n	8008d06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cc4:	4b34      	ldr	r3, [pc, #208]	; (8008d98 <HAL_RCC_OscConfig+0x278>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cca:	f7fe f84f 	bl	8006d6c <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd2:	f7fe f84b 	bl	8006d6c <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e1b4      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf0:	4b28      	ldr	r3, [pc, #160]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	4925      	ldr	r1, [pc, #148]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	600b      	str	r3, [r1, #0]
 8008d04:	e015      	b.n	8008d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <HAL_RCC_OscConfig+0x278>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d0c:	f7fe f82e 	bl	8006d6c <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d14:	f7fe f82a 	bl	8006d6c <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e193      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d26:	4b1b      	ldr	r3, [pc, #108]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f0      	bne.n	8008d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d036      	beq.n	8008dac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d016      	beq.n	8008d74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d46:	4b15      	ldr	r3, [pc, #84]	; (8008d9c <HAL_RCC_OscConfig+0x27c>)
 8008d48:	2201      	movs	r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4c:	f7fe f80e 	bl	8006d6c <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d54:	f7fe f80a 	bl	8006d6c <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e173      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d66:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <HAL_RCC_OscConfig+0x274>)
 8008d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0f0      	beq.n	8008d54 <HAL_RCC_OscConfig+0x234>
 8008d72:	e01b      	b.n	8008dac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d74:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <HAL_RCC_OscConfig+0x27c>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d7a:	f7fd fff7 	bl	8006d6c <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d80:	e00e      	b.n	8008da0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d82:	f7fd fff3 	bl	8006d6c <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d907      	bls.n	8008da0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e15c      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
 8008d94:	40023800 	.word	0x40023800
 8008d98:	42470000 	.word	0x42470000
 8008d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da0:	4b8a      	ldr	r3, [pc, #552]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ea      	bne.n	8008d82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8097 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dbe:	4b83      	ldr	r3, [pc, #524]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10f      	bne.n	8008dea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	4b7f      	ldr	r3, [pc, #508]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	4a7e      	ldr	r2, [pc, #504]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8008dda:	4b7c      	ldr	r3, [pc, #496]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de2:	60bb      	str	r3, [r7, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008de6:	2301      	movs	r3, #1
 8008de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dea:	4b79      	ldr	r3, [pc, #484]	; (8008fd0 <HAL_RCC_OscConfig+0x4b0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d118      	bne.n	8008e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008df6:	4b76      	ldr	r3, [pc, #472]	; (8008fd0 <HAL_RCC_OscConfig+0x4b0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a75      	ldr	r2, [pc, #468]	; (8008fd0 <HAL_RCC_OscConfig+0x4b0>)
 8008dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e02:	f7fd ffb3 	bl	8006d6c <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e0a:	f7fd ffaf 	bl	8006d6c <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e118      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1c:	4b6c      	ldr	r3, [pc, #432]	; (8008fd0 <HAL_RCC_OscConfig+0x4b0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0f0      	beq.n	8008e0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCC_OscConfig+0x31e>
 8008e30:	4b66      	ldr	r3, [pc, #408]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e34:	4a65      	ldr	r2, [pc, #404]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3c:	e01c      	b.n	8008e78 <HAL_RCC_OscConfig+0x358>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b05      	cmp	r3, #5
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCC_OscConfig+0x340>
 8008e46:	4b61      	ldr	r3, [pc, #388]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4a:	4a60      	ldr	r2, [pc, #384]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e4c:	f043 0304 	orr.w	r3, r3, #4
 8008e50:	6713      	str	r3, [r2, #112]	; 0x70
 8008e52:	4b5e      	ldr	r3, [pc, #376]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e56:	4a5d      	ldr	r2, [pc, #372]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e58:	f043 0301 	orr.w	r3, r3, #1
 8008e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5e:	e00b      	b.n	8008e78 <HAL_RCC_OscConfig+0x358>
 8008e60:	4b5a      	ldr	r3, [pc, #360]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e64:	4a59      	ldr	r2, [pc, #356]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008e6c:	4b57      	ldr	r3, [pc, #348]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e70:	4a56      	ldr	r2, [pc, #344]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008e72:	f023 0304 	bic.w	r3, r3, #4
 8008e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d015      	beq.n	8008eac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e80:	f7fd ff74 	bl	8006d6c <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e86:	e00a      	b.n	8008e9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e88:	f7fd ff70 	bl	8006d6c <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e0d7      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9e:	4b4b      	ldr	r3, [pc, #300]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ee      	beq.n	8008e88 <HAL_RCC_OscConfig+0x368>
 8008eaa:	e014      	b.n	8008ed6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eac:	f7fd ff5e 	bl	8006d6c <HAL_GetTick>
 8008eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eb2:	e00a      	b.n	8008eca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eb4:	f7fd ff5a 	bl	8006d6c <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e0c1      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1ee      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008edc:	4b3b      	ldr	r3, [pc, #236]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	4a3a      	ldr	r2, [pc, #232]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 80ad 	beq.w	800904c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ef2:	4b36      	ldr	r3, [pc, #216]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d060      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d145      	bne.n	8008f92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f06:	4b33      	ldr	r3, [pc, #204]	; (8008fd4 <HAL_RCC_OscConfig+0x4b4>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fd ff2e 	bl	8006d6c <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f14:	f7fd ff2a 	bl	8006d6c <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e093      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f26:	4b29      	ldr	r3, [pc, #164]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f0      	bne.n	8008f14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	019b      	lsls	r3, r3, #6
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	041b      	lsls	r3, r3, #16
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	071b      	lsls	r3, r3, #28
 8008f5e:	491b      	ldr	r1, [pc, #108]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <HAL_RCC_OscConfig+0x4b4>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6a:	f7fd feff 	bl	8006d6c <HAL_GetTick>
 8008f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f70:	e008      	b.n	8008f84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f72:	f7fd fefb 	bl	8006d6c <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e064      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d0f0      	beq.n	8008f72 <HAL_RCC_OscConfig+0x452>
 8008f90:	e05c      	b.n	800904c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f92:	4b10      	ldr	r3, [pc, #64]	; (8008fd4 <HAL_RCC_OscConfig+0x4b4>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fd fee8 	bl	8006d6c <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa0:	f7fd fee4 	bl	8006d6c <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e04d      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb2:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <HAL_RCC_OscConfig+0x4ac>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x480>
 8008fbe:	e045      	b.n	800904c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d107      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e040      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
 8008fcc:	40023800 	.word	0x40023800
 8008fd0:	40007000 	.word	0x40007000
 8008fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fd8:	4b1f      	ldr	r3, [pc, #124]	; (8009058 <HAL_RCC_OscConfig+0x538>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d030      	beq.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d129      	bne.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d122      	bne.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009008:	4013      	ands	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800900e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009010:	4293      	cmp	r3, r2
 8009012:	d119      	bne.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	3b01      	subs	r3, #1
 8009022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009024:	429a      	cmp	r2, r3
 8009026:	d10f      	bne.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009034:	429a      	cmp	r2, r3
 8009036:	d107      	bne.n	8009048 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e000      	b.n	800904e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40023800 	.word	0x40023800

0800905c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e07b      	b.n	8009166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d108      	bne.n	8009088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800907e:	d009      	beq.n	8009094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	61da      	str	r2, [r3, #28]
 8009086:	e005      	b.n	8009094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fb f8ee 	bl	8004290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800910e:	431a      	orrs	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009118:	ea42 0103 	orr.w	r1, r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	0c1b      	lsrs	r3, r3, #16
 8009132:	f003 0104 	and.w	r1, r3, #4
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	f003 0210 	and.w	r2, r3, #16
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b088      	sub	sp, #32
 8009172:	af00      	add	r7, sp, #0
 8009174:	60f8      	str	r0, [r7, #12]
 8009176:	60b9      	str	r1, [r7, #8]
 8009178:	603b      	str	r3, [r7, #0]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_SPI_Transmit+0x22>
 800918c:	2302      	movs	r3, #2
 800918e:	e126      	b.n	80093de <HAL_SPI_Transmit+0x270>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009198:	f7fd fde8 	bl	8006d6c <HAL_GetTick>
 800919c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d002      	beq.n	80091b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091ae:	2302      	movs	r3, #2
 80091b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091b2:	e10b      	b.n	80093cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <HAL_SPI_Transmit+0x52>
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d102      	bne.n	80091c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091c4:	e102      	b.n	80093cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2203      	movs	r2, #3
 80091ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	88fa      	ldrh	r2, [r7, #6]
 80091de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920c:	d10f      	bne.n	800922e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800922c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b40      	cmp	r3, #64	; 0x40
 800923a:	d007      	beq.n	800924c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009254:	d14b      	bne.n	80092ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <HAL_SPI_Transmit+0xf6>
 800925e:	8afb      	ldrh	r3, [r7, #22]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d13e      	bne.n	80092e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	1c9a      	adds	r2, r3, #2
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009288:	e02b      	b.n	80092e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b02      	cmp	r3, #2
 8009296:	d112      	bne.n	80092be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80092bc:	e011      	b.n	80092e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092be:	f7fd fd55 	bl	8006d6c <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d803      	bhi.n	80092d6 <HAL_SPI_Transmit+0x168>
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092d4:	d102      	bne.n	80092dc <HAL_SPI_Transmit+0x16e>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80092e0:	e074      	b.n	80093cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1ce      	bne.n	800928a <HAL_SPI_Transmit+0x11c>
 80092ec:	e04c      	b.n	8009388 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <HAL_SPI_Transmit+0x18e>
 80092f6:	8afb      	ldrh	r3, [r7, #22]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d140      	bne.n	800937e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	7812      	ldrb	r2, [r2, #0]
 8009308:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009322:	e02c      	b.n	800937e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b02      	cmp	r3, #2
 8009330:	d113      	bne.n	800935a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	86da      	strh	r2, [r3, #54]	; 0x36
 8009358:	e011      	b.n	800937e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800935a:	f7fd fd07 	bl	8006d6c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d803      	bhi.n	8009372 <HAL_SPI_Transmit+0x204>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009370:	d102      	bne.n	8009378 <HAL_SPI_Transmit+0x20a>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800937c:	e026      	b.n	80093cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1cd      	bne.n	8009324 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 fafd 	bl	800998c <SPI_EndRxTxTransaction>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093a6:	2300      	movs	r3, #0
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	613b      	str	r3, [r7, #16]
 80093ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	77fb      	strb	r3, [r7, #31]
 80093c8:	e000      	b.n	80093cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80093ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_SPI_Transmit_DMA+0x20>
 8009404:	2302      	movs	r3, #2
 8009406:	e09b      	b.n	8009540 <HAL_SPI_Transmit_DMA+0x158>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800941c:	2302      	movs	r3, #2
 800941e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009420:	e089      	b.n	8009536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_SPI_Transmit_DMA+0x46>
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009432:	e080      	b.n	8009536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2203      	movs	r2, #3
 8009438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800947a:	d10f      	bne.n	800949c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800948a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800949a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a0:	4a29      	ldr	r2, [pc, #164]	; (8009548 <HAL_SPI_Transmit_DMA+0x160>)
 80094a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a8:	4a28      	ldr	r2, [pc, #160]	; (800954c <HAL_SPI_Transmit_DMA+0x164>)
 80094aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b0:	4a27      	ldr	r2, [pc, #156]	; (8009550 <HAL_SPI_Transmit_DMA+0x168>)
 80094b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b8:	2200      	movs	r2, #0
 80094ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c4:	4619      	mov	r1, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80094d4:	f7fe fa3e 	bl	8007954 <HAL_DMA_Start_IT>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00c      	beq.n	80094f8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e2:	f043 0210 	orr.w	r2, r3, #16
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80094f6:	e01e      	b.n	8009536 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d007      	beq.n	8009516 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009514:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 0220 	orr.w	r2, r2, #32
 8009524:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0202 	orr.w	r2, r2, #2
 8009534:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	080097f9 	.word	0x080097f9
 800954c:	08009751 	.word	0x08009751
 8009550:	08009815 	.word	0x08009815

08009554 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10e      	bne.n	8009594 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
    return;
 8009592:	e0ce      	b.n	8009732 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <HAL_SPI_IRQHandler+0x5e>
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
    return;
 80095b0:	e0bf      	b.n	8009732 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <HAL_SPI_IRQHandler+0x7e>
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80b0 	beq.w	8009732 <HAL_SPI_IRQHandler+0x1de>
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 80aa 	beq.w	8009732 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d023      	beq.n	8009630 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d011      	beq.n	8009618 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f8:	f043 0204 	orr.w	r2, r3, #4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009600:	2300      	movs	r3, #0
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	e00b      	b.n	8009630 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009618:	2300      	movs	r3, #0
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	613b      	str	r3, [r7, #16]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	613b      	str	r3, [r7, #16]
 800962c:	693b      	ldr	r3, [r7, #16]
        return;
 800962e:	e080      	b.n	8009732 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d014      	beq.n	8009664 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	f043 0201 	orr.w	r2, r3, #1
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00c      	beq.n	8009688 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009672:	f043 0208 	orr.w	r2, r3, #8
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800967a:	2300      	movs	r3, #0
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	60bb      	str	r3, [r7, #8]
 8009686:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968c:	2b00      	cmp	r3, #0
 800968e:	d04f      	beq.n	8009730 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800969e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <HAL_SPI_IRQHandler+0x168>
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d034      	beq.n	8009726 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0203 	bic.w	r2, r2, #3
 80096ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d011      	beq.n	80096f8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d8:	4a17      	ldr	r2, [pc, #92]	; (8009738 <HAL_SPI_IRQHandler+0x1e4>)
 80096da:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe f9ff 	bl	8007ae4 <HAL_DMA_Abort_IT>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d016      	beq.n	800972e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009704:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <HAL_SPI_IRQHandler+0x1e4>)
 8009706:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe f9e9 	bl	8007ae4 <HAL_DMA_Abort_IT>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00a      	beq.n	800972e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009724:	e003      	b.n	800972e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7fb fc08 	bl	8004f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800972c:	e000      	b.n	8009730 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800972e:	bf00      	nop
    return;
 8009730:	bf00      	nop
  }
}
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	08009855 	.word	0x08009855

0800973c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800975e:	f7fd fb05 	bl	8006d6c <HAL_GetTick>
 8009762:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009772:	d03b      	beq.n	80097ec <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0220 	bic.w	r2, r2, #32
 8009782:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0202 	bic.w	r2, r2, #2
 8009792:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	2164      	movs	r1, #100	; 0x64
 8009798:	6978      	ldr	r0, [r7, #20]
 800979a:	f000 f8f7 	bl	800998c <SPI_EndRxTxTransaction>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a8:	f043 0220 	orr.w	r2, r3, #32
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2200      	movs	r2, #0
 80097d2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097e4:	6978      	ldr	r0, [r7, #20]
 80097e6:	f7fb fba9 	bl	8004f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097ea:	e002      	b.n	80097f2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80097ec:	6978      	ldr	r0, [r7, #20]
 80097ee:	f7fb fbbb 	bl	8004f68 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff ff98 	bl	800973c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0203 	bic.w	r2, r2, #3
 8009830:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009836:	f043 0210 	orr.w	r2, r3, #16
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7fb fb78 	bl	8004f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7fb fb64 	bl	8004f3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	4613      	mov	r3, r2
 800988a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800988c:	f7fd fa6e 	bl	8006d6c <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	4413      	add	r3, r2
 800989a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800989c:	f7fd fa66 	bl	8006d6c <HAL_GetTick>
 80098a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098a2:	4b39      	ldr	r3, [pc, #228]	; (8009988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	015b      	lsls	r3, r3, #5
 80098a8:	0d1b      	lsrs	r3, r3, #20
 80098aa:	69fa      	ldr	r2, [r7, #28]
 80098ac:	fb02 f303 	mul.w	r3, r2, r3
 80098b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b2:	e054      	b.n	800995e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ba:	d050      	beq.n	800995e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098bc:	f7fd fa56 	bl	8006d6c <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d902      	bls.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d13d      	bne.n	800994e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ea:	d111      	bne.n	8009910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f4:	d004      	beq.n	8009900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098fe:	d107      	bne.n	8009910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800990e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009918:	d10f      	bne.n	800993a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e017      	b.n	800997e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	3b01      	subs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689a      	ldr	r2, [r3, #8]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4013      	ands	r3, r2
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	429a      	cmp	r2, r3
 800996c:	bf0c      	ite	eq
 800996e:	2301      	moveq	r3, #1
 8009970:	2300      	movne	r3, #0
 8009972:	b2db      	uxtb	r3, r3
 8009974:	461a      	mov	r2, r3
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	429a      	cmp	r2, r3
 800997a:	d19b      	bne.n	80098b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000030 	.word	0x20000030

0800998c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af02      	add	r7, sp, #8
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009998:	4b1b      	ldr	r3, [pc, #108]	; (8009a08 <SPI_EndRxTxTransaction+0x7c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a1b      	ldr	r2, [pc, #108]	; (8009a0c <SPI_EndRxTxTransaction+0x80>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	0d5b      	lsrs	r3, r3, #21
 80099a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099a8:	fb02 f303 	mul.w	r3, r2, r3
 80099ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099b6:	d112      	bne.n	80099de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2200      	movs	r2, #0
 80099c0:	2180      	movs	r1, #128	; 0x80
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f7ff ff5a 	bl	800987c <SPI_WaitFlagStateUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d016      	beq.n	80099fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d2:	f043 0220 	orr.w	r2, r3, #32
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e00f      	b.n	80099fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00a      	beq.n	80099fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f4:	2b80      	cmp	r3, #128	; 0x80
 80099f6:	d0f2      	beq.n	80099de <SPI_EndRxTxTransaction+0x52>
 80099f8:	e000      	b.n	80099fc <SPI_EndRxTxTransaction+0x70>
        break;
 80099fa:	bf00      	nop
  }

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000030 	.word	0x20000030
 8009a0c:	165e9f81 	.word	0x165e9f81

08009a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d101      	bne.n	8009a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e041      	b.n	8009aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fa fccc 	bl	80043d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f000 faa0 	bl	8009f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d001      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e04e      	b.n	8009b66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0201 	orr.w	r2, r2, #1
 8009ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a23      	ldr	r2, [pc, #140]	; (8009b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d022      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af2:	d01d      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a1f      	ldr	r2, [pc, #124]	; (8009b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d018      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a1e      	ldr	r2, [pc, #120]	; (8009b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d013      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1c      	ldr	r2, [pc, #112]	; (8009b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00e      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a1b      	ldr	r2, [pc, #108]	; (8009b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d009      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a19      	ldr	r2, [pc, #100]	; (8009b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d004      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a18      	ldr	r2, [pc, #96]	; (8009b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d111      	bne.n	8009b54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d010      	beq.n	8009b64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b52:	e007      	b.n	8009b64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40010000 	.word	0x40010000
 8009b78:	40000400 	.word	0x40000400
 8009b7c:	40000800 	.word	0x40000800
 8009b80:	40000c00 	.word	0x40000c00
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40001800 	.word	0x40001800

08009b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d122      	bne.n	8009bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d11b      	bne.n	8009bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0202 	mvn.w	r2, #2
 8009bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9bf 	bl	8009f56 <HAL_TIM_IC_CaptureCallback>
 8009bd8:	e005      	b.n	8009be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f9b1 	bl	8009f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f9c2 	bl	8009f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d122      	bne.n	8009c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d11b      	bne.n	8009c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0204 	mvn.w	r2, #4
 8009c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2202      	movs	r2, #2
 8009c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f995 	bl	8009f56 <HAL_TIM_IC_CaptureCallback>
 8009c2c:	e005      	b.n	8009c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f987 	bl	8009f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f998 	bl	8009f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	f003 0308 	and.w	r3, r3, #8
 8009c4a:	2b08      	cmp	r3, #8
 8009c4c:	d122      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	f003 0308 	and.w	r3, r3, #8
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d11b      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f06f 0208 	mvn.w	r2, #8
 8009c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2204      	movs	r2, #4
 8009c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f96b 	bl	8009f56 <HAL_TIM_IC_CaptureCallback>
 8009c80:	e005      	b.n	8009c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f95d 	bl	8009f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f96e 	bl	8009f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0310 	and.w	r3, r3, #16
 8009c9e:	2b10      	cmp	r3, #16
 8009ca0:	d122      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d11b      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0210 	mvn.w	r2, #16
 8009cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d003      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f941 	bl	8009f56 <HAL_TIM_IC_CaptureCallback>
 8009cd4:	e005      	b.n	8009ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f933 	bl	8009f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f944 	bl	8009f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d10e      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d107      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0201 	mvn.w	r2, #1
 8009d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f90d 	bl	8009f2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1e:	2b80      	cmp	r3, #128	; 0x80
 8009d20:	d10e      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2c:	2b80      	cmp	r3, #128	; 0x80
 8009d2e:	d107      	bne.n	8009d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 faea 	bl	800a314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4a:	2b40      	cmp	r3, #64	; 0x40
 8009d4c:	d10e      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b40      	cmp	r3, #64	; 0x40
 8009d5a:	d107      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f909 	bl	8009f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d10e      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d107      	bne.n	8009d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f06f 0220 	mvn.w	r2, #32
 8009d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fab4 	bl	800a300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_TIM_ConfigClockSource+0x1c>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e0b4      	b.n	8009f26 <HAL_TIM_ConfigClockSource+0x186>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df4:	d03e      	beq.n	8009e74 <HAL_TIM_ConfigClockSource+0xd4>
 8009df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dfa:	f200 8087 	bhi.w	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e02:	f000 8086 	beq.w	8009f12 <HAL_TIM_ConfigClockSource+0x172>
 8009e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e0a:	d87f      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b70      	cmp	r3, #112	; 0x70
 8009e0e:	d01a      	beq.n	8009e46 <HAL_TIM_ConfigClockSource+0xa6>
 8009e10:	2b70      	cmp	r3, #112	; 0x70
 8009e12:	d87b      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e14:	2b60      	cmp	r3, #96	; 0x60
 8009e16:	d050      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x11a>
 8009e18:	2b60      	cmp	r3, #96	; 0x60
 8009e1a:	d877      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e1c:	2b50      	cmp	r3, #80	; 0x50
 8009e1e:	d03c      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0xfa>
 8009e20:	2b50      	cmp	r3, #80	; 0x50
 8009e22:	d873      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e24:	2b40      	cmp	r3, #64	; 0x40
 8009e26:	d058      	beq.n	8009eda <HAL_TIM_ConfigClockSource+0x13a>
 8009e28:	2b40      	cmp	r3, #64	; 0x40
 8009e2a:	d86f      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e2c:	2b30      	cmp	r3, #48	; 0x30
 8009e2e:	d064      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x15a>
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d86b      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d060      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x15a>
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	d867      	bhi.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d05c      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x15a>
 8009e40:	2b10      	cmp	r3, #16
 8009e42:	d05a      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0x15a>
 8009e44:	e062      	b.n	8009f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6899      	ldr	r1, [r3, #8]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f000 f9b7 	bl	800a1c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	609a      	str	r2, [r3, #8]
      break;
 8009e72:	e04f      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6818      	ldr	r0, [r3, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	6899      	ldr	r1, [r3, #8]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f000 f9a0 	bl	800a1c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e96:	609a      	str	r2, [r3, #8]
      break;
 8009e98:	e03c      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6859      	ldr	r1, [r3, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f000 f914 	bl	800a0d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2150      	movs	r1, #80	; 0x50
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f96d 	bl	800a192 <TIM_ITRx_SetConfig>
      break;
 8009eb8:	e02c      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6859      	ldr	r1, [r3, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f000 f933 	bl	800a132 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2160      	movs	r1, #96	; 0x60
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 f95d 	bl	800a192 <TIM_ITRx_SetConfig>
      break;
 8009ed8:	e01c      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6818      	ldr	r0, [r3, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6859      	ldr	r1, [r3, #4]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f000 f8f4 	bl	800a0d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2140      	movs	r1, #64	; 0x40
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f94d 	bl	800a192 <TIM_ITRx_SetConfig>
      break;
 8009ef8:	e00c      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f000 f944 	bl	800a192 <TIM_ITRx_SetConfig>
      break;
 8009f0a:	e003      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f10:	e000      	b.n	8009f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f36:	bf00      	nop
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f4a:	bf00      	nop
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f5e:	bf00      	nop
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f72:	bf00      	nop
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a40      	ldr	r2, [pc, #256]	; (800a0a8 <TIM_Base_SetConfig+0x114>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d013      	beq.n	8009fd4 <TIM_Base_SetConfig+0x40>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb2:	d00f      	beq.n	8009fd4 <TIM_Base_SetConfig+0x40>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a3d      	ldr	r2, [pc, #244]	; (800a0ac <TIM_Base_SetConfig+0x118>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00b      	beq.n	8009fd4 <TIM_Base_SetConfig+0x40>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a3c      	ldr	r2, [pc, #240]	; (800a0b0 <TIM_Base_SetConfig+0x11c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d007      	beq.n	8009fd4 <TIM_Base_SetConfig+0x40>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a3b      	ldr	r2, [pc, #236]	; (800a0b4 <TIM_Base_SetConfig+0x120>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d003      	beq.n	8009fd4 <TIM_Base_SetConfig+0x40>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a3a      	ldr	r2, [pc, #232]	; (800a0b8 <TIM_Base_SetConfig+0x124>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d108      	bne.n	8009fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a2f      	ldr	r2, [pc, #188]	; (800a0a8 <TIM_Base_SetConfig+0x114>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d02b      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ff4:	d027      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a2c      	ldr	r2, [pc, #176]	; (800a0ac <TIM_Base_SetConfig+0x118>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d023      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a2b      	ldr	r2, [pc, #172]	; (800a0b0 <TIM_Base_SetConfig+0x11c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d01f      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a2a      	ldr	r2, [pc, #168]	; (800a0b4 <TIM_Base_SetConfig+0x120>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d01b      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a29      	ldr	r2, [pc, #164]	; (800a0b8 <TIM_Base_SetConfig+0x124>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d017      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a28      	ldr	r2, [pc, #160]	; (800a0bc <TIM_Base_SetConfig+0x128>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d013      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a27      	ldr	r2, [pc, #156]	; (800a0c0 <TIM_Base_SetConfig+0x12c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00f      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a26      	ldr	r2, [pc, #152]	; (800a0c4 <TIM_Base_SetConfig+0x130>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00b      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a25      	ldr	r2, [pc, #148]	; (800a0c8 <TIM_Base_SetConfig+0x134>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d007      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a24      	ldr	r2, [pc, #144]	; (800a0cc <TIM_Base_SetConfig+0x138>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d003      	beq.n	800a046 <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a23      	ldr	r2, [pc, #140]	; (800a0d0 <TIM_Base_SetConfig+0x13c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d108      	bne.n	800a058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a04c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	4313      	orrs	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a0a      	ldr	r2, [pc, #40]	; (800a0a8 <TIM_Base_SetConfig+0x114>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d003      	beq.n	800a08c <TIM_Base_SetConfig+0xf8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a0c      	ldr	r2, [pc, #48]	; (800a0b8 <TIM_Base_SetConfig+0x124>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d103      	bne.n	800a094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	615a      	str	r2, [r3, #20]
}
 800a09a:	bf00      	nop
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40010000 	.word	0x40010000
 800a0ac:	40000400 	.word	0x40000400
 800a0b0:	40000800 	.word	0x40000800
 800a0b4:	40000c00 	.word	0x40000c00
 800a0b8:	40010400 	.word	0x40010400
 800a0bc:	40014000 	.word	0x40014000
 800a0c0:	40014400 	.word	0x40014400
 800a0c4:	40014800 	.word	0x40014800
 800a0c8:	40001800 	.word	0x40001800
 800a0cc:	40001c00 	.word	0x40001c00
 800a0d0:	40002000 	.word	0x40002000

0800a0d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a1b      	ldr	r3, [r3, #32]
 800a0e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f023 030a 	bic.w	r3, r3, #10
 800a110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	621a      	str	r2, [r3, #32]
}
 800a126:	bf00      	nop
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a132:	b480      	push	{r7}
 800a134:	b087      	sub	sp, #28
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f023 0210 	bic.w	r2, r3, #16
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a15c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	031b      	lsls	r3, r3, #12
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	4313      	orrs	r3, r2
 800a166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a16e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	011b      	lsls	r3, r3, #4
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	4313      	orrs	r3, r2
 800a178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	621a      	str	r2, [r3, #32]
}
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	f043 0307 	orr.w	r3, r3, #7
 800a1b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	609a      	str	r2, [r3, #8]
}
 800a1bc:	bf00      	nop
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	021a      	lsls	r2, r3, #8
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	609a      	str	r2, [r3, #8]
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e05a      	b.n	800a2d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a21      	ldr	r2, [pc, #132]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d022      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26c:	d01d      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d018      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d013      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a1a      	ldr	r2, [pc, #104]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d00e      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a18      	ldr	r2, [pc, #96]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d009      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d004      	beq.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a15      	ldr	r2, [pc, #84]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d10c      	bne.n	800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3714      	adds	r7, #20
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	40010000 	.word	0x40010000
 800a2e8:	40000400 	.word	0x40000400
 800a2ec:	40000800 	.word	0x40000800
 800a2f0:	40000c00 	.word	0x40000c00
 800a2f4:	40010400 	.word	0x40010400
 800a2f8:	40014000 	.word	0x40014000
 800a2fc:	40001800 	.word	0x40001800

0800a300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e03f      	b.n	800a3ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fa f866 	bl	8004420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2224      	movs	r2, #36	; 0x24
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a36a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fddf 	bl	800af30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691a      	ldr	r2, [r3, #16]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	695a      	ldr	r2, [r3, #20]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2220      	movs	r2, #32
 800a3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b08a      	sub	sp, #40	; 0x28
 800a3c6:	af02      	add	r7, sp, #8
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	603b      	str	r3, [r7, #0]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d17c      	bne.n	800a4dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_UART_Transmit+0x2c>
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e075      	b.n	800a4de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_UART_Transmit+0x3e>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e06e      	b.n	800a4de <HAL_UART_Transmit+0x11c>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2221      	movs	r2, #33	; 0x21
 800a412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a416:	f7fc fca9 	bl	8006d6c <HAL_GetTick>
 800a41a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	88fa      	ldrh	r2, [r7, #6]
 800a420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	88fa      	ldrh	r2, [r7, #6]
 800a426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a430:	d108      	bne.n	800a444 <HAL_UART_Transmit+0x82>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d104      	bne.n	800a444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	e003      	b.n	800a44c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a448:	2300      	movs	r3, #0
 800a44a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a454:	e02a      	b.n	800a4ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2200      	movs	r2, #0
 800a45e:	2180      	movs	r1, #128	; 0x80
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 fb1f 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e036      	b.n	800a4de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	3302      	adds	r3, #2
 800a48a:	61bb      	str	r3, [r7, #24]
 800a48c:	e007      	b.n	800a49e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	781a      	ldrb	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	3301      	adds	r3, #1
 800a49c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1cf      	bne.n	800a456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2140      	movs	r1, #64	; 0x40
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 faef 	bl	800aaa4 <UART_WaitOnFlagUntilTimeout>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e006      	b.n	800a4de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e000      	b.n	800a4de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a4dc:	2302      	movs	r3, #2
  }
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3720      	adds	r7, #32
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d11d      	bne.n	800a53c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <HAL_UART_Receive_IT+0x26>
 800a506:	88fb      	ldrh	r3, [r7, #6]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e016      	b.n	800a53e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a516:	2b01      	cmp	r3, #1
 800a518:	d101      	bne.n	800a51e <HAL_UART_Receive_IT+0x38>
 800a51a:	2302      	movs	r3, #2
 800a51c:	e00f      	b.n	800a53e <HAL_UART_Receive_IT+0x58>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	461a      	mov	r2, r3
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 fb24 	bl	800ab80 <UART_Start_Receive_IT>
 800a538:	4603      	mov	r3, r0
 800a53a:	e000      	b.n	800a53e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a53c:	2302      	movs	r3, #2
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b0ba      	sub	sp, #232	; 0xe8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a56e:	2300      	movs	r3, #0
 800a570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a574:	2300      	movs	r3, #0
 800a576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10f      	bne.n	800a5ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <HAL_UART_IRQHandler+0x66>
 800a59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc07 	bl	800adba <UART_Receive_IT>
      return;
 800a5ac:	e256      	b.n	800aa5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80de 	beq.w	800a774 <HAL_UART_IRQHandler+0x22c>
 800a5b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d106      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80d1 	beq.w	800a774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <HAL_UART_IRQHandler+0xae>
 800a5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	f043 0201 	orr.w	r2, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <HAL_UART_IRQHandler+0xd2>
 800a602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a612:	f043 0202 	orr.w	r2, r3, #2
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <HAL_UART_IRQHandler+0xf6>
 800a626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a636:	f043 0204 	orr.w	r2, r3, #4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d011      	beq.n	800a66e <HAL_UART_IRQHandler+0x126>
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	f043 0208 	orr.w	r2, r3, #8
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 81ed 	beq.w	800aa52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <HAL_UART_IRQHandler+0x14e>
 800a684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fb92 	bl	800adba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b40      	cmp	r3, #64	; 0x40
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2301      	moveq	r3, #1
 800a6a6:	2300      	movne	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d103      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x17a>
 800a6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d04f      	beq.n	800a762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa9a 	bl	800abfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d2:	2b40      	cmp	r3, #64	; 0x40
 800a6d4:	d141      	bne.n	800a75a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3314      	adds	r3, #20
 800a6dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3314      	adds	r3, #20
 800a6fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a70e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1d9      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	2b00      	cmp	r3, #0
 800a728:	d013      	beq.n	800a752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72e:	4a7d      	ldr	r2, [pc, #500]	; (800a924 <HAL_UART_IRQHandler+0x3dc>)
 800a730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd f9d4 	bl	8007ae4 <HAL_DMA_Abort_IT>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a750:	e00e      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f990 	bl	800aa78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a758:	e00a      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f98c 	bl	800aa78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a760:	e006      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f988 	bl	800aa78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a76e:	e170      	b.n	800aa52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a770:	bf00      	nop
    return;
 800a772:	e16e      	b.n	800aa52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	2b01      	cmp	r3, #1
 800a77a:	f040 814a 	bne.w	800aa12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8143 	beq.w	800aa12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 813c 	beq.w	800aa12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a79a:	2300      	movs	r3, #0
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60bb      	str	r3, [r7, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]
 800a7ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	f040 80b4 	bne.w	800a928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 8140 	beq.w	800aa56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f080 8139 	bcs.w	800aa56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f6:	f000 8088 	beq.w	800a90a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	330c      	adds	r3, #12
 800a800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	330c      	adds	r3, #12
 800a822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a82a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1d9      	bne.n	800a7fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a86a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a86e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e1      	bne.n	800a846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3314      	adds	r3, #20
 800a888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e3      	bne.n	800a882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	330c      	adds	r3, #12
 800a8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8da:	f023 0310 	bic.w	r3, r3, #16
 800a8de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8f4:	e841 2300 	strex	r3, r2, [r1]
 800a8f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e3      	bne.n	800a8c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd f87d 	bl	8007a04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a912:	b29b      	uxth	r3, r3
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	b29b      	uxth	r3, r3
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8b6 	bl	800aa8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a920:	e099      	b.n	800aa56 <HAL_UART_IRQHandler+0x50e>
 800a922:	bf00      	nop
 800a924:	0800acc3 	.word	0x0800acc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a930:	b29b      	uxth	r3, r3
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 808b 	beq.w	800aa5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8086 	beq.w	800aa5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	e853 3f00 	ldrex	r3, [r3]
 800a95c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	330c      	adds	r3, #12
 800a96e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a972:	647a      	str	r2, [r7, #68]	; 0x44
 800a974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e3      	bne.n	800a94e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3314      	adds	r3, #20
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	623b      	str	r3, [r7, #32]
   return(result);
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	f023 0301 	bic.w	r3, r3, #1
 800a99c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9aa:	633a      	str	r2, [r7, #48]	; 0x30
 800a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e3      	bne.n	800a986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	330c      	adds	r3, #12
 800a9d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 0310 	bic.w	r3, r3, #16
 800a9e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	330c      	adds	r3, #12
 800a9ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9f0:	61fa      	str	r2, [r7, #28]
 800a9f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	69b9      	ldr	r1, [r7, #24]
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e3      	bne.n	800a9cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f83e 	bl	800aa8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa10:	e023      	b.n	800aa5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d009      	beq.n	800aa32 <HAL_UART_IRQHandler+0x4ea>
 800aa1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f95d 	bl	800acea <UART_Transmit_IT>
    return;
 800aa30:	e014      	b.n	800aa5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00e      	beq.n	800aa5c <HAL_UART_IRQHandler+0x514>
 800aa3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d008      	beq.n	800aa5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f99d 	bl	800ad8a <UART_EndTransmit_IT>
    return;
 800aa50:	e004      	b.n	800aa5c <HAL_UART_IRQHandler+0x514>
    return;
 800aa52:	bf00      	nop
 800aa54:	e002      	b.n	800aa5c <HAL_UART_IRQHandler+0x514>
      return;
 800aa56:	bf00      	nop
 800aa58:	e000      	b.n	800aa5c <HAL_UART_IRQHandler+0x514>
      return;
 800aa5a:	bf00      	nop
  }
}
 800aa5c:	37e8      	adds	r7, #232	; 0xe8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop

0800aa64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b090      	sub	sp, #64	; 0x40
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	4613      	mov	r3, r2
 800aab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab4:	e050      	b.n	800ab58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aabc:	d04c      	beq.n	800ab58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d007      	beq.n	800aad4 <UART_WaitOnFlagUntilTimeout+0x30>
 800aac4:	f7fc f952 	bl	8006d6c <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d241      	bcs.n	800ab58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	330c      	adds	r3, #12
 800aada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aaf4:	637a      	str	r2, [r7, #52]	; 0x34
 800aaf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e5      	bne.n	800aad4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3314      	adds	r3, #20
 800ab0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	613b      	str	r3, [r7, #16]
   return(result);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3314      	adds	r3, #20
 800ab26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab28:	623a      	str	r2, [r7, #32]
 800ab2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	6a3a      	ldr	r2, [r7, #32]
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e5      	bne.n	800ab08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e00f      	b.n	800ab78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	4013      	ands	r3, r2
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	bf0c      	ite	eq
 800ab68:	2301      	moveq	r3, #1
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	461a      	mov	r2, r3
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d09f      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3740      	adds	r7, #64	; 0x40
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	88fa      	ldrh	r2, [r7, #6]
 800ab98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	88fa      	ldrh	r2, [r7, #6]
 800ab9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2222      	movs	r2, #34	; 0x22
 800abaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d007      	beq.n	800abce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	695a      	ldr	r2, [r3, #20]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f042 0201 	orr.w	r2, r2, #1
 800abdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0220 	orr.w	r2, r2, #32
 800abec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b095      	sub	sp, #84	; 0x54
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	e853 3f00 	ldrex	r3, [r3]
 800ac12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	330c      	adds	r3, #12
 800ac22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac24:	643a      	str	r2, [r7, #64]	; 0x40
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac2c:	e841 2300 	strex	r3, r2, [r1]
 800ac30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1e5      	bne.n	800ac04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3314      	adds	r3, #20
 800ac3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	f023 0301 	bic.w	r3, r3, #1
 800ac4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3314      	adds	r3, #20
 800ac56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e5      	bne.n	800ac38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d119      	bne.n	800aca8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	330c      	adds	r3, #12
 800ac7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f023 0310 	bic.w	r3, r3, #16
 800ac8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	330c      	adds	r3, #12
 800ac92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac94:	61ba      	str	r2, [r7, #24]
 800ac96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6979      	ldr	r1, [r7, #20]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	613b      	str	r3, [r7, #16]
   return(result);
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e5      	bne.n	800ac74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2220      	movs	r2, #32
 800acac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acb6:	bf00      	nop
 800acb8:	3754      	adds	r7, #84	; 0x54
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff fecb 	bl	800aa78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b21      	cmp	r3, #33	; 0x21
 800acfc:	d13e      	bne.n	800ad7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad06:	d114      	bne.n	800ad32 <UART_Transmit_IT+0x48>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d110      	bne.n	800ad32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a1b      	ldr	r3, [r3, #32]
 800ad14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	1c9a      	adds	r2, r3, #2
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	621a      	str	r2, [r3, #32]
 800ad30:	e008      	b.n	800ad44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1c59      	adds	r1, r3, #1
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6211      	str	r1, [r2, #32]
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4619      	mov	r1, r3
 800ad52:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10f      	bne.n	800ad78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68da      	ldr	r2, [r3, #12]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	e000      	b.n	800ad7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad7c:	2302      	movs	r3, #2
  }
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ada0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fe5a 	bl	800aa64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b08c      	sub	sp, #48	; 0x30
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b22      	cmp	r3, #34	; 0x22
 800adcc:	f040 80ab 	bne.w	800af26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800add8:	d117      	bne.n	800ae0a <UART_Receive_IT+0x50>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d113      	bne.n	800ae0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	1c9a      	adds	r2, r3, #2
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	629a      	str	r2, [r3, #40]	; 0x28
 800ae08:	e026      	b.n	800ae58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae10:	2300      	movs	r3, #0
 800ae12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae1c:	d007      	beq.n	800ae2e <UART_Receive_IT+0x74>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10a      	bne.n	800ae3c <UART_Receive_IT+0x82>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e008      	b.n	800ae4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	4619      	mov	r1, r3
 800ae66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d15a      	bne.n	800af22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0220 	bic.w	r2, r2, #32
 800ae7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68da      	ldr	r2, [r3, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	695a      	ldr	r2, [r3, #20]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f022 0201 	bic.w	r2, r2, #1
 800ae9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d135      	bne.n	800af18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	330c      	adds	r3, #12
 800aeb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	613b      	str	r3, [r7, #16]
   return(result);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f023 0310 	bic.w	r3, r3, #16
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	330c      	adds	r3, #12
 800aed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed2:	623a      	str	r2, [r7, #32]
 800aed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	69f9      	ldr	r1, [r7, #28]
 800aed8:	6a3a      	ldr	r2, [r7, #32]
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	61bb      	str	r3, [r7, #24]
   return(result);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e5      	bne.n	800aeb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0310 	and.w	r3, r3, #16
 800aef0:	2b10      	cmp	r3, #16
 800aef2:	d10a      	bne.n	800af0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	60fb      	str	r3, [r7, #12]
 800af08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fdbb 	bl	800aa8c <HAL_UARTEx_RxEventCallback>
 800af16:	e002      	b.n	800af1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7f9 f82d 	bl	8003f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e002      	b.n	800af28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	e000      	b.n	800af28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af26:	2302      	movs	r3, #2
  }
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3730      	adds	r7, #48	; 0x30
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af34:	b0c0      	sub	sp, #256	; 0x100
 800af36:	af00      	add	r7, sp, #0
 800af38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4c:	68d9      	ldr	r1, [r3, #12]
 800af4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	ea40 0301 	orr.w	r3, r0, r1
 800af58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	431a      	orrs	r2, r3
 800af68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6c:	695b      	ldr	r3, [r3, #20]
 800af6e:	431a      	orrs	r2, r3
 800af70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	4313      	orrs	r3, r2
 800af78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af88:	f021 010c 	bic.w	r1, r1, #12
 800af8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af96:	430b      	orrs	r3, r1
 800af98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	695b      	ldr	r3, [r3, #20]
 800afa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afaa:	6999      	ldr	r1, [r3, #24]
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	ea40 0301 	orr.w	r3, r0, r1
 800afb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b8f      	ldr	r3, [pc, #572]	; (800b1fc <UART_SetConfig+0x2cc>)
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d005      	beq.n	800afd0 <UART_SetConfig+0xa0>
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b8d      	ldr	r3, [pc, #564]	; (800b200 <UART_SetConfig+0x2d0>)
 800afcc:	429a      	cmp	r2, r3
 800afce:	d104      	bne.n	800afda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afd0:	f7fd fb62 	bl	8008698 <HAL_RCC_GetPCLK2Freq>
 800afd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800afd8:	e003      	b.n	800afe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afda:	f7fd fb49 	bl	8008670 <HAL_RCC_GetPCLK1Freq>
 800afde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afec:	f040 810c 	bne.w	800b208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800affa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800affe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b002:	4622      	mov	r2, r4
 800b004:	462b      	mov	r3, r5
 800b006:	1891      	adds	r1, r2, r2
 800b008:	65b9      	str	r1, [r7, #88]	; 0x58
 800b00a:	415b      	adcs	r3, r3
 800b00c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b00e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b012:	4621      	mov	r1, r4
 800b014:	eb12 0801 	adds.w	r8, r2, r1
 800b018:	4629      	mov	r1, r5
 800b01a:	eb43 0901 	adc.w	r9, r3, r1
 800b01e:	f04f 0200 	mov.w	r2, #0
 800b022:	f04f 0300 	mov.w	r3, #0
 800b026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b02a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b02e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b032:	4690      	mov	r8, r2
 800b034:	4699      	mov	r9, r3
 800b036:	4623      	mov	r3, r4
 800b038:	eb18 0303 	adds.w	r3, r8, r3
 800b03c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b040:	462b      	mov	r3, r5
 800b042:	eb49 0303 	adc.w	r3, r9, r3
 800b046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b056:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b05a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b05e:	460b      	mov	r3, r1
 800b060:	18db      	adds	r3, r3, r3
 800b062:	653b      	str	r3, [r7, #80]	; 0x50
 800b064:	4613      	mov	r3, r2
 800b066:	eb42 0303 	adc.w	r3, r2, r3
 800b06a:	657b      	str	r3, [r7, #84]	; 0x54
 800b06c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b074:	f7f5 fe58 	bl	8000d28 <__aeabi_uldivmod>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4b61      	ldr	r3, [pc, #388]	; (800b204 <UART_SetConfig+0x2d4>)
 800b07e:	fba3 2302 	umull	r2, r3, r3, r2
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	011c      	lsls	r4, r3, #4
 800b086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b090:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b098:	4642      	mov	r2, r8
 800b09a:	464b      	mov	r3, r9
 800b09c:	1891      	adds	r1, r2, r2
 800b09e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0a0:	415b      	adcs	r3, r3
 800b0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	eb12 0a01 	adds.w	sl, r2, r1
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	eb43 0b01 	adc.w	fp, r3, r1
 800b0b4:	f04f 0200 	mov.w	r2, #0
 800b0b8:	f04f 0300 	mov.w	r3, #0
 800b0bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0c8:	4692      	mov	sl, r2
 800b0ca:	469b      	mov	fp, r3
 800b0cc:	4643      	mov	r3, r8
 800b0ce:	eb1a 0303 	adds.w	r3, sl, r3
 800b0d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0d6:	464b      	mov	r3, r9
 800b0d8:	eb4b 0303 	adc.w	r3, fp, r3
 800b0dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	18db      	adds	r3, r3, r3
 800b0f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	eb42 0303 	adc.w	r3, r2, r3
 800b100:	647b      	str	r3, [r7, #68]	; 0x44
 800b102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b10a:	f7f5 fe0d 	bl	8000d28 <__aeabi_uldivmod>
 800b10e:	4602      	mov	r2, r0
 800b110:	460b      	mov	r3, r1
 800b112:	4611      	mov	r1, r2
 800b114:	4b3b      	ldr	r3, [pc, #236]	; (800b204 <UART_SetConfig+0x2d4>)
 800b116:	fba3 2301 	umull	r2, r3, r3, r1
 800b11a:	095b      	lsrs	r3, r3, #5
 800b11c:	2264      	movs	r2, #100	; 0x64
 800b11e:	fb02 f303 	mul.w	r3, r2, r3
 800b122:	1acb      	subs	r3, r1, r3
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b12a:	4b36      	ldr	r3, [pc, #216]	; (800b204 <UART_SetConfig+0x2d4>)
 800b12c:	fba3 2302 	umull	r2, r3, r3, r2
 800b130:	095b      	lsrs	r3, r3, #5
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b138:	441c      	add	r4, r3
 800b13a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b13e:	2200      	movs	r2, #0
 800b140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b144:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b14c:	4642      	mov	r2, r8
 800b14e:	464b      	mov	r3, r9
 800b150:	1891      	adds	r1, r2, r2
 800b152:	63b9      	str	r1, [r7, #56]	; 0x38
 800b154:	415b      	adcs	r3, r3
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b15c:	4641      	mov	r1, r8
 800b15e:	1851      	adds	r1, r2, r1
 800b160:	6339      	str	r1, [r7, #48]	; 0x30
 800b162:	4649      	mov	r1, r9
 800b164:	414b      	adcs	r3, r1
 800b166:	637b      	str	r3, [r7, #52]	; 0x34
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b174:	4659      	mov	r1, fp
 800b176:	00cb      	lsls	r3, r1, #3
 800b178:	4651      	mov	r1, sl
 800b17a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b17e:	4651      	mov	r1, sl
 800b180:	00ca      	lsls	r2, r1, #3
 800b182:	4610      	mov	r0, r2
 800b184:	4619      	mov	r1, r3
 800b186:	4603      	mov	r3, r0
 800b188:	4642      	mov	r2, r8
 800b18a:	189b      	adds	r3, r3, r2
 800b18c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b190:	464b      	mov	r3, r9
 800b192:	460a      	mov	r2, r1
 800b194:	eb42 0303 	adc.w	r3, r2, r3
 800b198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	18db      	adds	r3, r3, r3
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	eb42 0303 	adc.w	r3, r2, r3
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1c6:	f7f5 fdaf 	bl	8000d28 <__aeabi_uldivmod>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	; (800b204 <UART_SetConfig+0x2d4>)
 800b1d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d4:	095b      	lsrs	r3, r3, #5
 800b1d6:	2164      	movs	r1, #100	; 0x64
 800b1d8:	fb01 f303 	mul.w	r3, r1, r3
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	3332      	adds	r3, #50	; 0x32
 800b1e2:	4a08      	ldr	r2, [pc, #32]	; (800b204 <UART_SetConfig+0x2d4>)
 800b1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1e8:	095b      	lsrs	r3, r3, #5
 800b1ea:	f003 0207 	and.w	r2, r3, #7
 800b1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4422      	add	r2, r4
 800b1f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1f8:	e106      	b.n	800b408 <UART_SetConfig+0x4d8>
 800b1fa:	bf00      	nop
 800b1fc:	40011000 	.word	0x40011000
 800b200:	40011400 	.word	0x40011400
 800b204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b212:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b21a:	4642      	mov	r2, r8
 800b21c:	464b      	mov	r3, r9
 800b21e:	1891      	adds	r1, r2, r2
 800b220:	6239      	str	r1, [r7, #32]
 800b222:	415b      	adcs	r3, r3
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
 800b226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b22a:	4641      	mov	r1, r8
 800b22c:	1854      	adds	r4, r2, r1
 800b22e:	4649      	mov	r1, r9
 800b230:	eb43 0501 	adc.w	r5, r3, r1
 800b234:	f04f 0200 	mov.w	r2, #0
 800b238:	f04f 0300 	mov.w	r3, #0
 800b23c:	00eb      	lsls	r3, r5, #3
 800b23e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b242:	00e2      	lsls	r2, r4, #3
 800b244:	4614      	mov	r4, r2
 800b246:	461d      	mov	r5, r3
 800b248:	4643      	mov	r3, r8
 800b24a:	18e3      	adds	r3, r4, r3
 800b24c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b250:	464b      	mov	r3, r9
 800b252:	eb45 0303 	adc.w	r3, r5, r3
 800b256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b266:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	f04f 0300 	mov.w	r3, #0
 800b272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b276:	4629      	mov	r1, r5
 800b278:	008b      	lsls	r3, r1, #2
 800b27a:	4621      	mov	r1, r4
 800b27c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b280:	4621      	mov	r1, r4
 800b282:	008a      	lsls	r2, r1, #2
 800b284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b288:	f7f5 fd4e 	bl	8000d28 <__aeabi_uldivmod>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	4b60      	ldr	r3, [pc, #384]	; (800b414 <UART_SetConfig+0x4e4>)
 800b292:	fba3 2302 	umull	r2, r3, r3, r2
 800b296:	095b      	lsrs	r3, r3, #5
 800b298:	011c      	lsls	r4, r3, #4
 800b29a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	1891      	adds	r1, r2, r2
 800b2b2:	61b9      	str	r1, [r7, #24]
 800b2b4:	415b      	adcs	r3, r3
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2bc:	4641      	mov	r1, r8
 800b2be:	1851      	adds	r1, r2, r1
 800b2c0:	6139      	str	r1, [r7, #16]
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	414b      	adcs	r3, r1
 800b2c6:	617b      	str	r3, [r7, #20]
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	f04f 0300 	mov.w	r3, #0
 800b2d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	00cb      	lsls	r3, r1, #3
 800b2d8:	4651      	mov	r1, sl
 800b2da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2de:	4651      	mov	r1, sl
 800b2e0:	00ca      	lsls	r2, r1, #3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	189b      	adds	r3, r3, r2
 800b2ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2f0:	464b      	mov	r3, r9
 800b2f2:	460a      	mov	r2, r1
 800b2f4:	eb42 0303 	adc.w	r3, r2, r3
 800b2f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	67bb      	str	r3, [r7, #120]	; 0x78
 800b306:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b308:	f04f 0200 	mov.w	r2, #0
 800b30c:	f04f 0300 	mov.w	r3, #0
 800b310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b314:	4649      	mov	r1, r9
 800b316:	008b      	lsls	r3, r1, #2
 800b318:	4641      	mov	r1, r8
 800b31a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b31e:	4641      	mov	r1, r8
 800b320:	008a      	lsls	r2, r1, #2
 800b322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b326:	f7f5 fcff 	bl	8000d28 <__aeabi_uldivmod>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	4b38      	ldr	r3, [pc, #224]	; (800b414 <UART_SetConfig+0x4e4>)
 800b332:	fba3 2301 	umull	r2, r3, r3, r1
 800b336:	095b      	lsrs	r3, r3, #5
 800b338:	2264      	movs	r2, #100	; 0x64
 800b33a:	fb02 f303 	mul.w	r3, r2, r3
 800b33e:	1acb      	subs	r3, r1, r3
 800b340:	011b      	lsls	r3, r3, #4
 800b342:	3332      	adds	r3, #50	; 0x32
 800b344:	4a33      	ldr	r2, [pc, #204]	; (800b414 <UART_SetConfig+0x4e4>)
 800b346:	fba2 2303 	umull	r2, r3, r2, r3
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b350:	441c      	add	r4, r3
 800b352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b356:	2200      	movs	r2, #0
 800b358:	673b      	str	r3, [r7, #112]	; 0x70
 800b35a:	677a      	str	r2, [r7, #116]	; 0x74
 800b35c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b360:	4642      	mov	r2, r8
 800b362:	464b      	mov	r3, r9
 800b364:	1891      	adds	r1, r2, r2
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	415b      	adcs	r3, r3
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b370:	4641      	mov	r1, r8
 800b372:	1851      	adds	r1, r2, r1
 800b374:	6039      	str	r1, [r7, #0]
 800b376:	4649      	mov	r1, r9
 800b378:	414b      	adcs	r3, r1
 800b37a:	607b      	str	r3, [r7, #4]
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	f04f 0300 	mov.w	r3, #0
 800b384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b388:	4659      	mov	r1, fp
 800b38a:	00cb      	lsls	r3, r1, #3
 800b38c:	4651      	mov	r1, sl
 800b38e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b392:	4651      	mov	r1, sl
 800b394:	00ca      	lsls	r2, r1, #3
 800b396:	4610      	mov	r0, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	4642      	mov	r2, r8
 800b39e:	189b      	adds	r3, r3, r2
 800b3a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	460a      	mov	r2, r1
 800b3a6:	eb42 0303 	adc.w	r3, r2, r3
 800b3aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	663b      	str	r3, [r7, #96]	; 0x60
 800b3b6:	667a      	str	r2, [r7, #100]	; 0x64
 800b3b8:	f04f 0200 	mov.w	r2, #0
 800b3bc:	f04f 0300 	mov.w	r3, #0
 800b3c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	008b      	lsls	r3, r1, #2
 800b3c8:	4641      	mov	r1, r8
 800b3ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3ce:	4641      	mov	r1, r8
 800b3d0:	008a      	lsls	r2, r1, #2
 800b3d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b3d6:	f7f5 fca7 	bl	8000d28 <__aeabi_uldivmod>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <UART_SetConfig+0x4e4>)
 800b3e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b3e4:	095b      	lsrs	r3, r3, #5
 800b3e6:	2164      	movs	r1, #100	; 0x64
 800b3e8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	3332      	adds	r3, #50	; 0x32
 800b3f2:	4a08      	ldr	r2, [pc, #32]	; (800b414 <UART_SetConfig+0x4e4>)
 800b3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f8:	095b      	lsrs	r3, r3, #5
 800b3fa:	f003 020f 	and.w	r2, r3, #15
 800b3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4422      	add	r2, r4
 800b406:	609a      	str	r2, [r3, #8]
}
 800b408:	bf00      	nop
 800b40a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b40e:	46bd      	mov	sp, r7
 800b410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b414:	51eb851f 	.word	0x51eb851f

0800b418 <__cvt>:
 800b418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	ec55 4b10 	vmov	r4, r5, d0
 800b420:	2d00      	cmp	r5, #0
 800b422:	460e      	mov	r6, r1
 800b424:	4619      	mov	r1, r3
 800b426:	462b      	mov	r3, r5
 800b428:	bfbb      	ittet	lt
 800b42a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b42e:	461d      	movlt	r5, r3
 800b430:	2300      	movge	r3, #0
 800b432:	232d      	movlt	r3, #45	; 0x2d
 800b434:	700b      	strb	r3, [r1, #0]
 800b436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b43c:	4691      	mov	r9, r2
 800b43e:	f023 0820 	bic.w	r8, r3, #32
 800b442:	bfbc      	itt	lt
 800b444:	4622      	movlt	r2, r4
 800b446:	4614      	movlt	r4, r2
 800b448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b44c:	d005      	beq.n	800b45a <__cvt+0x42>
 800b44e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b452:	d100      	bne.n	800b456 <__cvt+0x3e>
 800b454:	3601      	adds	r6, #1
 800b456:	2102      	movs	r1, #2
 800b458:	e000      	b.n	800b45c <__cvt+0x44>
 800b45a:	2103      	movs	r1, #3
 800b45c:	ab03      	add	r3, sp, #12
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	ab02      	add	r3, sp, #8
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	ec45 4b10 	vmov	d0, r4, r5
 800b468:	4653      	mov	r3, sl
 800b46a:	4632      	mov	r2, r6
 800b46c:	f000 ff34 	bl	800c2d8 <_dtoa_r>
 800b470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b474:	4607      	mov	r7, r0
 800b476:	d102      	bne.n	800b47e <__cvt+0x66>
 800b478:	f019 0f01 	tst.w	r9, #1
 800b47c:	d022      	beq.n	800b4c4 <__cvt+0xac>
 800b47e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b482:	eb07 0906 	add.w	r9, r7, r6
 800b486:	d110      	bne.n	800b4aa <__cvt+0x92>
 800b488:	783b      	ldrb	r3, [r7, #0]
 800b48a:	2b30      	cmp	r3, #48	; 0x30
 800b48c:	d10a      	bne.n	800b4a4 <__cvt+0x8c>
 800b48e:	2200      	movs	r2, #0
 800b490:	2300      	movs	r3, #0
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f5 fb37 	bl	8000b08 <__aeabi_dcmpeq>
 800b49a:	b918      	cbnz	r0, 800b4a4 <__cvt+0x8c>
 800b49c:	f1c6 0601 	rsb	r6, r6, #1
 800b4a0:	f8ca 6000 	str.w	r6, [sl]
 800b4a4:	f8da 3000 	ldr.w	r3, [sl]
 800b4a8:	4499      	add	r9, r3
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	f7f5 fb29 	bl	8000b08 <__aeabi_dcmpeq>
 800b4b6:	b108      	cbz	r0, 800b4bc <__cvt+0xa4>
 800b4b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4bc:	2230      	movs	r2, #48	; 0x30
 800b4be:	9b03      	ldr	r3, [sp, #12]
 800b4c0:	454b      	cmp	r3, r9
 800b4c2:	d307      	bcc.n	800b4d4 <__cvt+0xbc>
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4c8:	1bdb      	subs	r3, r3, r7
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	b004      	add	sp, #16
 800b4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d4:	1c59      	adds	r1, r3, #1
 800b4d6:	9103      	str	r1, [sp, #12]
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	e7f0      	b.n	800b4be <__cvt+0xa6>

0800b4dc <__exponent>:
 800b4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	bfb8      	it	lt
 800b4e4:	4249      	neglt	r1, r1
 800b4e6:	f803 2b02 	strb.w	r2, [r3], #2
 800b4ea:	bfb4      	ite	lt
 800b4ec:	222d      	movlt	r2, #45	; 0x2d
 800b4ee:	222b      	movge	r2, #43	; 0x2b
 800b4f0:	2909      	cmp	r1, #9
 800b4f2:	7042      	strb	r2, [r0, #1]
 800b4f4:	dd2a      	ble.n	800b54c <__exponent+0x70>
 800b4f6:	f10d 0207 	add.w	r2, sp, #7
 800b4fa:	4617      	mov	r7, r2
 800b4fc:	260a      	movs	r6, #10
 800b4fe:	4694      	mov	ip, r2
 800b500:	fb91 f5f6 	sdiv	r5, r1, r6
 800b504:	fb06 1415 	mls	r4, r6, r5, r1
 800b508:	3430      	adds	r4, #48	; 0x30
 800b50a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b50e:	460c      	mov	r4, r1
 800b510:	2c63      	cmp	r4, #99	; 0x63
 800b512:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b516:	4629      	mov	r1, r5
 800b518:	dcf1      	bgt.n	800b4fe <__exponent+0x22>
 800b51a:	3130      	adds	r1, #48	; 0x30
 800b51c:	f1ac 0402 	sub.w	r4, ip, #2
 800b520:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b524:	1c41      	adds	r1, r0, #1
 800b526:	4622      	mov	r2, r4
 800b528:	42ba      	cmp	r2, r7
 800b52a:	d30a      	bcc.n	800b542 <__exponent+0x66>
 800b52c:	f10d 0209 	add.w	r2, sp, #9
 800b530:	eba2 020c 	sub.w	r2, r2, ip
 800b534:	42bc      	cmp	r4, r7
 800b536:	bf88      	it	hi
 800b538:	2200      	movhi	r2, #0
 800b53a:	4413      	add	r3, r2
 800b53c:	1a18      	subs	r0, r3, r0
 800b53e:	b003      	add	sp, #12
 800b540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b542:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b546:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b54a:	e7ed      	b.n	800b528 <__exponent+0x4c>
 800b54c:	2330      	movs	r3, #48	; 0x30
 800b54e:	3130      	adds	r1, #48	; 0x30
 800b550:	7083      	strb	r3, [r0, #2]
 800b552:	70c1      	strb	r1, [r0, #3]
 800b554:	1d03      	adds	r3, r0, #4
 800b556:	e7f1      	b.n	800b53c <__exponent+0x60>

0800b558 <_printf_float>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ed2d 8b02 	vpush	{d8}
 800b560:	b08d      	sub	sp, #52	; 0x34
 800b562:	460c      	mov	r4, r1
 800b564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b568:	4616      	mov	r6, r2
 800b56a:	461f      	mov	r7, r3
 800b56c:	4605      	mov	r5, r0
 800b56e:	f000 fd95 	bl	800c09c <_localeconv_r>
 800b572:	f8d0 a000 	ldr.w	sl, [r0]
 800b576:	4650      	mov	r0, sl
 800b578:	f7f4 fe9a 	bl	80002b0 <strlen>
 800b57c:	2300      	movs	r3, #0
 800b57e:	930a      	str	r3, [sp, #40]	; 0x28
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	9305      	str	r3, [sp, #20]
 800b584:	f8d8 3000 	ldr.w	r3, [r8]
 800b588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b58c:	3307      	adds	r3, #7
 800b58e:	f023 0307 	bic.w	r3, r3, #7
 800b592:	f103 0208 	add.w	r2, r3, #8
 800b596:	f8c8 2000 	str.w	r2, [r8]
 800b59a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b59e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5a2:	9307      	str	r3, [sp, #28]
 800b5a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5a8:	ee08 0a10 	vmov	s16, r0
 800b5ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b5b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5b4:	4b9e      	ldr	r3, [pc, #632]	; (800b830 <_printf_float+0x2d8>)
 800b5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ba:	f7f5 fad7 	bl	8000b6c <__aeabi_dcmpun>
 800b5be:	bb88      	cbnz	r0, 800b624 <_printf_float+0xcc>
 800b5c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5c4:	4b9a      	ldr	r3, [pc, #616]	; (800b830 <_printf_float+0x2d8>)
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ca:	f7f5 fab1 	bl	8000b30 <__aeabi_dcmple>
 800b5ce:	bb48      	cbnz	r0, 800b624 <_printf_float+0xcc>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	f7f5 faa0 	bl	8000b1c <__aeabi_dcmplt>
 800b5dc:	b110      	cbz	r0, 800b5e4 <_printf_float+0x8c>
 800b5de:	232d      	movs	r3, #45	; 0x2d
 800b5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e4:	4a93      	ldr	r2, [pc, #588]	; (800b834 <_printf_float+0x2dc>)
 800b5e6:	4b94      	ldr	r3, [pc, #592]	; (800b838 <_printf_float+0x2e0>)
 800b5e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b5ec:	bf94      	ite	ls
 800b5ee:	4690      	movls	r8, r2
 800b5f0:	4698      	movhi	r8, r3
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	9b05      	ldr	r3, [sp, #20]
 800b5f8:	f023 0304 	bic.w	r3, r3, #4
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	f04f 0900 	mov.w	r9, #0
 800b602:	9700      	str	r7, [sp, #0]
 800b604:	4633      	mov	r3, r6
 800b606:	aa0b      	add	r2, sp, #44	; 0x2c
 800b608:	4621      	mov	r1, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	f000 f9da 	bl	800b9c4 <_printf_common>
 800b610:	3001      	adds	r0, #1
 800b612:	f040 8090 	bne.w	800b736 <_printf_float+0x1de>
 800b616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b61a:	b00d      	add	sp, #52	; 0x34
 800b61c:	ecbd 8b02 	vpop	{d8}
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	4642      	mov	r2, r8
 800b626:	464b      	mov	r3, r9
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f5 fa9e 	bl	8000b6c <__aeabi_dcmpun>
 800b630:	b140      	cbz	r0, 800b644 <_printf_float+0xec>
 800b632:	464b      	mov	r3, r9
 800b634:	2b00      	cmp	r3, #0
 800b636:	bfbc      	itt	lt
 800b638:	232d      	movlt	r3, #45	; 0x2d
 800b63a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b63e:	4a7f      	ldr	r2, [pc, #508]	; (800b83c <_printf_float+0x2e4>)
 800b640:	4b7f      	ldr	r3, [pc, #508]	; (800b840 <_printf_float+0x2e8>)
 800b642:	e7d1      	b.n	800b5e8 <_printf_float+0x90>
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b64a:	9206      	str	r2, [sp, #24]
 800b64c:	1c5a      	adds	r2, r3, #1
 800b64e:	d13f      	bne.n	800b6d0 <_printf_float+0x178>
 800b650:	2306      	movs	r3, #6
 800b652:	6063      	str	r3, [r4, #4]
 800b654:	9b05      	ldr	r3, [sp, #20]
 800b656:	6861      	ldr	r1, [r4, #4]
 800b658:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b65c:	2300      	movs	r3, #0
 800b65e:	9303      	str	r3, [sp, #12]
 800b660:	ab0a      	add	r3, sp, #40	; 0x28
 800b662:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b666:	ab09      	add	r3, sp, #36	; 0x24
 800b668:	ec49 8b10 	vmov	d0, r8, r9
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	6022      	str	r2, [r4, #0]
 800b670:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b674:	4628      	mov	r0, r5
 800b676:	f7ff fecf 	bl	800b418 <__cvt>
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b67e:	2b47      	cmp	r3, #71	; 0x47
 800b680:	4680      	mov	r8, r0
 800b682:	d108      	bne.n	800b696 <_printf_float+0x13e>
 800b684:	1cc8      	adds	r0, r1, #3
 800b686:	db02      	blt.n	800b68e <_printf_float+0x136>
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	4299      	cmp	r1, r3
 800b68c:	dd41      	ble.n	800b712 <_printf_float+0x1ba>
 800b68e:	f1ab 0302 	sub.w	r3, fp, #2
 800b692:	fa5f fb83 	uxtb.w	fp, r3
 800b696:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b69a:	d820      	bhi.n	800b6de <_printf_float+0x186>
 800b69c:	3901      	subs	r1, #1
 800b69e:	465a      	mov	r2, fp
 800b6a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b6a4:	9109      	str	r1, [sp, #36]	; 0x24
 800b6a6:	f7ff ff19 	bl	800b4dc <__exponent>
 800b6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ac:	1813      	adds	r3, r2, r0
 800b6ae:	2a01      	cmp	r2, #1
 800b6b0:	4681      	mov	r9, r0
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	dc02      	bgt.n	800b6bc <_printf_float+0x164>
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	07d2      	lsls	r2, r2, #31
 800b6ba:	d501      	bpl.n	800b6c0 <_printf_float+0x168>
 800b6bc:	3301      	adds	r3, #1
 800b6be:	6123      	str	r3, [r4, #16]
 800b6c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d09c      	beq.n	800b602 <_printf_float+0xaa>
 800b6c8:	232d      	movs	r3, #45	; 0x2d
 800b6ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ce:	e798      	b.n	800b602 <_printf_float+0xaa>
 800b6d0:	9a06      	ldr	r2, [sp, #24]
 800b6d2:	2a47      	cmp	r2, #71	; 0x47
 800b6d4:	d1be      	bne.n	800b654 <_printf_float+0xfc>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1bc      	bne.n	800b654 <_printf_float+0xfc>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e7b9      	b.n	800b652 <_printf_float+0xfa>
 800b6de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b6e2:	d118      	bne.n	800b716 <_printf_float+0x1be>
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	6863      	ldr	r3, [r4, #4]
 800b6e8:	dd0b      	ble.n	800b702 <_printf_float+0x1aa>
 800b6ea:	6121      	str	r1, [r4, #16]
 800b6ec:	b913      	cbnz	r3, 800b6f4 <_printf_float+0x19c>
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	07d0      	lsls	r0, r2, #31
 800b6f2:	d502      	bpl.n	800b6fa <_printf_float+0x1a2>
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	440b      	add	r3, r1
 800b6f8:	6123      	str	r3, [r4, #16]
 800b6fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800b6fc:	f04f 0900 	mov.w	r9, #0
 800b700:	e7de      	b.n	800b6c0 <_printf_float+0x168>
 800b702:	b913      	cbnz	r3, 800b70a <_printf_float+0x1b2>
 800b704:	6822      	ldr	r2, [r4, #0]
 800b706:	07d2      	lsls	r2, r2, #31
 800b708:	d501      	bpl.n	800b70e <_printf_float+0x1b6>
 800b70a:	3302      	adds	r3, #2
 800b70c:	e7f4      	b.n	800b6f8 <_printf_float+0x1a0>
 800b70e:	2301      	movs	r3, #1
 800b710:	e7f2      	b.n	800b6f8 <_printf_float+0x1a0>
 800b712:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b718:	4299      	cmp	r1, r3
 800b71a:	db05      	blt.n	800b728 <_printf_float+0x1d0>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	6121      	str	r1, [r4, #16]
 800b720:	07d8      	lsls	r0, r3, #31
 800b722:	d5ea      	bpl.n	800b6fa <_printf_float+0x1a2>
 800b724:	1c4b      	adds	r3, r1, #1
 800b726:	e7e7      	b.n	800b6f8 <_printf_float+0x1a0>
 800b728:	2900      	cmp	r1, #0
 800b72a:	bfd4      	ite	le
 800b72c:	f1c1 0202 	rsble	r2, r1, #2
 800b730:	2201      	movgt	r2, #1
 800b732:	4413      	add	r3, r2
 800b734:	e7e0      	b.n	800b6f8 <_printf_float+0x1a0>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	055a      	lsls	r2, r3, #21
 800b73a:	d407      	bmi.n	800b74c <_printf_float+0x1f4>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	4642      	mov	r2, r8
 800b740:	4631      	mov	r1, r6
 800b742:	4628      	mov	r0, r5
 800b744:	47b8      	blx	r7
 800b746:	3001      	adds	r0, #1
 800b748:	d12c      	bne.n	800b7a4 <_printf_float+0x24c>
 800b74a:	e764      	b.n	800b616 <_printf_float+0xbe>
 800b74c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b750:	f240 80e0 	bls.w	800b914 <_printf_float+0x3bc>
 800b754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b758:	2200      	movs	r2, #0
 800b75a:	2300      	movs	r3, #0
 800b75c:	f7f5 f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 800b760:	2800      	cmp	r0, #0
 800b762:	d034      	beq.n	800b7ce <_printf_float+0x276>
 800b764:	4a37      	ldr	r2, [pc, #220]	; (800b844 <_printf_float+0x2ec>)
 800b766:	2301      	movs	r3, #1
 800b768:	4631      	mov	r1, r6
 800b76a:	4628      	mov	r0, r5
 800b76c:	47b8      	blx	r7
 800b76e:	3001      	adds	r0, #1
 800b770:	f43f af51 	beq.w	800b616 <_printf_float+0xbe>
 800b774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b778:	429a      	cmp	r2, r3
 800b77a:	db02      	blt.n	800b782 <_printf_float+0x22a>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	07d8      	lsls	r0, r3, #31
 800b780:	d510      	bpl.n	800b7a4 <_printf_float+0x24c>
 800b782:	ee18 3a10 	vmov	r3, s16
 800b786:	4652      	mov	r2, sl
 800b788:	4631      	mov	r1, r6
 800b78a:	4628      	mov	r0, r5
 800b78c:	47b8      	blx	r7
 800b78e:	3001      	adds	r0, #1
 800b790:	f43f af41 	beq.w	800b616 <_printf_float+0xbe>
 800b794:	f04f 0800 	mov.w	r8, #0
 800b798:	f104 091a 	add.w	r9, r4, #26
 800b79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	4543      	cmp	r3, r8
 800b7a2:	dc09      	bgt.n	800b7b8 <_printf_float+0x260>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	079b      	lsls	r3, r3, #30
 800b7a8:	f100 8107 	bmi.w	800b9ba <_printf_float+0x462>
 800b7ac:	68e0      	ldr	r0, [r4, #12]
 800b7ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b0:	4298      	cmp	r0, r3
 800b7b2:	bfb8      	it	lt
 800b7b4:	4618      	movlt	r0, r3
 800b7b6:	e730      	b.n	800b61a <_printf_float+0xc2>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	464a      	mov	r2, r9
 800b7bc:	4631      	mov	r1, r6
 800b7be:	4628      	mov	r0, r5
 800b7c0:	47b8      	blx	r7
 800b7c2:	3001      	adds	r0, #1
 800b7c4:	f43f af27 	beq.w	800b616 <_printf_float+0xbe>
 800b7c8:	f108 0801 	add.w	r8, r8, #1
 800b7cc:	e7e6      	b.n	800b79c <_printf_float+0x244>
 800b7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dc39      	bgt.n	800b848 <_printf_float+0x2f0>
 800b7d4:	4a1b      	ldr	r2, [pc, #108]	; (800b844 <_printf_float+0x2ec>)
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	47b8      	blx	r7
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f43f af19 	beq.w	800b616 <_printf_float+0xbe>
 800b7e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	d102      	bne.n	800b7f2 <_printf_float+0x29a>
 800b7ec:	6823      	ldr	r3, [r4, #0]
 800b7ee:	07d9      	lsls	r1, r3, #31
 800b7f0:	d5d8      	bpl.n	800b7a4 <_printf_float+0x24c>
 800b7f2:	ee18 3a10 	vmov	r3, s16
 800b7f6:	4652      	mov	r2, sl
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	f43f af09 	beq.w	800b616 <_printf_float+0xbe>
 800b804:	f04f 0900 	mov.w	r9, #0
 800b808:	f104 0a1a 	add.w	sl, r4, #26
 800b80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80e:	425b      	negs	r3, r3
 800b810:	454b      	cmp	r3, r9
 800b812:	dc01      	bgt.n	800b818 <_printf_float+0x2c0>
 800b814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b816:	e792      	b.n	800b73e <_printf_float+0x1e6>
 800b818:	2301      	movs	r3, #1
 800b81a:	4652      	mov	r2, sl
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f aef7 	beq.w	800b616 <_printf_float+0xbe>
 800b828:	f109 0901 	add.w	r9, r9, #1
 800b82c:	e7ee      	b.n	800b80c <_printf_float+0x2b4>
 800b82e:	bf00      	nop
 800b830:	7fefffff 	.word	0x7fefffff
 800b834:	08013b4c 	.word	0x08013b4c
 800b838:	08013b50 	.word	0x08013b50
 800b83c:	08013b54 	.word	0x08013b54
 800b840:	08013b58 	.word	0x08013b58
 800b844:	08013c6e 	.word	0x08013c6e
 800b848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b84a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b84c:	429a      	cmp	r2, r3
 800b84e:	bfa8      	it	ge
 800b850:	461a      	movge	r2, r3
 800b852:	2a00      	cmp	r2, #0
 800b854:	4691      	mov	r9, r2
 800b856:	dc37      	bgt.n	800b8c8 <_printf_float+0x370>
 800b858:	f04f 0b00 	mov.w	fp, #0
 800b85c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b860:	f104 021a 	add.w	r2, r4, #26
 800b864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b866:	9305      	str	r3, [sp, #20]
 800b868:	eba3 0309 	sub.w	r3, r3, r9
 800b86c:	455b      	cmp	r3, fp
 800b86e:	dc33      	bgt.n	800b8d8 <_printf_float+0x380>
 800b870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b874:	429a      	cmp	r2, r3
 800b876:	db3b      	blt.n	800b8f0 <_printf_float+0x398>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	07da      	lsls	r2, r3, #31
 800b87c:	d438      	bmi.n	800b8f0 <_printf_float+0x398>
 800b87e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b882:	eba2 0903 	sub.w	r9, r2, r3
 800b886:	9b05      	ldr	r3, [sp, #20]
 800b888:	1ad2      	subs	r2, r2, r3
 800b88a:	4591      	cmp	r9, r2
 800b88c:	bfa8      	it	ge
 800b88e:	4691      	movge	r9, r2
 800b890:	f1b9 0f00 	cmp.w	r9, #0
 800b894:	dc35      	bgt.n	800b902 <_printf_float+0x3aa>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b89e:	f104 0a1a 	add.w	sl, r4, #26
 800b8a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8a6:	1a9b      	subs	r3, r3, r2
 800b8a8:	eba3 0309 	sub.w	r3, r3, r9
 800b8ac:	4543      	cmp	r3, r8
 800b8ae:	f77f af79 	ble.w	800b7a4 <_printf_float+0x24c>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4652      	mov	r2, sl
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b8      	blx	r7
 800b8bc:	3001      	adds	r0, #1
 800b8be:	f43f aeaa 	beq.w	800b616 <_printf_float+0xbe>
 800b8c2:	f108 0801 	add.w	r8, r8, #1
 800b8c6:	e7ec      	b.n	800b8a2 <_printf_float+0x34a>
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	47b8      	blx	r7
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d1c0      	bne.n	800b858 <_printf_float+0x300>
 800b8d6:	e69e      	b.n	800b616 <_printf_float+0xbe>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	9205      	str	r2, [sp, #20]
 800b8e0:	47b8      	blx	r7
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f43f ae97 	beq.w	800b616 <_printf_float+0xbe>
 800b8e8:	9a05      	ldr	r2, [sp, #20]
 800b8ea:	f10b 0b01 	add.w	fp, fp, #1
 800b8ee:	e7b9      	b.n	800b864 <_printf_float+0x30c>
 800b8f0:	ee18 3a10 	vmov	r3, s16
 800b8f4:	4652      	mov	r2, sl
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	47b8      	blx	r7
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d1be      	bne.n	800b87e <_printf_float+0x326>
 800b900:	e689      	b.n	800b616 <_printf_float+0xbe>
 800b902:	9a05      	ldr	r2, [sp, #20]
 800b904:	464b      	mov	r3, r9
 800b906:	4442      	add	r2, r8
 800b908:	4631      	mov	r1, r6
 800b90a:	4628      	mov	r0, r5
 800b90c:	47b8      	blx	r7
 800b90e:	3001      	adds	r0, #1
 800b910:	d1c1      	bne.n	800b896 <_printf_float+0x33e>
 800b912:	e680      	b.n	800b616 <_printf_float+0xbe>
 800b914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b916:	2a01      	cmp	r2, #1
 800b918:	dc01      	bgt.n	800b91e <_printf_float+0x3c6>
 800b91a:	07db      	lsls	r3, r3, #31
 800b91c:	d53a      	bpl.n	800b994 <_printf_float+0x43c>
 800b91e:	2301      	movs	r3, #1
 800b920:	4642      	mov	r2, r8
 800b922:	4631      	mov	r1, r6
 800b924:	4628      	mov	r0, r5
 800b926:	47b8      	blx	r7
 800b928:	3001      	adds	r0, #1
 800b92a:	f43f ae74 	beq.w	800b616 <_printf_float+0xbe>
 800b92e:	ee18 3a10 	vmov	r3, s16
 800b932:	4652      	mov	r2, sl
 800b934:	4631      	mov	r1, r6
 800b936:	4628      	mov	r0, r5
 800b938:	47b8      	blx	r7
 800b93a:	3001      	adds	r0, #1
 800b93c:	f43f ae6b 	beq.w	800b616 <_printf_float+0xbe>
 800b940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b944:	2200      	movs	r2, #0
 800b946:	2300      	movs	r3, #0
 800b948:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b94c:	f7f5 f8dc 	bl	8000b08 <__aeabi_dcmpeq>
 800b950:	b9d8      	cbnz	r0, 800b98a <_printf_float+0x432>
 800b952:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b956:	f108 0201 	add.w	r2, r8, #1
 800b95a:	4631      	mov	r1, r6
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	d10e      	bne.n	800b982 <_printf_float+0x42a>
 800b964:	e657      	b.n	800b616 <_printf_float+0xbe>
 800b966:	2301      	movs	r3, #1
 800b968:	4652      	mov	r2, sl
 800b96a:	4631      	mov	r1, r6
 800b96c:	4628      	mov	r0, r5
 800b96e:	47b8      	blx	r7
 800b970:	3001      	adds	r0, #1
 800b972:	f43f ae50 	beq.w	800b616 <_printf_float+0xbe>
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b97c:	3b01      	subs	r3, #1
 800b97e:	4543      	cmp	r3, r8
 800b980:	dcf1      	bgt.n	800b966 <_printf_float+0x40e>
 800b982:	464b      	mov	r3, r9
 800b984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b988:	e6da      	b.n	800b740 <_printf_float+0x1e8>
 800b98a:	f04f 0800 	mov.w	r8, #0
 800b98e:	f104 0a1a 	add.w	sl, r4, #26
 800b992:	e7f2      	b.n	800b97a <_printf_float+0x422>
 800b994:	2301      	movs	r3, #1
 800b996:	4642      	mov	r2, r8
 800b998:	e7df      	b.n	800b95a <_printf_float+0x402>
 800b99a:	2301      	movs	r3, #1
 800b99c:	464a      	mov	r2, r9
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	47b8      	blx	r7
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f43f ae36 	beq.w	800b616 <_printf_float+0xbe>
 800b9aa:	f108 0801 	add.w	r8, r8, #1
 800b9ae:	68e3      	ldr	r3, [r4, #12]
 800b9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b9b2:	1a5b      	subs	r3, r3, r1
 800b9b4:	4543      	cmp	r3, r8
 800b9b6:	dcf0      	bgt.n	800b99a <_printf_float+0x442>
 800b9b8:	e6f8      	b.n	800b7ac <_printf_float+0x254>
 800b9ba:	f04f 0800 	mov.w	r8, #0
 800b9be:	f104 0919 	add.w	r9, r4, #25
 800b9c2:	e7f4      	b.n	800b9ae <_printf_float+0x456>

0800b9c4 <_printf_common>:
 800b9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c8:	4616      	mov	r6, r2
 800b9ca:	4699      	mov	r9, r3
 800b9cc:	688a      	ldr	r2, [r1, #8]
 800b9ce:	690b      	ldr	r3, [r1, #16]
 800b9d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	bfb8      	it	lt
 800b9d8:	4613      	movlt	r3, r2
 800b9da:	6033      	str	r3, [r6, #0]
 800b9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9e0:	4607      	mov	r7, r0
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	b10a      	cbz	r2, 800b9ea <_printf_common+0x26>
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	6033      	str	r3, [r6, #0]
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	0699      	lsls	r1, r3, #26
 800b9ee:	bf42      	ittt	mi
 800b9f0:	6833      	ldrmi	r3, [r6, #0]
 800b9f2:	3302      	addmi	r3, #2
 800b9f4:	6033      	strmi	r3, [r6, #0]
 800b9f6:	6825      	ldr	r5, [r4, #0]
 800b9f8:	f015 0506 	ands.w	r5, r5, #6
 800b9fc:	d106      	bne.n	800ba0c <_printf_common+0x48>
 800b9fe:	f104 0a19 	add.w	sl, r4, #25
 800ba02:	68e3      	ldr	r3, [r4, #12]
 800ba04:	6832      	ldr	r2, [r6, #0]
 800ba06:	1a9b      	subs	r3, r3, r2
 800ba08:	42ab      	cmp	r3, r5
 800ba0a:	dc26      	bgt.n	800ba5a <_printf_common+0x96>
 800ba0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba10:	1e13      	subs	r3, r2, #0
 800ba12:	6822      	ldr	r2, [r4, #0]
 800ba14:	bf18      	it	ne
 800ba16:	2301      	movne	r3, #1
 800ba18:	0692      	lsls	r2, r2, #26
 800ba1a:	d42b      	bmi.n	800ba74 <_printf_common+0xb0>
 800ba1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba20:	4649      	mov	r1, r9
 800ba22:	4638      	mov	r0, r7
 800ba24:	47c0      	blx	r8
 800ba26:	3001      	adds	r0, #1
 800ba28:	d01e      	beq.n	800ba68 <_printf_common+0xa4>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	6922      	ldr	r2, [r4, #16]
 800ba2e:	f003 0306 	and.w	r3, r3, #6
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	bf02      	ittt	eq
 800ba36:	68e5      	ldreq	r5, [r4, #12]
 800ba38:	6833      	ldreq	r3, [r6, #0]
 800ba3a:	1aed      	subeq	r5, r5, r3
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	bf0c      	ite	eq
 800ba40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba44:	2500      	movne	r5, #0
 800ba46:	4293      	cmp	r3, r2
 800ba48:	bfc4      	itt	gt
 800ba4a:	1a9b      	subgt	r3, r3, r2
 800ba4c:	18ed      	addgt	r5, r5, r3
 800ba4e:	2600      	movs	r6, #0
 800ba50:	341a      	adds	r4, #26
 800ba52:	42b5      	cmp	r5, r6
 800ba54:	d11a      	bne.n	800ba8c <_printf_common+0xc8>
 800ba56:	2000      	movs	r0, #0
 800ba58:	e008      	b.n	800ba6c <_printf_common+0xa8>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4652      	mov	r2, sl
 800ba5e:	4649      	mov	r1, r9
 800ba60:	4638      	mov	r0, r7
 800ba62:	47c0      	blx	r8
 800ba64:	3001      	adds	r0, #1
 800ba66:	d103      	bne.n	800ba70 <_printf_common+0xac>
 800ba68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba70:	3501      	adds	r5, #1
 800ba72:	e7c6      	b.n	800ba02 <_printf_common+0x3e>
 800ba74:	18e1      	adds	r1, r4, r3
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	2030      	movs	r0, #48	; 0x30
 800ba7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba7e:	4422      	add	r2, r4
 800ba80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba88:	3302      	adds	r3, #2
 800ba8a:	e7c7      	b.n	800ba1c <_printf_common+0x58>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4649      	mov	r1, r9
 800ba92:	4638      	mov	r0, r7
 800ba94:	47c0      	blx	r8
 800ba96:	3001      	adds	r0, #1
 800ba98:	d0e6      	beq.n	800ba68 <_printf_common+0xa4>
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	e7d9      	b.n	800ba52 <_printf_common+0x8e>
	...

0800baa0 <_printf_i>:
 800baa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baa4:	7e0f      	ldrb	r7, [r1, #24]
 800baa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800baa8:	2f78      	cmp	r7, #120	; 0x78
 800baaa:	4691      	mov	r9, r2
 800baac:	4680      	mov	r8, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	469a      	mov	sl, r3
 800bab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bab6:	d807      	bhi.n	800bac8 <_printf_i+0x28>
 800bab8:	2f62      	cmp	r7, #98	; 0x62
 800baba:	d80a      	bhi.n	800bad2 <_printf_i+0x32>
 800babc:	2f00      	cmp	r7, #0
 800babe:	f000 80d4 	beq.w	800bc6a <_printf_i+0x1ca>
 800bac2:	2f58      	cmp	r7, #88	; 0x58
 800bac4:	f000 80c0 	beq.w	800bc48 <_printf_i+0x1a8>
 800bac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bacc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bad0:	e03a      	b.n	800bb48 <_printf_i+0xa8>
 800bad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bad6:	2b15      	cmp	r3, #21
 800bad8:	d8f6      	bhi.n	800bac8 <_printf_i+0x28>
 800bada:	a101      	add	r1, pc, #4	; (adr r1, 800bae0 <_printf_i+0x40>)
 800badc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bae0:	0800bb39 	.word	0x0800bb39
 800bae4:	0800bb4d 	.word	0x0800bb4d
 800bae8:	0800bac9 	.word	0x0800bac9
 800baec:	0800bac9 	.word	0x0800bac9
 800baf0:	0800bac9 	.word	0x0800bac9
 800baf4:	0800bac9 	.word	0x0800bac9
 800baf8:	0800bb4d 	.word	0x0800bb4d
 800bafc:	0800bac9 	.word	0x0800bac9
 800bb00:	0800bac9 	.word	0x0800bac9
 800bb04:	0800bac9 	.word	0x0800bac9
 800bb08:	0800bac9 	.word	0x0800bac9
 800bb0c:	0800bc51 	.word	0x0800bc51
 800bb10:	0800bb79 	.word	0x0800bb79
 800bb14:	0800bc0b 	.word	0x0800bc0b
 800bb18:	0800bac9 	.word	0x0800bac9
 800bb1c:	0800bac9 	.word	0x0800bac9
 800bb20:	0800bc73 	.word	0x0800bc73
 800bb24:	0800bac9 	.word	0x0800bac9
 800bb28:	0800bb79 	.word	0x0800bb79
 800bb2c:	0800bac9 	.word	0x0800bac9
 800bb30:	0800bac9 	.word	0x0800bac9
 800bb34:	0800bc13 	.word	0x0800bc13
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	1d1a      	adds	r2, r3, #4
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	602a      	str	r2, [r5, #0]
 800bb40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e09f      	b.n	800bc8c <_printf_i+0x1ec>
 800bb4c:	6820      	ldr	r0, [r4, #0]
 800bb4e:	682b      	ldr	r3, [r5, #0]
 800bb50:	0607      	lsls	r7, r0, #24
 800bb52:	f103 0104 	add.w	r1, r3, #4
 800bb56:	6029      	str	r1, [r5, #0]
 800bb58:	d501      	bpl.n	800bb5e <_printf_i+0xbe>
 800bb5a:	681e      	ldr	r6, [r3, #0]
 800bb5c:	e003      	b.n	800bb66 <_printf_i+0xc6>
 800bb5e:	0646      	lsls	r6, r0, #25
 800bb60:	d5fb      	bpl.n	800bb5a <_printf_i+0xba>
 800bb62:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb66:	2e00      	cmp	r6, #0
 800bb68:	da03      	bge.n	800bb72 <_printf_i+0xd2>
 800bb6a:	232d      	movs	r3, #45	; 0x2d
 800bb6c:	4276      	negs	r6, r6
 800bb6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb72:	485a      	ldr	r0, [pc, #360]	; (800bcdc <_printf_i+0x23c>)
 800bb74:	230a      	movs	r3, #10
 800bb76:	e012      	b.n	800bb9e <_printf_i+0xfe>
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	6820      	ldr	r0, [r4, #0]
 800bb7c:	1d19      	adds	r1, r3, #4
 800bb7e:	6029      	str	r1, [r5, #0]
 800bb80:	0605      	lsls	r5, r0, #24
 800bb82:	d501      	bpl.n	800bb88 <_printf_i+0xe8>
 800bb84:	681e      	ldr	r6, [r3, #0]
 800bb86:	e002      	b.n	800bb8e <_printf_i+0xee>
 800bb88:	0641      	lsls	r1, r0, #25
 800bb8a:	d5fb      	bpl.n	800bb84 <_printf_i+0xe4>
 800bb8c:	881e      	ldrh	r6, [r3, #0]
 800bb8e:	4853      	ldr	r0, [pc, #332]	; (800bcdc <_printf_i+0x23c>)
 800bb90:	2f6f      	cmp	r7, #111	; 0x6f
 800bb92:	bf0c      	ite	eq
 800bb94:	2308      	moveq	r3, #8
 800bb96:	230a      	movne	r3, #10
 800bb98:	2100      	movs	r1, #0
 800bb9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb9e:	6865      	ldr	r5, [r4, #4]
 800bba0:	60a5      	str	r5, [r4, #8]
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	bfa2      	ittt	ge
 800bba6:	6821      	ldrge	r1, [r4, #0]
 800bba8:	f021 0104 	bicge.w	r1, r1, #4
 800bbac:	6021      	strge	r1, [r4, #0]
 800bbae:	b90e      	cbnz	r6, 800bbb4 <_printf_i+0x114>
 800bbb0:	2d00      	cmp	r5, #0
 800bbb2:	d04b      	beq.n	800bc4c <_printf_i+0x1ac>
 800bbb4:	4615      	mov	r5, r2
 800bbb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbba:	fb03 6711 	mls	r7, r3, r1, r6
 800bbbe:	5dc7      	ldrb	r7, [r0, r7]
 800bbc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbc4:	4637      	mov	r7, r6
 800bbc6:	42bb      	cmp	r3, r7
 800bbc8:	460e      	mov	r6, r1
 800bbca:	d9f4      	bls.n	800bbb6 <_printf_i+0x116>
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d10b      	bne.n	800bbe8 <_printf_i+0x148>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	07de      	lsls	r6, r3, #31
 800bbd4:	d508      	bpl.n	800bbe8 <_printf_i+0x148>
 800bbd6:	6923      	ldr	r3, [r4, #16]
 800bbd8:	6861      	ldr	r1, [r4, #4]
 800bbda:	4299      	cmp	r1, r3
 800bbdc:	bfde      	ittt	le
 800bbde:	2330      	movle	r3, #48	; 0x30
 800bbe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbe4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bbe8:	1b52      	subs	r2, r2, r5
 800bbea:	6122      	str	r2, [r4, #16]
 800bbec:	f8cd a000 	str.w	sl, [sp]
 800bbf0:	464b      	mov	r3, r9
 800bbf2:	aa03      	add	r2, sp, #12
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f7ff fee4 	bl	800b9c4 <_printf_common>
 800bbfc:	3001      	adds	r0, #1
 800bbfe:	d14a      	bne.n	800bc96 <_printf_i+0x1f6>
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc04:	b004      	add	sp, #16
 800bc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	f043 0320 	orr.w	r3, r3, #32
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	4833      	ldr	r0, [pc, #204]	; (800bce0 <_printf_i+0x240>)
 800bc14:	2778      	movs	r7, #120	; 0x78
 800bc16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	061f      	lsls	r7, r3, #24
 800bc20:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc24:	d402      	bmi.n	800bc2c <_printf_i+0x18c>
 800bc26:	065f      	lsls	r7, r3, #25
 800bc28:	bf48      	it	mi
 800bc2a:	b2b6      	uxthmi	r6, r6
 800bc2c:	07df      	lsls	r7, r3, #31
 800bc2e:	bf48      	it	mi
 800bc30:	f043 0320 	orrmi.w	r3, r3, #32
 800bc34:	6029      	str	r1, [r5, #0]
 800bc36:	bf48      	it	mi
 800bc38:	6023      	strmi	r3, [r4, #0]
 800bc3a:	b91e      	cbnz	r6, 800bc44 <_printf_i+0x1a4>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	f023 0320 	bic.w	r3, r3, #32
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	2310      	movs	r3, #16
 800bc46:	e7a7      	b.n	800bb98 <_printf_i+0xf8>
 800bc48:	4824      	ldr	r0, [pc, #144]	; (800bcdc <_printf_i+0x23c>)
 800bc4a:	e7e4      	b.n	800bc16 <_printf_i+0x176>
 800bc4c:	4615      	mov	r5, r2
 800bc4e:	e7bd      	b.n	800bbcc <_printf_i+0x12c>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	6826      	ldr	r6, [r4, #0]
 800bc54:	6961      	ldr	r1, [r4, #20]
 800bc56:	1d18      	adds	r0, r3, #4
 800bc58:	6028      	str	r0, [r5, #0]
 800bc5a:	0635      	lsls	r5, r6, #24
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	d501      	bpl.n	800bc64 <_printf_i+0x1c4>
 800bc60:	6019      	str	r1, [r3, #0]
 800bc62:	e002      	b.n	800bc6a <_printf_i+0x1ca>
 800bc64:	0670      	lsls	r0, r6, #25
 800bc66:	d5fb      	bpl.n	800bc60 <_printf_i+0x1c0>
 800bc68:	8019      	strh	r1, [r3, #0]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	6123      	str	r3, [r4, #16]
 800bc6e:	4615      	mov	r5, r2
 800bc70:	e7bc      	b.n	800bbec <_printf_i+0x14c>
 800bc72:	682b      	ldr	r3, [r5, #0]
 800bc74:	1d1a      	adds	r2, r3, #4
 800bc76:	602a      	str	r2, [r5, #0]
 800bc78:	681d      	ldr	r5, [r3, #0]
 800bc7a:	6862      	ldr	r2, [r4, #4]
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f7f4 fac6 	bl	8000210 <memchr>
 800bc84:	b108      	cbz	r0, 800bc8a <_printf_i+0x1ea>
 800bc86:	1b40      	subs	r0, r0, r5
 800bc88:	6060      	str	r0, [r4, #4]
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	6123      	str	r3, [r4, #16]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc94:	e7aa      	b.n	800bbec <_printf_i+0x14c>
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4649      	mov	r1, r9
 800bc9c:	4640      	mov	r0, r8
 800bc9e:	47d0      	blx	sl
 800bca0:	3001      	adds	r0, #1
 800bca2:	d0ad      	beq.n	800bc00 <_printf_i+0x160>
 800bca4:	6823      	ldr	r3, [r4, #0]
 800bca6:	079b      	lsls	r3, r3, #30
 800bca8:	d413      	bmi.n	800bcd2 <_printf_i+0x232>
 800bcaa:	68e0      	ldr	r0, [r4, #12]
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	4298      	cmp	r0, r3
 800bcb0:	bfb8      	it	lt
 800bcb2:	4618      	movlt	r0, r3
 800bcb4:	e7a6      	b.n	800bc04 <_printf_i+0x164>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4632      	mov	r2, r6
 800bcba:	4649      	mov	r1, r9
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	47d0      	blx	sl
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d09d      	beq.n	800bc00 <_printf_i+0x160>
 800bcc4:	3501      	adds	r5, #1
 800bcc6:	68e3      	ldr	r3, [r4, #12]
 800bcc8:	9903      	ldr	r1, [sp, #12]
 800bcca:	1a5b      	subs	r3, r3, r1
 800bccc:	42ab      	cmp	r3, r5
 800bcce:	dcf2      	bgt.n	800bcb6 <_printf_i+0x216>
 800bcd0:	e7eb      	b.n	800bcaa <_printf_i+0x20a>
 800bcd2:	2500      	movs	r5, #0
 800bcd4:	f104 0619 	add.w	r6, r4, #25
 800bcd8:	e7f5      	b.n	800bcc6 <_printf_i+0x226>
 800bcda:	bf00      	nop
 800bcdc:	08013b5c 	.word	0x08013b5c
 800bce0:	08013b6d 	.word	0x08013b6d

0800bce4 <sniprintf>:
 800bce4:	b40c      	push	{r2, r3}
 800bce6:	b530      	push	{r4, r5, lr}
 800bce8:	4b17      	ldr	r3, [pc, #92]	; (800bd48 <sniprintf+0x64>)
 800bcea:	1e0c      	subs	r4, r1, #0
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	b09d      	sub	sp, #116	; 0x74
 800bcf0:	da08      	bge.n	800bd04 <sniprintf+0x20>
 800bcf2:	238b      	movs	r3, #139	; 0x8b
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcfa:	b01d      	add	sp, #116	; 0x74
 800bcfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd00:	b002      	add	sp, #8
 800bd02:	4770      	bx	lr
 800bd04:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd0c:	bf14      	ite	ne
 800bd0e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bd12:	4623      	moveq	r3, r4
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	9307      	str	r3, [sp, #28]
 800bd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd1c:	9002      	str	r0, [sp, #8]
 800bd1e:	9006      	str	r0, [sp, #24]
 800bd20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd26:	ab21      	add	r3, sp, #132	; 0x84
 800bd28:	a902      	add	r1, sp, #8
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	f001 f96b 	bl	800d008 <_svfiprintf_r>
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	bfbc      	itt	lt
 800bd36:	238b      	movlt	r3, #139	; 0x8b
 800bd38:	602b      	strlt	r3, [r5, #0]
 800bd3a:	2c00      	cmp	r4, #0
 800bd3c:	d0dd      	beq.n	800bcfa <sniprintf+0x16>
 800bd3e:	9b02      	ldr	r3, [sp, #8]
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
 800bd44:	e7d9      	b.n	800bcfa <sniprintf+0x16>
 800bd46:	bf00      	nop
 800bd48:	2000009c 	.word	0x2000009c

0800bd4c <siprintf>:
 800bd4c:	b40e      	push	{r1, r2, r3}
 800bd4e:	b500      	push	{lr}
 800bd50:	b09c      	sub	sp, #112	; 0x70
 800bd52:	ab1d      	add	r3, sp, #116	; 0x74
 800bd54:	9002      	str	r0, [sp, #8]
 800bd56:	9006      	str	r0, [sp, #24]
 800bd58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd5c:	4809      	ldr	r0, [pc, #36]	; (800bd84 <siprintf+0x38>)
 800bd5e:	9107      	str	r1, [sp, #28]
 800bd60:	9104      	str	r1, [sp, #16]
 800bd62:	4909      	ldr	r1, [pc, #36]	; (800bd88 <siprintf+0x3c>)
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	9105      	str	r1, [sp, #20]
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	a902      	add	r1, sp, #8
 800bd70:	f001 f94a 	bl	800d008 <_svfiprintf_r>
 800bd74:	9b02      	ldr	r3, [sp, #8]
 800bd76:	2200      	movs	r2, #0
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	b01c      	add	sp, #112	; 0x70
 800bd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd80:	b003      	add	sp, #12
 800bd82:	4770      	bx	lr
 800bd84:	2000009c 	.word	0x2000009c
 800bd88:	ffff0208 	.word	0xffff0208

0800bd8c <siscanf>:
 800bd8c:	b40e      	push	{r1, r2, r3}
 800bd8e:	b510      	push	{r4, lr}
 800bd90:	b09f      	sub	sp, #124	; 0x7c
 800bd92:	ac21      	add	r4, sp, #132	; 0x84
 800bd94:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bd98:	f854 2b04 	ldr.w	r2, [r4], #4
 800bd9c:	9201      	str	r2, [sp, #4]
 800bd9e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bda2:	9004      	str	r0, [sp, #16]
 800bda4:	9008      	str	r0, [sp, #32]
 800bda6:	f7f4 fa83 	bl	80002b0 <strlen>
 800bdaa:	4b0c      	ldr	r3, [pc, #48]	; (800bddc <siscanf+0x50>)
 800bdac:	9005      	str	r0, [sp, #20]
 800bdae:	9009      	str	r0, [sp, #36]	; 0x24
 800bdb0:	930d      	str	r3, [sp, #52]	; 0x34
 800bdb2:	480b      	ldr	r0, [pc, #44]	; (800bde0 <siscanf+0x54>)
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	6800      	ldr	r0, [r0, #0]
 800bdb8:	9403      	str	r4, [sp, #12]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	9311      	str	r3, [sp, #68]	; 0x44
 800bdbe:	9316      	str	r3, [sp, #88]	; 0x58
 800bdc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bdc8:	a904      	add	r1, sp, #16
 800bdca:	4623      	mov	r3, r4
 800bdcc:	f001 fa74 	bl	800d2b8 <__ssvfiscanf_r>
 800bdd0:	b01f      	add	sp, #124	; 0x7c
 800bdd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd6:	b003      	add	sp, #12
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	0800be07 	.word	0x0800be07
 800bde0:	2000009c 	.word	0x2000009c

0800bde4 <__sread>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	460c      	mov	r4, r1
 800bde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdec:	f000 f97c 	bl	800c0e8 <_read_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	bfab      	itete	ge
 800bdf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdf6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdf8:	181b      	addge	r3, r3, r0
 800bdfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdfe:	bfac      	ite	ge
 800be00:	6563      	strge	r3, [r4, #84]	; 0x54
 800be02:	81a3      	strhlt	r3, [r4, #12]
 800be04:	bd10      	pop	{r4, pc}

0800be06 <__seofread>:
 800be06:	2000      	movs	r0, #0
 800be08:	4770      	bx	lr

0800be0a <__swrite>:
 800be0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0e:	461f      	mov	r7, r3
 800be10:	898b      	ldrh	r3, [r1, #12]
 800be12:	05db      	lsls	r3, r3, #23
 800be14:	4605      	mov	r5, r0
 800be16:	460c      	mov	r4, r1
 800be18:	4616      	mov	r6, r2
 800be1a:	d505      	bpl.n	800be28 <__swrite+0x1e>
 800be1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be20:	2302      	movs	r3, #2
 800be22:	2200      	movs	r2, #0
 800be24:	f000 f94e 	bl	800c0c4 <_lseek_r>
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	4632      	mov	r2, r6
 800be36:	463b      	mov	r3, r7
 800be38:	4628      	mov	r0, r5
 800be3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be3e:	f000 b965 	b.w	800c10c <_write_r>

0800be42 <__sseek>:
 800be42:	b510      	push	{r4, lr}
 800be44:	460c      	mov	r4, r1
 800be46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be4a:	f000 f93b 	bl	800c0c4 <_lseek_r>
 800be4e:	1c43      	adds	r3, r0, #1
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	bf15      	itete	ne
 800be54:	6560      	strne	r0, [r4, #84]	; 0x54
 800be56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be5e:	81a3      	strheq	r3, [r4, #12]
 800be60:	bf18      	it	ne
 800be62:	81a3      	strhne	r3, [r4, #12]
 800be64:	bd10      	pop	{r4, pc}

0800be66 <__sclose>:
 800be66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6a:	f000 b91b 	b.w	800c0a4 <_close_r>
	...

0800be70 <std>:
 800be70:	2300      	movs	r3, #0
 800be72:	b510      	push	{r4, lr}
 800be74:	4604      	mov	r4, r0
 800be76:	e9c0 3300 	strd	r3, r3, [r0]
 800be7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be7e:	6083      	str	r3, [r0, #8]
 800be80:	8181      	strh	r1, [r0, #12]
 800be82:	6643      	str	r3, [r0, #100]	; 0x64
 800be84:	81c2      	strh	r2, [r0, #14]
 800be86:	6183      	str	r3, [r0, #24]
 800be88:	4619      	mov	r1, r3
 800be8a:	2208      	movs	r2, #8
 800be8c:	305c      	adds	r0, #92	; 0x5c
 800be8e:	f000 f8fd 	bl	800c08c <memset>
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <std+0x58>)
 800be94:	6263      	str	r3, [r4, #36]	; 0x24
 800be96:	4b0d      	ldr	r3, [pc, #52]	; (800becc <std+0x5c>)
 800be98:	62a3      	str	r3, [r4, #40]	; 0x28
 800be9a:	4b0d      	ldr	r3, [pc, #52]	; (800bed0 <std+0x60>)
 800be9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be9e:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <std+0x64>)
 800bea0:	6323      	str	r3, [r4, #48]	; 0x30
 800bea2:	4b0d      	ldr	r3, [pc, #52]	; (800bed8 <std+0x68>)
 800bea4:	6224      	str	r4, [r4, #32]
 800bea6:	429c      	cmp	r4, r3
 800bea8:	d006      	beq.n	800beb8 <std+0x48>
 800beaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800beae:	4294      	cmp	r4, r2
 800beb0:	d002      	beq.n	800beb8 <std+0x48>
 800beb2:	33d0      	adds	r3, #208	; 0xd0
 800beb4:	429c      	cmp	r4, r3
 800beb6:	d105      	bne.n	800bec4 <std+0x54>
 800beb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec0:	f000 b960 	b.w	800c184 <__retarget_lock_init_recursive>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	bf00      	nop
 800bec8:	0800bde5 	.word	0x0800bde5
 800becc:	0800be0b 	.word	0x0800be0b
 800bed0:	0800be43 	.word	0x0800be43
 800bed4:	0800be67 	.word	0x0800be67
 800bed8:	20008fdc 	.word	0x20008fdc

0800bedc <stdio_exit_handler>:
 800bedc:	4a02      	ldr	r2, [pc, #8]	; (800bee8 <stdio_exit_handler+0xc>)
 800bede:	4903      	ldr	r1, [pc, #12]	; (800beec <stdio_exit_handler+0x10>)
 800bee0:	4803      	ldr	r0, [pc, #12]	; (800bef0 <stdio_exit_handler+0x14>)
 800bee2:	f000 b869 	b.w	800bfb8 <_fwalk_sglue>
 800bee6:	bf00      	nop
 800bee8:	20000044 	.word	0x20000044
 800beec:	0800dd9d 	.word	0x0800dd9d
 800bef0:	20000050 	.word	0x20000050

0800bef4 <cleanup_stdio>:
 800bef4:	6841      	ldr	r1, [r0, #4]
 800bef6:	4b0c      	ldr	r3, [pc, #48]	; (800bf28 <cleanup_stdio+0x34>)
 800bef8:	4299      	cmp	r1, r3
 800befa:	b510      	push	{r4, lr}
 800befc:	4604      	mov	r4, r0
 800befe:	d001      	beq.n	800bf04 <cleanup_stdio+0x10>
 800bf00:	f001 ff4c 	bl	800dd9c <_fflush_r>
 800bf04:	68a1      	ldr	r1, [r4, #8]
 800bf06:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <cleanup_stdio+0x38>)
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d002      	beq.n	800bf12 <cleanup_stdio+0x1e>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f001 ff45 	bl	800dd9c <_fflush_r>
 800bf12:	68e1      	ldr	r1, [r4, #12]
 800bf14:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <cleanup_stdio+0x3c>)
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d004      	beq.n	800bf24 <cleanup_stdio+0x30>
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf20:	f001 bf3c 	b.w	800dd9c <_fflush_r>
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	bf00      	nop
 800bf28:	20008fdc 	.word	0x20008fdc
 800bf2c:	20009044 	.word	0x20009044
 800bf30:	200090ac 	.word	0x200090ac

0800bf34 <global_stdio_init.part.0>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <global_stdio_init.part.0+0x30>)
 800bf38:	4c0b      	ldr	r4, [pc, #44]	; (800bf68 <global_stdio_init.part.0+0x34>)
 800bf3a:	4a0c      	ldr	r2, [pc, #48]	; (800bf6c <global_stdio_init.part.0+0x38>)
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	2200      	movs	r2, #0
 800bf42:	2104      	movs	r1, #4
 800bf44:	f7ff ff94 	bl	800be70 <std>
 800bf48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	2109      	movs	r1, #9
 800bf50:	f7ff ff8e 	bl	800be70 <std>
 800bf54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf58:	2202      	movs	r2, #2
 800bf5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf5e:	2112      	movs	r1, #18
 800bf60:	f7ff bf86 	b.w	800be70 <std>
 800bf64:	20009114 	.word	0x20009114
 800bf68:	20008fdc 	.word	0x20008fdc
 800bf6c:	0800bedd 	.word	0x0800bedd

0800bf70 <__sfp_lock_acquire>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__sfp_lock_acquire+0x8>)
 800bf72:	f000 b908 	b.w	800c186 <__retarget_lock_acquire_recursive>
 800bf76:	bf00      	nop
 800bf78:	2000911d 	.word	0x2000911d

0800bf7c <__sfp_lock_release>:
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__sfp_lock_release+0x8>)
 800bf7e:	f000 b903 	b.w	800c188 <__retarget_lock_release_recursive>
 800bf82:	bf00      	nop
 800bf84:	2000911d 	.word	0x2000911d

0800bf88 <__sinit>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	f7ff fff0 	bl	800bf70 <__sfp_lock_acquire>
 800bf90:	6a23      	ldr	r3, [r4, #32]
 800bf92:	b11b      	cbz	r3, 800bf9c <__sinit+0x14>
 800bf94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf98:	f7ff bff0 	b.w	800bf7c <__sfp_lock_release>
 800bf9c:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <__sinit+0x28>)
 800bf9e:	6223      	str	r3, [r4, #32]
 800bfa0:	4b04      	ldr	r3, [pc, #16]	; (800bfb4 <__sinit+0x2c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1f5      	bne.n	800bf94 <__sinit+0xc>
 800bfa8:	f7ff ffc4 	bl	800bf34 <global_stdio_init.part.0>
 800bfac:	e7f2      	b.n	800bf94 <__sinit+0xc>
 800bfae:	bf00      	nop
 800bfb0:	0800bef5 	.word	0x0800bef5
 800bfb4:	20009114 	.word	0x20009114

0800bfb8 <_fwalk_sglue>:
 800bfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	4688      	mov	r8, r1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfc8:	f1b9 0901 	subs.w	r9, r9, #1
 800bfcc:	d505      	bpl.n	800bfda <_fwalk_sglue+0x22>
 800bfce:	6824      	ldr	r4, [r4, #0]
 800bfd0:	2c00      	cmp	r4, #0
 800bfd2:	d1f7      	bne.n	800bfc4 <_fwalk_sglue+0xc>
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfda:	89ab      	ldrh	r3, [r5, #12]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d907      	bls.n	800bff0 <_fwalk_sglue+0x38>
 800bfe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	d003      	beq.n	800bff0 <_fwalk_sglue+0x38>
 800bfe8:	4629      	mov	r1, r5
 800bfea:	4638      	mov	r0, r7
 800bfec:	47c0      	blx	r8
 800bfee:	4306      	orrs	r6, r0
 800bff0:	3568      	adds	r5, #104	; 0x68
 800bff2:	e7e9      	b.n	800bfc8 <_fwalk_sglue+0x10>

0800bff4 <_vsniprintf_r>:
 800bff4:	b530      	push	{r4, r5, lr}
 800bff6:	4614      	mov	r4, r2
 800bff8:	2c00      	cmp	r4, #0
 800bffa:	b09b      	sub	sp, #108	; 0x6c
 800bffc:	4605      	mov	r5, r0
 800bffe:	461a      	mov	r2, r3
 800c000:	da05      	bge.n	800c00e <_vsniprintf_r+0x1a>
 800c002:	238b      	movs	r3, #139	; 0x8b
 800c004:	6003      	str	r3, [r0, #0]
 800c006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c00a:	b01b      	add	sp, #108	; 0x6c
 800c00c:	bd30      	pop	{r4, r5, pc}
 800c00e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c012:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c016:	bf14      	ite	ne
 800c018:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c01c:	4623      	moveq	r3, r4
 800c01e:	9302      	str	r3, [sp, #8]
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c026:	9100      	str	r1, [sp, #0]
 800c028:	9104      	str	r1, [sp, #16]
 800c02a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c02e:	4669      	mov	r1, sp
 800c030:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c032:	f000 ffe9 	bl	800d008 <_svfiprintf_r>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	bfbc      	itt	lt
 800c03a:	238b      	movlt	r3, #139	; 0x8b
 800c03c:	602b      	strlt	r3, [r5, #0]
 800c03e:	2c00      	cmp	r4, #0
 800c040:	d0e3      	beq.n	800c00a <_vsniprintf_r+0x16>
 800c042:	9b00      	ldr	r3, [sp, #0]
 800c044:	2200      	movs	r2, #0
 800c046:	701a      	strb	r2, [r3, #0]
 800c048:	e7df      	b.n	800c00a <_vsniprintf_r+0x16>
	...

0800c04c <vsniprintf>:
 800c04c:	b507      	push	{r0, r1, r2, lr}
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	460a      	mov	r2, r1
 800c054:	4601      	mov	r1, r0
 800c056:	4803      	ldr	r0, [pc, #12]	; (800c064 <vsniprintf+0x18>)
 800c058:	6800      	ldr	r0, [r0, #0]
 800c05a:	f7ff ffcb 	bl	800bff4 <_vsniprintf_r>
 800c05e:	b003      	add	sp, #12
 800c060:	f85d fb04 	ldr.w	pc, [sp], #4
 800c064:	2000009c 	.word	0x2000009c

0800c068 <iprintf>:
 800c068:	b40f      	push	{r0, r1, r2, r3}
 800c06a:	b507      	push	{r0, r1, r2, lr}
 800c06c:	4906      	ldr	r1, [pc, #24]	; (800c088 <iprintf+0x20>)
 800c06e:	ab04      	add	r3, sp, #16
 800c070:	6808      	ldr	r0, [r1, #0]
 800c072:	f853 2b04 	ldr.w	r2, [r3], #4
 800c076:	6881      	ldr	r1, [r0, #8]
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	f001 fabf 	bl	800d5fc <_vfiprintf_r>
 800c07e:	b003      	add	sp, #12
 800c080:	f85d eb04 	ldr.w	lr, [sp], #4
 800c084:	b004      	add	sp, #16
 800c086:	4770      	bx	lr
 800c088:	2000009c 	.word	0x2000009c

0800c08c <memset>:
 800c08c:	4402      	add	r2, r0
 800c08e:	4603      	mov	r3, r0
 800c090:	4293      	cmp	r3, r2
 800c092:	d100      	bne.n	800c096 <memset+0xa>
 800c094:	4770      	bx	lr
 800c096:	f803 1b01 	strb.w	r1, [r3], #1
 800c09a:	e7f9      	b.n	800c090 <memset+0x4>

0800c09c <_localeconv_r>:
 800c09c:	4800      	ldr	r0, [pc, #0]	; (800c0a0 <_localeconv_r+0x4>)
 800c09e:	4770      	bx	lr
 800c0a0:	20000190 	.word	0x20000190

0800c0a4 <_close_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4d06      	ldr	r5, [pc, #24]	; (800c0c0 <_close_r+0x1c>)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	602b      	str	r3, [r5, #0]
 800c0b0:	f7f8 fb13 	bl	80046da <_close>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_close_r+0x1a>
 800c0b8:	682b      	ldr	r3, [r5, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_close_r+0x1a>
 800c0bc:	6023      	str	r3, [r4, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	20009118 	.word	0x20009118

0800c0c4 <_lseek_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d07      	ldr	r5, [pc, #28]	; (800c0e4 <_lseek_r+0x20>)
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	4608      	mov	r0, r1
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	602a      	str	r2, [r5, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f7f8 fb28 	bl	8004728 <_lseek>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_lseek_r+0x1e>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_lseek_r+0x1e>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	20009118 	.word	0x20009118

0800c0e8 <_read_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4d07      	ldr	r5, [pc, #28]	; (800c108 <_read_r+0x20>)
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	602a      	str	r2, [r5, #0]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	f7f8 fab6 	bl	8004668 <_read>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_read_r+0x1e>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_read_r+0x1e>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20009118 	.word	0x20009118

0800c10c <_write_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	; (800c12c <_write_r+0x20>)
 800c110:	4604      	mov	r4, r0
 800c112:	4608      	mov	r0, r1
 800c114:	4611      	mov	r1, r2
 800c116:	2200      	movs	r2, #0
 800c118:	602a      	str	r2, [r5, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	f7f8 fac1 	bl	80046a2 <_write>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_write_r+0x1e>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_write_r+0x1e>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	20009118 	.word	0x20009118

0800c130 <__errno>:
 800c130:	4b01      	ldr	r3, [pc, #4]	; (800c138 <__errno+0x8>)
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	2000009c 	.word	0x2000009c

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4d0d      	ldr	r5, [pc, #52]	; (800c174 <__libc_init_array+0x38>)
 800c140:	4c0d      	ldr	r4, [pc, #52]	; (800c178 <__libc_init_array+0x3c>)
 800c142:	1b64      	subs	r4, r4, r5
 800c144:	10a4      	asrs	r4, r4, #2
 800c146:	2600      	movs	r6, #0
 800c148:	42a6      	cmp	r6, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	4d0b      	ldr	r5, [pc, #44]	; (800c17c <__libc_init_array+0x40>)
 800c14e:	4c0c      	ldr	r4, [pc, #48]	; (800c180 <__libc_init_array+0x44>)
 800c150:	f003 f952 	bl	800f3f8 <_init>
 800c154:	1b64      	subs	r4, r4, r5
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	2600      	movs	r6, #0
 800c15a:	42a6      	cmp	r6, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	f855 3b04 	ldr.w	r3, [r5], #4
 800c164:	4798      	blx	r3
 800c166:	3601      	adds	r6, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16e:	4798      	blx	r3
 800c170:	3601      	adds	r6, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	08013ee0 	.word	0x08013ee0
 800c178:	08013ee0 	.word	0x08013ee0
 800c17c:	08013ee0 	.word	0x08013ee0
 800c180:	08013ee4 	.word	0x08013ee4

0800c184 <__retarget_lock_init_recursive>:
 800c184:	4770      	bx	lr

0800c186 <__retarget_lock_acquire_recursive>:
 800c186:	4770      	bx	lr

0800c188 <__retarget_lock_release_recursive>:
 800c188:	4770      	bx	lr
	...

0800c18c <__assert_func>:
 800c18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c18e:	4614      	mov	r4, r2
 800c190:	461a      	mov	r2, r3
 800c192:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <__assert_func+0x2c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4605      	mov	r5, r0
 800c198:	68d8      	ldr	r0, [r3, #12]
 800c19a:	b14c      	cbz	r4, 800c1b0 <__assert_func+0x24>
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <__assert_func+0x30>)
 800c19e:	9100      	str	r1, [sp, #0]
 800c1a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1a4:	4906      	ldr	r1, [pc, #24]	; (800c1c0 <__assert_func+0x34>)
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	f002 f9a8 	bl	800e4fc <fiprintf>
 800c1ac:	f002 fc6c 	bl	800ea88 <abort>
 800c1b0:	4b04      	ldr	r3, [pc, #16]	; (800c1c4 <__assert_func+0x38>)
 800c1b2:	461c      	mov	r4, r3
 800c1b4:	e7f3      	b.n	800c19e <__assert_func+0x12>
 800c1b6:	bf00      	nop
 800c1b8:	2000009c 	.word	0x2000009c
 800c1bc:	08013b7e 	.word	0x08013b7e
 800c1c0:	08013b8b 	.word	0x08013b8b
 800c1c4:	08013bb9 	.word	0x08013bb9

0800c1c8 <quorem>:
 800c1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	6903      	ldr	r3, [r0, #16]
 800c1ce:	690c      	ldr	r4, [r1, #16]
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	db7e      	blt.n	800c2d4 <quorem+0x10c>
 800c1d6:	3c01      	subs	r4, #1
 800c1d8:	f101 0814 	add.w	r8, r1, #20
 800c1dc:	f100 0514 	add.w	r5, r0, #20
 800c1e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1fe:	d331      	bcc.n	800c264 <quorem+0x9c>
 800c200:	f04f 0e00 	mov.w	lr, #0
 800c204:	4640      	mov	r0, r8
 800c206:	46ac      	mov	ip, r5
 800c208:	46f2      	mov	sl, lr
 800c20a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c20e:	b293      	uxth	r3, r2
 800c210:	fb06 e303 	mla	r3, r6, r3, lr
 800c214:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c218:	0c1a      	lsrs	r2, r3, #16
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	ebaa 0303 	sub.w	r3, sl, r3
 800c220:	f8dc a000 	ldr.w	sl, [ip]
 800c224:	fa13 f38a 	uxtah	r3, r3, sl
 800c228:	fb06 220e 	mla	r2, r6, lr, r2
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	9b00      	ldr	r3, [sp, #0]
 800c230:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c234:	b292      	uxth	r2, r2
 800c236:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c23a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c23e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c242:	4581      	cmp	r9, r0
 800c244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c248:	f84c 3b04 	str.w	r3, [ip], #4
 800c24c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c250:	d2db      	bcs.n	800c20a <quorem+0x42>
 800c252:	f855 300b 	ldr.w	r3, [r5, fp]
 800c256:	b92b      	cbnz	r3, 800c264 <quorem+0x9c>
 800c258:	9b01      	ldr	r3, [sp, #4]
 800c25a:	3b04      	subs	r3, #4
 800c25c:	429d      	cmp	r5, r3
 800c25e:	461a      	mov	r2, r3
 800c260:	d32c      	bcc.n	800c2bc <quorem+0xf4>
 800c262:	613c      	str	r4, [r7, #16]
 800c264:	4638      	mov	r0, r7
 800c266:	f002 f849 	bl	800e2fc <__mcmp>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	db22      	blt.n	800c2b4 <quorem+0xec>
 800c26e:	3601      	adds	r6, #1
 800c270:	4629      	mov	r1, r5
 800c272:	2000      	movs	r0, #0
 800c274:	f858 2b04 	ldr.w	r2, [r8], #4
 800c278:	f8d1 c000 	ldr.w	ip, [r1]
 800c27c:	b293      	uxth	r3, r2
 800c27e:	1ac3      	subs	r3, r0, r3
 800c280:	0c12      	lsrs	r2, r2, #16
 800c282:	fa13 f38c 	uxtah	r3, r3, ip
 800c286:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c28a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c28e:	b29b      	uxth	r3, r3
 800c290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c294:	45c1      	cmp	r9, r8
 800c296:	f841 3b04 	str.w	r3, [r1], #4
 800c29a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c29e:	d2e9      	bcs.n	800c274 <quorem+0xac>
 800c2a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2a8:	b922      	cbnz	r2, 800c2b4 <quorem+0xec>
 800c2aa:	3b04      	subs	r3, #4
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	d30a      	bcc.n	800c2c8 <quorem+0x100>
 800c2b2:	613c      	str	r4, [r7, #16]
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	b003      	add	sp, #12
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	6812      	ldr	r2, [r2, #0]
 800c2be:	3b04      	subs	r3, #4
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	d1ce      	bne.n	800c262 <quorem+0x9a>
 800c2c4:	3c01      	subs	r4, #1
 800c2c6:	e7c9      	b.n	800c25c <quorem+0x94>
 800c2c8:	6812      	ldr	r2, [r2, #0]
 800c2ca:	3b04      	subs	r3, #4
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	d1f0      	bne.n	800c2b2 <quorem+0xea>
 800c2d0:	3c01      	subs	r4, #1
 800c2d2:	e7eb      	b.n	800c2ac <quorem+0xe4>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e7ee      	b.n	800c2b6 <quorem+0xee>

0800c2d8 <_dtoa_r>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	ed2d 8b04 	vpush	{d8-d9}
 800c2e0:	69c5      	ldr	r5, [r0, #28]
 800c2e2:	b093      	sub	sp, #76	; 0x4c
 800c2e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2e8:	ec57 6b10 	vmov	r6, r7, d0
 800c2ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2f0:	9107      	str	r1, [sp, #28]
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c2f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2f8:	b975      	cbnz	r5, 800c318 <_dtoa_r+0x40>
 800c2fa:	2010      	movs	r0, #16
 800c2fc:	f001 fa98 	bl	800d830 <malloc>
 800c300:	4602      	mov	r2, r0
 800c302:	61e0      	str	r0, [r4, #28]
 800c304:	b920      	cbnz	r0, 800c310 <_dtoa_r+0x38>
 800c306:	4bae      	ldr	r3, [pc, #696]	; (800c5c0 <_dtoa_r+0x2e8>)
 800c308:	21ef      	movs	r1, #239	; 0xef
 800c30a:	48ae      	ldr	r0, [pc, #696]	; (800c5c4 <_dtoa_r+0x2ec>)
 800c30c:	f7ff ff3e 	bl	800c18c <__assert_func>
 800c310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c314:	6005      	str	r5, [r0, #0]
 800c316:	60c5      	str	r5, [r0, #12]
 800c318:	69e3      	ldr	r3, [r4, #28]
 800c31a:	6819      	ldr	r1, [r3, #0]
 800c31c:	b151      	cbz	r1, 800c334 <_dtoa_r+0x5c>
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	604a      	str	r2, [r1, #4]
 800c322:	2301      	movs	r3, #1
 800c324:	4093      	lsls	r3, r2
 800c326:	608b      	str	r3, [r1, #8]
 800c328:	4620      	mov	r0, r4
 800c32a:	f001 fdab 	bl	800de84 <_Bfree>
 800c32e:	69e3      	ldr	r3, [r4, #28]
 800c330:	2200      	movs	r2, #0
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	1e3b      	subs	r3, r7, #0
 800c336:	bfbb      	ittet	lt
 800c338:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c33c:	9303      	strlt	r3, [sp, #12]
 800c33e:	2300      	movge	r3, #0
 800c340:	2201      	movlt	r2, #1
 800c342:	bfac      	ite	ge
 800c344:	f8c8 3000 	strge.w	r3, [r8]
 800c348:	f8c8 2000 	strlt.w	r2, [r8]
 800c34c:	4b9e      	ldr	r3, [pc, #632]	; (800c5c8 <_dtoa_r+0x2f0>)
 800c34e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c352:	ea33 0308 	bics.w	r3, r3, r8
 800c356:	d11b      	bne.n	800c390 <_dtoa_r+0xb8>
 800c358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c35a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c364:	4333      	orrs	r3, r6
 800c366:	f000 8593 	beq.w	800ce90 <_dtoa_r+0xbb8>
 800c36a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c36c:	b963      	cbnz	r3, 800c388 <_dtoa_r+0xb0>
 800c36e:	4b97      	ldr	r3, [pc, #604]	; (800c5cc <_dtoa_r+0x2f4>)
 800c370:	e027      	b.n	800c3c2 <_dtoa_r+0xea>
 800c372:	4b97      	ldr	r3, [pc, #604]	; (800c5d0 <_dtoa_r+0x2f8>)
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	3308      	adds	r3, #8
 800c378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	9800      	ldr	r0, [sp, #0]
 800c37e:	b013      	add	sp, #76	; 0x4c
 800c380:	ecbd 8b04 	vpop	{d8-d9}
 800c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c388:	4b90      	ldr	r3, [pc, #576]	; (800c5cc <_dtoa_r+0x2f4>)
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	3303      	adds	r3, #3
 800c38e:	e7f3      	b.n	800c378 <_dtoa_r+0xa0>
 800c390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c394:	2200      	movs	r2, #0
 800c396:	ec51 0b17 	vmov	r0, r1, d7
 800c39a:	eeb0 8a47 	vmov.f32	s16, s14
 800c39e:	eef0 8a67 	vmov.f32	s17, s15
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f7f4 fbb0 	bl	8000b08 <__aeabi_dcmpeq>
 800c3a8:	4681      	mov	r9, r0
 800c3aa:	b160      	cbz	r0, 800c3c6 <_dtoa_r+0xee>
 800c3ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f000 8568 	beq.w	800ce8a <_dtoa_r+0xbb2>
 800c3ba:	4b86      	ldr	r3, [pc, #536]	; (800c5d4 <_dtoa_r+0x2fc>)
 800c3bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	e7da      	b.n	800c37c <_dtoa_r+0xa4>
 800c3c6:	aa10      	add	r2, sp, #64	; 0x40
 800c3c8:	a911      	add	r1, sp, #68	; 0x44
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800c3d0:	eef0 0a68 	vmov.f32	s1, s17
 800c3d4:	f002 f838 	bl	800e448 <__d2b>
 800c3d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3dc:	4682      	mov	sl, r0
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	d07f      	beq.n	800c4e2 <_dtoa_r+0x20a>
 800c3e2:	ee18 3a90 	vmov	r3, s17
 800c3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c3ee:	ec51 0b18 	vmov	r0, r1, d8
 800c3f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c3fe:	4619      	mov	r1, r3
 800c400:	2200      	movs	r2, #0
 800c402:	4b75      	ldr	r3, [pc, #468]	; (800c5d8 <_dtoa_r+0x300>)
 800c404:	f7f3 ff60 	bl	80002c8 <__aeabi_dsub>
 800c408:	a367      	add	r3, pc, #412	; (adr r3, 800c5a8 <_dtoa_r+0x2d0>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	f7f4 f913 	bl	8000638 <__aeabi_dmul>
 800c412:	a367      	add	r3, pc, #412	; (adr r3, 800c5b0 <_dtoa_r+0x2d8>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 ff58 	bl	80002cc <__adddf3>
 800c41c:	4606      	mov	r6, r0
 800c41e:	4628      	mov	r0, r5
 800c420:	460f      	mov	r7, r1
 800c422:	f7f4 f89f 	bl	8000564 <__aeabi_i2d>
 800c426:	a364      	add	r3, pc, #400	; (adr r3, 800c5b8 <_dtoa_r+0x2e0>)
 800c428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42c:	f7f4 f904 	bl	8000638 <__aeabi_dmul>
 800c430:	4602      	mov	r2, r0
 800c432:	460b      	mov	r3, r1
 800c434:	4630      	mov	r0, r6
 800c436:	4639      	mov	r1, r7
 800c438:	f7f3 ff48 	bl	80002cc <__adddf3>
 800c43c:	4606      	mov	r6, r0
 800c43e:	460f      	mov	r7, r1
 800c440:	f7f4 fbaa 	bl	8000b98 <__aeabi_d2iz>
 800c444:	2200      	movs	r2, #0
 800c446:	4683      	mov	fp, r0
 800c448:	2300      	movs	r3, #0
 800c44a:	4630      	mov	r0, r6
 800c44c:	4639      	mov	r1, r7
 800c44e:	f7f4 fb65 	bl	8000b1c <__aeabi_dcmplt>
 800c452:	b148      	cbz	r0, 800c468 <_dtoa_r+0x190>
 800c454:	4658      	mov	r0, fp
 800c456:	f7f4 f885 	bl	8000564 <__aeabi_i2d>
 800c45a:	4632      	mov	r2, r6
 800c45c:	463b      	mov	r3, r7
 800c45e:	f7f4 fb53 	bl	8000b08 <__aeabi_dcmpeq>
 800c462:	b908      	cbnz	r0, 800c468 <_dtoa_r+0x190>
 800c464:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c468:	f1bb 0f16 	cmp.w	fp, #22
 800c46c:	d857      	bhi.n	800c51e <_dtoa_r+0x246>
 800c46e:	4b5b      	ldr	r3, [pc, #364]	; (800c5dc <_dtoa_r+0x304>)
 800c470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	ec51 0b18 	vmov	r0, r1, d8
 800c47c:	f7f4 fb4e 	bl	8000b1c <__aeabi_dcmplt>
 800c480:	2800      	cmp	r0, #0
 800c482:	d04e      	beq.n	800c522 <_dtoa_r+0x24a>
 800c484:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c488:	2300      	movs	r3, #0
 800c48a:	930c      	str	r3, [sp, #48]	; 0x30
 800c48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c48e:	1b5b      	subs	r3, r3, r5
 800c490:	1e5a      	subs	r2, r3, #1
 800c492:	bf45      	ittet	mi
 800c494:	f1c3 0301 	rsbmi	r3, r3, #1
 800c498:	9305      	strmi	r3, [sp, #20]
 800c49a:	2300      	movpl	r3, #0
 800c49c:	2300      	movmi	r3, #0
 800c49e:	9206      	str	r2, [sp, #24]
 800c4a0:	bf54      	ite	pl
 800c4a2:	9305      	strpl	r3, [sp, #20]
 800c4a4:	9306      	strmi	r3, [sp, #24]
 800c4a6:	f1bb 0f00 	cmp.w	fp, #0
 800c4aa:	db3c      	blt.n	800c526 <_dtoa_r+0x24e>
 800c4ac:	9b06      	ldr	r3, [sp, #24]
 800c4ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c4b2:	445b      	add	r3, fp
 800c4b4:	9306      	str	r3, [sp, #24]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9308      	str	r3, [sp, #32]
 800c4ba:	9b07      	ldr	r3, [sp, #28]
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d868      	bhi.n	800c592 <_dtoa_r+0x2ba>
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	bfc4      	itt	gt
 800c4c4:	3b04      	subgt	r3, #4
 800c4c6:	9307      	strgt	r3, [sp, #28]
 800c4c8:	9b07      	ldr	r3, [sp, #28]
 800c4ca:	f1a3 0302 	sub.w	r3, r3, #2
 800c4ce:	bfcc      	ite	gt
 800c4d0:	2500      	movgt	r5, #0
 800c4d2:	2501      	movle	r5, #1
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	f200 8085 	bhi.w	800c5e4 <_dtoa_r+0x30c>
 800c4da:	e8df f003 	tbb	[pc, r3]
 800c4de:	3b2e      	.short	0x3b2e
 800c4e0:	5839      	.short	0x5839
 800c4e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4e6:	441d      	add	r5, r3
 800c4e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4ec:	2b20      	cmp	r3, #32
 800c4ee:	bfc1      	itttt	gt
 800c4f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c4fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c500:	bfd6      	itet	le
 800c502:	f1c3 0320 	rsble	r3, r3, #32
 800c506:	ea48 0003 	orrgt.w	r0, r8, r3
 800c50a:	fa06 f003 	lslle.w	r0, r6, r3
 800c50e:	f7f4 f819 	bl	8000544 <__aeabi_ui2d>
 800c512:	2201      	movs	r2, #1
 800c514:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c518:	3d01      	subs	r5, #1
 800c51a:	920e      	str	r2, [sp, #56]	; 0x38
 800c51c:	e76f      	b.n	800c3fe <_dtoa_r+0x126>
 800c51e:	2301      	movs	r3, #1
 800c520:	e7b3      	b.n	800c48a <_dtoa_r+0x1b2>
 800c522:	900c      	str	r0, [sp, #48]	; 0x30
 800c524:	e7b2      	b.n	800c48c <_dtoa_r+0x1b4>
 800c526:	9b05      	ldr	r3, [sp, #20]
 800c528:	eba3 030b 	sub.w	r3, r3, fp
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	f1cb 0300 	rsb	r3, fp, #0
 800c532:	9308      	str	r3, [sp, #32]
 800c534:	2300      	movs	r3, #0
 800c536:	930b      	str	r3, [sp, #44]	; 0x2c
 800c538:	e7bf      	b.n	800c4ba <_dtoa_r+0x1e2>
 800c53a:	2300      	movs	r3, #0
 800c53c:	9309      	str	r3, [sp, #36]	; 0x24
 800c53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c540:	2b00      	cmp	r3, #0
 800c542:	dc52      	bgt.n	800c5ea <_dtoa_r+0x312>
 800c544:	2301      	movs	r3, #1
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	9304      	str	r3, [sp, #16]
 800c54a:	461a      	mov	r2, r3
 800c54c:	920a      	str	r2, [sp, #40]	; 0x28
 800c54e:	e00b      	b.n	800c568 <_dtoa_r+0x290>
 800c550:	2301      	movs	r3, #1
 800c552:	e7f3      	b.n	800c53c <_dtoa_r+0x264>
 800c554:	2300      	movs	r3, #0
 800c556:	9309      	str	r3, [sp, #36]	; 0x24
 800c558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55a:	445b      	add	r3, fp
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	3301      	adds	r3, #1
 800c560:	2b01      	cmp	r3, #1
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	bfb8      	it	lt
 800c566:	2301      	movlt	r3, #1
 800c568:	69e0      	ldr	r0, [r4, #28]
 800c56a:	2100      	movs	r1, #0
 800c56c:	2204      	movs	r2, #4
 800c56e:	f102 0614 	add.w	r6, r2, #20
 800c572:	429e      	cmp	r6, r3
 800c574:	d93d      	bls.n	800c5f2 <_dtoa_r+0x31a>
 800c576:	6041      	str	r1, [r0, #4]
 800c578:	4620      	mov	r0, r4
 800c57a:	f001 fc43 	bl	800de04 <_Balloc>
 800c57e:	9000      	str	r0, [sp, #0]
 800c580:	2800      	cmp	r0, #0
 800c582:	d139      	bne.n	800c5f8 <_dtoa_r+0x320>
 800c584:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <_dtoa_r+0x308>)
 800c586:	4602      	mov	r2, r0
 800c588:	f240 11af 	movw	r1, #431	; 0x1af
 800c58c:	e6bd      	b.n	800c30a <_dtoa_r+0x32>
 800c58e:	2301      	movs	r3, #1
 800c590:	e7e1      	b.n	800c556 <_dtoa_r+0x27e>
 800c592:	2501      	movs	r5, #1
 800c594:	2300      	movs	r3, #0
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	9509      	str	r5, [sp, #36]	; 0x24
 800c59a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c59e:	9301      	str	r3, [sp, #4]
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2312      	movs	r3, #18
 800c5a6:	e7d1      	b.n	800c54c <_dtoa_r+0x274>
 800c5a8:	636f4361 	.word	0x636f4361
 800c5ac:	3fd287a7 	.word	0x3fd287a7
 800c5b0:	8b60c8b3 	.word	0x8b60c8b3
 800c5b4:	3fc68a28 	.word	0x3fc68a28
 800c5b8:	509f79fb 	.word	0x509f79fb
 800c5bc:	3fd34413 	.word	0x3fd34413
 800c5c0:	08013bc7 	.word	0x08013bc7
 800c5c4:	08013bde 	.word	0x08013bde
 800c5c8:	7ff00000 	.word	0x7ff00000
 800c5cc:	08013bc3 	.word	0x08013bc3
 800c5d0:	08013bba 	.word	0x08013bba
 800c5d4:	08013c6f 	.word	0x08013c6f
 800c5d8:	3ff80000 	.word	0x3ff80000
 800c5dc:	08013cf8 	.word	0x08013cf8
 800c5e0:	08013c36 	.word	0x08013c36
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e8:	e7d7      	b.n	800c59a <_dtoa_r+0x2c2>
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	9304      	str	r3, [sp, #16]
 800c5f0:	e7ba      	b.n	800c568 <_dtoa_r+0x290>
 800c5f2:	3101      	adds	r1, #1
 800c5f4:	0052      	lsls	r2, r2, #1
 800c5f6:	e7ba      	b.n	800c56e <_dtoa_r+0x296>
 800c5f8:	69e3      	ldr	r3, [r4, #28]
 800c5fa:	9a00      	ldr	r2, [sp, #0]
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	2b0e      	cmp	r3, #14
 800c602:	f200 80a8 	bhi.w	800c756 <_dtoa_r+0x47e>
 800c606:	2d00      	cmp	r5, #0
 800c608:	f000 80a5 	beq.w	800c756 <_dtoa_r+0x47e>
 800c60c:	f1bb 0f00 	cmp.w	fp, #0
 800c610:	dd38      	ble.n	800c684 <_dtoa_r+0x3ac>
 800c612:	4bc0      	ldr	r3, [pc, #768]	; (800c914 <_dtoa_r+0x63c>)
 800c614:	f00b 020f 	and.w	r2, fp, #15
 800c618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c61c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c620:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c624:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c628:	d019      	beq.n	800c65e <_dtoa_r+0x386>
 800c62a:	4bbb      	ldr	r3, [pc, #748]	; (800c918 <_dtoa_r+0x640>)
 800c62c:	ec51 0b18 	vmov	r0, r1, d8
 800c630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c634:	f7f4 f92a 	bl	800088c <__aeabi_ddiv>
 800c638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63c:	f008 080f 	and.w	r8, r8, #15
 800c640:	2503      	movs	r5, #3
 800c642:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c918 <_dtoa_r+0x640>
 800c646:	f1b8 0f00 	cmp.w	r8, #0
 800c64a:	d10a      	bne.n	800c662 <_dtoa_r+0x38a>
 800c64c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c650:	4632      	mov	r2, r6
 800c652:	463b      	mov	r3, r7
 800c654:	f7f4 f91a 	bl	800088c <__aeabi_ddiv>
 800c658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c65c:	e02b      	b.n	800c6b6 <_dtoa_r+0x3de>
 800c65e:	2502      	movs	r5, #2
 800c660:	e7ef      	b.n	800c642 <_dtoa_r+0x36a>
 800c662:	f018 0f01 	tst.w	r8, #1
 800c666:	d008      	beq.n	800c67a <_dtoa_r+0x3a2>
 800c668:	4630      	mov	r0, r6
 800c66a:	4639      	mov	r1, r7
 800c66c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c670:	f7f3 ffe2 	bl	8000638 <__aeabi_dmul>
 800c674:	3501      	adds	r5, #1
 800c676:	4606      	mov	r6, r0
 800c678:	460f      	mov	r7, r1
 800c67a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c67e:	f109 0908 	add.w	r9, r9, #8
 800c682:	e7e0      	b.n	800c646 <_dtoa_r+0x36e>
 800c684:	f000 809f 	beq.w	800c7c6 <_dtoa_r+0x4ee>
 800c688:	f1cb 0600 	rsb	r6, fp, #0
 800c68c:	4ba1      	ldr	r3, [pc, #644]	; (800c914 <_dtoa_r+0x63c>)
 800c68e:	4fa2      	ldr	r7, [pc, #648]	; (800c918 <_dtoa_r+0x640>)
 800c690:	f006 020f 	and.w	r2, r6, #15
 800c694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	ec51 0b18 	vmov	r0, r1, d8
 800c6a0:	f7f3 ffca 	bl	8000638 <__aeabi_dmul>
 800c6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6a8:	1136      	asrs	r6, r6, #4
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2502      	movs	r5, #2
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	d17e      	bne.n	800c7b0 <_dtoa_r+0x4d8>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1d0      	bne.n	800c658 <_dtoa_r+0x380>
 800c6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f000 8084 	beq.w	800c7ca <_dtoa_r+0x4f2>
 800c6c2:	4b96      	ldr	r3, [pc, #600]	; (800c91c <_dtoa_r+0x644>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	f7f4 fa27 	bl	8000b1c <__aeabi_dcmplt>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d07b      	beq.n	800c7ca <_dtoa_r+0x4f2>
 800c6d2:	9b04      	ldr	r3, [sp, #16]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d078      	beq.n	800c7ca <_dtoa_r+0x4f2>
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd39      	ble.n	800c752 <_dtoa_r+0x47a>
 800c6de:	4b90      	ldr	r3, [pc, #576]	; (800c920 <_dtoa_r+0x648>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	f7f3 ffa7 	bl	8000638 <__aeabi_dmul>
 800c6ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ee:	9e01      	ldr	r6, [sp, #4]
 800c6f0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f7f3 ff32 	bl	8000564 <__aeabi_i2d>
 800c700:	4642      	mov	r2, r8
 800c702:	464b      	mov	r3, r9
 800c704:	f7f3 ff98 	bl	8000638 <__aeabi_dmul>
 800c708:	4b86      	ldr	r3, [pc, #536]	; (800c924 <_dtoa_r+0x64c>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	f7f3 fdde 	bl	80002cc <__adddf3>
 800c710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c718:	9303      	str	r3, [sp, #12]
 800c71a:	2e00      	cmp	r6, #0
 800c71c:	d158      	bne.n	800c7d0 <_dtoa_r+0x4f8>
 800c71e:	4b82      	ldr	r3, [pc, #520]	; (800c928 <_dtoa_r+0x650>)
 800c720:	2200      	movs	r2, #0
 800c722:	4640      	mov	r0, r8
 800c724:	4649      	mov	r1, r9
 800c726:	f7f3 fdcf 	bl	80002c8 <__aeabi_dsub>
 800c72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c72e:	4680      	mov	r8, r0
 800c730:	4689      	mov	r9, r1
 800c732:	f7f4 fa11 	bl	8000b58 <__aeabi_dcmpgt>
 800c736:	2800      	cmp	r0, #0
 800c738:	f040 8296 	bne.w	800cc68 <_dtoa_r+0x990>
 800c73c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c740:	4640      	mov	r0, r8
 800c742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c746:	4649      	mov	r1, r9
 800c748:	f7f4 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	f040 8289 	bne.w	800cc64 <_dtoa_r+0x98c>
 800c752:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f2c0 814e 	blt.w	800c9fa <_dtoa_r+0x722>
 800c75e:	f1bb 0f0e 	cmp.w	fp, #14
 800c762:	f300 814a 	bgt.w	800c9fa <_dtoa_r+0x722>
 800c766:	4b6b      	ldr	r3, [pc, #428]	; (800c914 <_dtoa_r+0x63c>)
 800c768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c76c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c772:	2b00      	cmp	r3, #0
 800c774:	f280 80dc 	bge.w	800c930 <_dtoa_r+0x658>
 800c778:	9b04      	ldr	r3, [sp, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f300 80d8 	bgt.w	800c930 <_dtoa_r+0x658>
 800c780:	f040 826f 	bne.w	800cc62 <_dtoa_r+0x98a>
 800c784:	4b68      	ldr	r3, [pc, #416]	; (800c928 <_dtoa_r+0x650>)
 800c786:	2200      	movs	r2, #0
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f7f3 ff54 	bl	8000638 <__aeabi_dmul>
 800c790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c794:	f7f4 f9d6 	bl	8000b44 <__aeabi_dcmpge>
 800c798:	9e04      	ldr	r6, [sp, #16]
 800c79a:	4637      	mov	r7, r6
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f040 8245 	bne.w	800cc2c <_dtoa_r+0x954>
 800c7a2:	9d00      	ldr	r5, [sp, #0]
 800c7a4:	2331      	movs	r3, #49	; 0x31
 800c7a6:	f805 3b01 	strb.w	r3, [r5], #1
 800c7aa:	f10b 0b01 	add.w	fp, fp, #1
 800c7ae:	e241      	b.n	800cc34 <_dtoa_r+0x95c>
 800c7b0:	07f2      	lsls	r2, r6, #31
 800c7b2:	d505      	bpl.n	800c7c0 <_dtoa_r+0x4e8>
 800c7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b8:	f7f3 ff3e 	bl	8000638 <__aeabi_dmul>
 800c7bc:	3501      	adds	r5, #1
 800c7be:	2301      	movs	r3, #1
 800c7c0:	1076      	asrs	r6, r6, #1
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	e773      	b.n	800c6ae <_dtoa_r+0x3d6>
 800c7c6:	2502      	movs	r5, #2
 800c7c8:	e775      	b.n	800c6b6 <_dtoa_r+0x3de>
 800c7ca:	9e04      	ldr	r6, [sp, #16]
 800c7cc:	465f      	mov	r7, fp
 800c7ce:	e792      	b.n	800c6f6 <_dtoa_r+0x41e>
 800c7d0:	9900      	ldr	r1, [sp, #0]
 800c7d2:	4b50      	ldr	r3, [pc, #320]	; (800c914 <_dtoa_r+0x63c>)
 800c7d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7d8:	4431      	add	r1, r6
 800c7da:	9102      	str	r1, [sp, #8]
 800c7dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7de:	eeb0 9a47 	vmov.f32	s18, s14
 800c7e2:	eef0 9a67 	vmov.f32	s19, s15
 800c7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7ee:	2900      	cmp	r1, #0
 800c7f0:	d044      	beq.n	800c87c <_dtoa_r+0x5a4>
 800c7f2:	494e      	ldr	r1, [pc, #312]	; (800c92c <_dtoa_r+0x654>)
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	f7f4 f849 	bl	800088c <__aeabi_ddiv>
 800c7fa:	ec53 2b19 	vmov	r2, r3, d9
 800c7fe:	f7f3 fd63 	bl	80002c8 <__aeabi_dsub>
 800c802:	9d00      	ldr	r5, [sp, #0]
 800c804:	ec41 0b19 	vmov	d9, r0, r1
 800c808:	4649      	mov	r1, r9
 800c80a:	4640      	mov	r0, r8
 800c80c:	f7f4 f9c4 	bl	8000b98 <__aeabi_d2iz>
 800c810:	4606      	mov	r6, r0
 800c812:	f7f3 fea7 	bl	8000564 <__aeabi_i2d>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f3 fd53 	bl	80002c8 <__aeabi_dsub>
 800c822:	3630      	adds	r6, #48	; 0x30
 800c824:	f805 6b01 	strb.w	r6, [r5], #1
 800c828:	ec53 2b19 	vmov	r2, r3, d9
 800c82c:	4680      	mov	r8, r0
 800c82e:	4689      	mov	r9, r1
 800c830:	f7f4 f974 	bl	8000b1c <__aeabi_dcmplt>
 800c834:	2800      	cmp	r0, #0
 800c836:	d164      	bne.n	800c902 <_dtoa_r+0x62a>
 800c838:	4642      	mov	r2, r8
 800c83a:	464b      	mov	r3, r9
 800c83c:	4937      	ldr	r1, [pc, #220]	; (800c91c <_dtoa_r+0x644>)
 800c83e:	2000      	movs	r0, #0
 800c840:	f7f3 fd42 	bl	80002c8 <__aeabi_dsub>
 800c844:	ec53 2b19 	vmov	r2, r3, d9
 800c848:	f7f4 f968 	bl	8000b1c <__aeabi_dcmplt>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f040 80b6 	bne.w	800c9be <_dtoa_r+0x6e6>
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	429d      	cmp	r5, r3
 800c856:	f43f af7c 	beq.w	800c752 <_dtoa_r+0x47a>
 800c85a:	4b31      	ldr	r3, [pc, #196]	; (800c920 <_dtoa_r+0x648>)
 800c85c:	ec51 0b19 	vmov	r0, r1, d9
 800c860:	2200      	movs	r2, #0
 800c862:	f7f3 fee9 	bl	8000638 <__aeabi_dmul>
 800c866:	4b2e      	ldr	r3, [pc, #184]	; (800c920 <_dtoa_r+0x648>)
 800c868:	ec41 0b19 	vmov	d9, r0, r1
 800c86c:	2200      	movs	r2, #0
 800c86e:	4640      	mov	r0, r8
 800c870:	4649      	mov	r1, r9
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	4680      	mov	r8, r0
 800c878:	4689      	mov	r9, r1
 800c87a:	e7c5      	b.n	800c808 <_dtoa_r+0x530>
 800c87c:	ec51 0b17 	vmov	r0, r1, d7
 800c880:	f7f3 feda 	bl	8000638 <__aeabi_dmul>
 800c884:	9b02      	ldr	r3, [sp, #8]
 800c886:	9d00      	ldr	r5, [sp, #0]
 800c888:	930f      	str	r3, [sp, #60]	; 0x3c
 800c88a:	ec41 0b19 	vmov	d9, r0, r1
 800c88e:	4649      	mov	r1, r9
 800c890:	4640      	mov	r0, r8
 800c892:	f7f4 f981 	bl	8000b98 <__aeabi_d2iz>
 800c896:	4606      	mov	r6, r0
 800c898:	f7f3 fe64 	bl	8000564 <__aeabi_i2d>
 800c89c:	3630      	adds	r6, #48	; 0x30
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	f7f3 fd0f 	bl	80002c8 <__aeabi_dsub>
 800c8aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c8ae:	9b02      	ldr	r3, [sp, #8]
 800c8b0:	429d      	cmp	r5, r3
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	4689      	mov	r9, r1
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	d124      	bne.n	800c906 <_dtoa_r+0x62e>
 800c8bc:	4b1b      	ldr	r3, [pc, #108]	; (800c92c <_dtoa_r+0x654>)
 800c8be:	ec51 0b19 	vmov	r0, r1, d9
 800c8c2:	f7f3 fd03 	bl	80002cc <__adddf3>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	f7f4 f943 	bl	8000b58 <__aeabi_dcmpgt>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d173      	bne.n	800c9be <_dtoa_r+0x6e6>
 800c8d6:	ec53 2b19 	vmov	r2, r3, d9
 800c8da:	4914      	ldr	r1, [pc, #80]	; (800c92c <_dtoa_r+0x654>)
 800c8dc:	2000      	movs	r0, #0
 800c8de:	f7f3 fcf3 	bl	80002c8 <__aeabi_dsub>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	4649      	mov	r1, r9
 800c8ea:	f7f4 f917 	bl	8000b1c <__aeabi_dcmplt>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f af2f 	beq.w	800c752 <_dtoa_r+0x47a>
 800c8f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8f6:	1e6b      	subs	r3, r5, #1
 800c8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8fe:	2b30      	cmp	r3, #48	; 0x30
 800c900:	d0f8      	beq.n	800c8f4 <_dtoa_r+0x61c>
 800c902:	46bb      	mov	fp, r7
 800c904:	e04a      	b.n	800c99c <_dtoa_r+0x6c4>
 800c906:	4b06      	ldr	r3, [pc, #24]	; (800c920 <_dtoa_r+0x648>)
 800c908:	f7f3 fe96 	bl	8000638 <__aeabi_dmul>
 800c90c:	4680      	mov	r8, r0
 800c90e:	4689      	mov	r9, r1
 800c910:	e7bd      	b.n	800c88e <_dtoa_r+0x5b6>
 800c912:	bf00      	nop
 800c914:	08013cf8 	.word	0x08013cf8
 800c918:	08013cd0 	.word	0x08013cd0
 800c91c:	3ff00000 	.word	0x3ff00000
 800c920:	40240000 	.word	0x40240000
 800c924:	401c0000 	.word	0x401c0000
 800c928:	40140000 	.word	0x40140000
 800c92c:	3fe00000 	.word	0x3fe00000
 800c930:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c934:	9d00      	ldr	r5, [sp, #0]
 800c936:	4642      	mov	r2, r8
 800c938:	464b      	mov	r3, r9
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f3 ffa5 	bl	800088c <__aeabi_ddiv>
 800c942:	f7f4 f929 	bl	8000b98 <__aeabi_d2iz>
 800c946:	9001      	str	r0, [sp, #4]
 800c948:	f7f3 fe0c 	bl	8000564 <__aeabi_i2d>
 800c94c:	4642      	mov	r2, r8
 800c94e:	464b      	mov	r3, r9
 800c950:	f7f3 fe72 	bl	8000638 <__aeabi_dmul>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f3 fcb4 	bl	80002c8 <__aeabi_dsub>
 800c960:	9e01      	ldr	r6, [sp, #4]
 800c962:	9f04      	ldr	r7, [sp, #16]
 800c964:	3630      	adds	r6, #48	; 0x30
 800c966:	f805 6b01 	strb.w	r6, [r5], #1
 800c96a:	9e00      	ldr	r6, [sp, #0]
 800c96c:	1bae      	subs	r6, r5, r6
 800c96e:	42b7      	cmp	r7, r6
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	d134      	bne.n	800c9e0 <_dtoa_r+0x708>
 800c976:	f7f3 fca9 	bl	80002cc <__adddf3>
 800c97a:	4642      	mov	r2, r8
 800c97c:	464b      	mov	r3, r9
 800c97e:	4606      	mov	r6, r0
 800c980:	460f      	mov	r7, r1
 800c982:	f7f4 f8e9 	bl	8000b58 <__aeabi_dcmpgt>
 800c986:	b9c8      	cbnz	r0, 800c9bc <_dtoa_r+0x6e4>
 800c988:	4642      	mov	r2, r8
 800c98a:	464b      	mov	r3, r9
 800c98c:	4630      	mov	r0, r6
 800c98e:	4639      	mov	r1, r7
 800c990:	f7f4 f8ba 	bl	8000b08 <__aeabi_dcmpeq>
 800c994:	b110      	cbz	r0, 800c99c <_dtoa_r+0x6c4>
 800c996:	9b01      	ldr	r3, [sp, #4]
 800c998:	07db      	lsls	r3, r3, #31
 800c99a:	d40f      	bmi.n	800c9bc <_dtoa_r+0x6e4>
 800c99c:	4651      	mov	r1, sl
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f001 fa70 	bl	800de84 <_Bfree>
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9a8:	702b      	strb	r3, [r5, #0]
 800c9aa:	f10b 0301 	add.w	r3, fp, #1
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f43f ace2 	beq.w	800c37c <_dtoa_r+0xa4>
 800c9b8:	601d      	str	r5, [r3, #0]
 800c9ba:	e4df      	b.n	800c37c <_dtoa_r+0xa4>
 800c9bc:	465f      	mov	r7, fp
 800c9be:	462b      	mov	r3, r5
 800c9c0:	461d      	mov	r5, r3
 800c9c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9c6:	2a39      	cmp	r2, #57	; 0x39
 800c9c8:	d106      	bne.n	800c9d8 <_dtoa_r+0x700>
 800c9ca:	9a00      	ldr	r2, [sp, #0]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d1f7      	bne.n	800c9c0 <_dtoa_r+0x6e8>
 800c9d0:	9900      	ldr	r1, [sp, #0]
 800c9d2:	2230      	movs	r2, #48	; 0x30
 800c9d4:	3701      	adds	r7, #1
 800c9d6:	700a      	strb	r2, [r1, #0]
 800c9d8:	781a      	ldrb	r2, [r3, #0]
 800c9da:	3201      	adds	r2, #1
 800c9dc:	701a      	strb	r2, [r3, #0]
 800c9de:	e790      	b.n	800c902 <_dtoa_r+0x62a>
 800c9e0:	4ba3      	ldr	r3, [pc, #652]	; (800cc70 <_dtoa_r+0x998>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f7f3 fe28 	bl	8000638 <__aeabi_dmul>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	f7f4 f88a 	bl	8000b08 <__aeabi_dcmpeq>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d09e      	beq.n	800c936 <_dtoa_r+0x65e>
 800c9f8:	e7d0      	b.n	800c99c <_dtoa_r+0x6c4>
 800c9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	f000 80ca 	beq.w	800cb96 <_dtoa_r+0x8be>
 800ca02:	9a07      	ldr	r2, [sp, #28]
 800ca04:	2a01      	cmp	r2, #1
 800ca06:	f300 80ad 	bgt.w	800cb64 <_dtoa_r+0x88c>
 800ca0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca0c:	2a00      	cmp	r2, #0
 800ca0e:	f000 80a5 	beq.w	800cb5c <_dtoa_r+0x884>
 800ca12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca16:	9e08      	ldr	r6, [sp, #32]
 800ca18:	9d05      	ldr	r5, [sp, #20]
 800ca1a:	9a05      	ldr	r2, [sp, #20]
 800ca1c:	441a      	add	r2, r3
 800ca1e:	9205      	str	r2, [sp, #20]
 800ca20:	9a06      	ldr	r2, [sp, #24]
 800ca22:	2101      	movs	r1, #1
 800ca24:	441a      	add	r2, r3
 800ca26:	4620      	mov	r0, r4
 800ca28:	9206      	str	r2, [sp, #24]
 800ca2a:	f001 fae1 	bl	800dff0 <__i2b>
 800ca2e:	4607      	mov	r7, r0
 800ca30:	b165      	cbz	r5, 800ca4c <_dtoa_r+0x774>
 800ca32:	9b06      	ldr	r3, [sp, #24]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	dd09      	ble.n	800ca4c <_dtoa_r+0x774>
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	9a05      	ldr	r2, [sp, #20]
 800ca3c:	bfa8      	it	ge
 800ca3e:	462b      	movge	r3, r5
 800ca40:	1ad2      	subs	r2, r2, r3
 800ca42:	9205      	str	r2, [sp, #20]
 800ca44:	9a06      	ldr	r2, [sp, #24]
 800ca46:	1aed      	subs	r5, r5, r3
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	9306      	str	r3, [sp, #24]
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	b1f3      	cbz	r3, 800ca8e <_dtoa_r+0x7b6>
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 80a3 	beq.w	800cb9e <_dtoa_r+0x8c6>
 800ca58:	2e00      	cmp	r6, #0
 800ca5a:	dd10      	ble.n	800ca7e <_dtoa_r+0x7a6>
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	4632      	mov	r2, r6
 800ca60:	4620      	mov	r0, r4
 800ca62:	f001 fb85 	bl	800e170 <__pow5mult>
 800ca66:	4652      	mov	r2, sl
 800ca68:	4601      	mov	r1, r0
 800ca6a:	4607      	mov	r7, r0
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f001 fad5 	bl	800e01c <__multiply>
 800ca72:	4651      	mov	r1, sl
 800ca74:	4680      	mov	r8, r0
 800ca76:	4620      	mov	r0, r4
 800ca78:	f001 fa04 	bl	800de84 <_Bfree>
 800ca7c:	46c2      	mov	sl, r8
 800ca7e:	9b08      	ldr	r3, [sp, #32]
 800ca80:	1b9a      	subs	r2, r3, r6
 800ca82:	d004      	beq.n	800ca8e <_dtoa_r+0x7b6>
 800ca84:	4651      	mov	r1, sl
 800ca86:	4620      	mov	r0, r4
 800ca88:	f001 fb72 	bl	800e170 <__pow5mult>
 800ca8c:	4682      	mov	sl, r0
 800ca8e:	2101      	movs	r1, #1
 800ca90:	4620      	mov	r0, r4
 800ca92:	f001 faad 	bl	800dff0 <__i2b>
 800ca96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	f340 8081 	ble.w	800cba2 <_dtoa_r+0x8ca>
 800caa0:	461a      	mov	r2, r3
 800caa2:	4601      	mov	r1, r0
 800caa4:	4620      	mov	r0, r4
 800caa6:	f001 fb63 	bl	800e170 <__pow5mult>
 800caaa:	9b07      	ldr	r3, [sp, #28]
 800caac:	2b01      	cmp	r3, #1
 800caae:	4606      	mov	r6, r0
 800cab0:	dd7a      	ble.n	800cba8 <_dtoa_r+0x8d0>
 800cab2:	f04f 0800 	mov.w	r8, #0
 800cab6:	6933      	ldr	r3, [r6, #16]
 800cab8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cabc:	6918      	ldr	r0, [r3, #16]
 800cabe:	f001 fa49 	bl	800df54 <__hi0bits>
 800cac2:	f1c0 0020 	rsb	r0, r0, #32
 800cac6:	9b06      	ldr	r3, [sp, #24]
 800cac8:	4418      	add	r0, r3
 800caca:	f010 001f 	ands.w	r0, r0, #31
 800cace:	f000 8094 	beq.w	800cbfa <_dtoa_r+0x922>
 800cad2:	f1c0 0320 	rsb	r3, r0, #32
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	f340 8085 	ble.w	800cbe6 <_dtoa_r+0x90e>
 800cadc:	9b05      	ldr	r3, [sp, #20]
 800cade:	f1c0 001c 	rsb	r0, r0, #28
 800cae2:	4403      	add	r3, r0
 800cae4:	9305      	str	r3, [sp, #20]
 800cae6:	9b06      	ldr	r3, [sp, #24]
 800cae8:	4403      	add	r3, r0
 800caea:	4405      	add	r5, r0
 800caec:	9306      	str	r3, [sp, #24]
 800caee:	9b05      	ldr	r3, [sp, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd05      	ble.n	800cb00 <_dtoa_r+0x828>
 800caf4:	4651      	mov	r1, sl
 800caf6:	461a      	mov	r2, r3
 800caf8:	4620      	mov	r0, r4
 800cafa:	f001 fb93 	bl	800e224 <__lshift>
 800cafe:	4682      	mov	sl, r0
 800cb00:	9b06      	ldr	r3, [sp, #24]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd05      	ble.n	800cb12 <_dtoa_r+0x83a>
 800cb06:	4631      	mov	r1, r6
 800cb08:	461a      	mov	r2, r3
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f001 fb8a 	bl	800e224 <__lshift>
 800cb10:	4606      	mov	r6, r0
 800cb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d072      	beq.n	800cbfe <_dtoa_r+0x926>
 800cb18:	4631      	mov	r1, r6
 800cb1a:	4650      	mov	r0, sl
 800cb1c:	f001 fbee 	bl	800e2fc <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	da6c      	bge.n	800cbfe <_dtoa_r+0x926>
 800cb24:	2300      	movs	r3, #0
 800cb26:	4651      	mov	r1, sl
 800cb28:	220a      	movs	r2, #10
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f001 f9cc 	bl	800dec8 <__multadd>
 800cb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cb36:	4682      	mov	sl, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 81b0 	beq.w	800ce9e <_dtoa_r+0xbc6>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4639      	mov	r1, r7
 800cb42:	220a      	movs	r2, #10
 800cb44:	4620      	mov	r0, r4
 800cb46:	f001 f9bf 	bl	800dec8 <__multadd>
 800cb4a:	9b01      	ldr	r3, [sp, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	4607      	mov	r7, r0
 800cb50:	f300 8096 	bgt.w	800cc80 <_dtoa_r+0x9a8>
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	dc59      	bgt.n	800cc0e <_dtoa_r+0x936>
 800cb5a:	e091      	b.n	800cc80 <_dtoa_r+0x9a8>
 800cb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb62:	e758      	b.n	800ca16 <_dtoa_r+0x73e>
 800cb64:	9b04      	ldr	r3, [sp, #16]
 800cb66:	1e5e      	subs	r6, r3, #1
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	42b3      	cmp	r3, r6
 800cb6c:	bfbf      	itttt	lt
 800cb6e:	9b08      	ldrlt	r3, [sp, #32]
 800cb70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb72:	9608      	strlt	r6, [sp, #32]
 800cb74:	1af3      	sublt	r3, r6, r3
 800cb76:	bfb4      	ite	lt
 800cb78:	18d2      	addlt	r2, r2, r3
 800cb7a:	1b9e      	subge	r6, r3, r6
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	bfbc      	itt	lt
 800cb80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cb82:	2600      	movlt	r6, #0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	bfb7      	itett	lt
 800cb88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cb8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cb90:	1a9d      	sublt	r5, r3, r2
 800cb92:	2300      	movlt	r3, #0
 800cb94:	e741      	b.n	800ca1a <_dtoa_r+0x742>
 800cb96:	9e08      	ldr	r6, [sp, #32]
 800cb98:	9d05      	ldr	r5, [sp, #20]
 800cb9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb9c:	e748      	b.n	800ca30 <_dtoa_r+0x758>
 800cb9e:	9a08      	ldr	r2, [sp, #32]
 800cba0:	e770      	b.n	800ca84 <_dtoa_r+0x7ac>
 800cba2:	9b07      	ldr	r3, [sp, #28]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	dc19      	bgt.n	800cbdc <_dtoa_r+0x904>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	b9bb      	cbnz	r3, 800cbdc <_dtoa_r+0x904>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbb2:	b99b      	cbnz	r3, 800cbdc <_dtoa_r+0x904>
 800cbb4:	9b03      	ldr	r3, [sp, #12]
 800cbb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbba:	0d1b      	lsrs	r3, r3, #20
 800cbbc:	051b      	lsls	r3, r3, #20
 800cbbe:	b183      	cbz	r3, 800cbe2 <_dtoa_r+0x90a>
 800cbc0:	9b05      	ldr	r3, [sp, #20]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	9b06      	ldr	r3, [sp, #24]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	9306      	str	r3, [sp, #24]
 800cbcc:	f04f 0801 	mov.w	r8, #1
 800cbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f47f af6f 	bne.w	800cab6 <_dtoa_r+0x7de>
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e774      	b.n	800cac6 <_dtoa_r+0x7ee>
 800cbdc:	f04f 0800 	mov.w	r8, #0
 800cbe0:	e7f6      	b.n	800cbd0 <_dtoa_r+0x8f8>
 800cbe2:	4698      	mov	r8, r3
 800cbe4:	e7f4      	b.n	800cbd0 <_dtoa_r+0x8f8>
 800cbe6:	d082      	beq.n	800caee <_dtoa_r+0x816>
 800cbe8:	9a05      	ldr	r2, [sp, #20]
 800cbea:	331c      	adds	r3, #28
 800cbec:	441a      	add	r2, r3
 800cbee:	9205      	str	r2, [sp, #20]
 800cbf0:	9a06      	ldr	r2, [sp, #24]
 800cbf2:	441a      	add	r2, r3
 800cbf4:	441d      	add	r5, r3
 800cbf6:	9206      	str	r2, [sp, #24]
 800cbf8:	e779      	b.n	800caee <_dtoa_r+0x816>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	e7f4      	b.n	800cbe8 <_dtoa_r+0x910>
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	dc37      	bgt.n	800cc74 <_dtoa_r+0x99c>
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	dd34      	ble.n	800cc74 <_dtoa_r+0x99c>
 800cc0a:	9b04      	ldr	r3, [sp, #16]
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	b963      	cbnz	r3, 800cc2c <_dtoa_r+0x954>
 800cc12:	4631      	mov	r1, r6
 800cc14:	2205      	movs	r2, #5
 800cc16:	4620      	mov	r0, r4
 800cc18:	f001 f956 	bl	800dec8 <__multadd>
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	4606      	mov	r6, r0
 800cc20:	4650      	mov	r0, sl
 800cc22:	f001 fb6b 	bl	800e2fc <__mcmp>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	f73f adbb 	bgt.w	800c7a2 <_dtoa_r+0x4ca>
 800cc2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc2e:	9d00      	ldr	r5, [sp, #0]
 800cc30:	ea6f 0b03 	mvn.w	fp, r3
 800cc34:	f04f 0800 	mov.w	r8, #0
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f001 f922 	bl	800de84 <_Bfree>
 800cc40:	2f00      	cmp	r7, #0
 800cc42:	f43f aeab 	beq.w	800c99c <_dtoa_r+0x6c4>
 800cc46:	f1b8 0f00 	cmp.w	r8, #0
 800cc4a:	d005      	beq.n	800cc58 <_dtoa_r+0x980>
 800cc4c:	45b8      	cmp	r8, r7
 800cc4e:	d003      	beq.n	800cc58 <_dtoa_r+0x980>
 800cc50:	4641      	mov	r1, r8
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 f916 	bl	800de84 <_Bfree>
 800cc58:	4639      	mov	r1, r7
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f001 f912 	bl	800de84 <_Bfree>
 800cc60:	e69c      	b.n	800c99c <_dtoa_r+0x6c4>
 800cc62:	2600      	movs	r6, #0
 800cc64:	4637      	mov	r7, r6
 800cc66:	e7e1      	b.n	800cc2c <_dtoa_r+0x954>
 800cc68:	46bb      	mov	fp, r7
 800cc6a:	4637      	mov	r7, r6
 800cc6c:	e599      	b.n	800c7a2 <_dtoa_r+0x4ca>
 800cc6e:	bf00      	nop
 800cc70:	40240000 	.word	0x40240000
 800cc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 80c8 	beq.w	800ce0c <_dtoa_r+0xb34>
 800cc7c:	9b04      	ldr	r3, [sp, #16]
 800cc7e:	9301      	str	r3, [sp, #4]
 800cc80:	2d00      	cmp	r5, #0
 800cc82:	dd05      	ble.n	800cc90 <_dtoa_r+0x9b8>
 800cc84:	4639      	mov	r1, r7
 800cc86:	462a      	mov	r2, r5
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f001 facb 	bl	800e224 <__lshift>
 800cc8e:	4607      	mov	r7, r0
 800cc90:	f1b8 0f00 	cmp.w	r8, #0
 800cc94:	d05b      	beq.n	800cd4e <_dtoa_r+0xa76>
 800cc96:	6879      	ldr	r1, [r7, #4]
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f001 f8b3 	bl	800de04 <_Balloc>
 800cc9e:	4605      	mov	r5, r0
 800cca0:	b928      	cbnz	r0, 800ccae <_dtoa_r+0x9d6>
 800cca2:	4b83      	ldr	r3, [pc, #524]	; (800ceb0 <_dtoa_r+0xbd8>)
 800cca4:	4602      	mov	r2, r0
 800cca6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ccaa:	f7ff bb2e 	b.w	800c30a <_dtoa_r+0x32>
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	3202      	adds	r2, #2
 800ccb2:	0092      	lsls	r2, r2, #2
 800ccb4:	f107 010c 	add.w	r1, r7, #12
 800ccb8:	300c      	adds	r0, #12
 800ccba:	f001 fed7 	bl	800ea6c <memcpy>
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f001 faae 	bl	800e224 <__lshift>
 800ccc8:	9b00      	ldr	r3, [sp, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	9308      	str	r3, [sp, #32]
 800ccd6:	9b02      	ldr	r3, [sp, #8]
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	46b8      	mov	r8, r7
 800ccde:	9306      	str	r3, [sp, #24]
 800cce0:	4607      	mov	r7, r0
 800cce2:	9b04      	ldr	r3, [sp, #16]
 800cce4:	4631      	mov	r1, r6
 800cce6:	3b01      	subs	r3, #1
 800cce8:	4650      	mov	r0, sl
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	f7ff fa6c 	bl	800c1c8 <quorem>
 800ccf0:	4641      	mov	r1, r8
 800ccf2:	9002      	str	r0, [sp, #8]
 800ccf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	f001 faff 	bl	800e2fc <__mcmp>
 800ccfe:	463a      	mov	r2, r7
 800cd00:	9005      	str	r0, [sp, #20]
 800cd02:	4631      	mov	r1, r6
 800cd04:	4620      	mov	r0, r4
 800cd06:	f001 fb15 	bl	800e334 <__mdiff>
 800cd0a:	68c2      	ldr	r2, [r0, #12]
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	bb02      	cbnz	r2, 800cd52 <_dtoa_r+0xa7a>
 800cd10:	4601      	mov	r1, r0
 800cd12:	4650      	mov	r0, sl
 800cd14:	f001 faf2 	bl	800e2fc <__mcmp>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd20:	f001 f8b0 	bl	800de84 <_Bfree>
 800cd24:	9b07      	ldr	r3, [sp, #28]
 800cd26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd28:	9d04      	ldr	r5, [sp, #16]
 800cd2a:	ea43 0102 	orr.w	r1, r3, r2
 800cd2e:	9b06      	ldr	r3, [sp, #24]
 800cd30:	4319      	orrs	r1, r3
 800cd32:	d110      	bne.n	800cd56 <_dtoa_r+0xa7e>
 800cd34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd38:	d029      	beq.n	800cd8e <_dtoa_r+0xab6>
 800cd3a:	9b05      	ldr	r3, [sp, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	dd02      	ble.n	800cd46 <_dtoa_r+0xa6e>
 800cd40:	9b02      	ldr	r3, [sp, #8]
 800cd42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	f883 9000 	strb.w	r9, [r3]
 800cd4c:	e774      	b.n	800cc38 <_dtoa_r+0x960>
 800cd4e:	4638      	mov	r0, r7
 800cd50:	e7ba      	b.n	800ccc8 <_dtoa_r+0x9f0>
 800cd52:	2201      	movs	r2, #1
 800cd54:	e7e1      	b.n	800cd1a <_dtoa_r+0xa42>
 800cd56:	9b05      	ldr	r3, [sp, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	db04      	blt.n	800cd66 <_dtoa_r+0xa8e>
 800cd5c:	9907      	ldr	r1, [sp, #28]
 800cd5e:	430b      	orrs	r3, r1
 800cd60:	9906      	ldr	r1, [sp, #24]
 800cd62:	430b      	orrs	r3, r1
 800cd64:	d120      	bne.n	800cda8 <_dtoa_r+0xad0>
 800cd66:	2a00      	cmp	r2, #0
 800cd68:	dded      	ble.n	800cd46 <_dtoa_r+0xa6e>
 800cd6a:	4651      	mov	r1, sl
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f001 fa58 	bl	800e224 <__lshift>
 800cd74:	4631      	mov	r1, r6
 800cd76:	4682      	mov	sl, r0
 800cd78:	f001 fac0 	bl	800e2fc <__mcmp>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	dc03      	bgt.n	800cd88 <_dtoa_r+0xab0>
 800cd80:	d1e1      	bne.n	800cd46 <_dtoa_r+0xa6e>
 800cd82:	f019 0f01 	tst.w	r9, #1
 800cd86:	d0de      	beq.n	800cd46 <_dtoa_r+0xa6e>
 800cd88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd8c:	d1d8      	bne.n	800cd40 <_dtoa_r+0xa68>
 800cd8e:	9a01      	ldr	r2, [sp, #4]
 800cd90:	2339      	movs	r3, #57	; 0x39
 800cd92:	7013      	strb	r3, [r2, #0]
 800cd94:	462b      	mov	r3, r5
 800cd96:	461d      	mov	r5, r3
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd9e:	2a39      	cmp	r2, #57	; 0x39
 800cda0:	d06c      	beq.n	800ce7c <_dtoa_r+0xba4>
 800cda2:	3201      	adds	r2, #1
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	e747      	b.n	800cc38 <_dtoa_r+0x960>
 800cda8:	2a00      	cmp	r2, #0
 800cdaa:	dd07      	ble.n	800cdbc <_dtoa_r+0xae4>
 800cdac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdb0:	d0ed      	beq.n	800cd8e <_dtoa_r+0xab6>
 800cdb2:	9a01      	ldr	r2, [sp, #4]
 800cdb4:	f109 0301 	add.w	r3, r9, #1
 800cdb8:	7013      	strb	r3, [r2, #0]
 800cdba:	e73d      	b.n	800cc38 <_dtoa_r+0x960>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	9a08      	ldr	r2, [sp, #32]
 800cdc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d043      	beq.n	800ce50 <_dtoa_r+0xb78>
 800cdc8:	4651      	mov	r1, sl
 800cdca:	2300      	movs	r3, #0
 800cdcc:	220a      	movs	r2, #10
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f001 f87a 	bl	800dec8 <__multadd>
 800cdd4:	45b8      	cmp	r8, r7
 800cdd6:	4682      	mov	sl, r0
 800cdd8:	f04f 0300 	mov.w	r3, #0
 800cddc:	f04f 020a 	mov.w	r2, #10
 800cde0:	4641      	mov	r1, r8
 800cde2:	4620      	mov	r0, r4
 800cde4:	d107      	bne.n	800cdf6 <_dtoa_r+0xb1e>
 800cde6:	f001 f86f 	bl	800dec8 <__multadd>
 800cdea:	4680      	mov	r8, r0
 800cdec:	4607      	mov	r7, r0
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	9304      	str	r3, [sp, #16]
 800cdf4:	e775      	b.n	800cce2 <_dtoa_r+0xa0a>
 800cdf6:	f001 f867 	bl	800dec8 <__multadd>
 800cdfa:	4639      	mov	r1, r7
 800cdfc:	4680      	mov	r8, r0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	220a      	movs	r2, #10
 800ce02:	4620      	mov	r0, r4
 800ce04:	f001 f860 	bl	800dec8 <__multadd>
 800ce08:	4607      	mov	r7, r0
 800ce0a:	e7f0      	b.n	800cdee <_dtoa_r+0xb16>
 800ce0c:	9b04      	ldr	r3, [sp, #16]
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	9d00      	ldr	r5, [sp, #0]
 800ce12:	4631      	mov	r1, r6
 800ce14:	4650      	mov	r0, sl
 800ce16:	f7ff f9d7 	bl	800c1c8 <quorem>
 800ce1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce1e:	9b00      	ldr	r3, [sp, #0]
 800ce20:	f805 9b01 	strb.w	r9, [r5], #1
 800ce24:	1aea      	subs	r2, r5, r3
 800ce26:	9b01      	ldr	r3, [sp, #4]
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	dd07      	ble.n	800ce3c <_dtoa_r+0xb64>
 800ce2c:	4651      	mov	r1, sl
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4620      	mov	r0, r4
 800ce34:	f001 f848 	bl	800dec8 <__multadd>
 800ce38:	4682      	mov	sl, r0
 800ce3a:	e7ea      	b.n	800ce12 <_dtoa_r+0xb3a>
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	bfc8      	it	gt
 800ce42:	461d      	movgt	r5, r3
 800ce44:	9b00      	ldr	r3, [sp, #0]
 800ce46:	bfd8      	it	le
 800ce48:	2501      	movle	r5, #1
 800ce4a:	441d      	add	r5, r3
 800ce4c:	f04f 0800 	mov.w	r8, #0
 800ce50:	4651      	mov	r1, sl
 800ce52:	2201      	movs	r2, #1
 800ce54:	4620      	mov	r0, r4
 800ce56:	f001 f9e5 	bl	800e224 <__lshift>
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	f001 fa4d 	bl	800e2fc <__mcmp>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	dc96      	bgt.n	800cd94 <_dtoa_r+0xabc>
 800ce66:	d102      	bne.n	800ce6e <_dtoa_r+0xb96>
 800ce68:	f019 0f01 	tst.w	r9, #1
 800ce6c:	d192      	bne.n	800cd94 <_dtoa_r+0xabc>
 800ce6e:	462b      	mov	r3, r5
 800ce70:	461d      	mov	r5, r3
 800ce72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce76:	2a30      	cmp	r2, #48	; 0x30
 800ce78:	d0fa      	beq.n	800ce70 <_dtoa_r+0xb98>
 800ce7a:	e6dd      	b.n	800cc38 <_dtoa_r+0x960>
 800ce7c:	9a00      	ldr	r2, [sp, #0]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d189      	bne.n	800cd96 <_dtoa_r+0xabe>
 800ce82:	f10b 0b01 	add.w	fp, fp, #1
 800ce86:	2331      	movs	r3, #49	; 0x31
 800ce88:	e796      	b.n	800cdb8 <_dtoa_r+0xae0>
 800ce8a:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <_dtoa_r+0xbdc>)
 800ce8c:	f7ff ba99 	b.w	800c3c2 <_dtoa_r+0xea>
 800ce90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f47f aa6d 	bne.w	800c372 <_dtoa_r+0x9a>
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <_dtoa_r+0xbe0>)
 800ce9a:	f7ff ba92 	b.w	800c3c2 <_dtoa_r+0xea>
 800ce9e:	9b01      	ldr	r3, [sp, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dcb5      	bgt.n	800ce10 <_dtoa_r+0xb38>
 800cea4:	9b07      	ldr	r3, [sp, #28]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	f73f aeb1 	bgt.w	800cc0e <_dtoa_r+0x936>
 800ceac:	e7b0      	b.n	800ce10 <_dtoa_r+0xb38>
 800ceae:	bf00      	nop
 800ceb0:	08013c36 	.word	0x08013c36
 800ceb4:	08013c6e 	.word	0x08013c6e
 800ceb8:	08013bba 	.word	0x08013bba

0800cebc <_free_r>:
 800cebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cebe:	2900      	cmp	r1, #0
 800cec0:	d044      	beq.n	800cf4c <_free_r+0x90>
 800cec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec6:	9001      	str	r0, [sp, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f1a1 0404 	sub.w	r4, r1, #4
 800cece:	bfb8      	it	lt
 800ced0:	18e4      	addlt	r4, r4, r3
 800ced2:	f000 ff8b 	bl	800ddec <__malloc_lock>
 800ced6:	4a1e      	ldr	r2, [pc, #120]	; (800cf50 <_free_r+0x94>)
 800ced8:	9801      	ldr	r0, [sp, #4]
 800ceda:	6813      	ldr	r3, [r2, #0]
 800cedc:	b933      	cbnz	r3, 800ceec <_free_r+0x30>
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	6014      	str	r4, [r2, #0]
 800cee2:	b003      	add	sp, #12
 800cee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee8:	f000 bf86 	b.w	800ddf8 <__malloc_unlock>
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	d908      	bls.n	800cf02 <_free_r+0x46>
 800cef0:	6825      	ldr	r5, [r4, #0]
 800cef2:	1961      	adds	r1, r4, r5
 800cef4:	428b      	cmp	r3, r1
 800cef6:	bf01      	itttt	eq
 800cef8:	6819      	ldreq	r1, [r3, #0]
 800cefa:	685b      	ldreq	r3, [r3, #4]
 800cefc:	1949      	addeq	r1, r1, r5
 800cefe:	6021      	streq	r1, [r4, #0]
 800cf00:	e7ed      	b.n	800cede <_free_r+0x22>
 800cf02:	461a      	mov	r2, r3
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	b10b      	cbz	r3, 800cf0c <_free_r+0x50>
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	d9fa      	bls.n	800cf02 <_free_r+0x46>
 800cf0c:	6811      	ldr	r1, [r2, #0]
 800cf0e:	1855      	adds	r5, r2, r1
 800cf10:	42a5      	cmp	r5, r4
 800cf12:	d10b      	bne.n	800cf2c <_free_r+0x70>
 800cf14:	6824      	ldr	r4, [r4, #0]
 800cf16:	4421      	add	r1, r4
 800cf18:	1854      	adds	r4, r2, r1
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	6011      	str	r1, [r2, #0]
 800cf1e:	d1e0      	bne.n	800cee2 <_free_r+0x26>
 800cf20:	681c      	ldr	r4, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	6053      	str	r3, [r2, #4]
 800cf26:	440c      	add	r4, r1
 800cf28:	6014      	str	r4, [r2, #0]
 800cf2a:	e7da      	b.n	800cee2 <_free_r+0x26>
 800cf2c:	d902      	bls.n	800cf34 <_free_r+0x78>
 800cf2e:	230c      	movs	r3, #12
 800cf30:	6003      	str	r3, [r0, #0]
 800cf32:	e7d6      	b.n	800cee2 <_free_r+0x26>
 800cf34:	6825      	ldr	r5, [r4, #0]
 800cf36:	1961      	adds	r1, r4, r5
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	bf04      	itt	eq
 800cf3c:	6819      	ldreq	r1, [r3, #0]
 800cf3e:	685b      	ldreq	r3, [r3, #4]
 800cf40:	6063      	str	r3, [r4, #4]
 800cf42:	bf04      	itt	eq
 800cf44:	1949      	addeq	r1, r1, r5
 800cf46:	6021      	streq	r1, [r4, #0]
 800cf48:	6054      	str	r4, [r2, #4]
 800cf4a:	e7ca      	b.n	800cee2 <_free_r+0x26>
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	20009120 	.word	0x20009120

0800cf54 <__ssputs_r>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	688e      	ldr	r6, [r1, #8]
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	42be      	cmp	r6, r7
 800cf5e:	680b      	ldr	r3, [r1, #0]
 800cf60:	4682      	mov	sl, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	4690      	mov	r8, r2
 800cf66:	d82c      	bhi.n	800cfc2 <__ssputs_r+0x6e>
 800cf68:	898a      	ldrh	r2, [r1, #12]
 800cf6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf6e:	d026      	beq.n	800cfbe <__ssputs_r+0x6a>
 800cf70:	6965      	ldr	r5, [r4, #20]
 800cf72:	6909      	ldr	r1, [r1, #16]
 800cf74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf78:	eba3 0901 	sub.w	r9, r3, r1
 800cf7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf80:	1c7b      	adds	r3, r7, #1
 800cf82:	444b      	add	r3, r9
 800cf84:	106d      	asrs	r5, r5, #1
 800cf86:	429d      	cmp	r5, r3
 800cf88:	bf38      	it	cc
 800cf8a:	461d      	movcc	r5, r3
 800cf8c:	0553      	lsls	r3, r2, #21
 800cf8e:	d527      	bpl.n	800cfe0 <__ssputs_r+0x8c>
 800cf90:	4629      	mov	r1, r5
 800cf92:	f000 fc75 	bl	800d880 <_malloc_r>
 800cf96:	4606      	mov	r6, r0
 800cf98:	b360      	cbz	r0, 800cff4 <__ssputs_r+0xa0>
 800cf9a:	6921      	ldr	r1, [r4, #16]
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	f001 fd65 	bl	800ea6c <memcpy>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	6126      	str	r6, [r4, #16]
 800cfb0:	6165      	str	r5, [r4, #20]
 800cfb2:	444e      	add	r6, r9
 800cfb4:	eba5 0509 	sub.w	r5, r5, r9
 800cfb8:	6026      	str	r6, [r4, #0]
 800cfba:	60a5      	str	r5, [r4, #8]
 800cfbc:	463e      	mov	r6, r7
 800cfbe:	42be      	cmp	r6, r7
 800cfc0:	d900      	bls.n	800cfc4 <__ssputs_r+0x70>
 800cfc2:	463e      	mov	r6, r7
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	4632      	mov	r2, r6
 800cfc8:	4641      	mov	r1, r8
 800cfca:	f001 fd03 	bl	800e9d4 <memmove>
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	1b9b      	subs	r3, r3, r6
 800cfd2:	60a3      	str	r3, [r4, #8]
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	4433      	add	r3, r6
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	2000      	movs	r0, #0
 800cfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe0:	462a      	mov	r2, r5
 800cfe2:	f001 fad7 	bl	800e594 <_realloc_r>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d1e0      	bne.n	800cfae <__ssputs_r+0x5a>
 800cfec:	6921      	ldr	r1, [r4, #16]
 800cfee:	4650      	mov	r0, sl
 800cff0:	f7ff ff64 	bl	800cebc <_free_r>
 800cff4:	230c      	movs	r3, #12
 800cff6:	f8ca 3000 	str.w	r3, [sl]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	81a3      	strh	r3, [r4, #12]
 800d002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d006:	e7e9      	b.n	800cfdc <__ssputs_r+0x88>

0800d008 <_svfiprintf_r>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	4698      	mov	r8, r3
 800d00e:	898b      	ldrh	r3, [r1, #12]
 800d010:	061b      	lsls	r3, r3, #24
 800d012:	b09d      	sub	sp, #116	; 0x74
 800d014:	4607      	mov	r7, r0
 800d016:	460d      	mov	r5, r1
 800d018:	4614      	mov	r4, r2
 800d01a:	d50e      	bpl.n	800d03a <_svfiprintf_r+0x32>
 800d01c:	690b      	ldr	r3, [r1, #16]
 800d01e:	b963      	cbnz	r3, 800d03a <_svfiprintf_r+0x32>
 800d020:	2140      	movs	r1, #64	; 0x40
 800d022:	f000 fc2d 	bl	800d880 <_malloc_r>
 800d026:	6028      	str	r0, [r5, #0]
 800d028:	6128      	str	r0, [r5, #16]
 800d02a:	b920      	cbnz	r0, 800d036 <_svfiprintf_r+0x2e>
 800d02c:	230c      	movs	r3, #12
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d034:	e0d0      	b.n	800d1d8 <_svfiprintf_r+0x1d0>
 800d036:	2340      	movs	r3, #64	; 0x40
 800d038:	616b      	str	r3, [r5, #20]
 800d03a:	2300      	movs	r3, #0
 800d03c:	9309      	str	r3, [sp, #36]	; 0x24
 800d03e:	2320      	movs	r3, #32
 800d040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d044:	f8cd 800c 	str.w	r8, [sp, #12]
 800d048:	2330      	movs	r3, #48	; 0x30
 800d04a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1f0 <_svfiprintf_r+0x1e8>
 800d04e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d052:	f04f 0901 	mov.w	r9, #1
 800d056:	4623      	mov	r3, r4
 800d058:	469a      	mov	sl, r3
 800d05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d05e:	b10a      	cbz	r2, 800d064 <_svfiprintf_r+0x5c>
 800d060:	2a25      	cmp	r2, #37	; 0x25
 800d062:	d1f9      	bne.n	800d058 <_svfiprintf_r+0x50>
 800d064:	ebba 0b04 	subs.w	fp, sl, r4
 800d068:	d00b      	beq.n	800d082 <_svfiprintf_r+0x7a>
 800d06a:	465b      	mov	r3, fp
 800d06c:	4622      	mov	r2, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	4638      	mov	r0, r7
 800d072:	f7ff ff6f 	bl	800cf54 <__ssputs_r>
 800d076:	3001      	adds	r0, #1
 800d078:	f000 80a9 	beq.w	800d1ce <_svfiprintf_r+0x1c6>
 800d07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d07e:	445a      	add	r2, fp
 800d080:	9209      	str	r2, [sp, #36]	; 0x24
 800d082:	f89a 3000 	ldrb.w	r3, [sl]
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 80a1 	beq.w	800d1ce <_svfiprintf_r+0x1c6>
 800d08c:	2300      	movs	r3, #0
 800d08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d096:	f10a 0a01 	add.w	sl, sl, #1
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	9307      	str	r3, [sp, #28]
 800d09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a4:	4654      	mov	r4, sl
 800d0a6:	2205      	movs	r2, #5
 800d0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ac:	4850      	ldr	r0, [pc, #320]	; (800d1f0 <_svfiprintf_r+0x1e8>)
 800d0ae:	f7f3 f8af 	bl	8000210 <memchr>
 800d0b2:	9a04      	ldr	r2, [sp, #16]
 800d0b4:	b9d8      	cbnz	r0, 800d0ee <_svfiprintf_r+0xe6>
 800d0b6:	06d0      	lsls	r0, r2, #27
 800d0b8:	bf44      	itt	mi
 800d0ba:	2320      	movmi	r3, #32
 800d0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c0:	0711      	lsls	r1, r2, #28
 800d0c2:	bf44      	itt	mi
 800d0c4:	232b      	movmi	r3, #43	; 0x2b
 800d0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d0:	d015      	beq.n	800d0fe <_svfiprintf_r+0xf6>
 800d0d2:	9a07      	ldr	r2, [sp, #28]
 800d0d4:	4654      	mov	r4, sl
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	f04f 0c0a 	mov.w	ip, #10
 800d0dc:	4621      	mov	r1, r4
 800d0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e2:	3b30      	subs	r3, #48	; 0x30
 800d0e4:	2b09      	cmp	r3, #9
 800d0e6:	d94d      	bls.n	800d184 <_svfiprintf_r+0x17c>
 800d0e8:	b1b0      	cbz	r0, 800d118 <_svfiprintf_r+0x110>
 800d0ea:	9207      	str	r2, [sp, #28]
 800d0ec:	e014      	b.n	800d118 <_svfiprintf_r+0x110>
 800d0ee:	eba0 0308 	sub.w	r3, r0, r8
 800d0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	9304      	str	r3, [sp, #16]
 800d0fa:	46a2      	mov	sl, r4
 800d0fc:	e7d2      	b.n	800d0a4 <_svfiprintf_r+0x9c>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	1d19      	adds	r1, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	9103      	str	r1, [sp, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfbb      	ittet	lt
 800d10a:	425b      	neglt	r3, r3
 800d10c:	f042 0202 	orrlt.w	r2, r2, #2
 800d110:	9307      	strge	r3, [sp, #28]
 800d112:	9307      	strlt	r3, [sp, #28]
 800d114:	bfb8      	it	lt
 800d116:	9204      	strlt	r2, [sp, #16]
 800d118:	7823      	ldrb	r3, [r4, #0]
 800d11a:	2b2e      	cmp	r3, #46	; 0x2e
 800d11c:	d10c      	bne.n	800d138 <_svfiprintf_r+0x130>
 800d11e:	7863      	ldrb	r3, [r4, #1]
 800d120:	2b2a      	cmp	r3, #42	; 0x2a
 800d122:	d134      	bne.n	800d18e <_svfiprintf_r+0x186>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1d1a      	adds	r2, r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	9203      	str	r2, [sp, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bfb8      	it	lt
 800d130:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d134:	3402      	adds	r4, #2
 800d136:	9305      	str	r3, [sp, #20]
 800d138:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d200 <_svfiprintf_r+0x1f8>
 800d13c:	7821      	ldrb	r1, [r4, #0]
 800d13e:	2203      	movs	r2, #3
 800d140:	4650      	mov	r0, sl
 800d142:	f7f3 f865 	bl	8000210 <memchr>
 800d146:	b138      	cbz	r0, 800d158 <_svfiprintf_r+0x150>
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	eba0 000a 	sub.w	r0, r0, sl
 800d14e:	2240      	movs	r2, #64	; 0x40
 800d150:	4082      	lsls	r2, r0
 800d152:	4313      	orrs	r3, r2
 800d154:	3401      	adds	r4, #1
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15c:	4825      	ldr	r0, [pc, #148]	; (800d1f4 <_svfiprintf_r+0x1ec>)
 800d15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d162:	2206      	movs	r2, #6
 800d164:	f7f3 f854 	bl	8000210 <memchr>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d038      	beq.n	800d1de <_svfiprintf_r+0x1d6>
 800d16c:	4b22      	ldr	r3, [pc, #136]	; (800d1f8 <_svfiprintf_r+0x1f0>)
 800d16e:	bb1b      	cbnz	r3, 800d1b8 <_svfiprintf_r+0x1b0>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	3307      	adds	r3, #7
 800d174:	f023 0307 	bic.w	r3, r3, #7
 800d178:	3308      	adds	r3, #8
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17e:	4433      	add	r3, r6
 800d180:	9309      	str	r3, [sp, #36]	; 0x24
 800d182:	e768      	b.n	800d056 <_svfiprintf_r+0x4e>
 800d184:	fb0c 3202 	mla	r2, ip, r2, r3
 800d188:	460c      	mov	r4, r1
 800d18a:	2001      	movs	r0, #1
 800d18c:	e7a6      	b.n	800d0dc <_svfiprintf_r+0xd4>
 800d18e:	2300      	movs	r3, #0
 800d190:	3401      	adds	r4, #1
 800d192:	9305      	str	r3, [sp, #20]
 800d194:	4619      	mov	r1, r3
 800d196:	f04f 0c0a 	mov.w	ip, #10
 800d19a:	4620      	mov	r0, r4
 800d19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a0:	3a30      	subs	r2, #48	; 0x30
 800d1a2:	2a09      	cmp	r2, #9
 800d1a4:	d903      	bls.n	800d1ae <_svfiprintf_r+0x1a6>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0c6      	beq.n	800d138 <_svfiprintf_r+0x130>
 800d1aa:	9105      	str	r1, [sp, #20]
 800d1ac:	e7c4      	b.n	800d138 <_svfiprintf_r+0x130>
 800d1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e7f0      	b.n	800d19a <_svfiprintf_r+0x192>
 800d1b8:	ab03      	add	r3, sp, #12
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	462a      	mov	r2, r5
 800d1be:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <_svfiprintf_r+0x1f4>)
 800d1c0:	a904      	add	r1, sp, #16
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	f7fe f9c8 	bl	800b558 <_printf_float>
 800d1c8:	1c42      	adds	r2, r0, #1
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	d1d6      	bne.n	800d17c <_svfiprintf_r+0x174>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	065b      	lsls	r3, r3, #25
 800d1d2:	f53f af2d 	bmi.w	800d030 <_svfiprintf_r+0x28>
 800d1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d8:	b01d      	add	sp, #116	; 0x74
 800d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <_svfiprintf_r+0x1f4>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7fe fc59 	bl	800baa0 <_printf_i>
 800d1ee:	e7eb      	b.n	800d1c8 <_svfiprintf_r+0x1c0>
 800d1f0:	08013c47 	.word	0x08013c47
 800d1f4:	08013c51 	.word	0x08013c51
 800d1f8:	0800b559 	.word	0x0800b559
 800d1fc:	0800cf55 	.word	0x0800cf55
 800d200:	08013c4d 	.word	0x08013c4d

0800d204 <_sungetc_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	1c4b      	adds	r3, r1, #1
 800d208:	4614      	mov	r4, r2
 800d20a:	d103      	bne.n	800d214 <_sungetc_r+0x10>
 800d20c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d210:	4628      	mov	r0, r5
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	8993      	ldrh	r3, [r2, #12]
 800d216:	f023 0320 	bic.w	r3, r3, #32
 800d21a:	8193      	strh	r3, [r2, #12]
 800d21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d21e:	6852      	ldr	r2, [r2, #4]
 800d220:	b2cd      	uxtb	r5, r1
 800d222:	b18b      	cbz	r3, 800d248 <_sungetc_r+0x44>
 800d224:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d226:	4293      	cmp	r3, r2
 800d228:	dd08      	ble.n	800d23c <_sungetc_r+0x38>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	1e5a      	subs	r2, r3, #1
 800d22e:	6022      	str	r2, [r4, #0]
 800d230:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d234:	6863      	ldr	r3, [r4, #4]
 800d236:	3301      	adds	r3, #1
 800d238:	6063      	str	r3, [r4, #4]
 800d23a:	e7e9      	b.n	800d210 <_sungetc_r+0xc>
 800d23c:	4621      	mov	r1, r4
 800d23e:	f001 f96f 	bl	800e520 <__submore>
 800d242:	2800      	cmp	r0, #0
 800d244:	d0f1      	beq.n	800d22a <_sungetc_r+0x26>
 800d246:	e7e1      	b.n	800d20c <_sungetc_r+0x8>
 800d248:	6921      	ldr	r1, [r4, #16]
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	b151      	cbz	r1, 800d264 <_sungetc_r+0x60>
 800d24e:	4299      	cmp	r1, r3
 800d250:	d208      	bcs.n	800d264 <_sungetc_r+0x60>
 800d252:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d256:	42a9      	cmp	r1, r5
 800d258:	d104      	bne.n	800d264 <_sungetc_r+0x60>
 800d25a:	3b01      	subs	r3, #1
 800d25c:	3201      	adds	r2, #1
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	6062      	str	r2, [r4, #4]
 800d262:	e7d5      	b.n	800d210 <_sungetc_r+0xc>
 800d264:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d26c:	6363      	str	r3, [r4, #52]	; 0x34
 800d26e:	2303      	movs	r3, #3
 800d270:	63a3      	str	r3, [r4, #56]	; 0x38
 800d272:	4623      	mov	r3, r4
 800d274:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7dc      	b.n	800d238 <_sungetc_r+0x34>

0800d27e <__ssrefill_r>:
 800d27e:	b510      	push	{r4, lr}
 800d280:	460c      	mov	r4, r1
 800d282:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d284:	b169      	cbz	r1, 800d2a2 <__ssrefill_r+0x24>
 800d286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d28a:	4299      	cmp	r1, r3
 800d28c:	d001      	beq.n	800d292 <__ssrefill_r+0x14>
 800d28e:	f7ff fe15 	bl	800cebc <_free_r>
 800d292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d294:	6063      	str	r3, [r4, #4]
 800d296:	2000      	movs	r0, #0
 800d298:	6360      	str	r0, [r4, #52]	; 0x34
 800d29a:	b113      	cbz	r3, 800d2a2 <__ssrefill_r+0x24>
 800d29c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	bd10      	pop	{r4, pc}
 800d2a2:	6923      	ldr	r3, [r4, #16]
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	6063      	str	r3, [r4, #4]
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	f043 0320 	orr.w	r3, r3, #32
 800d2b0:	81a3      	strh	r3, [r4, #12]
 800d2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b6:	e7f3      	b.n	800d2a0 <__ssrefill_r+0x22>

0800d2b8 <__ssvfiscanf_r>:
 800d2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2bc:	460c      	mov	r4, r1
 800d2be:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d2c8:	49a6      	ldr	r1, [pc, #664]	; (800d564 <__ssvfiscanf_r+0x2ac>)
 800d2ca:	91a0      	str	r1, [sp, #640]	; 0x280
 800d2cc:	f10d 0804 	add.w	r8, sp, #4
 800d2d0:	49a5      	ldr	r1, [pc, #660]	; (800d568 <__ssvfiscanf_r+0x2b0>)
 800d2d2:	4fa6      	ldr	r7, [pc, #664]	; (800d56c <__ssvfiscanf_r+0x2b4>)
 800d2d4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d570 <__ssvfiscanf_r+0x2b8>
 800d2d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d2dc:	4606      	mov	r6, r0
 800d2de:	91a1      	str	r1, [sp, #644]	; 0x284
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	7813      	ldrb	r3, [r2, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 815a 	beq.w	800d59e <__ssvfiscanf_r+0x2e6>
 800d2ea:	5cf9      	ldrb	r1, [r7, r3]
 800d2ec:	f011 0108 	ands.w	r1, r1, #8
 800d2f0:	f102 0501 	add.w	r5, r2, #1
 800d2f4:	d019      	beq.n	800d32a <__ssvfiscanf_r+0x72>
 800d2f6:	6863      	ldr	r3, [r4, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dd0f      	ble.n	800d31c <__ssvfiscanf_r+0x64>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	781a      	ldrb	r2, [r3, #0]
 800d300:	5cba      	ldrb	r2, [r7, r2]
 800d302:	0712      	lsls	r2, r2, #28
 800d304:	d401      	bmi.n	800d30a <__ssvfiscanf_r+0x52>
 800d306:	462a      	mov	r2, r5
 800d308:	e7eb      	b.n	800d2e2 <__ssvfiscanf_r+0x2a>
 800d30a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d30c:	3201      	adds	r2, #1
 800d30e:	9245      	str	r2, [sp, #276]	; 0x114
 800d310:	6862      	ldr	r2, [r4, #4]
 800d312:	3301      	adds	r3, #1
 800d314:	3a01      	subs	r2, #1
 800d316:	6062      	str	r2, [r4, #4]
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	e7ec      	b.n	800d2f6 <__ssvfiscanf_r+0x3e>
 800d31c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d31e:	4621      	mov	r1, r4
 800d320:	4630      	mov	r0, r6
 800d322:	4798      	blx	r3
 800d324:	2800      	cmp	r0, #0
 800d326:	d0e9      	beq.n	800d2fc <__ssvfiscanf_r+0x44>
 800d328:	e7ed      	b.n	800d306 <__ssvfiscanf_r+0x4e>
 800d32a:	2b25      	cmp	r3, #37	; 0x25
 800d32c:	d012      	beq.n	800d354 <__ssvfiscanf_r+0x9c>
 800d32e:	469a      	mov	sl, r3
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	f340 8091 	ble.w	800d45a <__ssvfiscanf_r+0x1a2>
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	7813      	ldrb	r3, [r2, #0]
 800d33c:	4553      	cmp	r3, sl
 800d33e:	f040 812e 	bne.w	800d59e <__ssvfiscanf_r+0x2e6>
 800d342:	6863      	ldr	r3, [r4, #4]
 800d344:	3b01      	subs	r3, #1
 800d346:	6063      	str	r3, [r4, #4]
 800d348:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d34a:	3201      	adds	r2, #1
 800d34c:	3301      	adds	r3, #1
 800d34e:	6022      	str	r2, [r4, #0]
 800d350:	9345      	str	r3, [sp, #276]	; 0x114
 800d352:	e7d8      	b.n	800d306 <__ssvfiscanf_r+0x4e>
 800d354:	9141      	str	r1, [sp, #260]	; 0x104
 800d356:	9143      	str	r1, [sp, #268]	; 0x10c
 800d358:	7853      	ldrb	r3, [r2, #1]
 800d35a:	2b2a      	cmp	r3, #42	; 0x2a
 800d35c:	bf02      	ittt	eq
 800d35e:	2310      	moveq	r3, #16
 800d360:	1c95      	addeq	r5, r2, #2
 800d362:	9341      	streq	r3, [sp, #260]	; 0x104
 800d364:	220a      	movs	r2, #10
 800d366:	46aa      	mov	sl, r5
 800d368:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d36c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d370:	2b09      	cmp	r3, #9
 800d372:	d91c      	bls.n	800d3ae <__ssvfiscanf_r+0xf6>
 800d374:	487e      	ldr	r0, [pc, #504]	; (800d570 <__ssvfiscanf_r+0x2b8>)
 800d376:	2203      	movs	r2, #3
 800d378:	f7f2 ff4a 	bl	8000210 <memchr>
 800d37c:	b138      	cbz	r0, 800d38e <__ssvfiscanf_r+0xd6>
 800d37e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d380:	eba0 0009 	sub.w	r0, r0, r9
 800d384:	2301      	movs	r3, #1
 800d386:	4083      	lsls	r3, r0
 800d388:	4313      	orrs	r3, r2
 800d38a:	9341      	str	r3, [sp, #260]	; 0x104
 800d38c:	4655      	mov	r5, sl
 800d38e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d392:	2b78      	cmp	r3, #120	; 0x78
 800d394:	d806      	bhi.n	800d3a4 <__ssvfiscanf_r+0xec>
 800d396:	2b57      	cmp	r3, #87	; 0x57
 800d398:	d810      	bhi.n	800d3bc <__ssvfiscanf_r+0x104>
 800d39a:	2b25      	cmp	r3, #37	; 0x25
 800d39c:	d0c7      	beq.n	800d32e <__ssvfiscanf_r+0x76>
 800d39e:	d857      	bhi.n	800d450 <__ssvfiscanf_r+0x198>
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d065      	beq.n	800d470 <__ssvfiscanf_r+0x1b8>
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	9347      	str	r3, [sp, #284]	; 0x11c
 800d3a8:	230a      	movs	r3, #10
 800d3aa:	9342      	str	r3, [sp, #264]	; 0x108
 800d3ac:	e076      	b.n	800d49c <__ssvfiscanf_r+0x1e4>
 800d3ae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d3b0:	fb02 1103 	mla	r1, r2, r3, r1
 800d3b4:	3930      	subs	r1, #48	; 0x30
 800d3b6:	9143      	str	r1, [sp, #268]	; 0x10c
 800d3b8:	4655      	mov	r5, sl
 800d3ba:	e7d4      	b.n	800d366 <__ssvfiscanf_r+0xae>
 800d3bc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d3c0:	2a20      	cmp	r2, #32
 800d3c2:	d8ef      	bhi.n	800d3a4 <__ssvfiscanf_r+0xec>
 800d3c4:	a101      	add	r1, pc, #4	; (adr r1, 800d3cc <__ssvfiscanf_r+0x114>)
 800d3c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d3ca:	bf00      	nop
 800d3cc:	0800d47f 	.word	0x0800d47f
 800d3d0:	0800d3a5 	.word	0x0800d3a5
 800d3d4:	0800d3a5 	.word	0x0800d3a5
 800d3d8:	0800d4dd 	.word	0x0800d4dd
 800d3dc:	0800d3a5 	.word	0x0800d3a5
 800d3e0:	0800d3a5 	.word	0x0800d3a5
 800d3e4:	0800d3a5 	.word	0x0800d3a5
 800d3e8:	0800d3a5 	.word	0x0800d3a5
 800d3ec:	0800d3a5 	.word	0x0800d3a5
 800d3f0:	0800d3a5 	.word	0x0800d3a5
 800d3f4:	0800d3a5 	.word	0x0800d3a5
 800d3f8:	0800d4f3 	.word	0x0800d4f3
 800d3fc:	0800d4d9 	.word	0x0800d4d9
 800d400:	0800d457 	.word	0x0800d457
 800d404:	0800d457 	.word	0x0800d457
 800d408:	0800d457 	.word	0x0800d457
 800d40c:	0800d3a5 	.word	0x0800d3a5
 800d410:	0800d495 	.word	0x0800d495
 800d414:	0800d3a5 	.word	0x0800d3a5
 800d418:	0800d3a5 	.word	0x0800d3a5
 800d41c:	0800d3a5 	.word	0x0800d3a5
 800d420:	0800d3a5 	.word	0x0800d3a5
 800d424:	0800d503 	.word	0x0800d503
 800d428:	0800d4d1 	.word	0x0800d4d1
 800d42c:	0800d477 	.word	0x0800d477
 800d430:	0800d3a5 	.word	0x0800d3a5
 800d434:	0800d3a5 	.word	0x0800d3a5
 800d438:	0800d4ff 	.word	0x0800d4ff
 800d43c:	0800d3a5 	.word	0x0800d3a5
 800d440:	0800d4d9 	.word	0x0800d4d9
 800d444:	0800d3a5 	.word	0x0800d3a5
 800d448:	0800d3a5 	.word	0x0800d3a5
 800d44c:	0800d47f 	.word	0x0800d47f
 800d450:	3b45      	subs	r3, #69	; 0x45
 800d452:	2b02      	cmp	r3, #2
 800d454:	d8a6      	bhi.n	800d3a4 <__ssvfiscanf_r+0xec>
 800d456:	2305      	movs	r3, #5
 800d458:	e01f      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d45a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d45c:	4621      	mov	r1, r4
 800d45e:	4630      	mov	r0, r6
 800d460:	4798      	blx	r3
 800d462:	2800      	cmp	r0, #0
 800d464:	f43f af68 	beq.w	800d338 <__ssvfiscanf_r+0x80>
 800d468:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f040 808d 	bne.w	800d58a <__ssvfiscanf_r+0x2d2>
 800d470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d474:	e08f      	b.n	800d596 <__ssvfiscanf_r+0x2de>
 800d476:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d478:	f042 0220 	orr.w	r2, r2, #32
 800d47c:	9241      	str	r2, [sp, #260]	; 0x104
 800d47e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d484:	9241      	str	r2, [sp, #260]	; 0x104
 800d486:	2210      	movs	r2, #16
 800d488:	2b6f      	cmp	r3, #111	; 0x6f
 800d48a:	9242      	str	r2, [sp, #264]	; 0x108
 800d48c:	bf34      	ite	cc
 800d48e:	2303      	movcc	r3, #3
 800d490:	2304      	movcs	r3, #4
 800d492:	e002      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d494:	2300      	movs	r3, #0
 800d496:	9342      	str	r3, [sp, #264]	; 0x108
 800d498:	2303      	movs	r3, #3
 800d49a:	9347      	str	r3, [sp, #284]	; 0x11c
 800d49c:	6863      	ldr	r3, [r4, #4]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	dd3d      	ble.n	800d51e <__ssvfiscanf_r+0x266>
 800d4a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d4a4:	0659      	lsls	r1, r3, #25
 800d4a6:	d404      	bmi.n	800d4b2 <__ssvfiscanf_r+0x1fa>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	781a      	ldrb	r2, [r3, #0]
 800d4ac:	5cba      	ldrb	r2, [r7, r2]
 800d4ae:	0712      	lsls	r2, r2, #28
 800d4b0:	d43c      	bmi.n	800d52c <__ssvfiscanf_r+0x274>
 800d4b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	dc4b      	bgt.n	800d550 <__ssvfiscanf_r+0x298>
 800d4b8:	466b      	mov	r3, sp
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	a941      	add	r1, sp, #260	; 0x104
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f000 fa5e 	bl	800d980 <_scanf_chars>
 800d4c4:	2801      	cmp	r0, #1
 800d4c6:	d06a      	beq.n	800d59e <__ssvfiscanf_r+0x2e6>
 800d4c8:	2802      	cmp	r0, #2
 800d4ca:	f47f af1c 	bne.w	800d306 <__ssvfiscanf_r+0x4e>
 800d4ce:	e7cb      	b.n	800d468 <__ssvfiscanf_r+0x1b0>
 800d4d0:	2308      	movs	r3, #8
 800d4d2:	9342      	str	r3, [sp, #264]	; 0x108
 800d4d4:	2304      	movs	r3, #4
 800d4d6:	e7e0      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d4d8:	220a      	movs	r2, #10
 800d4da:	e7d5      	b.n	800d488 <__ssvfiscanf_r+0x1d0>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f000 fb9c 	bl	800dc1c <__sccl>
 800d4e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ea:	9341      	str	r3, [sp, #260]	; 0x104
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e7d3      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d4f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4f8:	9341      	str	r3, [sp, #260]	; 0x104
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e7cd      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d4fe:	2302      	movs	r3, #2
 800d500:	e7cb      	b.n	800d49a <__ssvfiscanf_r+0x1e2>
 800d502:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d504:	06c3      	lsls	r3, r0, #27
 800d506:	f53f aefe 	bmi.w	800d306 <__ssvfiscanf_r+0x4e>
 800d50a:	9b00      	ldr	r3, [sp, #0]
 800d50c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d50e:	1d19      	adds	r1, r3, #4
 800d510:	9100      	str	r1, [sp, #0]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	07c0      	lsls	r0, r0, #31
 800d516:	bf4c      	ite	mi
 800d518:	801a      	strhmi	r2, [r3, #0]
 800d51a:	601a      	strpl	r2, [r3, #0]
 800d51c:	e6f3      	b.n	800d306 <__ssvfiscanf_r+0x4e>
 800d51e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d520:	4621      	mov	r1, r4
 800d522:	4630      	mov	r0, r6
 800d524:	4798      	blx	r3
 800d526:	2800      	cmp	r0, #0
 800d528:	d0bb      	beq.n	800d4a2 <__ssvfiscanf_r+0x1ea>
 800d52a:	e79d      	b.n	800d468 <__ssvfiscanf_r+0x1b0>
 800d52c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d52e:	3201      	adds	r2, #1
 800d530:	9245      	str	r2, [sp, #276]	; 0x114
 800d532:	6862      	ldr	r2, [r4, #4]
 800d534:	3a01      	subs	r2, #1
 800d536:	2a00      	cmp	r2, #0
 800d538:	6062      	str	r2, [r4, #4]
 800d53a:	dd02      	ble.n	800d542 <__ssvfiscanf_r+0x28a>
 800d53c:	3301      	adds	r3, #1
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	e7b2      	b.n	800d4a8 <__ssvfiscanf_r+0x1f0>
 800d542:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d544:	4621      	mov	r1, r4
 800d546:	4630      	mov	r0, r6
 800d548:	4798      	blx	r3
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d0ac      	beq.n	800d4a8 <__ssvfiscanf_r+0x1f0>
 800d54e:	e78b      	b.n	800d468 <__ssvfiscanf_r+0x1b0>
 800d550:	2b04      	cmp	r3, #4
 800d552:	dc0f      	bgt.n	800d574 <__ssvfiscanf_r+0x2bc>
 800d554:	466b      	mov	r3, sp
 800d556:	4622      	mov	r2, r4
 800d558:	a941      	add	r1, sp, #260	; 0x104
 800d55a:	4630      	mov	r0, r6
 800d55c:	f000 fa6a 	bl	800da34 <_scanf_i>
 800d560:	e7b0      	b.n	800d4c4 <__ssvfiscanf_r+0x20c>
 800d562:	bf00      	nop
 800d564:	0800d205 	.word	0x0800d205
 800d568:	0800d27f 	.word	0x0800d27f
 800d56c:	08013dd7 	.word	0x08013dd7
 800d570:	08013c4d 	.word	0x08013c4d
 800d574:	4b0b      	ldr	r3, [pc, #44]	; (800d5a4 <__ssvfiscanf_r+0x2ec>)
 800d576:	2b00      	cmp	r3, #0
 800d578:	f43f aec5 	beq.w	800d306 <__ssvfiscanf_r+0x4e>
 800d57c:	466b      	mov	r3, sp
 800d57e:	4622      	mov	r2, r4
 800d580:	a941      	add	r1, sp, #260	; 0x104
 800d582:	4630      	mov	r0, r6
 800d584:	f3af 8000 	nop.w
 800d588:	e79c      	b.n	800d4c4 <__ssvfiscanf_r+0x20c>
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d590:	bf18      	it	ne
 800d592:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d596:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d5a0:	e7f9      	b.n	800d596 <__ssvfiscanf_r+0x2de>
 800d5a2:	bf00      	nop
 800d5a4:	00000000 	.word	0x00000000

0800d5a8 <__sfputc_r>:
 800d5a8:	6893      	ldr	r3, [r2, #8]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	b410      	push	{r4}
 800d5b0:	6093      	str	r3, [r2, #8]
 800d5b2:	da08      	bge.n	800d5c6 <__sfputc_r+0x1e>
 800d5b4:	6994      	ldr	r4, [r2, #24]
 800d5b6:	42a3      	cmp	r3, r4
 800d5b8:	db01      	blt.n	800d5be <__sfputc_r+0x16>
 800d5ba:	290a      	cmp	r1, #10
 800d5bc:	d103      	bne.n	800d5c6 <__sfputc_r+0x1e>
 800d5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c2:	f001 b90f 	b.w	800e7e4 <__swbuf_r>
 800d5c6:	6813      	ldr	r3, [r2, #0]
 800d5c8:	1c58      	adds	r0, r3, #1
 800d5ca:	6010      	str	r0, [r2, #0]
 800d5cc:	7019      	strb	r1, [r3, #0]
 800d5ce:	4608      	mov	r0, r1
 800d5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <__sfputs_r>:
 800d5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d8:	4606      	mov	r6, r0
 800d5da:	460f      	mov	r7, r1
 800d5dc:	4614      	mov	r4, r2
 800d5de:	18d5      	adds	r5, r2, r3
 800d5e0:	42ac      	cmp	r4, r5
 800d5e2:	d101      	bne.n	800d5e8 <__sfputs_r+0x12>
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e007      	b.n	800d5f8 <__sfputs_r+0x22>
 800d5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ec:	463a      	mov	r2, r7
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	f7ff ffda 	bl	800d5a8 <__sfputc_r>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d1f3      	bne.n	800d5e0 <__sfputs_r+0xa>
 800d5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5fc <_vfiprintf_r>:
 800d5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d600:	460d      	mov	r5, r1
 800d602:	b09d      	sub	sp, #116	; 0x74
 800d604:	4614      	mov	r4, r2
 800d606:	4698      	mov	r8, r3
 800d608:	4606      	mov	r6, r0
 800d60a:	b118      	cbz	r0, 800d614 <_vfiprintf_r+0x18>
 800d60c:	6a03      	ldr	r3, [r0, #32]
 800d60e:	b90b      	cbnz	r3, 800d614 <_vfiprintf_r+0x18>
 800d610:	f7fe fcba 	bl	800bf88 <__sinit>
 800d614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d616:	07d9      	lsls	r1, r3, #31
 800d618:	d405      	bmi.n	800d626 <_vfiprintf_r+0x2a>
 800d61a:	89ab      	ldrh	r3, [r5, #12]
 800d61c:	059a      	lsls	r2, r3, #22
 800d61e:	d402      	bmi.n	800d626 <_vfiprintf_r+0x2a>
 800d620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d622:	f7fe fdb0 	bl	800c186 <__retarget_lock_acquire_recursive>
 800d626:	89ab      	ldrh	r3, [r5, #12]
 800d628:	071b      	lsls	r3, r3, #28
 800d62a:	d501      	bpl.n	800d630 <_vfiprintf_r+0x34>
 800d62c:	692b      	ldr	r3, [r5, #16]
 800d62e:	b99b      	cbnz	r3, 800d658 <_vfiprintf_r+0x5c>
 800d630:	4629      	mov	r1, r5
 800d632:	4630      	mov	r0, r6
 800d634:	f001 f914 	bl	800e860 <__swsetup_r>
 800d638:	b170      	cbz	r0, 800d658 <_vfiprintf_r+0x5c>
 800d63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d63c:	07dc      	lsls	r4, r3, #31
 800d63e:	d504      	bpl.n	800d64a <_vfiprintf_r+0x4e>
 800d640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d644:	b01d      	add	sp, #116	; 0x74
 800d646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d64a:	89ab      	ldrh	r3, [r5, #12]
 800d64c:	0598      	lsls	r0, r3, #22
 800d64e:	d4f7      	bmi.n	800d640 <_vfiprintf_r+0x44>
 800d650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d652:	f7fe fd99 	bl	800c188 <__retarget_lock_release_recursive>
 800d656:	e7f3      	b.n	800d640 <_vfiprintf_r+0x44>
 800d658:	2300      	movs	r3, #0
 800d65a:	9309      	str	r3, [sp, #36]	; 0x24
 800d65c:	2320      	movs	r3, #32
 800d65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d662:	f8cd 800c 	str.w	r8, [sp, #12]
 800d666:	2330      	movs	r3, #48	; 0x30
 800d668:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d81c <_vfiprintf_r+0x220>
 800d66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d670:	f04f 0901 	mov.w	r9, #1
 800d674:	4623      	mov	r3, r4
 800d676:	469a      	mov	sl, r3
 800d678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d67c:	b10a      	cbz	r2, 800d682 <_vfiprintf_r+0x86>
 800d67e:	2a25      	cmp	r2, #37	; 0x25
 800d680:	d1f9      	bne.n	800d676 <_vfiprintf_r+0x7a>
 800d682:	ebba 0b04 	subs.w	fp, sl, r4
 800d686:	d00b      	beq.n	800d6a0 <_vfiprintf_r+0xa4>
 800d688:	465b      	mov	r3, fp
 800d68a:	4622      	mov	r2, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	4630      	mov	r0, r6
 800d690:	f7ff ffa1 	bl	800d5d6 <__sfputs_r>
 800d694:	3001      	adds	r0, #1
 800d696:	f000 80a9 	beq.w	800d7ec <_vfiprintf_r+0x1f0>
 800d69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d69c:	445a      	add	r2, fp
 800d69e:	9209      	str	r2, [sp, #36]	; 0x24
 800d6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 80a1 	beq.w	800d7ec <_vfiprintf_r+0x1f0>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6b4:	f10a 0a01 	add.w	sl, sl, #1
 800d6b8:	9304      	str	r3, [sp, #16]
 800d6ba:	9307      	str	r3, [sp, #28]
 800d6bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6c2:	4654      	mov	r4, sl
 800d6c4:	2205      	movs	r2, #5
 800d6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ca:	4854      	ldr	r0, [pc, #336]	; (800d81c <_vfiprintf_r+0x220>)
 800d6cc:	f7f2 fda0 	bl	8000210 <memchr>
 800d6d0:	9a04      	ldr	r2, [sp, #16]
 800d6d2:	b9d8      	cbnz	r0, 800d70c <_vfiprintf_r+0x110>
 800d6d4:	06d1      	lsls	r1, r2, #27
 800d6d6:	bf44      	itt	mi
 800d6d8:	2320      	movmi	r3, #32
 800d6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6de:	0713      	lsls	r3, r2, #28
 800d6e0:	bf44      	itt	mi
 800d6e2:	232b      	movmi	r3, #43	; 0x2b
 800d6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ee:	d015      	beq.n	800d71c <_vfiprintf_r+0x120>
 800d6f0:	9a07      	ldr	r2, [sp, #28]
 800d6f2:	4654      	mov	r4, sl
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	f04f 0c0a 	mov.w	ip, #10
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d700:	3b30      	subs	r3, #48	; 0x30
 800d702:	2b09      	cmp	r3, #9
 800d704:	d94d      	bls.n	800d7a2 <_vfiprintf_r+0x1a6>
 800d706:	b1b0      	cbz	r0, 800d736 <_vfiprintf_r+0x13a>
 800d708:	9207      	str	r2, [sp, #28]
 800d70a:	e014      	b.n	800d736 <_vfiprintf_r+0x13a>
 800d70c:	eba0 0308 	sub.w	r3, r0, r8
 800d710:	fa09 f303 	lsl.w	r3, r9, r3
 800d714:	4313      	orrs	r3, r2
 800d716:	9304      	str	r3, [sp, #16]
 800d718:	46a2      	mov	sl, r4
 800d71a:	e7d2      	b.n	800d6c2 <_vfiprintf_r+0xc6>
 800d71c:	9b03      	ldr	r3, [sp, #12]
 800d71e:	1d19      	adds	r1, r3, #4
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	9103      	str	r1, [sp, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	bfbb      	ittet	lt
 800d728:	425b      	neglt	r3, r3
 800d72a:	f042 0202 	orrlt.w	r2, r2, #2
 800d72e:	9307      	strge	r3, [sp, #28]
 800d730:	9307      	strlt	r3, [sp, #28]
 800d732:	bfb8      	it	lt
 800d734:	9204      	strlt	r2, [sp, #16]
 800d736:	7823      	ldrb	r3, [r4, #0]
 800d738:	2b2e      	cmp	r3, #46	; 0x2e
 800d73a:	d10c      	bne.n	800d756 <_vfiprintf_r+0x15a>
 800d73c:	7863      	ldrb	r3, [r4, #1]
 800d73e:	2b2a      	cmp	r3, #42	; 0x2a
 800d740:	d134      	bne.n	800d7ac <_vfiprintf_r+0x1b0>
 800d742:	9b03      	ldr	r3, [sp, #12]
 800d744:	1d1a      	adds	r2, r3, #4
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	9203      	str	r2, [sp, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bfb8      	it	lt
 800d74e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d752:	3402      	adds	r4, #2
 800d754:	9305      	str	r3, [sp, #20]
 800d756:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d82c <_vfiprintf_r+0x230>
 800d75a:	7821      	ldrb	r1, [r4, #0]
 800d75c:	2203      	movs	r2, #3
 800d75e:	4650      	mov	r0, sl
 800d760:	f7f2 fd56 	bl	8000210 <memchr>
 800d764:	b138      	cbz	r0, 800d776 <_vfiprintf_r+0x17a>
 800d766:	9b04      	ldr	r3, [sp, #16]
 800d768:	eba0 000a 	sub.w	r0, r0, sl
 800d76c:	2240      	movs	r2, #64	; 0x40
 800d76e:	4082      	lsls	r2, r0
 800d770:	4313      	orrs	r3, r2
 800d772:	3401      	adds	r4, #1
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77a:	4829      	ldr	r0, [pc, #164]	; (800d820 <_vfiprintf_r+0x224>)
 800d77c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d780:	2206      	movs	r2, #6
 800d782:	f7f2 fd45 	bl	8000210 <memchr>
 800d786:	2800      	cmp	r0, #0
 800d788:	d03f      	beq.n	800d80a <_vfiprintf_r+0x20e>
 800d78a:	4b26      	ldr	r3, [pc, #152]	; (800d824 <_vfiprintf_r+0x228>)
 800d78c:	bb1b      	cbnz	r3, 800d7d6 <_vfiprintf_r+0x1da>
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	3307      	adds	r3, #7
 800d792:	f023 0307 	bic.w	r3, r3, #7
 800d796:	3308      	adds	r3, #8
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d79c:	443b      	add	r3, r7
 800d79e:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a0:	e768      	b.n	800d674 <_vfiprintf_r+0x78>
 800d7a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	e7a6      	b.n	800d6fa <_vfiprintf_r+0xfe>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	3401      	adds	r4, #1
 800d7b0:	9305      	str	r3, [sp, #20]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f04f 0c0a 	mov.w	ip, #10
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7be:	3a30      	subs	r2, #48	; 0x30
 800d7c0:	2a09      	cmp	r2, #9
 800d7c2:	d903      	bls.n	800d7cc <_vfiprintf_r+0x1d0>
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0c6      	beq.n	800d756 <_vfiprintf_r+0x15a>
 800d7c8:	9105      	str	r1, [sp, #20]
 800d7ca:	e7c4      	b.n	800d756 <_vfiprintf_r+0x15a>
 800d7cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e7f0      	b.n	800d7b8 <_vfiprintf_r+0x1bc>
 800d7d6:	ab03      	add	r3, sp, #12
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	462a      	mov	r2, r5
 800d7dc:	4b12      	ldr	r3, [pc, #72]	; (800d828 <_vfiprintf_r+0x22c>)
 800d7de:	a904      	add	r1, sp, #16
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7fd feb9 	bl	800b558 <_printf_float>
 800d7e6:	4607      	mov	r7, r0
 800d7e8:	1c78      	adds	r0, r7, #1
 800d7ea:	d1d6      	bne.n	800d79a <_vfiprintf_r+0x19e>
 800d7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7ee:	07d9      	lsls	r1, r3, #31
 800d7f0:	d405      	bmi.n	800d7fe <_vfiprintf_r+0x202>
 800d7f2:	89ab      	ldrh	r3, [r5, #12]
 800d7f4:	059a      	lsls	r2, r3, #22
 800d7f6:	d402      	bmi.n	800d7fe <_vfiprintf_r+0x202>
 800d7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7fa:	f7fe fcc5 	bl	800c188 <__retarget_lock_release_recursive>
 800d7fe:	89ab      	ldrh	r3, [r5, #12]
 800d800:	065b      	lsls	r3, r3, #25
 800d802:	f53f af1d 	bmi.w	800d640 <_vfiprintf_r+0x44>
 800d806:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d808:	e71c      	b.n	800d644 <_vfiprintf_r+0x48>
 800d80a:	ab03      	add	r3, sp, #12
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	462a      	mov	r2, r5
 800d810:	4b05      	ldr	r3, [pc, #20]	; (800d828 <_vfiprintf_r+0x22c>)
 800d812:	a904      	add	r1, sp, #16
 800d814:	4630      	mov	r0, r6
 800d816:	f7fe f943 	bl	800baa0 <_printf_i>
 800d81a:	e7e4      	b.n	800d7e6 <_vfiprintf_r+0x1ea>
 800d81c:	08013c47 	.word	0x08013c47
 800d820:	08013c51 	.word	0x08013c51
 800d824:	0800b559 	.word	0x0800b559
 800d828:	0800d5d7 	.word	0x0800d5d7
 800d82c:	08013c4d 	.word	0x08013c4d

0800d830 <malloc>:
 800d830:	4b02      	ldr	r3, [pc, #8]	; (800d83c <malloc+0xc>)
 800d832:	4601      	mov	r1, r0
 800d834:	6818      	ldr	r0, [r3, #0]
 800d836:	f000 b823 	b.w	800d880 <_malloc_r>
 800d83a:	bf00      	nop
 800d83c:	2000009c 	.word	0x2000009c

0800d840 <sbrk_aligned>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	4e0e      	ldr	r6, [pc, #56]	; (800d87c <sbrk_aligned+0x3c>)
 800d844:	460c      	mov	r4, r1
 800d846:	6831      	ldr	r1, [r6, #0]
 800d848:	4605      	mov	r5, r0
 800d84a:	b911      	cbnz	r1, 800d852 <sbrk_aligned+0x12>
 800d84c:	f001 f8fe 	bl	800ea4c <_sbrk_r>
 800d850:	6030      	str	r0, [r6, #0]
 800d852:	4621      	mov	r1, r4
 800d854:	4628      	mov	r0, r5
 800d856:	f001 f8f9 	bl	800ea4c <_sbrk_r>
 800d85a:	1c43      	adds	r3, r0, #1
 800d85c:	d00a      	beq.n	800d874 <sbrk_aligned+0x34>
 800d85e:	1cc4      	adds	r4, r0, #3
 800d860:	f024 0403 	bic.w	r4, r4, #3
 800d864:	42a0      	cmp	r0, r4
 800d866:	d007      	beq.n	800d878 <sbrk_aligned+0x38>
 800d868:	1a21      	subs	r1, r4, r0
 800d86a:	4628      	mov	r0, r5
 800d86c:	f001 f8ee 	bl	800ea4c <_sbrk_r>
 800d870:	3001      	adds	r0, #1
 800d872:	d101      	bne.n	800d878 <sbrk_aligned+0x38>
 800d874:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d878:	4620      	mov	r0, r4
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	20009124 	.word	0x20009124

0800d880 <_malloc_r>:
 800d880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d884:	1ccd      	adds	r5, r1, #3
 800d886:	f025 0503 	bic.w	r5, r5, #3
 800d88a:	3508      	adds	r5, #8
 800d88c:	2d0c      	cmp	r5, #12
 800d88e:	bf38      	it	cc
 800d890:	250c      	movcc	r5, #12
 800d892:	2d00      	cmp	r5, #0
 800d894:	4607      	mov	r7, r0
 800d896:	db01      	blt.n	800d89c <_malloc_r+0x1c>
 800d898:	42a9      	cmp	r1, r5
 800d89a:	d905      	bls.n	800d8a8 <_malloc_r+0x28>
 800d89c:	230c      	movs	r3, #12
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	2600      	movs	r6, #0
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d97c <_malloc_r+0xfc>
 800d8ac:	f000 fa9e 	bl	800ddec <__malloc_lock>
 800d8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b4:	461c      	mov	r4, r3
 800d8b6:	bb5c      	cbnz	r4, 800d910 <_malloc_r+0x90>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4638      	mov	r0, r7
 800d8bc:	f7ff ffc0 	bl	800d840 <sbrk_aligned>
 800d8c0:	1c43      	adds	r3, r0, #1
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	d155      	bne.n	800d972 <_malloc_r+0xf2>
 800d8c6:	f8d8 4000 	ldr.w	r4, [r8]
 800d8ca:	4626      	mov	r6, r4
 800d8cc:	2e00      	cmp	r6, #0
 800d8ce:	d145      	bne.n	800d95c <_malloc_r+0xdc>
 800d8d0:	2c00      	cmp	r4, #0
 800d8d2:	d048      	beq.n	800d966 <_malloc_r+0xe6>
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4638      	mov	r0, r7
 800d8da:	eb04 0903 	add.w	r9, r4, r3
 800d8de:	f001 f8b5 	bl	800ea4c <_sbrk_r>
 800d8e2:	4581      	cmp	r9, r0
 800d8e4:	d13f      	bne.n	800d966 <_malloc_r+0xe6>
 800d8e6:	6821      	ldr	r1, [r4, #0]
 800d8e8:	1a6d      	subs	r5, r5, r1
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	4638      	mov	r0, r7
 800d8ee:	f7ff ffa7 	bl	800d840 <sbrk_aligned>
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d037      	beq.n	800d966 <_malloc_r+0xe6>
 800d8f6:	6823      	ldr	r3, [r4, #0]
 800d8f8:	442b      	add	r3, r5
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d038      	beq.n	800d976 <_malloc_r+0xf6>
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	42a2      	cmp	r2, r4
 800d908:	d12b      	bne.n	800d962 <_malloc_r+0xe2>
 800d90a:	2200      	movs	r2, #0
 800d90c:	605a      	str	r2, [r3, #4]
 800d90e:	e00f      	b.n	800d930 <_malloc_r+0xb0>
 800d910:	6822      	ldr	r2, [r4, #0]
 800d912:	1b52      	subs	r2, r2, r5
 800d914:	d41f      	bmi.n	800d956 <_malloc_r+0xd6>
 800d916:	2a0b      	cmp	r2, #11
 800d918:	d917      	bls.n	800d94a <_malloc_r+0xca>
 800d91a:	1961      	adds	r1, r4, r5
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	6025      	str	r5, [r4, #0]
 800d920:	bf18      	it	ne
 800d922:	6059      	strne	r1, [r3, #4]
 800d924:	6863      	ldr	r3, [r4, #4]
 800d926:	bf08      	it	eq
 800d928:	f8c8 1000 	streq.w	r1, [r8]
 800d92c:	5162      	str	r2, [r4, r5]
 800d92e:	604b      	str	r3, [r1, #4]
 800d930:	4638      	mov	r0, r7
 800d932:	f104 060b 	add.w	r6, r4, #11
 800d936:	f000 fa5f 	bl	800ddf8 <__malloc_unlock>
 800d93a:	f026 0607 	bic.w	r6, r6, #7
 800d93e:	1d23      	adds	r3, r4, #4
 800d940:	1af2      	subs	r2, r6, r3
 800d942:	d0ae      	beq.n	800d8a2 <_malloc_r+0x22>
 800d944:	1b9b      	subs	r3, r3, r6
 800d946:	50a3      	str	r3, [r4, r2]
 800d948:	e7ab      	b.n	800d8a2 <_malloc_r+0x22>
 800d94a:	42a3      	cmp	r3, r4
 800d94c:	6862      	ldr	r2, [r4, #4]
 800d94e:	d1dd      	bne.n	800d90c <_malloc_r+0x8c>
 800d950:	f8c8 2000 	str.w	r2, [r8]
 800d954:	e7ec      	b.n	800d930 <_malloc_r+0xb0>
 800d956:	4623      	mov	r3, r4
 800d958:	6864      	ldr	r4, [r4, #4]
 800d95a:	e7ac      	b.n	800d8b6 <_malloc_r+0x36>
 800d95c:	4634      	mov	r4, r6
 800d95e:	6876      	ldr	r6, [r6, #4]
 800d960:	e7b4      	b.n	800d8cc <_malloc_r+0x4c>
 800d962:	4613      	mov	r3, r2
 800d964:	e7cc      	b.n	800d900 <_malloc_r+0x80>
 800d966:	230c      	movs	r3, #12
 800d968:	603b      	str	r3, [r7, #0]
 800d96a:	4638      	mov	r0, r7
 800d96c:	f000 fa44 	bl	800ddf8 <__malloc_unlock>
 800d970:	e797      	b.n	800d8a2 <_malloc_r+0x22>
 800d972:	6025      	str	r5, [r4, #0]
 800d974:	e7dc      	b.n	800d930 <_malloc_r+0xb0>
 800d976:	605b      	str	r3, [r3, #4]
 800d978:	deff      	udf	#255	; 0xff
 800d97a:	bf00      	nop
 800d97c:	20009120 	.word	0x20009120

0800d980 <_scanf_chars>:
 800d980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d984:	4615      	mov	r5, r2
 800d986:	688a      	ldr	r2, [r1, #8]
 800d988:	4680      	mov	r8, r0
 800d98a:	460c      	mov	r4, r1
 800d98c:	b932      	cbnz	r2, 800d99c <_scanf_chars+0x1c>
 800d98e:	698a      	ldr	r2, [r1, #24]
 800d990:	2a00      	cmp	r2, #0
 800d992:	bf0c      	ite	eq
 800d994:	2201      	moveq	r2, #1
 800d996:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800d99a:	608a      	str	r2, [r1, #8]
 800d99c:	6822      	ldr	r2, [r4, #0]
 800d99e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800da30 <_scanf_chars+0xb0>
 800d9a2:	06d1      	lsls	r1, r2, #27
 800d9a4:	bf5f      	itttt	pl
 800d9a6:	681a      	ldrpl	r2, [r3, #0]
 800d9a8:	1d11      	addpl	r1, r2, #4
 800d9aa:	6019      	strpl	r1, [r3, #0]
 800d9ac:	6816      	ldrpl	r6, [r2, #0]
 800d9ae:	2700      	movs	r7, #0
 800d9b0:	69a0      	ldr	r0, [r4, #24]
 800d9b2:	b188      	cbz	r0, 800d9d8 <_scanf_chars+0x58>
 800d9b4:	2801      	cmp	r0, #1
 800d9b6:	d107      	bne.n	800d9c8 <_scanf_chars+0x48>
 800d9b8:	682a      	ldr	r2, [r5, #0]
 800d9ba:	7811      	ldrb	r1, [r2, #0]
 800d9bc:	6962      	ldr	r2, [r4, #20]
 800d9be:	5c52      	ldrb	r2, [r2, r1]
 800d9c0:	b952      	cbnz	r2, 800d9d8 <_scanf_chars+0x58>
 800d9c2:	2f00      	cmp	r7, #0
 800d9c4:	d031      	beq.n	800da2a <_scanf_chars+0xaa>
 800d9c6:	e022      	b.n	800da0e <_scanf_chars+0x8e>
 800d9c8:	2802      	cmp	r0, #2
 800d9ca:	d120      	bne.n	800da0e <_scanf_chars+0x8e>
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d9d4:	071b      	lsls	r3, r3, #28
 800d9d6:	d41a      	bmi.n	800da0e <_scanf_chars+0x8e>
 800d9d8:	6823      	ldr	r3, [r4, #0]
 800d9da:	06da      	lsls	r2, r3, #27
 800d9dc:	bf5e      	ittt	pl
 800d9de:	682b      	ldrpl	r3, [r5, #0]
 800d9e0:	781b      	ldrbpl	r3, [r3, #0]
 800d9e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d9e6:	682a      	ldr	r2, [r5, #0]
 800d9e8:	686b      	ldr	r3, [r5, #4]
 800d9ea:	3201      	adds	r2, #1
 800d9ec:	602a      	str	r2, [r5, #0]
 800d9ee:	68a2      	ldr	r2, [r4, #8]
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	3a01      	subs	r2, #1
 800d9f4:	606b      	str	r3, [r5, #4]
 800d9f6:	3701      	adds	r7, #1
 800d9f8:	60a2      	str	r2, [r4, #8]
 800d9fa:	b142      	cbz	r2, 800da0e <_scanf_chars+0x8e>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dcd7      	bgt.n	800d9b0 <_scanf_chars+0x30>
 800da00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da04:	4629      	mov	r1, r5
 800da06:	4640      	mov	r0, r8
 800da08:	4798      	blx	r3
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d0d0      	beq.n	800d9b0 <_scanf_chars+0x30>
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	f013 0310 	ands.w	r3, r3, #16
 800da14:	d105      	bne.n	800da22 <_scanf_chars+0xa2>
 800da16:	68e2      	ldr	r2, [r4, #12]
 800da18:	3201      	adds	r2, #1
 800da1a:	60e2      	str	r2, [r4, #12]
 800da1c:	69a2      	ldr	r2, [r4, #24]
 800da1e:	b102      	cbz	r2, 800da22 <_scanf_chars+0xa2>
 800da20:	7033      	strb	r3, [r6, #0]
 800da22:	6923      	ldr	r3, [r4, #16]
 800da24:	443b      	add	r3, r7
 800da26:	6123      	str	r3, [r4, #16]
 800da28:	2000      	movs	r0, #0
 800da2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da2e:	bf00      	nop
 800da30:	08013dd7 	.word	0x08013dd7

0800da34 <_scanf_i>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	4698      	mov	r8, r3
 800da3a:	4b74      	ldr	r3, [pc, #464]	; (800dc0c <_scanf_i+0x1d8>)
 800da3c:	460c      	mov	r4, r1
 800da3e:	4682      	mov	sl, r0
 800da40:	4616      	mov	r6, r2
 800da42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da46:	b087      	sub	sp, #28
 800da48:	ab03      	add	r3, sp, #12
 800da4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da4e:	4b70      	ldr	r3, [pc, #448]	; (800dc10 <_scanf_i+0x1dc>)
 800da50:	69a1      	ldr	r1, [r4, #24]
 800da52:	4a70      	ldr	r2, [pc, #448]	; (800dc14 <_scanf_i+0x1e0>)
 800da54:	2903      	cmp	r1, #3
 800da56:	bf18      	it	ne
 800da58:	461a      	movne	r2, r3
 800da5a:	68a3      	ldr	r3, [r4, #8]
 800da5c:	9201      	str	r2, [sp, #4]
 800da5e:	1e5a      	subs	r2, r3, #1
 800da60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da64:	bf88      	it	hi
 800da66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da6a:	4627      	mov	r7, r4
 800da6c:	bf82      	ittt	hi
 800da6e:	eb03 0905 	addhi.w	r9, r3, r5
 800da72:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da76:	60a3      	strhi	r3, [r4, #8]
 800da78:	f857 3b1c 	ldr.w	r3, [r7], #28
 800da7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800da80:	bf98      	it	ls
 800da82:	f04f 0900 	movls.w	r9, #0
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	463d      	mov	r5, r7
 800da8a:	f04f 0b00 	mov.w	fp, #0
 800da8e:	6831      	ldr	r1, [r6, #0]
 800da90:	ab03      	add	r3, sp, #12
 800da92:	7809      	ldrb	r1, [r1, #0]
 800da94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800da98:	2202      	movs	r2, #2
 800da9a:	f7f2 fbb9 	bl	8000210 <memchr>
 800da9e:	b328      	cbz	r0, 800daec <_scanf_i+0xb8>
 800daa0:	f1bb 0f01 	cmp.w	fp, #1
 800daa4:	d159      	bne.n	800db5a <_scanf_i+0x126>
 800daa6:	6862      	ldr	r2, [r4, #4]
 800daa8:	b92a      	cbnz	r2, 800dab6 <_scanf_i+0x82>
 800daaa:	6822      	ldr	r2, [r4, #0]
 800daac:	2308      	movs	r3, #8
 800daae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dab2:	6063      	str	r3, [r4, #4]
 800dab4:	6022      	str	r2, [r4, #0]
 800dab6:	6822      	ldr	r2, [r4, #0]
 800dab8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dabc:	6022      	str	r2, [r4, #0]
 800dabe:	68a2      	ldr	r2, [r4, #8]
 800dac0:	1e51      	subs	r1, r2, #1
 800dac2:	60a1      	str	r1, [r4, #8]
 800dac4:	b192      	cbz	r2, 800daec <_scanf_i+0xb8>
 800dac6:	6832      	ldr	r2, [r6, #0]
 800dac8:	1c51      	adds	r1, r2, #1
 800daca:	6031      	str	r1, [r6, #0]
 800dacc:	7812      	ldrb	r2, [r2, #0]
 800dace:	f805 2b01 	strb.w	r2, [r5], #1
 800dad2:	6872      	ldr	r2, [r6, #4]
 800dad4:	3a01      	subs	r2, #1
 800dad6:	2a00      	cmp	r2, #0
 800dad8:	6072      	str	r2, [r6, #4]
 800dada:	dc07      	bgt.n	800daec <_scanf_i+0xb8>
 800dadc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800dae0:	4631      	mov	r1, r6
 800dae2:	4650      	mov	r0, sl
 800dae4:	4790      	blx	r2
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f040 8085 	bne.w	800dbf6 <_scanf_i+0x1c2>
 800daec:	f10b 0b01 	add.w	fp, fp, #1
 800daf0:	f1bb 0f03 	cmp.w	fp, #3
 800daf4:	d1cb      	bne.n	800da8e <_scanf_i+0x5a>
 800daf6:	6863      	ldr	r3, [r4, #4]
 800daf8:	b90b      	cbnz	r3, 800dafe <_scanf_i+0xca>
 800dafa:	230a      	movs	r3, #10
 800dafc:	6063      	str	r3, [r4, #4]
 800dafe:	6863      	ldr	r3, [r4, #4]
 800db00:	4945      	ldr	r1, [pc, #276]	; (800dc18 <_scanf_i+0x1e4>)
 800db02:	6960      	ldr	r0, [r4, #20]
 800db04:	1ac9      	subs	r1, r1, r3
 800db06:	f000 f889 	bl	800dc1c <__sccl>
 800db0a:	f04f 0b00 	mov.w	fp, #0
 800db0e:	68a3      	ldr	r3, [r4, #8]
 800db10:	6822      	ldr	r2, [r4, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d03d      	beq.n	800db92 <_scanf_i+0x15e>
 800db16:	6831      	ldr	r1, [r6, #0]
 800db18:	6960      	ldr	r0, [r4, #20]
 800db1a:	f891 c000 	ldrb.w	ip, [r1]
 800db1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800db22:	2800      	cmp	r0, #0
 800db24:	d035      	beq.n	800db92 <_scanf_i+0x15e>
 800db26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800db2a:	d124      	bne.n	800db76 <_scanf_i+0x142>
 800db2c:	0510      	lsls	r0, r2, #20
 800db2e:	d522      	bpl.n	800db76 <_scanf_i+0x142>
 800db30:	f10b 0b01 	add.w	fp, fp, #1
 800db34:	f1b9 0f00 	cmp.w	r9, #0
 800db38:	d003      	beq.n	800db42 <_scanf_i+0x10e>
 800db3a:	3301      	adds	r3, #1
 800db3c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800db40:	60a3      	str	r3, [r4, #8]
 800db42:	6873      	ldr	r3, [r6, #4]
 800db44:	3b01      	subs	r3, #1
 800db46:	2b00      	cmp	r3, #0
 800db48:	6073      	str	r3, [r6, #4]
 800db4a:	dd1b      	ble.n	800db84 <_scanf_i+0x150>
 800db4c:	6833      	ldr	r3, [r6, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	6033      	str	r3, [r6, #0]
 800db52:	68a3      	ldr	r3, [r4, #8]
 800db54:	3b01      	subs	r3, #1
 800db56:	60a3      	str	r3, [r4, #8]
 800db58:	e7d9      	b.n	800db0e <_scanf_i+0xda>
 800db5a:	f1bb 0f02 	cmp.w	fp, #2
 800db5e:	d1ae      	bne.n	800dabe <_scanf_i+0x8a>
 800db60:	6822      	ldr	r2, [r4, #0]
 800db62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800db66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800db6a:	d1bf      	bne.n	800daec <_scanf_i+0xb8>
 800db6c:	2310      	movs	r3, #16
 800db6e:	6063      	str	r3, [r4, #4]
 800db70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db74:	e7a2      	b.n	800dabc <_scanf_i+0x88>
 800db76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800db7a:	6022      	str	r2, [r4, #0]
 800db7c:	780b      	ldrb	r3, [r1, #0]
 800db7e:	f805 3b01 	strb.w	r3, [r5], #1
 800db82:	e7de      	b.n	800db42 <_scanf_i+0x10e>
 800db84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800db88:	4631      	mov	r1, r6
 800db8a:	4650      	mov	r0, sl
 800db8c:	4798      	blx	r3
 800db8e:	2800      	cmp	r0, #0
 800db90:	d0df      	beq.n	800db52 <_scanf_i+0x11e>
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	05d9      	lsls	r1, r3, #23
 800db96:	d50d      	bpl.n	800dbb4 <_scanf_i+0x180>
 800db98:	42bd      	cmp	r5, r7
 800db9a:	d909      	bls.n	800dbb0 <_scanf_i+0x17c>
 800db9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dba0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dba4:	4632      	mov	r2, r6
 800dba6:	4650      	mov	r0, sl
 800dba8:	4798      	blx	r3
 800dbaa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800dbae:	464d      	mov	r5, r9
 800dbb0:	42bd      	cmp	r5, r7
 800dbb2:	d028      	beq.n	800dc06 <_scanf_i+0x1d2>
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	f012 0210 	ands.w	r2, r2, #16
 800dbba:	d113      	bne.n	800dbe4 <_scanf_i+0x1b0>
 800dbbc:	702a      	strb	r2, [r5, #0]
 800dbbe:	6863      	ldr	r3, [r4, #4]
 800dbc0:	9e01      	ldr	r6, [sp, #4]
 800dbc2:	4639      	mov	r1, r7
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	47b0      	blx	r6
 800dbc8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbcc:	6821      	ldr	r1, [r4, #0]
 800dbce:	1d1a      	adds	r2, r3, #4
 800dbd0:	f8c8 2000 	str.w	r2, [r8]
 800dbd4:	f011 0f20 	tst.w	r1, #32
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	d00f      	beq.n	800dbfc <_scanf_i+0x1c8>
 800dbdc:	6018      	str	r0, [r3, #0]
 800dbde:	68e3      	ldr	r3, [r4, #12]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	60e3      	str	r3, [r4, #12]
 800dbe4:	6923      	ldr	r3, [r4, #16]
 800dbe6:	1bed      	subs	r5, r5, r7
 800dbe8:	445d      	add	r5, fp
 800dbea:	442b      	add	r3, r5
 800dbec:	6123      	str	r3, [r4, #16]
 800dbee:	2000      	movs	r0, #0
 800dbf0:	b007      	add	sp, #28
 800dbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf6:	f04f 0b00 	mov.w	fp, #0
 800dbfa:	e7ca      	b.n	800db92 <_scanf_i+0x15e>
 800dbfc:	07ca      	lsls	r2, r1, #31
 800dbfe:	bf4c      	ite	mi
 800dc00:	8018      	strhmi	r0, [r3, #0]
 800dc02:	6018      	strpl	r0, [r3, #0]
 800dc04:	e7eb      	b.n	800dbde <_scanf_i+0x1aa>
 800dc06:	2001      	movs	r0, #1
 800dc08:	e7f2      	b.n	800dbf0 <_scanf_i+0x1bc>
 800dc0a:	bf00      	nop
 800dc0c:	0800fa6c 	.word	0x0800fa6c
 800dc10:	0800e7e1 	.word	0x0800e7e1
 800dc14:	0800e6f9 	.word	0x0800e6f9
 800dc18:	08013c68 	.word	0x08013c68

0800dc1c <__sccl>:
 800dc1c:	b570      	push	{r4, r5, r6, lr}
 800dc1e:	780b      	ldrb	r3, [r1, #0]
 800dc20:	4604      	mov	r4, r0
 800dc22:	2b5e      	cmp	r3, #94	; 0x5e
 800dc24:	bf0b      	itete	eq
 800dc26:	784b      	ldrbeq	r3, [r1, #1]
 800dc28:	1c4a      	addne	r2, r1, #1
 800dc2a:	1c8a      	addeq	r2, r1, #2
 800dc2c:	2100      	movne	r1, #0
 800dc2e:	bf08      	it	eq
 800dc30:	2101      	moveq	r1, #1
 800dc32:	3801      	subs	r0, #1
 800dc34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dc38:	f800 1f01 	strb.w	r1, [r0, #1]!
 800dc3c:	42a8      	cmp	r0, r5
 800dc3e:	d1fb      	bne.n	800dc38 <__sccl+0x1c>
 800dc40:	b90b      	cbnz	r3, 800dc46 <__sccl+0x2a>
 800dc42:	1e50      	subs	r0, r2, #1
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	f081 0101 	eor.w	r1, r1, #1
 800dc4a:	54e1      	strb	r1, [r4, r3]
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	4602      	mov	r2, r0
 800dc50:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dc54:	2d2d      	cmp	r5, #45	; 0x2d
 800dc56:	d005      	beq.n	800dc64 <__sccl+0x48>
 800dc58:	2d5d      	cmp	r5, #93	; 0x5d
 800dc5a:	d016      	beq.n	800dc8a <__sccl+0x6e>
 800dc5c:	2d00      	cmp	r5, #0
 800dc5e:	d0f1      	beq.n	800dc44 <__sccl+0x28>
 800dc60:	462b      	mov	r3, r5
 800dc62:	e7f2      	b.n	800dc4a <__sccl+0x2e>
 800dc64:	7846      	ldrb	r6, [r0, #1]
 800dc66:	2e5d      	cmp	r6, #93	; 0x5d
 800dc68:	d0fa      	beq.n	800dc60 <__sccl+0x44>
 800dc6a:	42b3      	cmp	r3, r6
 800dc6c:	dcf8      	bgt.n	800dc60 <__sccl+0x44>
 800dc6e:	3002      	adds	r0, #2
 800dc70:	461a      	mov	r2, r3
 800dc72:	3201      	adds	r2, #1
 800dc74:	4296      	cmp	r6, r2
 800dc76:	54a1      	strb	r1, [r4, r2]
 800dc78:	dcfb      	bgt.n	800dc72 <__sccl+0x56>
 800dc7a:	1af2      	subs	r2, r6, r3
 800dc7c:	3a01      	subs	r2, #1
 800dc7e:	1c5d      	adds	r5, r3, #1
 800dc80:	42b3      	cmp	r3, r6
 800dc82:	bfa8      	it	ge
 800dc84:	2200      	movge	r2, #0
 800dc86:	18ab      	adds	r3, r5, r2
 800dc88:	e7e1      	b.n	800dc4e <__sccl+0x32>
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	e7da      	b.n	800dc44 <__sccl+0x28>
	...

0800dc90 <__sflush_r>:
 800dc90:	898a      	ldrh	r2, [r1, #12]
 800dc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc96:	4605      	mov	r5, r0
 800dc98:	0710      	lsls	r0, r2, #28
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	d458      	bmi.n	800dd50 <__sflush_r+0xc0>
 800dc9e:	684b      	ldr	r3, [r1, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	dc05      	bgt.n	800dcb0 <__sflush_r+0x20>
 800dca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	dc02      	bgt.n	800dcb0 <__sflush_r+0x20>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcb2:	2e00      	cmp	r6, #0
 800dcb4:	d0f9      	beq.n	800dcaa <__sflush_r+0x1a>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcbc:	682f      	ldr	r7, [r5, #0]
 800dcbe:	6a21      	ldr	r1, [r4, #32]
 800dcc0:	602b      	str	r3, [r5, #0]
 800dcc2:	d032      	beq.n	800dd2a <__sflush_r+0x9a>
 800dcc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	075a      	lsls	r2, r3, #29
 800dcca:	d505      	bpl.n	800dcd8 <__sflush_r+0x48>
 800dccc:	6863      	ldr	r3, [r4, #4]
 800dcce:	1ac0      	subs	r0, r0, r3
 800dcd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcd2:	b10b      	cbz	r3, 800dcd8 <__sflush_r+0x48>
 800dcd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcd6:	1ac0      	subs	r0, r0, r3
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4602      	mov	r2, r0
 800dcdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcde:	6a21      	ldr	r1, [r4, #32]
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b0      	blx	r6
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	d106      	bne.n	800dcf8 <__sflush_r+0x68>
 800dcea:	6829      	ldr	r1, [r5, #0]
 800dcec:	291d      	cmp	r1, #29
 800dcee:	d82b      	bhi.n	800dd48 <__sflush_r+0xb8>
 800dcf0:	4a29      	ldr	r2, [pc, #164]	; (800dd98 <__sflush_r+0x108>)
 800dcf2:	410a      	asrs	r2, r1
 800dcf4:	07d6      	lsls	r6, r2, #31
 800dcf6:	d427      	bmi.n	800dd48 <__sflush_r+0xb8>
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	6062      	str	r2, [r4, #4]
 800dcfc:	04d9      	lsls	r1, r3, #19
 800dcfe:	6922      	ldr	r2, [r4, #16]
 800dd00:	6022      	str	r2, [r4, #0]
 800dd02:	d504      	bpl.n	800dd0e <__sflush_r+0x7e>
 800dd04:	1c42      	adds	r2, r0, #1
 800dd06:	d101      	bne.n	800dd0c <__sflush_r+0x7c>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	b903      	cbnz	r3, 800dd0e <__sflush_r+0x7e>
 800dd0c:	6560      	str	r0, [r4, #84]	; 0x54
 800dd0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd10:	602f      	str	r7, [r5, #0]
 800dd12:	2900      	cmp	r1, #0
 800dd14:	d0c9      	beq.n	800dcaa <__sflush_r+0x1a>
 800dd16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd1a:	4299      	cmp	r1, r3
 800dd1c:	d002      	beq.n	800dd24 <__sflush_r+0x94>
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f7ff f8cc 	bl	800cebc <_free_r>
 800dd24:	2000      	movs	r0, #0
 800dd26:	6360      	str	r0, [r4, #52]	; 0x34
 800dd28:	e7c0      	b.n	800dcac <__sflush_r+0x1c>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	47b0      	blx	r6
 800dd30:	1c41      	adds	r1, r0, #1
 800dd32:	d1c8      	bne.n	800dcc6 <__sflush_r+0x36>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0c5      	beq.n	800dcc6 <__sflush_r+0x36>
 800dd3a:	2b1d      	cmp	r3, #29
 800dd3c:	d001      	beq.n	800dd42 <__sflush_r+0xb2>
 800dd3e:	2b16      	cmp	r3, #22
 800dd40:	d101      	bne.n	800dd46 <__sflush_r+0xb6>
 800dd42:	602f      	str	r7, [r5, #0]
 800dd44:	e7b1      	b.n	800dcaa <__sflush_r+0x1a>
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	e7ad      	b.n	800dcac <__sflush_r+0x1c>
 800dd50:	690f      	ldr	r7, [r1, #16]
 800dd52:	2f00      	cmp	r7, #0
 800dd54:	d0a9      	beq.n	800dcaa <__sflush_r+0x1a>
 800dd56:	0793      	lsls	r3, r2, #30
 800dd58:	680e      	ldr	r6, [r1, #0]
 800dd5a:	bf08      	it	eq
 800dd5c:	694b      	ldreq	r3, [r1, #20]
 800dd5e:	600f      	str	r7, [r1, #0]
 800dd60:	bf18      	it	ne
 800dd62:	2300      	movne	r3, #0
 800dd64:	eba6 0807 	sub.w	r8, r6, r7
 800dd68:	608b      	str	r3, [r1, #8]
 800dd6a:	f1b8 0f00 	cmp.w	r8, #0
 800dd6e:	dd9c      	ble.n	800dcaa <__sflush_r+0x1a>
 800dd70:	6a21      	ldr	r1, [r4, #32]
 800dd72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd74:	4643      	mov	r3, r8
 800dd76:	463a      	mov	r2, r7
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b0      	blx	r6
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	dc06      	bgt.n	800dd8e <__sflush_r+0xfe>
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd86:	81a3      	strh	r3, [r4, #12]
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd8c:	e78e      	b.n	800dcac <__sflush_r+0x1c>
 800dd8e:	4407      	add	r7, r0
 800dd90:	eba8 0800 	sub.w	r8, r8, r0
 800dd94:	e7e9      	b.n	800dd6a <__sflush_r+0xda>
 800dd96:	bf00      	nop
 800dd98:	dfbffffe 	.word	0xdfbffffe

0800dd9c <_fflush_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	690b      	ldr	r3, [r1, #16]
 800dda0:	4605      	mov	r5, r0
 800dda2:	460c      	mov	r4, r1
 800dda4:	b913      	cbnz	r3, 800ddac <_fflush_r+0x10>
 800dda6:	2500      	movs	r5, #0
 800dda8:	4628      	mov	r0, r5
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	b118      	cbz	r0, 800ddb6 <_fflush_r+0x1a>
 800ddae:	6a03      	ldr	r3, [r0, #32]
 800ddb0:	b90b      	cbnz	r3, 800ddb6 <_fflush_r+0x1a>
 800ddb2:	f7fe f8e9 	bl	800bf88 <__sinit>
 800ddb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0f3      	beq.n	800dda6 <_fflush_r+0xa>
 800ddbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddc0:	07d0      	lsls	r0, r2, #31
 800ddc2:	d404      	bmi.n	800ddce <_fflush_r+0x32>
 800ddc4:	0599      	lsls	r1, r3, #22
 800ddc6:	d402      	bmi.n	800ddce <_fflush_r+0x32>
 800ddc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddca:	f7fe f9dc 	bl	800c186 <__retarget_lock_acquire_recursive>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	f7ff ff5d 	bl	800dc90 <__sflush_r>
 800ddd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddd8:	07da      	lsls	r2, r3, #31
 800ddda:	4605      	mov	r5, r0
 800dddc:	d4e4      	bmi.n	800dda8 <_fflush_r+0xc>
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	059b      	lsls	r3, r3, #22
 800dde2:	d4e1      	bmi.n	800dda8 <_fflush_r+0xc>
 800dde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dde6:	f7fe f9cf 	bl	800c188 <__retarget_lock_release_recursive>
 800ddea:	e7dd      	b.n	800dda8 <_fflush_r+0xc>

0800ddec <__malloc_lock>:
 800ddec:	4801      	ldr	r0, [pc, #4]	; (800ddf4 <__malloc_lock+0x8>)
 800ddee:	f7fe b9ca 	b.w	800c186 <__retarget_lock_acquire_recursive>
 800ddf2:	bf00      	nop
 800ddf4:	2000911c 	.word	0x2000911c

0800ddf8 <__malloc_unlock>:
 800ddf8:	4801      	ldr	r0, [pc, #4]	; (800de00 <__malloc_unlock+0x8>)
 800ddfa:	f7fe b9c5 	b.w	800c188 <__retarget_lock_release_recursive>
 800ddfe:	bf00      	nop
 800de00:	2000911c 	.word	0x2000911c

0800de04 <_Balloc>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	69c6      	ldr	r6, [r0, #28]
 800de08:	4604      	mov	r4, r0
 800de0a:	460d      	mov	r5, r1
 800de0c:	b976      	cbnz	r6, 800de2c <_Balloc+0x28>
 800de0e:	2010      	movs	r0, #16
 800de10:	f7ff fd0e 	bl	800d830 <malloc>
 800de14:	4602      	mov	r2, r0
 800de16:	61e0      	str	r0, [r4, #28]
 800de18:	b920      	cbnz	r0, 800de24 <_Balloc+0x20>
 800de1a:	4b18      	ldr	r3, [pc, #96]	; (800de7c <_Balloc+0x78>)
 800de1c:	4818      	ldr	r0, [pc, #96]	; (800de80 <_Balloc+0x7c>)
 800de1e:	216b      	movs	r1, #107	; 0x6b
 800de20:	f7fe f9b4 	bl	800c18c <__assert_func>
 800de24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de28:	6006      	str	r6, [r0, #0]
 800de2a:	60c6      	str	r6, [r0, #12]
 800de2c:	69e6      	ldr	r6, [r4, #28]
 800de2e:	68f3      	ldr	r3, [r6, #12]
 800de30:	b183      	cbz	r3, 800de54 <_Balloc+0x50>
 800de32:	69e3      	ldr	r3, [r4, #28]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de3a:	b9b8      	cbnz	r0, 800de6c <_Balloc+0x68>
 800de3c:	2101      	movs	r1, #1
 800de3e:	fa01 f605 	lsl.w	r6, r1, r5
 800de42:	1d72      	adds	r2, r6, #5
 800de44:	0092      	lsls	r2, r2, #2
 800de46:	4620      	mov	r0, r4
 800de48:	f000 fe25 	bl	800ea96 <_calloc_r>
 800de4c:	b160      	cbz	r0, 800de68 <_Balloc+0x64>
 800de4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de52:	e00e      	b.n	800de72 <_Balloc+0x6e>
 800de54:	2221      	movs	r2, #33	; 0x21
 800de56:	2104      	movs	r1, #4
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 fe1c 	bl	800ea96 <_calloc_r>
 800de5e:	69e3      	ldr	r3, [r4, #28]
 800de60:	60f0      	str	r0, [r6, #12]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d1e4      	bne.n	800de32 <_Balloc+0x2e>
 800de68:	2000      	movs	r0, #0
 800de6a:	bd70      	pop	{r4, r5, r6, pc}
 800de6c:	6802      	ldr	r2, [r0, #0]
 800de6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de72:	2300      	movs	r3, #0
 800de74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de78:	e7f7      	b.n	800de6a <_Balloc+0x66>
 800de7a:	bf00      	nop
 800de7c:	08013bc7 	.word	0x08013bc7
 800de80:	08013c73 	.word	0x08013c73

0800de84 <_Bfree>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	69c6      	ldr	r6, [r0, #28]
 800de88:	4605      	mov	r5, r0
 800de8a:	460c      	mov	r4, r1
 800de8c:	b976      	cbnz	r6, 800deac <_Bfree+0x28>
 800de8e:	2010      	movs	r0, #16
 800de90:	f7ff fcce 	bl	800d830 <malloc>
 800de94:	4602      	mov	r2, r0
 800de96:	61e8      	str	r0, [r5, #28]
 800de98:	b920      	cbnz	r0, 800dea4 <_Bfree+0x20>
 800de9a:	4b09      	ldr	r3, [pc, #36]	; (800dec0 <_Bfree+0x3c>)
 800de9c:	4809      	ldr	r0, [pc, #36]	; (800dec4 <_Bfree+0x40>)
 800de9e:	218f      	movs	r1, #143	; 0x8f
 800dea0:	f7fe f974 	bl	800c18c <__assert_func>
 800dea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dea8:	6006      	str	r6, [r0, #0]
 800deaa:	60c6      	str	r6, [r0, #12]
 800deac:	b13c      	cbz	r4, 800debe <_Bfree+0x3a>
 800deae:	69eb      	ldr	r3, [r5, #28]
 800deb0:	6862      	ldr	r2, [r4, #4]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800deb8:	6021      	str	r1, [r4, #0]
 800deba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800debe:	bd70      	pop	{r4, r5, r6, pc}
 800dec0:	08013bc7 	.word	0x08013bc7
 800dec4:	08013c73 	.word	0x08013c73

0800dec8 <__multadd>:
 800dec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800decc:	690d      	ldr	r5, [r1, #16]
 800dece:	4607      	mov	r7, r0
 800ded0:	460c      	mov	r4, r1
 800ded2:	461e      	mov	r6, r3
 800ded4:	f101 0c14 	add.w	ip, r1, #20
 800ded8:	2000      	movs	r0, #0
 800deda:	f8dc 3000 	ldr.w	r3, [ip]
 800dede:	b299      	uxth	r1, r3
 800dee0:	fb02 6101 	mla	r1, r2, r1, r6
 800dee4:	0c1e      	lsrs	r6, r3, #16
 800dee6:	0c0b      	lsrs	r3, r1, #16
 800dee8:	fb02 3306 	mla	r3, r2, r6, r3
 800deec:	b289      	uxth	r1, r1
 800deee:	3001      	adds	r0, #1
 800def0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800def4:	4285      	cmp	r5, r0
 800def6:	f84c 1b04 	str.w	r1, [ip], #4
 800defa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800defe:	dcec      	bgt.n	800deda <__multadd+0x12>
 800df00:	b30e      	cbz	r6, 800df46 <__multadd+0x7e>
 800df02:	68a3      	ldr	r3, [r4, #8]
 800df04:	42ab      	cmp	r3, r5
 800df06:	dc19      	bgt.n	800df3c <__multadd+0x74>
 800df08:	6861      	ldr	r1, [r4, #4]
 800df0a:	4638      	mov	r0, r7
 800df0c:	3101      	adds	r1, #1
 800df0e:	f7ff ff79 	bl	800de04 <_Balloc>
 800df12:	4680      	mov	r8, r0
 800df14:	b928      	cbnz	r0, 800df22 <__multadd+0x5a>
 800df16:	4602      	mov	r2, r0
 800df18:	4b0c      	ldr	r3, [pc, #48]	; (800df4c <__multadd+0x84>)
 800df1a:	480d      	ldr	r0, [pc, #52]	; (800df50 <__multadd+0x88>)
 800df1c:	21ba      	movs	r1, #186	; 0xba
 800df1e:	f7fe f935 	bl	800c18c <__assert_func>
 800df22:	6922      	ldr	r2, [r4, #16]
 800df24:	3202      	adds	r2, #2
 800df26:	f104 010c 	add.w	r1, r4, #12
 800df2a:	0092      	lsls	r2, r2, #2
 800df2c:	300c      	adds	r0, #12
 800df2e:	f000 fd9d 	bl	800ea6c <memcpy>
 800df32:	4621      	mov	r1, r4
 800df34:	4638      	mov	r0, r7
 800df36:	f7ff ffa5 	bl	800de84 <_Bfree>
 800df3a:	4644      	mov	r4, r8
 800df3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df40:	3501      	adds	r5, #1
 800df42:	615e      	str	r6, [r3, #20]
 800df44:	6125      	str	r5, [r4, #16]
 800df46:	4620      	mov	r0, r4
 800df48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df4c:	08013c36 	.word	0x08013c36
 800df50:	08013c73 	.word	0x08013c73

0800df54 <__hi0bits>:
 800df54:	0c03      	lsrs	r3, r0, #16
 800df56:	041b      	lsls	r3, r3, #16
 800df58:	b9d3      	cbnz	r3, 800df90 <__hi0bits+0x3c>
 800df5a:	0400      	lsls	r0, r0, #16
 800df5c:	2310      	movs	r3, #16
 800df5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df62:	bf04      	itt	eq
 800df64:	0200      	lsleq	r0, r0, #8
 800df66:	3308      	addeq	r3, #8
 800df68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df6c:	bf04      	itt	eq
 800df6e:	0100      	lsleq	r0, r0, #4
 800df70:	3304      	addeq	r3, #4
 800df72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df76:	bf04      	itt	eq
 800df78:	0080      	lsleq	r0, r0, #2
 800df7a:	3302      	addeq	r3, #2
 800df7c:	2800      	cmp	r0, #0
 800df7e:	db05      	blt.n	800df8c <__hi0bits+0x38>
 800df80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df84:	f103 0301 	add.w	r3, r3, #1
 800df88:	bf08      	it	eq
 800df8a:	2320      	moveq	r3, #32
 800df8c:	4618      	mov	r0, r3
 800df8e:	4770      	bx	lr
 800df90:	2300      	movs	r3, #0
 800df92:	e7e4      	b.n	800df5e <__hi0bits+0xa>

0800df94 <__lo0bits>:
 800df94:	6803      	ldr	r3, [r0, #0]
 800df96:	f013 0207 	ands.w	r2, r3, #7
 800df9a:	d00c      	beq.n	800dfb6 <__lo0bits+0x22>
 800df9c:	07d9      	lsls	r1, r3, #31
 800df9e:	d422      	bmi.n	800dfe6 <__lo0bits+0x52>
 800dfa0:	079a      	lsls	r2, r3, #30
 800dfa2:	bf49      	itett	mi
 800dfa4:	085b      	lsrmi	r3, r3, #1
 800dfa6:	089b      	lsrpl	r3, r3, #2
 800dfa8:	6003      	strmi	r3, [r0, #0]
 800dfaa:	2201      	movmi	r2, #1
 800dfac:	bf5c      	itt	pl
 800dfae:	6003      	strpl	r3, [r0, #0]
 800dfb0:	2202      	movpl	r2, #2
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	4770      	bx	lr
 800dfb6:	b299      	uxth	r1, r3
 800dfb8:	b909      	cbnz	r1, 800dfbe <__lo0bits+0x2a>
 800dfba:	0c1b      	lsrs	r3, r3, #16
 800dfbc:	2210      	movs	r2, #16
 800dfbe:	b2d9      	uxtb	r1, r3
 800dfc0:	b909      	cbnz	r1, 800dfc6 <__lo0bits+0x32>
 800dfc2:	3208      	adds	r2, #8
 800dfc4:	0a1b      	lsrs	r3, r3, #8
 800dfc6:	0719      	lsls	r1, r3, #28
 800dfc8:	bf04      	itt	eq
 800dfca:	091b      	lsreq	r3, r3, #4
 800dfcc:	3204      	addeq	r2, #4
 800dfce:	0799      	lsls	r1, r3, #30
 800dfd0:	bf04      	itt	eq
 800dfd2:	089b      	lsreq	r3, r3, #2
 800dfd4:	3202      	addeq	r2, #2
 800dfd6:	07d9      	lsls	r1, r3, #31
 800dfd8:	d403      	bmi.n	800dfe2 <__lo0bits+0x4e>
 800dfda:	085b      	lsrs	r3, r3, #1
 800dfdc:	f102 0201 	add.w	r2, r2, #1
 800dfe0:	d003      	beq.n	800dfea <__lo0bits+0x56>
 800dfe2:	6003      	str	r3, [r0, #0]
 800dfe4:	e7e5      	b.n	800dfb2 <__lo0bits+0x1e>
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	e7e3      	b.n	800dfb2 <__lo0bits+0x1e>
 800dfea:	2220      	movs	r2, #32
 800dfec:	e7e1      	b.n	800dfb2 <__lo0bits+0x1e>
	...

0800dff0 <__i2b>:
 800dff0:	b510      	push	{r4, lr}
 800dff2:	460c      	mov	r4, r1
 800dff4:	2101      	movs	r1, #1
 800dff6:	f7ff ff05 	bl	800de04 <_Balloc>
 800dffa:	4602      	mov	r2, r0
 800dffc:	b928      	cbnz	r0, 800e00a <__i2b+0x1a>
 800dffe:	4b05      	ldr	r3, [pc, #20]	; (800e014 <__i2b+0x24>)
 800e000:	4805      	ldr	r0, [pc, #20]	; (800e018 <__i2b+0x28>)
 800e002:	f240 1145 	movw	r1, #325	; 0x145
 800e006:	f7fe f8c1 	bl	800c18c <__assert_func>
 800e00a:	2301      	movs	r3, #1
 800e00c:	6144      	str	r4, [r0, #20]
 800e00e:	6103      	str	r3, [r0, #16]
 800e010:	bd10      	pop	{r4, pc}
 800e012:	bf00      	nop
 800e014:	08013c36 	.word	0x08013c36
 800e018:	08013c73 	.word	0x08013c73

0800e01c <__multiply>:
 800e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	4691      	mov	r9, r2
 800e022:	690a      	ldr	r2, [r1, #16]
 800e024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e028:	429a      	cmp	r2, r3
 800e02a:	bfb8      	it	lt
 800e02c:	460b      	movlt	r3, r1
 800e02e:	460c      	mov	r4, r1
 800e030:	bfbc      	itt	lt
 800e032:	464c      	movlt	r4, r9
 800e034:	4699      	movlt	r9, r3
 800e036:	6927      	ldr	r7, [r4, #16]
 800e038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e03c:	68a3      	ldr	r3, [r4, #8]
 800e03e:	6861      	ldr	r1, [r4, #4]
 800e040:	eb07 060a 	add.w	r6, r7, sl
 800e044:	42b3      	cmp	r3, r6
 800e046:	b085      	sub	sp, #20
 800e048:	bfb8      	it	lt
 800e04a:	3101      	addlt	r1, #1
 800e04c:	f7ff feda 	bl	800de04 <_Balloc>
 800e050:	b930      	cbnz	r0, 800e060 <__multiply+0x44>
 800e052:	4602      	mov	r2, r0
 800e054:	4b44      	ldr	r3, [pc, #272]	; (800e168 <__multiply+0x14c>)
 800e056:	4845      	ldr	r0, [pc, #276]	; (800e16c <__multiply+0x150>)
 800e058:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e05c:	f7fe f896 	bl	800c18c <__assert_func>
 800e060:	f100 0514 	add.w	r5, r0, #20
 800e064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e068:	462b      	mov	r3, r5
 800e06a:	2200      	movs	r2, #0
 800e06c:	4543      	cmp	r3, r8
 800e06e:	d321      	bcc.n	800e0b4 <__multiply+0x98>
 800e070:	f104 0314 	add.w	r3, r4, #20
 800e074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e078:	f109 0314 	add.w	r3, r9, #20
 800e07c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e080:	9202      	str	r2, [sp, #8]
 800e082:	1b3a      	subs	r2, r7, r4
 800e084:	3a15      	subs	r2, #21
 800e086:	f022 0203 	bic.w	r2, r2, #3
 800e08a:	3204      	adds	r2, #4
 800e08c:	f104 0115 	add.w	r1, r4, #21
 800e090:	428f      	cmp	r7, r1
 800e092:	bf38      	it	cc
 800e094:	2204      	movcc	r2, #4
 800e096:	9201      	str	r2, [sp, #4]
 800e098:	9a02      	ldr	r2, [sp, #8]
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d80c      	bhi.n	800e0ba <__multiply+0x9e>
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	dd03      	ble.n	800e0ac <__multiply+0x90>
 800e0a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d05b      	beq.n	800e164 <__multiply+0x148>
 800e0ac:	6106      	str	r6, [r0, #16]
 800e0ae:	b005      	add	sp, #20
 800e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b4:	f843 2b04 	str.w	r2, [r3], #4
 800e0b8:	e7d8      	b.n	800e06c <__multiply+0x50>
 800e0ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800e0be:	f1ba 0f00 	cmp.w	sl, #0
 800e0c2:	d024      	beq.n	800e10e <__multiply+0xf2>
 800e0c4:	f104 0e14 	add.w	lr, r4, #20
 800e0c8:	46a9      	mov	r9, r5
 800e0ca:	f04f 0c00 	mov.w	ip, #0
 800e0ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e0d2:	f8d9 1000 	ldr.w	r1, [r9]
 800e0d6:	fa1f fb82 	uxth.w	fp, r2
 800e0da:	b289      	uxth	r1, r1
 800e0dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e0e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800e0e8:	4461      	add	r1, ip
 800e0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e0ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800e0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e0f6:	b289      	uxth	r1, r1
 800e0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e0fc:	4577      	cmp	r7, lr
 800e0fe:	f849 1b04 	str.w	r1, [r9], #4
 800e102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e106:	d8e2      	bhi.n	800e0ce <__multiply+0xb2>
 800e108:	9a01      	ldr	r2, [sp, #4]
 800e10a:	f845 c002 	str.w	ip, [r5, r2]
 800e10e:	9a03      	ldr	r2, [sp, #12]
 800e110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e114:	3304      	adds	r3, #4
 800e116:	f1b9 0f00 	cmp.w	r9, #0
 800e11a:	d021      	beq.n	800e160 <__multiply+0x144>
 800e11c:	6829      	ldr	r1, [r5, #0]
 800e11e:	f104 0c14 	add.w	ip, r4, #20
 800e122:	46ae      	mov	lr, r5
 800e124:	f04f 0a00 	mov.w	sl, #0
 800e128:	f8bc b000 	ldrh.w	fp, [ip]
 800e12c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e130:	fb09 220b 	mla	r2, r9, fp, r2
 800e134:	4452      	add	r2, sl
 800e136:	b289      	uxth	r1, r1
 800e138:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e13c:	f84e 1b04 	str.w	r1, [lr], #4
 800e140:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e144:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e148:	f8be 1000 	ldrh.w	r1, [lr]
 800e14c:	fb09 110a 	mla	r1, r9, sl, r1
 800e150:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e154:	4567      	cmp	r7, ip
 800e156:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e15a:	d8e5      	bhi.n	800e128 <__multiply+0x10c>
 800e15c:	9a01      	ldr	r2, [sp, #4]
 800e15e:	50a9      	str	r1, [r5, r2]
 800e160:	3504      	adds	r5, #4
 800e162:	e799      	b.n	800e098 <__multiply+0x7c>
 800e164:	3e01      	subs	r6, #1
 800e166:	e79b      	b.n	800e0a0 <__multiply+0x84>
 800e168:	08013c36 	.word	0x08013c36
 800e16c:	08013c73 	.word	0x08013c73

0800e170 <__pow5mult>:
 800e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e174:	4615      	mov	r5, r2
 800e176:	f012 0203 	ands.w	r2, r2, #3
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	d007      	beq.n	800e190 <__pow5mult+0x20>
 800e180:	4c25      	ldr	r4, [pc, #148]	; (800e218 <__pow5mult+0xa8>)
 800e182:	3a01      	subs	r2, #1
 800e184:	2300      	movs	r3, #0
 800e186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e18a:	f7ff fe9d 	bl	800dec8 <__multadd>
 800e18e:	4607      	mov	r7, r0
 800e190:	10ad      	asrs	r5, r5, #2
 800e192:	d03d      	beq.n	800e210 <__pow5mult+0xa0>
 800e194:	69f4      	ldr	r4, [r6, #28]
 800e196:	b97c      	cbnz	r4, 800e1b8 <__pow5mult+0x48>
 800e198:	2010      	movs	r0, #16
 800e19a:	f7ff fb49 	bl	800d830 <malloc>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	61f0      	str	r0, [r6, #28]
 800e1a2:	b928      	cbnz	r0, 800e1b0 <__pow5mult+0x40>
 800e1a4:	4b1d      	ldr	r3, [pc, #116]	; (800e21c <__pow5mult+0xac>)
 800e1a6:	481e      	ldr	r0, [pc, #120]	; (800e220 <__pow5mult+0xb0>)
 800e1a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e1ac:	f7fd ffee 	bl	800c18c <__assert_func>
 800e1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1b4:	6004      	str	r4, [r0, #0]
 800e1b6:	60c4      	str	r4, [r0, #12]
 800e1b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1c0:	b94c      	cbnz	r4, 800e1d6 <__pow5mult+0x66>
 800e1c2:	f240 2171 	movw	r1, #625	; 0x271
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7ff ff12 	bl	800dff0 <__i2b>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	6003      	str	r3, [r0, #0]
 800e1d6:	f04f 0900 	mov.w	r9, #0
 800e1da:	07eb      	lsls	r3, r5, #31
 800e1dc:	d50a      	bpl.n	800e1f4 <__pow5mult+0x84>
 800e1de:	4639      	mov	r1, r7
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ff1a 	bl	800e01c <__multiply>
 800e1e8:	4639      	mov	r1, r7
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	4630      	mov	r0, r6
 800e1ee:	f7ff fe49 	bl	800de84 <_Bfree>
 800e1f2:	4647      	mov	r7, r8
 800e1f4:	106d      	asrs	r5, r5, #1
 800e1f6:	d00b      	beq.n	800e210 <__pow5mult+0xa0>
 800e1f8:	6820      	ldr	r0, [r4, #0]
 800e1fa:	b938      	cbnz	r0, 800e20c <__pow5mult+0x9c>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	4621      	mov	r1, r4
 800e200:	4630      	mov	r0, r6
 800e202:	f7ff ff0b 	bl	800e01c <__multiply>
 800e206:	6020      	str	r0, [r4, #0]
 800e208:	f8c0 9000 	str.w	r9, [r0]
 800e20c:	4604      	mov	r4, r0
 800e20e:	e7e4      	b.n	800e1da <__pow5mult+0x6a>
 800e210:	4638      	mov	r0, r7
 800e212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e216:	bf00      	nop
 800e218:	08013dc0 	.word	0x08013dc0
 800e21c:	08013bc7 	.word	0x08013bc7
 800e220:	08013c73 	.word	0x08013c73

0800e224 <__lshift>:
 800e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e228:	460c      	mov	r4, r1
 800e22a:	6849      	ldr	r1, [r1, #4]
 800e22c:	6923      	ldr	r3, [r4, #16]
 800e22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e232:	68a3      	ldr	r3, [r4, #8]
 800e234:	4607      	mov	r7, r0
 800e236:	4691      	mov	r9, r2
 800e238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e23c:	f108 0601 	add.w	r6, r8, #1
 800e240:	42b3      	cmp	r3, r6
 800e242:	db0b      	blt.n	800e25c <__lshift+0x38>
 800e244:	4638      	mov	r0, r7
 800e246:	f7ff fddd 	bl	800de04 <_Balloc>
 800e24a:	4605      	mov	r5, r0
 800e24c:	b948      	cbnz	r0, 800e262 <__lshift+0x3e>
 800e24e:	4602      	mov	r2, r0
 800e250:	4b28      	ldr	r3, [pc, #160]	; (800e2f4 <__lshift+0xd0>)
 800e252:	4829      	ldr	r0, [pc, #164]	; (800e2f8 <__lshift+0xd4>)
 800e254:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e258:	f7fd ff98 	bl	800c18c <__assert_func>
 800e25c:	3101      	adds	r1, #1
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	e7ee      	b.n	800e240 <__lshift+0x1c>
 800e262:	2300      	movs	r3, #0
 800e264:	f100 0114 	add.w	r1, r0, #20
 800e268:	f100 0210 	add.w	r2, r0, #16
 800e26c:	4618      	mov	r0, r3
 800e26e:	4553      	cmp	r3, sl
 800e270:	db33      	blt.n	800e2da <__lshift+0xb6>
 800e272:	6920      	ldr	r0, [r4, #16]
 800e274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e278:	f104 0314 	add.w	r3, r4, #20
 800e27c:	f019 091f 	ands.w	r9, r9, #31
 800e280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e284:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e288:	d02b      	beq.n	800e2e2 <__lshift+0xbe>
 800e28a:	f1c9 0e20 	rsb	lr, r9, #32
 800e28e:	468a      	mov	sl, r1
 800e290:	2200      	movs	r2, #0
 800e292:	6818      	ldr	r0, [r3, #0]
 800e294:	fa00 f009 	lsl.w	r0, r0, r9
 800e298:	4310      	orrs	r0, r2
 800e29a:	f84a 0b04 	str.w	r0, [sl], #4
 800e29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2a2:	459c      	cmp	ip, r3
 800e2a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2a8:	d8f3      	bhi.n	800e292 <__lshift+0x6e>
 800e2aa:	ebac 0304 	sub.w	r3, ip, r4
 800e2ae:	3b15      	subs	r3, #21
 800e2b0:	f023 0303 	bic.w	r3, r3, #3
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	f104 0015 	add.w	r0, r4, #21
 800e2ba:	4584      	cmp	ip, r0
 800e2bc:	bf38      	it	cc
 800e2be:	2304      	movcc	r3, #4
 800e2c0:	50ca      	str	r2, [r1, r3]
 800e2c2:	b10a      	cbz	r2, 800e2c8 <__lshift+0xa4>
 800e2c4:	f108 0602 	add.w	r6, r8, #2
 800e2c8:	3e01      	subs	r6, #1
 800e2ca:	4638      	mov	r0, r7
 800e2cc:	612e      	str	r6, [r5, #16]
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	f7ff fdd8 	bl	800de84 <_Bfree>
 800e2d4:	4628      	mov	r0, r5
 800e2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2de:	3301      	adds	r3, #1
 800e2e0:	e7c5      	b.n	800e26e <__lshift+0x4a>
 800e2e2:	3904      	subs	r1, #4
 800e2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e2ec:	459c      	cmp	ip, r3
 800e2ee:	d8f9      	bhi.n	800e2e4 <__lshift+0xc0>
 800e2f0:	e7ea      	b.n	800e2c8 <__lshift+0xa4>
 800e2f2:	bf00      	nop
 800e2f4:	08013c36 	.word	0x08013c36
 800e2f8:	08013c73 	.word	0x08013c73

0800e2fc <__mcmp>:
 800e2fc:	b530      	push	{r4, r5, lr}
 800e2fe:	6902      	ldr	r2, [r0, #16]
 800e300:	690c      	ldr	r4, [r1, #16]
 800e302:	1b12      	subs	r2, r2, r4
 800e304:	d10e      	bne.n	800e324 <__mcmp+0x28>
 800e306:	f100 0314 	add.w	r3, r0, #20
 800e30a:	3114      	adds	r1, #20
 800e30c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e310:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e314:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e318:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e31c:	42a5      	cmp	r5, r4
 800e31e:	d003      	beq.n	800e328 <__mcmp+0x2c>
 800e320:	d305      	bcc.n	800e32e <__mcmp+0x32>
 800e322:	2201      	movs	r2, #1
 800e324:	4610      	mov	r0, r2
 800e326:	bd30      	pop	{r4, r5, pc}
 800e328:	4283      	cmp	r3, r0
 800e32a:	d3f3      	bcc.n	800e314 <__mcmp+0x18>
 800e32c:	e7fa      	b.n	800e324 <__mcmp+0x28>
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e332:	e7f7      	b.n	800e324 <__mcmp+0x28>

0800e334 <__mdiff>:
 800e334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e338:	460c      	mov	r4, r1
 800e33a:	4606      	mov	r6, r0
 800e33c:	4611      	mov	r1, r2
 800e33e:	4620      	mov	r0, r4
 800e340:	4690      	mov	r8, r2
 800e342:	f7ff ffdb 	bl	800e2fc <__mcmp>
 800e346:	1e05      	subs	r5, r0, #0
 800e348:	d110      	bne.n	800e36c <__mdiff+0x38>
 800e34a:	4629      	mov	r1, r5
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7ff fd59 	bl	800de04 <_Balloc>
 800e352:	b930      	cbnz	r0, 800e362 <__mdiff+0x2e>
 800e354:	4b3a      	ldr	r3, [pc, #232]	; (800e440 <__mdiff+0x10c>)
 800e356:	4602      	mov	r2, r0
 800e358:	f240 2137 	movw	r1, #567	; 0x237
 800e35c:	4839      	ldr	r0, [pc, #228]	; (800e444 <__mdiff+0x110>)
 800e35e:	f7fd ff15 	bl	800c18c <__assert_func>
 800e362:	2301      	movs	r3, #1
 800e364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36c:	bfa4      	itt	ge
 800e36e:	4643      	movge	r3, r8
 800e370:	46a0      	movge	r8, r4
 800e372:	4630      	mov	r0, r6
 800e374:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e378:	bfa6      	itte	ge
 800e37a:	461c      	movge	r4, r3
 800e37c:	2500      	movge	r5, #0
 800e37e:	2501      	movlt	r5, #1
 800e380:	f7ff fd40 	bl	800de04 <_Balloc>
 800e384:	b920      	cbnz	r0, 800e390 <__mdiff+0x5c>
 800e386:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <__mdiff+0x10c>)
 800e388:	4602      	mov	r2, r0
 800e38a:	f240 2145 	movw	r1, #581	; 0x245
 800e38e:	e7e5      	b.n	800e35c <__mdiff+0x28>
 800e390:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e394:	6926      	ldr	r6, [r4, #16]
 800e396:	60c5      	str	r5, [r0, #12]
 800e398:	f104 0914 	add.w	r9, r4, #20
 800e39c:	f108 0514 	add.w	r5, r8, #20
 800e3a0:	f100 0e14 	add.w	lr, r0, #20
 800e3a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e3a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e3ac:	f108 0210 	add.w	r2, r8, #16
 800e3b0:	46f2      	mov	sl, lr
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e3bc:	fa11 f88b 	uxtah	r8, r1, fp
 800e3c0:	b299      	uxth	r1, r3
 800e3c2:	0c1b      	lsrs	r3, r3, #16
 800e3c4:	eba8 0801 	sub.w	r8, r8, r1
 800e3c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e3cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e3d0:	fa1f f888 	uxth.w	r8, r8
 800e3d4:	1419      	asrs	r1, r3, #16
 800e3d6:	454e      	cmp	r6, r9
 800e3d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e3dc:	f84a 3b04 	str.w	r3, [sl], #4
 800e3e0:	d8e8      	bhi.n	800e3b4 <__mdiff+0x80>
 800e3e2:	1b33      	subs	r3, r6, r4
 800e3e4:	3b15      	subs	r3, #21
 800e3e6:	f023 0303 	bic.w	r3, r3, #3
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	3415      	adds	r4, #21
 800e3ee:	42a6      	cmp	r6, r4
 800e3f0:	bf38      	it	cc
 800e3f2:	2304      	movcc	r3, #4
 800e3f4:	441d      	add	r5, r3
 800e3f6:	4473      	add	r3, lr
 800e3f8:	469e      	mov	lr, r3
 800e3fa:	462e      	mov	r6, r5
 800e3fc:	4566      	cmp	r6, ip
 800e3fe:	d30e      	bcc.n	800e41e <__mdiff+0xea>
 800e400:	f10c 0203 	add.w	r2, ip, #3
 800e404:	1b52      	subs	r2, r2, r5
 800e406:	f022 0203 	bic.w	r2, r2, #3
 800e40a:	3d03      	subs	r5, #3
 800e40c:	45ac      	cmp	ip, r5
 800e40e:	bf38      	it	cc
 800e410:	2200      	movcc	r2, #0
 800e412:	4413      	add	r3, r2
 800e414:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e418:	b17a      	cbz	r2, 800e43a <__mdiff+0x106>
 800e41a:	6107      	str	r7, [r0, #16]
 800e41c:	e7a4      	b.n	800e368 <__mdiff+0x34>
 800e41e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e422:	fa11 f288 	uxtah	r2, r1, r8
 800e426:	1414      	asrs	r4, r2, #16
 800e428:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e42c:	b292      	uxth	r2, r2
 800e42e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e432:	f84e 2b04 	str.w	r2, [lr], #4
 800e436:	1421      	asrs	r1, r4, #16
 800e438:	e7e0      	b.n	800e3fc <__mdiff+0xc8>
 800e43a:	3f01      	subs	r7, #1
 800e43c:	e7ea      	b.n	800e414 <__mdiff+0xe0>
 800e43e:	bf00      	nop
 800e440:	08013c36 	.word	0x08013c36
 800e444:	08013c73 	.word	0x08013c73

0800e448 <__d2b>:
 800e448:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e44c:	460f      	mov	r7, r1
 800e44e:	2101      	movs	r1, #1
 800e450:	ec59 8b10 	vmov	r8, r9, d0
 800e454:	4616      	mov	r6, r2
 800e456:	f7ff fcd5 	bl	800de04 <_Balloc>
 800e45a:	4604      	mov	r4, r0
 800e45c:	b930      	cbnz	r0, 800e46c <__d2b+0x24>
 800e45e:	4602      	mov	r2, r0
 800e460:	4b24      	ldr	r3, [pc, #144]	; (800e4f4 <__d2b+0xac>)
 800e462:	4825      	ldr	r0, [pc, #148]	; (800e4f8 <__d2b+0xb0>)
 800e464:	f240 310f 	movw	r1, #783	; 0x30f
 800e468:	f7fd fe90 	bl	800c18c <__assert_func>
 800e46c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e474:	bb2d      	cbnz	r5, 800e4c2 <__d2b+0x7a>
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	f1b8 0300 	subs.w	r3, r8, #0
 800e47c:	d026      	beq.n	800e4cc <__d2b+0x84>
 800e47e:	4668      	mov	r0, sp
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	f7ff fd87 	bl	800df94 <__lo0bits>
 800e486:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e48a:	b1e8      	cbz	r0, 800e4c8 <__d2b+0x80>
 800e48c:	f1c0 0320 	rsb	r3, r0, #32
 800e490:	fa02 f303 	lsl.w	r3, r2, r3
 800e494:	430b      	orrs	r3, r1
 800e496:	40c2      	lsrs	r2, r0
 800e498:	6163      	str	r3, [r4, #20]
 800e49a:	9201      	str	r2, [sp, #4]
 800e49c:	9b01      	ldr	r3, [sp, #4]
 800e49e:	61a3      	str	r3, [r4, #24]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bf14      	ite	ne
 800e4a4:	2202      	movne	r2, #2
 800e4a6:	2201      	moveq	r2, #1
 800e4a8:	6122      	str	r2, [r4, #16]
 800e4aa:	b1bd      	cbz	r5, 800e4dc <__d2b+0x94>
 800e4ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e4b0:	4405      	add	r5, r0
 800e4b2:	603d      	str	r5, [r7, #0]
 800e4b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e4b8:	6030      	str	r0, [r6, #0]
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	b003      	add	sp, #12
 800e4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4c6:	e7d6      	b.n	800e476 <__d2b+0x2e>
 800e4c8:	6161      	str	r1, [r4, #20]
 800e4ca:	e7e7      	b.n	800e49c <__d2b+0x54>
 800e4cc:	a801      	add	r0, sp, #4
 800e4ce:	f7ff fd61 	bl	800df94 <__lo0bits>
 800e4d2:	9b01      	ldr	r3, [sp, #4]
 800e4d4:	6163      	str	r3, [r4, #20]
 800e4d6:	3020      	adds	r0, #32
 800e4d8:	2201      	movs	r2, #1
 800e4da:	e7e5      	b.n	800e4a8 <__d2b+0x60>
 800e4dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e4e4:	6038      	str	r0, [r7, #0]
 800e4e6:	6918      	ldr	r0, [r3, #16]
 800e4e8:	f7ff fd34 	bl	800df54 <__hi0bits>
 800e4ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e4f0:	e7e2      	b.n	800e4b8 <__d2b+0x70>
 800e4f2:	bf00      	nop
 800e4f4:	08013c36 	.word	0x08013c36
 800e4f8:	08013c73 	.word	0x08013c73

0800e4fc <fiprintf>:
 800e4fc:	b40e      	push	{r1, r2, r3}
 800e4fe:	b503      	push	{r0, r1, lr}
 800e500:	4601      	mov	r1, r0
 800e502:	ab03      	add	r3, sp, #12
 800e504:	4805      	ldr	r0, [pc, #20]	; (800e51c <fiprintf+0x20>)
 800e506:	f853 2b04 	ldr.w	r2, [r3], #4
 800e50a:	6800      	ldr	r0, [r0, #0]
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	f7ff f875 	bl	800d5fc <_vfiprintf_r>
 800e512:	b002      	add	sp, #8
 800e514:	f85d eb04 	ldr.w	lr, [sp], #4
 800e518:	b003      	add	sp, #12
 800e51a:	4770      	bx	lr
 800e51c:	2000009c 	.word	0x2000009c

0800e520 <__submore>:
 800e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e52c:	4299      	cmp	r1, r3
 800e52e:	d11d      	bne.n	800e56c <__submore+0x4c>
 800e530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e534:	f7ff f9a4 	bl	800d880 <_malloc_r>
 800e538:	b918      	cbnz	r0, 800e542 <__submore+0x22>
 800e53a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e546:	63a3      	str	r3, [r4, #56]	; 0x38
 800e548:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e54c:	6360      	str	r0, [r4, #52]	; 0x34
 800e54e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e552:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e556:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e55a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e55e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e562:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e566:	6020      	str	r0, [r4, #0]
 800e568:	2000      	movs	r0, #0
 800e56a:	e7e8      	b.n	800e53e <__submore+0x1e>
 800e56c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e56e:	0077      	lsls	r7, r6, #1
 800e570:	463a      	mov	r2, r7
 800e572:	f000 f80f 	bl	800e594 <_realloc_r>
 800e576:	4605      	mov	r5, r0
 800e578:	2800      	cmp	r0, #0
 800e57a:	d0de      	beq.n	800e53a <__submore+0x1a>
 800e57c:	eb00 0806 	add.w	r8, r0, r6
 800e580:	4601      	mov	r1, r0
 800e582:	4632      	mov	r2, r6
 800e584:	4640      	mov	r0, r8
 800e586:	f000 fa71 	bl	800ea6c <memcpy>
 800e58a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e58e:	f8c4 8000 	str.w	r8, [r4]
 800e592:	e7e9      	b.n	800e568 <__submore+0x48>

0800e594 <_realloc_r>:
 800e594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e598:	4680      	mov	r8, r0
 800e59a:	4614      	mov	r4, r2
 800e59c:	460e      	mov	r6, r1
 800e59e:	b921      	cbnz	r1, 800e5aa <_realloc_r+0x16>
 800e5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	f7ff b96b 	b.w	800d880 <_malloc_r>
 800e5aa:	b92a      	cbnz	r2, 800e5b8 <_realloc_r+0x24>
 800e5ac:	f7fe fc86 	bl	800cebc <_free_r>
 800e5b0:	4625      	mov	r5, r4
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b8:	f000 fa95 	bl	800eae6 <_malloc_usable_size_r>
 800e5bc:	4284      	cmp	r4, r0
 800e5be:	4607      	mov	r7, r0
 800e5c0:	d802      	bhi.n	800e5c8 <_realloc_r+0x34>
 800e5c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e5c6:	d812      	bhi.n	800e5ee <_realloc_r+0x5a>
 800e5c8:	4621      	mov	r1, r4
 800e5ca:	4640      	mov	r0, r8
 800e5cc:	f7ff f958 	bl	800d880 <_malloc_r>
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	d0ed      	beq.n	800e5b2 <_realloc_r+0x1e>
 800e5d6:	42bc      	cmp	r4, r7
 800e5d8:	4622      	mov	r2, r4
 800e5da:	4631      	mov	r1, r6
 800e5dc:	bf28      	it	cs
 800e5de:	463a      	movcs	r2, r7
 800e5e0:	f000 fa44 	bl	800ea6c <memcpy>
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	f7fe fc68 	bl	800cebc <_free_r>
 800e5ec:	e7e1      	b.n	800e5b2 <_realloc_r+0x1e>
 800e5ee:	4635      	mov	r5, r6
 800e5f0:	e7df      	b.n	800e5b2 <_realloc_r+0x1e>
	...

0800e5f4 <_strtol_l.constprop.0>:
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5fa:	d001      	beq.n	800e600 <_strtol_l.constprop.0+0xc>
 800e5fc:	2b24      	cmp	r3, #36	; 0x24
 800e5fe:	d906      	bls.n	800e60e <_strtol_l.constprop.0+0x1a>
 800e600:	f7fd fd96 	bl	800c130 <__errno>
 800e604:	2316      	movs	r3, #22
 800e606:	6003      	str	r3, [r0, #0]
 800e608:	2000      	movs	r0, #0
 800e60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e6f4 <_strtol_l.constprop.0+0x100>
 800e612:	460d      	mov	r5, r1
 800e614:	462e      	mov	r6, r5
 800e616:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e61a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e61e:	f017 0708 	ands.w	r7, r7, #8
 800e622:	d1f7      	bne.n	800e614 <_strtol_l.constprop.0+0x20>
 800e624:	2c2d      	cmp	r4, #45	; 0x2d
 800e626:	d132      	bne.n	800e68e <_strtol_l.constprop.0+0x9a>
 800e628:	782c      	ldrb	r4, [r5, #0]
 800e62a:	2701      	movs	r7, #1
 800e62c:	1cb5      	adds	r5, r6, #2
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d05b      	beq.n	800e6ea <_strtol_l.constprop.0+0xf6>
 800e632:	2b10      	cmp	r3, #16
 800e634:	d109      	bne.n	800e64a <_strtol_l.constprop.0+0x56>
 800e636:	2c30      	cmp	r4, #48	; 0x30
 800e638:	d107      	bne.n	800e64a <_strtol_l.constprop.0+0x56>
 800e63a:	782c      	ldrb	r4, [r5, #0]
 800e63c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e640:	2c58      	cmp	r4, #88	; 0x58
 800e642:	d14d      	bne.n	800e6e0 <_strtol_l.constprop.0+0xec>
 800e644:	786c      	ldrb	r4, [r5, #1]
 800e646:	2310      	movs	r3, #16
 800e648:	3502      	adds	r5, #2
 800e64a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e64e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e652:	f04f 0e00 	mov.w	lr, #0
 800e656:	fbb8 f9f3 	udiv	r9, r8, r3
 800e65a:	4676      	mov	r6, lr
 800e65c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e660:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e664:	f1bc 0f09 	cmp.w	ip, #9
 800e668:	d816      	bhi.n	800e698 <_strtol_l.constprop.0+0xa4>
 800e66a:	4664      	mov	r4, ip
 800e66c:	42a3      	cmp	r3, r4
 800e66e:	dd24      	ble.n	800e6ba <_strtol_l.constprop.0+0xc6>
 800e670:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e674:	d008      	beq.n	800e688 <_strtol_l.constprop.0+0x94>
 800e676:	45b1      	cmp	r9, r6
 800e678:	d31c      	bcc.n	800e6b4 <_strtol_l.constprop.0+0xc0>
 800e67a:	d101      	bne.n	800e680 <_strtol_l.constprop.0+0x8c>
 800e67c:	45a2      	cmp	sl, r4
 800e67e:	db19      	blt.n	800e6b4 <_strtol_l.constprop.0+0xc0>
 800e680:	fb06 4603 	mla	r6, r6, r3, r4
 800e684:	f04f 0e01 	mov.w	lr, #1
 800e688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e68c:	e7e8      	b.n	800e660 <_strtol_l.constprop.0+0x6c>
 800e68e:	2c2b      	cmp	r4, #43	; 0x2b
 800e690:	bf04      	itt	eq
 800e692:	782c      	ldrbeq	r4, [r5, #0]
 800e694:	1cb5      	addeq	r5, r6, #2
 800e696:	e7ca      	b.n	800e62e <_strtol_l.constprop.0+0x3a>
 800e698:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e69c:	f1bc 0f19 	cmp.w	ip, #25
 800e6a0:	d801      	bhi.n	800e6a6 <_strtol_l.constprop.0+0xb2>
 800e6a2:	3c37      	subs	r4, #55	; 0x37
 800e6a4:	e7e2      	b.n	800e66c <_strtol_l.constprop.0+0x78>
 800e6a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6aa:	f1bc 0f19 	cmp.w	ip, #25
 800e6ae:	d804      	bhi.n	800e6ba <_strtol_l.constprop.0+0xc6>
 800e6b0:	3c57      	subs	r4, #87	; 0x57
 800e6b2:	e7db      	b.n	800e66c <_strtol_l.constprop.0+0x78>
 800e6b4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e6b8:	e7e6      	b.n	800e688 <_strtol_l.constprop.0+0x94>
 800e6ba:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e6be:	d105      	bne.n	800e6cc <_strtol_l.constprop.0+0xd8>
 800e6c0:	2322      	movs	r3, #34	; 0x22
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	4646      	mov	r6, r8
 800e6c6:	b942      	cbnz	r2, 800e6da <_strtol_l.constprop.0+0xe6>
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	e79e      	b.n	800e60a <_strtol_l.constprop.0+0x16>
 800e6cc:	b107      	cbz	r7, 800e6d0 <_strtol_l.constprop.0+0xdc>
 800e6ce:	4276      	negs	r6, r6
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	d0f9      	beq.n	800e6c8 <_strtol_l.constprop.0+0xd4>
 800e6d4:	f1be 0f00 	cmp.w	lr, #0
 800e6d8:	d000      	beq.n	800e6dc <_strtol_l.constprop.0+0xe8>
 800e6da:	1e69      	subs	r1, r5, #1
 800e6dc:	6011      	str	r1, [r2, #0]
 800e6de:	e7f3      	b.n	800e6c8 <_strtol_l.constprop.0+0xd4>
 800e6e0:	2430      	movs	r4, #48	; 0x30
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1b1      	bne.n	800e64a <_strtol_l.constprop.0+0x56>
 800e6e6:	2308      	movs	r3, #8
 800e6e8:	e7af      	b.n	800e64a <_strtol_l.constprop.0+0x56>
 800e6ea:	2c30      	cmp	r4, #48	; 0x30
 800e6ec:	d0a5      	beq.n	800e63a <_strtol_l.constprop.0+0x46>
 800e6ee:	230a      	movs	r3, #10
 800e6f0:	e7ab      	b.n	800e64a <_strtol_l.constprop.0+0x56>
 800e6f2:	bf00      	nop
 800e6f4:	08013dd7 	.word	0x08013dd7

0800e6f8 <_strtol_r>:
 800e6f8:	f7ff bf7c 	b.w	800e5f4 <_strtol_l.constprop.0>

0800e6fc <_strtoul_l.constprop.0>:
 800e6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e700:	4f36      	ldr	r7, [pc, #216]	; (800e7dc <_strtoul_l.constprop.0+0xe0>)
 800e702:	4686      	mov	lr, r0
 800e704:	460d      	mov	r5, r1
 800e706:	4628      	mov	r0, r5
 800e708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e70c:	5d3e      	ldrb	r6, [r7, r4]
 800e70e:	f016 0608 	ands.w	r6, r6, #8
 800e712:	d1f8      	bne.n	800e706 <_strtoul_l.constprop.0+0xa>
 800e714:	2c2d      	cmp	r4, #45	; 0x2d
 800e716:	d130      	bne.n	800e77a <_strtoul_l.constprop.0+0x7e>
 800e718:	782c      	ldrb	r4, [r5, #0]
 800e71a:	2601      	movs	r6, #1
 800e71c:	1c85      	adds	r5, r0, #2
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d057      	beq.n	800e7d2 <_strtoul_l.constprop.0+0xd6>
 800e722:	2b10      	cmp	r3, #16
 800e724:	d109      	bne.n	800e73a <_strtoul_l.constprop.0+0x3e>
 800e726:	2c30      	cmp	r4, #48	; 0x30
 800e728:	d107      	bne.n	800e73a <_strtoul_l.constprop.0+0x3e>
 800e72a:	7828      	ldrb	r0, [r5, #0]
 800e72c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e730:	2858      	cmp	r0, #88	; 0x58
 800e732:	d149      	bne.n	800e7c8 <_strtoul_l.constprop.0+0xcc>
 800e734:	786c      	ldrb	r4, [r5, #1]
 800e736:	2310      	movs	r3, #16
 800e738:	3502      	adds	r5, #2
 800e73a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e73e:	2700      	movs	r7, #0
 800e740:	fbb8 f8f3 	udiv	r8, r8, r3
 800e744:	fb03 f908 	mul.w	r9, r3, r8
 800e748:	ea6f 0909 	mvn.w	r9, r9
 800e74c:	4638      	mov	r0, r7
 800e74e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e752:	f1bc 0f09 	cmp.w	ip, #9
 800e756:	d815      	bhi.n	800e784 <_strtoul_l.constprop.0+0x88>
 800e758:	4664      	mov	r4, ip
 800e75a:	42a3      	cmp	r3, r4
 800e75c:	dd23      	ble.n	800e7a6 <_strtoul_l.constprop.0+0xaa>
 800e75e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800e762:	d007      	beq.n	800e774 <_strtoul_l.constprop.0+0x78>
 800e764:	4580      	cmp	r8, r0
 800e766:	d31b      	bcc.n	800e7a0 <_strtoul_l.constprop.0+0xa4>
 800e768:	d101      	bne.n	800e76e <_strtoul_l.constprop.0+0x72>
 800e76a:	45a1      	cmp	r9, r4
 800e76c:	db18      	blt.n	800e7a0 <_strtoul_l.constprop.0+0xa4>
 800e76e:	fb00 4003 	mla	r0, r0, r3, r4
 800e772:	2701      	movs	r7, #1
 800e774:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e778:	e7e9      	b.n	800e74e <_strtoul_l.constprop.0+0x52>
 800e77a:	2c2b      	cmp	r4, #43	; 0x2b
 800e77c:	bf04      	itt	eq
 800e77e:	782c      	ldrbeq	r4, [r5, #0]
 800e780:	1c85      	addeq	r5, r0, #2
 800e782:	e7cc      	b.n	800e71e <_strtoul_l.constprop.0+0x22>
 800e784:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e788:	f1bc 0f19 	cmp.w	ip, #25
 800e78c:	d801      	bhi.n	800e792 <_strtoul_l.constprop.0+0x96>
 800e78e:	3c37      	subs	r4, #55	; 0x37
 800e790:	e7e3      	b.n	800e75a <_strtoul_l.constprop.0+0x5e>
 800e792:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e796:	f1bc 0f19 	cmp.w	ip, #25
 800e79a:	d804      	bhi.n	800e7a6 <_strtoul_l.constprop.0+0xaa>
 800e79c:	3c57      	subs	r4, #87	; 0x57
 800e79e:	e7dc      	b.n	800e75a <_strtoul_l.constprop.0+0x5e>
 800e7a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e7a4:	e7e6      	b.n	800e774 <_strtoul_l.constprop.0+0x78>
 800e7a6:	1c7b      	adds	r3, r7, #1
 800e7a8:	d106      	bne.n	800e7b8 <_strtoul_l.constprop.0+0xbc>
 800e7aa:	2322      	movs	r3, #34	; 0x22
 800e7ac:	f8ce 3000 	str.w	r3, [lr]
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	b932      	cbnz	r2, 800e7c2 <_strtoul_l.constprop.0+0xc6>
 800e7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7b8:	b106      	cbz	r6, 800e7bc <_strtoul_l.constprop.0+0xc0>
 800e7ba:	4240      	negs	r0, r0
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	d0f9      	beq.n	800e7b4 <_strtoul_l.constprop.0+0xb8>
 800e7c0:	b107      	cbz	r7, 800e7c4 <_strtoul_l.constprop.0+0xc8>
 800e7c2:	1e69      	subs	r1, r5, #1
 800e7c4:	6011      	str	r1, [r2, #0]
 800e7c6:	e7f5      	b.n	800e7b4 <_strtoul_l.constprop.0+0xb8>
 800e7c8:	2430      	movs	r4, #48	; 0x30
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1b5      	bne.n	800e73a <_strtoul_l.constprop.0+0x3e>
 800e7ce:	2308      	movs	r3, #8
 800e7d0:	e7b3      	b.n	800e73a <_strtoul_l.constprop.0+0x3e>
 800e7d2:	2c30      	cmp	r4, #48	; 0x30
 800e7d4:	d0a9      	beq.n	800e72a <_strtoul_l.constprop.0+0x2e>
 800e7d6:	230a      	movs	r3, #10
 800e7d8:	e7af      	b.n	800e73a <_strtoul_l.constprop.0+0x3e>
 800e7da:	bf00      	nop
 800e7dc:	08013dd7 	.word	0x08013dd7

0800e7e0 <_strtoul_r>:
 800e7e0:	f7ff bf8c 	b.w	800e6fc <_strtoul_l.constprop.0>

0800e7e4 <__swbuf_r>:
 800e7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e6:	460e      	mov	r6, r1
 800e7e8:	4614      	mov	r4, r2
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	b118      	cbz	r0, 800e7f6 <__swbuf_r+0x12>
 800e7ee:	6a03      	ldr	r3, [r0, #32]
 800e7f0:	b90b      	cbnz	r3, 800e7f6 <__swbuf_r+0x12>
 800e7f2:	f7fd fbc9 	bl	800bf88 <__sinit>
 800e7f6:	69a3      	ldr	r3, [r4, #24]
 800e7f8:	60a3      	str	r3, [r4, #8]
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	071a      	lsls	r2, r3, #28
 800e7fe:	d525      	bpl.n	800e84c <__swbuf_r+0x68>
 800e800:	6923      	ldr	r3, [r4, #16]
 800e802:	b31b      	cbz	r3, 800e84c <__swbuf_r+0x68>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	6922      	ldr	r2, [r4, #16]
 800e808:	1a98      	subs	r0, r3, r2
 800e80a:	6963      	ldr	r3, [r4, #20]
 800e80c:	b2f6      	uxtb	r6, r6
 800e80e:	4283      	cmp	r3, r0
 800e810:	4637      	mov	r7, r6
 800e812:	dc04      	bgt.n	800e81e <__swbuf_r+0x3a>
 800e814:	4621      	mov	r1, r4
 800e816:	4628      	mov	r0, r5
 800e818:	f7ff fac0 	bl	800dd9c <_fflush_r>
 800e81c:	b9e0      	cbnz	r0, 800e858 <__swbuf_r+0x74>
 800e81e:	68a3      	ldr	r3, [r4, #8]
 800e820:	3b01      	subs	r3, #1
 800e822:	60a3      	str	r3, [r4, #8]
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	6022      	str	r2, [r4, #0]
 800e82a:	701e      	strb	r6, [r3, #0]
 800e82c:	6962      	ldr	r2, [r4, #20]
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	429a      	cmp	r2, r3
 800e832:	d004      	beq.n	800e83e <__swbuf_r+0x5a>
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	07db      	lsls	r3, r3, #31
 800e838:	d506      	bpl.n	800e848 <__swbuf_r+0x64>
 800e83a:	2e0a      	cmp	r6, #10
 800e83c:	d104      	bne.n	800e848 <__swbuf_r+0x64>
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f7ff faab 	bl	800dd9c <_fflush_r>
 800e846:	b938      	cbnz	r0, 800e858 <__swbuf_r+0x74>
 800e848:	4638      	mov	r0, r7
 800e84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e84c:	4621      	mov	r1, r4
 800e84e:	4628      	mov	r0, r5
 800e850:	f000 f806 	bl	800e860 <__swsetup_r>
 800e854:	2800      	cmp	r0, #0
 800e856:	d0d5      	beq.n	800e804 <__swbuf_r+0x20>
 800e858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e85c:	e7f4      	b.n	800e848 <__swbuf_r+0x64>
	...

0800e860 <__swsetup_r>:
 800e860:	b538      	push	{r3, r4, r5, lr}
 800e862:	4b2a      	ldr	r3, [pc, #168]	; (800e90c <__swsetup_r+0xac>)
 800e864:	4605      	mov	r5, r0
 800e866:	6818      	ldr	r0, [r3, #0]
 800e868:	460c      	mov	r4, r1
 800e86a:	b118      	cbz	r0, 800e874 <__swsetup_r+0x14>
 800e86c:	6a03      	ldr	r3, [r0, #32]
 800e86e:	b90b      	cbnz	r3, 800e874 <__swsetup_r+0x14>
 800e870:	f7fd fb8a 	bl	800bf88 <__sinit>
 800e874:	89a3      	ldrh	r3, [r4, #12]
 800e876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e87a:	0718      	lsls	r0, r3, #28
 800e87c:	d422      	bmi.n	800e8c4 <__swsetup_r+0x64>
 800e87e:	06d9      	lsls	r1, r3, #27
 800e880:	d407      	bmi.n	800e892 <__swsetup_r+0x32>
 800e882:	2309      	movs	r3, #9
 800e884:	602b      	str	r3, [r5, #0]
 800e886:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e88a:	81a3      	strh	r3, [r4, #12]
 800e88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e890:	e034      	b.n	800e8fc <__swsetup_r+0x9c>
 800e892:	0758      	lsls	r0, r3, #29
 800e894:	d512      	bpl.n	800e8bc <__swsetup_r+0x5c>
 800e896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e898:	b141      	cbz	r1, 800e8ac <__swsetup_r+0x4c>
 800e89a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e89e:	4299      	cmp	r1, r3
 800e8a0:	d002      	beq.n	800e8a8 <__swsetup_r+0x48>
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f7fe fb0a 	bl	800cebc <_free_r>
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	6363      	str	r3, [r4, #52]	; 0x34
 800e8ac:	89a3      	ldrh	r3, [r4, #12]
 800e8ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8b2:	81a3      	strh	r3, [r4, #12]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	6063      	str	r3, [r4, #4]
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	f043 0308 	orr.w	r3, r3, #8
 800e8c2:	81a3      	strh	r3, [r4, #12]
 800e8c4:	6923      	ldr	r3, [r4, #16]
 800e8c6:	b94b      	cbnz	r3, 800e8dc <__swsetup_r+0x7c>
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8d2:	d003      	beq.n	800e8dc <__swsetup_r+0x7c>
 800e8d4:	4621      	mov	r1, r4
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	f000 f840 	bl	800e95c <__smakebuf_r>
 800e8dc:	89a0      	ldrh	r0, [r4, #12]
 800e8de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8e2:	f010 0301 	ands.w	r3, r0, #1
 800e8e6:	d00a      	beq.n	800e8fe <__swsetup_r+0x9e>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	60a3      	str	r3, [r4, #8]
 800e8ec:	6963      	ldr	r3, [r4, #20]
 800e8ee:	425b      	negs	r3, r3
 800e8f0:	61a3      	str	r3, [r4, #24]
 800e8f2:	6923      	ldr	r3, [r4, #16]
 800e8f4:	b943      	cbnz	r3, 800e908 <__swsetup_r+0xa8>
 800e8f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8fa:	d1c4      	bne.n	800e886 <__swsetup_r+0x26>
 800e8fc:	bd38      	pop	{r3, r4, r5, pc}
 800e8fe:	0781      	lsls	r1, r0, #30
 800e900:	bf58      	it	pl
 800e902:	6963      	ldrpl	r3, [r4, #20]
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	e7f4      	b.n	800e8f2 <__swsetup_r+0x92>
 800e908:	2000      	movs	r0, #0
 800e90a:	e7f7      	b.n	800e8fc <__swsetup_r+0x9c>
 800e90c:	2000009c 	.word	0x2000009c

0800e910 <__swhatbuf_r>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	460c      	mov	r4, r1
 800e914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e918:	2900      	cmp	r1, #0
 800e91a:	b096      	sub	sp, #88	; 0x58
 800e91c:	4615      	mov	r5, r2
 800e91e:	461e      	mov	r6, r3
 800e920:	da0d      	bge.n	800e93e <__swhatbuf_r+0x2e>
 800e922:	89a3      	ldrh	r3, [r4, #12]
 800e924:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e928:	f04f 0100 	mov.w	r1, #0
 800e92c:	bf0c      	ite	eq
 800e92e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e932:	2340      	movne	r3, #64	; 0x40
 800e934:	2000      	movs	r0, #0
 800e936:	6031      	str	r1, [r6, #0]
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	b016      	add	sp, #88	; 0x58
 800e93c:	bd70      	pop	{r4, r5, r6, pc}
 800e93e:	466a      	mov	r2, sp
 800e940:	f000 f862 	bl	800ea08 <_fstat_r>
 800e944:	2800      	cmp	r0, #0
 800e946:	dbec      	blt.n	800e922 <__swhatbuf_r+0x12>
 800e948:	9901      	ldr	r1, [sp, #4]
 800e94a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e94e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e952:	4259      	negs	r1, r3
 800e954:	4159      	adcs	r1, r3
 800e956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e95a:	e7eb      	b.n	800e934 <__swhatbuf_r+0x24>

0800e95c <__smakebuf_r>:
 800e95c:	898b      	ldrh	r3, [r1, #12]
 800e95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e960:	079d      	lsls	r5, r3, #30
 800e962:	4606      	mov	r6, r0
 800e964:	460c      	mov	r4, r1
 800e966:	d507      	bpl.n	800e978 <__smakebuf_r+0x1c>
 800e968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	6123      	str	r3, [r4, #16]
 800e970:	2301      	movs	r3, #1
 800e972:	6163      	str	r3, [r4, #20]
 800e974:	b002      	add	sp, #8
 800e976:	bd70      	pop	{r4, r5, r6, pc}
 800e978:	ab01      	add	r3, sp, #4
 800e97a:	466a      	mov	r2, sp
 800e97c:	f7ff ffc8 	bl	800e910 <__swhatbuf_r>
 800e980:	9900      	ldr	r1, [sp, #0]
 800e982:	4605      	mov	r5, r0
 800e984:	4630      	mov	r0, r6
 800e986:	f7fe ff7b 	bl	800d880 <_malloc_r>
 800e98a:	b948      	cbnz	r0, 800e9a0 <__smakebuf_r+0x44>
 800e98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e990:	059a      	lsls	r2, r3, #22
 800e992:	d4ef      	bmi.n	800e974 <__smakebuf_r+0x18>
 800e994:	f023 0303 	bic.w	r3, r3, #3
 800e998:	f043 0302 	orr.w	r3, r3, #2
 800e99c:	81a3      	strh	r3, [r4, #12]
 800e99e:	e7e3      	b.n	800e968 <__smakebuf_r+0xc>
 800e9a0:	89a3      	ldrh	r3, [r4, #12]
 800e9a2:	6020      	str	r0, [r4, #0]
 800e9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9a8:	81a3      	strh	r3, [r4, #12]
 800e9aa:	9b00      	ldr	r3, [sp, #0]
 800e9ac:	6163      	str	r3, [r4, #20]
 800e9ae:	9b01      	ldr	r3, [sp, #4]
 800e9b0:	6120      	str	r0, [r4, #16]
 800e9b2:	b15b      	cbz	r3, 800e9cc <__smakebuf_r+0x70>
 800e9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f000 f837 	bl	800ea2c <_isatty_r>
 800e9be:	b128      	cbz	r0, 800e9cc <__smakebuf_r+0x70>
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	f023 0303 	bic.w	r3, r3, #3
 800e9c6:	f043 0301 	orr.w	r3, r3, #1
 800e9ca:	81a3      	strh	r3, [r4, #12]
 800e9cc:	89a3      	ldrh	r3, [r4, #12]
 800e9ce:	431d      	orrs	r5, r3
 800e9d0:	81a5      	strh	r5, [r4, #12]
 800e9d2:	e7cf      	b.n	800e974 <__smakebuf_r+0x18>

0800e9d4 <memmove>:
 800e9d4:	4288      	cmp	r0, r1
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	eb01 0402 	add.w	r4, r1, r2
 800e9dc:	d902      	bls.n	800e9e4 <memmove+0x10>
 800e9de:	4284      	cmp	r4, r0
 800e9e0:	4623      	mov	r3, r4
 800e9e2:	d807      	bhi.n	800e9f4 <memmove+0x20>
 800e9e4:	1e43      	subs	r3, r0, #1
 800e9e6:	42a1      	cmp	r1, r4
 800e9e8:	d008      	beq.n	800e9fc <memmove+0x28>
 800e9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9f2:	e7f8      	b.n	800e9e6 <memmove+0x12>
 800e9f4:	4402      	add	r2, r0
 800e9f6:	4601      	mov	r1, r0
 800e9f8:	428a      	cmp	r2, r1
 800e9fa:	d100      	bne.n	800e9fe <memmove+0x2a>
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea06:	e7f7      	b.n	800e9f8 <memmove+0x24>

0800ea08 <_fstat_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d07      	ldr	r5, [pc, #28]	; (800ea28 <_fstat_r+0x20>)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	4608      	mov	r0, r1
 800ea12:	4611      	mov	r1, r2
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	f7f5 fe6c 	bl	80046f2 <_fstat>
 800ea1a:	1c43      	adds	r3, r0, #1
 800ea1c:	d102      	bne.n	800ea24 <_fstat_r+0x1c>
 800ea1e:	682b      	ldr	r3, [r5, #0]
 800ea20:	b103      	cbz	r3, 800ea24 <_fstat_r+0x1c>
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	bd38      	pop	{r3, r4, r5, pc}
 800ea26:	bf00      	nop
 800ea28:	20009118 	.word	0x20009118

0800ea2c <_isatty_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d06      	ldr	r5, [pc, #24]	; (800ea48 <_isatty_r+0x1c>)
 800ea30:	2300      	movs	r3, #0
 800ea32:	4604      	mov	r4, r0
 800ea34:	4608      	mov	r0, r1
 800ea36:	602b      	str	r3, [r5, #0]
 800ea38:	f7f5 fe6b 	bl	8004712 <_isatty>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_isatty_r+0x1a>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_isatty_r+0x1a>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	20009118 	.word	0x20009118

0800ea4c <_sbrk_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	4d06      	ldr	r5, [pc, #24]	; (800ea68 <_sbrk_r+0x1c>)
 800ea50:	2300      	movs	r3, #0
 800ea52:	4604      	mov	r4, r0
 800ea54:	4608      	mov	r0, r1
 800ea56:	602b      	str	r3, [r5, #0]
 800ea58:	f7f5 fe74 	bl	8004744 <_sbrk>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d102      	bne.n	800ea66 <_sbrk_r+0x1a>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	b103      	cbz	r3, 800ea66 <_sbrk_r+0x1a>
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	bd38      	pop	{r3, r4, r5, pc}
 800ea68:	20009118 	.word	0x20009118

0800ea6c <memcpy>:
 800ea6c:	440a      	add	r2, r1
 800ea6e:	4291      	cmp	r1, r2
 800ea70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ea74:	d100      	bne.n	800ea78 <memcpy+0xc>
 800ea76:	4770      	bx	lr
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea82:	4291      	cmp	r1, r2
 800ea84:	d1f9      	bne.n	800ea7a <memcpy+0xe>
 800ea86:	bd10      	pop	{r4, pc}

0800ea88 <abort>:
 800ea88:	b508      	push	{r3, lr}
 800ea8a:	2006      	movs	r0, #6
 800ea8c:	f000 f868 	bl	800eb60 <raise>
 800ea90:	2001      	movs	r0, #1
 800ea92:	f7f5 fddf 	bl	8004654 <_exit>

0800ea96 <_calloc_r>:
 800ea96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea98:	fba1 2402 	umull	r2, r4, r1, r2
 800ea9c:	b94c      	cbnz	r4, 800eab2 <_calloc_r+0x1c>
 800ea9e:	4611      	mov	r1, r2
 800eaa0:	9201      	str	r2, [sp, #4]
 800eaa2:	f7fe feed 	bl	800d880 <_malloc_r>
 800eaa6:	9a01      	ldr	r2, [sp, #4]
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	b930      	cbnz	r0, 800eaba <_calloc_r+0x24>
 800eaac:	4628      	mov	r0, r5
 800eaae:	b003      	add	sp, #12
 800eab0:	bd30      	pop	{r4, r5, pc}
 800eab2:	220c      	movs	r2, #12
 800eab4:	6002      	str	r2, [r0, #0]
 800eab6:	2500      	movs	r5, #0
 800eab8:	e7f8      	b.n	800eaac <_calloc_r+0x16>
 800eaba:	4621      	mov	r1, r4
 800eabc:	f7fd fae6 	bl	800c08c <memset>
 800eac0:	e7f4      	b.n	800eaac <_calloc_r+0x16>

0800eac2 <__ascii_mbtowc>:
 800eac2:	b082      	sub	sp, #8
 800eac4:	b901      	cbnz	r1, 800eac8 <__ascii_mbtowc+0x6>
 800eac6:	a901      	add	r1, sp, #4
 800eac8:	b142      	cbz	r2, 800eadc <__ascii_mbtowc+0x1a>
 800eaca:	b14b      	cbz	r3, 800eae0 <__ascii_mbtowc+0x1e>
 800eacc:	7813      	ldrb	r3, [r2, #0]
 800eace:	600b      	str	r3, [r1, #0]
 800ead0:	7812      	ldrb	r2, [r2, #0]
 800ead2:	1e10      	subs	r0, r2, #0
 800ead4:	bf18      	it	ne
 800ead6:	2001      	movne	r0, #1
 800ead8:	b002      	add	sp, #8
 800eada:	4770      	bx	lr
 800eadc:	4610      	mov	r0, r2
 800eade:	e7fb      	b.n	800ead8 <__ascii_mbtowc+0x16>
 800eae0:	f06f 0001 	mvn.w	r0, #1
 800eae4:	e7f8      	b.n	800ead8 <__ascii_mbtowc+0x16>

0800eae6 <_malloc_usable_size_r>:
 800eae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaea:	1f18      	subs	r0, r3, #4
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfbc      	itt	lt
 800eaf0:	580b      	ldrlt	r3, [r1, r0]
 800eaf2:	18c0      	addlt	r0, r0, r3
 800eaf4:	4770      	bx	lr

0800eaf6 <__ascii_wctomb>:
 800eaf6:	b149      	cbz	r1, 800eb0c <__ascii_wctomb+0x16>
 800eaf8:	2aff      	cmp	r2, #255	; 0xff
 800eafa:	bf85      	ittet	hi
 800eafc:	238a      	movhi	r3, #138	; 0x8a
 800eafe:	6003      	strhi	r3, [r0, #0]
 800eb00:	700a      	strbls	r2, [r1, #0]
 800eb02:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800eb06:	bf98      	it	ls
 800eb08:	2001      	movls	r0, #1
 800eb0a:	4770      	bx	lr
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	4770      	bx	lr

0800eb10 <_raise_r>:
 800eb10:	291f      	cmp	r1, #31
 800eb12:	b538      	push	{r3, r4, r5, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	460d      	mov	r5, r1
 800eb18:	d904      	bls.n	800eb24 <_raise_r+0x14>
 800eb1a:	2316      	movs	r3, #22
 800eb1c:	6003      	str	r3, [r0, #0]
 800eb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eb26:	b112      	cbz	r2, 800eb2e <_raise_r+0x1e>
 800eb28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb2c:	b94b      	cbnz	r3, 800eb42 <_raise_r+0x32>
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 f830 	bl	800eb94 <_getpid_r>
 800eb34:	462a      	mov	r2, r5
 800eb36:	4601      	mov	r1, r0
 800eb38:	4620      	mov	r0, r4
 800eb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb3e:	f000 b817 	b.w	800eb70 <_kill_r>
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d00a      	beq.n	800eb5c <_raise_r+0x4c>
 800eb46:	1c59      	adds	r1, r3, #1
 800eb48:	d103      	bne.n	800eb52 <_raise_r+0x42>
 800eb4a:	2316      	movs	r3, #22
 800eb4c:	6003      	str	r3, [r0, #0]
 800eb4e:	2001      	movs	r0, #1
 800eb50:	e7e7      	b.n	800eb22 <_raise_r+0x12>
 800eb52:	2400      	movs	r4, #0
 800eb54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb58:	4628      	mov	r0, r5
 800eb5a:	4798      	blx	r3
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	e7e0      	b.n	800eb22 <_raise_r+0x12>

0800eb60 <raise>:
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <raise+0xc>)
 800eb62:	4601      	mov	r1, r0
 800eb64:	6818      	ldr	r0, [r3, #0]
 800eb66:	f7ff bfd3 	b.w	800eb10 <_raise_r>
 800eb6a:	bf00      	nop
 800eb6c:	2000009c 	.word	0x2000009c

0800eb70 <_kill_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4d07      	ldr	r5, [pc, #28]	; (800eb90 <_kill_r+0x20>)
 800eb74:	2300      	movs	r3, #0
 800eb76:	4604      	mov	r4, r0
 800eb78:	4608      	mov	r0, r1
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	602b      	str	r3, [r5, #0]
 800eb7e:	f7f5 fd59 	bl	8004634 <_kill>
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	d102      	bne.n	800eb8c <_kill_r+0x1c>
 800eb86:	682b      	ldr	r3, [r5, #0]
 800eb88:	b103      	cbz	r3, 800eb8c <_kill_r+0x1c>
 800eb8a:	6023      	str	r3, [r4, #0]
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
 800eb8e:	bf00      	nop
 800eb90:	20009118 	.word	0x20009118

0800eb94 <_getpid_r>:
 800eb94:	f7f5 bd46 	b.w	8004624 <_getpid>

0800eb98 <acos>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	ed2d 8b02 	vpush	{d8}
 800eb9e:	ec55 4b10 	vmov	r4, r5, d0
 800eba2:	f000 f82d 	bl	800ec00 <__ieee754_acos>
 800eba6:	4622      	mov	r2, r4
 800eba8:	462b      	mov	r3, r5
 800ebaa:	4620      	mov	r0, r4
 800ebac:	4629      	mov	r1, r5
 800ebae:	eeb0 8a40 	vmov.f32	s16, s0
 800ebb2:	eef0 8a60 	vmov.f32	s17, s1
 800ebb6:	f7f1 ffd9 	bl	8000b6c <__aeabi_dcmpun>
 800ebba:	b9a8      	cbnz	r0, 800ebe8 <acos+0x50>
 800ebbc:	ec45 4b10 	vmov	d0, r4, r5
 800ebc0:	f000 faaa 	bl	800f118 <fabs>
 800ebc4:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <acos+0x60>)
 800ebc6:	ec51 0b10 	vmov	r0, r1, d0
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f7f1 ffc4 	bl	8000b58 <__aeabi_dcmpgt>
 800ebd0:	b150      	cbz	r0, 800ebe8 <acos+0x50>
 800ebd2:	f7fd faad 	bl	800c130 <__errno>
 800ebd6:	ecbd 8b02 	vpop	{d8}
 800ebda:	2321      	movs	r3, #33	; 0x21
 800ebdc:	6003      	str	r3, [r0, #0]
 800ebde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebe2:	4806      	ldr	r0, [pc, #24]	; (800ebfc <acos+0x64>)
 800ebe4:	f000 bc00 	b.w	800f3e8 <nan>
 800ebe8:	eeb0 0a48 	vmov.f32	s0, s16
 800ebec:	eef0 0a68 	vmov.f32	s1, s17
 800ebf0:	ecbd 8b02 	vpop	{d8}
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	3ff00000 	.word	0x3ff00000
 800ebfc:	08013bb9 	.word	0x08013bb9

0800ec00 <__ieee754_acos>:
 800ec00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec04:	ec55 4b10 	vmov	r4, r5, d0
 800ec08:	49b7      	ldr	r1, [pc, #732]	; (800eee8 <__ieee754_acos+0x2e8>)
 800ec0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec0e:	428b      	cmp	r3, r1
 800ec10:	dd1b      	ble.n	800ec4a <__ieee754_acos+0x4a>
 800ec12:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800ec16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ec1a:	4323      	orrs	r3, r4
 800ec1c:	d106      	bne.n	800ec2c <__ieee754_acos+0x2c>
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	f300 8211 	bgt.w	800f046 <__ieee754_acos+0x446>
 800ec24:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ee80 <__ieee754_acos+0x280>
 800ec28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2c:	ee10 2a10 	vmov	r2, s0
 800ec30:	462b      	mov	r3, r5
 800ec32:	ee10 0a10 	vmov	r0, s0
 800ec36:	4629      	mov	r1, r5
 800ec38:	f7f1 fb46 	bl	80002c8 <__aeabi_dsub>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	460b      	mov	r3, r1
 800ec40:	f7f1 fe24 	bl	800088c <__aeabi_ddiv>
 800ec44:	ec41 0b10 	vmov	d0, r0, r1
 800ec48:	e7ee      	b.n	800ec28 <__ieee754_acos+0x28>
 800ec4a:	49a8      	ldr	r1, [pc, #672]	; (800eeec <__ieee754_acos+0x2ec>)
 800ec4c:	428b      	cmp	r3, r1
 800ec4e:	f300 8087 	bgt.w	800ed60 <__ieee754_acos+0x160>
 800ec52:	4aa7      	ldr	r2, [pc, #668]	; (800eef0 <__ieee754_acos+0x2f0>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	f340 81f9 	ble.w	800f04c <__ieee754_acos+0x44c>
 800ec5a:	ee10 2a10 	vmov	r2, s0
 800ec5e:	ee10 0a10 	vmov	r0, s0
 800ec62:	462b      	mov	r3, r5
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 fce7 	bl	8000638 <__aeabi_dmul>
 800ec6a:	a387      	add	r3, pc, #540	; (adr r3, 800ee88 <__ieee754_acos+0x288>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	4606      	mov	r6, r0
 800ec72:	460f      	mov	r7, r1
 800ec74:	f7f1 fce0 	bl	8000638 <__aeabi_dmul>
 800ec78:	a385      	add	r3, pc, #532	; (adr r3, 800ee90 <__ieee754_acos+0x290>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fb25 	bl	80002cc <__adddf3>
 800ec82:	4632      	mov	r2, r6
 800ec84:	463b      	mov	r3, r7
 800ec86:	f7f1 fcd7 	bl	8000638 <__aeabi_dmul>
 800ec8a:	a383      	add	r3, pc, #524	; (adr r3, 800ee98 <__ieee754_acos+0x298>)
 800ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec90:	f7f1 fb1a 	bl	80002c8 <__aeabi_dsub>
 800ec94:	4632      	mov	r2, r6
 800ec96:	463b      	mov	r3, r7
 800ec98:	f7f1 fcce 	bl	8000638 <__aeabi_dmul>
 800ec9c:	a380      	add	r3, pc, #512	; (adr r3, 800eea0 <__ieee754_acos+0x2a0>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f7f1 fb13 	bl	80002cc <__adddf3>
 800eca6:	4632      	mov	r2, r6
 800eca8:	463b      	mov	r3, r7
 800ecaa:	f7f1 fcc5 	bl	8000638 <__aeabi_dmul>
 800ecae:	a37e      	add	r3, pc, #504	; (adr r3, 800eea8 <__ieee754_acos+0x2a8>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	f7f1 fb08 	bl	80002c8 <__aeabi_dsub>
 800ecb8:	4632      	mov	r2, r6
 800ecba:	463b      	mov	r3, r7
 800ecbc:	f7f1 fcbc 	bl	8000638 <__aeabi_dmul>
 800ecc0:	a37b      	add	r3, pc, #492	; (adr r3, 800eeb0 <__ieee754_acos+0x2b0>)
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	f7f1 fb01 	bl	80002cc <__adddf3>
 800ecca:	4632      	mov	r2, r6
 800eccc:	463b      	mov	r3, r7
 800ecce:	f7f1 fcb3 	bl	8000638 <__aeabi_dmul>
 800ecd2:	a379      	add	r3, pc, #484	; (adr r3, 800eeb8 <__ieee754_acos+0x2b8>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	4680      	mov	r8, r0
 800ecda:	4689      	mov	r9, r1
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fcaa 	bl	8000638 <__aeabi_dmul>
 800ece4:	a376      	add	r3, pc, #472	; (adr r3, 800eec0 <__ieee754_acos+0x2c0>)
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f7f1 faed 	bl	80002c8 <__aeabi_dsub>
 800ecee:	4632      	mov	r2, r6
 800ecf0:	463b      	mov	r3, r7
 800ecf2:	f7f1 fca1 	bl	8000638 <__aeabi_dmul>
 800ecf6:	a374      	add	r3, pc, #464	; (adr r3, 800eec8 <__ieee754_acos+0x2c8>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f7f1 fae6 	bl	80002cc <__adddf3>
 800ed00:	4632      	mov	r2, r6
 800ed02:	463b      	mov	r3, r7
 800ed04:	f7f1 fc98 	bl	8000638 <__aeabi_dmul>
 800ed08:	a371      	add	r3, pc, #452	; (adr r3, 800eed0 <__ieee754_acos+0x2d0>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	f7f1 fadb 	bl	80002c8 <__aeabi_dsub>
 800ed12:	4632      	mov	r2, r6
 800ed14:	463b      	mov	r3, r7
 800ed16:	f7f1 fc8f 	bl	8000638 <__aeabi_dmul>
 800ed1a:	4b76      	ldr	r3, [pc, #472]	; (800eef4 <__ieee754_acos+0x2f4>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f7f1 fad5 	bl	80002cc <__adddf3>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	4640      	mov	r0, r8
 800ed28:	4649      	mov	r1, r9
 800ed2a:	f7f1 fdaf 	bl	800088c <__aeabi_ddiv>
 800ed2e:	4622      	mov	r2, r4
 800ed30:	462b      	mov	r3, r5
 800ed32:	f7f1 fc81 	bl	8000638 <__aeabi_dmul>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	a167      	add	r1, pc, #412	; (adr r1, 800eed8 <__ieee754_acos+0x2d8>)
 800ed3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed40:	f7f1 fac2 	bl	80002c8 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4620      	mov	r0, r4
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	f7f1 fabc 	bl	80002c8 <__aeabi_dsub>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	a162      	add	r1, pc, #392	; (adr r1, 800eee0 <__ieee754_acos+0x2e0>)
 800ed56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed5a:	f7f1 fab5 	bl	80002c8 <__aeabi_dsub>
 800ed5e:	e771      	b.n	800ec44 <__ieee754_acos+0x44>
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	f280 80cb 	bge.w	800eefc <__ieee754_acos+0x2fc>
 800ed66:	ee10 0a10 	vmov	r0, s0
 800ed6a:	4b62      	ldr	r3, [pc, #392]	; (800eef4 <__ieee754_acos+0x2f4>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	4629      	mov	r1, r5
 800ed70:	f7f1 faac 	bl	80002cc <__adddf3>
 800ed74:	4b60      	ldr	r3, [pc, #384]	; (800eef8 <__ieee754_acos+0x2f8>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	f7f1 fc5e 	bl	8000638 <__aeabi_dmul>
 800ed7c:	a342      	add	r3, pc, #264	; (adr r3, 800ee88 <__ieee754_acos+0x288>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	4604      	mov	r4, r0
 800ed84:	460d      	mov	r5, r1
 800ed86:	f7f1 fc57 	bl	8000638 <__aeabi_dmul>
 800ed8a:	a341      	add	r3, pc, #260	; (adr r3, 800ee90 <__ieee754_acos+0x290>)
 800ed8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed90:	f7f1 fa9c 	bl	80002cc <__adddf3>
 800ed94:	4622      	mov	r2, r4
 800ed96:	462b      	mov	r3, r5
 800ed98:	f7f1 fc4e 	bl	8000638 <__aeabi_dmul>
 800ed9c:	a33e      	add	r3, pc, #248	; (adr r3, 800ee98 <__ieee754_acos+0x298>)
 800ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda2:	f7f1 fa91 	bl	80002c8 <__aeabi_dsub>
 800eda6:	4622      	mov	r2, r4
 800eda8:	462b      	mov	r3, r5
 800edaa:	f7f1 fc45 	bl	8000638 <__aeabi_dmul>
 800edae:	a33c      	add	r3, pc, #240	; (adr r3, 800eea0 <__ieee754_acos+0x2a0>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f7f1 fa8a 	bl	80002cc <__adddf3>
 800edb8:	4622      	mov	r2, r4
 800edba:	462b      	mov	r3, r5
 800edbc:	f7f1 fc3c 	bl	8000638 <__aeabi_dmul>
 800edc0:	a339      	add	r3, pc, #228	; (adr r3, 800eea8 <__ieee754_acos+0x2a8>)
 800edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc6:	f7f1 fa7f 	bl	80002c8 <__aeabi_dsub>
 800edca:	4622      	mov	r2, r4
 800edcc:	462b      	mov	r3, r5
 800edce:	f7f1 fc33 	bl	8000638 <__aeabi_dmul>
 800edd2:	a337      	add	r3, pc, #220	; (adr r3, 800eeb0 <__ieee754_acos+0x2b0>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	f7f1 fa78 	bl	80002cc <__adddf3>
 800eddc:	4622      	mov	r2, r4
 800edde:	462b      	mov	r3, r5
 800ede0:	f7f1 fc2a 	bl	8000638 <__aeabi_dmul>
 800ede4:	ec45 4b10 	vmov	d0, r4, r5
 800ede8:	4680      	mov	r8, r0
 800edea:	4689      	mov	r9, r1
 800edec:	f000 f99e 	bl	800f12c <__ieee754_sqrt>
 800edf0:	a331      	add	r3, pc, #196	; (adr r3, 800eeb8 <__ieee754_acos+0x2b8>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	4620      	mov	r0, r4
 800edf8:	4629      	mov	r1, r5
 800edfa:	ec57 6b10 	vmov	r6, r7, d0
 800edfe:	f7f1 fc1b 	bl	8000638 <__aeabi_dmul>
 800ee02:	a32f      	add	r3, pc, #188	; (adr r3, 800eec0 <__ieee754_acos+0x2c0>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 fa5e 	bl	80002c8 <__aeabi_dsub>
 800ee0c:	4622      	mov	r2, r4
 800ee0e:	462b      	mov	r3, r5
 800ee10:	f7f1 fc12 	bl	8000638 <__aeabi_dmul>
 800ee14:	a32c      	add	r3, pc, #176	; (adr r3, 800eec8 <__ieee754_acos+0x2c8>)
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	f7f1 fa57 	bl	80002cc <__adddf3>
 800ee1e:	4622      	mov	r2, r4
 800ee20:	462b      	mov	r3, r5
 800ee22:	f7f1 fc09 	bl	8000638 <__aeabi_dmul>
 800ee26:	a32a      	add	r3, pc, #168	; (adr r3, 800eed0 <__ieee754_acos+0x2d0>)
 800ee28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2c:	f7f1 fa4c 	bl	80002c8 <__aeabi_dsub>
 800ee30:	4622      	mov	r2, r4
 800ee32:	462b      	mov	r3, r5
 800ee34:	f7f1 fc00 	bl	8000638 <__aeabi_dmul>
 800ee38:	4b2e      	ldr	r3, [pc, #184]	; (800eef4 <__ieee754_acos+0x2f4>)
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f7f1 fa46 	bl	80002cc <__adddf3>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	4640      	mov	r0, r8
 800ee46:	4649      	mov	r1, r9
 800ee48:	f7f1 fd20 	bl	800088c <__aeabi_ddiv>
 800ee4c:	4632      	mov	r2, r6
 800ee4e:	463b      	mov	r3, r7
 800ee50:	f7f1 fbf2 	bl	8000638 <__aeabi_dmul>
 800ee54:	a320      	add	r3, pc, #128	; (adr r3, 800eed8 <__ieee754_acos+0x2d8>)
 800ee56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5a:	f7f1 fa35 	bl	80002c8 <__aeabi_dsub>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	463b      	mov	r3, r7
 800ee62:	f7f1 fa33 	bl	80002cc <__adddf3>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	f7f1 fa2f 	bl	80002cc <__adddf3>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	a103      	add	r1, pc, #12	; (adr r1, 800ee80 <__ieee754_acos+0x280>)
 800ee74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee78:	e76f      	b.n	800ed5a <__ieee754_acos+0x15a>
 800ee7a:	bf00      	nop
 800ee7c:	f3af 8000 	nop.w
 800ee80:	54442d18 	.word	0x54442d18
 800ee84:	400921fb 	.word	0x400921fb
 800ee88:	0dfdf709 	.word	0x0dfdf709
 800ee8c:	3f023de1 	.word	0x3f023de1
 800ee90:	7501b288 	.word	0x7501b288
 800ee94:	3f49efe0 	.word	0x3f49efe0
 800ee98:	b5688f3b 	.word	0xb5688f3b
 800ee9c:	3fa48228 	.word	0x3fa48228
 800eea0:	0e884455 	.word	0x0e884455
 800eea4:	3fc9c155 	.word	0x3fc9c155
 800eea8:	03eb6f7d 	.word	0x03eb6f7d
 800eeac:	3fd4d612 	.word	0x3fd4d612
 800eeb0:	55555555 	.word	0x55555555
 800eeb4:	3fc55555 	.word	0x3fc55555
 800eeb8:	b12e9282 	.word	0xb12e9282
 800eebc:	3fb3b8c5 	.word	0x3fb3b8c5
 800eec0:	1b8d0159 	.word	0x1b8d0159
 800eec4:	3fe6066c 	.word	0x3fe6066c
 800eec8:	9c598ac8 	.word	0x9c598ac8
 800eecc:	40002ae5 	.word	0x40002ae5
 800eed0:	1c8a2d4b 	.word	0x1c8a2d4b
 800eed4:	40033a27 	.word	0x40033a27
 800eed8:	33145c07 	.word	0x33145c07
 800eedc:	3c91a626 	.word	0x3c91a626
 800eee0:	54442d18 	.word	0x54442d18
 800eee4:	3ff921fb 	.word	0x3ff921fb
 800eee8:	3fefffff 	.word	0x3fefffff
 800eeec:	3fdfffff 	.word	0x3fdfffff
 800eef0:	3c600000 	.word	0x3c600000
 800eef4:	3ff00000 	.word	0x3ff00000
 800eef8:	3fe00000 	.word	0x3fe00000
 800eefc:	ee10 2a10 	vmov	r2, s0
 800ef00:	462b      	mov	r3, r5
 800ef02:	496d      	ldr	r1, [pc, #436]	; (800f0b8 <__ieee754_acos+0x4b8>)
 800ef04:	2000      	movs	r0, #0
 800ef06:	f7f1 f9df 	bl	80002c8 <__aeabi_dsub>
 800ef0a:	4b6c      	ldr	r3, [pc, #432]	; (800f0bc <__ieee754_acos+0x4bc>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f7f1 fb93 	bl	8000638 <__aeabi_dmul>
 800ef12:	4604      	mov	r4, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	ec45 4b10 	vmov	d0, r4, r5
 800ef1a:	f000 f907 	bl	800f12c <__ieee754_sqrt>
 800ef1e:	a34e      	add	r3, pc, #312	; (adr r3, 800f058 <__ieee754_acos+0x458>)
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	4620      	mov	r0, r4
 800ef26:	4629      	mov	r1, r5
 800ef28:	ec59 8b10 	vmov	r8, r9, d0
 800ef2c:	f7f1 fb84 	bl	8000638 <__aeabi_dmul>
 800ef30:	a34b      	add	r3, pc, #300	; (adr r3, 800f060 <__ieee754_acos+0x460>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 f9c9 	bl	80002cc <__adddf3>
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	f7f1 fb7b 	bl	8000638 <__aeabi_dmul>
 800ef42:	a349      	add	r3, pc, #292	; (adr r3, 800f068 <__ieee754_acos+0x468>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	f7f1 f9be 	bl	80002c8 <__aeabi_dsub>
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	462b      	mov	r3, r5
 800ef50:	f7f1 fb72 	bl	8000638 <__aeabi_dmul>
 800ef54:	a346      	add	r3, pc, #280	; (adr r3, 800f070 <__ieee754_acos+0x470>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	f7f1 f9b7 	bl	80002cc <__adddf3>
 800ef5e:	4622      	mov	r2, r4
 800ef60:	462b      	mov	r3, r5
 800ef62:	f7f1 fb69 	bl	8000638 <__aeabi_dmul>
 800ef66:	a344      	add	r3, pc, #272	; (adr r3, 800f078 <__ieee754_acos+0x478>)
 800ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6c:	f7f1 f9ac 	bl	80002c8 <__aeabi_dsub>
 800ef70:	4622      	mov	r2, r4
 800ef72:	462b      	mov	r3, r5
 800ef74:	f7f1 fb60 	bl	8000638 <__aeabi_dmul>
 800ef78:	a341      	add	r3, pc, #260	; (adr r3, 800f080 <__ieee754_acos+0x480>)
 800ef7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7e:	f7f1 f9a5 	bl	80002cc <__adddf3>
 800ef82:	4622      	mov	r2, r4
 800ef84:	462b      	mov	r3, r5
 800ef86:	f7f1 fb57 	bl	8000638 <__aeabi_dmul>
 800ef8a:	a33f      	add	r3, pc, #252	; (adr r3, 800f088 <__ieee754_acos+0x488>)
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	4682      	mov	sl, r0
 800ef92:	468b      	mov	fp, r1
 800ef94:	4620      	mov	r0, r4
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 fb4e 	bl	8000638 <__aeabi_dmul>
 800ef9c:	a33c      	add	r3, pc, #240	; (adr r3, 800f090 <__ieee754_acos+0x490>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	f7f1 f991 	bl	80002c8 <__aeabi_dsub>
 800efa6:	4622      	mov	r2, r4
 800efa8:	462b      	mov	r3, r5
 800efaa:	f7f1 fb45 	bl	8000638 <__aeabi_dmul>
 800efae:	a33a      	add	r3, pc, #232	; (adr r3, 800f098 <__ieee754_acos+0x498>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f7f1 f98a 	bl	80002cc <__adddf3>
 800efb8:	4622      	mov	r2, r4
 800efba:	462b      	mov	r3, r5
 800efbc:	f7f1 fb3c 	bl	8000638 <__aeabi_dmul>
 800efc0:	a337      	add	r3, pc, #220	; (adr r3, 800f0a0 <__ieee754_acos+0x4a0>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f7f1 f97f 	bl	80002c8 <__aeabi_dsub>
 800efca:	4622      	mov	r2, r4
 800efcc:	462b      	mov	r3, r5
 800efce:	f7f1 fb33 	bl	8000638 <__aeabi_dmul>
 800efd2:	4b39      	ldr	r3, [pc, #228]	; (800f0b8 <__ieee754_acos+0x4b8>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	f7f1 f979 	bl	80002cc <__adddf3>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	4650      	mov	r0, sl
 800efe0:	4659      	mov	r1, fp
 800efe2:	f7f1 fc53 	bl	800088c <__aeabi_ddiv>
 800efe6:	4642      	mov	r2, r8
 800efe8:	464b      	mov	r3, r9
 800efea:	f7f1 fb25 	bl	8000638 <__aeabi_dmul>
 800efee:	2600      	movs	r6, #0
 800eff0:	4682      	mov	sl, r0
 800eff2:	468b      	mov	fp, r1
 800eff4:	4632      	mov	r2, r6
 800eff6:	464b      	mov	r3, r9
 800eff8:	4630      	mov	r0, r6
 800effa:	4649      	mov	r1, r9
 800effc:	f7f1 fb1c 	bl	8000638 <__aeabi_dmul>
 800f000:	4602      	mov	r2, r0
 800f002:	460b      	mov	r3, r1
 800f004:	4620      	mov	r0, r4
 800f006:	4629      	mov	r1, r5
 800f008:	f7f1 f95e 	bl	80002c8 <__aeabi_dsub>
 800f00c:	4632      	mov	r2, r6
 800f00e:	4604      	mov	r4, r0
 800f010:	460d      	mov	r5, r1
 800f012:	464b      	mov	r3, r9
 800f014:	4640      	mov	r0, r8
 800f016:	4649      	mov	r1, r9
 800f018:	f7f1 f958 	bl	80002cc <__adddf3>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	4620      	mov	r0, r4
 800f022:	4629      	mov	r1, r5
 800f024:	f7f1 fc32 	bl	800088c <__aeabi_ddiv>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4650      	mov	r0, sl
 800f02e:	4659      	mov	r1, fp
 800f030:	f7f1 f94c 	bl	80002cc <__adddf3>
 800f034:	4632      	mov	r2, r6
 800f036:	464b      	mov	r3, r9
 800f038:	f7f1 f948 	bl	80002cc <__adddf3>
 800f03c:	4602      	mov	r2, r0
 800f03e:	460b      	mov	r3, r1
 800f040:	f7f1 f944 	bl	80002cc <__adddf3>
 800f044:	e5fe      	b.n	800ec44 <__ieee754_acos+0x44>
 800f046:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f0a8 <__ieee754_acos+0x4a8>
 800f04a:	e5ed      	b.n	800ec28 <__ieee754_acos+0x28>
 800f04c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f0b0 <__ieee754_acos+0x4b0>
 800f050:	e5ea      	b.n	800ec28 <__ieee754_acos+0x28>
 800f052:	bf00      	nop
 800f054:	f3af 8000 	nop.w
 800f058:	0dfdf709 	.word	0x0dfdf709
 800f05c:	3f023de1 	.word	0x3f023de1
 800f060:	7501b288 	.word	0x7501b288
 800f064:	3f49efe0 	.word	0x3f49efe0
 800f068:	b5688f3b 	.word	0xb5688f3b
 800f06c:	3fa48228 	.word	0x3fa48228
 800f070:	0e884455 	.word	0x0e884455
 800f074:	3fc9c155 	.word	0x3fc9c155
 800f078:	03eb6f7d 	.word	0x03eb6f7d
 800f07c:	3fd4d612 	.word	0x3fd4d612
 800f080:	55555555 	.word	0x55555555
 800f084:	3fc55555 	.word	0x3fc55555
 800f088:	b12e9282 	.word	0xb12e9282
 800f08c:	3fb3b8c5 	.word	0x3fb3b8c5
 800f090:	1b8d0159 	.word	0x1b8d0159
 800f094:	3fe6066c 	.word	0x3fe6066c
 800f098:	9c598ac8 	.word	0x9c598ac8
 800f09c:	40002ae5 	.word	0x40002ae5
 800f0a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f0a4:	40033a27 	.word	0x40033a27
	...
 800f0b0:	54442d18 	.word	0x54442d18
 800f0b4:	3ff921fb 	.word	0x3ff921fb
 800f0b8:	3ff00000 	.word	0x3ff00000
 800f0bc:	3fe00000 	.word	0x3fe00000

0800f0c0 <sqrt>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	ed2d 8b02 	vpush	{d8}
 800f0c6:	ec55 4b10 	vmov	r4, r5, d0
 800f0ca:	f000 f82f 	bl	800f12c <__ieee754_sqrt>
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	462b      	mov	r3, r5
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	4629      	mov	r1, r5
 800f0d6:	eeb0 8a40 	vmov.f32	s16, s0
 800f0da:	eef0 8a60 	vmov.f32	s17, s1
 800f0de:	f7f1 fd45 	bl	8000b6c <__aeabi_dcmpun>
 800f0e2:	b990      	cbnz	r0, 800f10a <sqrt+0x4a>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 fd16 	bl	8000b1c <__aeabi_dcmplt>
 800f0f0:	b158      	cbz	r0, 800f10a <sqrt+0x4a>
 800f0f2:	f7fd f81d 	bl	800c130 <__errno>
 800f0f6:	2321      	movs	r3, #33	; 0x21
 800f0f8:	6003      	str	r3, [r0, #0]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4610      	mov	r0, r2
 800f100:	4619      	mov	r1, r3
 800f102:	f7f1 fbc3 	bl	800088c <__aeabi_ddiv>
 800f106:	ec41 0b18 	vmov	d8, r0, r1
 800f10a:	eeb0 0a48 	vmov.f32	s0, s16
 800f10e:	eef0 0a68 	vmov.f32	s1, s17
 800f112:	ecbd 8b02 	vpop	{d8}
 800f116:	bd38      	pop	{r3, r4, r5, pc}

0800f118 <fabs>:
 800f118:	ec51 0b10 	vmov	r0, r1, d0
 800f11c:	ee10 2a10 	vmov	r2, s0
 800f120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f124:	ec43 2b10 	vmov	d0, r2, r3
 800f128:	4770      	bx	lr
	...

0800f12c <__ieee754_sqrt>:
 800f12c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f130:	ec55 4b10 	vmov	r4, r5, d0
 800f134:	4e67      	ldr	r6, [pc, #412]	; (800f2d4 <__ieee754_sqrt+0x1a8>)
 800f136:	43ae      	bics	r6, r5
 800f138:	ee10 0a10 	vmov	r0, s0
 800f13c:	ee10 2a10 	vmov	r2, s0
 800f140:	4629      	mov	r1, r5
 800f142:	462b      	mov	r3, r5
 800f144:	d10d      	bne.n	800f162 <__ieee754_sqrt+0x36>
 800f146:	f7f1 fa77 	bl	8000638 <__aeabi_dmul>
 800f14a:	4602      	mov	r2, r0
 800f14c:	460b      	mov	r3, r1
 800f14e:	4620      	mov	r0, r4
 800f150:	4629      	mov	r1, r5
 800f152:	f7f1 f8bb 	bl	80002cc <__adddf3>
 800f156:	4604      	mov	r4, r0
 800f158:	460d      	mov	r5, r1
 800f15a:	ec45 4b10 	vmov	d0, r4, r5
 800f15e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	2d00      	cmp	r5, #0
 800f164:	dc0b      	bgt.n	800f17e <__ieee754_sqrt+0x52>
 800f166:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f16a:	4326      	orrs	r6, r4
 800f16c:	d0f5      	beq.n	800f15a <__ieee754_sqrt+0x2e>
 800f16e:	b135      	cbz	r5, 800f17e <__ieee754_sqrt+0x52>
 800f170:	f7f1 f8aa 	bl	80002c8 <__aeabi_dsub>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	f7f1 fb88 	bl	800088c <__aeabi_ddiv>
 800f17c:	e7eb      	b.n	800f156 <__ieee754_sqrt+0x2a>
 800f17e:	1509      	asrs	r1, r1, #20
 800f180:	f000 808d 	beq.w	800f29e <__ieee754_sqrt+0x172>
 800f184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f188:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f18c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f190:	07c9      	lsls	r1, r1, #31
 800f192:	bf5c      	itt	pl
 800f194:	005b      	lslpl	r3, r3, #1
 800f196:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f19a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f19e:	bf58      	it	pl
 800f1a0:	0052      	lslpl	r2, r2, #1
 800f1a2:	2500      	movs	r5, #0
 800f1a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f1a8:	1076      	asrs	r6, r6, #1
 800f1aa:	0052      	lsls	r2, r2, #1
 800f1ac:	f04f 0e16 	mov.w	lr, #22
 800f1b0:	46ac      	mov	ip, r5
 800f1b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f1b6:	eb0c 0001 	add.w	r0, ip, r1
 800f1ba:	4298      	cmp	r0, r3
 800f1bc:	bfde      	ittt	le
 800f1be:	1a1b      	suble	r3, r3, r0
 800f1c0:	eb00 0c01 	addle.w	ip, r0, r1
 800f1c4:	186d      	addle	r5, r5, r1
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	f1be 0e01 	subs.w	lr, lr, #1
 800f1cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f1d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f1d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f1d8:	d1ed      	bne.n	800f1b6 <__ieee754_sqrt+0x8a>
 800f1da:	4674      	mov	r4, lr
 800f1dc:	2720      	movs	r7, #32
 800f1de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f1e2:	4563      	cmp	r3, ip
 800f1e4:	eb01 000e 	add.w	r0, r1, lr
 800f1e8:	dc02      	bgt.n	800f1f0 <__ieee754_sqrt+0xc4>
 800f1ea:	d113      	bne.n	800f214 <__ieee754_sqrt+0xe8>
 800f1ec:	4290      	cmp	r0, r2
 800f1ee:	d811      	bhi.n	800f214 <__ieee754_sqrt+0xe8>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	eb00 0e01 	add.w	lr, r0, r1
 800f1f6:	da57      	bge.n	800f2a8 <__ieee754_sqrt+0x17c>
 800f1f8:	f1be 0f00 	cmp.w	lr, #0
 800f1fc:	db54      	blt.n	800f2a8 <__ieee754_sqrt+0x17c>
 800f1fe:	f10c 0801 	add.w	r8, ip, #1
 800f202:	eba3 030c 	sub.w	r3, r3, ip
 800f206:	4290      	cmp	r0, r2
 800f208:	bf88      	it	hi
 800f20a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800f20e:	1a12      	subs	r2, r2, r0
 800f210:	440c      	add	r4, r1
 800f212:	46c4      	mov	ip, r8
 800f214:	005b      	lsls	r3, r3, #1
 800f216:	3f01      	subs	r7, #1
 800f218:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f21c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f220:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f224:	d1dd      	bne.n	800f1e2 <__ieee754_sqrt+0xb6>
 800f226:	4313      	orrs	r3, r2
 800f228:	d01b      	beq.n	800f262 <__ieee754_sqrt+0x136>
 800f22a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f2d8 <__ieee754_sqrt+0x1ac>
 800f22e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f2dc <__ieee754_sqrt+0x1b0>
 800f232:	e9da 0100 	ldrd	r0, r1, [sl]
 800f236:	e9db 2300 	ldrd	r2, r3, [fp]
 800f23a:	f7f1 f845 	bl	80002c8 <__aeabi_dsub>
 800f23e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4640      	mov	r0, r8
 800f248:	4649      	mov	r1, r9
 800f24a:	f7f1 fc71 	bl	8000b30 <__aeabi_dcmple>
 800f24e:	b140      	cbz	r0, 800f262 <__ieee754_sqrt+0x136>
 800f250:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800f254:	e9da 0100 	ldrd	r0, r1, [sl]
 800f258:	e9db 2300 	ldrd	r2, r3, [fp]
 800f25c:	d126      	bne.n	800f2ac <__ieee754_sqrt+0x180>
 800f25e:	3501      	adds	r5, #1
 800f260:	463c      	mov	r4, r7
 800f262:	106a      	asrs	r2, r5, #1
 800f264:	0863      	lsrs	r3, r4, #1
 800f266:	07e9      	lsls	r1, r5, #31
 800f268:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f26c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f270:	bf48      	it	mi
 800f272:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f276:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f27a:	461c      	mov	r4, r3
 800f27c:	e76d      	b.n	800f15a <__ieee754_sqrt+0x2e>
 800f27e:	0ad3      	lsrs	r3, r2, #11
 800f280:	3815      	subs	r0, #21
 800f282:	0552      	lsls	r2, r2, #21
 800f284:	2b00      	cmp	r3, #0
 800f286:	d0fa      	beq.n	800f27e <__ieee754_sqrt+0x152>
 800f288:	02dc      	lsls	r4, r3, #11
 800f28a:	d50a      	bpl.n	800f2a2 <__ieee754_sqrt+0x176>
 800f28c:	f1c1 0420 	rsb	r4, r1, #32
 800f290:	fa22 f404 	lsr.w	r4, r2, r4
 800f294:	1e4d      	subs	r5, r1, #1
 800f296:	408a      	lsls	r2, r1
 800f298:	4323      	orrs	r3, r4
 800f29a:	1b41      	subs	r1, r0, r5
 800f29c:	e772      	b.n	800f184 <__ieee754_sqrt+0x58>
 800f29e:	4608      	mov	r0, r1
 800f2a0:	e7f0      	b.n	800f284 <__ieee754_sqrt+0x158>
 800f2a2:	005b      	lsls	r3, r3, #1
 800f2a4:	3101      	adds	r1, #1
 800f2a6:	e7ef      	b.n	800f288 <__ieee754_sqrt+0x15c>
 800f2a8:	46e0      	mov	r8, ip
 800f2aa:	e7aa      	b.n	800f202 <__ieee754_sqrt+0xd6>
 800f2ac:	f7f1 f80e 	bl	80002cc <__adddf3>
 800f2b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	4649      	mov	r1, r9
 800f2bc:	f7f1 fc2e 	bl	8000b1c <__aeabi_dcmplt>
 800f2c0:	b120      	cbz	r0, 800f2cc <__ieee754_sqrt+0x1a0>
 800f2c2:	1ca0      	adds	r0, r4, #2
 800f2c4:	bf08      	it	eq
 800f2c6:	3501      	addeq	r5, #1
 800f2c8:	3402      	adds	r4, #2
 800f2ca:	e7ca      	b.n	800f262 <__ieee754_sqrt+0x136>
 800f2cc:	3401      	adds	r4, #1
 800f2ce:	f024 0401 	bic.w	r4, r4, #1
 800f2d2:	e7c6      	b.n	800f262 <__ieee754_sqrt+0x136>
 800f2d4:	7ff00000 	.word	0x7ff00000
 800f2d8:	20000210 	.word	0x20000210
 800f2dc:	20000218 	.word	0x20000218

0800f2e0 <round>:
 800f2e0:	ec53 2b10 	vmov	r2, r3, d0
 800f2e4:	b570      	push	{r4, r5, r6, lr}
 800f2e6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f2ea:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800f2ee:	2813      	cmp	r0, #19
 800f2f0:	ee10 5a10 	vmov	r5, s0
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	dc18      	bgt.n	800f32a <round+0x4a>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	da09      	bge.n	800f310 <round+0x30>
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800f302:	d103      	bne.n	800f30c <round+0x2c>
 800f304:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f308:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f30c:	2300      	movs	r3, #0
 800f30e:	e02a      	b.n	800f366 <round+0x86>
 800f310:	4c16      	ldr	r4, [pc, #88]	; (800f36c <round+0x8c>)
 800f312:	4104      	asrs	r4, r0
 800f314:	ea03 0604 	and.w	r6, r3, r4
 800f318:	4316      	orrs	r6, r2
 800f31a:	d011      	beq.n	800f340 <round+0x60>
 800f31c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f320:	4103      	asrs	r3, r0
 800f322:	440b      	add	r3, r1
 800f324:	ea23 0104 	bic.w	r1, r3, r4
 800f328:	e7f0      	b.n	800f30c <round+0x2c>
 800f32a:	2833      	cmp	r0, #51	; 0x33
 800f32c:	dd0b      	ble.n	800f346 <round+0x66>
 800f32e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f332:	d105      	bne.n	800f340 <round+0x60>
 800f334:	ee10 0a10 	vmov	r0, s0
 800f338:	f7f0 ffc8 	bl	80002cc <__adddf3>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	ec43 2b10 	vmov	d0, r2, r3
 800f344:	bd70      	pop	{r4, r5, r6, pc}
 800f346:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800f34a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f34e:	40f4      	lsrs	r4, r6
 800f350:	4214      	tst	r4, r2
 800f352:	d0f5      	beq.n	800f340 <round+0x60>
 800f354:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800f358:	2301      	movs	r3, #1
 800f35a:	4083      	lsls	r3, r0
 800f35c:	195b      	adds	r3, r3, r5
 800f35e:	bf28      	it	cs
 800f360:	3101      	addcs	r1, #1
 800f362:	ea23 0304 	bic.w	r3, r3, r4
 800f366:	461a      	mov	r2, r3
 800f368:	460b      	mov	r3, r1
 800f36a:	e7e9      	b.n	800f340 <round+0x60>
 800f36c:	000fffff 	.word	0x000fffff

0800f370 <trunc>:
 800f370:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800f374:	ec5c bb10 	vmov	fp, ip, d0
 800f378:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800f37c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800f380:	2913      	cmp	r1, #19
 800f382:	4664      	mov	r4, ip
 800f384:	dc11      	bgt.n	800f3aa <trunc+0x3a>
 800f386:	2900      	cmp	r1, #0
 800f388:	bfa7      	ittee	ge
 800f38a:	4b15      	ldrge	r3, [pc, #84]	; (800f3e0 <trunc+0x70>)
 800f38c:	fa43 f101 	asrge.w	r1, r3, r1
 800f390:	2200      	movlt	r2, #0
 800f392:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800f396:	bfa4      	itt	ge
 800f398:	2200      	movge	r2, #0
 800f39a:	ea01 030c 	andge.w	r3, r1, ip
 800f39e:	4693      	mov	fp, r2
 800f3a0:	469c      	mov	ip, r3
 800f3a2:	ec4c bb10 	vmov	d0, fp, ip
 800f3a6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800f3aa:	2933      	cmp	r1, #51	; 0x33
 800f3ac:	dd0d      	ble.n	800f3ca <trunc+0x5a>
 800f3ae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f3b2:	d1f6      	bne.n	800f3a2 <trunc+0x32>
 800f3b4:	4663      	mov	r3, ip
 800f3b6:	ee10 2a10 	vmov	r2, s0
 800f3ba:	ee10 0a10 	vmov	r0, s0
 800f3be:	4621      	mov	r1, r4
 800f3c0:	f7f0 ff84 	bl	80002cc <__adddf3>
 800f3c4:	4683      	mov	fp, r0
 800f3c6:	468c      	mov	ip, r1
 800f3c8:	e7eb      	b.n	800f3a2 <trunc+0x32>
 800f3ca:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800f3ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3d2:	40c3      	lsrs	r3, r0
 800f3d4:	ea2b 0603 	bic.w	r6, fp, r3
 800f3d8:	46b3      	mov	fp, r6
 800f3da:	46a4      	mov	ip, r4
 800f3dc:	e7e1      	b.n	800f3a2 <trunc+0x32>
 800f3de:	bf00      	nop
 800f3e0:	fff00000 	.word	0xfff00000
 800f3e4:	00000000 	.word	0x00000000

0800f3e8 <nan>:
 800f3e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3f0 <nan+0x8>
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	00000000 	.word	0x00000000
 800f3f4:	7ff80000 	.word	0x7ff80000

0800f3f8 <_init>:
 800f3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fa:	bf00      	nop
 800f3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3fe:	bc08      	pop	{r3}
 800f400:	469e      	mov	lr, r3
 800f402:	4770      	bx	lr

0800f404 <_fini>:
 800f404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f406:	bf00      	nop
 800f408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f40a:	bc08      	pop	{r3}
 800f40c:	469e      	mov	lr, r3
 800f40e:	4770      	bx	lr
