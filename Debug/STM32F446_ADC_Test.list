
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b38  08011578  08011578  00021578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160b0  080160b0  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  080160b0  080160b0  000260b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080160b8  080160b8  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160b8  080160b8  000260b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160bc  080160bc  000260bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080160c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000095b0  20000220  080162e0  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200097d0  080162e0  000397d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019995  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd9  00000000  00000000  00049c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  0004d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001265  00000000  00000000  0004f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276b1  00000000  00000000  0005031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd9d  00000000  00000000  000779ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c4f  00000000  00000000  0009776b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007afc  00000000  00000000  0017d3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00184eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011560 	.word	0x08011560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08011560 	.word	0x08011560

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0d0      	b.n	80011ea <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4960      	ldr	r1, [pc, #384]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	495b      	ldr	r1, [pc, #364]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	4956      	ldr	r1, [pc, #344]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4951      	ldr	r1, [pc, #324]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	494c      	ldr	r1, [pc, #304]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	4946      	ldr	r1, [pc, #280]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4941      	ldr	r1, [pc, #260]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	493b      	ldr	r1, [pc, #236]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001140:	7c7a      	ldrb	r2, [r7, #17]
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001154:	7c3a      	ldrb	r2, [r7, #16]
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	330d      	adds	r3, #13
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e030      	b.n	80011d0 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800116e:	8af9      	ldrh	r1, [r7, #22]
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	8a7b      	ldrh	r3, [r7, #18]
 8001174:	4c20      	ldr	r4, [pc, #128]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 800117c:	fb05 f000 	mul.w	r0, r5, r0
 8001180:	4401      	add	r1, r0
 8001182:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001186:	491d      	ldr	r1, [pc, #116]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 8001188:	f44f 7052 	mov.w	r0, #840	; 0x348
 800118c:	fb00 f202 	mul.w	r2, r0, r2
 8001190:	4413      	add	r3, r2
 8001192:	4622      	mov	r2, r4
 8001194:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	7c3a      	ldrb	r2, [r7, #16]
 800119e:	8a7b      	ldrh	r3, [r7, #18]
 80011a0:	1c58      	adds	r0, r3, #1
 80011a2:	8278      	strh	r0, [r7, #18]
 80011a4:	461d      	mov	r5, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ae:	fb04 f303 	mul.w	r3, r4, r3
 80011b2:	440b      	add	r3, r1
 80011b4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 80011ba:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	442b      	add	r3, r5
 80011c4:	4602      	mov	r2, r0
 80011c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	3302      	adds	r3, #2
 80011ce:	82fb      	strh	r3, [r7, #22]
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d9ca      	bls.n	800116e <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93c 	bl	8001458 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011e0:	7c3b      	ldrb	r3, [r7, #16]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f938 	bl	8001458 <calc_downsample>
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	20002658 	.word	0x20002658
 80011fc:	20005ad8 	.word	0x20005ad8

08001200 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	f200 8117 	bhi.w	8001444 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0fda      	lsrs	r2, r3, #31
 8001222:	4413      	add	r3, r2
 8001224:	105b      	asrs	r3, r3, #1
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	e0df      	b.n	8001406 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4981      	ldr	r1, [pc, #516]	; (8001450 <calc_zero_detector+0x250>)
 800124a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800124e:	fb03 f202 	mul.w	r2, r3, r2
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800125a:	461a      	mov	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4293      	cmp	r3, r2
 8001260:	f300 80ce 	bgt.w	8001400 <calc_zero_detector+0x200>
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	497a      	ldr	r1, [pc, #488]	; (8001450 <calc_zero_detector+0x250>)
 8001268:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800126c:	fb03 f202 	mul.w	r2, r3, r2
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4413      	add	r3, r2
 8001274:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001278:	461a      	mov	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4293      	cmp	r3, r2
 800127e:	f2c0 80bf 	blt.w	8001400 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4972      	ldr	r1, [pc, #456]	; (8001450 <calc_zero_detector+0x250>)
 8001286:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4293      	cmp	r3, r2
 800129c:	da3d      	bge.n	800131a <calc_zero_detector+0x11a>
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	496a      	ldr	r1, [pc, #424]	; (8001450 <calc_zero_detector+0x250>)
 80012a6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012aa:	fb00 f202 	mul.w	r2, r0, r2
 80012ae:	4413      	add	r3, r2
 80012b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	db2e      	blt.n	800131a <calc_zero_detector+0x11a>
				detected++;
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	3301      	adds	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	dd11      	ble.n	80012ec <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	3b02      	subs	r3, #2
 80012ce:	4960      	ldr	r1, [pc, #384]	; (8001450 <calc_zero_detector+0x250>)
 80012d0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	dd02      	ble.n	80012ec <calc_zero_detector+0xec>
						detected++;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	3301      	adds	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3302      	adds	r3, #2
 80012f0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012f4:	d211      	bcs.n	800131a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4954      	ldr	r1, [pc, #336]	; (8001450 <calc_zero_detector+0x250>)
 80012fe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001302:	fb00 f202 	mul.w	r2, r0, r2
 8001306:	4413      	add	r3, r2
 8001308:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4293      	cmp	r3, r2
 8001312:	da02      	bge.n	800131a <calc_zero_detector+0x11a>
						detected++;
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	3301      	adds	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d90f      	bls.n	8001340 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	494c      	ldr	r1, [pc, #304]	; (8001454 <calc_zero_detector+0x254>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001338:	7fbb      	ldrb	r3, [r7, #30]
 800133a:	3301      	adds	r3, #1
 800133c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800133e:	e05f      	b.n	8001400 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4942      	ldr	r1, [pc, #264]	; (8001450 <calc_zero_detector+0x250>)
 8001348:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4293      	cmp	r3, r2
 800135e:	dd4f      	ble.n	8001400 <calc_zero_detector+0x200>
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3b01      	subs	r3, #1
 8001366:	493a      	ldr	r1, [pc, #232]	; (8001450 <calc_zero_detector+0x250>)
 8001368:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136c:	fb00 f202 	mul.w	r2, r0, r2
 8001370:	4413      	add	r3, r2
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4293      	cmp	r3, r2
 800137c:	dc40      	bgt.n	8001400 <calc_zero_detector+0x200>
				detected++;
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	3301      	adds	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dd11      	ble.n	80013ae <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3b02      	subs	r3, #2
 8001390:	492f      	ldr	r1, [pc, #188]	; (8001450 <calc_zero_detector+0x250>)
 8001392:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001396:	fb00 f202 	mul.w	r2, r0, r2
 800139a:	4413      	add	r3, r2
 800139c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	dc02      	bgt.n	80013ae <calc_zero_detector+0x1ae>
						detected++;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	3301      	adds	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013b6:	d211      	bcs.n	80013dc <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3302      	adds	r3, #2
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <calc_zero_detector+0x250>)
 80013c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013c4:	fb00 f202 	mul.w	r2, r0, r2
 80013c8:	4413      	add	r3, r2
 80013ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd02      	ble.n	80013dc <calc_zero_detector+0x1dc>
						detected++;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d90c      	bls.n	80013fc <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	491b      	ldr	r1, [pc, #108]	; (8001454 <calc_zero_detector+0x254>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800140c:	f4ff af1b 	bcc.w	8001246 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d917      	bls.n	8001446 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <calc_zero_detector+0x254>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	f06f 0208 	mvn.w	r2, #8
 800142a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <calc_zero_detector+0x254>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	f06f 0208 	mvn.w	r2, #8
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e000      	b.n	8001446 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001444:	bf00      	nop
	}
}
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20007518 	.word	0x20007518
 8001454:	2000023c 	.word	0x2000023c

08001458 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 8001462:	2300      	movs	r3, #0
 8001464:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f200 8115 	bhi.w	8001698 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e083      	b.n	800157c <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	498a      	ldr	r1, [pc, #552]	; (80016a0 <calc_downsample+0x248>)
 8001478:	f44f 7252 	mov.w	r2, #840	; 0x348
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4413      	add	r3, r2
 8001484:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001488:	461c      	mov	r4, r3
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3b01      	subs	r3, #1
 8001490:	4983      	ldr	r1, [pc, #524]	; (80016a0 <calc_downsample+0x248>)
 8001492:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	4413      	add	r3, r2
 800149c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a0:	4423      	add	r3, r4
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	3201      	adds	r2, #1
 80014a8:	487d      	ldr	r0, [pc, #500]	; (80016a0 <calc_downsample+0x248>)
 80014aa:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ae:	fb04 f101 	mul.w	r1, r4, r1
 80014b2:	440a      	add	r2, r1
 80014b4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <calc_downsample+0x24c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	17db      	asrs	r3, r3, #31
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	b28c      	uxth	r4, r1
 80014ca:	4977      	ldr	r1, [pc, #476]	; (80016a8 <calc_downsample+0x250>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <calc_downsample+0x254>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	82bb      	strh	r3, [r7, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	496d      	ldr	r1, [pc, #436]	; (80016a8 <calc_downsample+0x250>)
 80014f4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014f8:	fb00 f202 	mul.w	r2, r0, r2
 80014fc:	4413      	add	r3, r2
 80014fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001502:	827b      	strh	r3, [r7, #18]
 8001504:	8a7a      	ldrh	r2, [r7, #18]
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	4293      	cmp	r3, r2
 800150a:	bf28      	it	cs
 800150c:	4613      	movcs	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	b298      	uxth	r0, r3
 8001514:	4965      	ldr	r1, [pc, #404]	; (80016ac <calc_downsample+0x254>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	4961      	ldr	r1, [pc, #388]	; (80016ac <calc_downsample+0x254>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3302      	adds	r3, #2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	823b      	strh	r3, [r7, #16]
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	495a      	ldr	r1, [pc, #360]	; (80016a8 <calc_downsample+0x250>)
 800153e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001542:	fb00 f202 	mul.w	r2, r0, r2
 8001546:	4413      	add	r3, r2
 8001548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	8a3b      	ldrh	r3, [r7, #16]
 8001552:	4293      	cmp	r3, r2
 8001554:	bf38      	it	cc
 8001556:	4613      	movcc	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	b298      	uxth	r0, r3
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <calc_downsample+0x254>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	3301      	adds	r3, #1
 8001574:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f240 3245 	movw	r2, #837	; 0x345
 8001582:	4293      	cmp	r3, r2
 8001584:	f67f af76 	bls.w	8001474 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <calc_downsample+0x248>)
 800158c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <calc_downsample+0x248>)
 80015a2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4403      	add	r3, r0
 80015b4:	0fda      	lsrs	r2, r3, #31
 80015b6:	4413      	add	r3, r2
 80015b8:	105b      	asrs	r3, r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	83f9      	strh	r1, [r7, #30]
 80015c4:	461c      	mov	r4, r3
 80015c6:	b280      	uxth	r0, r0
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <calc_downsample+0x250>)
 80015ca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4423      	add	r3, r4
 80015d4:	4602      	mov	r2, r0
 80015d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015e0:	d20a      	bcs.n	80015f8 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	8bfb      	ldrh	r3, [r7, #30]
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <calc_downsample+0x250>)
 80015e8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015ec:	fb00 f202 	mul.w	r2, r0, r2
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <calc_downsample+0x254>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3302      	adds	r3, #2
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <calc_downsample+0x254>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	2b14      	cmp	r3, #20
 8001622:	d918      	bls.n	8001656 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <calc_downsample+0x254>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	18c1      	adds	r1, r0, r3
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <calc_downsample+0x258>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdd6 	bl	8001200 <calc_zero_detector>
 8001654:	e021      	b.n	800169a <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <calc_downsample+0x254>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <calc_downsample+0x254>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	330d      	adds	r3, #13
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e000      	b.n	800169a <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001698:	bf00      	nop
	}
}
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20005ad8 	.word	0x20005ad8
 80016a4:	55555556 	.word	0x55555556
 80016a8:	20007518 	.word	0x20007518
 80016ac:	2000023c 	.word	0x2000023c
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <calc_filter_add_v>:

/*
 * @brief  Add new value to voltage filter
 * @para newValue: The new value to add to the filter
 */
void calc_filter_add_v(float newValue) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float v_total = 0;
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	e019      	b.n	80016fe <calc_filter_add_v+0x4a>
		v_filter[i] = v_filter[i+1];
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <calc_filter_add_v+0x84>)
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4918      	ldr	r1, [pc, #96]	; (8001738 <calc_filter_add_v+0x84>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	601a      	str	r2, [r3, #0]
		v_total += v_filter[i];			// accumulate total
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <calc_filter_add_v+0x84>)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b08      	cmp	r3, #8
 8001702:	dde2      	ble.n	80016ca <calc_filter_add_v+0x16>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = newValue;
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <calc_filter_add_v+0x84>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6253      	str	r3, [r2, #36]	; 0x24
	v_total += newValue;
 800170a:	ed97 7a03 	vldr	s14, [r7, #12]
 800170e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	edc7 7a03 	vstr	s15, [r7, #12]
	v_filtered = v_total / FILTER_NUM;
 800171a:	ed97 7a03 	vldr	s14, [r7, #12]
 800171e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <calc_filter_add_v+0x88>)
 8001728:	edc3 7a00 	vstr	s15, [r3]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000290 	.word	0x20000290
 800173c:	20000498 	.word	0x20000498

08001740 <calc_filter_add_i>:
 * @para new_i_value:  The new current value to add to the filter
 * @para new_va_value: The new va value to add to the filter
 * @para new_w_value:  The new w value to add to the filter
 * @para new_pf_value: The new PF value to add to the filter
 */
void calc_filter_add_i(uint8_t channel, float new_i_value, float new_va_value, float new_w_value, float new_pf_value) {
 8001740:	b490      	push	{r4, r7}
 8001742:	b08c      	sub	sp, #48	; 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	ed87 0a04 	vstr	s0, [r7, #16]
 800174c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001750:	ed87 1a02 	vstr	s2, [r7, #8]
 8001754:	edc7 1a01 	vstr	s3, [r7, #4]
 8001758:	75fb      	strb	r3, [r7, #23]
	float i_total=0, va_total=0, w_total=0, pf_total=0;
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e0a6      	b.n	80018c6 <calc_filter_add_i+0x186>
		i_filter[channel][i] = i_filter[channel][i+1];
 8001778:	7df9      	ldrb	r1, [r7, #23]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	1c58      	adds	r0, r3, #1
 800177e:	7dfa      	ldrb	r2, [r7, #23]
 8001780:	4c91      	ldr	r4, [pc, #580]	; (80019c8 <calc_filter_add_i+0x288>)
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4403      	add	r3, r0
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4423      	add	r3, r4
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	488d      	ldr	r0, [pc, #564]	; (80019c8 <calc_filter_add_i+0x288>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4403      	add	r3, r0
 80017a4:	6019      	str	r1, [r3, #0]
		i_total += i_filter[channel][i];
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4987      	ldr	r1, [pc, #540]	; (80019c8 <calc_filter_add_i+0x288>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		va_filter[channel][i] = va_filter[channel][i+1];
 80017ca:	7df9      	ldrb	r1, [r7, #23]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1c58      	adds	r0, r3, #1
 80017d0:	7dfa      	ldrb	r2, [r7, #23]
 80017d2:	4c7e      	ldr	r4, [pc, #504]	; (80019cc <calc_filter_add_i+0x28c>)
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4403      	add	r3, r0
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4423      	add	r3, r4
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	4879      	ldr	r0, [pc, #484]	; (80019cc <calc_filter_add_i+0x28c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4403      	add	r3, r0
 80017f6:	6019      	str	r1, [r3, #0]
		va_total += va_filter[channel][i];
 80017f8:	7dfa      	ldrb	r2, [r7, #23]
 80017fa:	4974      	ldr	r1, [pc, #464]	; (80019cc <calc_filter_add_i+0x28c>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		w_filter[channel][i] = w_filter[channel][i+1];
 800181c:	7df9      	ldrb	r1, [r7, #23]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c58      	adds	r0, r3, #1
 8001822:	7dfa      	ldrb	r2, [r7, #23]
 8001824:	4c6a      	ldr	r4, [pc, #424]	; (80019d0 <calc_filter_add_i+0x290>)
 8001826:	460b      	mov	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4403      	add	r3, r0
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4423      	add	r3, r4
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	4866      	ldr	r0, [pc, #408]	; (80019d0 <calc_filter_add_i+0x290>)
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4403      	add	r3, r0
 8001848:	6019      	str	r1, [r3, #0]
		w_total += w_filter[channel][i];
 800184a:	7dfa      	ldrb	r2, [r7, #23]
 800184c:	4960      	ldr	r1, [pc, #384]	; (80019d0 <calc_filter_add_i+0x290>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pf_filter[channel][i] = pf_filter[channel][i+1];
 800186e:	7df9      	ldrb	r1, [r7, #23]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1c58      	adds	r0, r3, #1
 8001874:	7dfa      	ldrb	r2, [r7, #23]
 8001876:	4c57      	ldr	r4, [pc, #348]	; (80019d4 <calc_filter_add_i+0x294>)
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4423      	add	r3, r4
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	4852      	ldr	r0, [pc, #328]	; (80019d4 <calc_filter_add_i+0x294>)
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4403      	add	r3, r0
 800189a:	6019      	str	r1, [r3, #0]
		pf_total += pf_filter[channel][i];
 800189c:	7dfa      	ldrb	r2, [r7, #23]
 800189e:	494d      	ldr	r1, [pc, #308]	; (80019d4 <calc_filter_add_i+0x294>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80018b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018bc:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	f77f af55 	ble.w	8001778 <calc_filter_add_i+0x38>
	}
	// add new measurements
	i_filter[channel][FILTER_NUM-1] = new_i_value;
 80018ce:	7dfa      	ldrb	r2, [r7, #23]
 80018d0:	493d      	ldr	r1, [pc, #244]	; (80019c8 <calc_filter_add_i+0x288>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3324      	adds	r3, #36	; 0x24
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]
	i_total += new_i_value;
 80018e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80018e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	va_filter[channel][FILTER_NUM-1] = new_va_value;
 80018f2:	7dfa      	ldrb	r2, [r7, #23]
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <calc_filter_add_i+0x28c>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3324      	adds	r3, #36	; 0x24
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	601a      	str	r2, [r3, #0]
	va_total += new_va_value;
 8001906:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800190a:	edd7 7a03 	vldr	s15, [r7, #12]
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	w_filter[channel][FILTER_NUM-1] = new_w_value;
 8001916:	7dfa      	ldrb	r2, [r7, #23]
 8001918:	492d      	ldr	r1, [pc, #180]	; (80019d0 <calc_filter_add_i+0x290>)
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3324      	adds	r3, #36	; 0x24
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	601a      	str	r2, [r3, #0]
	w_total += new_w_value;
 800192a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800192e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pf_filter[channel][FILTER_NUM-1] = new_pf_value;
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	4925      	ldr	r1, [pc, #148]	; (80019d4 <calc_filter_add_i+0x294>)
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3324      	adds	r3, #36	; 0x24
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
	pf_total += new_pf_value;
 800194e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001952:	edd7 7a01 	vldr	s15, [r7, #4]
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	edc7 7a08 	vstr	s15, [r7, #32]

	i_filtered[channel] = i_total / FILTER_NUM;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001964:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <calc_filter_add_i+0x298>)
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	edc3 7a00 	vstr	s15, [r3]
	va_filtered[channel] = va_total / FILTER_NUM;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800197c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	4a15      	ldr	r2, [pc, #84]	; (80019dc <calc_filter_add_i+0x29c>)
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	edc3 7a00 	vstr	s15, [r3]
	w_filtered[channel] = w_total / FILTER_NUM;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001994:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <calc_filter_add_i+0x2a0>)
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	pf_filtered[channel] = pf_total / FILTER_NUM;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <calc_filter_add_i+0x2a4>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	edc3 7a00 	vstr	s15, [r3]
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc90      	pop	{r4, r7}
 80019c6:	4770      	bx	lr
 80019c8:	200002b8 	.word	0x200002b8
 80019cc:	20000330 	.word	0x20000330
 80019d0:	200003a8 	.word	0x200003a8
 80019d4:	20000420 	.word	0x20000420
 80019d8:	2000049c 	.word	0x2000049c
 80019dc:	200004a8 	.word	0x200004a8
 80019e0:	200004b4 	.word	0x200004b4
 80019e4:	200004c0 	.word	0x200004c0

080019e8 <calc_assign_meter_values>:


/*
 * @brief   Assign filtered values to meter values
 */
void calc_assign_meter_values(uint8_t channel) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	// assign filtered valued
	if (channel >= NUM_I_SENSORS) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d917      	bls.n	8001a28 <calc_assign_meter_values+0x40>
		metervalue_v = 0.0;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <calc_assign_meter_values+0x8c>)
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
		metervalue_i = 0.0;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <calc_assign_meter_values+0x90>)
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
		metervalue_va = 0.0;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <calc_assign_meter_values+0x94>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
		metervalue_w = 0.0;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <calc_assign_meter_values+0x98>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
		metervalue_pf = 0.0;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <calc_assign_meter_values+0x9c>)
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
		meter_readings_invalid = 1;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <calc_assign_meter_values+0xa0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
		return;
 8001a26:	e01f      	b.n	8001a68 <calc_assign_meter_values+0x80>
	}
	metervalue_v = v_filtered;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <calc_assign_meter_values+0xa4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <calc_assign_meter_values+0x8c>)
 8001a2e:	6013      	str	r3, [r2, #0]
	metervalue_i = i_filtered[channel];
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <calc_assign_meter_values+0xa8>)
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <calc_assign_meter_values+0x90>)
 8001a3c:	6013      	str	r3, [r2, #0]
	metervalue_va = va_filtered[channel];
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <calc_assign_meter_values+0xac>)
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <calc_assign_meter_values+0x94>)
 8001a4a:	6013      	str	r3, [r2, #0]
	metervalue_w = w_filtered[channel];
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <calc_assign_meter_values+0xb0>)
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <calc_assign_meter_values+0x98>)
 8001a58:	6013      	str	r3, [r2, #0]
	metervalue_pf = pf_filtered[channel];
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <calc_assign_meter_values+0xb4>)
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <calc_assign_meter_values+0x9c>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20008238 	.word	0x20008238
 8001a78:	2000823c 	.word	0x2000823c
 8001a7c:	20008240 	.word	0x20008240
 8001a80:	20008244 	.word	0x20008244
 8001a84:	20008248 	.word	0x20008248
 8001a88:	2000028c 	.word	0x2000028c
 8001a8c:	20000498 	.word	0x20000498
 8001a90:	2000049c 	.word	0x2000049c
 8001a94:	200004a8 	.word	0x200004a8
 8001a98:	200004b4 	.word	0x200004b4
 8001a9c:	200004c0 	.word	0x200004c0

08001aa0 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	ed2d 8b02 	vpush	{d8}
 8001aa8:	b0d4      	sub	sp, #336	; 0x150
 8001aaa:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	int64_t i1_sq_acc=0, i2_sq_acc=0, i3_sq_acc=0;		// accumulator for squared I values
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	double i1_va_acc=0, i2_va_acc=0, i3_va_acc=0;		// accumulator for squared VA values
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	double i1_w_acc=0, i2_w_acc=0, i3_w_acc=0;			// accumulating I values where I > 0 (for W calculation)
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero, i2_zero, i3_zero;
	uint16_t i1_pp, i2_pp, i3_pp;			// Current channel P-P
	float w=0, va=0;
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001b3a:	4bb2      	ldr	r3, [pc, #712]	; (8001e04 <calc_measurements+0x364>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da06      	bge.n	8001b50 <calc_measurements+0xb0>
		meter_readings_invalid = 1;
 8001b42:	4bb1      	ldr	r3, [pc, #708]	; (8001e08 <calc_measurements+0x368>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b4c:	f000 bf4b 	b.w	80029e6 <calc_measurements+0xf46>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001b50:	4bac      	ldr	r3, [pc, #688]	; (8001e04 <calc_measurements+0x364>)
 8001b52:	885b      	ldrh	r3, [r3, #2]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4bab      	ldr	r3, [pc, #684]	; (8001e04 <calc_measurements+0x364>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	1ad2      	subs	r2, r2, r3
 8001b5c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dc06      	bgt.n	8001b72 <calc_measurements+0xd2>
		meter_readings_invalid = 1;
 8001b64:	4ba8      	ldr	r3, [pc, #672]	; (8001e08 <calc_measurements+0x368>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b6e:	f000 bf3a 	b.w	80029e6 <calc_measurements+0xf46>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001b72:	4aa5      	ldr	r2, [pc, #660]	; (8001e08 <calc_measurements+0x368>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 8001b78:	4ba2      	ldr	r3, [pc, #648]	; (8001e04 <calc_measurements+0x364>)
 8001b7a:	885a      	ldrh	r2, [r3, #2]
 8001b7c:	4ba1      	ldr	r3, [pc, #644]	; (8001e04 <calc_measurements+0x364>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 8001b86:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b9d      	ldr	r3, [pc, #628]	; (8001e04 <calc_measurements+0x364>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 8001b98:	4b9a      	ldr	r3, [pc, #616]	; (8001e04 <calc_measurements+0x364>)
 8001b9a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001b9c:	4b99      	ldr	r3, [pc, #612]	; (8001e04 <calc_measurements+0x364>)
 8001b9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	i2_pp = sample_buf_meta[ADC_CH_I2].max - sample_buf_meta[ADC_CH_I2].min;
 8001ba6:	4b97      	ldr	r3, [pc, #604]	; (8001e04 <calc_measurements+0x364>)
 8001ba8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8001baa:	4b96      	ldr	r3, [pc, #600]	; (8001e04 <calc_measurements+0x364>)
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	i3_pp = sample_buf_meta[ADC_CH_I3].max - sample_buf_meta[ADC_CH_I3].min;
 8001bb4:	4b93      	ldr	r3, [pc, #588]	; (8001e04 <calc_measurements+0x364>)
 8001bb6:	8ada      	ldrh	r2, [r3, #22]
 8001bb8:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <calc_measurements+0x364>)
 8001bba:	8a9b      	ldrh	r3, [r3, #20]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 8001bc2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001bc6:	085b      	lsrs	r3, r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <calc_measurements+0x364>)
 8001bcc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001bce:	4413      	add	r3, r2
 8001bd0:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
	i2_zero = i2_pp / 2 + sample_buf_meta[ADC_CH_I2].min;
 8001bd4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <calc_measurements+0x364>)
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	4413      	add	r3, r2
 8001be2:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	i3_zero = i3_pp / 2 + sample_buf_meta[ADC_CH_I3].min;
 8001be6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <calc_measurements+0x364>)
 8001bf0:	8a9b      	ldrh	r3, [r3, #20]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <calc_measurements+0x364>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <calc_measurements+0x364>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f280 8163 	bge.w	8001ecc <calc_measurements+0x42c>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c06:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <calc_measurements+0x364>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c0e:	e155      	b.n	8001ebc <calc_measurements+0x41c>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001c10:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <calc_measurements+0x36c>)
 8001c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c1a:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001c26:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001c2a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	17da      	asrs	r2, r3, #31
 8001c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c3c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001c40:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001c44:	4621      	mov	r1, r4
 8001c46:	1851      	adds	r1, r2, r1
 8001c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	414b      	adcs	r3, r1
 8001c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c50:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001c54:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <calc_measurements+0x36c>)
 8001c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c5e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001c62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c66:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001c72:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001c76:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	17da      	asrs	r2, r3, #31
 8001c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c88:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001c8c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001c90:	4621      	mov	r1, r4
 8001c92:	1851      	adds	r1, r2, r1
 8001c94:	6539      	str	r1, [r7, #80]	; 0x50
 8001c96:	4629      	mov	r1, r5
 8001c98:	414b      	adcs	r3, r1
 8001c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c9c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001ca0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001ca4:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <calc_measurements+0x36c>)
 8001ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001caa:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001cae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cb2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001cbe:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001cc2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	17da      	asrs	r2, r3, #31
 8001ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cd0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001cd4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001cd8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001cdc:	4621      	mov	r1, r4
 8001cde:	1851      	adds	r1, r2, r1
 8001ce0:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	414b      	adcs	r3, r1
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001cec:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001cf0:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <calc_measurements+0x36c>)
 8001cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001cf6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001cfa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cfe:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001d0a:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001d0e:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	4698      	mov	r8, r3
 8001d1a:	4691      	mov	r9, r2
 8001d1c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d20:	eb12 0108 	adds.w	r1, r2, r8
 8001d24:	6439      	str	r1, [r7, #64]	; 0x40
 8001d26:	eb43 0309 	adc.w	r3, r3, r9
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d2c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001d30:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 8001d34:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001d3e:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fea4 	bl	8002a90 <calc_adc_raw_to_V>
 8001d48:	eeb0 8a40 	vmov.f32	s16, s0
 8001d4c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 febb 	bl	8002acc <calc_adc_raw_to_A>
 8001d56:	eef0 7a40 	vmov.f32	s15, s0
 8001d5a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fc11 	bl	8000588 <__aeabi_f2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8001d6e:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0a      	blt.n	8001d8c <calc_measurements+0x2ec>
 8001d76:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001d7a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001d7e:	f7fe faa5 	bl	80002cc <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8001d8a:	e014      	b.n	8001db6 <calc_measurements+0x316>
			else { i1_w_acc += abs(va_instant); }
 8001d8c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d90:	f7fe ff02 	bl	8000b98 <__aeabi_d2iz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bfb8      	it	lt
 8001d9a:	425b      	neglt	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbe1 	bl	8000564 <__aeabi_i2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8001daa:	f7fe fa8f 	bl	80002cc <__adddf3>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8001db6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fe68 	bl	8002a90 <calc_adc_raw_to_V>
 8001dc0:	eeb0 8a40 	vmov.f32	s16, s0
 8001dc4:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fe7f 	bl	8002acc <calc_adc_raw_to_A>
 8001dce:	eef0 7a40 	vmov.f32	s15, s0
 8001dd2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dd6:	ee17 0a90 	vmov	r0, s15
 8001dda:	f7fe fbd5 	bl	8000588 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8001de6:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db10      	blt.n	8001e10 <calc_measurements+0x370>
 8001dee:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001df2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001df6:	f7fe fa69 	bl	80002cc <__adddf3>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8001e02:	e01a      	b.n	8001e3a <calc_measurements+0x39a>
 8001e04:	2000023c 	.word	0x2000023c
 8001e08:	2000028c 	.word	0x2000028c
 8001e0c:	20007518 	.word	0x20007518
			else { i2_w_acc += abs(va_instant); }
 8001e10:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e14:	f7fe fec0 	bl	8000b98 <__aeabi_d2iz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bfb8      	it	lt
 8001e1e:	425b      	neglt	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb9f 	bl	8000564 <__aeabi_i2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001e2e:	f7fe fa4d 	bl	80002cc <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 8001e3a:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fe26 	bl	8002a90 <calc_adc_raw_to_V>
 8001e44:	eeb0 8a40 	vmov.f32	s16, s0
 8001e48:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fe3d 	bl	8002acc <calc_adc_raw_to_A>
 8001e52:	eef0 7a40 	vmov.f32	s15, s0
 8001e56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e5a:	ee17 0a90 	vmov	r0, s15
 8001e5e:	f7fe fb93 	bl	8000588 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8001e6a:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0a      	blt.n	8001e88 <calc_measurements+0x3e8>
 8001e72:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001e76:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001e7a:	f7fe fa27 	bl	80002cc <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8001e86:	e014      	b.n	8001eb2 <calc_measurements+0x412>
			else { i3_w_acc += abs(va_instant); }
 8001e88:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e8c:	f7fe fe84 	bl	8000b98 <__aeabi_d2iz>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bfb8      	it	lt
 8001e96:	425b      	neglt	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb63 	bl	8000564 <__aeabi_i2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001ea6:	f7fe fa11 	bl	80002cc <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ebc:	4bb0      	ldr	r3, [pc, #704]	; (8002180 <calc_measurements+0x6e0>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	f6ff aea3 	blt.w	8001c10 <calc_measurements+0x170>
 8001eca:	e2ba      	b.n	8002442 <calc_measurements+0x9a2>
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001ecc:	4bac      	ldr	r3, [pc, #688]	; (8002180 <calc_measurements+0x6e0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001ed4:	e149      	b.n	800216a <calc_measurements+0x6ca>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001ed6:	4aab      	ldr	r2, [pc, #684]	; (8002184 <calc_measurements+0x6e4>)
 8001ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001edc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ee0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 8001eec:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 8001ef0:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	17da      	asrs	r2, r3, #31
 8001efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001efe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f02:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001f06:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	1851      	adds	r1, r2, r1
 8001f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f10:	4649      	mov	r1, r9
 8001f12:	414b      	adcs	r3, r1
 8001f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f1a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001f1e:	4a99      	ldr	r2, [pc, #612]	; (8002184 <calc_measurements+0x6e4>)
 8001f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f24:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001f28:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f2c:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 8001f38:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 8001f3c:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	17da      	asrs	r2, r3, #31
 8001f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f4e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001f52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f56:	4641      	mov	r1, r8
 8001f58:	1851      	adds	r1, r2, r1
 8001f5a:	6339      	str	r1, [r7, #48]	; 0x30
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	414b      	adcs	r3, r1
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
 8001f62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f66:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 8001f6a:	4a86      	ldr	r2, [pc, #536]	; (8002184 <calc_measurements+0x6e4>)
 8001f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f70:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001f74:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f78:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8001f84:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 8001f88:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	17da      	asrs	r2, r3, #31
 8001f92:	469a      	mov	sl, r3
 8001f94:	4693      	mov	fp, r2
 8001f96:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f9a:	eb12 010a 	adds.w	r1, r2, sl
 8001f9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fa0:	eb43 030b 	adc.w	r3, r3, fp
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001faa:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8001fae:	4a75      	ldr	r2, [pc, #468]	; (8002184 <calc_measurements+0x6e4>)
 8001fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fb4:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001fb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fbc:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8001fc8:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8001fcc:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	17da      	asrs	r2, r3, #31
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	4615      	mov	r5, r2
 8001fda:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001fde:	1911      	adds	r1, r2, r4
 8001fe0:	6239      	str	r1, [r7, #32]
 8001fe2:	416b      	adcs	r3, r5
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fea:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
			num_readings++;
 8001fee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 8001ff8:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fd47 	bl	8002a90 <calc_adc_raw_to_V>
 8002002:	eeb0 8a40 	vmov.f32	s16, s0
 8002006:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fd5e 	bl	8002acc <calc_adc_raw_to_A>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002018:	ee17 0a90 	vmov	r0, s15
 800201c:	f7fe fab4 	bl	8000588 <__aeabi_f2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 8002028:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <calc_measurements+0x5a6>
 8002030:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002034:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002038:	f7fe f948 	bl	80002cc <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 8002044:	e014      	b.n	8002070 <calc_measurements+0x5d0>
			else { i1_w_acc += abs(va_instant); }
 8002046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800204a:	f7fe fda5 	bl	8000b98 <__aeabi_d2iz>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	bfb8      	it	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa84 	bl	8000564 <__aeabi_i2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002064:	f7fe f932 	bl	80002cc <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8002070:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fd0b 	bl	8002a90 <calc_adc_raw_to_V>
 800207a:	eeb0 8a40 	vmov.f32	s16, s0
 800207e:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fd22 	bl	8002acc <calc_adc_raw_to_A>
 8002088:	eef0 7a40 	vmov.f32	s15, s0
 800208c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f7fe fa78 	bl	8000588 <__aeabi_f2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 80020a0:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <calc_measurements+0x61e>
 80020a8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80020ac:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80020b0:	f7fe f90c 	bl	80002cc <__adddf3>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 80020bc:	e014      	b.n	80020e8 <calc_measurements+0x648>
			else { i2_w_acc += abs(va_instant); }
 80020be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80020c2:	f7fe fd69 	bl	8000b98 <__aeabi_d2iz>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bfb8      	it	lt
 80020cc:	425b      	neglt	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa48 	bl	8000564 <__aeabi_i2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80020dc:	f7fe f8f6 	bl	80002cc <__adddf3>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 80020e8:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fccf 	bl	8002a90 <calc_adc_raw_to_V>
 80020f2:	eeb0 8a40 	vmov.f32	s16, s0
 80020f6:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fce6 	bl	8002acc <calc_adc_raw_to_A>
 8002100:	eef0 7a40 	vmov.f32	s15, s0
 8002104:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002108:	ee17 0a90 	vmov	r0, s15
 800210c:	f7fe fa3c 	bl	8000588 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 8002118:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <calc_measurements+0x696>
 8002120:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002124:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002128:	f7fe f8d0 	bl	80002cc <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 8002134:	e014      	b.n	8002160 <calc_measurements+0x6c0>
			else { i3_w_acc += abs(va_instant); }
 8002136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800213a:	f7fe fd2d 	bl	8000b98 <__aeabi_d2iz>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	bfb8      	it	lt
 8002144:	425b      	neglt	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa0c 	bl	8000564 <__aeabi_i2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002154:	f7fe f8ba 	bl	80002cc <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002160:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002164:	3301      	adds	r3, #1
 8002166:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800216a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800216e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002172:	f4ff aeb0 	bcc.w	8001ed6 <calc_measurements+0x436>
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8002176:	2314      	movs	r3, #20
 8002178:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800217c:	e15a      	b.n	8002434 <calc_measurements+0x994>
 800217e:	bf00      	nop
 8002180:	2000023c 	.word	0x2000023c
 8002184:	20007518 	.word	0x20007518
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8002188:	4a9c      	ldr	r2, [pc, #624]	; (80023fc <calc_measurements+0x95c>)
 800218a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800218e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002192:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	b29b      	uxth	r3, r3
 800219a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
			v_sq_acc += v_reading * v_reading;
 800219e:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	; 0xda
 80021a2:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	17da      	asrs	r2, r3, #31
 80021ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021b0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80021b4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80021b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80021bc:	4621      	mov	r1, r4
 80021be:	1851      	adds	r1, r2, r1
 80021c0:	61b9      	str	r1, [r7, #24]
 80021c2:	4629      	mov	r1, r5
 80021c4:	414b      	adcs	r3, r1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80021cc:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			i1_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 80021d0:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <calc_measurements+0x95c>)
 80021d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021d6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80021da:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80021de:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
			i1_sq_acc += i1_reading * i1_reading;
 80021ea:	f9b7 20d8 	ldrsh.w	r2, [r7, #216]	; 0xd8
 80021ee:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	17da      	asrs	r2, r3, #31
 80021f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021fc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002200:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002204:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002208:	4621      	mov	r1, r4
 800220a:	1851      	adds	r1, r2, r1
 800220c:	6139      	str	r1, [r7, #16]
 800220e:	4629      	mov	r1, r5
 8002210:	414b      	adcs	r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002218:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			i2_reading = sample_buf[ADC_CH_I2][i] - i2_zero;
 800221c:	4a77      	ldr	r2, [pc, #476]	; (80023fc <calc_measurements+0x95c>)
 800221e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002222:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8002226:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800222a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	b29b      	uxth	r3, r3
 8002232:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
			i2_sq_acc += i2_reading * i2_reading;
 8002236:	f9b7 20d6 	ldrsh.w	r2, [r7, #214]	; 0xd6
 800223a:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	17da      	asrs	r2, r3, #31
 8002244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800224c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002250:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002254:	4621      	mov	r1, r4
 8002256:	1851      	adds	r1, r2, r1
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	4629      	mov	r1, r5
 800225c:	414b      	adcs	r3, r1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002264:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			i3_reading = sample_buf[ADC_CH_I3][i] - i3_zero;
 8002268:	4a64      	ldr	r2, [pc, #400]	; (80023fc <calc_measurements+0x95c>)
 800226a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800226e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002272:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002276:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	b29b      	uxth	r3, r3
 800227e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
			i3_sq_acc += i3_reading * i3_reading;
 8002282:	f9b7 20d4 	ldrsh.w	r2, [r7, #212]	; 0xd4
 8002286:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	17da      	asrs	r2, r3, #31
 8002290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002294:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002298:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800229c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80022a0:	4621      	mov	r1, r4
 80022a2:	1851      	adds	r1, r2, r1
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	4629      	mov	r1, r5
 80022a8:	414b      	adcs	r3, r1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022b0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			num_readings++;
 80022b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i1_reading);
 80022be:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fbe4 	bl	8002a90 <calc_adc_raw_to_V>
 80022c8:	eeb0 8a40 	vmov.f32	s16, s0
 80022cc:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fbfb 	bl	8002acc <calc_adc_raw_to_A>
 80022d6:	eef0 7a40 	vmov.f32	s15, s0
 80022da:	ee68 7a27 	vmul.f32	s15, s16, s15
 80022de:	ee17 0a90 	vmov	r0, s15
 80022e2:	f7fe f951 	bl	8000588 <__aeabi_f2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i1_reading >= 0) { i1_va_acc += va_instant; }
 80022ee:	f9b7 30d8 	ldrsh.w	r3, [r7, #216]	; 0xd8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0a      	blt.n	800230c <calc_measurements+0x86c>
 80022f6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80022fa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80022fe:	f7fd ffe5 	bl	80002cc <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
 800230a:	e014      	b.n	8002336 <calc_measurements+0x896>
			else { i1_w_acc += abs(va_instant); }
 800230c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002310:	f7fe fc42 	bl	8000b98 <__aeabi_d2iz>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	bfb8      	it	lt
 800231a:	425b      	neglt	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f921 	bl	8000564 <__aeabi_i2d>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800232a:	f7fd ffcf 	bl	80002cc <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i2_reading);
 8002336:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fba8 	bl	8002a90 <calc_adc_raw_to_V>
 8002340:	eeb0 8a40 	vmov.f32	s16, s0
 8002344:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fbbf 	bl	8002acc <calc_adc_raw_to_A>
 800234e:	eef0 7a40 	vmov.f32	s15, s0
 8002352:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002356:	ee17 0a90 	vmov	r0, s15
 800235a:	f7fe f915 	bl	8000588 <__aeabi_f2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i2_reading >= 0) { i2_va_acc += va_instant;}
 8002366:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0a      	blt.n	8002384 <calc_measurements+0x8e4>
 800236e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002372:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002376:	f7fd ffa9 	bl	80002cc <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8002382:	e014      	b.n	80023ae <calc_measurements+0x90e>
			else { i2_w_acc += abs(va_instant); }
 8002384:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002388:	f7fe fc06 	bl	8000b98 <__aeabi_d2iz>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	bfb8      	it	lt
 8002392:	425b      	neglt	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8e5 	bl	8000564 <__aeabi_i2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80023a2:	f7fd ff93 	bl	80002cc <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i3_reading);
 80023ae:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	; 0xda
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb6c 	bl	8002a90 <calc_adc_raw_to_V>
 80023b8:	eeb0 8a40 	vmov.f32	s16, s0
 80023bc:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fb83 	bl	8002acc <calc_adc_raw_to_A>
 80023c6:	eef0 7a40 	vmov.f32	s15, s0
 80023ca:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f8d9 	bl	8000588 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (i3_reading >= 0) { i3_va_acc += va_instant;}
 80023de:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0c      	blt.n	8002400 <calc_measurements+0x960>
 80023e6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80023ea:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80023ee:	f7fd ff6d 	bl	80002cc <__adddf3>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
 80023fa:	e016      	b.n	800242a <calc_measurements+0x98a>
 80023fc:	20007518 	.word	0x20007518
			else { i3_w_acc += abs(va_instant); }
 8002400:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002404:	f7fe fbc8 	bl	8000b98 <__aeabi_d2iz>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bfb8      	it	lt
 800240e:	425b      	neglt	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f8a7 	bl	8000564 <__aeabi_i2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800241e:	f7fd ff55 	bl	80002cc <__adddf3>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 800242a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800242e:	3301      	adds	r3, #1
 8002430:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002434:	4bc7      	ldr	r3, [pc, #796]	; (8002754 <calc_measurements+0xcb4>)
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800243c:	4293      	cmp	r3, r2
 800243e:	f6ff aea3 	blt.w	8002188 <calc_measurements+0x6e8>
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8002442:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002446:	2200      	movs	r2, #0
 8002448:	67bb      	str	r3, [r7, #120]	; 0x78
 800244a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800244c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002450:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002454:	f7fe fc18 	bl	8000c88 <__aeabi_ldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7fe f8bc 	bl	80005dc <__aeabi_l2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	ec43 2b10 	vmov	d0, r2, r3
 800246c:	f00e fedc 	bl	8011228 <sqrt>
 8002470:	ec53 2b10 	vmov	r2, r3, d0
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb8e 	bl	8000b98 <__aeabi_d2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	b21b      	sxth	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fb05 	bl	8002a90 <calc_adc_raw_to_V>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	4bb3      	ldr	r3, [pc, #716]	; (8002758 <calc_measurements+0xcb8>)
 800248c:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8002490:	4bb0      	ldr	r3, [pc, #704]	; (8002754 <calc_measurements+0xcb4>)
 8002492:	2201      	movs	r2, #1
 8002494:	731a      	strb	r2, [r3, #12]
	pf_measured[I1] = pf_measured[I2] = pf_measured[I3] = 1.0;		// assumed PF
 8002496:	4bb1      	ldr	r3, [pc, #708]	; (800275c <calc_measurements+0xcbc>)
 8002498:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	4baf      	ldr	r3, [pc, #700]	; (800275c <calc_measurements+0xcbc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4aae      	ldr	r2, [pc, #696]	; (800275c <calc_measurements+0xcbc>)
 80024a4:	6053      	str	r3, [r2, #4]
 80024a6:	4bad      	ldr	r3, [pc, #692]	; (800275c <calc_measurements+0xcbc>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4aac      	ldr	r2, [pc, #688]	; (800275c <calc_measurements+0xcbc>)
 80024ac:	6013      	str	r3, [r2, #0]

	// Process I1 values
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 80024ae:	4ba9      	ldr	r3, [pc, #676]	; (8002754 <calc_measurements+0xcb4>)
 80024b0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <calc_measurements+0xa32>
		i_measured[I1] = 0.0; va_measured[I1] = 0.0;w_measured[I1] = 0.0;
 80024b8:	4ba9      	ldr	r3, [pc, #676]	; (8002760 <calc_measurements+0xcc0>)
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	4ba8      	ldr	r3, [pc, #672]	; (8002764 <calc_measurements+0xcc4>)
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4ba7      	ldr	r3, [pc, #668]	; (8002768 <calc_measurements+0xcc8>)
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e0ac      	b.n	800262c <calc_measurements+0xb8c>
	} else {
		i_measured[I1] = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 80024d2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80024d6:	2200      	movs	r2, #0
 80024d8:	673b      	str	r3, [r7, #112]	; 0x70
 80024da:	677a      	str	r2, [r7, #116]	; 0x74
 80024dc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024e0:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80024e4:	f7fe fbd0 	bl	8000c88 <__aeabi_ldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe f874 	bl	80005dc <__aeabi_l2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	ec43 2b10 	vmov	d0, r2, r3
 80024fc:	f00e fe94 	bl	8011228 <sqrt>
 8002500:	ec53 2b10 	vmov	r2, r3, d0
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb46 	bl	8000b98 <__aeabi_d2iz>
 800250c:	4603      	mov	r3, r0
 800250e:	b21b      	sxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fadb 	bl	8002acc <calc_adc_raw_to_A>
 8002516:	eef0 7a40 	vmov.f32	s15, s0
 800251a:	4b91      	ldr	r3, [pc, #580]	; (8002760 <calc_measurements+0xcc0>)
 800251c:	edc3 7a00 	vstr	s15, [r3]
		if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800252c:	f7fe fb14 	bl	8000b58 <__aeabi_dcmpgt>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <calc_measurements+0xabe>
 8002536:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f812 	bl	8000564 <__aeabi_i2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002548:	f7fe f9a0 	bl	800088c <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_d2f>
 8002558:	4603      	mov	r3, r0
 800255a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 800256a:	f7fe faf5 	bl	8000b58 <__aeabi_dcmpgt>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <calc_measurements+0xafc>
 8002574:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd fff3 	bl	8000564 <__aeabi_i2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8002586:	f7fe f981 	bl	800088c <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fb29 	bl	8000be8 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
 8002598:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		va_measured[I1] = v_measured * i_measured[I1];
 800259c:	4b70      	ldr	r3, [pc, #448]	; (8002760 <calc_measurements+0xcc0>)
 800259e:	ed93 7a00 	vldr	s14, [r3]
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <calc_measurements+0xcb8>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <calc_measurements+0xcc4>)
 80025ae:	edc3 7a00 	vstr	s15, [r3]
		if (w > 0) {w_measured[I1] = va - w;}
 80025b2:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80025b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd09      	ble.n	80025d4 <calc_measurements+0xb34>
 80025c0:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80025c4:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	4b66      	ldr	r3, [pc, #408]	; (8002768 <calc_measurements+0xcc8>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]
 80025d2:	e003      	b.n	80025dc <calc_measurements+0xb3c>
		else {w_measured[I1] = va_measured[I1];}
 80025d4:	4b63      	ldr	r3, [pc, #396]	; (8002764 <calc_measurements+0xcc4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a63      	ldr	r2, [pc, #396]	; (8002768 <calc_measurements+0xcc8>)
 80025da:	6013      	str	r3, [r2, #0]
		if (w_measured[I1] > va_measured[I1]) w_measured[I1] = va_measured[I1];		// W must be =< than VA
 80025dc:	4b62      	ldr	r3, [pc, #392]	; (8002768 <calc_measurements+0xcc8>)
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	4b60      	ldr	r3, [pc, #384]	; (8002764 <calc_measurements+0xcc4>)
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	dd03      	ble.n	80025fa <calc_measurements+0xb5a>
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <calc_measurements+0xcc4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <calc_measurements+0xcc8>)
 80025f8:	6013      	str	r3, [r2, #0]
		if (i_measured[I1] >= I1_MIN_PF) {pf_measured[I1] = w_measured[I1] / va_measured[I1]; }		// Calculate PF if we have sufficient current
 80025fa:	4b59      	ldr	r3, [pc, #356]	; (8002760 <calc_measurements+0xcc0>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	db0a      	blt.n	8002624 <calc_measurements+0xb84>
 800260e:	4b56      	ldr	r3, [pc, #344]	; (8002768 <calc_measurements+0xcc8>)
 8002610:	edd3 6a00 	vldr	s13, [r3]
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <calc_measurements+0xcc4>)
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261e:	4b4f      	ldr	r3, [pc, #316]	; (800275c <calc_measurements+0xcbc>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
		sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <calc_measurements+0xcb4>)
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	// Process I2 values
	if (sample_buf_meta[ADC_CH_I2].value_is_zero) {	// set all measured values to zero
 800262c:	4b49      	ldr	r3, [pc, #292]	; (8002754 <calc_measurements+0xcb4>)
 800262e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <calc_measurements+0xbb0>
		i_measured[I2] = 0.0;va_measured[I2] = 0.0;w_measured[I2] = 0.0;
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <calc_measurements+0xcc0>)
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <calc_measurements+0xcc4>)
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	4b48      	ldr	r3, [pc, #288]	; (8002768 <calc_measurements+0xcc8>)
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e0b9      	b.n	80027c4 <calc_measurements+0xd24>
	} else {
		i_measured[I2] = calc_adc_raw_to_A (sqrt((i2_sq_acc / num_readings)));	// RMS current
 8002650:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002654:	2200      	movs	r2, #0
 8002656:	66bb      	str	r3, [r7, #104]	; 0x68
 8002658:	66fa      	str	r2, [r7, #108]	; 0x6c
 800265a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800265e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8002662:	f7fe fb11 	bl	8000c88 <__aeabi_ldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fd ffb5 	bl	80005dc <__aeabi_l2d>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	ec43 2b10 	vmov	d0, r2, r3
 800267a:	f00e fdd5 	bl	8011228 <sqrt>
 800267e:	ec53 2b10 	vmov	r2, r3, d0
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fa87 	bl	8000b98 <__aeabi_d2iz>
 800268a:	4603      	mov	r3, r0
 800268c:	b21b      	sxth	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa1c 	bl	8002acc <calc_adc_raw_to_A>
 8002694:	eef0 7a40 	vmov.f32	s15, s0
 8002698:	4b31      	ldr	r3, [pc, #196]	; (8002760 <calc_measurements+0xcc0>)
 800269a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (i2_va_acc > 0) { va = i2_va_acc / num_readings; }
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80026aa:	f7fe fa55 	bl	8000b58 <__aeabi_dcmpgt>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <calc_measurements+0xc3c>
 80026b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff53 	bl	8000564 <__aeabi_i2d>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80026c6:	f7fe f8e1 	bl	800088c <__aeabi_ddiv>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fa89 	bl	8000be8 <__aeabi_d2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if (i2_w_acc > 0) { w = i2_w_acc / num_readings; }
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80026e8:	f7fe fa36 	bl	8000b58 <__aeabi_dcmpgt>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d013      	beq.n	800271a <calc_measurements+0xc7a>
 80026f2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff34 	bl	8000564 <__aeabi_i2d>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002704:	f7fe f8c2 	bl	800088c <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe fa6a 	bl	8000be8 <__aeabi_d2f>
 8002714:	4603      	mov	r3, r0
 8002716:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		va_measured[I2] = v_measured * i_measured[I2];
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <calc_measurements+0xcc0>)
 800271c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <calc_measurements+0xcb8>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <calc_measurements+0xcc4>)
 800272c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (w > 0) {w_measured[I2] = va - w;}
 8002730:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	dd16      	ble.n	800276c <calc_measurements+0xccc>
 800273e:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8002742:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <calc_measurements+0xcc8>)
 800274c:	edc3 7a01 	vstr	s15, [r3, #4]
 8002750:	e010      	b.n	8002774 <calc_measurements+0xcd4>
 8002752:	bf00      	nop
 8002754:	2000023c 	.word	0x2000023c
 8002758:	200004cc 	.word	0x200004cc
 800275c:	200004f4 	.word	0x200004f4
 8002760:	200004d0 	.word	0x200004d0
 8002764:	200004dc 	.word	0x200004dc
 8002768:	200004e8 	.word	0x200004e8
		else {w_measured[I2] = va_measured[I2];}
 800276c:	4ba2      	ldr	r3, [pc, #648]	; (80029f8 <calc_measurements+0xf58>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4aa2      	ldr	r2, [pc, #648]	; (80029fc <calc_measurements+0xf5c>)
 8002772:	6053      	str	r3, [r2, #4]
		if (w_measured[I2] > va_measured[I2]) w_measured[I2] = va_measured[I2];		// W must be =< than VA
 8002774:	4ba1      	ldr	r3, [pc, #644]	; (80029fc <calc_measurements+0xf5c>)
 8002776:	ed93 7a01 	vldr	s14, [r3, #4]
 800277a:	4b9f      	ldr	r3, [pc, #636]	; (80029f8 <calc_measurements+0xf58>)
 800277c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	dd03      	ble.n	8002792 <calc_measurements+0xcf2>
 800278a:	4b9b      	ldr	r3, [pc, #620]	; (80029f8 <calc_measurements+0xf58>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a9b      	ldr	r2, [pc, #620]	; (80029fc <calc_measurements+0xf5c>)
 8002790:	6053      	str	r3, [r2, #4]
		if (i_measured[I2] >= I2_MIN_PF) {pf_measured[I2] = w_measured[I2] / va_measured[I2];}	// Calculate PF if we have sufficient current
 8002792:	4b9b      	ldr	r3, [pc, #620]	; (8002a00 <calc_measurements+0xf60>)
 8002794:	edd3 7a01 	vldr	s15, [r3, #4]
 8002798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800279c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	db0a      	blt.n	80027bc <calc_measurements+0xd1c>
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <calc_measurements+0xf5c>)
 80027a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80027ac:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <calc_measurements+0xf58>)
 80027ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <calc_measurements+0xf64>)
 80027b8:	edc3 7a01 	vstr	s15, [r3, #4]
		sample_buf_meta[ADC_CH_I2].measurements_valid = 1;
 80027bc:	4b92      	ldr	r3, [pc, #584]	; (8002a08 <calc_measurements+0xf68>)
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	// Process I3 values
	if (sample_buf_meta[ADC_CH_I3].value_is_zero) {	// set all measured values to zero
 80027c4:	4b90      	ldr	r3, [pc, #576]	; (8002a08 <calc_measurements+0xf68>)
 80027c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <calc_measurements+0xd48>
		i_measured[I3] = 0.0; va_measured[I3] = 0.0;w_measured[I3] = 0.0;
 80027ce:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <calc_measurements+0xf60>)
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <calc_measurements+0xf58>)
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	4b87      	ldr	r3, [pc, #540]	; (80029fc <calc_measurements+0xf5c>)
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	e0ac      	b.n	8002942 <calc_measurements+0xea2>
	} else {
		i_measured[I3] = calc_adc_raw_to_A (sqrt((i3_sq_acc / num_readings)));	// RMS current
 80027e8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80027ec:	2200      	movs	r2, #0
 80027ee:	663b      	str	r3, [r7, #96]	; 0x60
 80027f0:	667a      	str	r2, [r7, #100]	; 0x64
 80027f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80027f6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027fa:	f7fe fa45 	bl	8000c88 <__aeabi_ldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fd fee9 	bl	80005dc <__aeabi_l2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	ec43 2b10 	vmov	d0, r2, r3
 8002812:	f00e fd09 	bl	8011228 <sqrt>
 8002816:	ec53 2b10 	vmov	r2, r3, d0
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f9bb 	bl	8000b98 <__aeabi_d2iz>
 8002822:	4603      	mov	r3, r0
 8002824:	b21b      	sxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f950 	bl	8002acc <calc_adc_raw_to_A>
 800282c:	eef0 7a40 	vmov.f32	s15, s0
 8002830:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <calc_measurements+0xf60>)
 8002832:	edc3 7a02 	vstr	s15, [r3, #8]
		if (i3_va_acc > 0) { va = i3_va_acc / num_readings; }
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002842:	f7fe f989 	bl	8000b58 <__aeabi_dcmpgt>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <calc_measurements+0xdd4>
 800284c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fe87 	bl	8000564 <__aeabi_i2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800285e:	f7fe f815 	bl	800088c <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe f9bd 	bl	8000be8 <__aeabi_d2f>
 800286e:	4603      	mov	r3, r0
 8002870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if (i3_w_acc > 0) { w = i3_w_acc / num_readings; }
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002880:	f7fe f96a 	bl	8000b58 <__aeabi_dcmpgt>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d013      	beq.n	80028b2 <calc_measurements+0xe12>
 800288a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe68 	bl	8000564 <__aeabi_i2d>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800289c:	f7fd fff6 	bl	800088c <__aeabi_ddiv>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f99e 	bl	8000be8 <__aeabi_d2f>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		va_measured[I3] = v_measured * i_measured[I3];
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <calc_measurements+0xf60>)
 80028b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028b8:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <calc_measurements+0xf6c>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <calc_measurements+0xf58>)
 80028c4:	edc3 7a02 	vstr	s15, [r3, #8]
		if (w > 0) { w_measured[I3] = va - w; }
 80028c8:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd09      	ble.n	80028ea <calc_measurements+0xe4a>
 80028d6:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80028da:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	4b46      	ldr	r3, [pc, #280]	; (80029fc <calc_measurements+0xf5c>)
 80028e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80028e8:	e003      	b.n	80028f2 <calc_measurements+0xe52>
		else { w_measured[I3] = va_measured[I3]; }
 80028ea:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <calc_measurements+0xf58>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a43      	ldr	r2, [pc, #268]	; (80029fc <calc_measurements+0xf5c>)
 80028f0:	6093      	str	r3, [r2, #8]
		if (w_measured[I3] > va_measured[I3]) w_measured[I3] = va_measured[I3];		// W must be =< than VA
 80028f2:	4b42      	ldr	r3, [pc, #264]	; (80029fc <calc_measurements+0xf5c>)
 80028f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80028f8:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <calc_measurements+0xf58>)
 80028fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	dd03      	ble.n	8002910 <calc_measurements+0xe70>
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <calc_measurements+0xf58>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <calc_measurements+0xf5c>)
 800290e:	6093      	str	r3, [r2, #8]
		if (i_measured[I3] >= I3_MIN_PF) { pf_measured[I3] = w_measured[I3] / va_measured[I3]; }	// Calculate PF if we have sufficient current
 8002910:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <calc_measurements+0xf60>)
 8002912:	edd3 7a02 	vldr	s15, [r3, #8]
 8002916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800291a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	db0a      	blt.n	800293a <calc_measurements+0xe9a>
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <calc_measurements+0xf5c>)
 8002926:	edd3 6a02 	vldr	s13, [r3, #8]
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <calc_measurements+0xf58>)
 800292c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <calc_measurements+0xf64>)
 8002936:	edc3 7a02 	vstr	s15, [r3, #8]
		sample_buf_meta[ADC_CH_I3].measurements_valid = 1;
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <calc_measurements+0xf68>)
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2020 	strb.w	r2, [r3, #32]
	}

	// add measurements to filter
	calc_filter_add_v(v_measured);
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <calc_measurements+0xf6c>)
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	eeb0 0a67 	vmov.f32	s0, s15
 800294c:	f7fe feb2 	bl	80016b4 <calc_filter_add_v>
	calc_filter_add_i(I1, i_measured[I1], va_measured[I1], w_measured[I1], pf_measured[I1]);
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <calc_measurements+0xf60>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <calc_measurements+0xf58>)
 8002958:	ed93 7a00 	vldr	s14, [r3]
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <calc_measurements+0xf5c>)
 800295e:	edd3 6a00 	vldr	s13, [r3]
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <calc_measurements+0xf64>)
 8002964:	ed93 6a00 	vldr	s12, [r3]
 8002968:	eef0 1a46 	vmov.f32	s3, s12
 800296c:	eeb0 1a66 	vmov.f32	s2, s13
 8002970:	eef0 0a47 	vmov.f32	s1, s14
 8002974:	eeb0 0a67 	vmov.f32	s0, s15
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe fee1 	bl	8001740 <calc_filter_add_i>
	calc_filter_add_i(I2, i_measured[I2], va_measured[I2], w_measured[I2], pf_measured[I2]);
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <calc_measurements+0xf60>)
 8002980:	edd3 7a01 	vldr	s15, [r3, #4]
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <calc_measurements+0xf58>)
 8002986:	ed93 7a01 	vldr	s14, [r3, #4]
 800298a:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <calc_measurements+0xf5c>)
 800298c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <calc_measurements+0xf64>)
 8002992:	ed93 6a01 	vldr	s12, [r3, #4]
 8002996:	eef0 1a46 	vmov.f32	s3, s12
 800299a:	eeb0 1a66 	vmov.f32	s2, s13
 800299e:	eef0 0a47 	vmov.f32	s1, s14
 80029a2:	eeb0 0a67 	vmov.f32	s0, s15
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7fe feca 	bl	8001740 <calc_filter_add_i>
	calc_filter_add_i(I3, i_measured[I3], va_measured[I3], w_measured[I3], pf_measured[I3]);
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <calc_measurements+0xf60>)
 80029ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <calc_measurements+0xf58>)
 80029b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <calc_measurements+0xf5c>)
 80029ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <calc_measurements+0xf64>)
 80029c0:	ed93 6a02 	vldr	s12, [r3, #8]
 80029c4:	eef0 1a46 	vmov.f32	s3, s12
 80029c8:	eeb0 1a66 	vmov.f32	s2, s13
 80029cc:	eef0 0a47 	vmov.f32	s1, s14
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	2002      	movs	r0, #2
 80029d6:	f7fe feb3 	bl	8001740 <calc_filter_add_i>
	calc_assign_meter_values(display_channel);
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <calc_measurements+0xf70>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f802 	bl	80019e8 <calc_assign_meter_values>

	return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80029ec:	46bd      	mov	sp, r7
 80029ee:	ecbd 8b02 	vpop	{d8}
 80029f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f6:	bf00      	nop
 80029f8:	200004dc 	.word	0x200004dc
 80029fc:	200004e8 	.word	0x200004e8
 8002a00:	200004d0 	.word	0x200004d0
 8002a04:	200004f4 	.word	0x200004f4
 8002a08:	2000023c 	.word	0x2000023c
 8002a0c:	200004cc 	.word	0x200004cc
 8002a10:	20000501 	.word	0x20000501

08002a14 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f816 	bl	8002a54 <calc_adc_raw_to_mv_float>
 8002a28:	ee10 3a10 	vmov	r3, s0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fdab 	bl	8000588 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	ec43 2b10 	vmov	d0, r2, r3
 8002a3a:	f00e fd05 	bl	8011448 <round>
 8002a3e:	ec53 2b10 	vmov	r2, r3, d0
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f7fe f8a7 	bl	8000b98 <__aeabi_d2iz>
 8002a4a:	4603      	mov	r3, r0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a6a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002a88 <calc_adc_raw_to_mv_float+0x34>
 8002a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a72:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a8c <calc_adc_raw_to_mv_float+0x38>
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	457ff000 	.word	0x457ff000
 8002a8c:	454e4000 	.word	0x454e4000

08002a90 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8002a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002ac4 <calc_adc_raw_to_V+0x34>
 8002aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002ac8 <calc_adc_raw_to_V+0x38>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	457ff000 	.word	0x457ff000
 8002ac8:	44434000 	.word	0x44434000

08002acc <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8002ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ae2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b00 <calc_adc_raw_to_A+0x34>
 8002ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b04 <calc_adc_raw_to_A+0x38>
 8002aee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	457ff000 	.word	0x457ff000
 8002b04:	43620000 	.word	0x43620000

08002b08 <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <cmd_error+0x18>)
 8002b14:	f002 fe52 	bl	80057bc <term_print>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	08011578 	.word	0x08011578

08002b24 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b74      	cmp	r3, #116	; 0x74
 8002b34:	d014      	beq.n	8002b60 <cmd_t+0x3c>
 8002b36:	2b74      	cmp	r3, #116	; 0x74
 8002b38:	dc17      	bgt.n	8002b6a <cmd_t+0x46>
 8002b3a:	2b54      	cmp	r3, #84	; 0x54
 8002b3c:	d010      	beq.n	8002b60 <cmd_t+0x3c>
 8002b3e:	2b54      	cmp	r3, #84	; 0x54
 8002b40:	dc13      	bgt.n	8002b6a <cmd_t+0x46>
 8002b42:	2b30      	cmp	r3, #48	; 0x30
 8002b44:	d002      	beq.n	8002b4c <cmd_t+0x28>
 8002b46:	2b31      	cmp	r3, #49	; 0x31
 8002b48:	d005      	beq.n	8002b56 <cmd_t+0x32>
 8002b4a:	e00e      	b.n	8002b6a <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <cmd_t+0x58>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e00b      	b.n	8002b6e <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <cmd_t+0x58>)
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e006      	b.n	8002b6e <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <cmd_t+0x58>)
 8002b62:	2209      	movs	r2, #9
 8002b64:	701a      	strb	r2, [r3, #0]
		return 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e001      	b.n	8002b6e <cmd_t+0x4a>
	}
	return -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20002640 	.word	0x20002640

08002b80 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f107 0208 	add.w	r2, r7, #8
 8002b90:	4909      	ldr	r1, [pc, #36]	; (8002bb8 <cmd_p+0x38>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f00b fa60 	bl	800e058 <siscanf>
 8002b98:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d002      	beq.n	8002ba6 <cmd_p+0x26>
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba4:	e004      	b.n	8002bb0 <cmd_p+0x30>
	new_time_period = value;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <cmd_p+0x3c>)
 8002bac:	801a      	strh	r2, [r3, #0]
	return 0;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	08011590 	.word	0x08011590
 8002bbc:	20002642 	.word	0x20002642

08002bc0 <cmd_led>:

int cmd_led(int cmd) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	dd05      	ble.n	8002bda <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <cmd_led+0x30>)
 8002bd4:	f006 fb82 	bl	80092dc <HAL_GPIO_WritePin>
 8002bd8:	e004      	b.n	8002be4 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2120      	movs	r1, #32
 8002bde:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <cmd_led+0x30>)
 8002be0:	f006 fb7c 	bl	80092dc <HAL_GPIO_WritePin>
	}
	return(0);
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <cmd_help>:


int cmd_help(void) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002bf8:	4810      	ldr	r0, [pc, #64]	; (8002c3c <cmd_help+0x48>)
 8002bfa:	f002 fddf 	bl	80057bc <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8002bfe:	4810      	ldr	r0, [pc, #64]	; (8002c40 <cmd_help+0x4c>)
 8002c00:	f002 fddc 	bl	80057bc <term_print>
	term_print("E: Toggle ESP mode\r\n");
 8002c04:	480f      	ldr	r0, [pc, #60]	; (8002c44 <cmd_help+0x50>)
 8002c06:	f002 fdd9 	bl	80057bc <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002c0a:	480f      	ldr	r0, [pc, #60]	; (8002c48 <cmd_help+0x54>)
 8002c0c:	f002 fdd6 	bl	80057bc <term_print>
	term_print("M show measurements using all channels\r\n");
 8002c10:	480e      	ldr	r0, [pc, #56]	; (8002c4c <cmd_help+0x58>)
 8002c12:	f002 fdd3 	bl	80057bc <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002c16:	480e      	ldr	r0, [pc, #56]	; (8002c50 <cmd_help+0x5c>)
 8002c18:	f002 fdd0 	bl	80057bc <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002c1c:	480d      	ldr	r0, [pc, #52]	; (8002c54 <cmd_help+0x60>)
 8002c1e:	f002 fdcd 	bl	80057bc <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8002c22:	480d      	ldr	r0, [pc, #52]	; (8002c58 <cmd_help+0x64>)
 8002c24:	f002 fdca 	bl	80057bc <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <cmd_help+0x68>)
 8002c2a:	f002 fdc7 	bl	80057bc <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8002c2e:	480c      	ldr	r0, [pc, #48]	; (8002c60 <cmd_help+0x6c>)
 8002c30:	f002 fdc4 	bl	80057bc <term_print>
	return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	08011594 	.word	0x08011594
 8002c40:	080115a8 	.word	0x080115a8
 8002c44:	080115e0 	.word	0x080115e0
 8002c48:	080115f8 	.word	0x080115f8
 8002c4c:	08011614 	.word	0x08011614
 8002c50:	08011640 	.word	0x08011640
 8002c54:	08011688 	.word	0x08011688
 8002c58:	080116bc 	.word	0x080116bc
 8002c5c:	080116d8 	.word	0x080116d8
 8002c60:	08011718 	.word	0x08011718

08002c64 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c70:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3b3f      	subs	r3, #63	; 0x3f
 8002c78:	2b35      	cmp	r3, #53	; 0x35
 8002c7a:	f200 80c4 	bhi.w	8002e06 <cmd_process+0x1a2>
 8002c7e:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <cmd_process+0x20>)
 8002c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c84:	08002e01 	.word	0x08002e01
 8002c88:	08002e07 	.word	0x08002e07
 8002c8c:	08002e07 	.word	0x08002e07
 8002c90:	08002e07 	.word	0x08002e07
 8002c94:	08002d5d 	.word	0x08002d5d
 8002c98:	08002e07 	.word	0x08002e07
 8002c9c:	08002d73 	.word	0x08002d73
 8002ca0:	08002e07 	.word	0x08002e07
 8002ca4:	08002e07 	.word	0x08002e07
 8002ca8:	08002e01 	.word	0x08002e01
 8002cac:	08002e07 	.word	0x08002e07
 8002cb0:	08002e07 	.word	0x08002e07
 8002cb4:	08002e07 	.word	0x08002e07
 8002cb8:	08002d91 	.word	0x08002d91
 8002cbc:	08002da3 	.word	0x08002da3
 8002cc0:	08002e07 	.word	0x08002e07
 8002cc4:	08002e07 	.word	0x08002e07
 8002cc8:	08002dcb 	.word	0x08002dcb
 8002ccc:	08002e07 	.word	0x08002e07
 8002cd0:	08002dd5 	.word	0x08002dd5
 8002cd4:	08002de1 	.word	0x08002de1
 8002cd8:	08002df7 	.word	0x08002df7
 8002cdc:	08002e07 	.word	0x08002e07
 8002ce0:	08002e07 	.word	0x08002e07
 8002ce4:	08002e07 	.word	0x08002e07
 8002ce8:	08002e07 	.word	0x08002e07
 8002cec:	08002e07 	.word	0x08002e07
 8002cf0:	08002e07 	.word	0x08002e07
 8002cf4:	08002e07 	.word	0x08002e07
 8002cf8:	08002e07 	.word	0x08002e07
 8002cfc:	08002e07 	.word	0x08002e07
 8002d00:	08002e07 	.word	0x08002e07
 8002d04:	08002e07 	.word	0x08002e07
 8002d08:	08002e07 	.word	0x08002e07
 8002d0c:	08002e07 	.word	0x08002e07
 8002d10:	08002e07 	.word	0x08002e07
 8002d14:	08002d5d 	.word	0x08002d5d
 8002d18:	08002e07 	.word	0x08002e07
 8002d1c:	08002d73 	.word	0x08002d73
 8002d20:	08002e07 	.word	0x08002e07
 8002d24:	08002e07 	.word	0x08002e07
 8002d28:	08002e01 	.word	0x08002e01
 8002d2c:	08002e07 	.word	0x08002e07
 8002d30:	08002e07 	.word	0x08002e07
 8002d34:	08002e07 	.word	0x08002e07
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002da3 	.word	0x08002da3
 8002d40:	08002e07 	.word	0x08002e07
 8002d44:	08002e07 	.word	0x08002e07
 8002d48:	08002dcb 	.word	0x08002dcb
 8002d4c:	08002e07 	.word	0x08002e07
 8002d50:	08002dd5 	.word	0x08002dd5
 8002d54:	08002de1 	.word	0x08002de1
 8002d58:	08002df7 	.word	0x08002df7
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	3b31      	subs	r3, #49	; 0x31
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fed0 	bl	8005b0c <term_csv_buffer>
		retval = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
		break;
 8002d70:	e049      	b.n	8002e06 <cmd_process+0x1a2>
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 8002d72:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <cmd_process+0x1ac>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <cmd_process+0x11e>
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <cmd_process+0x1ac>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 8002d80:	e041      	b.n	8002e06 <cmd_process+0x1a2>
			esp_mode = 1;
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <cmd_process+0x1ac>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002d88:	4822      	ldr	r0, [pc, #136]	; (8002e14 <cmd_process+0x1b0>)
 8002d8a:	f002 fd17 	bl	80057bc <term_print>
		break;
 8002d8e:	e03a      	b.n	8002e06 <cmd_process+0x1a2>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	3b2f      	subs	r3, #47	; 0x2f
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff11 	bl	8002bc0 <cmd_led>
 8002d9e:	60f8      	str	r0, [r7, #12]
		break;
 8002da0:	e031      	b.n	8002e06 <cmd_process+0x1a2>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fa84 	bl	80002b0 <strlen>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d908      	bls.n	8002dc0 <cmd_process+0x15c>
		    term_show_channel(cmd_str[1] - 0x31);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	3b31      	subs	r3, #49	; 0x31
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fde7 	bl	800598c <term_show_channel>
 8002dbe:	e001      	b.n	8002dc4 <cmd_process+0x160>
		} else {
			term_show_measurements();
 8002dc0:	f002 fd7a 	bl	80058b8 <term_show_measurements>
		}
		retval = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
		break;
 8002dc8:	e01d      	b.n	8002e06 <cmd_process+0x1a2>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fed8 	bl	8002b80 <cmd_p>
 8002dd0:	60f8      	str	r0, [r7, #12]
		break;
 8002dd2:	e018      	b.n	8002e06 <cmd_process+0x1a2>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <cmd_process+0x1b4>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
		break;
 8002dde:	e012      	b.n	8002e06 <cmd_process+0x1a2>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	3b31      	subs	r3, #49	; 0x31
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f002 fd0c 	bl	8005808 <term_show_buffer>
		retval = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
		break;
 8002df4:	e007      	b.n	8002e06 <cmd_process+0x1a2>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fe94 	bl	8002b24 <cmd_t>
 8002dfc:	60f8      	str	r0, [r7, #12]
		break;
 8002dfe:	e002      	b.n	8002e06 <cmd_process+0x1a2>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8002e00:	f7ff fef8 	bl	8002bf4 <cmd_help>
 8002e04:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20002641 	.word	0x20002641
 8002e14:	0801174c 	.word	0x0801174c
 8002e18:	2000263f 	.word	0x2000263f

08002e1c <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fd fa43 	bl	80002b0 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <CMD_Handler+0x3c>)
 8002e30:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <CMD_Handler+0x3c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d105      	bne.n	8002e46 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fe64 	bl	8002b08 <cmd_error>
		return -1;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e44:	e003      	b.n	8002e4e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff0c 	bl	8002c64 <cmd_process>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000500 	.word	0x20000500

08002e5c <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 8002e60:	2302      	movs	r3, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 ffb8 	bl	8005dd8 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 8002e68:	2302      	movs	r3, #2
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <display_init+0x18>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d107      	bne.n	8002e84 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <display_init+0x3c>)
 8002e76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e7a:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <display_init+0x40>)
 8002e7e:	22f0      	movs	r2, #240	; 0xf0
 8002e80:	801a      	strh	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <display_init+0x40>)
 8002e86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e8a:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <display_init+0x3c>)
 8002e8e:	22f0      	movs	r2, #240	; 0xf0
 8002e90:	801a      	strh	r2, [r3, #0]
	}
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20002172 	.word	0x20002172
 8002e9c:	20002174 	.word	0x20002174

08002ea0 <display_splash_screen>:

void display_splash_screen() {
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f003 f9ec 	bl	8006284 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002eac:	2302      	movs	r3, #2
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4b33      	ldr	r3, [pc, #204]	; (8002f84 <display_splash_screen+0xe4>)
 8002eb6:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <display_splash_screen+0xe8>)
 8002eb8:	2120      	movs	r1, #32
 8002eba:	4834      	ldr	r0, [pc, #208]	; (8002f8c <display_splash_screen+0xec>)
 8002ebc:	f00b f86c 	bl	800df98 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 8002ec0:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <display_splash_screen+0xf0>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	461c      	mov	r4, r3
 8002ec6:	4831      	ldr	r0, [pc, #196]	; (8002f8c <display_splash_screen+0xec>)
 8002ec8:	f7fd f9f2 	bl	80002b0 <strlen>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <display_splash_screen+0xf4>)
 8002ed0:	8892      	ldrh	r2, [r2, #4]
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	1ae3      	subs	r3, r4, r3
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b29c      	uxth	r4, r3
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <display_splash_screen+0xf8>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <display_splash_screen+0xf4>)
 8002ee4:	88db      	ldrh	r3, [r3, #6]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	0fda      	lsrs	r2, r3, #31
 8002eea:	4413      	add	r3, r2
 8002eec:	105b      	asrs	r3, r3, #1
 8002eee:	b29d      	uxth	r5, r3
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <display_splash_screen+0xf4>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	9204      	str	r2, [sp, #16]
 8002ef6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002efa:	9203      	str	r2, [sp, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	9202      	str	r2, [sp, #8]
 8002f00:	466e      	mov	r6, sp
 8002f02:	1d1a      	adds	r2, r3, #4
 8002f04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f08:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <display_splash_screen+0xec>)
 8002f10:	4629      	mov	r1, r5
 8002f12:	4620      	mov	r0, r4
 8002f14:	f004 f928 	bl	8007168 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <display_splash_screen+0xf0>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	481f      	ldr	r0, [pc, #124]	; (8002f9c <display_splash_screen+0xfc>)
 8002f20:	f7fd f9c6 	bl	80002b0 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <display_splash_screen+0x100>)
 8002f28:	8892      	ldrh	r2, [r2, #4]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	1ae3      	subs	r3, r4, r3
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	b29c      	uxth	r4, r3
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <display_splash_screen+0xf8>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <display_splash_screen+0xf4>)
 8002f3c:	88db      	ldrh	r3, [r3, #6]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	0fda      	lsrs	r2, r3, #31
 8002f42:	4413      	add	r3, r2
 8002f44:	105b      	asrs	r3, r3, #1
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3319      	adds	r3, #25
 8002f4a:	b29d      	uxth	r5, r3
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <display_splash_screen+0x100>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	9204      	str	r2, [sp, #16]
 8002f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f56:	9203      	str	r2, [sp, #12]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	9202      	str	r2, [sp, #8]
 8002f5c:	466e      	mov	r6, sp
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f64:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <display_splash_screen+0xfc>)
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f004 f8fa 	bl	8007168 <Displ_WString>

	Displ_BackLight('1');
 8002f74:	2031      	movs	r0, #49	; 0x31
 8002f76:	f004 f937 	bl	80071e8 <Displ_BackLight>
}
 8002f7a:	bf00      	nop
 8002f7c:	3704      	adds	r7, #4
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08015cd0 	.word	0x08015cd0
 8002f88:	08011774 	.word	0x08011774
 8002f8c:	20002150 	.word	0x20002150
 8002f90:	20002172 	.word	0x20002172
 8002f94:	20000018 	.word	0x20000018
 8002f98:	20002174 	.word	0x20002174
 8002f9c:	08015cd4 	.word	0x08015cd4
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <display_channel_detail>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// channel detail screen
void display_channel_detail() {
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af06      	add	r7, sp, #24
	uint16_t font_col = channel_colour[display_channel+1];
 8002faa:	4b90      	ldr	r3, [pc, #576]	; (80031ec <display_channel_detail+0x248>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4a8f      	ldr	r2, [pc, #572]	; (80031f0 <display_channel_detail+0x24c>)
 8002fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb6:	80fb      	strh	r3, [r7, #6]
	if (!meter_readings_invalid) {
 8002fb8:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <display_channel_detail+0x250>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 80ad 	bne.w	800311c <display_channel_detail+0x178>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002fc2:	4b8d      	ldr	r3, [pc, #564]	; (80031f8 <display_channel_detail+0x254>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fade 	bl	8000588 <__aeabi_f2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd4:	4a89      	ldr	r2, [pc, #548]	; (80031fc <display_channel_detail+0x258>)
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	4889      	ldr	r0, [pc, #548]	; (8003200 <display_channel_detail+0x25c>)
 8002fda:	f00a ffdd 	bl	800df98 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 8002fde:	4b89      	ldr	r3, [pc, #548]	; (8003204 <display_channel_detail+0x260>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9204      	str	r2, [sp, #16]
 8002fe4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002fe8:	9203      	str	r2, [sp, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	9202      	str	r2, [sp, #8]
 8002fee:	466c      	mov	r4, sp
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a80      	ldr	r2, [pc, #512]	; (8003200 <display_channel_detail+0x25c>)
 8002ffe:	2107      	movs	r1, #7
 8003000:	2009      	movs	r0, #9
 8003002:	f004 f8b1 	bl	8007168 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i);
 8003006:	4b80      	ldr	r3, [pc, #512]	; (8003208 <display_channel_detail+0x264>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fabc 	bl	8000588 <__aeabi_f2d>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	e9cd 2300 	strd	r2, r3, [sp]
 8003018:	4a7c      	ldr	r2, [pc, #496]	; (800320c <display_channel_detail+0x268>)
 800301a:	2120      	movs	r1, #32
 800301c:	4878      	ldr	r0, [pc, #480]	; (8003200 <display_channel_detail+0x25c>)
 800301e:	f00a ffbb 	bl	800df98 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, font_col, BLACK);
 8003022:	4b78      	ldr	r3, [pc, #480]	; (8003204 <display_channel_detail+0x260>)
 8003024:	2200      	movs	r2, #0
 8003026:	9204      	str	r2, [sp, #16]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	9203      	str	r2, [sp, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	9202      	str	r2, [sp, #8]
 8003030:	466c      	mov	r4, sp
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003038:	e884 0003 	stmia.w	r4, {r0, r1}
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a70      	ldr	r2, [pc, #448]	; (8003200 <display_channel_detail+0x25c>)
 8003040:	2107      	movs	r1, #7
 8003042:	2078      	movs	r0, #120	; 0x78
 8003044:	f004 f890 	bl	8007168 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va );
 8003048:	4b71      	ldr	r3, [pc, #452]	; (8003210 <display_channel_detail+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa9b 	bl	8000588 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	e9cd 2300 	strd	r2, r3, [sp]
 800305a:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <display_channel_detail+0x270>)
 800305c:	2120      	movs	r1, #32
 800305e:	4868      	ldr	r0, [pc, #416]	; (8003200 <display_channel_detail+0x25c>)
 8003060:	f00a ff9a 	bl	800df98 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1,  font_col, BLACK);
 8003064:	4b67      	ldr	r3, [pc, #412]	; (8003204 <display_channel_detail+0x260>)
 8003066:	2200      	movs	r2, #0
 8003068:	9204      	str	r2, [sp, #16]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	9203      	str	r2, [sp, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	9202      	str	r2, [sp, #8]
 8003072:	466c      	mov	r4, sp
 8003074:	1d1a      	adds	r2, r3, #4
 8003076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307a:	e884 0003 	stmia.w	r4, {r0, r1}
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a5f      	ldr	r2, [pc, #380]	; (8003200 <display_channel_detail+0x25c>)
 8003082:	2130      	movs	r1, #48	; 0x30
 8003084:	2009      	movs	r0, #9
 8003086:	f004 f86f 	bl	8007168 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w );
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <display_channel_detail+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa7a 	bl	8000588 <__aeabi_f2d>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	e9cd 2300 	strd	r2, r3, [sp]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <display_channel_detail+0x270>)
 800309e:	2120      	movs	r1, #32
 80030a0:	4857      	ldr	r0, [pc, #348]	; (8003200 <display_channel_detail+0x25c>)
 80030a2:	f00a ff79 	bl	800df98 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1,  font_col, BLACK);
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <display_channel_detail+0x260>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	9204      	str	r2, [sp, #16]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	9203      	str	r2, [sp, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	466c      	mov	r4, sp
 80030b6:	1d1a      	adds	r2, r3, #4
 80030b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4f      	ldr	r2, [pc, #316]	; (8003200 <display_channel_detail+0x25c>)
 80030c4:	2159      	movs	r1, #89	; 0x59
 80030c6:	2009      	movs	r0, #9
 80030c8:	f004 f84e 	bl	8007168 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf) );
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <display_channel_detail+0x278>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	eef0 7ae7 	vabs.f32	s15, s15
 80030d6:	ee17 0a90 	vmov	r0, s15
 80030da:	f7fd fa55 	bl	8000588 <__aeabi_f2d>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	e9cd 2300 	strd	r2, r3, [sp]
 80030e6:	4a4e      	ldr	r2, [pc, #312]	; (8003220 <display_channel_detail+0x27c>)
 80030e8:	2120      	movs	r1, #32
 80030ea:	4845      	ldr	r0, [pc, #276]	; (8003200 <display_channel_detail+0x25c>)
 80030ec:	f00a ff54 	bl	800df98 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1,  font_col, BLACK);
 80030f0:	4b44      	ldr	r3, [pc, #272]	; (8003204 <display_channel_detail+0x260>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	9204      	str	r2, [sp, #16]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	9203      	str	r2, [sp, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	9202      	str	r2, [sp, #8]
 80030fe:	466c      	mov	r4, sp
 8003100:	1d1a      	adds	r2, r3, #4
 8003102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003106:	e884 0003 	stmia.w	r4, {r0, r1}
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <display_channel_detail+0x25c>)
 800310e:	2182      	movs	r1, #130	; 0x82
 8003110:	2009      	movs	r0, #9
 8003112:	f004 f829 	bl	8007168 <Displ_WString>
		} else {
			snprintf(str,sizeof(str)," 0.0");
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
		*/
		display_show_curves();
 8003116:	f000 fe8b 	bl	8003e30 <display_show_curves>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
		//Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
		}

}
 800311a:	e063      	b.n	80031e4 <display_channel_detail+0x240>
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <display_channel_detail+0x260>)
 800311e:	2200      	movs	r2, #0
 8003120:	9204      	str	r2, [sp, #16]
 8003122:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003126:	9203      	str	r2, [sp, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	9202      	str	r2, [sp, #8]
 800312c:	466c      	mov	r4, sp
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003134:	e884 0003 	stmia.w	r4, {r0, r1}
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <display_channel_detail+0x280>)
 800313c:	2107      	movs	r1, #7
 800313e:	2009      	movs	r0, #9
 8003140:	f004 f812 	bl	8007168 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 8003144:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <display_channel_detail+0x260>)
 8003146:	2200      	movs	r2, #0
 8003148:	9204      	str	r2, [sp, #16]
 800314a:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800314e:	9203      	str	r2, [sp, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	9202      	str	r2, [sp, #8]
 8003154:	466c      	mov	r4, sp
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800315c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a31      	ldr	r2, [pc, #196]	; (8003228 <display_channel_detail+0x284>)
 8003164:	2107      	movs	r1, #7
 8003166:	2078      	movs	r0, #120	; 0x78
 8003168:	f003 fffe 	bl	8007168 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <display_channel_detail+0x260>)
 800316e:	2200      	movs	r2, #0
 8003170:	9204      	str	r2, [sp, #16]
 8003172:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003176:	9203      	str	r2, [sp, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	9202      	str	r2, [sp, #8]
 800317c:	466c      	mov	r4, sp
 800317e:	1d1a      	adds	r2, r3, #4
 8003180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003184:	e884 0003 	stmia.w	r4, {r0, r1}
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a28      	ldr	r2, [pc, #160]	; (800322c <display_channel_detail+0x288>)
 800318c:	2130      	movs	r1, #48	; 0x30
 800318e:	2009      	movs	r0, #9
 8003190:	f003 ffea 	bl	8007168 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <display_channel_detail+0x260>)
 8003196:	2200      	movs	r2, #0
 8003198:	9204      	str	r2, [sp, #16]
 800319a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800319e:	9203      	str	r2, [sp, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	9202      	str	r2, [sp, #8]
 80031a4:	466c      	mov	r4, sp
 80031a6:	1d1a      	adds	r2, r3, #4
 80031a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <display_channel_detail+0x288>)
 80031b4:	2159      	movs	r1, #89	; 0x59
 80031b6:	2009      	movs	r0, #9
 80031b8:	f003 ffd6 	bl	8007168 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <display_channel_detail+0x260>)
 80031be:	2200      	movs	r2, #0
 80031c0:	9204      	str	r2, [sp, #16]
 80031c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c6:	9203      	str	r2, [sp, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	9202      	str	r2, [sp, #8]
 80031cc:	466c      	mov	r4, sp
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <display_channel_detail+0x28c>)
 80031dc:	2182      	movs	r1, #130	; 0x82
 80031de:	2009      	movs	r0, #9
 80031e0:	f003 ffc2 	bl	8007168 <Displ_WString>
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	20000501 	.word	0x20000501
 80031f0:	20000000 	.word	0x20000000
 80031f4:	2000028c 	.word	0x2000028c
 80031f8:	20008238 	.word	0x20008238
 80031fc:	08011790 	.word	0x08011790
 8003200:	20002150 	.word	0x20002150
 8003204:	20000024 	.word	0x20000024
 8003208:	2000823c 	.word	0x2000823c
 800320c:	08011798 	.word	0x08011798
 8003210:	20008240 	.word	0x20008240
 8003214:	080117a0 	.word	0x080117a0
 8003218:	20008244 	.word	0x20008244
 800321c:	20008248 	.word	0x20008248
 8003220:	080117a8 	.word	0x080117a8
 8003224:	080117b0 	.word	0x080117b0
 8003228:	080117b4 	.word	0x080117b4
 800322c:	080117bc 	.word	0x080117bc
 8003230:	080117c4 	.word	0x080117c4

08003234 <display_usage>:

void display_usage() {
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af06      	add	r7, sp, #24
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <display_update_meter+0xc8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	79fa      	ldrb	r2, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d045      	beq.n	80032e4 <display_update_meter+0xa0>
		switch(screen) {
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	3b01      	subs	r3, #1
 800325c:	2b03      	cmp	r3, #3
 800325e:	d83e      	bhi.n	80032de <display_update_meter+0x9a>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <display_update_meter+0x24>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	0800328b 	.word	0x0800328b
 8003270:	0800329d 	.word	0x0800329d
 8003274:	080032af 	.word	0x080032af
		case 1:
			meter_readings_invalid = 1;
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <display_update_meter+0xcc>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
			display_channel = I1;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <display_update_meter+0xd0>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8003284:	f000 f858 	bl	8003338 <display_meter_mask>
			break;
 8003288:	e029      	b.n	80032de <display_update_meter+0x9a>
		case 2:
			meter_readings_invalid = 1;
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <display_update_meter+0xcc>)
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
			display_channel = I2;
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <display_update_meter+0xd0>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 8003296:	f000 f84f 	bl	8003338 <display_meter_mask>
			break;
 800329a:	e020      	b.n	80032de <display_update_meter+0x9a>
		case 3:
			meter_readings_invalid = 1;
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <display_update_meter+0xcc>)
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
			display_channel = I3;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <display_update_meter+0xd0>)
 80032a4:	2202      	movs	r2, #2
 80032a6:	701a      	strb	r2, [r3, #0]
			display_meter_mask();
 80032a8:	f000 f846 	bl	8003338 <display_meter_mask>
			break;
 80032ac:	e017      	b.n	80032de <display_update_meter+0x9a>
		case 4:
			Displ_CLS(BLACK);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f002 ffe8 	bl	8006284 <Displ_CLS>
			Displ_WString(20, 20, "Usage" , Font24, 1, WHITE, BLACK);
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <display_update_meter+0xd4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	9204      	str	r2, [sp, #16]
 80032ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032be:	9203      	str	r2, [sp, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	9202      	str	r2, [sp, #8]
 80032c4:	466c      	mov	r4, sp
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <display_update_meter+0xd8>)
 80032d4:	2114      	movs	r1, #20
 80032d6:	2014      	movs	r0, #20
 80032d8:	f003 ff46 	bl	8007168 <Displ_WString>
			break;
 80032dc:	bf00      	nop
		}
		last_screen = screen;
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <display_update_meter+0xc8>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	dc02      	bgt.n	80032f0 <display_update_meter+0xac>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	dc03      	bgt.n	80032f6 <display_update_meter+0xb2>
	case 4:
		display_usage();
		break;

	}
}
 80032ee:	e008      	b.n	8003302 <display_update_meter+0xbe>
	switch(screen) {
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d003      	beq.n	80032fc <display_update_meter+0xb8>
}
 80032f4:	e005      	b.n	8003302 <display_update_meter+0xbe>
		display_channel_detail();
 80032f6:	f7ff fe55 	bl	8002fa4 <display_channel_detail>
		break;
 80032fa:	e002      	b.n	8003302 <display_update_meter+0xbe>
		display_usage();
 80032fc:	f7ff ff9a 	bl	8003234 <display_usage>
		break;
 8003300:	bf00      	nop
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	bf00      	nop
 800330c:	20002170 	.word	0x20002170
 8003310:	2000028c 	.word	0x2000028c
 8003314:	20000501 	.word	0x20000501
 8003318:	20000018 	.word	0x20000018
 800331c:	080117cc 	.word	0x080117cc

08003320 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
	last_screen = 0;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <display_update_mask+0x14>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	20002170 	.word	0x20002170

08003338 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 8003342:	2328      	movs	r3, #40	; 0x28
 8003344:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8003346:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800334a:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 800334c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003350:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 8003352:	2300      	movs	r3, #0
 8003354:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4618      	mov	r0, r3
 800335a:	f002 ff93 	bl	8006284 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800335e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003362:	4ba6      	ldr	r3, [pc, #664]	; (80035fc <display_meter_mask+0x2c4>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	3b01      	subs	r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	b21a      	sxth	r2, r3
 800336c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	4603      	mov	r3, r0
 8003376:	2000      	movs	r0, #0
 8003378:	f003 f96d 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800337c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003380:	89fa      	ldrh	r2, [r7, #14]
 8003382:	89bb      	ldrh	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	b21a      	sxth	r2, r3
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4613      	mov	r3, r2
 8003390:	2200      	movs	r2, #0
 8003392:	2000      	movs	r0, #0
 8003394:	f003 f95f 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003398:	89fa      	ldrh	r2, [r7, #14]
 800339a:	89bb      	ldrh	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	b219      	sxth	r1, r3
 80033a2:	4b96      	ldr	r3, [pc, #600]	; (80035fc <display_meter_mask+0x2c4>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b218      	sxth	r0, r3
 80033ac:	89fa      	ldrh	r2, [r7, #14]
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	b21a      	sxth	r2, r3
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	4613      	mov	r3, r2
 80033bc:	4602      	mov	r2, r0
 80033be:	2000      	movs	r0, #0
 80033c0:	f003 f949 	bl	8006656 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <display_meter_mask+0x2c4>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	b218      	sxth	r0, r3
 80033ce:	89fa      	ldrh	r2, [r7, #14]
 80033d0:	89bb      	ldrh	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	b219      	sxth	r1, r3
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <display_meter_mask+0x2c4>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29b      	uxth	r3, r3
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	f003 f935 	bl	8006656 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	3309      	adds	r3, #9
 80033f0:	b29c      	uxth	r4, r3
 80033f2:	4b83      	ldr	r3, [pc, #524]	; (8003600 <display_meter_mask+0x2c8>)
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	9204      	str	r2, [sp, #16]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	9203      	str	r2, [sp, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	9202      	str	r2, [sp, #8]
 8003400:	466d      	mov	r5, sp
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003408:	e885 0003 	stmia.w	r5, {r0, r1}
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2256      	movs	r2, #86	; 0x56
 8003410:	4621      	mov	r1, r4
 8003412:	204b      	movs	r0, #75	; 0x4b
 8003414:	f003 fc2a 	bl	8006c6c <Displ_WChar>
	font_col = channel_colour[display_channel+1];
 8003418:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <display_meter_mask+0x2cc>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <display_meter_mask+0x2d0>)
 8003420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003424:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8003426:	4b75      	ldr	r3, [pc, #468]	; (80035fc <display_meter_mask+0x2c4>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	3b1e      	subs	r3, #30
 800342c:	b29c      	uxth	r4, r3
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <display_meter_mask+0x2c8>)
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	9204      	str	r2, [sp, #16]
 8003434:	893a      	ldrh	r2, [r7, #8]
 8003436:	9203      	str	r2, [sp, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	466d      	mov	r5, sp
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003444:	e885 0003 	stmia.w	r5, {r0, r1}
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2241      	movs	r2, #65	; 0x41
 800344c:	2109      	movs	r1, #9
 800344e:	4620      	mov	r0, r4
 8003450:	f003 fc0c 	bl	8006c6c <Displ_WChar>
	// VA
	ypos += box_height+1;
 8003454:	89ba      	ldrh	r2, [r7, #12]
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	4413      	add	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	81fb      	strh	r3, [r7, #14]
	border_col = YELLOW;
 8003460:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003464:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8003466:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <display_meter_mask+0x2c4>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	3b01      	subs	r3, #1
 8003470:	b29b      	uxth	r3, r3
 8003472:	b21a      	sxth	r2, r3
 8003474:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	4603      	mov	r3, r0
 800347e:	2000      	movs	r0, #0
 8003480:	f003 f8e9 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8003484:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003488:	89fa      	ldrh	r2, [r7, #14]
 800348a:	89bb      	ldrh	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	b21a      	sxth	r2, r3
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	2200      	movs	r2, #0
 800349a:	2000      	movs	r0, #0
 800349c:	f003 f8db 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 80034a0:	89fa      	ldrh	r2, [r7, #14]
 80034a2:	89bb      	ldrh	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	b219      	sxth	r1, r3
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <display_meter_mask+0x2c4>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	b218      	sxth	r0, r3
 80034b4:	89fa      	ldrh	r2, [r7, #14]
 80034b6:	89bb      	ldrh	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	b21a      	sxth	r2, r3
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	4602      	mov	r2, r0
 80034c6:	2000      	movs	r0, #0
 80034c8:	f003 f8c5 	bl	8006656 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <display_meter_mask+0x2c4>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	b218      	sxth	r0, r3
 80034d6:	89fa      	ldrh	r2, [r7, #14]
 80034d8:	89bb      	ldrh	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b219      	sxth	r1, r3
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <display_meter_mask+0x2c4>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4623      	mov	r3, r4
 80034f4:	f003 f8af 	bl	8006656 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 80034f8:	4b40      	ldr	r3, [pc, #256]	; (80035fc <display_meter_mask+0x2c4>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	3b50      	subs	r3, #80	; 0x50
 80034fe:	b29c      	uxth	r4, r3
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	3309      	adds	r3, #9
 8003504:	b29d      	uxth	r5, r3
 8003506:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <display_meter_mask+0x2c8>)
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	9204      	str	r2, [sp, #16]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	9203      	str	r2, [sp, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	9202      	str	r2, [sp, #8]
 8003514:	466e      	mov	r6, sp
 8003516:	1d1a      	adds	r2, r3, #4
 8003518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800351c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3a      	ldr	r2, [pc, #232]	; (800360c <display_meter_mask+0x2d4>)
 8003524:	4629      	mov	r1, r5
 8003526:	4620      	mov	r0, r4
 8003528:	f003 fe1e 	bl	8007168 <Displ_WString>
	// W
	ypos += box_height+1;
 800352c:	89ba      	ldrh	r2, [r7, #12]
 800352e:	89fb      	ldrh	r3, [r7, #14]
 8003530:	4413      	add	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	3301      	adds	r3, #1
 8003536:	81fb      	strh	r3, [r7, #14]
	border_col = YELLOW;
 8003538:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800353c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800353e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <display_meter_mask+0x2c4>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	b21a      	sxth	r2, r3
 800354c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003550:	897b      	ldrh	r3, [r7, #10]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	2000      	movs	r0, #0
 8003558:	f003 f87d 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800355c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003560:	89fa      	ldrh	r2, [r7, #14]
 8003562:	89bb      	ldrh	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	b21a      	sxth	r2, r3
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	2200      	movs	r2, #0
 8003572:	2000      	movs	r0, #0
 8003574:	f003 f86f 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003578:	89fa      	ldrh	r2, [r7, #14]
 800357a:	89bb      	ldrh	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	b219      	sxth	r1, r3
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <display_meter_mask+0x2c4>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	b218      	sxth	r0, r3
 800358c:	89fa      	ldrh	r2, [r7, #14]
 800358e:	89bb      	ldrh	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	b21a      	sxth	r2, r3
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	4602      	mov	r2, r0
 800359e:	2000      	movs	r0, #0
 80035a0:	f003 f859 	bl	8006656 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <display_meter_mask+0x2c4>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b218      	sxth	r0, r3
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	89bb      	ldrh	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b219      	sxth	r1, r3
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <display_meter_mask+0x2c4>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4623      	mov	r3, r4
 80035cc:	f003 f843 	bl	8006656 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <display_meter_mask+0x2c4>)
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	3b50      	subs	r3, #80	; 0x50
 80035d6:	b29c      	uxth	r4, r3
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	3309      	adds	r3, #9
 80035dc:	b29d      	uxth	r5, r3
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <display_meter_mask+0x2c8>)
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	9204      	str	r2, [sp, #16]
 80035e4:	893a      	ldrh	r2, [r7, #8]
 80035e6:	9203      	str	r2, [sp, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	9202      	str	r2, [sp, #8]
 80035ec:	466e      	mov	r6, sp
 80035ee:	1d1a      	adds	r2, r3, #4
 80035f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80035f8:	e00a      	b.n	8003610 <display_meter_mask+0x2d8>
 80035fa:	bf00      	nop
 80035fc:	20002172 	.word	0x20002172
 8003600:	20000018 	.word	0x20000018
 8003604:	20000501 	.word	0x20000501
 8003608:	20000000 	.word	0x20000000
 800360c:	080117d4 	.word	0x080117d4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2257      	movs	r2, #87	; 0x57
 8003614:	4629      	mov	r1, r5
 8003616:	4620      	mov	r0, r4
 8003618:	f003 fb28 	bl	8006c6c <Displ_WChar>

	// PF
	ypos += box_height+1;
 800361c:	89ba      	ldrh	r2, [r7, #12]
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	4413      	add	r3, r2
 8003622:	b29b      	uxth	r3, r3
 8003624:	3301      	adds	r3, #1
 8003626:	81fb      	strh	r3, [r7, #14]
	border_col = WHITE;
 8003628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800362c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800362e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003632:	4b62      	ldr	r3, [pc, #392]	; (80037bc <display_meter_mask+0x484>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	3b01      	subs	r3, #1
 8003638:	b29b      	uxth	r3, r3
 800363a:	b21a      	sxth	r2, r3
 800363c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003640:	897b      	ldrh	r3, [r7, #10]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	4603      	mov	r3, r0
 8003646:	2000      	movs	r0, #0
 8003648:	f003 f805 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800364c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003650:	89fa      	ldrh	r2, [r7, #14]
 8003652:	89bb      	ldrh	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	b21a      	sxth	r2, r3
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	2200      	movs	r2, #0
 8003662:	2000      	movs	r0, #0
 8003664:	f002 fff7 	bl	8006656 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8003668:	89fa      	ldrh	r2, [r7, #14]
 800366a:	89bb      	ldrh	r3, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	b219      	sxth	r1, r3
 8003672:	4b52      	ldr	r3, [pc, #328]	; (80037bc <display_meter_mask+0x484>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	b218      	sxth	r0, r3
 800367c:	89fa      	ldrh	r2, [r7, #14]
 800367e:	89bb      	ldrh	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	b21a      	sxth	r2, r3
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	4602      	mov	r2, r0
 800368e:	2000      	movs	r0, #0
 8003690:	f002 ffe1 	bl	8006656 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8003694:	4b49      	ldr	r3, [pc, #292]	; (80037bc <display_meter_mask+0x484>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	b218      	sxth	r0, r3
 800369e:	89fa      	ldrh	r2, [r7, #14]
 80036a0:	89bb      	ldrh	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b219      	sxth	r1, r3
 80036a8:	4b44      	ldr	r3, [pc, #272]	; (80037bc <display_meter_mask+0x484>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4623      	mov	r3, r4
 80036bc:	f002 ffcb 	bl	8006656 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 80036c0:	89fb      	ldrh	r3, [r7, #14]
 80036c2:	3309      	adds	r3, #9
 80036c4:	b29c      	uxth	r4, r3
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <display_meter_mask+0x488>)
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	9204      	str	r2, [sp, #16]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	9203      	str	r2, [sp, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	9202      	str	r2, [sp, #8]
 80036d4:	466d      	mov	r5, sp
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a38      	ldr	r2, [pc, #224]	; (80037c4 <display_meter_mask+0x48c>)
 80036e4:	4621      	mov	r1, r4
 80036e6:	205f      	movs	r0, #95	; 0x5f
 80036e8:	f003 fd3e 	bl	8007168 <Displ_WString>
	// Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);		// Degree sign

	// Graph Box
	ypos += box_height+1;
 80036ec:	89ba      	ldrh	r2, [r7, #12]
 80036ee:	89fb      	ldrh	r3, [r7, #14]
 80036f0:	4413      	add	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 80036f8:	231f      	movs	r3, #31
 80036fa:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 80036fc:	4b32      	ldr	r3, [pc, #200]	; (80037c8 <display_meter_mask+0x490>)
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	b29a      	uxth	r2, r3
 8003706:	2302      	movs	r3, #2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	b29a      	uxth	r2, r3
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <display_meter_mask+0x494>)
 8003712:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <display_meter_mask+0x494>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	4413      	add	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	2202      	movs	r2, #2
 8003724:	4413      	add	r3, r2
 8003726:	b29a      	uxth	r2, r3
 8003728:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <display_meter_mask+0x498>)
 800372a:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 800372c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003730:	4b22      	ldr	r3, [pc, #136]	; (80037bc <display_meter_mask+0x484>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b218      	sxth	r0, r3
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <display_meter_mask+0x490>)
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	b29b      	uxth	r3, r3
 8003740:	b21c      	sxth	r4, r3
 8003742:	2302      	movs	r3, #2
 8003744:	b21b      	sxth	r3, r3
 8003746:	897a      	ldrh	r2, [r7, #10]
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4623      	mov	r3, r4
 800374e:	4602      	mov	r2, r0
 8003750:	2000      	movs	r0, #0
 8003752:	f003 f8b1 	bl	80068b8 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <display_meter_mask+0x49c>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b218      	sxth	r0, r3
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <display_meter_mask+0x498>)
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b219      	sxth	r1, r3
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <display_meter_mask+0x49c>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	33d2      	adds	r3, #210	; 0xd2
 8003768:	b29b      	uxth	r3, r3
 800376a:	b21a      	sxth	r2, r3
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <display_meter_mask+0x498>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b21b      	sxth	r3, r3
 8003772:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003776:	9400      	str	r4, [sp, #0]
 8003778:	f002 ff6d 	bl	8006656 <Displ_Line>

	// Channel
	snprintf(str,sizeof(str),"I%d", display_channel+1 );
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <display_meter_mask+0x4a0>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	4a16      	ldr	r2, [pc, #88]	; (80037dc <display_meter_mask+0x4a4>)
 8003784:	2120      	movs	r1, #32
 8003786:	4816      	ldr	r0, [pc, #88]	; (80037e0 <display_meter_mask+0x4a8>)
 8003788:	f00a fc06 	bl	800df98 <sniprintf>
	Displ_WString(190, 133, str , Font24, 1, font_col, back_col);
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <display_meter_mask+0x488>)
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	9204      	str	r2, [sp, #16]
 8003792:	893a      	ldrh	r2, [r7, #8]
 8003794:	9203      	str	r2, [sp, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	9202      	str	r2, [sp, #8]
 800379a:	466c      	mov	r4, sp
 800379c:	1d1a      	adds	r2, r3, #4
 800379e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <display_meter_mask+0x4a8>)
 80037aa:	2185      	movs	r1, #133	; 0x85
 80037ac:	20be      	movs	r0, #190	; 0xbe
 80037ae:	f003 fcdb 	bl	8007168 <Displ_WString>
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20002172 	.word	0x20002172
 80037c0:	20000018 	.word	0x20000018
 80037c4:	080117d8 	.word	0x080117d8
 80037c8:	20002174 	.word	0x20002174
 80037cc:	20000008 	.word	0x20000008
 80037d0:	2000084c 	.word	0x2000084c
 80037d4:	2000000a 	.word	0x2000000a
 80037d8:	20000501 	.word	0x20000501
 80037dc:	080117dc 	.word	0x080117dc
 80037e0:	20002150 	.word	0x20002150

080037e4 <display_align_curves>:

/*
 * @ brief       Aligns V + I curve to start at positive zero crossing and reduces it to one full cycle
 * @retval:      number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ee:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 80037f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f4:	603b      	str	r3, [r7, #0]
	uint8_t adc_channel;

	switch(display_channel) {
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <display_align_curves+0x160>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d00c      	beq.n	8003818 <display_align_curves+0x34>
 80037fe:	2b02      	cmp	r3, #2
 8003800:	dc0d      	bgt.n	800381e <display_align_curves+0x3a>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <display_align_curves+0x28>
 8003806:	2b01      	cmp	r3, #1
 8003808:	d003      	beq.n	8003812 <display_align_curves+0x2e>
 800380a:	e008      	b.n	800381e <display_align_curves+0x3a>
	case I1:
		adc_channel = ADC_CH_I1;
 800380c:	2303      	movs	r3, #3
 800380e:	71fb      	strb	r3, [r7, #7]
		break;
 8003810:	e007      	b.n	8003822 <display_align_curves+0x3e>
	case I2:
		adc_channel = ADC_CH_I2;
 8003812:	2302      	movs	r3, #2
 8003814:	71fb      	strb	r3, [r7, #7]
		break;
 8003816:	e004      	b.n	8003822 <display_align_curves+0x3e>
	case I3:
		adc_channel = ADC_CH_I3;
 8003818:	2301      	movs	r3, #1
 800381a:	71fb      	strb	r3, [r7, #7]
		break;
 800381c:	e001      	b.n	8003822 <display_align_curves+0x3e>
	default:
		adc_channel = ADC_CH_I1;
 800381e:	2303      	movs	r3, #3
 8003820:	71fb      	strb	r3, [r7, #7]
	}

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8003822:	4b49      	ldr	r3, [pc, #292]	; (8003948 <display_align_curves+0x164>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da29      	bge.n	800387e <display_align_curves+0x9a>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	e01f      	b.n	8003870 <display_align_curves+0x8c>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8003830:	4a46      	ldr	r2, [pc, #280]	; (800394c <display_align_curves+0x168>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003838:	4a45      	ldr	r2, [pc, #276]	; (8003950 <display_align_curves+0x16c>)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[adc_channel][i] = sample_buf[adc_channel][i];
 8003840:	79fa      	ldrb	r2, [r7, #7]
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4841      	ldr	r0, [pc, #260]	; (800394c <display_align_curves+0x168>)
 8003846:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800384a:	fb02 f101 	mul.w	r1, r2, r1
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	440a      	add	r2, r1
 8003852:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 8003856:	493e      	ldr	r1, [pc, #248]	; (8003950 <display_align_curves+0x16c>)
 8003858:	f44f 7248 	mov.w	r2, #800	; 0x320
 800385c:	fb03 f202 	mul.w	r2, r3, r2
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4413      	add	r3, r2
 8003864:	4602      	mov	r2, r0
 8003866:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8003876:	d3db      	bcc.n	8003830 <display_align_curves+0x4c>
		}
		return SAMPLE_BUF_SIZE;
 8003878:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800387c:	e05b      	b.n	8003936 <display_align_curves+0x152>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 800387e:	4b32      	ldr	r3, [pc, #200]	; (8003948 <display_align_curves+0x164>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	e022      	b.n	80038cc <display_align_curves+0xe8>
		dest_idx++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <display_align_curves+0x168>)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003894:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <display_align_curves+0x16c>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 800389c:	79fa      	ldrb	r2, [r7, #7]
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	482a      	ldr	r0, [pc, #168]	; (800394c <display_align_curves+0x168>)
 80038a2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80038a6:	fb02 f101 	mul.w	r1, r2, r1
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	440a      	add	r2, r1
 80038ae:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 80038b2:	4927      	ldr	r1, [pc, #156]	; (8003950 <display_align_curves+0x16c>)
 80038b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80038b8:	fb03 f202 	mul.w	r2, r3, r2
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	4602      	mov	r2, r0
 80038c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80038d2:	d3d8      	bcc.n	8003886 <display_align_curves+0xa2>
	}

	continue_at = SAMPLE_BUF_OVERLAP;
 80038d4:	2314      	movs	r3, #20
 80038d6:	603b      	str	r3, [r7, #0]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	e022      	b.n	8003924 <display_align_curves+0x140>
		dest_idx++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <display_align_curves+0x168>)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <display_align_curves+0x16c>)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[adc_channel][dest_idx] = sample_buf[adc_channel][i];
 80038f4:	79fa      	ldrb	r2, [r7, #7]
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4814      	ldr	r0, [pc, #80]	; (800394c <display_align_curves+0x168>)
 80038fa:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80038fe:	fb02 f101 	mul.w	r1, r2, r1
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	440a      	add	r2, r1
 8003906:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
 800390a:	4911      	ldr	r1, [pc, #68]	; (8003950 <display_align_curves+0x16c>)
 800390c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003910:	fb03 f202 	mul.w	r2, r3, r2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	4602      	mov	r2, r0
 800391a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <display_align_curves+0x164>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	dbd7      	blt.n	80038de <display_align_curves+0xfa>
	}

	return ++dest_idx;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000501 	.word	0x20000501
 8003948:	2000023c 	.word	0x2000023c
 800394c:	20007518 	.word	0x20007518
 8003950:	20000850 	.word	0x20000850

08003954 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	b08b      	sub	sp, #44	; 0x2c
 8003958:	af06      	add	r7, sp, #24
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
 800395e:	460b      	mov	r3, r1
 8003960:	717b      	strb	r3, [r7, #5]
 8003962:	4613      	mov	r3, r2
 8003964:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8003966:	797b      	ldrb	r3, [r7, #5]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <draw_curve+0x20>
 800396c:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <draw_curve+0x1b0>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <draw_curve+0x1b4>)
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <draw_curve+0x1b8>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b02      	subs	r3, #2
 8003982:	b299      	uxth	r1, r3
 8003984:	4b62      	ldr	r3, [pc, #392]	; (8003b10 <draw_curve+0x1bc>)
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	2302      	movs	r3, #2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	b29a      	uxth	r2, r3
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <draw_curve+0x1b8>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	2000      	movs	r0, #0
 8003998:	9000      	str	r0, [sp, #0]
 800399a:	2002      	movs	r0, #2
 800399c:	f002 fabe 	bl	8005f1c <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <draw_curve+0x1b0>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 80039a8:	4b5a      	ldr	r3, [pc, #360]	; (8003b14 <draw_curve+0x1c0>)
 80039aa:	889a      	ldrh	r2, [r3, #4]
 80039ac:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <draw_curve+0x1c4>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	4413      	add	r3, r2
 80039b2:	b29c      	uxth	r4, r3
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <draw_curve+0x1c8>)
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <draw_curve+0x1c0>)
 80039ba:	88db      	ldrh	r3, [r3, #6]
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	b29d      	uxth	r5, r3
 80039c4:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <draw_curve+0x1c0>)
 80039c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80039ca:	9204      	str	r2, [sp, #16]
 80039cc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80039d0:	9203      	str	r2, [sp, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	9202      	str	r2, [sp, #8]
 80039d6:	466e      	mov	r6, sp
 80039d8:	1d1a      	adds	r2, r3, #4
 80039da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039de:	e886 0003 	stmia.w	r6, {r0, r1}
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <draw_curve+0x1cc>)
 80039e6:	4629      	mov	r1, r5
 80039e8:	4620      	mov	r0, r4
 80039ea:	f003 fbbd 	bl	8007168 <Displ_WString>
		return;
 80039ee:	e086      	b.n	8003afe <draw_curve+0x1aa>
	}

	if (centre_zero) {
 80039f0:	793b      	ldrb	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04c      	beq.n	8003a90 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_x_size, curve_y_zero, WHITE);
 80039f6:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <draw_curve+0x1c4>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b218      	sxth	r0, r3
 80039fc:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <draw_curve+0x1c8>)
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b219      	sxth	r1, r3
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <draw_curve+0x1c4>)
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <draw_curve+0x1d0>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <draw_curve+0x1c8>)
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b21b      	sxth	r3, r3
 8003a16:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003a1a:	9400      	str	r4, [sp, #0]
 8003a1c:	f002 fe1b 	bl	8006656 <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_x_size; x++) {
 8003a20:	2301      	movs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e02d      	b.n	8003a82 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <draw_curve+0x1c4>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	4413      	add	r3, r2
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b218      	sxth	r0, r3
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <draw_curve+0x1c8>)
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4939      	ldr	r1, [pc, #228]	; (8003b28 <draw_curve+0x1d4>)
 8003a42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	b219      	sxth	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <draw_curve+0x1c4>)
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b21c      	sxth	r4, r3
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <draw_curve+0x1c8>)
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	4d31      	ldr	r5, [pc, #196]	; (8003b28 <draw_curve+0x1d4>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b21a      	sxth	r2, r3
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	4622      	mov	r2, r4
 8003a78:	f002 fded 	bl	8006656 <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <draw_curve+0x1d0>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	dbcb      	blt.n	8003a26 <draw_curve+0xd2>
 8003a8e:	e036      	b.n	8003afe <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_x_size; x++) {
 8003a90:	2301      	movs	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	e02d      	b.n	8003af2 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <draw_curve+0x1c4>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b218      	sxth	r0, r3
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <draw_curve+0x1c8>)
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	491d      	ldr	r1, [pc, #116]	; (8003b28 <draw_curve+0x1d4>)
 8003ab2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	b219      	sxth	r1, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <draw_curve+0x1c4>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	b21c      	sxth	r4, r3
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <draw_curve+0x1c8>)
 8003ace:	881a      	ldrh	r2, [r3, #0]
 8003ad0:	4d15      	ldr	r5, [pc, #84]	; (8003b28 <draw_curve+0x1d4>)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	f002 fdb5 	bl	8006656 <Displ_Line>
		for (int x=1; x<curve_x_size; x++) {
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <draw_curve+0x1d0>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4293      	cmp	r3, r2
 8003afc:	dbcb      	blt.n	8003a96 <draw_curve+0x142>
		}
	}
}
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b04:	2000028c 	.word	0x2000028c
 8003b08:	20002174 	.word	0x20002174
 8003b0c:	20000008 	.word	0x20000008
 8003b10:	20002172 	.word	0x20002172
 8003b14:	20000018 	.word	0x20000018
 8003b18:	2000000a 	.word	0x2000000a
 8003b1c:	2000084c 	.word	0x2000084c
 8003b20:	080117e0 	.word	0x080117e0
 8003b24:	2000084e 	.word	0x2000084e
 8003b28:	20000504 	.word	0x20000504

08003b2c <make_curve>:
 *             represents plus/minus values centered around the half way point of the data range.
 *          The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 * @ para bufnum      Sample buffer to use for curve
 * @ para auto_scale  1 = scale to fit available screen area, 0 = use ADC full scale
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b095      	sub	sp, #84	; 0x54
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	460a      	mov	r2, r1
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8003b44:	79fa      	ldrb	r2, [r7, #7]
 8003b46:	49b3      	ldr	r1, [pc, #716]	; (8003e14 <make_curve+0x2e8>)
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3302      	adds	r3, #2
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	79fa      	ldrb	r2, [r7, #7]
 8003b5a:	49ae      	ldr	r1, [pc, #696]	; (8003e14 <make_curve+0x2e8>)
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	1ac3      	subs	r3, r0, r3
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	0fda      	lsrs	r2, r3, #31
 8003b70:	4413      	add	r3, r2
 8003b72:	105b      	asrs	r3, r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	49a6      	ldr	r1, [pc, #664]	; (8003e14 <make_curve+0x2e8>)
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	4403      	add	r3, r0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 8003b8a:	79bb      	ldrb	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00f      	beq.n	8003bb0 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 8003b90:	4ba1      	ldr	r3, [pc, #644]	; (8003e18 <make_curve+0x2ec>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003baa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003bae:	e00b      	b.n	8003bc8 <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 8003bb0:	4b99      	ldr	r3, [pc, #612]	; (8003e18 <make_curve+0x2ec>)
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bbc:	eddf 6a97 	vldr	s13, [pc, #604]	; 8003e1c <make_curve+0x2f0>
 8003bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bc4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 8003bc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d51f      	bpl.n	8003c1a <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 8003bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003be6:	ee16 0a90 	vmov	r0, s13
 8003bea:	f7fc fccd 	bl	8000588 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	ec43 2b10 	vmov	d0, r2, r3
 8003bf6:	f00d fc6f 	bl	80114d8 <trunc>
 8003bfa:	ec51 0b10 	vmov	r0, r1, d0
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <make_curve+0x2f4>)
 8003c04:	f7fc fb62 	bl	80002cc <__adddf3>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fc ffc2 	bl	8000b98 <__aeabi_d2iz>
 8003c14:	4603      	mov	r3, r0
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c18:	e010      	b.n	8003c3c <make_curve+0x110>
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8003c1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003c1c:	f7fc fcb4 	bl	8000588 <__aeabi_f2d>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	ec43 2b10 	vmov	d0, r2, r3
 8003c28:	f00d fc56 	bl	80114d8 <trunc>
 8003c2c:	ec53 2b10 	vmov	r2, r3, d0
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7fc ffb0 	bl	8000b98 <__aeabi_d2iz>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	curve_x_size = display_align_curves() / 2;		// half the data points to fit screen size
 8003c3c:	f7ff fdd2 	bl	80037e4 <display_align_curves>
 8003c40:	4603      	mov	r3, r0
 8003c42:	0fda      	lsrs	r2, r3, #31
 8003c44:	4413      	add	r3, r2
 8003c46:	105b      	asrs	r3, r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <make_curve+0x2f8>)
 8003c4c:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003c4e:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <make_curve+0x2ec>)
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f1c3 0301 	rsb	r3, r3, #1
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003c5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	d567      	bpl.n	8003d3e <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	496d      	ldr	r1, [pc, #436]	; (8003e28 <make_curve+0x2fc>)
 8003c72:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c76:	fb03 f202 	mul.w	r2, r3, r2
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003c82:	461c      	mov	r4, r3
 8003c84:	79fa      	ldrb	r2, [r7, #7]
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	3301      	adds	r3, #1
 8003c8a:	4967      	ldr	r1, [pc, #412]	; (8003e28 <make_curve+0x2fc>)
 8003c8c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003c90:	fb00 f202 	mul.w	r2, r0, r2
 8003c94:	4413      	add	r3, r2
 8003c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003c9a:	4423      	add	r3, r4
 8003c9c:	0fda      	lsrs	r2, r3, #31
 8003c9e:	4413      	add	r3, r2
 8003ca0:	105b      	asrs	r3, r3, #1
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	1ad2      	subs	r2, r2, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	bfb8      	it	lt
 8003cbe:	4613      	movlt	r3, r2
 8003cc0:	4a5a      	ldr	r2, [pc, #360]	; (8003e2c <make_curve+0x300>)
 8003cc2:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc8:	e032      	b.n	8003d30 <make_curve+0x204>
			src_idx+=2;
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	3302      	adds	r3, #2
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	4955      	ldr	r1, [pc, #340]	; (8003e28 <make_curve+0x2fc>)
 8003cd4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003cd8:	fb03 f202 	mul.w	r2, r3, r2
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cde:	4413      	add	r3, r2
 8003ce0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003ce4:	461c      	mov	r4, r3
 8003ce6:	79fa      	ldrb	r2, [r7, #7]
 8003ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cea:	3301      	adds	r3, #1
 8003cec:	494e      	ldr	r1, [pc, #312]	; (8003e28 <make_curve+0x2fc>)
 8003cee:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003cf2:	fb00 f202 	mul.w	r2, r0, r2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003cfc:	4423      	add	r3, r4
 8003cfe:	0fda      	lsrs	r2, r3, #31
 8003d00:	4413      	add	r3, r2
 8003d02:	105b      	asrs	r3, r3, #1
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	1ad2      	subs	r2, r2, r3
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	bfb8      	it	lt
 8003d20:	461a      	movlt	r2, r3
 8003d22:	4942      	ldr	r1, [pc, #264]	; (8003e2c <make_curve+0x300>)
 8003d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d30:	4b3c      	ldr	r3, [pc, #240]	; (8003e24 <make_curve+0x2f8>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	dbc6      	blt.n	8003cca <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 8003d3c:	e066      	b.n	8003e0c <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	4939      	ldr	r1, [pc, #228]	; (8003e28 <make_curve+0x2fc>)
 8003d42:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003d46:	fb03 f202 	mul.w	r2, r3, r2
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d52:	461c      	mov	r4, r3
 8003d54:	79fa      	ldrb	r2, [r7, #7]
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	3301      	adds	r3, #1
 8003d5a:	4933      	ldr	r1, [pc, #204]	; (8003e28 <make_curve+0x2fc>)
 8003d5c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003d60:	fb00 f202 	mul.w	r2, r0, r2
 8003d64:	4413      	add	r3, r2
 8003d66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d6a:	4423      	add	r3, r4
 8003d6c:	0fda      	lsrs	r2, r3, #31
 8003d6e:	4413      	add	r3, r2
 8003d70:	105b      	asrs	r3, r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	bfb8      	it	lt
 8003d8e:	4613      	movlt	r3, r2
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <make_curve+0x300>)
 8003d92:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8003d94:	2301      	movs	r3, #1
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	e032      	b.n	8003e00 <make_curve+0x2d4>
			src_idx+=2;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	4921      	ldr	r1, [pc, #132]	; (8003e28 <make_curve+0x2fc>)
 8003da4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003da8:	fb03 f202 	mul.w	r2, r3, r2
 8003dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dae:	4413      	add	r3, r2
 8003db0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003db4:	461c      	mov	r4, r3
 8003db6:	79fa      	ldrb	r2, [r7, #7]
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	3301      	adds	r3, #1
 8003dbc:	491a      	ldr	r1, [pc, #104]	; (8003e28 <make_curve+0x2fc>)
 8003dbe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003dc2:	fb00 f202 	mul.w	r2, r0, r2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003dcc:	4423      	add	r3, r4
 8003dce:	0fda      	lsrs	r2, r3, #31
 8003dd0:	4413      	add	r3, r2
 8003dd2:	105b      	asrs	r3, r3, #1
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	bfb8      	it	lt
 8003df0:	461a      	movlt	r2, r3
 8003df2:	490e      	ldr	r1, [pc, #56]	; (8003e2c <make_curve+0x300>)
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_x_size; pos_x++) {
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <make_curve+0x2f8>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	dbc6      	blt.n	8003d9a <make_curve+0x26e>
}
 8003e0c:	bf00      	nop
 8003e0e:	3754      	adds	r7, #84	; 0x54
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	2000023c 	.word	0x2000023c
 8003e18:	20000008 	.word	0x20000008
 8003e1c:	457ff000 	.word	0x457ff000
 8003e20:	3ff00000 	.word	0x3ff00000
 8003e24:	2000084e 	.word	0x2000084e
 8003e28:	20000850 	.word	0x20000850
 8003e2c:	20000504 	.word	0x20000504

08003e30 <display_show_curves>:

/*
 * @brief   Display curves for voltage + selected current channels on TFT display
 */
void display_show_curves(void) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
	uint8_t adc_channel;
	make_curve(ADC_CH_V, 0);
 8003e36:	2100      	movs	r1, #0
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff fe77 	bl	8003b2c <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 8003e3e:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <display_show_curves+0xa4>)
 8003e40:	8818      	ldrh	r0, [r3, #0]
 8003e42:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <display_show_curves+0xa8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	0fdb      	lsrs	r3, r3, #31
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2100      	movs	r1, #0
 8003e50:	f7ff fd80 	bl	8003954 <draw_curve>

	switch(display_channel) {
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <display_show_curves+0xac>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d00c      	beq.n	8003e76 <display_show_curves+0x46>
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	dc0d      	bgt.n	8003e7c <display_show_curves+0x4c>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <display_show_curves+0x3a>
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d003      	beq.n	8003e70 <display_show_curves+0x40>
 8003e68:	e008      	b.n	8003e7c <display_show_curves+0x4c>
	case I1:
		adc_channel = ADC_CH_I1;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	71fb      	strb	r3, [r7, #7]
		break;
 8003e6e:	e007      	b.n	8003e80 <display_show_curves+0x50>
	case I2:
		adc_channel = ADC_CH_I2;
 8003e70:	2302      	movs	r3, #2
 8003e72:	71fb      	strb	r3, [r7, #7]
		break;
 8003e74:	e004      	b.n	8003e80 <display_show_curves+0x50>
	case I3:
		adc_channel = ADC_CH_I3;
 8003e76:	2301      	movs	r3, #1
 8003e78:	71fb      	strb	r3, [r7, #7]
		break;
 8003e7a:	e001      	b.n	8003e80 <display_show_curves+0x50>
	default:
		adc_channel = ADC_CH_I1;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	71fb      	strb	r3, [r7, #7]
	}
	if (!sample_buf_meta[adc_channel].value_is_zero) {
 8003e80:	79fa      	ldrb	r2, [r7, #7]
 8003e82:	4915      	ldr	r1, [pc, #84]	; (8003ed8 <display_show_curves+0xa8>)
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	330d      	adds	r3, #13
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11a      	bne.n	8003ecc <display_show_curves+0x9c>
		make_curve(adc_channel, 1);
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fe46 	bl	8003b2c <make_curve>
		draw_curve(channel_colour[display_channel+1], 1, (sample_buf_meta[adc_channel].zero_cross_pos >= 0));
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <display_show_curves+0xac>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <display_show_curves+0xa4>)
 8003ea8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8003eac:	79fa      	ldrb	r2, [r7, #7]
 8003eae:	490a      	ldr	r1, [pc, #40]	; (8003ed8 <display_show_curves+0xa8>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	0fdb      	lsrs	r3, r3, #31
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	f7ff fd44 	bl	8003954 <draw_curve>
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	2000023c 	.word	0x2000023c
 8003edc:	20000501 	.word	0x20000501

08003ee0 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 8003ee4:	23c8      	movs	r3, #200	; 0xc8
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	21a0      	movs	r1, #160	; 0xa0
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <ee24_isConnected+0x20>)
 8003eec:	f005 fea6 	bl	8009c3c <HAL_I2C_IsDeviceReady>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <ee24_isConnected+0x1a>
    return false;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <ee24_isConnected+0x1c>

  return true;
 8003efa:	2301      	movs	r3, #1
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200022c8 	.word	0x200022c8

08003f04 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af04      	add	r7, sp, #16
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <ee24_write_word+0x58>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <ee24_write_word+0x18>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e01a      	b.n	8003f52 <ee24_write_word+0x4e>
	ee24_lock = 1;
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <ee24_write_word+0x58>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK)
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	2364      	movs	r3, #100	; 0x64
 8003f26:	9302      	str	r3, [sp, #8]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2301      	movs	r3, #1
 8003f32:	21a0      	movs	r1, #160	; 0xa0
 8003f34:	480a      	ldr	r0, [pc, #40]	; (8003f60 <ee24_write_word+0x5c>)
 8003f36:	f005 fb61 	bl	80095fc <HAL_I2C_Mem_Write>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <ee24_write_word+0x46>
	//if (HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <ee24_write_word+0x58>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		return false;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e003      	b.n	8003f52 <ee24_write_word+0x4e>
	}
	ee24_lock = 0;
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <ee24_write_word+0x58>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
	return true;
 8003f50:	2301      	movs	r3, #1
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20002176 	.word	0x20002176
 8003f60:	200022c8 	.word	0x200022c8

08003f64 <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af04      	add	r7, sp, #16
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <ee24_read_word+0x58>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <ee24_read_word+0x18>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e01b      	b.n	8003fb4 <ee24_read_word+0x50>
	ee24_lock = 1;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <ee24_read_word+0x58>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK )
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	2364      	movs	r3, #100	; 0x64
 8003f88:	9302      	str	r3, [sp, #8]
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2301      	movs	r3, #1
 8003f94:	21a0      	movs	r1, #160	; 0xa0
 8003f96:	480a      	ldr	r0, [pc, #40]	; (8003fc0 <ee24_read_word+0x5c>)
 8003f98:	f005 fc2a 	bl	80097f0 <HAL_I2C_Mem_Read>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <ee24_read_word+0x48>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <ee24_read_word+0x58>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
		return false;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e003      	b.n	8003fb4 <ee24_read_word+0x50>
	}
	ee24_lock = 0;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <ee24_read_word+0x58>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
	return true;
 8003fb2:	2301      	movs	r3, #1
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20002176 	.word	0x20002176
 8003fc0:	200022c8 	.word	0x200022c8

08003fc4 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003fc8:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003fcc:	490d      	ldr	r1, [pc, #52]	; (8004004 <start_adcs+0x40>)
 8003fce:	480e      	ldr	r0, [pc, #56]	; (8004008 <start_adcs+0x44>)
 8003fd0:	f003 ff04 	bl	8007ddc <HAL_ADC_Start_DMA>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 8003fda:	480c      	ldr	r0, [pc, #48]	; (800400c <start_adcs+0x48>)
 8003fdc:	f001 fbee 	bl	80057bc <term_print>
  	  Error_Handler();
 8003fe0:	f000 ffaa 	bl	8004f38 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003fe4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003fe8:	4909      	ldr	r1, [pc, #36]	; (8004010 <start_adcs+0x4c>)
 8003fea:	480a      	ldr	r0, [pc, #40]	; (8004014 <start_adcs+0x50>)
 8003fec:	f003 fef6 	bl	8007ddc <HAL_ADC_Start_DMA>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <start_adcs+0x54>)
 8003ff8:	f001 fbe0 	bl	80057bc <term_print>
 	  Error_Handler();
 8003ffc:	f000 ff9c 	bl	8004f38 <Error_Handler>
	}
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20002658 	.word	0x20002658
 8004008:	20002178 	.word	0x20002178
 800400c:	080117ec 	.word	0x080117ec
 8004010:	20004098 	.word	0x20004098
 8004014:	200021c0 	.word	0x200021c0
 8004018:	08011808 	.word	0x08011808

0800401c <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	460a      	mov	r2, r1
 8004026:	80fb      	strh	r3, [r7, #6]
 8004028:	4613      	mov	r3, r2
 800402a:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004032:	4293      	cmp	r3, r2
 8004034:	d803      	bhi.n	800403e <adjust_TIM2_period+0x22>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800403c:	d205      	bcs.n	800404a <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4619      	mov	r1, r3
 8004042:	4808      	ldr	r0, [pc, #32]	; (8004064 <adjust_TIM2_period+0x48>)
 8004044:	f001 fbba 	bl	80057bc <term_print>
		return;
 8004048:	e008      	b.n	800405c <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 800404a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4619      	mov	r1, r3
 8004056:	4804      	ldr	r0, [pc, #16]	; (8004068 <adjust_TIM2_period+0x4c>)
 8004058:	f001 fbb0 	bl	80057bc <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	08011824 	.word	0x08011824
 8004068:	08011844 	.word	0x08011844

0800406c <version_change>:

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	460a      	mov	r2, r1
 8004076:	71fb      	strb	r3, [r7, #7]
 8004078:	4613      	mov	r3, r2
 800407a:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <version_change+0x40>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <version_change+0x40>)
 8004084:	2202      	movs	r2, #2
 8004086:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8004088:	4908      	ldr	r1, [pc, #32]	; (80040ac <version_change+0x40>)
 800408a:	2000      	movs	r0, #0
 800408c:	f7ff ff3a 	bl	8003f04 <ee24_write_word>
 8004090:	4603      	mov	r3, r0
 8004092:	f083 0301 	eor.w	r3, r3, #1
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <version_change+0x36>
		term_print("Error: EEPROM write failed\r\n");
 800409c:	4804      	ldr	r0, [pc, #16]	; (80040b0 <version_change+0x44>)
 800409e:	f001 fb8d 	bl	80057bc <term_print>
	}
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	2000262c 	.word	0x2000262c
 80040b0:	08011854 	.word	0x08011854

080040b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040ba:	f003 fdb5 	bl	8007c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040be:	f000 fae9 	bl	8004694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040c2:	f000 fd5b 	bl	8004b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80040c6:	f000 fd1b 	bl	8004b00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80040ca:	f000 fcc5 	bl	8004a58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80040ce:	f000 fc77 	bl	80049c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80040d2:	f000 fb51 	bl	8004778 <MX_ADC1_Init>
  MX_ADC2_Init();
 80040d6:	f000 fbaf 	bl	8004838 <MX_ADC2_Init>
  MX_SPI2_Init();
 80040da:	f000 fc3b 	bl	8004954 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80040de:	f000 fce5 	bl	8004aac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80040e2:	f000 fc09 	bl	80048f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 80040e6:	f7fe feb9 	bl	8002e5c <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 80040ea:	2201      	movs	r2, #1
 80040ec:	499c      	ldr	r1, [pc, #624]	; (8004360 <main+0x2ac>)
 80040ee:	489d      	ldr	r0, [pc, #628]	; (8004364 <main+0x2b0>)
 80040f0:	f008 faab 	bl	800c64a <HAL_UART_Receive_IT>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <main+0x4a>
    Error_Handler();
 80040fa:	f000 ff1d 	bl	8004f38 <Error_Handler>
      Error_Handler();
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80040fe:	489a      	ldr	r0, [pc, #616]	; (8004368 <main+0x2b4>)
 8004100:	f007 fd88 	bl	800bc14 <HAL_TIM_Base_Start_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <main+0x5a>
     Error_Handler();
 800410a:	f000 ff15 	bl	8004f38 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 800410e:	f7ff ff59 	bl	8003fc4 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 8004112:	f7fe fec5 	bl	8002ea0 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 8004116:	f003 fded 	bl	8007cf4 <HAL_GetTick>
 800411a:	4603      	mov	r3, r0
 800411c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004120:	4a92      	ldr	r2, [pc, #584]	; (800436c <main+0x2b8>)
 8004122:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8004124:	4b92      	ldr	r3, [pc, #584]	; (8004370 <main+0x2bc>)
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	2302      	movs	r3, #2
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2300      	movs	r3, #0
 800412e:	4a91      	ldr	r2, [pc, #580]	; (8004374 <main+0x2c0>)
 8004130:	4991      	ldr	r1, [pc, #580]	; (8004378 <main+0x2c4>)
 8004132:	4892      	ldr	r0, [pc, #584]	; (800437c <main+0x2c8>)
 8004134:	f009 ff70 	bl	800e018 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8004138:	4890      	ldr	r0, [pc, #576]	; (800437c <main+0x2c8>)
 800413a:	f7fc f8b9 	bl	80002b0 <strlen>
 800413e:	4603      	mov	r3, r0
 8004140:	b29a      	uxth	r2, r3
 8004142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004146:	498d      	ldr	r1, [pc, #564]	; (800437c <main+0x2c8>)
 8004148:	4886      	ldr	r0, [pc, #536]	; (8004364 <main+0x2b0>)
 800414a:	f008 f9ec 	bl	800c526 <HAL_UART_Transmit>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <main+0xa4>
	  Error_Handler();
 8004154:	f000 fef0 	bl	8004f38 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 8004158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4619      	mov	r1, r3
 8004160:	4887      	ldr	r0, [pc, #540]	; (8004380 <main+0x2cc>)
 8004162:	f001 fb2b 	bl	80057bc <term_print>
  if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
  	  Error_Handler();
  }*/
#endif

  if (!ee24_isConnected()) {
 8004166:	f7ff febb 	bl	8003ee0 <ee24_isConnected>
 800416a:	4603      	mov	r3, r0
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <main+0xca>
	  term_print("Error: EEPROM not found\r\n");
 8004176:	4883      	ldr	r0, [pc, #524]	; (8004384 <main+0x2d0>)
 8004178:	f001 fb20 	bl	80057bc <term_print>
 800417c:	e049      	b.n	8004212 <main+0x15e>
  } else {
	  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 800417e:	4982      	ldr	r1, [pc, #520]	; (8004388 <main+0x2d4>)
 8004180:	2000      	movs	r0, #0
 8004182:	f7ff feef 	bl	8003f64 <ee24_read_word>
 8004186:	4603      	mov	r3, r0
 8004188:	f083 0301 	eor.w	r3, r3, #1
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <main+0xe6>
		  term_print("Error: EEPROM read error\r\n");
 8004192:	487e      	ldr	r0, [pc, #504]	; (800438c <main+0x2d8>)
 8004194:	f001 fb12 	bl	80057bc <term_print>
 8004198:	e03b      	b.n	8004212 <main+0x15e>
	  } else {
		term_print("EEPROM Version: V%d.%02d\r\n", eeprom_buf[0], eeprom_buf[1]);
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <main+0x2d4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	4b79      	ldr	r3, [pc, #484]	; (8004388 <main+0x2d4>)
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	4879      	ldr	r0, [pc, #484]	; (8004390 <main+0x2dc>)
 80041ac:	f001 fb06 	bl	80057bc <term_print>
		if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 80041b0:	4b75      	ldr	r3, [pc, #468]	; (8004388 <main+0x2d4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2bff      	cmp	r3, #255	; 0xff
 80041b8:	d117      	bne.n	80041ea <main+0x136>
 80041ba:	4b73      	ldr	r3, [pc, #460]	; (8004388 <main+0x2d4>)
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2bff      	cmp	r3, #255	; 0xff
 80041c2:	d112      	bne.n	80041ea <main+0x136>
			eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80041c4:	4b70      	ldr	r3, [pc, #448]	; (8004388 <main+0x2d4>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <main+0x2d4>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	705a      	strb	r2, [r3, #1]
			if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 80041d0:	496d      	ldr	r1, [pc, #436]	; (8004388 <main+0x2d4>)
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7ff fe96 	bl	8003f04 <ee24_write_word>
 80041d8:	4603      	mov	r3, r0
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <main+0x136>
				term_print("Error: EEPROM write failed\r\n");
 80041e4:	486b      	ldr	r0, [pc, #428]	; (8004394 <main+0x2e0>)
 80041e6:	f001 fae9 	bl	80057bc <term_print>
			}
		}
		// Detect version change
		if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 80041ea:	4b67      	ldr	r3, [pc, #412]	; (8004388 <main+0x2d4>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <main+0x14a>
 80041f4:	4b64      	ldr	r3, [pc, #400]	; (8004388 <main+0x2d4>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d009      	beq.n	8004212 <main+0x15e>
			version_change(eeprom_buf[0], eeprom_buf[1]);
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <main+0x2d4>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	4a60      	ldr	r2, [pc, #384]	; (8004388 <main+0x2d4>)
 8004206:	7852      	ldrb	r2, [r2, #1]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff2d 	bl	800406c <version_change>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8004212:	f003 fd6f 	bl	8007cf4 <HAL_GetTick>
 8004216:	4603      	mov	r3, r0
 8004218:	3364      	adds	r3, #100	; 0x64
 800421a:	4a5f      	ldr	r2, [pc, #380]	; (8004398 <main+0x2e4>)
 800421c:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 800421e:	f003 fd69 	bl	8007cf4 <HAL_GetTick>
 8004222:	4603      	mov	r3, r0
 8004224:	3364      	adds	r3, #100	; 0x64
 8004226:	4a5d      	ldr	r2, [pc, #372]	; (800439c <main+0x2e8>)
 8004228:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 800422a:	f003 fd63 	bl	8007cf4 <HAL_GetTick>
 800422e:	4603      	mov	r3, r0
 8004230:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <main+0x2ec>)
 8004232:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 8004234:	4b5a      	ldr	r3, [pc, #360]	; (80043a0 <main+0x2ec>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <main+0x2f0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d21b      	bcs.n	8004278 <main+0x1c4>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8004240:	4b57      	ldr	r3, [pc, #348]	; (80043a0 <main+0x2ec>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3364      	adds	r3, #100	; 0x64
 8004246:	4a54      	ldr	r2, [pc, #336]	; (8004398 <main+0x2e4>)
 8004248:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <main+0x2f4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <main+0x1ae>
 8004252:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <main+0x2ec>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800425a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800425e:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <main+0x2f4>)
 8004260:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8004262:	4b4f      	ldr	r3, [pc, #316]	; (80043a0 <main+0x2ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800426a:	4a50      	ldr	r2, [pc, #320]	; (80043ac <main+0x2f8>)
 800426c:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 800426e:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <main+0x2ec>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3364      	adds	r3, #100	; 0x64
 8004274:	4a49      	ldr	r2, [pc, #292]	; (800439c <main+0x2e8>)
 8004276:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 8004278:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <main+0x2ec>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a49      	ldr	r2, [pc, #292]	; (80043a4 <main+0x2f0>)
 800427e:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 8004280:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <main+0x2ec>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b45      	ldr	r3, [pc, #276]	; (800439c <main+0x2e8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d316      	bcc.n	80042ba <main+0x206>
		next_measurement_time += MEASUREMENT_INTERVAL;
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <main+0x2e8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3364      	adds	r3, #100	; 0x64
 8004292:	4a42      	ldr	r2, [pc, #264]	; (800439c <main+0x2e8>)
 8004294:	6013      	str	r3, [r2, #0]
		calc_measurements();
 8004296:	f7fd fc03 	bl	8001aa0 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 800429a:	2140      	movs	r1, #64	; 0x40
 800429c:	4844      	ldr	r0, [pc, #272]	; (80043b0 <main+0x2fc>)
 800429e:	f005 f805 	bl	80092ac <HAL_GPIO_ReadPin>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d108      	bne.n	80042ba <main+0x206>
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <main+0x300>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <main+0x206>
			display_update_meter(display_screen);
 80042b0:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <main+0x300>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe ffc5 	bl	8003244 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <main+0x2ec>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <main+0x2e4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f0c0 813c 	bcc.w	8004540 <main+0x48c>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80042c8:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <main+0x2ec>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3364      	adds	r3, #100	; 0x64
 80042ce:	4a32      	ldr	r2, [pc, #200]	; (8004398 <main+0x2e4>)
 80042d0:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <main+0x2b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <main+0x24e>
			if (now_ticks >= display_splash_ticks) {
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <main+0x2ec>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <main+0x2b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d30d      	bcc.n	8004302 <main+0x24e>
				display_splash_ticks = 0;
 80042e6:	4b21      	ldr	r3, [pc, #132]	; (800436c <main+0x2b8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 80042ec:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <main+0x300>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 80042f2:	4b2b      	ldr	r3, [pc, #172]	; (80043a0 <main+0x2ec>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80042fa:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80042fe:	4a2a      	ldr	r2, [pc, #168]	; (80043a8 <main+0x2f4>)
 8004300:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8004302:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <main+0x304>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d06c      	beq.n	80043e6 <main+0x332>
			if (esp_mode) {
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <main+0x308>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d05f      	beq.n	80043d4 <main+0x320>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8004314:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <main+0x30c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b7e      	cmp	r3, #126	; 0x7e
 800431c:	d106      	bne.n	800432c <main+0x278>
					esp_mode = 0;
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <main+0x308>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8004324:	4827      	ldr	r0, [pc, #156]	; (80043c4 <main+0x310>)
 8004326:	f001 fa49 	bl	80057bc <term_print>
 800432a:	e056      	b.n	80043da <main+0x326>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 800432c:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <main+0x30c>)
 800432e:	4926      	ldr	r1, [pc, #152]	; (80043c8 <main+0x314>)
 8004330:	4812      	ldr	r0, [pc, #72]	; (800437c <main+0x2c8>)
 8004332:	f009 fe71 	bl	800e018 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8004336:	4811      	ldr	r0, [pc, #68]	; (800437c <main+0x2c8>)
 8004338:	f7fb ffba 	bl	80002b0 <strlen>
 800433c:	4603      	mov	r3, r0
 800433e:	b29a      	uxth	r2, r3
 8004340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004344:	490d      	ldr	r1, [pc, #52]	; (800437c <main+0x2c8>)
 8004346:	4821      	ldr	r0, [pc, #132]	; (80043cc <main+0x318>)
 8004348:	f008 f8ed 	bl	800c526 <HAL_UART_Transmit>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <main+0x2a2>
						Error_Handler();
 8004352:	f000 fdf1 	bl	8004f38 <Error_Handler>
					}
					term_print("%s", msg_buf);
 8004356:	4909      	ldr	r1, [pc, #36]	; (800437c <main+0x2c8>)
 8004358:	481d      	ldr	r0, [pc, #116]	; (80043d0 <main+0x31c>)
 800435a:	f001 fa2f 	bl	80057bc <term_print>
 800435e:	e03c      	b.n	80043da <main+0x326>
 8004360:	200025a6 	.word	0x200025a6
 8004364:	2000241c 	.word	0x2000241c
 8004368:	200023d4 	.word	0x200023d4
 800436c:	20008254 	.word	0x20008254
 8004370:	08015cd4 	.word	0x08015cd4
 8004374:	08015cd0 	.word	0x08015cd0
 8004378:	08011874 	.word	0x08011874
 800437c:	200024a4 	.word	0x200024a4
 8004380:	08011888 	.word	0x08011888
 8004384:	08011898 	.word	0x08011898
 8004388:	2000262c 	.word	0x2000262c
 800438c:	080118b4 	.word	0x080118b4
 8004390:	080118d0 	.word	0x080118d0
 8004394:	08011854 	.word	0x08011854
 8004398:	20008268 	.word	0x20008268
 800439c:	20008264 	.word	0x20008264
 80043a0:	2000825c 	.word	0x2000825c
 80043a4:	20008260 	.word	0x20008260
 80043a8:	2000824c 	.word	0x2000824c
 80043ac:	20008258 	.word	0x20008258
 80043b0:	40020000 	.word	0x40020000
 80043b4:	20002644 	.word	0x20002644
 80043b8:	20002628 	.word	0x20002628
 80043bc:	20002641 	.word	0x20002641
 80043c0:	200025a8 	.word	0x200025a8
 80043c4:	080118ec 	.word	0x080118ec
 80043c8:	08011908 	.word	0x08011908
 80043cc:	20002460 	.word	0x20002460
 80043d0:	08011910 	.word	0x08011910
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 80043d4:	4897      	ldr	r0, [pc, #604]	; (8004634 <main+0x580>)
 80043d6:	f7fe fd21 	bl	8002e1c <CMD_Handler>
			}
			cli_rx_count = 0;
 80043da:	4b97      	ldr	r3, [pc, #604]	; (8004638 <main+0x584>)
 80043dc:	2200      	movs	r2, #0
 80043de:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 80043e0:	4b96      	ldr	r3, [pc, #600]	; (800463c <main+0x588>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 80043e6:	4b96      	ldr	r3, [pc, #600]	; (8004640 <main+0x58c>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <main+0x344>
		  adc_restart = 0;
 80043ee:	4b94      	ldr	r3, [pc, #592]	; (8004640 <main+0x58c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 80043f4:	f7ff fde6 	bl	8003fc4 <start_adcs>
		}

		if (new_time_period) {
 80043f8:	4b92      	ldr	r3, [pc, #584]	; (8004644 <main+0x590>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <main+0x35e>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8004400:	4b90      	ldr	r3, [pc, #576]	; (8004644 <main+0x590>)
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe08 	bl	800401c <adjust_TIM2_period>
		  new_time_period = 0;
 800440c:	4b8d      	ldr	r3, [pc, #564]	; (8004644 <main+0x590>)
 800440e:	2200      	movs	r2, #0
 8004410:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8004412:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <main+0x594>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d018      	beq.n	800444e <main+0x39a>
			display_screen++;
 800441c:	4b8b      	ldr	r3, [pc, #556]	; (800464c <main+0x598>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	4b89      	ldr	r3, [pc, #548]	; (800464c <main+0x598>)
 8004426:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 8004428:	4b88      	ldr	r3, [pc, #544]	; (800464c <main+0x598>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d902      	bls.n	8004436 <main+0x382>
				display_screen = 1;
 8004430:	4b86      	ldr	r3, [pc, #536]	; (800464c <main+0x598>)
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 8004436:	4b84      	ldr	r3, [pc, #528]	; (8004648 <main+0x594>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;	// restart screen saver
 800443c:	f003 fc5a 	bl	8007cf4 <HAL_GetTick>
 8004440:	4603      	mov	r3, r0
 8004442:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8004446:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800444a:	4a81      	ldr	r2, [pc, #516]	; (8004650 <main+0x59c>)
 800444c:	6013      	str	r3, [r2, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 800444e:	4b80      	ldr	r3, [pc, #512]	; (8004650 <main+0x59c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <main+0x3ba>
 8004456:	4b7f      	ldr	r3, [pc, #508]	; (8004654 <main+0x5a0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b7d      	ldr	r3, [pc, #500]	; (8004650 <main+0x59c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d305      	bcc.n	800446e <main+0x3ba>
			Displ_BackLight('0');
 8004462:	2030      	movs	r0, #48	; 0x30
 8004464:	f002 fec0 	bl	80071e8 <Displ_BackLight>
	  		display_off_ticks = 0;
 8004468:	4b79      	ldr	r3, [pc, #484]	; (8004650 <main+0x59c>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 800446e:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <main+0x5a4>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02b      	beq.n	80044ce <main+0x41a>
			if (tft_display == 9) {
 8004476:	4b78      	ldr	r3, [pc, #480]	; (8004658 <main+0x5a4>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b09      	cmp	r3, #9
 800447c:	d10e      	bne.n	800449c <main+0x3e8>
				term_print("Running TFT performance test ...\r\n");
 800447e:	4877      	ldr	r0, [pc, #476]	; (800465c <main+0x5a8>)
 8004480:	f001 f99c 	bl	80057bc <term_print>
				Displ_BackLight('1');
 8004484:	2031      	movs	r0, #49	; 0x31
 8004486:	f002 feaf 	bl	80071e8 <Displ_BackLight>
				Displ_TestAll();
 800448a:	f003 fb77 	bl	8007b7c <Displ_TestAll>
				Displ_BackLight('0');
 800448e:	2030      	movs	r0, #48	; 0x30
 8004490:	f002 feaa 	bl	80071e8 <Displ_BackLight>
				term_print("....completed\r\n");
 8004494:	4872      	ldr	r0, [pc, #456]	; (8004660 <main+0x5ac>)
 8004496:	f001 f991 	bl	80057bc <term_print>
 800449a:	e015      	b.n	80044c8 <main+0x414>
			} else {
				if (tft_display == 1) {
 800449c:	4b6e      	ldr	r3, [pc, #440]	; (8004658 <main+0x5a4>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d103      	bne.n	80044ac <main+0x3f8>
					Displ_BackLight('0');
 80044a4:	2030      	movs	r0, #48	; 0x30
 80044a6:	f002 fe9f 	bl	80071e8 <Displ_BackLight>
 80044aa:	e00d      	b.n	80044c8 <main+0x414>
				} else {
					Displ_BackLight('1');
 80044ac:	2031      	movs	r0, #49	; 0x31
 80044ae:	f002 fe9b 	bl	80071e8 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80044b2:	f003 fc1f 	bl	8007cf4 <HAL_GetTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80044bc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80044c0:	4a63      	ldr	r2, [pc, #396]	; (8004650 <main+0x59c>)
 80044c2:	6013      	str	r3, [r2, #0]
					display_update_mask();
 80044c4:	f7fe ff2c 	bl	8003320 <display_update_mask>
				}
			}
		tft_display = 0;
 80044c8:	4b63      	ldr	r3, [pc, #396]	; (8004658 <main+0x5a4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 80044ce:	4b65      	ldr	r3, [pc, #404]	; (8004664 <main+0x5b0>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <main+0x446>
			display_activate = 0;
 80044d8:	4b62      	ldr	r3, [pc, #392]	; (8004664 <main+0x5b0>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 80044de:	f7fe ff1f 	bl	8003320 <display_update_mask>
			Displ_BackLight('1');
 80044e2:	2031      	movs	r0, #49	; 0x31
 80044e4:	f002 fe80 	bl	80071e8 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 80044e8:	f003 fc04 	bl	8007cf4 <HAL_GetTick>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80044f2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80044f6:	4a56      	ldr	r2, [pc, #344]	; (8004650 <main+0x59c>)
 80044f8:	6013      	str	r3, [r2, #0]
		}

		if (touch_action) {			// touch screen
 80044fa:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <main+0x5b4>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01d      	beq.n	8004540 <main+0x48c>
			touch_action = 0;
 8004504:	4b58      	ldr	r3, [pc, #352]	; (8004668 <main+0x5b4>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
			if (now_ticks < touch_debounce_ticks){
 800450a:	4b52      	ldr	r3, [pc, #328]	; (8004654 <main+0x5a0>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <main+0x5b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d314      	bcc.n	8004540 <main+0x48c>
				;	// do nothing
			} else {
				touch_debounce_ticks = HAL_GetTick() + TOUCH_DEBOUNCE_TIME;
 8004516:	f003 fbed 	bl	8007cf4 <HAL_GetTick>
 800451a:	4603      	mov	r3, r0
 800451c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <main+0x5b8>)
 8004522:	6013      	str	r3, [r2, #0]
				// if Backlight is OFF
				if (HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_RESET) {
 8004524:	2140      	movs	r1, #64	; 0x40
 8004526:	4852      	ldr	r0, [pc, #328]	; (8004670 <main+0x5bc>)
 8004528:	f004 fec0 	bl	80092ac <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <main+0x486>
					display_activate = 1;		// activate backlight
 8004532:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <main+0x5b0>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
 8004538:	e002      	b.n	8004540 <main+0x48c>
				} else {		// backlight is already on -> change display
					display_change = 1;
 800453a:	4b43      	ldr	r3, [pc, #268]	; (8004648 <main+0x594>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8004540:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <main+0x5c0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	dc0b      	bgt.n	8004560 <main+0x4ac>
 8004548:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <main+0x5c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b01      	cmp	r3, #1
 800454e:	dc07      	bgt.n	8004560 <main+0x4ac>
 8004550:	4b4a      	ldr	r3, [pc, #296]	; (800467c <main+0x5c8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	dc03      	bgt.n	8004560 <main+0x4ac>
 8004558:	4b49      	ldr	r3, [pc, #292]	; (8004680 <main+0x5cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	dd1b      	ble.n	8004598 <main+0x4e4>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <main+0x5c0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	dd02      	ble.n	800456e <main+0x4ba>
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <main+0x5c0>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 800456e:	4b42      	ldr	r3, [pc, #264]	; (8004678 <main+0x5c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	dd02      	ble.n	800457c <main+0x4c8>
 8004576:	4b40      	ldr	r3, [pc, #256]	; (8004678 <main+0x5c4>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 800457c:	4b3f      	ldr	r3, [pc, #252]	; (800467c <main+0x5c8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	dd02      	ble.n	800458a <main+0x4d6>
 8004584:	4b3d      	ldr	r3, [pc, #244]	; (800467c <main+0x5c8>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 800458a:	4b3d      	ldr	r3, [pc, #244]	; (8004680 <main+0x5cc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	dd02      	ble.n	8004598 <main+0x4e4>
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <main+0x5cc>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8004598:	4b36      	ldr	r3, [pc, #216]	; (8004674 <main+0x5c0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	dd0e      	ble.n	80045be <main+0x50a>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80045a0:	2100      	movs	r1, #0
 80045a2:	2000      	movs	r0, #0
 80045a4:	f7fc fd3e 	bl	8001024 <calc_process_dma_buffer>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <main+0x500>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 80045ae:	4835      	ldr	r0, [pc, #212]	; (8004684 <main+0x5d0>)
 80045b0:	f001 f904 	bl	80057bc <term_print>
			}
			adc1_dma_l_count--;
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <main+0x5c0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	4a2e      	ldr	r2, [pc, #184]	; (8004674 <main+0x5c0>)
 80045bc:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <main+0x5c4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	dd0e      	ble.n	80045e4 <main+0x530>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 80045c6:	2100      	movs	r1, #0
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7fc fd2b 	bl	8001024 <calc_process_dma_buffer>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <main+0x526>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 80045d4:	482c      	ldr	r0, [pc, #176]	; (8004688 <main+0x5d4>)
 80045d6:	f001 f8f1 	bl	80057bc <term_print>
			}
			adc1_dma_h_count--;
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <main+0x5c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	4a25      	ldr	r2, [pc, #148]	; (8004678 <main+0x5c4>)
 80045e2:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <main+0x5c8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dd0e      	ble.n	800460a <main+0x556>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 80045ec:	2101      	movs	r1, #1
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fc fd18 	bl	8001024 <calc_process_dma_buffer>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <main+0x54c>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 80045fa:	4824      	ldr	r0, [pc, #144]	; (800468c <main+0x5d8>)
 80045fc:	f001 f8de 	bl	80057bc <term_print>
			}
			adc2_dma_l_count--;
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <main+0x5c8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3b01      	subs	r3, #1
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <main+0x5c8>)
 8004608:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <main+0x5cc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f77f ae0b 	ble.w	800422a <main+0x176>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8004614:	2101      	movs	r1, #1
 8004616:	2001      	movs	r0, #1
 8004618:	f7fc fd04 	bl	8001024 <calc_process_dma_buffer>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <main+0x574>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8004622:	481b      	ldr	r0, [pc, #108]	; (8004690 <main+0x5dc>)
 8004624:	f001 f8ca 	bl	80057bc <term_print>
			}
			adc2_dma_h_count--;
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <main+0x5cc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3b01      	subs	r3, #1
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <main+0x5cc>)
 8004630:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8004632:	e5fa      	b.n	800422a <main+0x176>
 8004634:	200025a8 	.word	0x200025a8
 8004638:	200025a4 	.word	0x200025a4
 800463c:	20002628 	.word	0x20002628
 8004640:	2000263f 	.word	0x2000263f
 8004644:	20002642 	.word	0x20002642
 8004648:	2000263d 	.word	0x2000263d
 800464c:	20002644 	.word	0x20002644
 8004650:	2000824c 	.word	0x2000824c
 8004654:	2000825c 	.word	0x2000825c
 8004658:	20002640 	.word	0x20002640
 800465c:	08011914 	.word	0x08011914
 8004660:	08011938 	.word	0x08011938
 8004664:	2000263c 	.word	0x2000263c
 8004668:	2000263e 	.word	0x2000263e
 800466c:	20008250 	.word	0x20008250
 8004670:	40020000 	.word	0x40020000
 8004674:	20002648 	.word	0x20002648
 8004678:	2000264c 	.word	0x2000264c
 800467c:	20002650 	.word	0x20002650
 8004680:	20002654 	.word	0x20002654
 8004684:	08011948 	.word	0x08011948
 8004688:	08011970 	.word	0x08011970
 800468c:	08011998 	.word	0x08011998
 8004690:	080119c0 	.word	0x080119c0

08004694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b094      	sub	sp, #80	; 0x50
 8004698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800469a:	f107 031c 	add.w	r3, r7, #28
 800469e:	2234      	movs	r2, #52	; 0x34
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f009 fedc 	bl	800e460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <SystemClock_Config+0xdc>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <SystemClock_Config+0xdc>)
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6413      	str	r3, [r2, #64]	; 0x40
 80046c8:	4b29      	ldr	r3, [pc, #164]	; (8004770 <SystemClock_Config+0xdc>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d4:	2300      	movs	r3, #0
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4b26      	ldr	r3, [pc, #152]	; (8004774 <SystemClock_Config+0xe0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a25      	ldr	r2, [pc, #148]	; (8004774 <SystemClock_Config+0xe0>)
 80046de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <SystemClock_Config+0xe0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046f0:	2302      	movs	r3, #2
 80046f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046f4:	2301      	movs	r3, #1
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046f8:	2310      	movs	r3, #16
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046fc:	2302      	movs	r3, #2
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004700:	2300      	movs	r3, #0
 8004702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004704:	2308      	movs	r3, #8
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004708:	23b4      	movs	r3, #180	; 0xb4
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800470c:	2302      	movs	r3, #2
 800470e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004710:	2302      	movs	r3, #2
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004714:	2302      	movs	r3, #2
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004718:	f107 031c 	add.w	r3, r7, #28
 800471c:	4618      	mov	r0, r3
 800471e:	f006 fab1 	bl	800ac84 <HAL_RCC_OscConfig>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004728:	f000 fc06 	bl	8004f38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800472c:	f005 ff10 	bl	800a550 <HAL_PWREx_EnableOverDrive>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004736:	f000 fbff 	bl	8004f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800473a:	230f      	movs	r3, #15
 800473c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800473e:	2302      	movs	r3, #2
 8004740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800474a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800474c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004750:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	2105      	movs	r1, #5
 8004758:	4618      	mov	r0, r3
 800475a:	f005 ff49 	bl	800a5f0 <HAL_RCC_ClockConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004764:	f000 fbe8 	bl	8004f38 <Error_Handler>
  }
}
 8004768:	bf00      	nop
 800476a:	3750      	adds	r7, #80	; 0x50
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	40007000 	.word	0x40007000

08004778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800477e:	463b      	mov	r3, r7
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800478a:	4b29      	ldr	r3, [pc, #164]	; (8004830 <MX_ADC1_Init+0xb8>)
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <MX_ADC1_Init+0xbc>)
 800478e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <MX_ADC1_Init+0xb8>)
 8004792:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <MX_ADC1_Init+0xb8>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80047b2:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047ca:	2202      	movs	r2, #2
 80047cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047d8:	2200      	movs	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047dc:	4814      	ldr	r0, [pc, #80]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047de:	f003 fab9 	bl	8007d54 <HAL_ADC_Init>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80047e8:	f000 fba6 	bl	8004f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80047f4:	2303      	movs	r3, #3
 80047f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047f8:	463b      	mov	r3, r7
 80047fa:	4619      	mov	r1, r3
 80047fc:	480c      	ldr	r0, [pc, #48]	; (8004830 <MX_ADC1_Init+0xb8>)
 80047fe:	f003 fbfd 	bl	8007ffc <HAL_ADC_ConfigChannel>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004808:	f000 fb96 	bl	8004f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800480c:	230a      	movs	r3, #10
 800480e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004810:	2302      	movs	r3, #2
 8004812:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004814:	463b      	mov	r3, r7
 8004816:	4619      	mov	r1, r3
 8004818:	4805      	ldr	r0, [pc, #20]	; (8004830 <MX_ADC1_Init+0xb8>)
 800481a:	f003 fbef 	bl	8007ffc <HAL_ADC_ConfigChannel>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004824:	f000 fb88 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20002178 	.word	0x20002178
 8004834:	40012000 	.word	0x40012000

08004838 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800483e:	463b      	mov	r3, r7
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800484a:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <MX_ADC2_Init+0xbc>)
 800484e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004852:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004856:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004860:	2201      	movs	r2, #1
 8004862:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004866:	2200      	movs	r2, #0
 8004868:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800487c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004884:	2200      	movs	r2, #0
 8004886:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800488a:	2202      	movs	r2, #2
 800488c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800488e:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <MX_ADC2_Init+0xb8>)
 8004898:	2200      	movs	r2, #0
 800489a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800489c:	4814      	ldr	r0, [pc, #80]	; (80048f0 <MX_ADC2_Init+0xb8>)
 800489e:	f003 fa59 	bl	8007d54 <HAL_ADC_Init>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80048a8:	f000 fb46 	bl	8004f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80048ac:	2301      	movs	r3, #1
 80048ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80048b0:	2301      	movs	r3, #1
 80048b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80048b4:	2303      	movs	r3, #3
 80048b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048b8:	463b      	mov	r3, r7
 80048ba:	4619      	mov	r1, r3
 80048bc:	480c      	ldr	r0, [pc, #48]	; (80048f0 <MX_ADC2_Init+0xb8>)
 80048be:	f003 fb9d 	bl	8007ffc <HAL_ADC_ConfigChannel>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80048c8:	f000 fb36 	bl	8004f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80048cc:	230b      	movs	r3, #11
 80048ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80048d0:	2302      	movs	r3, #2
 80048d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048d4:	463b      	mov	r3, r7
 80048d6:	4619      	mov	r1, r3
 80048d8:	4805      	ldr	r0, [pc, #20]	; (80048f0 <MX_ADC2_Init+0xb8>)
 80048da:	f003 fb8f 	bl	8007ffc <HAL_ADC_ConfigChannel>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80048e4:	f000 fb28 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200021c0 	.word	0x200021c0
 80048f4:	40012100 	.word	0x40012100

080048f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <MX_I2C1_Init+0x50>)
 80048fe:	4a13      	ldr	r2, [pc, #76]	; (800494c <MX_I2C1_Init+0x54>)
 8004900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <MX_I2C1_Init+0x50>)
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <MX_I2C1_Init+0x58>)
 8004906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <MX_I2C1_Init+0x50>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <MX_I2C1_Init+0x50>)
 8004910:	2200      	movs	r2, #0
 8004912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <MX_I2C1_Init+0x50>)
 8004916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800491a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <MX_I2C1_Init+0x50>)
 800491e:	2200      	movs	r2, #0
 8004920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <MX_I2C1_Init+0x50>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <MX_I2C1_Init+0x50>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <MX_I2C1_Init+0x50>)
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004934:	4804      	ldr	r0, [pc, #16]	; (8004948 <MX_I2C1_Init+0x50>)
 8004936:	f004 fd1d 	bl	8009374 <HAL_I2C_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004940:	f000 fafa 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200022c8 	.word	0x200022c8
 800494c:	40005400 	.word	0x40005400
 8004950:	00061a80 	.word	0x00061a80

08004954 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <MX_SPI2_Init+0x64>)
 800495a:	4a18      	ldr	r2, [pc, #96]	; (80049bc <MX_SPI2_Init+0x68>)
 800495c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800495e:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004964:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004968:	2200      	movs	r2, #0
 800496a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800496c:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <MX_SPI2_Init+0x64>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004974:	2200      	movs	r2, #0
 8004976:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <MX_SPI2_Init+0x64>)
 800497a:	2200      	movs	r2, #0
 800497c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004984:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004988:	2200      	movs	r2, #0
 800498a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <MX_SPI2_Init+0x64>)
 800498e:	2200      	movs	r2, #0
 8004990:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <MX_SPI2_Init+0x64>)
 8004994:	2200      	movs	r2, #0
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <MX_SPI2_Init+0x64>)
 800499a:	2200      	movs	r2, #0
 800499c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <MX_SPI2_Init+0x64>)
 80049a0:	220a      	movs	r2, #10
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80049a4:	4804      	ldr	r0, [pc, #16]	; (80049b8 <MX_SPI2_Init+0x64>)
 80049a6:	f006 fc0b 	bl	800b1c0 <HAL_SPI_Init>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80049b0:	f000 fac2 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80049b4:	bf00      	nop
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000231c 	.word	0x2000231c
 80049bc:	40003800 	.word	0x40003800

080049c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d4:	463b      	mov	r3, r7
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <MX_TIM2_Init+0x94>)
 80049de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <MX_TIM2_Init+0x94>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <MX_TIM2_Init+0x94>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <MX_TIM2_Init+0x94>)
 80049f2:	f640 02ee 	movw	r2, #2286	; 0x8ee
 80049f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <MX_TIM2_Init+0x94>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <MX_TIM2_Init+0x94>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a04:	4813      	ldr	r0, [pc, #76]	; (8004a54 <MX_TIM2_Init+0x94>)
 8004a06:	f007 f8b5 	bl	800bb74 <HAL_TIM_Base_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004a10:	f000 fa92 	bl	8004f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	4619      	mov	r1, r3
 8004a20:	480c      	ldr	r0, [pc, #48]	; (8004a54 <MX_TIM2_Init+0x94>)
 8004a22:	f007 fa6f 	bl	800bf04 <HAL_TIM_ConfigClockSource>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004a2c:	f000 fa84 	bl	8004f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a30:	2320      	movs	r3, #32
 8004a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a38:	463b      	mov	r3, r7
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4805      	ldr	r0, [pc, #20]	; (8004a54 <MX_TIM2_Init+0x94>)
 8004a3e:	f007 fc95 	bl	800c36c <HAL_TIMEx_MasterConfigSynchronization>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004a48:	f000 fa76 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a4c:	bf00      	nop
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200023d4 	.word	0x200023d4

08004a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <MX_USART2_UART_Init+0x50>)
 8004a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a7e:	220c      	movs	r2, #12
 8004a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a8e:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <MX_USART2_UART_Init+0x4c>)
 8004a90:	f007 fcfc 	bl	800c48c <HAL_UART_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a9a:	f000 fa4d 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000241c 	.word	0x2000241c
 8004aa8:	40004400 	.word	0x40004400

08004aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <MX_USART3_UART_Init+0x50>)
 8004ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004abe:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ad2:	220c      	movs	r2, #12
 8004ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ae2:	4805      	ldr	r0, [pc, #20]	; (8004af8 <MX_USART3_UART_Init+0x4c>)
 8004ae4:	f007 fcd2 	bl	800c48c <HAL_UART_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004aee:	f000 fa23 	bl	8004f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20002460 	.word	0x20002460
 8004afc:	40004800 	.word	0x40004800

08004b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <MX_DMA_Init+0x78>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2100      	movs	r1, #0
 8004b42:	200f      	movs	r0, #15
 8004b44:	f003 fde5 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004b48:	200f      	movs	r0, #15
 8004b4a:	f003 fdfe 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2100      	movs	r1, #0
 8004b52:	2038      	movs	r0, #56	; 0x38
 8004b54:	f003 fddd 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004b58:	2038      	movs	r0, #56	; 0x38
 8004b5a:	f003 fdf6 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	203a      	movs	r0, #58	; 0x3a
 8004b64:	f003 fdd5 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004b68:	203a      	movs	r0, #58	; 0x3a
 8004b6a:	f003 fdee 	bl	800874a <HAL_NVIC_EnableIRQ>

}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800

08004b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b82:	f107 0314 	add.w	r3, r7, #20
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4a60      	ldr	r2, [pc, #384]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4b5a      	ldr	r3, [pc, #360]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a59      	ldr	r2, [pc, #356]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a52      	ldr	r2, [pc, #328]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b4c      	ldr	r3, [pc, #304]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a4b      	ldr	r2, [pc, #300]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bf0:	f043 0302 	orr.w	r3, r3, #2
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <MX_GPIO_Init+0x1a0>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8004c02:	2200      	movs	r2, #0
 8004c04:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8004c08:	4845      	ldr	r0, [pc, #276]	; (8004d20 <MX_GPIO_Init+0x1a4>)
 8004c0a:	f004 fb67 	bl	80092dc <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	4844      	ldr	r0, [pc, #272]	; (8004d24 <MX_GPIO_Init+0x1a8>)
 8004c14:	f004 fb62 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c1e:	4840      	ldr	r0, [pc, #256]	; (8004d20 <MX_GPIO_Init+0x1a4>)
 8004c20:	f004 fb5c 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8004c24:	2200      	movs	r2, #0
 8004c26:	21c0      	movs	r1, #192	; 0xc0
 8004c28:	483f      	ldr	r0, [pc, #252]	; (8004d28 <MX_GPIO_Init+0x1ac>)
 8004c2a:	f004 fb57 	bl	80092dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4837      	ldr	r0, [pc, #220]	; (8004d24 <MX_GPIO_Init+0x1a8>)
 8004c46:	f004 f99d 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8004c4a:	f248 4360 	movw	r3, #33888	; 0x8460
 8004c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4619      	mov	r1, r3
 8004c62:	482f      	ldr	r0, [pc, #188]	; (8004d20 <MX_GPIO_Init+0x1a4>)
 8004c64:	f004 f98e 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c74:	2302      	movs	r3, #2
 8004c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4828      	ldr	r0, [pc, #160]	; (8004d20 <MX_GPIO_Init+0x1a4>)
 8004c80:	f004 f980 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4822      	ldr	r0, [pc, #136]	; (8004d24 <MX_GPIO_Init+0x1a8>)
 8004c9c:	f004 f972 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8004ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4819      	ldr	r0, [pc, #100]	; (8004d20 <MX_GPIO_Init+0x1a4>)
 8004cba:	f004 f963 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4815      	ldr	r0, [pc, #84]	; (8004d28 <MX_GPIO_Init+0x1ac>)
 8004cd4:	f004 f956 	bl	8008f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8004cd8:	23c0      	movs	r3, #192	; 0xc0
 8004cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	4619      	mov	r1, r3
 8004cee:	480e      	ldr	r0, [pc, #56]	; (8004d28 <MX_GPIO_Init+0x1ac>)
 8004cf0:	f004 f948 	bl	8008f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	200a      	movs	r0, #10
 8004cfa:	f003 fd0a 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004cfe:	200a      	movs	r0, #10
 8004d00:	f003 fd23 	bl	800874a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d04:	2200      	movs	r2, #0
 8004d06:	2100      	movs	r1, #0
 8004d08:	2028      	movs	r0, #40	; 0x28
 8004d0a:	f003 fd02 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d0e:	2028      	movs	r0, #40	; 0x28
 8004d10:	f003 fd1b 	bl	800874a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d14:	bf00      	nop
 8004d16:	3728      	adds	r7, #40	; 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020800 	.word	0x40020800
 8004d28:	40020400 	.word	0x40020400

08004d2c <HAL_GPIO_EXTI_Callback>:
//	my_printf("HAL_I2C_MemRxCpltCallback");
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_EXTI_Callback+0x18>
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d004      	beq.n	8004d4c <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8004d42:	e007      	b.n	8004d54 <HAL_GPIO_EXTI_Callback+0x28>
		touch_action = 1;
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_GPIO_EXTI_Callback+0x34>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
		break;
 8004d4a:	e003      	b.n	8004d54 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_GPIO_EXTI_Callback+0x38>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
		break;
 8004d52:	bf00      	nop
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	2000263e 	.word	0x2000263e
 8004d64:	2000263d 	.word	0x2000263d

08004d68 <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_ADC_ConvCpltCallback+0x34>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d105      	bne.n	8004d84 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_ADC_ConvCpltCallback+0x38>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <HAL_ADC_ConvCpltCallback+0x38>)
 8004d80:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8004d82:	e004      	b.n	8004d8e <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a06      	ldr	r2, [pc, #24]	; (8004da4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004d8c:	6013      	str	r3, [r2, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20002178 	.word	0x20002178
 8004da0:	2000264c 	.word	0x2000264c
 8004da4:	20002654 	.word	0x20002654

08004da8 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d105      	bne.n	8004dc4 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8004db8:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004dc0:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8004dc2:	e004      	b.n	8004dce <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8004dcc:	6013      	str	r3, [r2, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20002178 	.word	0x20002178
 8004de0:	20002648 	.word	0x20002648
 8004de4:	20002650 	.word	0x20002650

08004de8 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <HAL_ADC_ErrorCallback+0x94>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d102      	bne.n	8004dfe <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e001      	b.n	8004e02 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d82c      	bhi.n	8004e64 <HAL_ADC_ErrorCallback+0x7c>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <HAL_ADC_ErrorCallback+0x28>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e25 	.word	0x08004e25
 8004e14:	08004e35 	.word	0x08004e35
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e55 	.word	0x08004e55
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	4814      	ldr	r0, [pc, #80]	; (8004e80 <HAL_ADC_ErrorCallback+0x98>)
 8004e2e:	f000 fcc5 	bl	80057bc <term_print>
		break;
 8004e32:	e01e      	b.n	8004e72 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	4811      	ldr	r0, [pc, #68]	; (8004e84 <HAL_ADC_ErrorCallback+0x9c>)
 8004e3e:	f000 fcbd 	bl	80057bc <term_print>
		break;
 8004e42:	e016      	b.n	8004e72 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	480e      	ldr	r0, [pc, #56]	; (8004e88 <HAL_ADC_ErrorCallback+0xa0>)
 8004e4e:	f000 fcb5 	bl	80057bc <term_print>
		break;
 8004e52:	e00e      	b.n	8004e72 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68f9      	ldr	r1, [r7, #12]
 8004e5c:	480b      	ldr	r0, [pc, #44]	; (8004e8c <HAL_ADC_ErrorCallback+0xa4>)
 8004e5e:	f000 fcad 	bl	80057bc <term_print>
		break;
 8004e62:	e006      	b.n	8004e72 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4809      	ldr	r0, [pc, #36]	; (8004e90 <HAL_ADC_ErrorCallback+0xa8>)
 8004e6c:	f000 fca6 	bl	80057bc <term_print>
	}
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20002178 	.word	0x20002178
 8004e80:	080119e8 	.word	0x080119e8
 8004e84:	08011a04 	.word	0x08011a04
 8004e88:	08011a28 	.word	0x08011a28
 8004e8c:	08011a48 	.word	0x08011a48
 8004e90:	08011a64 	.word	0x08011a64

08004e94 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <HAL_UART_RxCpltCallback+0x90>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d13b      	bne.n	8004f1c <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8004eac:	d902      	bls.n	8004eb4 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	491d      	ldr	r1, [pc, #116]	; (8004f2c <HAL_UART_RxCpltCallback+0x98>)
 8004eb8:	481a      	ldr	r0, [pc, #104]	; (8004f24 <HAL_UART_RxCpltCallback+0x90>)
 8004eba:	f007 fbc6 	bl	800c64a <HAL_UART_Receive_IT>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d12a      	bne.n	8004f1a <HAL_UART_RxCpltCallback+0x86>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_UART_RxCpltCallback+0x98>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b0a      	cmp	r3, #10
 8004ecc:	d012      	beq.n	8004ef4 <HAL_UART_RxCpltCallback+0x60>
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_UART_RxCpltCallback+0x98>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b0d      	cmp	r3, #13
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	b291      	uxth	r1, r2
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004ee4:	8011      	strh	r1, [r2, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <HAL_UART_RxCpltCallback+0x98>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b2d9      	uxtb	r1, r3
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_UART_RxCpltCallback+0x9c>)
 8004ef0:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004ef2:	e012      	b.n	8004f1a <HAL_UART_RxCpltCallback+0x86>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <HAL_UART_RxCpltCallback+0x86>
					cli_rx_cmd_ready = 1;
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <HAL_UART_RxCpltCallback+0xa0>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	b291      	uxth	r1, r2
 8004f0e:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <HAL_UART_RxCpltCallback+0x94>)
 8004f10:	8011      	strh	r1, [r2, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_UART_RxCpltCallback+0x9c>)
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]
		return;
 8004f1a:	bf00      	nop
		} else {	// this should never happen
			esp_rx_error_count++;
		}
	}
#endif
}
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	2000241c 	.word	0x2000241c
 8004f28:	200025a4 	.word	0x200025a4
 8004f2c:	200025a6 	.word	0x200025a6
 8004f30:	200025a8 	.word	0x200025a8
 8004f34:	20002628 	.word	0x20002628

08004f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <Error_Handler+0x10>)
 8004f3e:	f009 fa7d 	bl	800e43c <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f42:	b672      	cpsid	i
}
 8004f44:	bf00      	nop
    __disable_irq();
    while (1)
 8004f46:	e7fe      	b.n	8004f46 <Error_Handler+0xe>
 8004f48:	08011a84 	.word	0x08011a84

08004f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a0f      	ldr	r2, [pc, #60]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f6e:	2300      	movs	r3, #0
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004f8a:	2007      	movs	r0, #7
 8004f8c:	f003 fbb6 	bl	80086fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	; 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a79      	ldr	r2, [pc, #484]	; (80051a0 <HAL_ADC_MspInit+0x204>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d173      	bne.n	80050a6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	4b78      	ldr	r3, [pc, #480]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	4a77      	ldr	r2, [pc, #476]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fce:	4b75      	ldr	r3, [pc, #468]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	4b71      	ldr	r3, [pc, #452]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a70      	ldr	r2, [pc, #448]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fe4:	f043 0304 	orr.w	r3, r3, #4
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b6e      	ldr	r3, [pc, #440]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a69      	ldr	r2, [pc, #420]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b67      	ldr	r3, [pc, #412]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005012:	2301      	movs	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005016:	2303      	movs	r3, #3
 8005018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800501e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005022:	4619      	mov	r1, r3
 8005024:	4860      	ldr	r0, [pc, #384]	; (80051a8 <HAL_ADC_MspInit+0x20c>)
 8005026:	f003 ffad 	bl	8008f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800502a:	2301      	movs	r3, #1
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800502e:	2303      	movs	r3, #3
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800503a:	4619      	mov	r1, r3
 800503c:	485b      	ldr	r0, [pc, #364]	; (80051ac <HAL_ADC_MspInit+0x210>)
 800503e:	f003 ffa1 	bl	8008f84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005042:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005044:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <HAL_ADC_MspInit+0x218>)
 8005046:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800504e:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005054:	4b56      	ldr	r3, [pc, #344]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005056:	2200      	movs	r2, #0
 8005058:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800505a:	4b55      	ldr	r3, [pc, #340]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800505c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005060:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005062:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005068:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800506a:	4b51      	ldr	r3, [pc, #324]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800506c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005070:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005072:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005078:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800507a:	4b4d      	ldr	r3, [pc, #308]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800507c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005080:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005082:	4b4b      	ldr	r3, [pc, #300]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 8005084:	2200      	movs	r2, #0
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005088:	4849      	ldr	r0, [pc, #292]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800508a:	f003 fb79 	bl	8008780 <HAL_DMA_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005094:	f7ff ff50 	bl	8004f38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a45      	ldr	r2, [pc, #276]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
 800509e:	4a44      	ldr	r2, [pc, #272]	; (80051b0 <HAL_ADC_MspInit+0x214>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80050a4:	e078      	b.n	8005198 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a43      	ldr	r2, [pc, #268]	; (80051b8 <HAL_ADC_MspInit+0x21c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d173      	bne.n	8005198 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050be:	6453      	str	r3, [r2, #68]	; 0x44
 80050c0:	4b38      	ldr	r3, [pc, #224]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	6313      	str	r3, [r2, #48]	; 0x30
 80050dc:	4b31      	ldr	r3, [pc, #196]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	4b2d      	ldr	r3, [pc, #180]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6313      	str	r3, [r2, #48]	; 0x30
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_ADC_MspInit+0x208>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005104:	2302      	movs	r3, #2
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005108:	2303      	movs	r3, #3
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005114:	4619      	mov	r1, r3
 8005116:	4824      	ldr	r0, [pc, #144]	; (80051a8 <HAL_ADC_MspInit+0x20c>)
 8005118:	f003 ff34 	bl	8008f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800511c:	2302      	movs	r3, #2
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005120:	2303      	movs	r3, #3
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800512c:	4619      	mov	r1, r3
 800512e:	481f      	ldr	r0, [pc, #124]	; (80051ac <HAL_ADC_MspInit+0x210>)
 8005130:	f003 ff28 	bl	8008f84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005136:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_ADC_MspInit+0x224>)
 8005138:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_ADC_MspInit+0x220>)
 800513c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005140:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005142:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005148:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <HAL_ADC_MspInit+0x220>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005154:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005156:	4b19      	ldr	r3, [pc, #100]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800515c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005164:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800516c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800516e:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005170:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005174:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005178:	2200      	movs	r2, #0
 800517a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800517c:	480f      	ldr	r0, [pc, #60]	; (80051bc <HAL_ADC_MspInit+0x220>)
 800517e:	f003 faff 	bl	8008780 <HAL_DMA_Init>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8005188:	f7ff fed6 	bl	8004f38 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_ADC_MspInit+0x220>)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005198:	bf00      	nop
 800519a:	3738      	adds	r7, #56	; 0x38
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40012000 	.word	0x40012000
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40020800 	.word	0x40020800
 80051ac:	40020000 	.word	0x40020000
 80051b0:	20002208 	.word	0x20002208
 80051b4:	40026410 	.word	0x40026410
 80051b8:	40012100 	.word	0x40012100
 80051bc:	20002268 	.word	0x20002268
 80051c0:	40026440 	.word	0x40026440

080051c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_I2C_MspInit+0x84>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d12c      	bne.n	8005240 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <HAL_I2C_MspInit+0x88>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_I2C_MspInit+0x88>)
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	6313      	str	r3, [r2, #48]	; 0x30
 80051f6:	4b15      	ldr	r3, [pc, #84]	; (800524c <HAL_I2C_MspInit+0x88>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005208:	2312      	movs	r3, #18
 800520a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005210:	2303      	movs	r3, #3
 8005212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005214:	2304      	movs	r3, #4
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005218:	f107 0314 	add.w	r3, r7, #20
 800521c:	4619      	mov	r1, r3
 800521e:	480c      	ldr	r0, [pc, #48]	; (8005250 <HAL_I2C_MspInit+0x8c>)
 8005220:	f003 feb0 	bl	8008f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_I2C_MspInit+0x88>)
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	4a07      	ldr	r2, [pc, #28]	; (800524c <HAL_I2C_MspInit+0x88>)
 800522e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005232:	6413      	str	r3, [r2, #64]	; 0x40
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_I2C_MspInit+0x88>)
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005240:	bf00      	nop
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40005400 	.word	0x40005400
 800524c:	40023800 	.word	0x40023800
 8005250:	40020400 	.word	0x40020400

08005254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a43      	ldr	r2, [pc, #268]	; (8005380 <HAL_SPI_MspInit+0x12c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d17f      	bne.n	8005376 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	4b42      	ldr	r3, [pc, #264]	; (8005384 <HAL_SPI_MspInit+0x130>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a41      	ldr	r2, [pc, #260]	; (8005384 <HAL_SPI_MspInit+0x130>)
 8005280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b3f      	ldr	r3, [pc, #252]	; (8005384 <HAL_SPI_MspInit+0x130>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_SPI_MspInit+0x130>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_SPI_MspInit+0x130>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6313      	str	r3, [r2, #48]	; 0x30
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <HAL_SPI_MspInit+0x130>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_SPI_MspInit+0x130>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_SPI_MspInit+0x130>)
 80052b8:	f043 0302 	orr.w	r3, r3, #2
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_SPI_MspInit+0x130>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80052ca:	230c      	movs	r3, #12
 80052cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ce:	2302      	movs	r3, #2
 80052d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d6:	2303      	movs	r3, #3
 80052d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052da:	2305      	movs	r3, #5
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052de:	f107 0314 	add.w	r3, r7, #20
 80052e2:	4619      	mov	r1, r3
 80052e4:	4828      	ldr	r0, [pc, #160]	; (8005388 <HAL_SPI_MspInit+0x134>)
 80052e6:	f003 fe4d 	bl	8008f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 80052ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f0:	2302      	movs	r3, #2
 80052f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f8:	2303      	movs	r3, #3
 80052fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052fc:	2305      	movs	r3, #5
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4619      	mov	r1, r3
 8005306:	4821      	ldr	r0, [pc, #132]	; (800538c <HAL_SPI_MspInit+0x138>)
 8005308:	f003 fe3c 	bl	8008f84 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_SPI_MspInit+0x140>)
 8005310:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005312:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800531a:	2240      	movs	r2, #64	; 0x40
 800531c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005320:	2200      	movs	r2, #0
 8005322:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800532a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800532e:	2200      	movs	r2, #0
 8005330:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800533a:	2200      	movs	r2, #0
 800533c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005340:	2200      	movs	r2, #0
 8005342:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005346:	2200      	movs	r2, #0
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800534a:	4811      	ldr	r0, [pc, #68]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800534c:	f003 fa18 	bl	8008780 <HAL_DMA_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8005356:	f7ff fdef 	bl	8004f38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 800535e:	649a      	str	r2, [r3, #72]	; 0x48
 8005360:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <HAL_SPI_MspInit+0x13c>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005366:	2200      	movs	r2, #0
 8005368:	2100      	movs	r1, #0
 800536a:	2024      	movs	r0, #36	; 0x24
 800536c:	f003 f9d1 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005370:	2024      	movs	r0, #36	; 0x24
 8005372:	f003 f9ea 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005376:	bf00      	nop
 8005378:	3728      	adds	r7, #40	; 0x28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40003800 	.word	0x40003800
 8005384:	40023800 	.word	0x40023800
 8005388:	40020800 	.word	0x40020800
 800538c:	40020400 	.word	0x40020400
 8005390:	20002374 	.word	0x20002374
 8005394:	40026070 	.word	0x40026070

08005398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d115      	bne.n	80053d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <HAL_TIM_Base_MspInit+0x48>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	4a0b      	ldr	r2, [pc, #44]	; (80053e0 <HAL_TIM_Base_MspInit+0x48>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <HAL_TIM_Base_MspInit+0x48>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	201c      	movs	r0, #28
 80053cc:	f003 f9a1 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053d0:	201c      	movs	r0, #28
 80053d2:	f003 f9ba 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800

080053e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	; 0x30
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 031c 	add.w	r3, r7, #28
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <HAL_UART_MspInit+0x108>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d134      	bne.n	8005470 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a38      	ldr	r2, [pc, #224]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	4b36      	ldr	r3, [pc, #216]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	4a31      	ldr	r2, [pc, #196]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	6313      	str	r3, [r2, #48]	; 0x30
 8005432:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800543e:	230c      	movs	r3, #12
 8005440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005442:	2302      	movs	r3, #2
 8005444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544a:	2303      	movs	r3, #3
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800544e:	2307      	movs	r3, #7
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005452:	f107 031c 	add.w	r3, r7, #28
 8005456:	4619      	mov	r1, r3
 8005458:	4826      	ldr	r0, [pc, #152]	; (80054f4 <HAL_UART_MspInit+0x110>)
 800545a:	f003 fd93 	bl	8008f84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2100      	movs	r1, #0
 8005462:	2026      	movs	r0, #38	; 0x26
 8005464:	f003 f955 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005468:	2026      	movs	r0, #38	; 0x26
 800546a:	f003 f96e 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800546e:	e039      	b.n	80054e4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_UART_MspInit+0x114>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d134      	bne.n	80054e4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 8005484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005488:	6413      	str	r3, [r2, #64]	; 0x40
 800548a:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005492:	613b      	str	r3, [r7, #16]
 8005494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 80054a0:	f043 0304 	orr.w	r3, r3, #4
 80054a4:	6313      	str	r3, [r2, #48]	; 0x30
 80054a6:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_UART_MspInit+0x10c>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80054b2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80054b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b8:	2302      	movs	r3, #2
 80054ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c0:	2303      	movs	r3, #3
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054c4:	2307      	movs	r3, #7
 80054c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c8:	f107 031c 	add.w	r3, r7, #28
 80054cc:	4619      	mov	r1, r3
 80054ce:	480b      	ldr	r0, [pc, #44]	; (80054fc <HAL_UART_MspInit+0x118>)
 80054d0:	f003 fd58 	bl	8008f84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80054d4:	2200      	movs	r2, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	2027      	movs	r0, #39	; 0x27
 80054da:	f003 f91a 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054de:	2027      	movs	r0, #39	; 0x27
 80054e0:	f003 f933 	bl	800874a <HAL_NVIC_EnableIRQ>
}
 80054e4:	bf00      	nop
 80054e6:	3730      	adds	r7, #48	; 0x30
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40004400 	.word	0x40004400
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40020000 	.word	0x40020000
 80054f8:	40004800 	.word	0x40004800
 80054fc:	40020800 	.word	0x40020800

08005500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <NMI_Handler+0x4>

08005506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800550a:	e7fe      	b.n	800550a <HardFault_Handler+0x4>

0800550c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005510:	e7fe      	b.n	8005510 <MemManage_Handler+0x4>

08005512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005516:	e7fe      	b.n	8005516 <BusFault_Handler+0x4>

08005518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800551c:	e7fe      	b.n	800551c <UsageFault_Handler+0x4>

0800551e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800553a:	b480      	push	{r7}
 800553c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800554c:	f002 fbbe 	bl	8007ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005550:	bf00      	nop
 8005552:	bd80      	pop	{r7, pc}

08005554 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8005558:	2010      	movs	r0, #16
 800555a:	f003 fef3 	bl	8009344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800555e:	bf00      	nop
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <DMA1_Stream4_IRQHandler+0x10>)
 800556a:	f003 faa1 	bl	8008ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20002374 	.word	0x20002374

08005578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800557c:	4804      	ldr	r0, [pc, #16]	; (8005590 <TIM2_IRQHandler+0x18>)
 800557e:	f006 fbb9 	bl	800bcf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8005582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005586:	4803      	ldr	r0, [pc, #12]	; (8005594 <TIM2_IRQHandler+0x1c>)
 8005588:	f003 fec1 	bl	800930e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}
 8005590:	200023d4 	.word	0x200023d4
 8005594:	40020000 	.word	0x40020000

08005598 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <SPI2_IRQHandler+0x10>)
 800559e:	f006 f88b 	bl	800b6b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	2000231c 	.word	0x2000231c

080055ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055b0:	4802      	ldr	r0, [pc, #8]	; (80055bc <USART2_IRQHandler+0x10>)
 80055b2:	f007 f87b 	bl	800c6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	2000241c 	.word	0x2000241c

080055c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <USART3_IRQHandler+0x10>)
 80055c6:	f007 f871 	bl	800c6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20002460 	.word	0x20002460

080055d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80055d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055dc:	f003 feb2 	bl	8009344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <DMA2_Stream0_IRQHandler+0x10>)
 80055ea:	f003 fa61 	bl	8008ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20002208 	.word	0x20002208

080055f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <DMA2_Stream2_IRQHandler+0x10>)
 80055fe:	f003 fa57 	bl	8008ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20002268 	.word	0x20002268

0800560c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return 1;
 8005610:	2301      	movs	r3, #1
}
 8005612:	4618      	mov	r0, r3
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_kill>:

int _kill(int pid, int sig)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005626:	f008 ff7d 	bl	800e524 <__errno>
 800562a:	4603      	mov	r3, r0
 800562c:	2216      	movs	r2, #22
 800562e:	601a      	str	r2, [r3, #0]
  return -1;
 8005630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <_exit>:

void _exit (int status)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ffe7 	bl	800561c <_kill>
  while (1) {}    /* Make sure we hang here */
 800564e:	e7fe      	b.n	800564e <_exit+0x12>

08005650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e00a      	b.n	8005678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005662:	f3af 8000 	nop.w
 8005666:	4601      	mov	r1, r0
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	60ba      	str	r2, [r7, #8]
 800566e:	b2ca      	uxtb	r2, r1
 8005670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	3301      	adds	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	dbf0      	blt.n	8005662 <_read+0x12>
  }

  return len;
 8005680:	687b      	ldr	r3, [r7, #4]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e009      	b.n	80056b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	60ba      	str	r2, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	3301      	adds	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	dbf1      	blt.n	800569c <_write+0x12>
  }
  return len;
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <_close>:

int _close(int file)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ea:	605a      	str	r2, [r3, #4]
  return 0;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <_isatty>:

int _isatty(int file)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005702:	2301      	movs	r3, #1
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <_sbrk+0x5c>)
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <_sbrk+0x60>)
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005740:	4b13      	ldr	r3, [pc, #76]	; (8005790 <_sbrk+0x64>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <_sbrk+0x64>)
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <_sbrk+0x68>)
 800574c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <_sbrk+0x64>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	429a      	cmp	r2, r3
 800575a:	d207      	bcs.n	800576c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800575c:	f008 fee2 	bl	800e524 <__errno>
 8005760:	4603      	mov	r3, r0
 8005762:	220c      	movs	r2, #12
 8005764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800576a:	e009      	b.n	8005780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <_sbrk+0x64>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005772:	4b07      	ldr	r3, [pc, #28]	; (8005790 <_sbrk+0x64>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4413      	add	r3, r2
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <_sbrk+0x64>)
 800577c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800577e:	68fb      	ldr	r3, [r7, #12]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20020000 	.word	0x20020000
 800578c:	00000400 	.word	0x00000400
 8005790:	2000826c 	.word	0x2000826c
 8005794:	200097d0 	.word	0x200097d0

08005798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <SystemInit+0x20>)
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <SystemInit+0x20>)
 80057a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80057ac:	bf00      	nop
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 80057bc:	b40f      	push	{r0, r1, r2, r3}
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057d2:	480b      	ldr	r0, [pc, #44]	; (8005800 <term_print+0x44>)
 80057d4:	f008 fe24 	bl	800e420 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 80057d8:	4809      	ldr	r0, [pc, #36]	; (8005800 <term_print+0x44>)
 80057da:	f7fa fd69 	bl	80002b0 <strlen>
 80057de:	4603      	mov	r3, r0
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e6:	4906      	ldr	r1, [pc, #24]	; (8005800 <term_print+0x44>)
 80057e8:	4806      	ldr	r0, [pc, #24]	; (8005804 <term_print+0x48>)
 80057ea:	f006 fe9c 	bl	800c526 <HAL_UART_Transmit>
 80057ee:	4603      	mov	r3, r0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057fa:	b004      	add	sp, #16
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20008270 	.word	0x20008270
 8005804:	2000241c 	.word	0x2000241c

08005808 <term_show_buffer>:
}

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d838      	bhi.n	8005892 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4619      	mov	r1, r3
 8005824:	481d      	ldr	r0, [pc, #116]	; (800589c <term_show_buffer+0x94>)
 8005826:	f7ff ffc9 	bl	80057bc <term_print>
	term_print("%3d: ", 0);
 800582a:	2100      	movs	r1, #0
 800582c:	481c      	ldr	r0, [pc, #112]	; (80058a0 <term_show_buffer+0x98>)
 800582e:	f7ff ffc5 	bl	80057bc <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e020      	b.n	800587a <term_show_buffer+0x72>
		if (count >= 20) {
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b13      	cmp	r3, #19
 800583c:	dd06      	ble.n	800584c <term_show_buffer+0x44>
			count =0;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8005842:	8a7b      	ldrh	r3, [r7, #18]
 8005844:	4619      	mov	r1, r3
 8005846:	4817      	ldr	r0, [pc, #92]	; (80058a4 <term_show_buffer+0x9c>)
 8005848:	f7ff ffb8 	bl	80057bc <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	4916      	ldr	r1, [pc, #88]	; (80058a8 <term_show_buffer+0xa0>)
 8005850:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8005854:	fb03 f202 	mul.w	r2, r3, r2
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005860:	4619      	mov	r1, r3
 8005862:	4812      	ldr	r0, [pc, #72]	; (80058ac <term_show_buffer+0xa4>)
 8005864:	f7ff ffaa 	bl	80057bc <term_print>
		count++; address++;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	3301      	adds	r3, #1
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	8a7b      	ldrh	r3, [r7, #18]
 8005870:	3301      	adds	r3, #1
 8005872:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8005880:	d3da      	bcc.n	8005838 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8005882:	480b      	ldr	r0, [pc, #44]	; (80058b0 <term_show_buffer+0xa8>)
 8005884:	f7ff ff9a 	bl	80057bc <term_print>
	term_show_channel(bufnum);
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f87e 	bl	800598c <term_show_channel>
 8005890:	e000      	b.n	8005894 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8005892:	bf00      	nop
}
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08011ac4 	.word	0x08011ac4
 80058a0:	08011ad0 	.word	0x08011ad0
 80058a4:	08011ad8 	.word	0x08011ad8
 80058a8:	20007518 	.word	0x20007518
 80058ac:	08011ae0 	.word	0x08011ae0
 80058b0:	08011ac0 	.word	0x08011ac0
 80058b4:	00000000 	.word	0x00000000

080058b8 <term_show_measurements>:

void term_show_measurements() {
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b091      	sub	sp, #68	; 0x44
 80058be:	af0c      	add	r7, sp, #48	; 0x30
			term_print(" invalid readings\r\n");
			return;
		}
	}
	*/
	term_print("%.1fV I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, display_channel+1, metervalue_i, metervalue_va,
 80058c0:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <term_show_measurements+0xb8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fa fe5f 	bl	8000588 <__aeabi_f2d>
 80058ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80058ce:	4b29      	ldr	r3, [pc, #164]	; (8005974 <term_show_measurements+0xbc>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	1c5e      	adds	r6, r3, #1
 80058d4:	4b28      	ldr	r3, [pc, #160]	; (8005978 <term_show_measurements+0xc0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fa fe55 	bl	8000588 <__aeabi_f2d>
 80058de:	4604      	mov	r4, r0
 80058e0:	460d      	mov	r5, r1
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <term_show_measurements+0xc4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fa fe4e 	bl	8000588 <__aeabi_f2d>
 80058ec:	4680      	mov	r8, r0
 80058ee:	4689      	mov	r9, r1
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <term_show_measurements+0xc8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fa fe47 	bl	8000588 <__aeabi_f2d>
 80058fa:	4682      	mov	sl, r0
 80058fc:	468b      	mov	fp, r1
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <term_show_measurements+0xcc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fa fe40 	bl	8000588 <__aeabi_f2d>
 8005908:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w, metervalue_pf, acos(metervalue_pf) * (180.0 / 3.14159265) );
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <term_show_measurements+0xcc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fa fe39 	bl	8000588 <__aeabi_f2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	ec43 2b10 	vmov	d0, r2, r3
 800591e:	f00b f9ed 	bl	8010cfc <acos>
 8005922:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV I%d: %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, display_channel+1, metervalue_i, metervalue_va,
 8005926:	a310      	add	r3, pc, #64	; (adr r3, 8005968 <term_show_measurements+0xb0>)
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f7fa fe84 	bl	8000638 <__aeabi_dmul>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005938:	ed97 7b00 	vldr	d7, [r7]
 800593c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005940:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8005944:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005948:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800594c:	9600      	str	r6, [sp, #0]
 800594e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005952:	480d      	ldr	r0, [pc, #52]	; (8005988 <term_show_measurements+0xd0>)
 8005954:	f7ff ff32 	bl	80057bc <term_print>
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	bf00      	nop
 8005964:	f3af 8000 	nop.w
 8005968:	1af05a77 	.word	0x1af05a77
 800596c:	404ca5dc 	.word	0x404ca5dc
 8005970:	20008238 	.word	0x20008238
 8005974:	20000501 	.word	0x20000501
 8005978:	2000823c 	.word	0x2000823c
 800597c:	20008240 	.word	0x20008240
 8005980:	20008244 	.word	0x20008244
 8005984:	20008248 	.word	0x20008248
 8005988:	08011ae8 	.word	0x08011ae8

0800598c <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 800598c:	b5b0      	push	{r4, r5, r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	2b03      	cmp	r3, #3
 800599a:	f200 80a5 	bhi.w	8005ae8 <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4853      	ldr	r0, [pc, #332]	; (8005af0 <term_show_channel+0x164>)
 80059a4:	f7ff ff0a 	bl	80057bc <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 80059a8:	79fa      	ldrb	r2, [r7, #7]
 80059aa:	4952      	ldr	r1, [pc, #328]	; (8005af4 <term_show_channel+0x168>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	330c      	adds	r3, #12
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d004      	beq.n	80059c8 <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	4619      	mov	r1, r3
 80059c2:	484d      	ldr	r0, [pc, #308]	; (8005af8 <term_show_channel+0x16c>)
 80059c4:	f7ff fefa 	bl	80057bc <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80059c8:	79fa      	ldrb	r2, [r7, #7]
 80059ca:	494a      	ldr	r1, [pc, #296]	; (8005af4 <term_show_channel+0x168>)
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	3302      	adds	r3, #2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	79fa      	ldrb	r2, [r7, #7]
 80059de:	4945      	ldr	r1, [pc, #276]	; (8005af4 <term_show_channel+0x168>)
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	1ac3      	subs	r3, r0, r3
 80059ee:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 80059f0:	79fa      	ldrb	r2, [r7, #7]
 80059f2:	4940      	ldr	r1, [pc, #256]	; (8005af4 <term_show_channel+0x168>)
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	493b      	ldr	r1, [pc, #236]	; (8005af4 <term_show_channel+0x168>)
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3302      	adds	r3, #2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4601      	mov	r1, r0
 8005a1a:	4838      	ldr	r0, [pc, #224]	; (8005afc <term_show_channel+0x170>)
 8005a1c:	f7ff fece 	bl	80057bc <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8005a20:	79fa      	ldrb	r2, [r7, #7]
 8005a22:	4934      	ldr	r1, [pc, #208]	; (8005af4 <term_show_channel+0x168>)
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	3310      	adds	r3, #16
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b21b      	sxth	r3, r3
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fc ffed 	bl	8002a14 <calc_adc_raw_to_mv_int>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fc ffe7 	bl	8002a14 <calc_adc_raw_to_mv_int>
 8005a46:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	0fda      	lsrs	r2, r3, #31
 8005a4c:	4413      	add	r3, r2
 8005a4e:	105b      	asrs	r3, r3, #1
 8005a50:	b299      	uxth	r1, r3
 8005a52:	79fa      	ldrb	r2, [r7, #7]
 8005a54:	4827      	ldr	r0, [pc, #156]	; (8005af4 <term_show_channel+0x168>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4403      	add	r3, r0
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	440b      	add	r3, r1
 8005a64:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8005a66:	b21b      	sxth	r3, r3
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fc ffd3 	bl	8002a14 <calc_adc_raw_to_mv_int>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	462a      	mov	r2, r5
 8005a72:	4621      	mov	r1, r4
 8005a74:	4822      	ldr	r0, [pc, #136]	; (8005b00 <term_show_channel+0x174>)
 8005a76:	f7ff fea1 	bl	80057bc <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8005a7a:	79fa      	ldrb	r2, [r7, #7]
 8005a7c:	491d      	ldr	r1, [pc, #116]	; (8005af4 <term_show_channel+0x168>)
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fc ffc1 	bl	8002a14 <calc_adc_raw_to_mv_int>
 8005a92:	4604      	mov	r4, r0
 8005a94:	79fa      	ldrb	r2, [r7, #7]
 8005a96:	4917      	ldr	r1, [pc, #92]	; (8005af4 <term_show_channel+0x168>)
 8005a98:	4613      	mov	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fc ffb3 	bl	8002a14 <calc_adc_raw_to_mv_int>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <term_show_channel+0x178>)
 8005ab6:	f7ff fe81 	bl	80057bc <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8005aba:	79fa      	ldrb	r2, [r7, #7]
 8005abc:	490d      	ldr	r1, [pc, #52]	; (8005af4 <term_show_channel+0x168>)
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3304      	adds	r3, #4
 8005aca:	6819      	ldr	r1, [r3, #0]
 8005acc:	79fa      	ldrb	r2, [r7, #7]
 8005ace:	4809      	ldr	r0, [pc, #36]	; (8005af4 <term_show_channel+0x168>)
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4403      	add	r3, r0
 8005ada:	3308      	adds	r3, #8
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4809      	ldr	r0, [pc, #36]	; (8005b08 <term_show_channel+0x17c>)
 8005ae2:	f7ff fe6b 	bl	80057bc <term_print>
 8005ae6:	e000      	b.n	8005aea <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8005ae8:	bf00      	nop
}
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bdb0      	pop	{r4, r5, r7, pc}
 8005af0:	08011b1c 	.word	0x08011b1c
 8005af4:	2000023c 	.word	0x2000023c
 8005af8:	08011b38 	.word	0x08011b38
 8005afc:	08011b58 	.word	0x08011b58
 8005b00:	08011b70 	.word	0x08011b70
 8005b04:	08011b94 	.word	0x08011b94
 8005b08:	08011bac 	.word	0x08011bac

08005b0c <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b03      	cmp	r3, #3
 8005b1a:	d821      	bhi.n	8005b60 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4811      	ldr	r0, [pc, #68]	; (8005b68 <term_csv_buffer+0x5c>)
 8005b22:	f7ff fe4b 	bl	80057bc <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e011      	b.n	8005b50 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	490f      	ldr	r1, [pc, #60]	; (8005b6c <term_csv_buffer+0x60>)
 8005b30:	f44f 7252 	mov.w	r2, #840	; 0x348
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005b40:	461a      	mov	r2, r3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	480a      	ldr	r0, [pc, #40]	; (8005b70 <term_csv_buffer+0x64>)
 8005b46:	f7ff fe39 	bl	80057bc <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8005b56:	d3e9      	bcc.n	8005b2c <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8005b58:	4806      	ldr	r0, [pc, #24]	; (8005b74 <term_csv_buffer+0x68>)
 8005b5a:	f7ff fe2f 	bl	80057bc <term_print>
 8005b5e:	e000      	b.n	8005b62 <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8005b60:	bf00      	nop
}
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	08011ac4 	.word	0x08011ac4
 8005b6c:	20005ad8 	.word	0x20005ad8
 8005b70:	08011bcc 	.word	0x08011bcc
 8005b74:	08011bd4 	.word	0x08011bd4

08005b78 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	480f      	ldr	r0, [pc, #60]	; (8005bbc <Displ_Select+0x44>)
 8005b80:	f003 fb94 	bl	80092ac <HAL_GPIO_ReadPin>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d015      	beq.n	8005bb6 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b90:	480b      	ldr	r0, [pc, #44]	; (8005bc0 <Displ_Select+0x48>)
 8005b92:	f003 fba3 	bl	80092dc <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <Displ_Select+0x4c>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	490a      	ldr	r1, [pc, #40]	; (8005bc4 <Displ_Select+0x4c>)
 8005b9c:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <Displ_Select+0x4c>)
 8005ba6:	4a07      	ldr	r2, [pc, #28]	; (8005bc4 <Displ_Select+0x4c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8005bac:	2200      	movs	r2, #0
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <Displ_Select+0x44>)
 8005bb2:	f003 fb93 	bl	80092dc <HAL_GPIO_WritePin>
		}
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020000 	.word	0x40020000
 8005bc4:	40003800 	.word	0x40003800

08005bc8 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6039      	str	r1, [r7, #0]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	71fb      	strb	r3, [r7, #7]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	80bb      	strh	r3, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8005be0:	bf00      	nop
 8005be2:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <Displ_Transmit+0xa4>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0fa      	beq.n	8005be2 <Displ_Transmit+0x1a>

	Displ_Select();
 8005bec:	f7ff ffc4 	bl	8005b78 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	481e      	ldr	r0, [pc, #120]	; (8005c70 <Displ_Transmit+0xa8>)
 8005bf8:	f003 fb70 	bl	80092dc <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8005bfc:	79bb      	ldrb	r3, [r7, #6]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8005c02:	88bb      	ldrh	r3, [r7, #4]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	4413      	add	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	e00b      	b.n	8005c28 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	ba5b      	rev16	r3, r3
 8005c1a:	60bb      	str	r3, [r7, #8]
  return result;
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	3304      	adds	r3, #4
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d3ef      	bcc.n	8005c10 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8005c30:	88bb      	ldrh	r3, [r7, #4]
 8005c32:	2b13      	cmp	r3, #19
 8005c34:	d80d      	bhi.n	8005c52 <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <Displ_Transmit+0xa4>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8005c3c:	88ba      	ldrh	r2, [r7, #4]
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	480b      	ldr	r0, [pc, #44]	; (8005c74 <Displ_Transmit+0xac>)
 8005c46:	f005 fb44 	bl	800b2d2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <Displ_Transmit+0xa4>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8005c50:	e008      	b.n	8005c64 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <Displ_Transmit+0xa4>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8005c58:	88bb      	ldrh	r3, [r7, #4]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	4805      	ldr	r0, [pc, #20]	; (8005c74 <Displ_Transmit+0xac>)
 8005c60:	f005 fc74 	bl	800b54c <HAL_SPI_Transmit_DMA>
	}
 8005c64:	bf00      	nop
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000034 	.word	0x20000034
 8005c70:	40020000 	.word	0x40020000
 8005c74:	2000231c 	.word	0x2000231c

08005c78 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8005c82:	1df9      	adds	r1, r7, #7
 8005c84:	2300      	movs	r3, #0
 8005c86:	2201      	movs	r2, #1
 8005c88:	2000      	movs	r0, #0
 8005c8a:	f7ff ff9d 	bl	8005bc8 <Displ_Transmit>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	68f9      	ldr	r1, [r7, #12]
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f7ff ff88 	bl	8005bc8 <Displ_Transmit>
 8005cb8:	e000      	b.n	8005cbc <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8005cba:	bf00      	nop
}
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
	Displ_Select();
 8005cc8:	f7ff ff56 	bl	8005b78 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2140      	movs	r1, #64	; 0x40
 8005cd0:	4819      	ldr	r0, [pc, #100]	; (8005d38 <ILI9XXX_Init+0x74>)
 8005cd2:	f003 fb03 	bl	80092dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	f002 f818 	bl	8007d0c <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2140      	movs	r1, #64	; 0x40
 8005ce0:	4815      	ldr	r0, [pc, #84]	; (8005d38 <ILI9XXX_Init+0x74>)
 8005ce2:	f003 fafb 	bl	80092dc <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8005ce6:	20a5      	movs	r0, #165	; 0xa5
 8005ce8:	f002 f810 	bl	8007d0c <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005cec:	203a      	movs	r0, #58	; 0x3a
 8005cee:	f7ff ffc3 	bl	8005c78 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4811      	ldr	r0, [pc, #68]	; (8005d3c <ILI9XXX_Init+0x78>)
 8005cf8:	f7ff ffcd 	bl	8005c96 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005cfc:	20b0      	movs	r0, #176	; 0xb0
 8005cfe:	f7ff ffbb 	bl	8005c78 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005d02:	2200      	movs	r2, #0
 8005d04:	2101      	movs	r1, #1
 8005d06:	480e      	ldr	r0, [pc, #56]	; (8005d40 <ILI9XXX_Init+0x7c>)
 8005d08:	f7ff ffc5 	bl	8005c96 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005d0c:	20b0      	movs	r0, #176	; 0xb0
 8005d0e:	f7ff ffb3 	bl	8005c78 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005d12:	2200      	movs	r2, #0
 8005d14:	2101      	movs	r1, #1
 8005d16:	480a      	ldr	r0, [pc, #40]	; (8005d40 <ILI9XXX_Init+0x7c>)
 8005d18:	f7ff ffbd 	bl	8005c96 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005d1c:	2011      	movs	r0, #17
 8005d1e:	f7ff ffab 	bl	8005c78 <Displ_WriteCommand>
	HAL_Delay(120);
 8005d22:	2078      	movs	r0, #120	; 0x78
 8005d24:	f001 fff2 	bl	8007d0c <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8005d28:	2029      	movs	r0, #41	; 0x29
 8005d2a:	f7ff ffa5 	bl	8005c78 <Displ_WriteCommand>
	HAL_Delay(5);
 8005d2e:	2005      	movs	r0, #5
 8005d30:	f001 ffec 	bl	8007d0c <HAL_Delay>

}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	08011bdc 	.word	0x08011bdc
 8005d40:	08011be0 	.word	0x08011be0

08005d44 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	80fb      	strh	r3, [r7, #6]
 8005d56:	4603      	mov	r3, r0
 8005d58:	80bb      	strh	r3, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	807b      	strh	r3, [r7, #2]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	061a      	lsls	r2, r3, #24
 8005d66:	887b      	ldrh	r3, [r7, #2]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	4313      	orrs	r3, r2
 8005d78:	88fa      	ldrh	r2, [r7, #6]
 8005d7a:	0a12      	lsrs	r2, r2, #8
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	4b14      	ldr	r3, [pc, #80]	; (8005dd4 <Displ_SetAddressWindow+0x90>)
 8005d82:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8005d84:	202a      	movs	r0, #42	; 0x2a
 8005d86:	f7ff ff77 	bl	8005c78 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	4811      	ldr	r0, [pc, #68]	; (8005dd4 <Displ_SetAddressWindow+0x90>)
 8005d90:	f7ff ff81 	bl	8005c96 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8005d94:	883b      	ldrh	r3, [r7, #0]
 8005d96:	061a      	lsls	r2, r3, #24
 8005d98:	883b      	ldrh	r3, [r7, #0]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005da0:	431a      	orrs	r2, r3
 8005da2:	88bb      	ldrh	r3, [r7, #4]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	88ba      	ldrh	r2, [r7, #4]
 8005dac:	0a12      	lsrs	r2, r2, #8
 8005dae:	b292      	uxth	r2, r2
 8005db0:	431a      	orrs	r2, r3
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <Displ_SetAddressWindow+0x90>)
 8005db4:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8005db6:	202b      	movs	r0, #43	; 0x2b
 8005db8:	f7ff ff5e 	bl	8005c78 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	4804      	ldr	r0, [pc, #16]	; (8005dd4 <Displ_SetAddressWindow+0x90>)
 8005dc2:	f7ff ff68 	bl	8005c96 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8005dc6:	202c      	movs	r0, #44	; 0x2c
 8005dc8:	f7ff ff56 	bl	8005c78 <Displ_WriteCommand>
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd90      	pop	{r4, r7, pc}
 8005dd4:	20009678 	.word	0x20009678

08005dd8 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8005de2:	2201      	movs	r2, #1
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <Displ_Init+0x34>)
 8005de8:	f003 fa78 	bl	80092dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8005dec:	2201      	movs	r2, #1
 8005dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005df2:	4807      	ldr	r0, [pc, #28]	; (8005e10 <Displ_Init+0x38>)
 8005df4:	f003 fa72 	bl	80092dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8005df8:	f7ff ff64 	bl	8005cc4 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f808 	bl	8005e14 <Displ_Orientation>
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40020800 	.word	0x40020800
 8005e10:	40020000 	.word	0x40020000

08005e14 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d837      	bhi.n	8005e94 <Displ_Orientation+0x80>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <Displ_Orientation+0x18>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e53 	.word	0x08005e53
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005e7f 	.word	0x08005e7f
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <Displ_Orientation+0xa0>)
 8005e3e:	2288      	movs	r2, #136	; 0x88
 8005e40:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005e42:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <Displ_Orientation+0xa4>)
 8005e44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e48:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <Displ_Orientation+0xa8>)
 8005e4c:	22f0      	movs	r2, #240	; 0xf0
 8005e4e:	801a      	strh	r2, [r3, #0]
			break;
 8005e50:	e020      	b.n	8005e94 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8005e52:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <Displ_Orientation+0xa0>)
 8005e54:	22e8      	movs	r2, #232	; 0xe8
 8005e56:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8005e58:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <Displ_Orientation+0xa4>)
 8005e5a:	22f0      	movs	r2, #240	; 0xf0
 8005e5c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <Displ_Orientation+0xa8>)
 8005e60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e64:	801a      	strh	r2, [r3, #0]
			break;
 8005e66:	e015      	b.n	8005e94 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8005e68:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <Displ_Orientation+0xa0>)
 8005e6a:	2248      	movs	r2, #72	; 0x48
 8005e6c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <Displ_Orientation+0xa4>)
 8005e70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e74:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <Displ_Orientation+0xa8>)
 8005e78:	22f0      	movs	r2, #240	; 0xf0
 8005e7a:	801a      	strh	r2, [r3, #0]
			break;
 8005e7c:	e00a      	b.n	8005e94 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <Displ_Orientation+0xa0>)
 8005e80:	2228      	movs	r2, #40	; 0x28
 8005e82:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <Displ_Orientation+0xa4>)
 8005e86:	22f0      	movs	r2, #240	; 0xf0
 8005e88:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <Displ_Orientation+0xa8>)
 8005e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e90:	801a      	strh	r2, [r3, #0]
			break;
 8005e92:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8005e94:	2036      	movs	r0, #54	; 0x36
 8005e96:	f7ff feef 	bl	8005c78 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <Displ_Orientation+0xa0>)
 8005ea0:	f7ff fef9 	bl	8005c96 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8005ea4:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <Displ_Orientation+0xac>)
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	7013      	strb	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000967c 	.word	0x2000967c
 8005eb8:	20008674 	.word	0x20008674
 8005ebc:	20008672 	.word	0x20008672
 8005ec0:	20008670 	.word	0x20008670

08005ec4 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <HAL_SPI_ErrorCallback+0x24>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d102      	bne.n	8005edc <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_SPI_ErrorCallback+0x28>)
 8005ed8:	2201      	movs	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]
	}
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40003800 	.word	0x40003800
 8005eec:	20000034 	.word	0x20000034

08005ef0 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <HAL_SPI_TxCpltCallback+0x24>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d102      	bne.n	8005f08 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_SPI_TxCpltCallback+0x28>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40003800 	.word	0x40003800
 8005f18:	20000034 	.word	0x20000034

08005f1c <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b08b      	sub	sp, #44	; 0x2c
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4623      	mov	r3, r4
 8005f2c:	80fb      	strh	r3, [r7, #6]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	80bb      	strh	r3, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	807b      	strh	r3, [r7, #2]
 8005f36:	4613      	mov	r3, r2
 8005f38:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	4a4f      	ldr	r2, [pc, #316]	; (800607c <Displ_FillArea+0x160>)
 8005f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f280 8096 	bge.w	8006074 <Displ_FillArea+0x158>
 8005f48:	88bb      	ldrh	r3, [r7, #4]
 8005f4a:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <Displ_FillArea+0x164>)
 8005f4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	f280 808f 	bge.w	8006074 <Displ_FillArea+0x158>
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 808b 	beq.w	8006074 <Displ_FillArea+0x158>
 8005f5e:	883b      	ldrh	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8087 	beq.w	8006074 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8005f66:	88fa      	ldrh	r2, [r7, #6]
 8005f68:	887b      	ldrh	r3, [r7, #2]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8005f70:	4b42      	ldr	r3, [pc, #264]	; (800607c <Displ_FillArea+0x160>)
 8005f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d903      	bls.n	8005f86 <Displ_FillArea+0x6a>
		x1=_width;
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	; (800607c <Displ_FillArea+0x160>)
 8005f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8005f86:	88ba      	ldrh	r2, [r7, #4]
 8005f88:	883b      	ldrh	r3, [r7, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8005f90:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <Displ_FillArea+0x164>)
 8005f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f96:	461a      	mov	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d903      	bls.n	8005fa6 <Displ_FillArea+0x8a>
		y1=_height;
 8005f9e:	4b38      	ldr	r3, [pc, #224]	; (8006080 <Displ_FillArea+0x164>)
 8005fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fa4:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8005fa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8005fbc:	88bb      	ldrh	r3, [r7, #4]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	6a39      	ldr	r1, [r7, #32]
 8005fc8:	1a8a      	subs	r2, r1, r2
 8005fca:	3201      	adds	r2, #1
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <Displ_FillArea+0x168>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d204      	bcs.n	8005fea <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e002      	b.n	8005ff0 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8005fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fee:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff4:	e007      	b.n	8006006 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	617a      	str	r2, [r7, #20]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3301      	adds	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	429a      	cmp	r2, r3
 800600c:	d3f3      	bcc.n	8005ff6 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	b29a      	uxth	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	b29b      	uxth	r3, r3
 8006016:	88b9      	ldrh	r1, [r7, #4]
 8006018:	88f8      	ldrh	r0, [r7, #6]
 800601a:	f7ff fe93 	bl	8005d44 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	0a9b      	lsrs	r3, r3, #10
 8006022:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8006024:	2300      	movs	r3, #0
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e00a      	b.n	8006040 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800602a:	4b16      	ldr	r3, [pc, #88]	; (8006084 <Displ_FillArea+0x168>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fe2e 	bl	8005c96 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	3301      	adds	r3, #1
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3f0      	bcc.n	800602a <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8006048:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <Displ_FillArea+0x168>)
 800604a:	6818      	ldr	r0, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	005a      	lsls	r2, r3, #1
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	02db      	lsls	r3, r3, #11
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2200      	movs	r2, #0
 8006058:	4619      	mov	r1, r3
 800605a:	f7ff fe1c 	bl	8005c96 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <Displ_FillArea+0x168>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <Displ_FillArea+0x16c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <Displ_FillArea+0x150>
 8006068:	4b08      	ldr	r3, [pc, #32]	; (800608c <Displ_FillArea+0x170>)
 800606a:	e000      	b.n	800606e <Displ_FillArea+0x152>
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <Displ_FillArea+0x16c>)
 800606e:	4a05      	ldr	r2, [pc, #20]	; (8006084 <Displ_FillArea+0x168>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	e000      	b.n	8006076 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8006074:	bf00      	nop

}
 8006076:	372c      	adds	r7, #44	; 0x2c
 8006078:	46bd      	mov	sp, r7
 800607a:	bd90      	pop	{r4, r7, pc}
 800607c:	20008672 	.word	0x20008672
 8006080:	20008674 	.word	0x20008674
 8006084:	20000038 	.word	0x20000038
 8006088:	20008678 	.word	0x20008678
 800608c:	20008e78 	.word	0x20008e78

08006090 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af02      	add	r7, sp, #8
 8006096:	4603      	mov	r3, r0
 8006098:	80fb      	strh	r3, [r7, #6]
 800609a:	460b      	mov	r3, r1
 800609c:	80bb      	strh	r3, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	4a0b      	ldr	r2, [pc, #44]	; (80060d4 <Displ_Pixel+0x44>)
 80060a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	da0e      	bge.n	80060cc <Displ_Pixel+0x3c>
 80060ae:	88bb      	ldrh	r3, [r7, #4]
 80060b0:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <Displ_Pixel+0x48>)
 80060b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80060b6:	4293      	cmp	r3, r2
 80060b8:	da08      	bge.n	80060cc <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80060ba:	88b9      	ldrh	r1, [r7, #4]
 80060bc:	88f8      	ldrh	r0, [r7, #6]
 80060be:	887b      	ldrh	r3, [r7, #2]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	2301      	movs	r3, #1
 80060c4:	2201      	movs	r2, #1
 80060c6:	f7ff ff29 	bl	8005f1c <Displ_FillArea>
 80060ca:	e000      	b.n	80060ce <Displ_Pixel+0x3e>
        return;
 80060cc:	bf00      	nop

}
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20008672 	.word	0x20008672
 80060d8:	20008674 	.word	0x20008674

080060dc <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	80fb      	strh	r3, [r7, #6]
 80060ee:	4603      	mov	r3, r0
 80060f0:	80bb      	strh	r3, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	807b      	strh	r3, [r7, #2]
 80060f6:	4613      	mov	r3, r2
 80060f8:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 80060fa:	887b      	ldrh	r3, [r7, #2]
 80060fc:	f1c3 0301 	rsb	r3, r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8006104:	2301      	movs	r3, #1
 8006106:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	461a      	mov	r2, r3
 800610c:	03d2      	lsls	r2, r2, #15
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 800611e:	88f8      	ldrh	r0, [r7, #6]
 8006120:	88ba      	ldrh	r2, [r7, #4]
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	4413      	add	r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	883a      	ldrh	r2, [r7, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	f7ff ffb0 	bl	8006090 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8006130:	88f8      	ldrh	r0, [r7, #6]
 8006132:	88ba      	ldrh	r2, [r7, #4]
 8006134:	887b      	ldrh	r3, [r7, #2]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	b29b      	uxth	r3, r3
 800613a:	883a      	ldrh	r2, [r7, #0]
 800613c:	4619      	mov	r1, r3
 800613e:	f7ff ffa7 	bl	8006090 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	887b      	ldrh	r3, [r7, #2]
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	88b9      	ldrh	r1, [r7, #4]
 800614c:	883a      	ldrh	r2, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff9e 	bl	8006090 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	887b      	ldrh	r3, [r7, #2]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	88b9      	ldrh	r1, [r7, #4]
 800615e:	883a      	ldrh	r2, [r7, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7ff ff95 	bl	8006090 <Displ_Pixel>

    while (x<y) {
 8006166:	e081      	b.n	800626c <Displ_drawCircle+0x190>
        if (f >= 0) {
 8006168:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800616c:	2b00      	cmp	r3, #0
 800616e:	db0e      	blt.n	800618e <Displ_drawCircle+0xb2>
            y--;
 8006170:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800617c:	8a7b      	ldrh	r3, [r7, #18]
 800617e:	3302      	adds	r3, #2
 8006180:	b29b      	uxth	r3, r3
 8006182:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8006184:	8afa      	ldrh	r2, [r7, #22]
 8006186:	8a7b      	ldrh	r3, [r7, #18]
 8006188:	4413      	add	r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800618e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006192:	b29b      	uxth	r3, r3
 8006194:	3301      	adds	r3, #1
 8006196:	b29b      	uxth	r3, r3
 8006198:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800619a:	8abb      	ldrh	r3, [r7, #20]
 800619c:	3302      	adds	r3, #2
 800619e:	b29b      	uxth	r3, r3
 80061a0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80061a2:	8afa      	ldrh	r2, [r7, #22]
 80061a4:	8abb      	ldrh	r3, [r7, #20]
 80061a6:	4413      	add	r3, r2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	8a3b      	ldrh	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	b298      	uxth	r0, r3
 80061b4:	88ba      	ldrh	r2, [r7, #4]
 80061b6:	89fb      	ldrh	r3, [r7, #14]
 80061b8:	4413      	add	r3, r2
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	883a      	ldrh	r2, [r7, #0]
 80061be:	4619      	mov	r1, r3
 80061c0:	f7ff ff66 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	8a3b      	ldrh	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	b298      	uxth	r0, r3
 80061cc:	88ba      	ldrh	r2, [r7, #4]
 80061ce:	89fb      	ldrh	r3, [r7, #14]
 80061d0:	4413      	add	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	883a      	ldrh	r2, [r7, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7ff ff5a 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	8a3b      	ldrh	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	b298      	uxth	r0, r3
 80061e4:	88ba      	ldrh	r2, [r7, #4]
 80061e6:	89fb      	ldrh	r3, [r7, #14]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	883a      	ldrh	r2, [r7, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	f7ff ff4e 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	8a3b      	ldrh	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	b298      	uxth	r0, r3
 80061fc:	88ba      	ldrh	r2, [r7, #4]
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	b29b      	uxth	r3, r3
 8006204:	883a      	ldrh	r2, [r7, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	f7ff ff42 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	4413      	add	r3, r2
 8006212:	b298      	uxth	r0, r3
 8006214:	88ba      	ldrh	r2, [r7, #4]
 8006216:	8a3b      	ldrh	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	b29b      	uxth	r3, r3
 800621c:	883a      	ldrh	r2, [r7, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	f7ff ff36 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	89fb      	ldrh	r3, [r7, #14]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	b298      	uxth	r0, r3
 800622c:	88ba      	ldrh	r2, [r7, #4]
 800622e:	8a3b      	ldrh	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	b29b      	uxth	r3, r3
 8006234:	883a      	ldrh	r2, [r7, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	f7ff ff2a 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	89fb      	ldrh	r3, [r7, #14]
 8006240:	4413      	add	r3, r2
 8006242:	b298      	uxth	r0, r3
 8006244:	88ba      	ldrh	r2, [r7, #4]
 8006246:	8a3b      	ldrh	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	b29b      	uxth	r3, r3
 800624c:	883a      	ldrh	r2, [r7, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	f7ff ff1e 	bl	8006090 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	89fb      	ldrh	r3, [r7, #14]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	b298      	uxth	r0, r3
 800625c:	88ba      	ldrh	r2, [r7, #4]
 800625e:	8a3b      	ldrh	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	b29b      	uxth	r3, r3
 8006264:	883a      	ldrh	r2, [r7, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	f7ff ff12 	bl	8006090 <Displ_Pixel>
    while (x<y) {
 800626c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006274:	429a      	cmp	r2, r3
 8006276:	f6ff af77 	blt.w	8006168 <Displ_drawCircle+0x8c>
    }
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd90      	pop	{r4, r7, pc}

08006284 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af02      	add	r7, sp, #8
 800628a:	4603      	mov	r3, r0
 800628c:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <Displ_CLS+0x30>)
 8006290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006294:	b29a      	uxth	r2, r3
 8006296:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <Displ_CLS+0x34>)
 8006298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800629c:	b299      	uxth	r1, r3
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	460b      	mov	r3, r1
 80062a4:	2100      	movs	r1, #0
 80062a6:	2000      	movs	r0, #0
 80062a8:	f7ff fe38 	bl	8005f1c <Displ_FillArea>
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20008672 	.word	0x20008672
 80062b8:	20008674 	.word	0x20008674

080062bc <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80062bc:	b590      	push	{r4, r7, lr}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4604      	mov	r4, r0
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	80fb      	strh	r3, [r7, #6]
 80062ce:	4603      	mov	r3, r0
 80062d0:	80bb      	strh	r3, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	807b      	strh	r3, [r7, #2]
 80062d6:	4613      	mov	r3, r2
 80062d8:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80062da:	887b      	ldrh	r3, [r7, #2]
 80062dc:	f1c3 0301 	rsb	r3, r3, #1
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80062e4:	2301      	movs	r3, #1
 80062e6:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	461a      	mov	r2, r3
 80062ec:	03d2      	lsls	r2, r2, #15
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80062fa:	887b      	ldrh	r3, [r7, #2]
 80062fc:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 80062fe:	e095      	b.n	800642c <drawCircleHelper+0x170>
        if (f >= 0) {
 8006300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006304:	2b00      	cmp	r3, #0
 8006306:	db0e      	blt.n	8006326 <drawCircleHelper+0x6a>
            y--;
 8006308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8006314:	8a7b      	ldrh	r3, [r7, #18]
 8006316:	3302      	adds	r3, #2
 8006318:	b29b      	uxth	r3, r3
 800631a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800631c:	8afa      	ldrh	r2, [r7, #22]
 800631e:	8a7b      	ldrh	r3, [r7, #18]
 8006320:	4413      	add	r3, r2
 8006322:	b29b      	uxth	r3, r3
 8006324:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8006326:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800632a:	b29b      	uxth	r3, r3
 800632c:	3301      	adds	r3, #1
 800632e:	b29b      	uxth	r3, r3
 8006330:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8006332:	8abb      	ldrh	r3, [r7, #20]
 8006334:	3302      	adds	r3, #2
 8006336:	b29b      	uxth	r3, r3
 8006338:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800633a:	8afa      	ldrh	r2, [r7, #22]
 800633c:	8abb      	ldrh	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	b29b      	uxth	r3, r3
 8006342:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d017      	beq.n	800637e <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	8a3b      	ldrh	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	b298      	uxth	r0, r3
 8006356:	88ba      	ldrh	r2, [r7, #4]
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	4413      	add	r3, r2
 800635c:	b29b      	uxth	r3, r3
 800635e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006360:	4619      	mov	r1, r3
 8006362:	f7ff fe95 	bl	8006090 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	89fb      	ldrh	r3, [r7, #14]
 800636a:	4413      	add	r3, r2
 800636c:	b298      	uxth	r0, r3
 800636e:	88ba      	ldrh	r2, [r7, #4]
 8006370:	8a3b      	ldrh	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	b29b      	uxth	r3, r3
 8006376:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006378:	4619      	mov	r1, r3
 800637a:	f7ff fe89 	bl	8006090 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 800637e:	787b      	ldrb	r3, [r7, #1]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d017      	beq.n	80063b8 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	8a3b      	ldrh	r3, [r7, #16]
 800638c:	4413      	add	r3, r2
 800638e:	b298      	uxth	r0, r3
 8006390:	88ba      	ldrh	r2, [r7, #4]
 8006392:	89fb      	ldrh	r3, [r7, #14]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	b29b      	uxth	r3, r3
 8006398:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800639a:	4619      	mov	r1, r3
 800639c:	f7ff fe78 	bl	8006090 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	89fb      	ldrh	r3, [r7, #14]
 80063a4:	4413      	add	r3, r2
 80063a6:	b298      	uxth	r0, r3
 80063a8:	88ba      	ldrh	r2, [r7, #4]
 80063aa:	8a3b      	ldrh	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063b2:	4619      	mov	r1, r3
 80063b4:	f7ff fe6c 	bl	8006090 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 80063b8:	787b      	ldrb	r3, [r7, #1]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	b298      	uxth	r0, r3
 80063ca:	88ba      	ldrh	r2, [r7, #4]
 80063cc:	8a3b      	ldrh	r3, [r7, #16]
 80063ce:	4413      	add	r3, r2
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063d4:	4619      	mov	r1, r3
 80063d6:	f7ff fe5b 	bl	8006090 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	8a3b      	ldrh	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	b298      	uxth	r0, r3
 80063e2:	88ba      	ldrh	r2, [r7, #4]
 80063e4:	89fb      	ldrh	r3, [r7, #14]
 80063e6:	4413      	add	r3, r2
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063ec:	4619      	mov	r1, r3
 80063ee:	f7ff fe4f 	bl	8006090 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 80063f2:	787b      	ldrb	r3, [r7, #1]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	89fb      	ldrh	r3, [r7, #14]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	b298      	uxth	r0, r3
 8006404:	88ba      	ldrh	r2, [r7, #4]
 8006406:	8a3b      	ldrh	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800640e:	4619      	mov	r1, r3
 8006410:	f7ff fe3e 	bl	8006090 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	8a3b      	ldrh	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	b298      	uxth	r0, r3
 800641c:	88ba      	ldrh	r2, [r7, #4]
 800641e:	89fb      	ldrh	r3, [r7, #14]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b29b      	uxth	r3, r3
 8006424:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006426:	4619      	mov	r1, r3
 8006428:	f7ff fe32 	bl	8006090 <Displ_Pixel>
    while (x<y) {
 800642c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006434:	429a      	cmp	r2, r3
 8006436:	f6ff af63 	blt.w	8006300 <drawCircleHelper+0x44>
        }
    }
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	bd90      	pop	{r4, r7, pc}

08006444 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af02      	add	r7, sp, #8
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4623      	mov	r3, r4
 8006454:	80fb      	strh	r3, [r7, #6]
 8006456:	4603      	mov	r3, r0
 8006458:	80bb      	strh	r3, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	807b      	strh	r3, [r7, #2]
 800645e:	4613      	mov	r3, r2
 8006460:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8006462:	887b      	ldrh	r3, [r7, #2]
 8006464:	f1c3 0301 	rsb	r3, r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800646c:	2301      	movs	r3, #1
 800646e:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8006470:	887b      	ldrh	r3, [r7, #2]
 8006472:	461a      	mov	r2, r3
 8006474:	03d2      	lsls	r2, r2, #15
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	b29b      	uxth	r3, r3
 800647c:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8006486:	e0a7      	b.n	80065d8 <fillCircleHelper+0x194>
    if (f >= 0) {
 8006488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800648c:	2b00      	cmp	r3, #0
 800648e:	db0e      	blt.n	80064ae <fillCircleHelper+0x6a>
      y--;
 8006490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800649c:	8a7b      	ldrh	r3, [r7, #18]
 800649e:	3302      	adds	r3, #2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80064a4:	8afa      	ldrh	r2, [r7, #22]
 80064a6:	8a7b      	ldrh	r3, [r7, #18]
 80064a8:	4413      	add	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80064ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80064ba:	8abb      	ldrh	r3, [r7, #20]
 80064bc:	3302      	adds	r3, #2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80064c2:	8afa      	ldrh	r2, [r7, #22]
 80064c4:	8abb      	ldrh	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80064cc:	787b      	ldrb	r3, [r7, #1]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d03d      	beq.n	8006552 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	8a3b      	ldrh	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	b218      	sxth	r0, r3
 80064e0:	88ba      	ldrh	r2, [r7, #4]
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	b219      	sxth	r1, r3
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	8a3b      	ldrh	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b21c      	sxth	r4, r3
 80064f4:	88ba      	ldrh	r2, [r7, #4]
 80064f6:	89fb      	ldrh	r3, [r7, #14]
 80064f8:	4413      	add	r3, r2
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064fe:	4413      	add	r3, r2
 8006500:	b29b      	uxth	r3, r3
 8006502:	3301      	adds	r3, #1
 8006504:	b29b      	uxth	r3, r3
 8006506:	b21a      	sxth	r2, r3
 8006508:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	4622      	mov	r2, r4
 8006510:	f000 f8a1 	bl	8006656 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	89fb      	ldrh	r3, [r7, #14]
 8006518:	4413      	add	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	b218      	sxth	r0, r3
 800651e:	88ba      	ldrh	r2, [r7, #4]
 8006520:	8a3b      	ldrh	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	b219      	sxth	r1, r3
 8006528:	88fa      	ldrh	r2, [r7, #6]
 800652a:	89fb      	ldrh	r3, [r7, #14]
 800652c:	4413      	add	r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	b21c      	sxth	r4, r3
 8006532:	88ba      	ldrh	r2, [r7, #4]
 8006534:	8a3b      	ldrh	r3, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	b29a      	uxth	r2, r3
 800653a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800653c:	4413      	add	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	3301      	adds	r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	b21a      	sxth	r2, r3
 8006546:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	4622      	mov	r2, r4
 800654e:	f000 f882 	bl	8006656 <Displ_Line>
    }
    if (cornername & 0x2) {
 8006552:	787b      	ldrb	r3, [r7, #1]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d03d      	beq.n	80065d8 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	8a3b      	ldrh	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	b29b      	uxth	r3, r3
 8006564:	b218      	sxth	r0, r3
 8006566:	88ba      	ldrh	r2, [r7, #4]
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	b29b      	uxth	r3, r3
 800656e:	b219      	sxth	r1, r3
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	8a3b      	ldrh	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	b21c      	sxth	r4, r3
 800657a:	88ba      	ldrh	r2, [r7, #4]
 800657c:	89fb      	ldrh	r3, [r7, #14]
 800657e:	4413      	add	r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006584:	4413      	add	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	3301      	adds	r3, #1
 800658a:	b29b      	uxth	r3, r3
 800658c:	b21a      	sxth	r2, r3
 800658e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	4622      	mov	r2, r4
 8006596:	f000 f85e 	bl	8006656 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	89fb      	ldrh	r3, [r7, #14]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	b218      	sxth	r0, r3
 80065a4:	88ba      	ldrh	r2, [r7, #4]
 80065a6:	8a3b      	ldrh	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	b219      	sxth	r1, r3
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	89fb      	ldrh	r3, [r7, #14]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b21c      	sxth	r4, r3
 80065b8:	88ba      	ldrh	r2, [r7, #4]
 80065ba:	8a3b      	ldrh	r3, [r7, #16]
 80065bc:	4413      	add	r3, r2
 80065be:	b29a      	uxth	r2, r3
 80065c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065c2:	4413      	add	r3, r2
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3301      	adds	r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	b21a      	sxth	r2, r3
 80065cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	4622      	mov	r2, r4
 80065d4:	f000 f83f 	bl	8006656 <Displ_Line>
  while (x<y) {
 80065d8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80065dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	f6ff af51 	blt.w	8006488 <fillCircleHelper+0x44>
    }
  }
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd90      	pop	{r4, r7, pc}

080065f0 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	4604      	mov	r4, r0
 80065f8:	4608      	mov	r0, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	461a      	mov	r2, r3
 80065fe:	4623      	mov	r3, r4
 8006600:	80fb      	strh	r3, [r7, #6]
 8006602:	4603      	mov	r3, r0
 8006604:	80bb      	strh	r3, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	807b      	strh	r3, [r7, #2]
 800660a:	4613      	mov	r3, r2
 800660c:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 800660e:	88ba      	ldrh	r2, [r7, #4]
 8006610:	887b      	ldrh	r3, [r7, #2]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	b29b      	uxth	r3, r3
 8006616:	b219      	sxth	r1, r3
 8006618:	88ba      	ldrh	r2, [r7, #4]
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	4413      	add	r3, r2
 800661e:	b29b      	uxth	r3, r3
 8006620:	b21c      	sxth	r4, r3
 8006622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006626:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800662a:	883b      	ldrh	r3, [r7, #0]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	4623      	mov	r3, r4
 8006630:	f000 f811 	bl	8006656 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8006634:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006638:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800663c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006640:	883b      	ldrh	r3, [r7, #0]
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	2300      	movs	r3, #0
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2303      	movs	r3, #3
 800664a:	f7ff fefb 	bl	8006444 <fillCircleHelper>
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	bd90      	pop	{r4, r7, pc}

08006656 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8006656:	b590      	push	{r4, r7, lr}
 8006658:	b08b      	sub	sp, #44	; 0x2c
 800665a:	af02      	add	r7, sp, #8
 800665c:	4604      	mov	r4, r0
 800665e:	4608      	mov	r0, r1
 8006660:	4611      	mov	r1, r2
 8006662:	461a      	mov	r2, r3
 8006664:	4623      	mov	r3, r4
 8006666:	80fb      	strh	r3, [r7, #6]
 8006668:	4603      	mov	r3, r0
 800666a:	80bb      	strh	r3, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	807b      	strh	r3, [r7, #2]
 8006670:	4613      	mov	r3, r2
 8006672:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8006674:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006678:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800667c:	429a      	cmp	r2, r3
 800667e:	d123      	bne.n	80066c8 <Displ_Line+0x72>
    	if (y1>y0){
 8006680:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	dd0e      	ble.n	80066aa <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 800668c:	88f8      	ldrh	r0, [r7, #6]
 800668e:	88b9      	ldrh	r1, [r7, #4]
 8006690:	883a      	ldrh	r2, [r7, #0]
 8006692:	88bb      	ldrh	r3, [r7, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	b29b      	uxth	r3, r3
 8006698:	3301      	adds	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	2201      	movs	r2, #1
 80066a4:	f7ff fc3a 	bl	8005f1c <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 80066a8:	e103      	b.n	80068b2 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80066aa:	88f8      	ldrh	r0, [r7, #6]
 80066ac:	8839      	ldrh	r1, [r7, #0]
 80066ae:	88ba      	ldrh	r2, [r7, #4]
 80066b0:	883b      	ldrh	r3, [r7, #0]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3301      	adds	r3, #1
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	2201      	movs	r2, #1
 80066c2:	f7ff fc2b 	bl	8005f1c <Displ_FillArea>
    	return;
 80066c6:	e0f4      	b.n	80068b2 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80066c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80066cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d121      	bne.n	8006718 <Displ_Line+0xc2>
    	if (x1>x0)
 80066d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80066d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066dc:	429a      	cmp	r2, r3
 80066de:	dd0d      	ble.n	80066fc <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 80066e0:	88f8      	ldrh	r0, [r7, #6]
 80066e2:	88b9      	ldrh	r1, [r7, #4]
 80066e4:	887a      	ldrh	r2, [r7, #2]
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3301      	adds	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	2301      	movs	r3, #1
 80066f6:	f7ff fc11 	bl	8005f1c <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 80066fa:	e0da      	b.n	80068b2 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 80066fc:	8878      	ldrh	r0, [r7, #2]
 80066fe:	8839      	ldrh	r1, [r7, #0]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	3301      	adds	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2301      	movs	r3, #1
 8006712:	f7ff fc03 	bl	8005f1c <Displ_FillArea>
    	return;
 8006716:	e0cc      	b.n	80068b2 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8006718:	f9b7 2000 	ldrsh.w	r2, [r7]
 800671c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	dd05      	ble.n	8006730 <Displ_Line+0xda>
 8006724:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006728:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800672c:	1ad2      	subs	r2, r2, r3
 800672e:	e004      	b.n	800673a <Displ_Line+0xe4>
 8006730:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006734:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800673e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006742:	4299      	cmp	r1, r3
 8006744:	dd05      	ble.n	8006752 <Displ_Line+0xfc>
 8006746:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800674a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800674e:	1acb      	subs	r3, r1, r3
 8006750:	e004      	b.n	800675c <Displ_Line+0x106>
 8006752:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006756:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800675a:	1acb      	subs	r3, r1, r3
 800675c:	429a      	cmp	r2, r3
 800675e:	bfcc      	ite	gt
 8006760:	2301      	movgt	r3, #1
 8006762:	2300      	movle	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8006768:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	827b      	strh	r3, [r7, #18]
 8006774:	88bb      	ldrh	r3, [r7, #4]
 8006776:	80fb      	strh	r3, [r7, #6]
 8006778:	8a7b      	ldrh	r3, [r7, #18]
 800677a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	823b      	strh	r3, [r7, #16]
 8006780:	883b      	ldrh	r3, [r7, #0]
 8006782:	807b      	strh	r3, [r7, #2]
 8006784:	8a3b      	ldrh	r3, [r7, #16]
 8006786:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8006788:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800678c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006790:	429a      	cmp	r2, r3
 8006792:	dd0b      	ble.n	80067ac <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	81fb      	strh	r3, [r7, #14]
 8006798:	887b      	ldrh	r3, [r7, #2]
 800679a:	80fb      	strh	r3, [r7, #6]
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80067a0:	88bb      	ldrh	r3, [r7, #4]
 80067a2:	81bb      	strh	r3, [r7, #12]
 80067a4:	883b      	ldrh	r3, [r7, #0]
 80067a6:	80bb      	strh	r3, [r7, #4]
 80067a8:	89bb      	ldrh	r3, [r7, #12]
 80067aa:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80067ac:	887a      	ldrh	r2, [r7, #2]
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80067b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80067ba:	105b      	asrs	r3, r3, #1
 80067bc:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80067be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80067c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	da07      	bge.n	80067da <Displ_Line+0x184>
        dy = y1-y0;
 80067ca:	883a      	ldrh	r2, [r7, #0]
 80067cc:	88bb      	ldrh	r3, [r7, #4]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 80067d4:	2301      	movs	r3, #1
 80067d6:	837b      	strh	r3, [r7, #26]
 80067d8:	e007      	b.n	80067ea <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 80067da:	88ba      	ldrh	r2, [r7, #4]
 80067dc:	883b      	ldrh	r3, [r7, #0]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 80067e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067e8:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 80067ea:	2300      	movs	r3, #0
 80067ec:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	83bb      	strh	r3, [r7, #28]
 80067f2:	e03a      	b.n	800686a <Displ_Line+0x214>
    	l++;
 80067f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3301      	adds	r3, #1
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8006800:	8b3a      	ldrh	r2, [r7, #24]
 8006802:	8afb      	ldrh	r3, [r7, #22]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 800680a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da25      	bge.n	800685e <Displ_Line+0x208>
        	if (steep) {
 8006812:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 800681a:	88b8      	ldrh	r0, [r7, #4]
 800681c:	88f9      	ldrh	r1, [r7, #6]
 800681e:	8bfa      	ldrh	r2, [r7, #30]
 8006820:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	2201      	movs	r2, #1
 8006828:	f7ff fb78 	bl	8005f1c <Displ_FillArea>
 800682c:	e007      	b.n	800683e <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 800682e:	88f8      	ldrh	r0, [r7, #6]
 8006830:	88b9      	ldrh	r1, [r7, #4]
 8006832:	8bfa      	ldrh	r2, [r7, #30]
 8006834:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2301      	movs	r3, #1
 800683a:	f7ff fb6f 	bl	8005f1c <Displ_FillArea>
            }
            y0 += ystep;
 800683e:	88ba      	ldrh	r2, [r7, #4]
 8006840:	8b7b      	ldrh	r3, [r7, #26]
 8006842:	4413      	add	r3, r2
 8006844:	b29b      	uxth	r3, r3
 8006846:	80bb      	strh	r3, [r7, #4]
            l=0;
 8006848:	2300      	movs	r3, #0
 800684a:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 800684c:	8bbb      	ldrh	r3, [r7, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	b29b      	uxth	r3, r3
 8006852:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8006854:	8b3a      	ldrh	r2, [r7, #24]
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	4413      	add	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800685e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006862:	b29b      	uxth	r3, r3
 8006864:	3301      	adds	r3, #1
 8006866:	b29b      	uxth	r3, r3
 8006868:	83bb      	strh	r3, [r7, #28]
 800686a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800686e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006872:	429a      	cmp	r2, r3
 8006874:	ddbe      	ble.n	80067f4 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8006876:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d019      	beq.n	80068b2 <Displ_Line+0x25c>
    	if (steep) {
 800687e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8006886:	88b8      	ldrh	r0, [r7, #4]
 8006888:	88f9      	ldrh	r1, [r7, #6]
 800688a:	8bfb      	ldrh	r3, [r7, #30]
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	2201      	movs	r2, #1
 8006898:	f7ff fb40 	bl	8005f1c <Displ_FillArea>
 800689c:	e009      	b.n	80068b2 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 800689e:	88f8      	ldrh	r0, [r7, #6]
 80068a0:	88b9      	ldrh	r1, [r7, #4]
 80068a2:	8bfb      	ldrh	r3, [r7, #30]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2301      	movs	r3, #1
 80068ae:	f7ff fb35 	bl	8005f1c <Displ_FillArea>
    	}
    }
}
 80068b2:	3724      	adds	r7, #36	; 0x24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd90      	pop	{r4, r7, pc}

080068b8 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af02      	add	r7, sp, #8
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	80fb      	strh	r3, [r7, #6]
 80068ca:	4603      	mov	r3, r0
 80068cc:	80bb      	strh	r3, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	807b      	strh	r3, [r7, #2]
 80068d2:	4613      	mov	r3, r2
 80068d4:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 80068d6:	88f8      	ldrh	r0, [r7, #6]
 80068d8:	88b9      	ldrh	r1, [r7, #4]
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	8b3c      	ldrh	r4, [r7, #24]
 80068de:	8bbb      	ldrh	r3, [r7, #28]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	4623      	mov	r3, r4
 80068e4:	f7ff fb1a 	bl	8005f1c <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 80068e8:	88f8      	ldrh	r0, [r7, #6]
 80068ea:	88ba      	ldrh	r2, [r7, #4]
 80068ec:	883b      	ldrh	r3, [r7, #0]
 80068ee:	4413      	add	r3, r2
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	8b3b      	ldrh	r3, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	b299      	uxth	r1, r3
 80068f8:	887a      	ldrh	r2, [r7, #2]
 80068fa:	8b3c      	ldrh	r4, [r7, #24]
 80068fc:	8bbb      	ldrh	r3, [r7, #28]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4623      	mov	r3, r4
 8006902:	f7ff fb0b 	bl	8005f1c <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8006906:	88f8      	ldrh	r0, [r7, #6]
 8006908:	88b9      	ldrh	r1, [r7, #4]
 800690a:	8b3a      	ldrh	r2, [r7, #24]
 800690c:	883c      	ldrh	r4, [r7, #0]
 800690e:	8bbb      	ldrh	r3, [r7, #28]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	4623      	mov	r3, r4
 8006914:	f7ff fb02 	bl	8005f1c <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8006918:	88fa      	ldrh	r2, [r7, #6]
 800691a:	887b      	ldrh	r3, [r7, #2]
 800691c:	4413      	add	r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	8b3b      	ldrh	r3, [r7, #24]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	b298      	uxth	r0, r3
 8006926:	88b9      	ldrh	r1, [r7, #4]
 8006928:	8b3a      	ldrh	r2, [r7, #24]
 800692a:	883c      	ldrh	r4, [r7, #0]
 800692c:	8bbb      	ldrh	r3, [r7, #28]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4623      	mov	r3, r4
 8006932:	f7ff faf3 	bl	8005f1c <Displ_FillArea>
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	bd90      	pop	{r4, r7, pc}

0800693e <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800693e:	b590      	push	{r4, r7, lr}
 8006940:	b085      	sub	sp, #20
 8006942:	af02      	add	r7, sp, #8
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	461a      	mov	r2, r3
 800694c:	4623      	mov	r3, r4
 800694e:	80fb      	strh	r3, [r7, #6]
 8006950:	4603      	mov	r3, r0
 8006952:	80bb      	strh	r3, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	807b      	strh	r3, [r7, #2]
 8006958:	4613      	mov	r3, r2
 800695a:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 800695c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006960:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006964:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006968:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800696c:	8c3b      	ldrh	r3, [r7, #32]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4623      	mov	r3, r4
 8006972:	f7ff fe70 	bl	8006656 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8006976:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800697a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800697e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8006982:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8006986:	8c3b      	ldrh	r3, [r7, #32]
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	4623      	mov	r3, r4
 800698c:	f7ff fe63 	bl	8006656 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8006990:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006994:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006998:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800699c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80069a0:	8c3b      	ldrh	r3, [r7, #32]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4623      	mov	r3, r4
 80069a6:	f7ff fe56 	bl	8006656 <Displ_Line>
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd90      	pop	{r4, r7, pc}

080069b2 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80069b2:	b590      	push	{r4, r7, lr}
 80069b4:	b091      	sub	sp, #68	; 0x44
 80069b6:	af02      	add	r7, sp, #8
 80069b8:	4604      	mov	r4, r0
 80069ba:	4608      	mov	r0, r1
 80069bc:	4611      	mov	r1, r2
 80069be:	461a      	mov	r2, r3
 80069c0:	4623      	mov	r3, r4
 80069c2:	80fb      	strh	r3, [r7, #6]
 80069c4:	4603      	mov	r3, r0
 80069c6:	80bb      	strh	r3, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
 80069cc:	4613      	mov	r3, r2
 80069ce:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80069d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80069d4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80069d8:	429a      	cmp	r2, r3
 80069da:	dd0b      	ble.n	80069f4 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80069dc:	88bb      	ldrh	r3, [r7, #4]
 80069de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069e0:	883b      	ldrh	r3, [r7, #0]
 80069e2:	80bb      	strh	r3, [r7, #4]
 80069e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069e6:	803b      	strh	r3, [r7, #0]
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069ec:	887b      	ldrh	r3, [r7, #2]
 80069ee:	80fb      	strh	r3, [r7, #6]
 80069f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f2:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 80069f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80069f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80069fc:	429a      	cmp	r2, r3
 80069fe:	dd0f      	ble.n	8006a20 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8006a00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006a04:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a06:	883b      	ldrh	r3, [r7, #0]
 8006a08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006a0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a0e:	803b      	strh	r3, [r7, #0]
 8006a10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a14:	843b      	strh	r3, [r7, #32]
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a1c:	8c3b      	ldrh	r3, [r7, #32]
 8006a1e:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8006a20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006a24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	dd0b      	ble.n	8006a44 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006a2c:	88bb      	ldrh	r3, [r7, #4]
 8006a2e:	83fb      	strh	r3, [r7, #30]
 8006a30:	883b      	ldrh	r3, [r7, #0]
 8006a32:	80bb      	strh	r3, [r7, #4]
 8006a34:	8bfb      	ldrh	r3, [r7, #30]
 8006a36:	803b      	strh	r3, [r7, #0]
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	83bb      	strh	r3, [r7, #28]
 8006a3c:	887b      	ldrh	r3, [r7, #2]
 8006a3e:	80fb      	strh	r3, [r7, #6]
 8006a40:	8bbb      	ldrh	r3, [r7, #28]
 8006a42:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8006a44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006a48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d136      	bne.n	8006abe <Displ_fillTriangle+0x10c>
        a = b = x0;
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a56:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8006a58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006a5c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006a60:	429a      	cmp	r2, r3
 8006a62:	da02      	bge.n	8006a6a <Displ_fillTriangle+0xb8>
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a68:	e007      	b.n	8006a7a <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8006a6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006a6e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006a72:	429a      	cmp	r2, r3
 8006a74:	dd01      	ble.n	8006a7a <Displ_fillTriangle+0xc8>
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8006a7a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8006a7e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006a82:	429a      	cmp	r2, r3
 8006a84:	da03      	bge.n	8006a8e <Displ_fillTriangle+0xdc>
 8006a86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a8c:	e008      	b.n	8006aa0 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8006a8e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8006a92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006a96:	429a      	cmp	r2, r3
 8006a98:	dd02      	ble.n	8006aa0 <Displ_fillTriangle+0xee>
 8006a9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a9e:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8006aa0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006aa4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006aa8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006aac:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006ab0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	f7ff fdcd 	bl	8006656 <Displ_Line>
        return;
 8006abc:	e0d2      	b.n	8006c64 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8006abe:	887a      	ldrh	r2, [r7, #2]
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8006ac8:	883a      	ldrh	r2, [r7, #0]
 8006aca:	88bb      	ldrh	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8006ad2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8006ade:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006ae2:	88bb      	ldrh	r3, [r7, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8006aea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006aee:	887b      	ldrh	r3, [r7, #2]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8006af6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006afa:	883b      	ldrh	r3, [r7, #0]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8006b02:	2300      	movs	r3, #0
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8006b0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006b0e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d102      	bne.n	8006b1c <Displ_fillTriangle+0x16a>
 8006b16:	883b      	ldrh	r3, [r7, #0]
 8006b18:	863b      	strh	r3, [r7, #48]	; 0x30
 8006b1a:	e003      	b.n	8006b24 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8006b1c:	883b      	ldrh	r3, [r7, #0]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8006b24:	88bb      	ldrh	r3, [r7, #4]
 8006b26:	867b      	strh	r3, [r7, #50]	; 0x32
 8006b28:	e03d      	b.n	8006ba6 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8006b2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	4413      	add	r3, r2
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006b3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b44:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8006b52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b58:	4413      	add	r3, r2
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006b5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b62:	4413      	add	r3, r2
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006b66:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006b6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	dd05      	ble.n	8006b7e <Displ_fillTriangle+0x1cc>
 8006b72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b74:	81bb      	strh	r3, [r7, #12]
 8006b76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b78:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b7a:	89bb      	ldrh	r3, [r7, #12]
 8006b7c:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8006b7e:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006b82:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006b86:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006b8a:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006b8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4623      	mov	r3, r4
 8006b96:	f7ff fd5e 	bl	8006656 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8006b9a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	867b      	strh	r3, [r7, #50]	; 0x32
 8006ba6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006baa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	ddbb      	ble.n	8006b2a <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8006bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bb6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006bba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006bbe:	1a8a      	subs	r2, r1, r2
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8006bc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006bca:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006bce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006bd2:	1a8a      	subs	r2, r1, r2
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8006bda:	e03d      	b.n	8006c58 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8006bdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	887b      	ldrh	r3, [r7, #2]
 8006bea:	4413      	add	r3, r2
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006bf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	4413      	add	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0a:	4413      	add	r3, r2
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006c0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c14:	4413      	add	r3, r2
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006c18:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006c1c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006c20:	429a      	cmp	r2, r3
 8006c22:	dd05      	ble.n	8006c30 <Displ_fillTriangle+0x27e>
 8006c24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c26:	81fb      	strh	r3, [r7, #14]
 8006c28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c2a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006c2c:	89fb      	ldrh	r3, [r7, #14]
 8006c2e:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8006c30:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006c34:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006c38:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006c3c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006c40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	4623      	mov	r3, r4
 8006c48:	f7ff fd05 	bl	8006656 <Displ_Line>
    for(; y<=y2; y++) {
 8006c4c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3301      	adds	r3, #1
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	867b      	strh	r3, [r7, #50]	; 0x32
 8006c58:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006c5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006c60:	429a      	cmp	r2, r3
 8006c62:	ddbb      	ble.n	8006bdc <Displ_fillTriangle+0x22a>
    }
}
 8006c64:	373c      	adds	r7, #60	; 0x3c
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd90      	pop	{r4, r7, pc}
	...

08006c6c <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	b590      	push	{r4, r7, lr}
 8006c70:	b08f      	sub	sp, #60	; 0x3c
 8006c72:	af02      	add	r7, sp, #8
 8006c74:	647b      	str	r3, [r7, #68]	; 0x44
 8006c76:	4603      	mov	r3, r0
 8006c78:	80fb      	strh	r3, [r7, #6]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	80bb      	strh	r3, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8006c82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c86:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8006c88:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d102      	bne.n	8006c96 <Displ_WChar+0x2a>
		wsize<<= 1;
 8006c90:	7efb      	ldrb	r3, [r7, #27]
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8006c9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c9e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8006ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	3b20      	subs	r3, #32
 8006cae:	4619      	mov	r1, r3
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8006cba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d005      	beq.n	8006cce <Displ_WChar+0x62>
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8006cc6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006cca:	61fb      	str	r3, [r7, #28]
			break;
 8006ccc:	e005      	b.n	8006cda <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61fb      	str	r3, [r7, #28]
			break;
 8006cd4:	e001      	b.n	8006cda <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8006cd6:	2380      	movs	r3, #128	; 0x80
 8006cd8:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8006cda:	4b68      	ldr	r3, [pc, #416]	; (8006e7c <Displ_WChar+0x210>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006ce0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006cf8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	b21a      	sxth	r2, r3
 8006d00:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	b21b      	sxth	r3, r3
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	b21b      	sxth	r3, r3
 8006d0e:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d14:	e06f      	b.n	8006df6 <Displ_WChar+0x18a>
		b=0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8006d1a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d015      	beq.n	8006d4e <Displ_WChar+0xe2>
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d120      	bne.n	8006d68 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	4413      	add	r3, r2
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	041a      	lsls	r2, r3, #16
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	3301      	adds	r3, #1
 8006d34:	6939      	ldr	r1, [r7, #16]
 8006d36:	440b      	add	r3, r1
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d40:	3202      	adds	r2, #2
 8006d42:	6939      	ldr	r1, [r7, #16]
 8006d44:	440a      	add	r2, r1
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006d4c:	e011      	b.n	8006d72 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	4413      	add	r3, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5a:	3201      	adds	r2, #1
 8006d5c:	6939      	ldr	r1, [r7, #16]
 8006d5e:	440a      	add	r2, r1
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006d66:	e004      	b.n	8006d72 <Displ_WChar+0x106>
			default:
				b=pos[i];
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	4413      	add	r3, r2
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8006d72:	2300      	movs	r3, #0
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
 8006d76:	e032      	b.n	8006dde <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8006d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	409a      	lsls	r2, r3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d014      	beq.n	8006db0 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	623a      	str	r2, [r7, #32]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	897a      	ldrh	r2, [r7, #10]
 8006d94:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8006d96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d11c      	bne.n	8006dd8 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	623a      	str	r2, [r7, #32]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	897a      	ldrh	r2, [r7, #10]
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e013      	b.n	8006dd8 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	623a      	str	r2, [r7, #32]
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	893a      	ldrh	r2, [r7, #8]
 8006dbe:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8006dc0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d107      	bne.n	8006dd8 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	623a      	str	r2, [r7, #32]
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	893a      	ldrh	r2, [r7, #8]
 8006dd6:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	3301      	adds	r3, #1
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006de2:	461a      	mov	r2, r3
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d3c6      	bcc.n	8006d78 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8006dea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006dee:	461a      	mov	r2, r3
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	4413      	add	r3, r2
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d38b      	bcc.n	8006d16 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006e04:	7efb      	ldrb	r3, [r7, #27]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	88fb      	ldrh	r3, [r7, #6]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29c      	uxth	r4, r3
 8006e12:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006e16:	88bb      	ldrh	r3, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	88b9      	ldrh	r1, [r7, #4]
 8006e22:	88f8      	ldrh	r0, [r7, #6]
 8006e24:	4622      	mov	r2, r4
 8006e26:	f7fe ff8d 	bl	8005d44 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e30:	d90b      	bls.n	8006e4a <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8006e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	f240 33ad 	movw	r3, #941	; 0x3ad
 8006e40:	4a0f      	ldr	r2, [pc, #60]	; (8006e80 <Displ_WChar+0x214>)
 8006e42:	4910      	ldr	r1, [pc, #64]	; (8006e84 <Displ_WChar+0x218>)
 8006e44:	4810      	ldr	r0, [pc, #64]	; (8006e88 <Displ_WChar+0x21c>)
 8006e46:	f7fe fcb9 	bl	80057bc <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <Displ_WChar+0x210>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	6a39      	ldr	r1, [r7, #32]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe ff1f 	bl	8005c96 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8006e58:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <Displ_WChar+0x210>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a0b      	ldr	r2, [pc, #44]	; (8006e8c <Displ_WChar+0x220>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d101      	bne.n	8006e66 <Displ_WChar+0x1fa>
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <Displ_WChar+0x224>)
 8006e64:	e000      	b.n	8006e68 <Displ_WChar+0x1fc>
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <Displ_WChar+0x220>)
 8006e68:	4a04      	ldr	r2, [pc, #16]	; (8006e7c <Displ_WChar+0x210>)
 8006e6a:	6013      	str	r3, [r2, #0]

}
 8006e6c:	bf00      	nop
 8006e6e:	3734      	adds	r7, #52	; 0x34
 8006e70:	46bd      	mov	sp, r7
 8006e72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006e76:	b002      	add	sp, #8
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000038 	.word	0x20000038
 8006e80:	08015d10 	.word	0x08015d10
 8006e84:	08011be4 	.word	0x08011be4
 8006e88:	08011c04 	.word	0x08011c04
 8006e8c:	20008678 	.word	0x20008678
 8006e90:	20008e78 	.word	0x20008e78

08006e94 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4623      	mov	r3, r4
 8006ea4:	80fb      	strh	r3, [r7, #6]
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	80bb      	strh	r3, [r7, #4]
 8006eaa:	460b      	mov	r3, r1
 8006eac:	807b      	strh	r3, [r7, #2]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006eb2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006eb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bfa8      	it	ge
 8006ebe:	4613      	movge	r3, r2
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	0fda      	lsrs	r2, r3, #31
 8006ec4:	4413      	add	r3, r2
 8006ec6:	105b      	asrs	r3, r3, #1
 8006ec8:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	dd01      	ble.n	8006eda <Displ_drawRoundRect+0x46>
 8006ed6:	89fb      	ldrh	r3, [r7, #14]
 8006ed8:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	8c3b      	ldrh	r3, [r7, #32]
 8006ede:	4413      	add	r3, r2
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	b218      	sxth	r0, r3
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	4413      	add	r3, r2
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	8c3b      	ldrh	r3, [r7, #32]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	b21a      	sxth	r2, r3
 8006ef8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006efc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006f00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4623      	mov	r3, r4
 8006f06:	f7ff fba6 	bl	8006656 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	8c3b      	ldrh	r3, [r7, #32]
 8006f0e:	4413      	add	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	b218      	sxth	r0, r3
 8006f14:	88ba      	ldrh	r2, [r7, #4]
 8006f16:	883b      	ldrh	r3, [r7, #0]
 8006f18:	4413      	add	r3, r2
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	b219      	sxth	r1, r3
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	887b      	ldrh	r3, [r7, #2]
 8006f26:	4413      	add	r3, r2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	8c3b      	ldrh	r3, [r7, #32]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	b21c      	sxth	r4, r3
 8006f36:	88ba      	ldrh	r2, [r7, #4]
 8006f38:	883b      	ldrh	r3, [r7, #0]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	b21a      	sxth	r2, r3
 8006f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	f7ff fb83 	bl	8006656 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8006f50:	88ba      	ldrh	r2, [r7, #4]
 8006f52:	8c3b      	ldrh	r3, [r7, #32]
 8006f54:	4413      	add	r3, r2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	b219      	sxth	r1, r3
 8006f5a:	88ba      	ldrh	r2, [r7, #4]
 8006f5c:	883b      	ldrh	r3, [r7, #0]
 8006f5e:	4413      	add	r3, r2
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	8c3b      	ldrh	r3, [r7, #32]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	b21c      	sxth	r4, r3
 8006f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	f7ff fb6b 	bl	8006656 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	887b      	ldrh	r3, [r7, #2]
 8006f84:	4413      	add	r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	b218      	sxth	r0, r3
 8006f8e:	88ba      	ldrh	r2, [r7, #4]
 8006f90:	8c3b      	ldrh	r3, [r7, #32]
 8006f92:	4413      	add	r3, r2
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b219      	sxth	r1, r3
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	887b      	ldrh	r3, [r7, #2]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b21c      	sxth	r4, r3
 8006fa6:	88ba      	ldrh	r2, [r7, #4]
 8006fa8:	883b      	ldrh	r3, [r7, #0]
 8006faa:	4413      	add	r3, r2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	8c3b      	ldrh	r3, [r7, #32]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	b21a      	sxth	r2, r3
 8006fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	f7ff fb48 	bl	8006656 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8006fc6:	88fa      	ldrh	r2, [r7, #6]
 8006fc8:	8c3b      	ldrh	r3, [r7, #32]
 8006fca:	4413      	add	r3, r2
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	b218      	sxth	r0, r3
 8006fd0:	88ba      	ldrh	r2, [r7, #4]
 8006fd2:	8c3b      	ldrh	r3, [r7, #32]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	b219      	sxth	r1, r3
 8006fda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f7ff f96a 	bl	80062bc <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	887b      	ldrh	r3, [r7, #2]
 8006fec:	4413      	add	r3, r2
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	8c3b      	ldrh	r3, [r7, #32]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	b218      	sxth	r0, r3
 8006ffc:	88ba      	ldrh	r2, [r7, #4]
 8006ffe:	8c3b      	ldrh	r3, [r7, #32]
 8007000:	4413      	add	r3, r2
 8007002:	b29b      	uxth	r3, r3
 8007004:	b219      	sxth	r1, r3
 8007006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800700a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2302      	movs	r3, #2
 8007010:	f7ff f954 	bl	80062bc <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8007014:	88fa      	ldrh	r2, [r7, #6]
 8007016:	887b      	ldrh	r3, [r7, #2]
 8007018:	4413      	add	r3, r2
 800701a:	b29a      	uxth	r2, r3
 800701c:	8c3b      	ldrh	r3, [r7, #32]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29b      	uxth	r3, r3
 8007026:	b218      	sxth	r0, r3
 8007028:	88ba      	ldrh	r2, [r7, #4]
 800702a:	883b      	ldrh	r3, [r7, #0]
 800702c:	4413      	add	r3, r2
 800702e:	b29a      	uxth	r2, r3
 8007030:	8c3b      	ldrh	r3, [r7, #32]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	b219      	sxth	r1, r3
 800703c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	2304      	movs	r3, #4
 8007046:	f7ff f939 	bl	80062bc <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	8c3b      	ldrh	r3, [r7, #32]
 800704e:	4413      	add	r3, r2
 8007050:	b29b      	uxth	r3, r3
 8007052:	b218      	sxth	r0, r3
 8007054:	88ba      	ldrh	r2, [r7, #4]
 8007056:	883b      	ldrh	r3, [r7, #0]
 8007058:	4413      	add	r3, r2
 800705a:	b29a      	uxth	r2, r3
 800705c:	8c3b      	ldrh	r3, [r7, #32]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	b219      	sxth	r1, r3
 8007068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800706c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2308      	movs	r3, #8
 8007072:	f7ff f923 	bl	80062bc <drawCircleHelper>
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bd90      	pop	{r4, r7, pc}

0800707e <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800707e:	b590      	push	{r4, r7, lr}
 8007080:	b087      	sub	sp, #28
 8007082:	af02      	add	r7, sp, #8
 8007084:	4604      	mov	r4, r0
 8007086:	4608      	mov	r0, r1
 8007088:	4611      	mov	r1, r2
 800708a:	461a      	mov	r2, r3
 800708c:	4623      	mov	r3, r4
 800708e:	80fb      	strh	r3, [r7, #6]
 8007090:	4603      	mov	r3, r0
 8007092:	80bb      	strh	r3, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	807b      	strh	r3, [r7, #2]
 8007098:	4613      	mov	r3, r2
 800709a:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800709c:	f9b7 2000 	ldrsh.w	r2, [r7]
 80070a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bfa8      	it	ge
 80070a8:	4613      	movge	r3, r2
 80070aa:	b21b      	sxth	r3, r3
 80070ac:	0fda      	lsrs	r2, r3, #31
 80070ae:	4413      	add	r3, r2
 80070b0:	105b      	asrs	r3, r3, #1
 80070b2:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80070b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80070b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070bc:	429a      	cmp	r2, r3
 80070be:	dd01      	ble.n	80070c4 <Displ_fillRoundRect+0x46>
 80070c0:	89fb      	ldrh	r3, [r7, #14]
 80070c2:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	8c3b      	ldrh	r3, [r7, #32]
 80070c8:	4413      	add	r3, r2
 80070ca:	b298      	uxth	r0, r3
 80070cc:	88b9      	ldrh	r1, [r7, #4]
 80070ce:	887a      	ldrh	r2, [r7, #2]
 80070d0:	8c3b      	ldrh	r3, [r7, #32]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	b29a      	uxth	r2, r3
 80070da:	883c      	ldrh	r4, [r7, #0]
 80070dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4623      	mov	r3, r4
 80070e2:	f7fe ff1b 	bl	8005f1c <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	887b      	ldrh	r3, [r7, #2]
 80070ea:	4413      	add	r3, r2
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	8c3b      	ldrh	r3, [r7, #32]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b218      	sxth	r0, r3
 80070fa:	88ba      	ldrh	r2, [r7, #4]
 80070fc:	8c3b      	ldrh	r3, [r7, #32]
 80070fe:	4413      	add	r3, r2
 8007100:	b29b      	uxth	r3, r3
 8007102:	b219      	sxth	r1, r3
 8007104:	883a      	ldrh	r2, [r7, #0]
 8007106:	8c3b      	ldrh	r3, [r7, #32]
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29b      	uxth	r3, r3
 8007114:	b21b      	sxth	r3, r3
 8007116:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800711a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800711c:	9201      	str	r2, [sp, #4]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2301      	movs	r3, #1
 8007122:	4622      	mov	r2, r4
 8007124:	f7ff f98e 	bl	8006444 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	8c3b      	ldrh	r3, [r7, #32]
 800712c:	4413      	add	r3, r2
 800712e:	b29b      	uxth	r3, r3
 8007130:	b218      	sxth	r0, r3
 8007132:	88ba      	ldrh	r2, [r7, #4]
 8007134:	8c3b      	ldrh	r3, [r7, #32]
 8007136:	4413      	add	r3, r2
 8007138:	b29b      	uxth	r3, r3
 800713a:	b219      	sxth	r1, r3
 800713c:	883a      	ldrh	r2, [r7, #0]
 800713e:	8c3b      	ldrh	r3, [r7, #32]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	b29b      	uxth	r3, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29b      	uxth	r3, r3
 800714c:	b21b      	sxth	r3, r3
 800714e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8007152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007154:	9201      	str	r2, [sp, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	2302      	movs	r3, #2
 800715a:	4622      	mov	r2, r4
 800715c:	f7ff f972 	bl	8006444 <fillCircleHelper>
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}

08007168 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8007168:	b082      	sub	sp, #8
 800716a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716c:	b08b      	sub	sp, #44	; 0x2c
 800716e:	af06      	add	r7, sp, #24
 8007170:	603a      	str	r2, [r7, #0]
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007174:	4603      	mov	r3, r0
 8007176:	80fb      	strh	r3, [r7, #6]
 8007178:	460b      	mov	r3, r1
 800717a:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 800717c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800717e:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8007180:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007184:	2b01      	cmp	r3, #1
 8007186:	d922      	bls.n	80071ce <Displ_WString+0x66>
		delta<<=1;
 8007188:	89fb      	ldrh	r3, [r7, #14]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800718e:	e01e      	b.n	80071ce <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	88bd      	ldrh	r5, [r7, #4]
 8007196:	88fc      	ldrh	r4, [r7, #6]
 8007198:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80071a6:	9302      	str	r3, [sp, #8]
 80071a8:	466e      	mov	r6, sp
 80071aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071b2:	e886 0003 	stmia.w	r6, {r0, r1}
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff fd56 	bl	8006c6c <Displ_WChar>
        x += delta;
 80071c0:	88fa      	ldrh	r2, [r7, #6]
 80071c2:	89fb      	ldrh	r3, [r7, #14]
 80071c4:	4413      	add	r3, r2
 80071c6:	80fb      	strh	r3, [r7, #6]
        str++;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	3301      	adds	r3, #1
 80071cc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1dc      	bne.n	8007190 <Displ_WString+0x28>
    }
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80071e2:	b002      	add	sp, #8
 80071e4:	4770      	bx	lr
	...

080071e8 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2b51      	cmp	r3, #81	; 0x51
 80071f6:	d00a      	beq.n	800720e <Displ_BackLight+0x26>
 80071f8:	2b51      	cmp	r3, #81	; 0x51
 80071fa:	dc16      	bgt.n	800722a <Displ_BackLight+0x42>
 80071fc:	2b46      	cmp	r3, #70	; 0x46
 80071fe:	d008      	beq.n	8007212 <Displ_BackLight+0x2a>
 8007200:	2b46      	cmp	r3, #70	; 0x46
 8007202:	dc12      	bgt.n	800722a <Displ_BackLight+0x42>
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d00a      	beq.n	800721e <Displ_BackLight+0x36>
 8007208:	2b31      	cmp	r3, #49	; 0x31
 800720a:	d002      	beq.n	8007212 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 800720c:	e00d      	b.n	800722a <Displ_BackLight+0x42>
		__NOP();
 800720e:	bf00      	nop
		break;
 8007210:	e00c      	b.n	800722c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8007212:	2201      	movs	r2, #1
 8007214:	2140      	movs	r1, #64	; 0x40
 8007216:	480a      	ldr	r0, [pc, #40]	; (8007240 <Displ_BackLight+0x58>)
 8007218:	f002 f860 	bl	80092dc <HAL_GPIO_WritePin>
		break;
 800721c:	e006      	b.n	800722c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800721e:	2200      	movs	r2, #0
 8007220:	2140      	movs	r1, #64	; 0x40
 8007222:	4807      	ldr	r0, [pc, #28]	; (8007240 <Displ_BackLight+0x58>)
 8007224:	f002 f85a 	bl	80092dc <HAL_GPIO_WritePin>
		break;
 8007228:	e000      	b.n	800722c <Displ_BackLight+0x44>
		break;
 800722a:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	4804      	ldr	r0, [pc, #16]	; (8007240 <Displ_BackLight+0x58>)
 8007230:	f002 f83c 	bl	80092ac <HAL_GPIO_ReadPin>
 8007234:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40020000 	.word	0x40020000

08007244 <testLines>:




void testLines(uint16_t color)
{
 8007244:	b590      	push	{r4, r7, lr}
 8007246:	b08b      	sub	sp, #44	; 0x2c
 8007248:	af02      	add	r7, sp, #8
 800724a:	4603      	mov	r3, r0
 800724c:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 800724e:	4b7c      	ldr	r3, [pc, #496]	; (8007440 <testLines+0x1fc>)
 8007250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007254:	617b      	str	r3, [r7, #20]
                  h = _height;
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <testLines+0x200>)
 8007258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800725c:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800725e:	2000      	movs	r0, #0
 8007260:	f7ff f810 	bl	8006284 <Displ_CLS>

    x1 = y1 = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3b01      	subs	r3, #1
 8007270:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	e00f      	b.n	8007298 <testLines+0x54>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	b218      	sxth	r0, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	b219      	sxth	r1, r3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	b21a      	sxth	r2, r3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	b21c      	sxth	r4, r3
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4623      	mov	r3, r4
 800728e:	f7ff f9e2 	bl	8006656 <Displ_Line>
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	3306      	adds	r3, #6
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	429a      	cmp	r2, r3
 800729e:	dbeb      	blt.n	8007278 <testLines+0x34>
    x2    = w - 1;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80072a6:	2300      	movs	r3, #0
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	e00f      	b.n	80072cc <testLines+0x88>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	b218      	sxth	r0, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	b219      	sxth	r1, r3
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	b21c      	sxth	r4, r3
 80072bc:	88fb      	ldrh	r3, [r7, #6]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4623      	mov	r3, r4
 80072c2:	f7ff f9c8 	bl	8006656 <Displ_Line>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3306      	adds	r3, #6
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dbeb      	blt.n	80072ac <testLines+0x68>

    Displ_CLS(BLACK);
 80072d4:	2000      	movs	r0, #0
 80072d6:	f7fe ffd5 	bl	8006284 <Displ_CLS>

    x1    = w - 1;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	e00f      	b.n	8007310 <testLines+0xcc>
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	b218      	sxth	r0, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	b219      	sxth	r1, r3
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	b21a      	sxth	r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	b21c      	sxth	r4, r3
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	4623      	mov	r3, r4
 8007306:	f7ff f9a6 	bl	8006656 <Displ_Line>
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3306      	adds	r3, #6
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	429a      	cmp	r2, r3
 8007316:	dbeb      	blt.n	80072f0 <testLines+0xac>
    x2    = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e00f      	b.n	8007342 <testLines+0xfe>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	b218      	sxth	r0, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	b219      	sxth	r1, r3
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	b21a      	sxth	r2, r3
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	b21c      	sxth	r4, r3
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	4623      	mov	r3, r4
 8007338:	f7ff f98d 	bl	8006656 <Displ_Line>
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3306      	adds	r3, #6
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	429a      	cmp	r2, r3
 8007348:	dbeb      	blt.n	8007322 <testLines+0xde>

    Displ_CLS(BLACK);
 800734a:	2000      	movs	r0, #0
 800734c:	f7fe ff9a 	bl	8006284 <Displ_CLS>

    x1    = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3b01      	subs	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	e00f      	b.n	8007384 <testLines+0x140>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	b218      	sxth	r0, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	b219      	sxth	r1, r3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	b21a      	sxth	r2, r3
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	b21c      	sxth	r4, r3
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4623      	mov	r3, r4
 800737a:	f7ff f96c 	bl	8006656 <Displ_Line>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	3306      	adds	r3, #6
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	429a      	cmp	r2, r3
 800738a:	dbeb      	blt.n	8007364 <testLines+0x120>
    x2    = w - 1;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	3b01      	subs	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007392:	2300      	movs	r3, #0
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	e00f      	b.n	80073b8 <testLines+0x174>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	b218      	sxth	r0, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	b219      	sxth	r1, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	b21a      	sxth	r2, r3
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	b21c      	sxth	r4, r3
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4623      	mov	r3, r4
 80073ae:	f7ff f952 	bl	8006656 <Displ_Line>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	3306      	adds	r3, #6
 80073b6:	61bb      	str	r3, [r7, #24]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	dbeb      	blt.n	8007398 <testLines+0x154>

    Displ_CLS(BLACK);
 80073c0:	2000      	movs	r0, #0
 80073c2:	f7fe ff5f 	bl	8006284 <Displ_CLS>

    x1    = w - 1;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
 80073da:	e00f      	b.n	80073fc <testLines+0x1b8>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	b218      	sxth	r0, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	b219      	sxth	r1, r3
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	b21a      	sxth	r2, r3
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	b21c      	sxth	r4, r3
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4623      	mov	r3, r4
 80073f2:	f7ff f930 	bl	8006656 <Displ_Line>
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3306      	adds	r3, #6
 80073fa:	61fb      	str	r3, [r7, #28]
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	429a      	cmp	r2, r3
 8007402:	dbeb      	blt.n	80073dc <testLines+0x198>
    x2    = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007408:	2300      	movs	r3, #0
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e00f      	b.n	800742e <testLines+0x1ea>
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	b218      	sxth	r0, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	b219      	sxth	r1, r3
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	b21a      	sxth	r2, r3
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	b21c      	sxth	r4, r3
 800741e:	88fb      	ldrh	r3, [r7, #6]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	4623      	mov	r3, r4
 8007424:	f7ff f917 	bl	8006656 <Displ_Line>
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	3306      	adds	r3, #6
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	429a      	cmp	r2, r3
 8007434:	dbeb      	blt.n	800740e <testLines+0x1ca>

}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	3724      	adds	r7, #36	; 0x24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd90      	pop	{r4, r7, pc}
 8007440:	20008672 	.word	0x20008672
 8007444:	20008674 	.word	0x20008674

08007448 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af02      	add	r7, sp, #8
 800744e:	4603      	mov	r3, r0
 8007450:	460a      	mov	r2, r1
 8007452:	80fb      	strh	r3, [r7, #6]
 8007454:	4613      	mov	r3, r2
 8007456:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8007458:	4b20      	ldr	r3, [pc, #128]	; (80074dc <testFastLines+0x94>)
 800745a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <testFastLines+0x98>)
 8007462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007466:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8007468:	2000      	movs	r0, #0
 800746a:	f7fe ff0b 	bl	8006284 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	e011      	b.n	8007498 <testFastLines+0x50>
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	b219      	sxth	r1, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29b      	uxth	r3, r3
 8007480:	b21a      	sxth	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	b218      	sxth	r0, r3
 8007486:	88fb      	ldrh	r3, [r7, #6]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	4603      	mov	r3, r0
 800748c:	2000      	movs	r0, #0
 800748e:	f7ff f8e2 	bl	8006656 <Displ_Line>
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3305      	adds	r3, #5
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	dbe9      	blt.n	8007474 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e011      	b.n	80074ca <testFastLines+0x82>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	b218      	sxth	r0, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	b21a      	sxth	r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	b219      	sxth	r1, r3
 80074b8:	88bb      	ldrh	r3, [r7, #4]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	460b      	mov	r3, r1
 80074be:	2100      	movs	r1, #0
 80074c0:	f7ff f8c9 	bl	8006656 <Displ_Line>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3305      	adds	r3, #5
 80074c8:	617b      	str	r3, [r7, #20]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	dbe9      	blt.n	80074a6 <testFastLines+0x5e>
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20008672 	.word	0x20008672
 80074e0:	20008674 	.word	0x20008674

080074e4 <testRects>:




void testRects(uint16_t color)
{
 80074e4:	b590      	push	{r4, r7, lr}
 80074e6:	b08b      	sub	sp, #44	; 0x2c
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	4603      	mov	r3, r0
 80074ec:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 80074ee:	4b25      	ldr	r3, [pc, #148]	; (8007584 <testRects+0xa0>)
 80074f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074f4:	0fda      	lsrs	r2, r3, #31
 80074f6:	4413      	add	r3, r2
 80074f8:	105b      	asrs	r3, r3, #1
 80074fa:	b21b      	sxth	r3, r3
 80074fc:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 80074fe:	4b22      	ldr	r3, [pc, #136]	; (8007588 <testRects+0xa4>)
 8007500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007504:	0fda      	lsrs	r2, r3, #31
 8007506:	4413      	add	r3, r2
 8007508:	105b      	asrs	r3, r3, #1
 800750a:	b21b      	sxth	r3, r3
 800750c:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800750e:	2000      	movs	r0, #0
 8007510:	f7fe feb8 	bl	8006284 <Displ_CLS>
	n     = min(_width, _height);
 8007514:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <testRects+0xa4>)
 8007516:	f9b3 2000 	ldrsh.w	r2, [r3]
 800751a:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <testRects+0xa0>)
 800751c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007520:	4293      	cmp	r3, r2
 8007522:	bfa8      	it	ge
 8007524:	4613      	movge	r3, r2
 8007526:	b21b      	sxth	r3, r3
 8007528:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 800752a:	2302      	movs	r3, #2
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	e020      	b.n	8007572 <testRects+0x8e>
		i2 = i / 2;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	0fda      	lsrs	r2, r3, #31
 8007534:	4413      	add	r3, r2
 8007536:	105b      	asrs	r3, r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	b29b      	uxth	r3, r3
 8007546:	b218      	sxth	r0, r3
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	b29b      	uxth	r3, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	b219      	sxth	r1, r3
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	b21a      	sxth	r2, r3
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	b21c      	sxth	r4, r3
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	2301      	movs	r3, #1
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4623      	mov	r3, r4
 8007568:	f7ff f9a6 	bl	80068b8 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	3306      	adds	r3, #6
 8007570:	61fb      	str	r3, [r7, #28]
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	dbda      	blt.n	8007530 <testRects+0x4c>
	}
}
 800757a:	bf00      	nop
 800757c:	bf00      	nop
 800757e:	3724      	adds	r7, #36	; 0x24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd90      	pop	{r4, r7, pc}
 8007584:	20008672 	.word	0x20008672
 8007588:	20008674 	.word	0x20008674

0800758c <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b08b      	sub	sp, #44	; 0x2c
 8007590:	af02      	add	r7, sp, #8
 8007592:	4603      	mov	r3, r0
 8007594:	460a      	mov	r2, r1
 8007596:	80fb      	strh	r3, [r7, #6]
 8007598:	4613      	mov	r3, r2
 800759a:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 800759c:	4b30      	ldr	r3, [pc, #192]	; (8007660 <testFilledRects+0xd4>)
 800759e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075a2:	0fda      	lsrs	r2, r3, #31
 80075a4:	4413      	add	r3, r2
 80075a6:	105b      	asrs	r3, r3, #1
 80075a8:	b21b      	sxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 80075ae:	4b2d      	ldr	r3, [pc, #180]	; (8007664 <testFilledRects+0xd8>)
 80075b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075b4:	0fda      	lsrs	r2, r3, #31
 80075b6:	4413      	add	r3, r2
 80075b8:	105b      	asrs	r3, r3, #1
 80075ba:	b21b      	sxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80075c0:	2000      	movs	r0, #0
 80075c2:	f7fe fe5f 	bl	8006284 <Displ_CLS>
	n = min(_width, _height);
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <testFilledRects+0xd8>)
 80075c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80075cc:	4b24      	ldr	r3, [pc, #144]	; (8007660 <testFilledRects+0xd4>)
 80075ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bfa8      	it	ge
 80075d6:	4613      	movge	r3, r2
 80075d8:	b21b      	sxth	r3, r3
 80075da:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e035      	b.n	800764e <testFilledRects+0xc2>
		i2    = i / 2;
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	0fda      	lsrs	r2, r3, #31
 80075e6:	4413      	add	r3, r2
 80075e8:	105b      	asrs	r3, r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	b298      	uxth	r0, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	b299      	uxth	r1, r3
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	b29a      	uxth	r2, r3
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	b29c      	uxth	r4, r3
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	4623      	mov	r3, r4
 8007612:	f7fe fc83 	bl	8005f1c <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	b29a      	uxth	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	b29b      	uxth	r3, r3
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	b29b      	uxth	r3, r3
 8007622:	b218      	sxth	r0, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b29b      	uxth	r3, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	b219      	sxth	r1, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	b21a      	sxth	r2, r3
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	b21c      	sxth	r4, r3
 800763a:	88bb      	ldrh	r3, [r7, #4]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2301      	movs	r3, #1
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4623      	mov	r3, r4
 8007644:	f7ff f938 	bl	80068b8 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3b06      	subs	r3, #6
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dcc6      	bgt.n	80075e2 <testFilledRects+0x56>
	}
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	3724      	adds	r7, #36	; 0x24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd90      	pop	{r4, r7, pc}
 800765e:	bf00      	nop
 8007660:	20008672 	.word	0x20008672
 8007664:	20008674 	.word	0x20008674

08007668 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	460a      	mov	r2, r1
 8007672:	71fb      	strb	r3, [r7, #7]
 8007674:	4613      	mov	r3, r2
 8007676:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8007678:	4b18      	ldr	r3, [pc, #96]	; (80076dc <testFilledCircles+0x74>)
 800767a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <testFilledCircles+0x78>)
 8007682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 800768e:	2000      	movs	r0, #0
 8007690:	f7fe fdf8 	bl	8006284 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	e017      	b.n	80076ca <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	e00c      	b.n	80076ba <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	b218      	sxth	r0, r3
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	b219      	sxth	r1, r3
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	b21a      	sxth	r2, r3
 80076ac:	88bb      	ldrh	r3, [r7, #4]
 80076ae:	f7fe ff9f 	bl	80065f0 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	dbee      	blt.n	80076a0 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	dbe3      	blt.n	800769a <testFilledCircles+0x32>
        }
    }
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	20008672 	.word	0x20008672
 80076e0:	20008674 	.word	0x20008674

080076e4 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	460a      	mov	r2, r1
 80076ee:	71fb      	strb	r3, [r7, #7]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80076fa:	4b19      	ldr	r3, [pc, #100]	; (8007760 <testCircles+0x7c>)
 80076fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007700:	461a      	mov	r2, r3
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	4413      	add	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8007708:	4b16      	ldr	r3, [pc, #88]	; (8007764 <testCircles+0x80>)
 800770a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800770e:	461a      	mov	r2, r3
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	4413      	add	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	e017      	b.n	800774c <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	e00c      	b.n	800773c <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	b218      	sxth	r0, r3
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	b219      	sxth	r1, r3
 800772a:	79fb      	ldrb	r3, [r7, #7]
 800772c:	b21a      	sxth	r2, r3
 800772e:	88bb      	ldrh	r3, [r7, #4]
 8007730:	f7fe fcd4 	bl	80060dc <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	429a      	cmp	r2, r3
 8007742:	dbee      	blt.n	8007722 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	429a      	cmp	r2, r3
 8007752:	dbe3      	blt.n	800771c <testCircles+0x38>
        }
    }
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20008672 	.word	0x20008672
 8007764:	20008674 	.word	0x20008674

08007768 <testTriangles>:




void testTriangles()
{
 8007768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800776e:	4b2e      	ldr	r3, [pc, #184]	; (8007828 <testTriangles+0xc0>)
 8007770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007774:	0fda      	lsrs	r2, r3, #31
 8007776:	4413      	add	r3, r2
 8007778:	105b      	asrs	r3, r3, #1
 800777a:	b21b      	sxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <testTriangles+0xc4>)
 8007782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007786:	0fda      	lsrs	r2, r3, #31
 8007788:	4413      	add	r3, r2
 800778a:	105b      	asrs	r3, r3, #1
 800778c:	b21b      	sxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8007792:	2000      	movs	r0, #0
 8007794:	f7fe fd76 	bl	8006284 <Displ_CLS>
    n     = min(cx, cy);
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4293      	cmp	r3, r2
 800779e:	bfa8      	it	ge
 80077a0:	4613      	movge	r3, r2
 80077a2:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	e035      	b.n	8007816 <testTriangles+0xae>
    	Displ_drawTriangle(
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80077ba:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80077c8:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4413      	add	r3, r2
 80077d4:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80077d6:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80077e4:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	b291      	uxth	r1, r2
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	b292      	uxth	r2, r2
 80077ee:	440a      	add	r2, r1
 80077f0:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 80077f2:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	10c9      	asrs	r1, r1, #3
 80077f8:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 80077fa:	f001 011f 	and.w	r1, r1, #31
 80077fe:	b289      	uxth	r1, r1
 8007800:	9102      	str	r1, [sp, #8]
 8007802:	9201      	str	r2, [sp, #4]
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	4633      	mov	r3, r6
 8007808:	462a      	mov	r2, r5
 800780a:	4621      	mov	r1, r4
 800780c:	f7ff f897 	bl	800693e <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3305      	adds	r3, #5
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	dbc5      	blt.n	80077aa <testTriangles+0x42>
    }
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007828:	20008672 	.word	0x20008672
 800782c:	20008674 	.word	0x20008674

08007830 <testFilledTriangles>:





void testFilledTriangles() {
 8007830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8007836:	4b53      	ldr	r3, [pc, #332]	; (8007984 <testFilledTriangles+0x154>)
 8007838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800783c:	0fda      	lsrs	r2, r3, #31
 800783e:	4413      	add	r3, r2
 8007840:	105b      	asrs	r3, r3, #1
 8007842:	b21b      	sxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8007848:	4b4f      	ldr	r3, [pc, #316]	; (8007988 <testFilledTriangles+0x158>)
 800784a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800784e:	0fda      	lsrs	r2, r3, #31
 8007850:	4413      	add	r3, r2
 8007852:	105b      	asrs	r3, r3, #1
 8007854:	b21b      	sxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800785a:	2000      	movs	r0, #0
 800785c:	f7fe fd12 	bl	8006284 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	4293      	cmp	r3, r2
 8007866:	bfa8      	it	ge
 8007868:	4613      	movge	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e080      	b.n	8007970 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	b21c      	sxth	r4, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	b29b      	uxth	r3, r3
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	b29b      	uxth	r3, r3
 800787e:	b21d      	sxth	r5, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	b29b      	uxth	r3, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	b21e      	sxth	r6, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	b29b      	uxth	r3, r3
 8007896:	4413      	add	r3, r2
 8007898:	b29b      	uxth	r3, r3
 800789a:	fa0f fc83 	sxth.w	ip, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	b21b      	sxth	r3, r3
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	b291      	uxth	r1, r2
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	b292      	uxth	r2, r2
 80078b4:	440a      	add	r2, r1
 80078b6:	b292      	uxth	r2, r2
 80078b8:	b212      	sxth	r2, r2
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	00c9      	lsls	r1, r1, #3
 80078be:	b209      	sxth	r1, r1
 80078c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80078c4:	b208      	sxth	r0, r1
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	10c9      	asrs	r1, r1, #3
 80078ca:	b209      	sxth	r1, r1
 80078cc:	f001 011f 	and.w	r1, r1, #31
 80078d0:	b209      	sxth	r1, r1
 80078d2:	4301      	orrs	r1, r0
 80078d4:	b209      	sxth	r1, r1
 80078d6:	b289      	uxth	r1, r1
 80078d8:	9102      	str	r1, [sp, #8]
 80078da:	9201      	str	r2, [sp, #4]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4663      	mov	r3, ip
 80078e0:	4632      	mov	r2, r6
 80078e2:	4629      	mov	r1, r5
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff f864 	bl	80069b2 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	b21c      	sxth	r4, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	b21d      	sxth	r5, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	b29b      	uxth	r3, r3
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	b21e      	sxth	r6, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	b29b      	uxth	r3, r3
 8007912:	4413      	add	r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	fa0f fc83 	sxth.w	ip, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	b29b      	uxth	r3, r3
 8007922:	4413      	add	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	b21a      	sxth	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	b299      	uxth	r1, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	b29b      	uxth	r3, r3
 8007930:	440b      	add	r3, r1
 8007932:	b29b      	uxth	r3, r3
 8007934:	b219      	sxth	r1, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b21b      	sxth	r3, r3
 800793c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007940:	f023 0307 	bic.w	r3, r3, #7
 8007944:	b218      	sxth	r0, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	b21b      	sxth	r3, r3
 800794c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007950:	b21b      	sxth	r3, r3
 8007952:	4303      	orrs	r3, r0
 8007954:	b21b      	sxth	r3, r3
 8007956:	b29b      	uxth	r3, r3
 8007958:	9302      	str	r3, [sp, #8]
 800795a:	9101      	str	r1, [sp, #4]
 800795c:	9200      	str	r2, [sp, #0]
 800795e:	4663      	mov	r3, ip
 8007960:	4632      	mov	r2, r6
 8007962:	4629      	mov	r1, r5
 8007964:	4620      	mov	r0, r4
 8007966:	f7fe ffea 	bl	800693e <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3b05      	subs	r3, #5
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b0a      	cmp	r3, #10
 8007974:	f73f af7b 	bgt.w	800786e <testFilledTriangles+0x3e>
    }
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007982:	bf00      	nop
 8007984:	20008672 	.word	0x20008672
 8007988:	20008674 	.word	0x20008674

0800798c <testRoundRects>:





void testRoundRects() {
 800798c:	b5b0      	push	{r4, r5, r7, lr}
 800798e:	b08a      	sub	sp, #40	; 0x28
 8007990:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8007992:	4b33      	ldr	r3, [pc, #204]	; (8007a60 <testRoundRects+0xd4>)
 8007994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007998:	0fda      	lsrs	r2, r3, #31
 800799a:	4413      	add	r3, r2
 800799c:	105b      	asrs	r3, r3, #1
 800799e:	b21b      	sxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <testRoundRects+0xd8>)
 80079a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079aa:	0fda      	lsrs	r2, r3, #31
 80079ac:	4413      	add	r3, r2
 80079ae:	105b      	asrs	r3, r3, #1
 80079b0:	b21b      	sxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7fe fc64 	bl	8006284 <Displ_CLS>
    w     = min(_width, _height);
 80079bc:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <testRoundRects+0xd8>)
 80079be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079c2:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <testRoundRects+0xd4>)
 80079c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bfa8      	it	ge
 80079cc:	4613      	movge	r3, r2
 80079ce:	b21b      	sxth	r3, r3
 80079d0:	60fb      	str	r3, [r7, #12]
    red = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 80079d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80079e0:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	e031      	b.n	8007a4c <testRoundRects+0xc0>
        i2 = i / 2;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	0fda      	lsrs	r2, r3, #31
 80079ec:	4413      	add	r3, r2
 80079ee:	105b      	asrs	r3, r3, #1
 80079f0:	607b      	str	r3, [r7, #4]
        red += step;
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4413      	add	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b218      	sxth	r0, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	b219      	sxth	r1, r3
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	b21c      	sxth	r4, r3
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	b21d      	sxth	r5, r3
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	da00      	bge.n	8007a26 <testRoundRects+0x9a>
 8007a24:	3307      	adds	r3, #7
 8007a26:	10db      	asrs	r3, r3, #3
 8007a28:	b21a      	sxth	r2, r3
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a34:	f023 0307 	bic.w	r3, r3, #7
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	9200      	str	r2, [sp, #0]
 8007a3e:	462b      	mov	r3, r5
 8007a40:	4622      	mov	r2, r4
 8007a42:	f7ff fa27 	bl	8006e94 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	3306      	adds	r3, #6
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	dbc9      	blt.n	80079e8 <testRoundRects+0x5c>
    }
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20008672 	.word	0x20008672
 8007a64:	20008674 	.word	0x20008674

08007a68 <testFilledRoundRects>:





void testFilledRoundRects() {
 8007a68:	b5b0      	push	{r4, r5, r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8007a6e:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <testFilledRoundRects+0xe0>)
 8007a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a74:	0fda      	lsrs	r2, r3, #31
 8007a76:	4413      	add	r3, r2
 8007a78:	105b      	asrs	r3, r3, #1
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8007a80:	4b32      	ldr	r3, [pc, #200]	; (8007b4c <testFilledRoundRects+0xe4>)
 8007a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a86:	0fda      	lsrs	r2, r3, #31
 8007a88:	4413      	add	r3, r2
 8007a8a:	105b      	asrs	r3, r3, #1
 8007a8c:	b21b      	sxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8007a92:	2000      	movs	r0, #0
 8007a94:	f7fe fbf6 	bl	8006284 <Displ_CLS>
    green = 256;
 8007a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a9c:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8007a9e:	4b2b      	ldr	r3, [pc, #172]	; (8007b4c <testFilledRoundRects+0xe4>)
 8007aa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <testFilledRoundRects+0xe0>)
 8007aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	bfa8      	it	ge
 8007aae:	4613      	movge	r3, r2
 8007ab0:	b21b      	sxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007abc:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8007abe:	4b23      	ldr	r3, [pc, #140]	; (8007b4c <testFilledRoundRects+0xe4>)
 8007ac0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007ac4:	4b20      	ldr	r3, [pc, #128]	; (8007b48 <testFilledRoundRects+0xe0>)
 8007ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bfa8      	it	ge
 8007ace:	4613      	movge	r3, r2
 8007ad0:	b21b      	sxth	r3, r3
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e02f      	b.n	8007b36 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	0fda      	lsrs	r2, r3, #31
 8007ada:	4413      	add	r3, r2
 8007adc:	105b      	asrs	r3, r3, #1
 8007ade:	603b      	str	r3, [r7, #0]
        green -= step;
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	b218      	sxth	r0, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	b219      	sxth	r1, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	b21c      	sxth	r4, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	b21d      	sxth	r5, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da00      	bge.n	8007b14 <testFilledRoundRects+0xac>
 8007b12:	3307      	adds	r3, #7
 8007b14:	10db      	asrs	r3, r3, #3
 8007b16:	b21b      	sxth	r3, r3
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	00d2      	lsls	r2, r2, #3
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8007b22:	b292      	uxth	r2, r2
 8007b24:	9201      	str	r2, [sp, #4]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	462b      	mov	r3, r5
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	f7ff faa7 	bl	800707e <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	3b06      	subs	r3, #6
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b14      	cmp	r3, #20
 8007b3a:	dccc      	bgt.n	8007ad6 <testFilledRoundRects+0x6e>
    }
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bdb0      	pop	{r4, r5, r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20008672 	.word	0x20008672
 8007b4c:	20008674 	.word	0x20008674

08007b50 <testFillScreen>:




void testFillScreen()
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8007b54:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8007b58:	f7fe fb94 	bl	8006284 <Displ_CLS>
	Displ_CLS(GREEN);
 8007b5c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8007b60:	f7fe fb90 	bl	8006284 <Displ_CLS>
	Displ_CLS(BLUE);
 8007b64:	201f      	movs	r0, #31
 8007b66:	f7fe fb8d 	bl	8006284 <Displ_CLS>
	Displ_CLS(YELLOW);
 8007b6a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8007b6e:	f7fe fb89 	bl	8006284 <Displ_CLS>
	Displ_CLS(BLACK);
 8007b72:	2000      	movs	r0, #0
 8007b74:	f7fe fb86 	bl	8006284 <Displ_CLS>
}
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <Displ_TestAll>:





void Displ_TestAll (){
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
	testFillScreen();
 8007b80:	f7ff ffe6 	bl	8007b50 <testFillScreen>
	testLines(CYAN);
 8007b84:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8007b88:	f7ff fb5c 	bl	8007244 <testLines>
	testFastLines(RED, BLUE);
 8007b8c:	211f      	movs	r1, #31
 8007b8e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8007b92:	f7ff fc59 	bl	8007448 <testFastLines>
	testRects(GREEN);
 8007b96:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8007b9a:	f7ff fca3 	bl	80074e4 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8007b9e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8007ba2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8007ba6:	f7ff fcf1 	bl	800758c <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8007baa:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8007bae:	200a      	movs	r0, #10
 8007bb0:	f7ff fd5a 	bl	8007668 <testFilledCircles>
	testCircles(10, WHITE);
 8007bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bb8:	200a      	movs	r0, #10
 8007bba:	f7ff fd93 	bl	80076e4 <testCircles>
	testTriangles();
 8007bbe:	f7ff fdd3 	bl	8007768 <testTriangles>
	testFilledTriangles();
 8007bc2:	f7ff fe35 	bl	8007830 <testFilledTriangles>
	testRoundRects();
 8007bc6:	f7ff fee1 	bl	800798c <testRoundRects>
	testFilledRoundRects();
 8007bca:	f7ff ff4d 	bl	8007a68 <testFilledRoundRects>
}
 8007bce:	bf00      	nop
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <Reset_Handler>:
 8007bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c0c <LoopFillZerobss+0x12>
 8007bd8:	480d      	ldr	r0, [pc, #52]	; (8007c10 <LoopFillZerobss+0x16>)
 8007bda:	490e      	ldr	r1, [pc, #56]	; (8007c14 <LoopFillZerobss+0x1a>)
 8007bdc:	4a0e      	ldr	r2, [pc, #56]	; (8007c18 <LoopFillZerobss+0x1e>)
 8007bde:	2300      	movs	r3, #0
 8007be0:	e002      	b.n	8007be8 <LoopCopyDataInit>

08007be2 <CopyDataInit>:
 8007be2:	58d4      	ldr	r4, [r2, r3]
 8007be4:	50c4      	str	r4, [r0, r3]
 8007be6:	3304      	adds	r3, #4

08007be8 <LoopCopyDataInit>:
 8007be8:	18c4      	adds	r4, r0, r3
 8007bea:	428c      	cmp	r4, r1
 8007bec:	d3f9      	bcc.n	8007be2 <CopyDataInit>
 8007bee:	4a0b      	ldr	r2, [pc, #44]	; (8007c1c <LoopFillZerobss+0x22>)
 8007bf0:	4c0b      	ldr	r4, [pc, #44]	; (8007c20 <LoopFillZerobss+0x26>)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e001      	b.n	8007bfa <LoopFillZerobss>

08007bf6 <FillZerobss>:
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	3204      	adds	r2, #4

08007bfa <LoopFillZerobss>:
 8007bfa:	42a2      	cmp	r2, r4
 8007bfc:	d3fb      	bcc.n	8007bf6 <FillZerobss>
 8007bfe:	f7fd fdcb 	bl	8005798 <SystemInit>
 8007c02:	f006 fc95 	bl	800e530 <__libc_init_array>
 8007c06:	f7fc fa55 	bl	80040b4 <main>
 8007c0a:	4770      	bx	lr
 8007c0c:	20020000 	.word	0x20020000
 8007c10:	20000000 	.word	0x20000000
 8007c14:	20000220 	.word	0x20000220
 8007c18:	080160c0 	.word	0x080160c0
 8007c1c:	20000220 	.word	0x20000220
 8007c20:	200097d0 	.word	0x200097d0

08007c24 <ADC_IRQHandler>:
 8007c24:	e7fe      	b.n	8007c24 <ADC_IRQHandler>
	...

08007c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <HAL_Init+0x40>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <HAL_Init+0x40>)
 8007c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <HAL_Init+0x40>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <HAL_Init+0x40>)
 8007c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c44:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <HAL_Init+0x40>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a07      	ldr	r2, [pc, #28]	; (8007c68 <HAL_Init+0x40>)
 8007c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c50:	2003      	movs	r0, #3
 8007c52:	f000 fd53 	bl	80086fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c56:	2000      	movs	r0, #0
 8007c58:	f000 f808 	bl	8007c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c5c:	f7fd f976 	bl	8004f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40023c00 	.word	0x40023c00

08007c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <HAL_InitTick+0x54>)
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <HAL_InitTick+0x58>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fd6b 	bl	8008766 <HAL_SYSTICK_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e00e      	b.n	8007cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d80a      	bhi.n	8007cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca8:	f000 fd33 	bl	8008712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cac:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <HAL_InitTick+0x5c>)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e000      	b.n	8007cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000030 	.word	0x20000030
 8007cc4:	20000040 	.word	0x20000040
 8007cc8:	2000003c 	.word	0x2000003c

08007ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cd0:	4b06      	ldr	r3, [pc, #24]	; (8007cec <HAL_IncTick+0x20>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <HAL_IncTick+0x24>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4413      	add	r3, r2
 8007cdc:	4a04      	ldr	r2, [pc, #16]	; (8007cf0 <HAL_IncTick+0x24>)
 8007cde:	6013      	str	r3, [r2, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000040 	.word	0x20000040
 8007cf0:	20009680 	.word	0x20009680

08007cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <HAL_GetTick+0x14>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20009680 	.word	0x20009680

08007d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d14:	f7ff ffee 	bl	8007cf4 <HAL_GetTick>
 8007d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d24:	d005      	beq.n	8007d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <HAL_Delay+0x44>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d32:	bf00      	nop
 8007d34:	f7ff ffde 	bl	8007cf4 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d8f7      	bhi.n	8007d34 <HAL_Delay+0x28>
  {
  }
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000040 	.word	0x20000040

08007d54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e033      	b.n	8007dd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fd f912 	bl	8004f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d118      	bne.n	8007dc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007d9a:	f023 0302 	bic.w	r3, r3, #2
 8007d9e:	f043 0202 	orr.w	r2, r3, #2
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa5a 	bl	8008260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	f023 0303 	bic.w	r3, r3, #3
 8007dba:	f043 0201 	orr.w	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
 8007dc2:	e001      	b.n	8007dc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <HAL_ADC_Start_DMA+0x1e>
 8007df6:	2302      	movs	r3, #2
 8007df8:	e0e9      	b.n	8007fce <HAL_ADC_Start_DMA+0x1f2>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d018      	beq.n	8007e42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007e20:	4b6d      	ldr	r3, [pc, #436]	; (8007fd8 <HAL_ADC_Start_DMA+0x1fc>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a6d      	ldr	r2, [pc, #436]	; (8007fdc <HAL_ADC_Start_DMA+0x200>)
 8007e26:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2a:	0c9a      	lsrs	r2, r3, #18
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	4413      	add	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007e34:	e002      	b.n	8007e3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f9      	bne.n	8007e36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	d107      	bne.n	8007e62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	f040 80a1 	bne.w	8007fb4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb0:	d106      	bne.n	8007ec0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	f023 0206 	bic.w	r2, r3, #6
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
 8007ebe:	e002      	b.n	8007ec6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ece:	4b44      	ldr	r3, [pc, #272]	; (8007fe0 <HAL_ADC_Start_DMA+0x204>)
 8007ed0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	4a43      	ldr	r2, [pc, #268]	; (8007fe4 <HAL_ADC_Start_DMA+0x208>)
 8007ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	4a42      	ldr	r2, [pc, #264]	; (8007fe8 <HAL_ADC_Start_DMA+0x20c>)
 8007ee0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <HAL_ADC_Start_DMA+0x210>)
 8007ee8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007ef2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007f02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	334c      	adds	r3, #76	; 0x4c
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f000 fcda 	bl	80088dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f003 031f 	and.w	r3, r3, #31
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d12a      	bne.n	8007f8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2d      	ldr	r2, [pc, #180]	; (8007ff0 <HAL_ADC_Start_DMA+0x214>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d015      	beq.n	8007f6a <HAL_ADC_Start_DMA+0x18e>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <HAL_ADC_Start_DMA+0x218>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d105      	bne.n	8007f54 <HAL_ADC_Start_DMA+0x178>
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <HAL_ADC_Start_DMA+0x204>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a27      	ldr	r2, [pc, #156]	; (8007ff8 <HAL_ADC_Start_DMA+0x21c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d136      	bne.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
 8007f5e:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <HAL_ADC_Start_DMA+0x204>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d130      	bne.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d129      	bne.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	e020      	b.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <HAL_ADC_Start_DMA+0x214>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d11b      	bne.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d114      	bne.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007fb0:	609a      	str	r2, [r3, #8]
 8007fb2:	e00b      	b.n	8007fcc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	f043 0210 	orr.w	r2, r3, #16
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000030 	.word	0x20000030
 8007fdc:	431bde83 	.word	0x431bde83
 8007fe0:	40012300 	.word	0x40012300
 8007fe4:	08008459 	.word	0x08008459
 8007fe8:	08008513 	.word	0x08008513
 8007fec:	0800852f 	.word	0x0800852f
 8007ff0:	40012000 	.word	0x40012000
 8007ff4:	40012100 	.word	0x40012100
 8007ff8:	40012200 	.word	0x40012200

08007ffc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x1c>
 8008014:	2302      	movs	r3, #2
 8008016:	e113      	b.n	8008240 <HAL_ADC_ConfigChannel+0x244>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b09      	cmp	r3, #9
 8008026:	d925      	bls.n	8008074 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68d9      	ldr	r1, [r3, #12]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	4613      	mov	r3, r2
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4413      	add	r3, r2
 800803c:	3b1e      	subs	r3, #30
 800803e:	2207      	movs	r2, #7
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43da      	mvns	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	400a      	ands	r2, r1
 800804c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68d9      	ldr	r1, [r3, #12]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	4618      	mov	r0, r3
 8008060:	4603      	mov	r3, r0
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	4403      	add	r3, r0
 8008066:	3b1e      	subs	r3, #30
 8008068:	409a      	lsls	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	e022      	b.n	80080ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6919      	ldr	r1, [r3, #16]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	4613      	mov	r3, r2
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4413      	add	r3, r2
 8008088:	2207      	movs	r2, #7
 800808a:	fa02 f303 	lsl.w	r3, r2, r3
 800808e:	43da      	mvns	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	400a      	ands	r2, r1
 8008096:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6919      	ldr	r1, [r3, #16]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4618      	mov	r0, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	4403      	add	r3, r0
 80080b0:	409a      	lsls	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b06      	cmp	r3, #6
 80080c0:	d824      	bhi.n	800810c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	3b05      	subs	r3, #5
 80080d4:	221f      	movs	r2, #31
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	43da      	mvns	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	400a      	ands	r2, r1
 80080e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4618      	mov	r0, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	3b05      	subs	r3, #5
 80080fe:	fa00 f203 	lsl.w	r2, r0, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	635a      	str	r2, [r3, #52]	; 0x34
 800810a:	e04c      	b.n	80081a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b0c      	cmp	r3, #12
 8008112:	d824      	bhi.n	800815e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	3b23      	subs	r3, #35	; 0x23
 8008126:	221f      	movs	r2, #31
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	43da      	mvns	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	400a      	ands	r2, r1
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	4618      	mov	r0, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	3b23      	subs	r3, #35	; 0x23
 8008150:	fa00 f203 	lsl.w	r2, r0, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
 800815c:	e023      	b.n	80081a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	3b41      	subs	r3, #65	; 0x41
 8008170:	221f      	movs	r2, #31
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43da      	mvns	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	400a      	ands	r2, r1
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	4618      	mov	r0, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	3b41      	subs	r3, #65	; 0x41
 800819a:	fa00 f203 	lsl.w	r2, r0, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081a6:	4b29      	ldr	r3, [pc, #164]	; (800824c <HAL_ADC_ConfigChannel+0x250>)
 80081a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a28      	ldr	r2, [pc, #160]	; (8008250 <HAL_ADC_ConfigChannel+0x254>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d10f      	bne.n	80081d4 <HAL_ADC_ConfigChannel+0x1d8>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b12      	cmp	r3, #18
 80081ba:	d10b      	bne.n	80081d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <HAL_ADC_ConfigChannel+0x254>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d12b      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x23a>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1c      	ldr	r2, [pc, #112]	; (8008254 <HAL_ADC_ConfigChannel+0x258>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <HAL_ADC_ConfigChannel+0x1f4>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b11      	cmp	r3, #17
 80081ee:	d122      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a11      	ldr	r2, [pc, #68]	; (8008254 <HAL_ADC_ConfigChannel+0x258>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d111      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <HAL_ADC_ConfigChannel+0x25c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a11      	ldr	r2, [pc, #68]	; (800825c <HAL_ADC_ConfigChannel+0x260>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	0c9a      	lsrs	r2, r3, #18
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008228:	e002      	b.n	8008230 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	3b01      	subs	r3, #1
 800822e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f9      	bne.n	800822a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40012300 	.word	0x40012300
 8008250:	40012000 	.word	0x40012000
 8008254:	10000012 	.word	0x10000012
 8008258:	20000030 	.word	0x20000030
 800825c:	431bde83 	.word	0x431bde83

08008260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008268:	4b79      	ldr	r3, [pc, #484]	; (8008450 <ADC_Init+0x1f0>)
 800826a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	431a      	orrs	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	021a      	lsls	r2, r3, #8
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80082b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6859      	ldr	r1, [r3, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6899      	ldr	r1, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	4a58      	ldr	r2, [pc, #352]	; (8008454 <ADC_Init+0x1f4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d022      	beq.n	800833e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689a      	ldr	r2, [r3, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6899      	ldr	r1, [r3, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	609a      	str	r2, [r3, #8]
 800833c:	e00f      	b.n	800835e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800834c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800835c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0202 	bic.w	r2, r2, #2
 800836c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6899      	ldr	r1, [r3, #8]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7e1b      	ldrb	r3, [r3, #24]
 8008378:	005a      	lsls	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01b      	beq.n	80083c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80083aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	3b01      	subs	r3, #1
 80083b8:	035a      	lsls	r2, r3, #13
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	e007      	b.n	80083d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80083e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	051a      	lsls	r2, r3, #20
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6899      	ldr	r1, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008416:	025a      	lsls	r2, r3, #9
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6899      	ldr	r1, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	029a      	lsls	r2, r3, #10
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	609a      	str	r2, [r3, #8]
}
 8008444:	bf00      	nop
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40012300 	.word	0x40012300
 8008454:	0f000001 	.word	0x0f000001

08008458 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800846e:	2b00      	cmp	r3, #0
 8008470:	d13c      	bne.n	80084ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d12b      	bne.n	80084e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008490:	2b00      	cmp	r3, #0
 8008492:	d127      	bne.n	80084e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d006      	beq.n	80084b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d119      	bne.n	80084e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 0220 	bic.w	r2, r2, #32
 80084be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084dc:	f043 0201 	orr.w	r2, r3, #1
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7fc fc3f 	bl	8004d68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80084ea:	e00e      	b.n	800850a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7fc fc75 	bl	8004de8 <HAL_ADC_ErrorCallback>
}
 80084fe:	e004      	b.n	800850a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fc fc41 	bl	8004da8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2240      	movs	r2, #64	; 0x40
 8008540:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	f043 0204 	orr.w	r2, r3, #4
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f7fc fc4a 	bl	8004de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008578:	4013      	ands	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	60d3      	str	r3, [r2, #12]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	e000ed00 	.word	0xe000ed00

080085a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <__NVIC_GetPriorityGrouping+0x18>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f003 0307 	and.w	r3, r3, #7
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db0b      	blt.n	80085ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f003 021f 	and.w	r2, r3, #31
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <__NVIC_EnableIRQ+0x38>)
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	2001      	movs	r0, #1
 80085e2:	fa00 f202 	lsl.w	r2, r0, r2
 80085e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e100 	.word	0xe000e100

080085fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860c:	2b00      	cmp	r3, #0
 800860e:	db0a      	blt.n	8008626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	490c      	ldr	r1, [pc, #48]	; (8008648 <__NVIC_SetPriority+0x4c>)
 8008616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861a:	0112      	lsls	r2, r2, #4
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	440b      	add	r3, r1
 8008620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008624:	e00a      	b.n	800863c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4908      	ldr	r1, [pc, #32]	; (800864c <__NVIC_SetPriority+0x50>)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	3b04      	subs	r3, #4
 8008634:	0112      	lsls	r2, r2, #4
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	440b      	add	r3, r1
 800863a:	761a      	strb	r2, [r3, #24]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	e000e100 	.word	0xe000e100
 800864c:	e000ed00 	.word	0xe000ed00

08008650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	; 0x24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f1c3 0307 	rsb	r3, r3, #7
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf28      	it	cs
 800866e:	2304      	movcs	r3, #4
 8008670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3304      	adds	r3, #4
 8008676:	2b06      	cmp	r3, #6
 8008678:	d902      	bls.n	8008680 <NVIC_EncodePriority+0x30>
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3b03      	subs	r3, #3
 800867e:	e000      	b.n	8008682 <NVIC_EncodePriority+0x32>
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43da      	mvns	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	401a      	ands	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	43d9      	mvns	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a8:	4313      	orrs	r3, r2
         );
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3724      	adds	r7, #36	; 0x24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086c8:	d301      	bcc.n	80086ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00f      	b.n	80086ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <SysTick_Config+0x40>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086d6:	210f      	movs	r1, #15
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086dc:	f7ff ff8e 	bl	80085fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <SysTick_Config+0x40>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086e6:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <SysTick_Config+0x40>)
 80086e8:	2207      	movs	r2, #7
 80086ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	e000e010 	.word	0xe000e010

080086fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff29 	bl	800855c <__NVIC_SetPriorityGrouping>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	4603      	mov	r3, r0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008724:	f7ff ff3e 	bl	80085a4 <__NVIC_GetPriorityGrouping>
 8008728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f7ff ff8e 	bl	8008650 <NVIC_EncodePriority>
 8008734:	4602      	mov	r2, r0
 8008736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff ff5d 	bl	80085fc <__NVIC_SetPriority>
}
 8008742:	bf00      	nop
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff ff31 	bl	80085c0 <__NVIC_EnableIRQ>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ffa2 	bl	80086b8 <SysTick_Config>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800878c:	f7ff fab2 	bl	8007cf4 <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e099      	b.n	80088d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087bc:	e00f      	b.n	80087de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087be:	f7ff fa99 	bl	8007cf4 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d908      	bls.n	80087de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e078      	b.n	80088d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e8      	bne.n	80087be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4b38      	ldr	r3, [pc, #224]	; (80088d8 <HAL_DMA_Init+0x158>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800880a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2b04      	cmp	r3, #4
 8008836:	d107      	bne.n	8008848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4313      	orrs	r3, r2
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b04      	cmp	r3, #4
 8008870:	d117      	bne.n	80088a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb01 	bl	8008e8c <DMA_CheckFifoParam>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800889e:	2301      	movs	r3, #1
 80088a0:	e016      	b.n	80088d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fab8 	bl	8008e20 <DMA_CalcBaseAndBitshift>
 80088b0:	4603      	mov	r3, r0
 80088b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	223f      	movs	r2, #63	; 0x3f
 80088ba:	409a      	lsls	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	f010803f 	.word	0xf010803f

080088dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_DMA_Start_IT+0x26>
 80088fe:	2302      	movs	r3, #2
 8008900:	e040      	b.n	8008984 <HAL_DMA_Start_IT+0xa8>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d12f      	bne.n	8008976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fa4a 	bl	8008dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008934:	223f      	movs	r2, #63	; 0x3f
 8008936:	409a      	lsls	r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0216 	orr.w	r2, r2, #22
 800894a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d007      	beq.n	8008964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0208 	orr.w	r2, r2, #8
 8008962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e005      	b.n	8008982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800897e:	2302      	movs	r3, #2
 8008980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008998:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800899a:	f7ff f9ab 	bl	8007cf4 <HAL_GetTick>
 800899e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d008      	beq.n	80089be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e052      	b.n	8008a64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0216 	bic.w	r2, r2, #22
 80089cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695a      	ldr	r2, [r3, #20]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d103      	bne.n	80089ee <HAL_DMA_Abort+0x62>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d007      	beq.n	80089fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0208 	bic.w	r2, r2, #8
 80089fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0201 	bic.w	r2, r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a0e:	e013      	b.n	8008a38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a10:	f7ff f970 	bl	8007cf4 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b05      	cmp	r3, #5
 8008a1c:	d90c      	bls.n	8008a38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2203      	movs	r2, #3
 8008a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e015      	b.n	8008a64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e4      	bne.n	8008a10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a4a:	223f      	movs	r2, #63	; 0x3f
 8008a4c:	409a      	lsls	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d004      	beq.n	8008a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e00c      	b.n	8008aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2205      	movs	r2, #5
 8008a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008abc:	4b8e      	ldr	r3, [pc, #568]	; (8008cf8 <HAL_DMA_IRQHandler+0x248>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a8e      	ldr	r2, [pc, #568]	; (8008cfc <HAL_DMA_IRQHandler+0x24c>)
 8008ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac6:	0a9b      	lsrs	r3, r3, #10
 8008ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ada:	2208      	movs	r2, #8
 8008adc:	409a      	lsls	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d013      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f022 0204 	bic.w	r2, r2, #4
 8008b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b08:	2208      	movs	r2, #8
 8008b0a:	409a      	lsls	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b14:	f043 0201 	orr.w	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b20:	2201      	movs	r2, #1
 8008b22:	409a      	lsls	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d012      	beq.n	8008b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00b      	beq.n	8008b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3e:	2201      	movs	r2, #1
 8008b40:	409a      	lsls	r2, r3
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4a:	f043 0202 	orr.w	r2, r3, #2
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b56:	2204      	movs	r2, #4
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d012      	beq.n	8008b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b74:	2204      	movs	r2, #4
 8008b76:	409a      	lsls	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	f043 0204 	orr.w	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	2210      	movs	r2, #16
 8008b8e:	409a      	lsls	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4013      	ands	r3, r2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d043      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d03c      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008baa:	2210      	movs	r2, #16
 8008bac:	409a      	lsls	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d018      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d108      	bne.n	8008be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d024      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	e01f      	b.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
 8008bf0:	e016      	b.n	8008c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d107      	bne.n	8008c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0208 	bic.w	r2, r2, #8
 8008c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c24:	2220      	movs	r2, #32
 8008c26:	409a      	lsls	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 808f 	beq.w	8008d50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0310 	and.w	r3, r3, #16
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8087 	beq.w	8008d50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c46:	2220      	movs	r2, #32
 8008c48:	409a      	lsls	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d136      	bne.n	8008cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 0216 	bic.w	r2, r2, #22
 8008c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <HAL_DMA_IRQHandler+0x1da>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0208 	bic.w	r2, r2, #8
 8008c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	223f      	movs	r2, #63	; 0x3f
 8008ca0:	409a      	lsls	r2, r3
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d07e      	beq.n	8008dbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	4798      	blx	r3
        }
        return;
 8008cc6:	e079      	b.n	8008dbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01d      	beq.n	8008d12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d031      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
 8008cf4:	e02c      	b.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
 8008cf6:	bf00      	nop
 8008cf8:	20000030 	.word	0x20000030
 8008cfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d023      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	e01e      	b.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10f      	bne.n	8008d40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0210 	bic.w	r2, r2, #16
 8008d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d032      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d022      	beq.n	8008daa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2205      	movs	r2, #5
 8008d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d307      	bcc.n	8008d98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1f2      	bne.n	8008d7c <HAL_DMA_IRQHandler+0x2cc>
 8008d96:	e000      	b.n	8008d9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008d98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
 8008dba:	e000      	b.n	8008dbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8008dbc:	bf00      	nop
    }
  }
}
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2b40      	cmp	r3, #64	; 0x40
 8008df0:	d108      	bne.n	8008e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008e02:	e007      	b.n	8008e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	60da      	str	r2, [r3, #12]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	3b10      	subs	r3, #16
 8008e30:	4a14      	ldr	r2, [pc, #80]	; (8008e84 <DMA_CalcBaseAndBitshift+0x64>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008e3a:	4a13      	ldr	r2, [pc, #76]	; (8008e88 <DMA_CalcBaseAndBitshift+0x68>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d909      	bls.n	8008e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e56:	f023 0303 	bic.w	r3, r3, #3
 8008e5a:	1d1a      	adds	r2, r3, #4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8008e60:	e007      	b.n	8008e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	aaaaaaab 	.word	0xaaaaaaab
 8008e88:	08015d1c 	.word	0x08015d1c

08008e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d11f      	bne.n	8008ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d856      	bhi.n	8008f5a <DMA_CheckFifoParam+0xce>
 8008eac:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <DMA_CheckFifoParam+0x28>)
 8008eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb2:	bf00      	nop
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ed7 	.word	0x08008ed7
 8008ebc:	08008ec5 	.word	0x08008ec5
 8008ec0:	08008f5b 	.word	0x08008f5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d046      	beq.n	8008f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ed4:	e043      	b.n	8008f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ede:	d140      	bne.n	8008f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ee4:	e03d      	b.n	8008f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eee:	d121      	bne.n	8008f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d837      	bhi.n	8008f66 <DMA_CheckFifoParam+0xda>
 8008ef6:	a201      	add	r2, pc, #4	; (adr r2, 8008efc <DMA_CheckFifoParam+0x70>)
 8008ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f13 	.word	0x08008f13
 8008f04:	08008f0d 	.word	0x08008f0d
 8008f08:	08008f25 	.word	0x08008f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e030      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d025      	beq.n	8008f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f22:	e022      	b.n	8008f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f2c:	d11f      	bne.n	8008f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008f32:	e01c      	b.n	8008f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d903      	bls.n	8008f42 <DMA_CheckFifoParam+0xb6>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d003      	beq.n	8008f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008f40:	e018      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	73fb      	strb	r3, [r7, #15]
      break;
 8008f46:	e015      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00e      	beq.n	8008f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
      break;
 8008f58:	e00b      	b.n	8008f72 <DMA_CheckFifoParam+0xe6>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e00a      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e008      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f62:	bf00      	nop
 8008f64:	e006      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f66:	bf00      	nop
 8008f68:	e004      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e002      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8008f6e:	bf00      	nop
 8008f70:	e000      	b.n	8008f74 <DMA_CheckFifoParam+0xe8>
      break;
 8008f72:	bf00      	nop
    }
  } 
  
  return status; 
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b089      	sub	sp, #36	; 0x24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e165      	b.n	800926c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	f040 8154 	bne.w	8009266 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f003 0303 	and.w	r3, r3, #3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d005      	beq.n	8008fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d130      	bne.n	8009038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4013      	ands	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800900c:	2201      	movs	r2, #1
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	43db      	mvns	r3, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4013      	ands	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	091b      	lsrs	r3, r3, #4
 8009022:	f003 0201 	and.w	r2, r3, #1
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	fa02 f303 	lsl.w	r3, r2, r3
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	2b03      	cmp	r3, #3
 8009042:	d017      	beq.n	8009074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	2203      	movs	r2, #3
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4013      	ands	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	4313      	orrs	r3, r2
 800906c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d123      	bne.n	80090c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	08da      	lsrs	r2, r3, #3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3208      	adds	r2, #8
 8009088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	220f      	movs	r2, #15
 8009098:	fa02 f303 	lsl.w	r3, r2, r3
 800909c:	43db      	mvns	r3, r3
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4013      	ands	r3, r2
 80090a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	08da      	lsrs	r2, r3, #3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3208      	adds	r2, #8
 80090c2:	69b9      	ldr	r1, [r7, #24]
 80090c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	2203      	movs	r2, #3
 80090d4:	fa02 f303 	lsl.w	r3, r2, r3
 80090d8:	43db      	mvns	r3, r3
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	4013      	ands	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f003 0203 	and.w	r2, r3, #3
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80ae 	beq.w	8009266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	4b5d      	ldr	r3, [pc, #372]	; (8009284 <HAL_GPIO_Init+0x300>)
 8009110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009112:	4a5c      	ldr	r2, [pc, #368]	; (8009284 <HAL_GPIO_Init+0x300>)
 8009114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009118:	6453      	str	r3, [r2, #68]	; 0x44
 800911a:	4b5a      	ldr	r3, [pc, #360]	; (8009284 <HAL_GPIO_Init+0x300>)
 800911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009126:	4a58      	ldr	r2, [pc, #352]	; (8009288 <HAL_GPIO_Init+0x304>)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	3302      	adds	r3, #2
 800912e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	220f      	movs	r2, #15
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	43db      	mvns	r3, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	4013      	ands	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a4f      	ldr	r2, [pc, #316]	; (800928c <HAL_GPIO_Init+0x308>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d025      	beq.n	800919e <HAL_GPIO_Init+0x21a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a4e      	ldr	r2, [pc, #312]	; (8009290 <HAL_GPIO_Init+0x30c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01f      	beq.n	800919a <HAL_GPIO_Init+0x216>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a4d      	ldr	r2, [pc, #308]	; (8009294 <HAL_GPIO_Init+0x310>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d019      	beq.n	8009196 <HAL_GPIO_Init+0x212>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a4c      	ldr	r2, [pc, #304]	; (8009298 <HAL_GPIO_Init+0x314>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <HAL_GPIO_Init+0x20e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a4b      	ldr	r2, [pc, #300]	; (800929c <HAL_GPIO_Init+0x318>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00d      	beq.n	800918e <HAL_GPIO_Init+0x20a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a4a      	ldr	r2, [pc, #296]	; (80092a0 <HAL_GPIO_Init+0x31c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d007      	beq.n	800918a <HAL_GPIO_Init+0x206>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a49      	ldr	r2, [pc, #292]	; (80092a4 <HAL_GPIO_Init+0x320>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d101      	bne.n	8009186 <HAL_GPIO_Init+0x202>
 8009182:	2306      	movs	r3, #6
 8009184:	e00c      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 8009186:	2307      	movs	r3, #7
 8009188:	e00a      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 800918a:	2305      	movs	r3, #5
 800918c:	e008      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 800918e:	2304      	movs	r3, #4
 8009190:	e006      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 8009192:	2303      	movs	r3, #3
 8009194:	e004      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 8009196:	2302      	movs	r3, #2
 8009198:	e002      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <HAL_GPIO_Init+0x21c>
 800919e:	2300      	movs	r3, #0
 80091a0:	69fa      	ldr	r2, [r7, #28]
 80091a2:	f002 0203 	and.w	r2, r2, #3
 80091a6:	0092      	lsls	r2, r2, #2
 80091a8:	4093      	lsls	r3, r2
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091b0:	4935      	ldr	r1, [pc, #212]	; (8009288 <HAL_GPIO_Init+0x304>)
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	089b      	lsrs	r3, r3, #2
 80091b6:	3302      	adds	r3, #2
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80091be:	4b3a      	ldr	r3, [pc, #232]	; (80092a8 <HAL_GPIO_Init+0x324>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	43db      	mvns	r3, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	4013      	ands	r3, r2
 80091cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4313      	orrs	r3, r2
 80091e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091e2:	4a31      	ldr	r2, [pc, #196]	; (80092a8 <HAL_GPIO_Init+0x324>)
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091e8:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <HAL_GPIO_Init+0x324>)
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	4013      	ands	r3, r2
 80091f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800920c:	4a26      	ldr	r2, [pc, #152]	; (80092a8 <HAL_GPIO_Init+0x324>)
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009212:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <HAL_GPIO_Init+0x324>)
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	43db      	mvns	r3, r3
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	4013      	ands	r3, r2
 8009220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009236:	4a1c      	ldr	r2, [pc, #112]	; (80092a8 <HAL_GPIO_Init+0x324>)
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800923c:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <HAL_GPIO_Init+0x324>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	43db      	mvns	r3, r3
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	4013      	ands	r3, r2
 800924a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009260:	4a11      	ldr	r2, [pc, #68]	; (80092a8 <HAL_GPIO_Init+0x324>)
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	3301      	adds	r3, #1
 800926a:	61fb      	str	r3, [r7, #28]
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	2b0f      	cmp	r3, #15
 8009270:	f67f ae96 	bls.w	8008fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	3724      	adds	r7, #36	; 0x24
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40023800 	.word	0x40023800
 8009288:	40013800 	.word	0x40013800
 800928c:	40020000 	.word	0x40020000
 8009290:	40020400 	.word	0x40020400
 8009294:	40020800 	.word	0x40020800
 8009298:	40020c00 	.word	0x40020c00
 800929c:	40021000 	.word	0x40021000
 80092a0:	40021400 	.word	0x40021400
 80092a4:	40021800 	.word	0x40021800
 80092a8:	40013c00 	.word	0x40013c00

080092ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	887b      	ldrh	r3, [r7, #2]
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	e001      	b.n	80092ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	807b      	strh	r3, [r7, #2]
 80092e8:	4613      	mov	r3, r2
 80092ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80092ec:	787b      	ldrb	r3, [r7, #1]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092f2:	887a      	ldrh	r2, [r7, #2]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80092f8:	e003      	b.n	8009302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80092fa:	887b      	ldrh	r3, [r7, #2]
 80092fc:	041a      	lsls	r2, r3, #16
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	619a      	str	r2, [r3, #24]
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009320:	887a      	ldrh	r2, [r7, #2]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4013      	ands	r3, r2
 8009326:	041a      	lsls	r2, r3, #16
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	43d9      	mvns	r1, r3
 800932c:	887b      	ldrh	r3, [r7, #2]
 800932e:	400b      	ands	r3, r1
 8009330:	431a      	orrs	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	619a      	str	r2, [r3, #24]
}
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	4603      	mov	r3, r0
 800934c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800934e:	4b08      	ldr	r3, [pc, #32]	; (8009370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009350:	695a      	ldr	r2, [r3, #20]
 8009352:	88fb      	ldrh	r3, [r7, #6]
 8009354:	4013      	ands	r3, r2
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800935a:	4a05      	ldr	r2, [pc, #20]	; (8009370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	4618      	mov	r0, r3
 8009364:	f7fb fce2 	bl	8004d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	40013c00 	.word	0x40013c00

08009374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e12b      	b.n	80095de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7fb ff12 	bl	80051c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	; 0x24
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0201 	bic.w	r2, r2, #1
 80093b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093d8:	f001 f9fc 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 80093dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4a81      	ldr	r2, [pc, #516]	; (80095e8 <HAL_I2C_Init+0x274>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d807      	bhi.n	80093f8 <HAL_I2C_Init+0x84>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4a80      	ldr	r2, [pc, #512]	; (80095ec <HAL_I2C_Init+0x278>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	bf94      	ite	ls
 80093f0:	2301      	movls	r3, #1
 80093f2:	2300      	movhi	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	e006      	b.n	8009406 <HAL_I2C_Init+0x92>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a7d      	ldr	r2, [pc, #500]	; (80095f0 <HAL_I2C_Init+0x27c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	bf94      	ite	ls
 8009400:	2301      	movls	r3, #1
 8009402:	2300      	movhi	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e0e7      	b.n	80095de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4a78      	ldr	r2, [pc, #480]	; (80095f4 <HAL_I2C_Init+0x280>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	0c9b      	lsrs	r3, r3, #18
 8009418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	430a      	orrs	r2, r1
 800942c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4a6a      	ldr	r2, [pc, #424]	; (80095e8 <HAL_I2C_Init+0x274>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d802      	bhi.n	8009448 <HAL_I2C_Init+0xd4>
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	3301      	adds	r3, #1
 8009446:	e009      	b.n	800945c <HAL_I2C_Init+0xe8>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800944e:	fb02 f303 	mul.w	r3, r2, r3
 8009452:	4a69      	ldr	r2, [pc, #420]	; (80095f8 <HAL_I2C_Init+0x284>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	099b      	lsrs	r3, r3, #6
 800945a:	3301      	adds	r3, #1
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	430b      	orrs	r3, r1
 8009462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800946e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	495c      	ldr	r1, [pc, #368]	; (80095e8 <HAL_I2C_Init+0x274>)
 8009478:	428b      	cmp	r3, r1
 800947a:	d819      	bhi.n	80094b0 <HAL_I2C_Init+0x13c>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	1e59      	subs	r1, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	005b      	lsls	r3, r3, #1
 8009486:	fbb1 f3f3 	udiv	r3, r1, r3
 800948a:	1c59      	adds	r1, r3, #1
 800948c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009490:	400b      	ands	r3, r1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_I2C_Init+0x138>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1e59      	subs	r1, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80094a4:	3301      	adds	r3, #1
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	e051      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 80094ac:	2304      	movs	r3, #4
 80094ae:	e04f      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d111      	bne.n	80094dc <HAL_I2C_Init+0x168>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	1e58      	subs	r0, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6859      	ldr	r1, [r3, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	440b      	add	r3, r1
 80094c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094ca:	3301      	adds	r3, #1
 80094cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf0c      	ite	eq
 80094d4:	2301      	moveq	r3, #1
 80094d6:	2300      	movne	r3, #0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	e012      	b.n	8009502 <HAL_I2C_Init+0x18e>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	1e58      	subs	r0, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6859      	ldr	r1, [r3, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	0099      	lsls	r1, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80094f2:	3301      	adds	r3, #1
 80094f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bf0c      	ite	eq
 80094fc:	2301      	moveq	r3, #1
 80094fe:	2300      	movne	r3, #0
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <HAL_I2C_Init+0x196>
 8009506:	2301      	movs	r3, #1
 8009508:	e022      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10e      	bne.n	8009530 <HAL_I2C_Init+0x1bc>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	1e58      	subs	r0, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6859      	ldr	r1, [r3, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	440b      	add	r3, r1
 8009520:	fbb0 f3f3 	udiv	r3, r0, r3
 8009524:	3301      	adds	r3, #1
 8009526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800952a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952e:	e00f      	b.n	8009550 <HAL_I2C_Init+0x1dc>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	1e58      	subs	r0, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6859      	ldr	r1, [r3, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	0099      	lsls	r1, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	fbb0 f3f3 	udiv	r3, r0, r3
 8009546:	3301      	adds	r3, #1
 8009548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800954c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	6809      	ldr	r1, [r1, #0]
 8009554:	4313      	orrs	r3, r2
 8009556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69da      	ldr	r2, [r3, #28]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800957e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6911      	ldr	r1, [r2, #16]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68d2      	ldr	r2, [r2, #12]
 800958a:	4311      	orrs	r1, r2
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6812      	ldr	r2, [r2, #0]
 8009590:	430b      	orrs	r3, r1
 8009592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695a      	ldr	r2, [r3, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	000186a0 	.word	0x000186a0
 80095ec:	001e847f 	.word	0x001e847f
 80095f0:	003d08ff 	.word	0x003d08ff
 80095f4:	431bde83 	.word	0x431bde83
 80095f8:	10624dd3 	.word	0x10624dd3

080095fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	461a      	mov	r2, r3
 800960a:	4603      	mov	r3, r0
 800960c:	817b      	strh	r3, [r7, #10]
 800960e:	460b      	mov	r3, r1
 8009610:	813b      	strh	r3, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009616:	f7fe fb6d 	bl	8007cf4 <HAL_GetTick>
 800961a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b20      	cmp	r3, #32
 8009626:	f040 80d9 	bne.w	80097dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	2319      	movs	r3, #25
 8009630:	2201      	movs	r2, #1
 8009632:	496d      	ldr	r1, [pc, #436]	; (80097e8 <HAL_I2C_Mem_Write+0x1ec>)
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 fdad 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009640:	2302      	movs	r3, #2
 8009642:	e0cc      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <HAL_I2C_Mem_Write+0x56>
 800964e:	2302      	movs	r3, #2
 8009650:	e0c5      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0301 	and.w	r3, r3, #1
 8009664:	2b01      	cmp	r3, #1
 8009666:	d007      	beq.n	8009678 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f042 0201 	orr.w	r2, r2, #1
 8009676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2221      	movs	r2, #33	; 0x21
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2240      	movs	r2, #64	; 0x40
 8009694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80096a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ae:	b29a      	uxth	r2, r3
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4a4d      	ldr	r2, [pc, #308]	; (80097ec <HAL_I2C_Mem_Write+0x1f0>)
 80096b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80096ba:	88f8      	ldrh	r0, [r7, #6]
 80096bc:	893a      	ldrh	r2, [r7, #8]
 80096be:	8979      	ldrh	r1, [r7, #10]
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	4603      	mov	r3, r0
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fbe4 	bl	8009e98 <I2C_RequestMemoryWrite>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d052      	beq.n	800977c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e081      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fe2e 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00d      	beq.n	8009706 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d107      	bne.n	8009702 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e06b      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970a:	781a      	ldrb	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b04      	cmp	r3, #4
 8009742:	d11b      	bne.n	800977c <HAL_I2C_Mem_Write+0x180>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	d017      	beq.n	800977c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	1c5a      	adds	r2, r3, #1
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1aa      	bne.n	80096da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fe1a 	bl	800a3c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009798:	2b04      	cmp	r3, #4
 800979a:	d107      	bne.n	80097ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e016      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	e000      	b.n	80097de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80097dc:	2302      	movs	r3, #2
  }
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	00100002 	.word	0x00100002
 80097ec:	ffff0000 	.word	0xffff0000

080097f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08c      	sub	sp, #48	; 0x30
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	461a      	mov	r2, r3
 80097fe:	4603      	mov	r3, r0
 8009800:	817b      	strh	r3, [r7, #10]
 8009802:	460b      	mov	r3, r1
 8009804:	813b      	strh	r3, [r7, #8]
 8009806:	4613      	mov	r3, r2
 8009808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800980a:	f7fe fa73 	bl	8007cf4 <HAL_GetTick>
 800980e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b20      	cmp	r3, #32
 800981a:	f040 8208 	bne.w	8009c2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009820:	9300      	str	r3, [sp, #0]
 8009822:	2319      	movs	r3, #25
 8009824:	2201      	movs	r2, #1
 8009826:	497b      	ldr	r1, [pc, #492]	; (8009a14 <HAL_I2C_Mem_Read+0x224>)
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fcb3 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d001      	beq.n	8009838 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009834:	2302      	movs	r3, #2
 8009836:	e1fb      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983e:	2b01      	cmp	r3, #1
 8009840:	d101      	bne.n	8009846 <HAL_I2C_Mem_Read+0x56>
 8009842:	2302      	movs	r3, #2
 8009844:	e1f4      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	d007      	beq.n	800986c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800987a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2222      	movs	r2, #34	; 0x22
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2240      	movs	r2, #64	; 0x40
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800989c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4a5b      	ldr	r2, [pc, #364]	; (8009a18 <HAL_I2C_Mem_Read+0x228>)
 80098ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098ae:	88f8      	ldrh	r0, [r7, #6]
 80098b0:	893a      	ldrh	r2, [r7, #8]
 80098b2:	8979      	ldrh	r1, [r7, #10]
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	4603      	mov	r3, r0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fb80 	bl	8009fc4 <I2C_RequestMemoryRead>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e1b0      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d113      	bne.n	80098fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	623b      	str	r3, [r7, #32]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	623b      	str	r3, [r7, #32]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	623b      	str	r3, [r7, #32]
 80098ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fa:	601a      	str	r2, [r3, #0]
 80098fc:	e184      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009902:	2b01      	cmp	r3, #1
 8009904:	d11b      	bne.n	800993e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e164      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009942:	2b02      	cmp	r3, #2
 8009944:	d11b      	bne.n	800997e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009966:	2300      	movs	r3, #0
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	61bb      	str	r3, [r7, #24]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	e144      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009994:	e138      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999a:	2b03      	cmp	r3, #3
 800999c:	f200 80f1 	bhi.w	8009b82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d123      	bne.n	80099f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fd49 	bl	800a444 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e139      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	691a      	ldr	r2, [r3, #16]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d8:	3b01      	subs	r3, #1
 80099da:	b29a      	uxth	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099ee:	e10b      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d14e      	bne.n	8009a96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	2200      	movs	r2, #0
 8009a00:	4906      	ldr	r1, [pc, #24]	; (8009a1c <HAL_I2C_Mem_Read+0x22c>)
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fbc6 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d008      	beq.n	8009a20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e10e      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
 8009a12:	bf00      	nop
 8009a14:	00100002 	.word	0x00100002
 8009a18:	ffff0000 	.word	0xffff0000
 8009a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	691a      	ldr	r2, [r3, #16]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	b2d2      	uxtb	r2, r2
 8009a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a94:	e0b8      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4966      	ldr	r1, [pc, #408]	; (8009c38 <HAL_I2C_Mem_Read+0x448>)
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 fb77 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e0bf      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	691a      	ldr	r2, [r3, #16]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	3b01      	subs	r3, #1
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	2200      	movs	r2, #0
 8009afa:	494f      	ldr	r1, [pc, #316]	; (8009c38 <HAL_I2C_Mem_Read+0x448>)
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 fb49 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e091      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691a      	ldr	r2, [r3, #16]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b80:	e042      	b.n	8009c08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fc5c 	bl	800a444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e04c      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d118      	bne.n	8009c08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f47f aec2 	bne.w	8009996 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	; 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	00010004 	.word	0x00010004

08009c3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	607a      	str	r2, [r7, #4]
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009c4c:	f7fe f852 	bl	8007cf4 <HAL_GetTick>
 8009c50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	f040 8111 	bne.w	8009e86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	2319      	movs	r3, #25
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	4988      	ldr	r1, [pc, #544]	; (8009e90 <HAL_I2C_IsDeviceReady+0x254>)
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 fa90 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e104      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d101      	bne.n	8009c8c <HAL_I2C_IsDeviceReady+0x50>
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e0fd      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d007      	beq.n	8009cb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f042 0201 	orr.w	r2, r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2224      	movs	r2, #36	; 0x24
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4a70      	ldr	r2, [pc, #448]	; (8009e94 <HAL_I2C_IsDeviceReady+0x258>)
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	9300      	str	r3, [sp, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fa4e 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00d      	beq.n	8009d1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0c:	d103      	bne.n	8009d16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e0b6      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d1a:	897b      	ldrh	r3, [r7, #10]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009d2a:	f7fd ffe3 	bl	8007cf4 <HAL_GetTick>
 8009d2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d54:	bf0c      	ite	eq
 8009d56:	2301      	moveq	r3, #1
 8009d58:	2300      	movne	r3, #0
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d5e:	e025      	b.n	8009dac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d60:	f7fd ffc8 	bl	8007cf4 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d302      	bcc.n	8009d76 <HAL_I2C_IsDeviceReady+0x13a>
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d103      	bne.n	8009d7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	22a0      	movs	r2, #160	; 0xa0
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2301      	moveq	r3, #1
 8009d8e:	2300      	movne	r3, #0
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da2:	bf0c      	ite	eq
 8009da4:	2301      	moveq	r3, #1
 8009da6:	2300      	movne	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2ba0      	cmp	r3, #160	; 0xa0
 8009db6:	d005      	beq.n	8009dc4 <HAL_I2C_IsDeviceReady+0x188>
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <HAL_I2C_IsDeviceReady+0x188>
 8009dbe:	7dbb      	ldrb	r3, [r7, #22]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0cd      	beq.n	8009d60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d129      	bne.n	8009e2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dea:	2300      	movs	r3, #0
 8009dec:	613b      	str	r3, [r7, #16]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	2319      	movs	r3, #25
 8009e06:	2201      	movs	r2, #1
 8009e08:	4921      	ldr	r1, [pc, #132]	; (8009e90 <HAL_I2C_IsDeviceReady+0x254>)
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 f9c2 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e036      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e02c      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2319      	movs	r3, #25
 8009e4e:	2201      	movs	r2, #1
 8009e50:	490f      	ldr	r1, [pc, #60]	; (8009e90 <HAL_I2C_IsDeviceReady+0x254>)
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f99e 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e012      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	f4ff af32 	bcc.w	8009cd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e86:	2302      	movs	r3, #2
  }
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3720      	adds	r7, #32
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	00100002 	.word	0x00100002
 8009e94:	ffff0000 	.word	0xffff0000

08009e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	817b      	strh	r3, [r7, #10]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	813b      	strh	r3, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f000 f960 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00d      	beq.n	8009ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee8:	d103      	bne.n	8009ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e05f      	b.n	8009fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ef6:	897b      	ldrh	r3, [r7, #10]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	461a      	mov	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	6a3a      	ldr	r2, [r7, #32]
 8009f0a:	492d      	ldr	r1, [pc, #180]	; (8009fc0 <I2C_RequestMemoryWrite+0x128>)
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f998 	bl	800a242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e04c      	b.n	8009fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f34:	6a39      	ldr	r1, [r7, #32]
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 fa02 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d107      	bne.n	8009f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e02b      	b.n	8009fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f5e:	88fb      	ldrh	r3, [r7, #6]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d105      	bne.n	8009f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f64:	893b      	ldrh	r3, [r7, #8]
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	611a      	str	r2, [r3, #16]
 8009f6e:	e021      	b.n	8009fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f70:	893b      	ldrh	r3, [r7, #8]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f80:	6a39      	ldr	r1, [r7, #32]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f9dc 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00d      	beq.n	8009faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d107      	bne.n	8009fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e005      	b.n	8009fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009faa:	893b      	ldrh	r3, [r7, #8]
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	00010002 	.word	0x00010002

08009fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b088      	sub	sp, #32
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	817b      	strh	r3, [r7, #10]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	813b      	strh	r3, [r7, #8]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	2200      	movs	r2, #0
 800a006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 f8c2 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00d      	beq.n	800a032 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a024:	d103      	bne.n	800a02e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e0aa      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a032:	897b      	ldrh	r3, [r7, #10]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	6a3a      	ldr	r2, [r7, #32]
 800a046:	4952      	ldr	r1, [pc, #328]	; (800a190 <I2C_RequestMemoryRead+0x1cc>)
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f8fa 	bl	800a242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e097      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a070:	6a39      	ldr	r1, [r7, #32]
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f000 f964 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a082:	2b04      	cmp	r3, #4
 800a084:	d107      	bne.n	800a096 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e076      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d105      	bne.n	800a0ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0a0:	893b      	ldrh	r3, [r7, #8]
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	611a      	str	r2, [r3, #16]
 800a0aa:	e021      	b.n	800a0f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a0ac:	893b      	ldrh	r3, [r7, #8]
 800a0ae:	0a1b      	lsrs	r3, r3, #8
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0bc:	6a39      	ldr	r1, [r7, #32]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f93e 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00d      	beq.n	800a0e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d107      	bne.n	800a0e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e050      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0e6:	893b      	ldrh	r3, [r7, #8]
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f2:	6a39      	ldr	r1, [r7, #32]
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 f923 	bl	800a340 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00d      	beq.n	800a11c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a104:	2b04      	cmp	r3, #4
 800a106:	d107      	bne.n	800a118 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a116:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e035      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a12a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	2200      	movs	r2, #0
 800a134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f82b 	bl	800a194 <I2C_WaitOnFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00d      	beq.n	800a160 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a152:	d103      	bne.n	800a15c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e013      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a160:	897b      	ldrh	r3, [r7, #10]
 800a162:	b2db      	uxtb	r3, r3
 800a164:	f043 0301 	orr.w	r3, r3, #1
 800a168:	b2da      	uxtb	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	6a3a      	ldr	r2, [r7, #32]
 800a174:	4906      	ldr	r1, [pc, #24]	; (800a190 <I2C_RequestMemoryRead+0x1cc>)
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 f863 	bl	800a242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	00010002 	.word	0x00010002

0800a194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1a4:	e025      	b.n	800a1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ac:	d021      	beq.n	800a1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ae:	f7fd fda1 	bl	8007cf4 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d302      	bcc.n	800a1c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d116      	bne.n	800a1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e023      	b.n	800a23a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d10d      	bne.n	800a218 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	43da      	mvns	r2, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	4013      	ands	r3, r2
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bf0c      	ite	eq
 800a20e:	2301      	moveq	r3, #1
 800a210:	2300      	movne	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	461a      	mov	r2, r3
 800a216:	e00c      	b.n	800a232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	43da      	mvns	r2, r3
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	4013      	ands	r3, r2
 800a224:	b29b      	uxth	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	bf0c      	ite	eq
 800a22a:	2301      	moveq	r3, #1
 800a22c:	2300      	movne	r3, #0
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	429a      	cmp	r2, r3
 800a236:	d0b6      	beq.n	800a1a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a250:	e051      	b.n	800a2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	695b      	ldr	r3, [r3, #20]
 800a258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a260:	d123      	bne.n	800a2aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a27a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	f043 0204 	orr.w	r2, r3, #4
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e046      	b.n	800a338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2b0:	d021      	beq.n	800a2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b2:	f7fd fd1f 	bl	8007cf4 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d302      	bcc.n	800a2c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d116      	bne.n	800a2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e020      	b.n	800a338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	0c1b      	lsrs	r3, r3, #16
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d10c      	bne.n	800a31a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	43da      	mvns	r2, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4013      	ands	r3, r2
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bf14      	ite	ne
 800a312:	2301      	movne	r3, #1
 800a314:	2300      	moveq	r3, #0
 800a316:	b2db      	uxtb	r3, r3
 800a318:	e00b      	b.n	800a332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	43da      	mvns	r2, r3
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	4013      	ands	r3, r2
 800a326:	b29b      	uxth	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bf14      	ite	ne
 800a32c:	2301      	movne	r3, #1
 800a32e:	2300      	moveq	r3, #0
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d18d      	bne.n	800a252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a34c:	e02d      	b.n	800a3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f8ce 	bl	800a4f0 <I2C_IsAcknowledgeFailed>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e02d      	b.n	800a3ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a364:	d021      	beq.n	800a3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a366:	f7fd fcc5 	bl	8007cf4 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	429a      	cmp	r2, r3
 800a374:	d302      	bcc.n	800a37c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d116      	bne.n	800a3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	f043 0220 	orr.w	r2, r3, #32
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e007      	b.n	800a3ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3b4:	2b80      	cmp	r3, #128	; 0x80
 800a3b6:	d1ca      	bne.n	800a34e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3ce:	e02d      	b.n	800a42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f88d 	bl	800a4f0 <I2C_IsAcknowledgeFailed>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e02d      	b.n	800a43c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e6:	d021      	beq.n	800a42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e8:	f7fd fc84 	bl	8007cf4 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d302      	bcc.n	800a3fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d116      	bne.n	800a42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a418:	f043 0220 	orr.w	r2, r3, #32
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e007      	b.n	800a43c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b04      	cmp	r3, #4
 800a438:	d1ca      	bne.n	800a3d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a450:	e042      	b.n	800a4d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d119      	bne.n	800a494 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f06f 0210 	mvn.w	r2, #16
 800a468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e029      	b.n	800a4e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a494:	f7fd fc2e 	bl	8007cf4 <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d302      	bcc.n	800a4aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d116      	bne.n	800a4d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e007      	b.n	800a4e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	d1b5      	bne.n	800a452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a506:	d11b      	bne.n	800a540 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a510:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2220      	movs	r2, #32
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	f043 0204 	orr.w	r2, r3, #4
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e000      	b.n	800a542 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a55a:	2300      	movs	r3, #0
 800a55c:	603b      	str	r3, [r7, #0]
 800a55e:	4b20      	ldr	r3, [pc, #128]	; (800a5e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	4a1f      	ldr	r2, [pc, #124]	; (800a5e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a568:	6413      	str	r3, [r2, #64]	; 0x40
 800a56a:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800a56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a576:	4b1b      	ldr	r3, [pc, #108]	; (800a5e4 <HAL_PWREx_EnableOverDrive+0x94>)
 800a578:	2201      	movs	r2, #1
 800a57a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a57c:	f7fd fbba 	bl	8007cf4 <HAL_GetTick>
 800a580:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a582:	e009      	b.n	800a598 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a584:	f7fd fbb6 	bl	8007cf4 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a592:	d901      	bls.n	800a598 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e01f      	b.n	800a5d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a4:	d1ee      	bne.n	800a584 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a5a6:	4b11      	ldr	r3, [pc, #68]	; (800a5ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5ac:	f7fd fba2 	bl	8007cf4 <HAL_GetTick>
 800a5b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a5b2:	e009      	b.n	800a5c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a5b4:	f7fd fb9e 	bl	8007cf4 <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5c2:	d901      	bls.n	800a5c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e007      	b.n	800a5d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d4:	d1ee      	bne.n	800a5b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	40023800 	.word	0x40023800
 800a5e4:	420e0040 	.word	0x420e0040
 800a5e8:	40007000 	.word	0x40007000
 800a5ec:	420e0044 	.word	0x420e0044

0800a5f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0cc      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a604:	4b68      	ldr	r3, [pc, #416]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 030f 	and.w	r3, r3, #15
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d90c      	bls.n	800a62c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a612:	4b65      	ldr	r3, [pc, #404]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	b2d2      	uxtb	r2, r2
 800a618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a61a:	4b63      	ldr	r3, [pc, #396]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 030f 	and.w	r3, r3, #15
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d001      	beq.n	800a62c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e0b8      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d020      	beq.n	800a67a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d005      	beq.n	800a650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a644:	4b59      	ldr	r3, [pc, #356]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	4a58      	ldr	r2, [pc, #352]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a64a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a64e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0308 	and.w	r3, r3, #8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a65c:	4b53      	ldr	r3, [pc, #332]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	4a52      	ldr	r2, [pc, #328]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a668:	4b50      	ldr	r3, [pc, #320]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	494d      	ldr	r1, [pc, #308]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a676:	4313      	orrs	r3, r2
 800a678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d044      	beq.n	800a710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d107      	bne.n	800a69e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a68e:	4b47      	ldr	r3, [pc, #284]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d119      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e07f      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d003      	beq.n	800a6ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d107      	bne.n	800a6be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6ae:	4b3f      	ldr	r3, [pc, #252]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e06f      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6be:	4b3b      	ldr	r3, [pc, #236]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e067      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ce:	4b37      	ldr	r3, [pc, #220]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f023 0203 	bic.w	r2, r3, #3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4934      	ldr	r1, [pc, #208]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6e0:	f7fd fb08 	bl	8007cf4 <HAL_GetTick>
 800a6e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e6:	e00a      	b.n	800a6fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e8:	f7fd fb04 	bl	8007cf4 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e04f      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6fe:	4b2b      	ldr	r3, [pc, #172]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 020c 	and.w	r2, r3, #12
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d1eb      	bne.n	800a6e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a710:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 030f 	and.w	r3, r3, #15
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d20c      	bcs.n	800a738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71e:	4b22      	ldr	r3, [pc, #136]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a726:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 030f 	and.w	r3, r3, #15
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d001      	beq.n	800a738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e032      	b.n	800a79e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d008      	beq.n	800a756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a744:	4b19      	ldr	r3, [pc, #100]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	4916      	ldr	r1, [pc, #88]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a752:	4313      	orrs	r3, r2
 800a754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0308 	and.w	r3, r3, #8
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d009      	beq.n	800a776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a762:	4b12      	ldr	r3, [pc, #72]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	490e      	ldr	r1, [pc, #56]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a772:	4313      	orrs	r3, r2
 800a774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a776:	f000 f855 	bl	800a824 <HAL_RCC_GetSysClockFreq>
 800a77a:	4602      	mov	r2, r0
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <HAL_RCC_ClockConfig+0x1bc>)
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	091b      	lsrs	r3, r3, #4
 800a782:	f003 030f 	and.w	r3, r3, #15
 800a786:	490a      	ldr	r1, [pc, #40]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c0>)
 800a788:	5ccb      	ldrb	r3, [r1, r3]
 800a78a:	fa22 f303 	lsr.w	r3, r2, r3
 800a78e:	4a09      	ldr	r2, [pc, #36]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c4>)
 800a790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <HAL_RCC_ClockConfig+0x1c8>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4618      	mov	r0, r3
 800a798:	f7fd fa68 	bl	8007c6c <HAL_InitTick>

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	40023c00 	.word	0x40023c00
 800a7ac:	40023800 	.word	0x40023800
 800a7b0:	08015cf8 	.word	0x08015cf8
 800a7b4:	20000030 	.word	0x20000030
 800a7b8:	2000003c 	.word	0x2000003c

0800a7bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7c0:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20000030 	.word	0x20000030

0800a7d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7d8:	f7ff fff0 	bl	800a7bc <HAL_RCC_GetHCLKFreq>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	0a9b      	lsrs	r3, r3, #10
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	4903      	ldr	r1, [pc, #12]	; (800a7f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7ea:	5ccb      	ldrb	r3, [r1, r3]
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	08015d08 	.word	0x08015d08

0800a7fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a800:	f7ff ffdc 	bl	800a7bc <HAL_RCC_GetHCLKFreq>
 800a804:	4602      	mov	r2, r0
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	0b5b      	lsrs	r3, r3, #13
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	4903      	ldr	r1, [pc, #12]	; (800a820 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a812:	5ccb      	ldrb	r3, [r1, r3]
 800a814:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a818:	4618      	mov	r0, r3
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	40023800 	.word	0x40023800
 800a820:	08015d08 	.word	0x08015d08

0800a824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a828:	b0ae      	sub	sp, #184	; 0xb8
 800a82a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a84a:	4bcb      	ldr	r3, [pc, #812]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f003 030c 	and.w	r3, r3, #12
 800a852:	2b0c      	cmp	r3, #12
 800a854:	f200 8206 	bhi.w	800ac64 <HAL_RCC_GetSysClockFreq+0x440>
 800a858:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85e:	bf00      	nop
 800a860:	0800a895 	.word	0x0800a895
 800a864:	0800ac65 	.word	0x0800ac65
 800a868:	0800ac65 	.word	0x0800ac65
 800a86c:	0800ac65 	.word	0x0800ac65
 800a870:	0800a89d 	.word	0x0800a89d
 800a874:	0800ac65 	.word	0x0800ac65
 800a878:	0800ac65 	.word	0x0800ac65
 800a87c:	0800ac65 	.word	0x0800ac65
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800ac65 	.word	0x0800ac65
 800a888:	0800ac65 	.word	0x0800ac65
 800a88c:	0800ac65 	.word	0x0800ac65
 800a890:	0800aa95 	.word	0x0800aa95
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a894:	4bb9      	ldr	r3, [pc, #740]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x358>)
 800a896:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a89a:	e1e7      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a89c:	4bb8      	ldr	r3, [pc, #736]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a89e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a8a2:	e1e3      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8a4:	4bb4      	ldr	r3, [pc, #720]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8b0:	4bb1      	ldr	r3, [pc, #708]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d071      	beq.n	800a9a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8bc:	4bae      	ldr	r3, [pc, #696]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	099b      	lsrs	r3, r3, #6
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a8cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	f04f 0000 	mov.w	r0, #0
 800a8ea:	f04f 0100 	mov.w	r1, #0
 800a8ee:	0159      	lsls	r1, r3, #5
 800a8f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8f4:	0150      	lsls	r0, r2, #5
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	1a51      	subs	r1, r2, r1
 800a8fe:	6439      	str	r1, [r7, #64]	; 0x40
 800a900:	4629      	mov	r1, r5
 800a902:	eb63 0301 	sbc.w	r3, r3, r1
 800a906:	647b      	str	r3, [r7, #68]	; 0x44
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a914:	4649      	mov	r1, r9
 800a916:	018b      	lsls	r3, r1, #6
 800a918:	4641      	mov	r1, r8
 800a91a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a91e:	4641      	mov	r1, r8
 800a920:	018a      	lsls	r2, r1, #6
 800a922:	4641      	mov	r1, r8
 800a924:	1a51      	subs	r1, r2, r1
 800a926:	63b9      	str	r1, [r7, #56]	; 0x38
 800a928:	4649      	mov	r1, r9
 800a92a:	eb63 0301 	sbc.w	r3, r3, r1
 800a92e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a930:	f04f 0200 	mov.w	r2, #0
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a93c:	4649      	mov	r1, r9
 800a93e:	00cb      	lsls	r3, r1, #3
 800a940:	4641      	mov	r1, r8
 800a942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a946:	4641      	mov	r1, r8
 800a948:	00ca      	lsls	r2, r1, #3
 800a94a:	4610      	mov	r0, r2
 800a94c:	4619      	mov	r1, r3
 800a94e:	4603      	mov	r3, r0
 800a950:	4622      	mov	r2, r4
 800a952:	189b      	adds	r3, r3, r2
 800a954:	633b      	str	r3, [r7, #48]	; 0x30
 800a956:	462b      	mov	r3, r5
 800a958:	460a      	mov	r2, r1
 800a95a:	eb42 0303 	adc.w	r3, r2, r3
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	f04f 0300 	mov.w	r3, #0
 800a968:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a96c:	4629      	mov	r1, r5
 800a96e:	024b      	lsls	r3, r1, #9
 800a970:	4621      	mov	r1, r4
 800a972:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a976:	4621      	mov	r1, r4
 800a978:	024a      	lsls	r2, r1, #9
 800a97a:	4610      	mov	r0, r2
 800a97c:	4619      	mov	r1, r3
 800a97e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a982:	2200      	movs	r2, #0
 800a984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a988:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a98c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a990:	f7f6 f9ca 	bl	8000d28 <__aeabi_uldivmod>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4613      	mov	r3, r2
 800a99a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a99e:	e067      	b.n	800aa70 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9a0:	4b75      	ldr	r3, [pc, #468]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	099b      	lsrs	r3, r3, #6
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a9b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	f04f 0000 	mov.w	r0, #0
 800a9ca:	f04f 0100 	mov.w	r1, #0
 800a9ce:	0159      	lsls	r1, r3, #5
 800a9d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a9d4:	0150      	lsls	r0, r2, #5
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4621      	mov	r1, r4
 800a9dc:	1a51      	subs	r1, r2, r1
 800a9de:	62b9      	str	r1, [r7, #40]	; 0x28
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	eb63 0301 	sbc.w	r3, r3, r1
 800a9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9e8:	f04f 0200 	mov.w	r2, #0
 800a9ec:	f04f 0300 	mov.w	r3, #0
 800a9f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	018b      	lsls	r3, r1, #6
 800a9f8:	4641      	mov	r1, r8
 800a9fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a9fe:	4641      	mov	r1, r8
 800aa00:	018a      	lsls	r2, r1, #6
 800aa02:	4641      	mov	r1, r8
 800aa04:	ebb2 0a01 	subs.w	sl, r2, r1
 800aa08:	4649      	mov	r1, r9
 800aa0a:	eb63 0b01 	sbc.w	fp, r3, r1
 800aa0e:	f04f 0200 	mov.w	r2, #0
 800aa12:	f04f 0300 	mov.w	r3, #0
 800aa16:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa1a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa22:	4692      	mov	sl, r2
 800aa24:	469b      	mov	fp, r3
 800aa26:	4623      	mov	r3, r4
 800aa28:	eb1a 0303 	adds.w	r3, sl, r3
 800aa2c:	623b      	str	r3, [r7, #32]
 800aa2e:	462b      	mov	r3, r5
 800aa30:	eb4b 0303 	adc.w	r3, fp, r3
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
 800aa36:	f04f 0200 	mov.w	r2, #0
 800aa3a:	f04f 0300 	mov.w	r3, #0
 800aa3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800aa42:	4629      	mov	r1, r5
 800aa44:	028b      	lsls	r3, r1, #10
 800aa46:	4621      	mov	r1, r4
 800aa48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	028a      	lsls	r2, r1, #10
 800aa50:	4610      	mov	r0, r2
 800aa52:	4619      	mov	r1, r3
 800aa54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa58:	2200      	movs	r2, #0
 800aa5a:	673b      	str	r3, [r7, #112]	; 0x70
 800aa5c:	677a      	str	r2, [r7, #116]	; 0x74
 800aa5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800aa62:	f7f6 f961 	bl	8000d28 <__aeabi_uldivmod>
 800aa66:	4602      	mov	r2, r0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa70:	4b41      	ldr	r3, [pc, #260]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	0c1b      	lsrs	r3, r3, #16
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800aa82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800aa92:	e0eb      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa94:	4b38      	ldr	r3, [pc, #224]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aaa0:	4b35      	ldr	r3, [pc, #212]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d06b      	beq.n	800ab84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaac:	4b32      	ldr	r3, [pc, #200]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x354>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	099b      	lsrs	r3, r3, #6
 800aab2:	2200      	movs	r2, #0
 800aab4:	66bb      	str	r3, [r7, #104]	; 0x68
 800aab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabe:	663b      	str	r3, [r7, #96]	; 0x60
 800aac0:	2300      	movs	r3, #0
 800aac2:	667b      	str	r3, [r7, #100]	; 0x64
 800aac4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800aac8:	4622      	mov	r2, r4
 800aaca:	462b      	mov	r3, r5
 800aacc:	f04f 0000 	mov.w	r0, #0
 800aad0:	f04f 0100 	mov.w	r1, #0
 800aad4:	0159      	lsls	r1, r3, #5
 800aad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aada:	0150      	lsls	r0, r2, #5
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	4621      	mov	r1, r4
 800aae2:	1a51      	subs	r1, r2, r1
 800aae4:	61b9      	str	r1, [r7, #24]
 800aae6:	4629      	mov	r1, r5
 800aae8:	eb63 0301 	sbc.w	r3, r3, r1
 800aaec:	61fb      	str	r3, [r7, #28]
 800aaee:	f04f 0200 	mov.w	r2, #0
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800aafa:	4659      	mov	r1, fp
 800aafc:	018b      	lsls	r3, r1, #6
 800aafe:	4651      	mov	r1, sl
 800ab00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab04:	4651      	mov	r1, sl
 800ab06:	018a      	lsls	r2, r1, #6
 800ab08:	4651      	mov	r1, sl
 800ab0a:	ebb2 0801 	subs.w	r8, r2, r1
 800ab0e:	4659      	mov	r1, fp
 800ab10:	eb63 0901 	sbc.w	r9, r3, r1
 800ab14:	f04f 0200 	mov.w	r2, #0
 800ab18:	f04f 0300 	mov.w	r3, #0
 800ab1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ab28:	4690      	mov	r8, r2
 800ab2a:	4699      	mov	r9, r3
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	eb18 0303 	adds.w	r3, r8, r3
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	462b      	mov	r3, r5
 800ab36:	eb49 0303 	adc.w	r3, r9, r3
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	f04f 0200 	mov.w	r2, #0
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ab48:	4629      	mov	r1, r5
 800ab4a:	024b      	lsls	r3, r1, #9
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ab52:	4621      	mov	r1, r4
 800ab54:	024a      	lsls	r2, r1, #9
 800ab56:	4610      	mov	r0, r2
 800ab58:	4619      	mov	r1, r3
 800ab5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab5e:	2200      	movs	r2, #0
 800ab60:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab62:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ab64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab68:	f7f6 f8de 	bl	8000d28 <__aeabi_uldivmod>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4613      	mov	r3, r2
 800ab72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab76:	e065      	b.n	800ac44 <HAL_RCC_GetSysClockFreq+0x420>
 800ab78:	40023800 	.word	0x40023800
 800ab7c:	00f42400 	.word	0x00f42400
 800ab80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab84:	4b3d      	ldr	r3, [pc, #244]	; (800ac7c <HAL_RCC_GetSysClockFreq+0x458>)
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	099b      	lsrs	r3, r3, #6
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	4611      	mov	r1, r2
 800ab90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ab94:	653b      	str	r3, [r7, #80]	; 0x50
 800ab96:	2300      	movs	r3, #0
 800ab98:	657b      	str	r3, [r7, #84]	; 0x54
 800ab9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f04f 0100 	mov.w	r1, #0
 800abaa:	0159      	lsls	r1, r3, #5
 800abac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800abb0:	0150      	lsls	r0, r2, #5
 800abb2:	4602      	mov	r2, r0
 800abb4:	460b      	mov	r3, r1
 800abb6:	4641      	mov	r1, r8
 800abb8:	1a51      	subs	r1, r2, r1
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	4649      	mov	r1, r9
 800abbe:	eb63 0301 	sbc.w	r3, r3, r1
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800abd0:	4659      	mov	r1, fp
 800abd2:	018b      	lsls	r3, r1, #6
 800abd4:	4651      	mov	r1, sl
 800abd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800abda:	4651      	mov	r1, sl
 800abdc:	018a      	lsls	r2, r1, #6
 800abde:	4651      	mov	r1, sl
 800abe0:	1a54      	subs	r4, r2, r1
 800abe2:	4659      	mov	r1, fp
 800abe4:	eb63 0501 	sbc.w	r5, r3, r1
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	00eb      	lsls	r3, r5, #3
 800abf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abf6:	00e2      	lsls	r2, r4, #3
 800abf8:	4614      	mov	r4, r2
 800abfa:	461d      	mov	r5, r3
 800abfc:	4643      	mov	r3, r8
 800abfe:	18e3      	adds	r3, r4, r3
 800ac00:	603b      	str	r3, [r7, #0]
 800ac02:	464b      	mov	r3, r9
 800ac04:	eb45 0303 	adc.w	r3, r5, r3
 800ac08:	607b      	str	r3, [r7, #4]
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ac16:	4629      	mov	r1, r5
 800ac18:	028b      	lsls	r3, r1, #10
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ac20:	4621      	mov	r1, r4
 800ac22:	028a      	lsls	r2, r1, #10
 800ac24:	4610      	mov	r0, r2
 800ac26:	4619      	mov	r1, r3
 800ac28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac30:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ac32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac36:	f7f6 f877 	bl	8000d28 <__aeabi_uldivmod>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4613      	mov	r3, r2
 800ac40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800ac44:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <HAL_RCC_GetSysClockFreq+0x458>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	0f1b      	lsrs	r3, r3, #28
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800ac52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ac62:	e003      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac64:	4b06      	ldr	r3, [pc, #24]	; (800ac80 <HAL_RCC_GetSysClockFreq+0x45c>)
 800ac66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800ac6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	37b8      	adds	r7, #184	; 0xb8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac7a:	bf00      	nop
 800ac7c:	40023800 	.word	0x40023800
 800ac80:	00f42400 	.word	0x00f42400

0800ac84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e28d      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 8083 	beq.w	800adaa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800aca4:	4b94      	ldr	r3, [pc, #592]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f003 030c 	and.w	r3, r3, #12
 800acac:	2b04      	cmp	r3, #4
 800acae:	d019      	beq.n	800ace4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800acb0:	4b91      	ldr	r3, [pc, #580]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800acb8:	2b08      	cmp	r3, #8
 800acba:	d106      	bne.n	800acca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800acbc:	4b8e      	ldr	r3, [pc, #568]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acc8:	d00c      	beq.n	800ace4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acca:	4b8b      	ldr	r3, [pc, #556]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800acd2:	2b0c      	cmp	r3, #12
 800acd4:	d112      	bne.n	800acfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acd6:	4b88      	ldr	r3, [pc, #544]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ace2:	d10b      	bne.n	800acfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ace4:	4b84      	ldr	r3, [pc, #528]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05b      	beq.n	800ada8 <HAL_RCC_OscConfig+0x124>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d157      	bne.n	800ada8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e25a      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad04:	d106      	bne.n	800ad14 <HAL_RCC_OscConfig+0x90>
 800ad06:	4b7c      	ldr	r3, [pc, #496]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a7b      	ldr	r2, [pc, #492]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	e01d      	b.n	800ad50 <HAL_RCC_OscConfig+0xcc>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad1c:	d10c      	bne.n	800ad38 <HAL_RCC_OscConfig+0xb4>
 800ad1e:	4b76      	ldr	r3, [pc, #472]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a75      	ldr	r2, [pc, #468]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	4b73      	ldr	r3, [pc, #460]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a72      	ldr	r2, [pc, #456]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	e00b      	b.n	800ad50 <HAL_RCC_OscConfig+0xcc>
 800ad38:	4b6f      	ldr	r3, [pc, #444]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a6e      	ldr	r2, [pc, #440]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	4b6c      	ldr	r3, [pc, #432]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a6b      	ldr	r2, [pc, #428]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d013      	beq.n	800ad80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad58:	f7fc ffcc 	bl	8007cf4 <HAL_GetTick>
 800ad5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	e008      	b.n	800ad72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad60:	f7fc ffc8 	bl	8007cf4 <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b64      	cmp	r3, #100	; 0x64
 800ad6c:	d901      	bls.n	800ad72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e21f      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad72:	4b61      	ldr	r3, [pc, #388]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f0      	beq.n	800ad60 <HAL_RCC_OscConfig+0xdc>
 800ad7e:	e014      	b.n	800adaa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad80:	f7fc ffb8 	bl	8007cf4 <HAL_GetTick>
 800ad84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad88:	f7fc ffb4 	bl	8007cf4 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b64      	cmp	r3, #100	; 0x64
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e20b      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad9a:	4b57      	ldr	r3, [pc, #348]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f0      	bne.n	800ad88 <HAL_RCC_OscConfig+0x104>
 800ada6:	e000      	b.n	800adaa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ada8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d06f      	beq.n	800ae96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800adb6:	4b50      	ldr	r3, [pc, #320]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f003 030c 	and.w	r3, r3, #12
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d017      	beq.n	800adf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800adc2:	4b4d      	ldr	r3, [pc, #308]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800adca:	2b08      	cmp	r3, #8
 800adcc:	d105      	bne.n	800adda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800adce:	4b4a      	ldr	r3, [pc, #296]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adda:	4b47      	ldr	r3, [pc, #284]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ade2:	2b0c      	cmp	r3, #12
 800ade4:	d11c      	bne.n	800ae20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ade6:	4b44      	ldr	r3, [pc, #272]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d116      	bne.n	800ae20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adf2:	4b41      	ldr	r3, [pc, #260]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <HAL_RCC_OscConfig+0x186>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d001      	beq.n	800ae0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e1d3      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae0a:	4b3b      	ldr	r3, [pc, #236]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	4937      	ldr	r1, [pc, #220]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae1e:	e03a      	b.n	800ae96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d020      	beq.n	800ae6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae28:	4b34      	ldr	r3, [pc, #208]	; (800aefc <HAL_RCC_OscConfig+0x278>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2e:	f7fc ff61 	bl	8007cf4 <HAL_GetTick>
 800ae32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae34:	e008      	b.n	800ae48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae36:	f7fc ff5d 	bl	8007cf4 <HAL_GetTick>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d901      	bls.n	800ae48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ae44:	2303      	movs	r3, #3
 800ae46:	e1b4      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae48:	4b2b      	ldr	r3, [pc, #172]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0f0      	beq.n	800ae36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4925      	ldr	r1, [pc, #148]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	600b      	str	r3, [r1, #0]
 800ae68:	e015      	b.n	800ae96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae6a:	4b24      	ldr	r3, [pc, #144]	; (800aefc <HAL_RCC_OscConfig+0x278>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae70:	f7fc ff40 	bl	8007cf4 <HAL_GetTick>
 800ae74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae76:	e008      	b.n	800ae8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae78:	f7fc ff3c 	bl	8007cf4 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d901      	bls.n	800ae8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e193      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae8a:	4b1b      	ldr	r3, [pc, #108]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1f0      	bne.n	800ae78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0308 	and.w	r3, r3, #8
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d036      	beq.n	800af10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d016      	beq.n	800aed8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aeaa:	4b15      	ldr	r3, [pc, #84]	; (800af00 <HAL_RCC_OscConfig+0x27c>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeb0:	f7fc ff20 	bl	8007cf4 <HAL_GetTick>
 800aeb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aeb8:	f7fc ff1c 	bl	8007cf4 <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e173      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeca:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <HAL_RCC_OscConfig+0x274>)
 800aecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0f0      	beq.n	800aeb8 <HAL_RCC_OscConfig+0x234>
 800aed6:	e01b      	b.n	800af10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aed8:	4b09      	ldr	r3, [pc, #36]	; (800af00 <HAL_RCC_OscConfig+0x27c>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aede:	f7fc ff09 	bl	8007cf4 <HAL_GetTick>
 800aee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aee4:	e00e      	b.n	800af04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aee6:	f7fc ff05 	bl	8007cf4 <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d907      	bls.n	800af04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e15c      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
 800aef8:	40023800 	.word	0x40023800
 800aefc:	42470000 	.word	0x42470000
 800af00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af04:	4b8a      	ldr	r3, [pc, #552]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1ea      	bne.n	800aee6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 8097 	beq.w	800b04c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af1e:	2300      	movs	r3, #0
 800af20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af22:	4b83      	ldr	r3, [pc, #524]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10f      	bne.n	800af4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
 800af32:	4b7f      	ldr	r3, [pc, #508]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af36:	4a7e      	ldr	r2, [pc, #504]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af3c:	6413      	str	r3, [r2, #64]	; 0x40
 800af3e:	4b7c      	ldr	r3, [pc, #496]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af46:	60bb      	str	r3, [r7, #8]
 800af48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af4a:	2301      	movs	r3, #1
 800af4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af4e:	4b79      	ldr	r3, [pc, #484]	; (800b134 <HAL_RCC_OscConfig+0x4b0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af56:	2b00      	cmp	r3, #0
 800af58:	d118      	bne.n	800af8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af5a:	4b76      	ldr	r3, [pc, #472]	; (800b134 <HAL_RCC_OscConfig+0x4b0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a75      	ldr	r2, [pc, #468]	; (800b134 <HAL_RCC_OscConfig+0x4b0>)
 800af60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af66:	f7fc fec5 	bl	8007cf4 <HAL_GetTick>
 800af6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af6c:	e008      	b.n	800af80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af6e:	f7fc fec1 	bl	8007cf4 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d901      	bls.n	800af80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e118      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af80:	4b6c      	ldr	r3, [pc, #432]	; (800b134 <HAL_RCC_OscConfig+0x4b0>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0f0      	beq.n	800af6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d106      	bne.n	800afa2 <HAL_RCC_OscConfig+0x31e>
 800af94:	4b66      	ldr	r3, [pc, #408]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af98:	4a65      	ldr	r2, [pc, #404]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800af9a:	f043 0301 	orr.w	r3, r3, #1
 800af9e:	6713      	str	r3, [r2, #112]	; 0x70
 800afa0:	e01c      	b.n	800afdc <HAL_RCC_OscConfig+0x358>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	2b05      	cmp	r3, #5
 800afa8:	d10c      	bne.n	800afc4 <HAL_RCC_OscConfig+0x340>
 800afaa:	4b61      	ldr	r3, [pc, #388]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	4a60      	ldr	r2, [pc, #384]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afb0:	f043 0304 	orr.w	r3, r3, #4
 800afb4:	6713      	str	r3, [r2, #112]	; 0x70
 800afb6:	4b5e      	ldr	r3, [pc, #376]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	4a5d      	ldr	r2, [pc, #372]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afbc:	f043 0301 	orr.w	r3, r3, #1
 800afc0:	6713      	str	r3, [r2, #112]	; 0x70
 800afc2:	e00b      	b.n	800afdc <HAL_RCC_OscConfig+0x358>
 800afc4:	4b5a      	ldr	r3, [pc, #360]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	4a59      	ldr	r2, [pc, #356]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afca:	f023 0301 	bic.w	r3, r3, #1
 800afce:	6713      	str	r3, [r2, #112]	; 0x70
 800afd0:	4b57      	ldr	r3, [pc, #348]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd4:	4a56      	ldr	r2, [pc, #344]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800afd6:	f023 0304 	bic.w	r3, r3, #4
 800afda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d015      	beq.n	800b010 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afe4:	f7fc fe86 	bl	8007cf4 <HAL_GetTick>
 800afe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afea:	e00a      	b.n	800b002 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afec:	f7fc fe82 	bl	8007cf4 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800affa:	4293      	cmp	r3, r2
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e0d7      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b002:	4b4b      	ldr	r3, [pc, #300]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0ee      	beq.n	800afec <HAL_RCC_OscConfig+0x368>
 800b00e:	e014      	b.n	800b03a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b010:	f7fc fe70 	bl	8007cf4 <HAL_GetTick>
 800b014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b016:	e00a      	b.n	800b02e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b018:	f7fc fe6c 	bl	8007cf4 <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	f241 3288 	movw	r2, #5000	; 0x1388
 800b026:	4293      	cmp	r3, r2
 800b028:	d901      	bls.n	800b02e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e0c1      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b02e:	4b40      	ldr	r3, [pc, #256]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1ee      	bne.n	800b018 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b03a:	7dfb      	ldrb	r3, [r7, #23]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d105      	bne.n	800b04c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b040:	4b3b      	ldr	r3, [pc, #236]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b044:	4a3a      	ldr	r2, [pc, #232]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b04a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 80ad 	beq.w	800b1b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b056:	4b36      	ldr	r3, [pc, #216]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f003 030c 	and.w	r3, r3, #12
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d060      	beq.n	800b124 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d145      	bne.n	800b0f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b06a:	4b33      	ldr	r3, [pc, #204]	; (800b138 <HAL_RCC_OscConfig+0x4b4>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b070:	f7fc fe40 	bl	8007cf4 <HAL_GetTick>
 800b074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b078:	f7fc fe3c 	bl	8007cf4 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b02      	cmp	r3, #2
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e093      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08a:	4b29      	ldr	r3, [pc, #164]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1f0      	bne.n	800b078 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69da      	ldr	r2, [r3, #28]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	019b      	lsls	r3, r3, #6
 800b0a6:	431a      	orrs	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ac:	085b      	lsrs	r3, r3, #1
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	041b      	lsls	r3, r3, #16
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c0:	071b      	lsls	r3, r3, #28
 800b0c2:	491b      	ldr	r1, [pc, #108]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0c8:	4b1b      	ldr	r3, [pc, #108]	; (800b138 <HAL_RCC_OscConfig+0x4b4>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ce:	f7fc fe11 	bl	8007cf4 <HAL_GetTick>
 800b0d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0d4:	e008      	b.n	800b0e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0d6:	f7fc fe0d 	bl	8007cf4 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d901      	bls.n	800b0e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e064      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0e8:	4b11      	ldr	r3, [pc, #68]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d0f0      	beq.n	800b0d6 <HAL_RCC_OscConfig+0x452>
 800b0f4:	e05c      	b.n	800b1b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0f6:	4b10      	ldr	r3, [pc, #64]	; (800b138 <HAL_RCC_OscConfig+0x4b4>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fc:	f7fc fdfa 	bl	8007cf4 <HAL_GetTick>
 800b100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b102:	e008      	b.n	800b116 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b104:	f7fc fdf6 	bl	8007cf4 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d901      	bls.n	800b116 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b112:	2303      	movs	r3, #3
 800b114:	e04d      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b116:	4b06      	ldr	r3, [pc, #24]	; (800b130 <HAL_RCC_OscConfig+0x4ac>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1f0      	bne.n	800b104 <HAL_RCC_OscConfig+0x480>
 800b122:	e045      	b.n	800b1b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d107      	bne.n	800b13c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e040      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
 800b130:	40023800 	.word	0x40023800
 800b134:	40007000 	.word	0x40007000
 800b138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b13c:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <HAL_RCC_OscConfig+0x538>)
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d030      	beq.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b154:	429a      	cmp	r2, r3
 800b156:	d129      	bne.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b162:	429a      	cmp	r2, r3
 800b164:	d122      	bne.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b16c:	4013      	ands	r3, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b174:	4293      	cmp	r3, r2
 800b176:	d119      	bne.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	3b01      	subs	r3, #1
 800b186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b188:	429a      	cmp	r2, r3
 800b18a:	d10f      	bne.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b198:	429a      	cmp	r2, r3
 800b19a:	d107      	bne.n	800b1ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d001      	beq.n	800b1b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	40023800 	.word	0x40023800

0800b1c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e07b      	b.n	800b2ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d108      	bne.n	800b1ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e2:	d009      	beq.n	800b1f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	61da      	str	r2, [r3, #28]
 800b1ea:	e005      	b.n	800b1f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fa f81e 	bl	8005254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b22e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b240:	431a      	orrs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b24a:	431a      	orrs	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	f003 0302 	and.w	r3, r3, #2
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b272:	431a      	orrs	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27c:	ea42 0103 	orr.w	r1, r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b284:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	0c1b      	lsrs	r3, r3, #16
 800b296:	f003 0104 	and.w	r1, r3, #4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b29e:	f003 0210 	and.w	r2, r3, #16
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b088      	sub	sp, #32
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	60b9      	str	r1, [r7, #8]
 800b2dc:	603b      	str	r3, [r7, #0]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d101      	bne.n	800b2f4 <HAL_SPI_Transmit+0x22>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	e126      	b.n	800b542 <HAL_SPI_Transmit+0x270>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2fc:	f7fc fcfa 	bl	8007cf4 <HAL_GetTick>
 800b300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d002      	beq.n	800b318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b312:	2302      	movs	r3, #2
 800b314:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b316:	e10b      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_SPI_Transmit+0x52>
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d102      	bne.n	800b32a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b328:	e102      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2203      	movs	r2, #3
 800b32e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	88fa      	ldrh	r2, [r7, #6]
 800b342:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	88fa      	ldrh	r2, [r7, #6]
 800b348:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b370:	d10f      	bne.n	800b392 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b380:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d007      	beq.n	800b3b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b8:	d14b      	bne.n	800b452 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_SPI_Transmit+0xf6>
 800b3c2:	8afb      	ldrh	r3, [r7, #22]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d13e      	bne.n	800b446 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3cc:	881a      	ldrh	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	1c9a      	adds	r2, r3, #2
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b3ec:	e02b      	b.n	800b446 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d112      	bne.n	800b422 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b400:	881a      	ldrh	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	1c9a      	adds	r2, r3, #2
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b416:	b29b      	uxth	r3, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b420:	e011      	b.n	800b446 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b422:	f7fc fc67 	bl	8007cf4 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d803      	bhi.n	800b43a <HAL_SPI_Transmit+0x168>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b438:	d102      	bne.n	800b440 <HAL_SPI_Transmit+0x16e>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b444:	e074      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1ce      	bne.n	800b3ee <HAL_SPI_Transmit+0x11c>
 800b450:	e04c      	b.n	800b4ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d002      	beq.n	800b460 <HAL_SPI_Transmit+0x18e>
 800b45a:	8afb      	ldrh	r3, [r7, #22]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d140      	bne.n	800b4e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330c      	adds	r3, #12
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b486:	e02c      	b.n	800b4e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b02      	cmp	r3, #2
 800b494:	d113      	bne.n	800b4be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	330c      	adds	r3, #12
 800b4a0:	7812      	ldrb	r2, [r2, #0]
 800b4a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	86da      	strh	r2, [r3, #54]	; 0x36
 800b4bc:	e011      	b.n	800b4e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b4be:	f7fc fc19 	bl	8007cf4 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	683a      	ldr	r2, [r7, #0]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d803      	bhi.n	800b4d6 <HAL_SPI_Transmit+0x204>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4d4:	d102      	bne.n	800b4dc <HAL_SPI_Transmit+0x20a>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b4e0:	e026      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1cd      	bne.n	800b488 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4ec:	69ba      	ldr	r2, [r7, #24]
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 fafd 	bl	800baf0 <SPI_EndRxTxTransaction>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2220      	movs	r2, #32
 800b500:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b50a:	2300      	movs	r3, #0
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	613b      	str	r3, [r7, #16]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	613b      	str	r3, [r7, #16]
 800b51e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	77fb      	strb	r3, [r7, #31]
 800b52c:	e000      	b.n	800b530 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b52e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b540:	7ffb      	ldrb	r3, [r7, #31]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3720      	adds	r7, #32
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	4613      	mov	r3, r2
 800b558:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_SPI_Transmit_DMA+0x20>
 800b568:	2302      	movs	r3, #2
 800b56a:	e09b      	b.n	800b6a4 <HAL_SPI_Transmit_DMA+0x158>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d002      	beq.n	800b586 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b580:	2302      	movs	r3, #2
 800b582:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b584:	e089      	b.n	800b69a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <HAL_SPI_Transmit_DMA+0x46>
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b596:	e080      	b.n	800b69a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2203      	movs	r2, #3
 800b59c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	88fa      	ldrh	r2, [r7, #6]
 800b5b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	88fa      	ldrh	r2, [r7, #6]
 800b5b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5de:	d10f      	bne.n	800b600 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b604:	4a29      	ldr	r2, [pc, #164]	; (800b6ac <HAL_SPI_Transmit_DMA+0x160>)
 800b606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b60c:	4a28      	ldr	r2, [pc, #160]	; (800b6b0 <HAL_SPI_Transmit_DMA+0x164>)
 800b60e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b614:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <HAL_SPI_Transmit_DMA+0x168>)
 800b616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b61c:	2200      	movs	r2, #0
 800b61e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b628:	4619      	mov	r1, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	330c      	adds	r3, #12
 800b630:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b636:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b638:	f7fd f950 	bl	80088dc <HAL_DMA_Start_IT>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00c      	beq.n	800b65c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b646:	f043 0210 	orr.w	r2, r3, #16
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b65a:	e01e      	b.n	800b69a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b666:	2b40      	cmp	r3, #64	; 0x40
 800b668:	d007      	beq.n	800b67a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b678:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0220 	orr.w	r2, r2, #32
 800b688:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f042 0202 	orr.w	r2, r2, #2
 800b698:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	0800b95d 	.word	0x0800b95d
 800b6b0:	0800b8b5 	.word	0x0800b8b5
 800b6b4:	0800b979 	.word	0x0800b979

0800b6b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10e      	bne.n	800b6f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d009      	beq.n	800b6f8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	4798      	blx	r3
    return;
 800b6f6:	e0ce      	b.n	800b896 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	f003 0302 	and.w	r3, r3, #2
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d009      	beq.n	800b716 <HAL_SPI_IRQHandler+0x5e>
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	4798      	blx	r3
    return;
 800b714:	e0bf      	b.n	800b896 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10a      	bne.n	800b736 <HAL_SPI_IRQHandler+0x7e>
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b726:	2b00      	cmp	r3, #0
 800b728:	d105      	bne.n	800b736 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b730:	2b00      	cmp	r3, #0
 800b732:	f000 80b0 	beq.w	800b896 <HAL_SPI_IRQHandler+0x1de>
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80aa 	beq.w	800b896 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d023      	beq.n	800b794 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b03      	cmp	r3, #3
 800b756:	d011      	beq.n	800b77c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b75c:	f043 0204 	orr.w	r2, r3, #4
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b764:	2300      	movs	r3, #0
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	e00b      	b.n	800b794 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b77c:	2300      	movs	r3, #0
 800b77e:	613b      	str	r3, [r7, #16]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	613b      	str	r3, [r7, #16]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	613b      	str	r3, [r7, #16]
 800b790:	693b      	ldr	r3, [r7, #16]
        return;
 800b792:	e080      	b.n	800b896 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	f003 0320 	and.w	r3, r3, #32
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d014      	beq.n	800b7c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a2:	f043 0201 	orr.w	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00c      	beq.n	800b7ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d6:	f043 0208 	orr.w	r2, r3, #8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60bb      	str	r3, [r7, #8]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	60bb      	str	r3, [r7, #8]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d04f      	beq.n	800b894 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b802:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <HAL_SPI_IRQHandler+0x168>
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d034      	beq.n	800b88a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f022 0203 	bic.w	r2, r2, #3
 800b82e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b834:	2b00      	cmp	r3, #0
 800b836:	d011      	beq.n	800b85c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b83c:	4a17      	ldr	r2, [pc, #92]	; (800b89c <HAL_SPI_IRQHandler+0x1e4>)
 800b83e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b844:	4618      	mov	r0, r3
 800b846:	f7fd f911 	bl	8008a6c <HAL_DMA_Abort_IT>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d005      	beq.n	800b85c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b860:	2b00      	cmp	r3, #0
 800b862:	d016      	beq.n	800b892 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b868:	4a0c      	ldr	r2, [pc, #48]	; (800b89c <HAL_SPI_IRQHandler+0x1e4>)
 800b86a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b870:	4618      	mov	r0, r3
 800b872:	f7fd f8fb 	bl	8008a6c <HAL_DMA_Abort_IT>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00a      	beq.n	800b892 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b888:	e003      	b.n	800b892 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fa fb1a 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b890:	e000      	b.n	800b894 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b892:	bf00      	nop
    return;
 800b894:	bf00      	nop
  }
}
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	0800b9b9 	.word	0x0800b9b9

0800b8a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8c2:	f7fc fa17 	bl	8007cf4 <HAL_GetTick>
 800b8c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d6:	d03b      	beq.n	800b950 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f022 0220 	bic.w	r2, r2, #32
 800b8e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f022 0202 	bic.w	r2, r2, #2
 800b8f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	2164      	movs	r1, #100	; 0x64
 800b8fc:	6978      	ldr	r0, [r7, #20]
 800b8fe:	f000 f8f7 	bl	800baf0 <SPI_EndRxTxTransaction>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d005      	beq.n	800b914 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90c:	f043 0220 	orr.w	r2, r3, #32
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d10a      	bne.n	800b932 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b91c:	2300      	movs	r3, #0
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2200      	movs	r2, #0
 800b936:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b948:	6978      	ldr	r0, [r7, #20]
 800b94a:	f7fa fabb 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b94e:	e002      	b.n	800b956 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b950:	6978      	ldr	r0, [r7, #20]
 800b952:	f7fa facd 	bl	8005ef0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b968:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7ff ff98 	bl	800b8a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b970:	bf00      	nop
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b984:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f022 0203 	bic.w	r2, r2, #3
 800b994:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b99a:	f043 0210 	orr.w	r2, r3, #16
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f7fa fa8a 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7fa fa76 	bl	8005ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9d8:	bf00      	nop
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b9f0:	f7fc f980 	bl	8007cf4 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	1a9b      	subs	r3, r3, r2
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba00:	f7fc f978 	bl	8007cf4 <HAL_GetTick>
 800ba04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba06:	4b39      	ldr	r3, [pc, #228]	; (800baec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	015b      	lsls	r3, r3, #5
 800ba0c:	0d1b      	lsrs	r3, r3, #20
 800ba0e:	69fa      	ldr	r2, [r7, #28]
 800ba10:	fb02 f303 	mul.w	r3, r2, r3
 800ba14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba16:	e054      	b.n	800bac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba1e:	d050      	beq.n	800bac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba20:	f7fc f968 	bl	8007cf4 <HAL_GetTick>
 800ba24:	4602      	mov	r2, r0
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d902      	bls.n	800ba36 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d13d      	bne.n	800bab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba4e:	d111      	bne.n	800ba74 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba58:	d004      	beq.n	800ba64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba62:	d107      	bne.n	800ba74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba7c:	d10f      	bne.n	800ba9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e017      	b.n	800bae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	3b01      	subs	r3, #1
 800bac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689a      	ldr	r2, [r3, #8]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	4013      	ands	r3, r2
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	429a      	cmp	r2, r3
 800bad0:	bf0c      	ite	eq
 800bad2:	2301      	moveq	r3, #1
 800bad4:	2300      	movne	r3, #0
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	461a      	mov	r2, r3
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	429a      	cmp	r2, r3
 800bade:	d19b      	bne.n	800ba18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20000030 	.word	0x20000030

0800baf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bafc:	4b1b      	ldr	r3, [pc, #108]	; (800bb6c <SPI_EndRxTxTransaction+0x7c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a1b      	ldr	r2, [pc, #108]	; (800bb70 <SPI_EndRxTxTransaction+0x80>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	0d5b      	lsrs	r3, r3, #21
 800bb08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb0c:	fb02 f303 	mul.w	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb1a:	d112      	bne.n	800bb42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	2180      	movs	r1, #128	; 0x80
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff ff5a 	bl	800b9e0 <SPI_WaitFlagStateUntilTimeout>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d016      	beq.n	800bb60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	f043 0220 	orr.w	r2, r3, #32
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e00f      	b.n	800bb62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00a      	beq.n	800bb5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb58:	2b80      	cmp	r3, #128	; 0x80
 800bb5a:	d0f2      	beq.n	800bb42 <SPI_EndRxTxTransaction+0x52>
 800bb5c:	e000      	b.n	800bb60 <SPI_EndRxTxTransaction+0x70>
        break;
 800bb5e:	bf00      	nop
  }

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000030 	.word	0x20000030
 800bb70:	165e9f81 	.word	0x165e9f81

0800bb74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	e041      	b.n	800bc0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7f9 fbfc 	bl	8005398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f000 faa0 	bl	800c0f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d001      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e04e      	b.n	800bcca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f042 0201 	orr.w	r2, r2, #1
 800bc42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a23      	ldr	r2, [pc, #140]	; (800bcd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d022      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc56:	d01d      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a1f      	ldr	r2, [pc, #124]	; (800bcdc <HAL_TIM_Base_Start_IT+0xc8>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d018      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a1e      	ldr	r2, [pc, #120]	; (800bce0 <HAL_TIM_Base_Start_IT+0xcc>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d013      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a1c      	ldr	r2, [pc, #112]	; (800bce4 <HAL_TIM_Base_Start_IT+0xd0>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d00e      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a1b      	ldr	r2, [pc, #108]	; (800bce8 <HAL_TIM_Base_Start_IT+0xd4>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d009      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a19      	ldr	r2, [pc, #100]	; (800bcec <HAL_TIM_Base_Start_IT+0xd8>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0x80>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a18      	ldr	r2, [pc, #96]	; (800bcf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d111      	bne.n	800bcb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b06      	cmp	r3, #6
 800bca4:	d010      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f042 0201 	orr.w	r2, r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcb6:	e007      	b.n	800bcc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f042 0201 	orr.w	r2, r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3714      	adds	r7, #20
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	40010000 	.word	0x40010000
 800bcdc:	40000400 	.word	0x40000400
 800bce0:	40000800 	.word	0x40000800
 800bce4:	40000c00 	.word	0x40000c00
 800bce8:	40010400 	.word	0x40010400
 800bcec:	40014000 	.word	0x40014000
 800bcf0:	40001800 	.word	0x40001800

0800bcf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d122      	bne.n	800bd50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f003 0302 	and.w	r3, r3, #2
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d11b      	bne.n	800bd50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f06f 0202 	mvn.w	r2, #2
 800bd20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f9bf 	bl	800c0ba <HAL_TIM_IC_CaptureCallback>
 800bd3c:	e005      	b.n	800bd4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f9b1 	bl	800c0a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f9c2 	bl	800c0ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d122      	bne.n	800bda4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b04      	cmp	r3, #4
 800bd6a:	d11b      	bne.n	800bda4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f06f 0204 	mvn.w	r2, #4
 800bd74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2202      	movs	r2, #2
 800bd7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f995 	bl	800c0ba <HAL_TIM_IC_CaptureCallback>
 800bd90:	e005      	b.n	800bd9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f987 	bl	800c0a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f998 	bl	800c0ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	2b08      	cmp	r3, #8
 800bdb0:	d122      	bne.n	800bdf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f003 0308 	and.w	r3, r3, #8
 800bdbc:	2b08      	cmp	r3, #8
 800bdbe:	d11b      	bne.n	800bdf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f06f 0208 	mvn.w	r2, #8
 800bdc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2204      	movs	r2, #4
 800bdce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69db      	ldr	r3, [r3, #28]
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f96b 	bl	800c0ba <HAL_TIM_IC_CaptureCallback>
 800bde4:	e005      	b.n	800bdf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f95d 	bl	800c0a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f96e 	bl	800c0ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	f003 0310 	and.w	r3, r3, #16
 800be02:	2b10      	cmp	r3, #16
 800be04:	d122      	bne.n	800be4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	f003 0310 	and.w	r3, r3, #16
 800be10:	2b10      	cmp	r3, #16
 800be12:	d11b      	bne.n	800be4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f06f 0210 	mvn.w	r2, #16
 800be1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2208      	movs	r2, #8
 800be22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f941 	bl	800c0ba <HAL_TIM_IC_CaptureCallback>
 800be38:	e005      	b.n	800be46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f933 	bl	800c0a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 f944 	bl	800c0ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	2b01      	cmp	r3, #1
 800be58:	d10e      	bne.n	800be78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b01      	cmp	r3, #1
 800be66:	d107      	bne.n	800be78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f06f 0201 	mvn.w	r2, #1
 800be70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f90d 	bl	800c092 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be82:	2b80      	cmp	r3, #128	; 0x80
 800be84:	d10e      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be90:	2b80      	cmp	r3, #128	; 0x80
 800be92:	d107      	bne.n	800bea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 faea 	bl	800c478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beae:	2b40      	cmp	r3, #64	; 0x40
 800beb0:	d10e      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebc:	2b40      	cmp	r3, #64	; 0x40
 800bebe:	d107      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f909 	bl	800c0e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f003 0320 	and.w	r3, r3, #32
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d10e      	bne.n	800befc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b20      	cmp	r3, #32
 800beea:	d107      	bne.n	800befc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0220 	mvn.w	r2, #32
 800bef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fab4 	bl	800c464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <HAL_TIM_ConfigClockSource+0x1c>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e0b4      	b.n	800c08a <HAL_TIM_ConfigClockSource+0x186>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf58:	d03e      	beq.n	800bfd8 <HAL_TIM_ConfigClockSource+0xd4>
 800bf5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf5e:	f200 8087 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf66:	f000 8086 	beq.w	800c076 <HAL_TIM_ConfigClockSource+0x172>
 800bf6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf6e:	d87f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf70:	2b70      	cmp	r3, #112	; 0x70
 800bf72:	d01a      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0xa6>
 800bf74:	2b70      	cmp	r3, #112	; 0x70
 800bf76:	d87b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf78:	2b60      	cmp	r3, #96	; 0x60
 800bf7a:	d050      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x11a>
 800bf7c:	2b60      	cmp	r3, #96	; 0x60
 800bf7e:	d877      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf80:	2b50      	cmp	r3, #80	; 0x50
 800bf82:	d03c      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0xfa>
 800bf84:	2b50      	cmp	r3, #80	; 0x50
 800bf86:	d873      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d058      	beq.n	800c03e <HAL_TIM_ConfigClockSource+0x13a>
 800bf8c:	2b40      	cmp	r3, #64	; 0x40
 800bf8e:	d86f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf90:	2b30      	cmp	r3, #48	; 0x30
 800bf92:	d064      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bf94:	2b30      	cmp	r3, #48	; 0x30
 800bf96:	d86b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d060      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d867      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d05c      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d05a      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x15a>
 800bfa8:	e062      	b.n	800c070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	6899      	ldr	r1, [r3, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f000 f9b7 	bl	800c32c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	609a      	str	r2, [r3, #8]
      break;
 800bfd6:	e04f      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	6899      	ldr	r1, [r3, #8]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f000 f9a0 	bl	800c32c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bffa:	609a      	str	r2, [r3, #8]
      break;
 800bffc:	e03c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f000 f914 	bl	800c238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2150      	movs	r1, #80	; 0x50
 800c016:	4618      	mov	r0, r3
 800c018:	f000 f96d 	bl	800c2f6 <TIM_ITRx_SetConfig>
      break;
 800c01c:	e02c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	6859      	ldr	r1, [r3, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f000 f933 	bl	800c296 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2160      	movs	r1, #96	; 0x60
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f95d 	bl	800c2f6 <TIM_ITRx_SetConfig>
      break;
 800c03c:	e01c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6859      	ldr	r1, [r3, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f000 f8f4 	bl	800c238 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2140      	movs	r1, #64	; 0x40
 800c056:	4618      	mov	r0, r3
 800c058:	f000 f94d 	bl	800c2f6 <TIM_ITRx_SetConfig>
      break;
 800c05c:	e00c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f000 f944 	bl	800c2f6 <TIM_ITRx_SetConfig>
      break;
 800c06e:	e003      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	73fb      	strb	r3, [r7, #15]
      break;
 800c074:	e000      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c092:	b480      	push	{r7}
 800c094:	b083      	sub	sp, #12
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c09a:	bf00      	nop
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b083      	sub	sp, #12
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0d6:	bf00      	nop
 800c0d8:	370c      	adds	r7, #12
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr

0800c0e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b083      	sub	sp, #12
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0ea:	bf00      	nop
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a40      	ldr	r2, [pc, #256]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d013      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c116:	d00f      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a3d      	ldr	r2, [pc, #244]	; (800c210 <TIM_Base_SetConfig+0x118>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d00b      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3c      	ldr	r2, [pc, #240]	; (800c214 <TIM_Base_SetConfig+0x11c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d007      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a3b      	ldr	r2, [pc, #236]	; (800c218 <TIM_Base_SetConfig+0x120>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d003      	beq.n	800c138 <TIM_Base_SetConfig+0x40>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3a      	ldr	r2, [pc, #232]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d108      	bne.n	800c14a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c13e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a2f      	ldr	r2, [pc, #188]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d02b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c158:	d027      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a2c      	ldr	r2, [pc, #176]	; (800c210 <TIM_Base_SetConfig+0x118>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d023      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2b      	ldr	r2, [pc, #172]	; (800c214 <TIM_Base_SetConfig+0x11c>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d01f      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a2a      	ldr	r2, [pc, #168]	; (800c218 <TIM_Base_SetConfig+0x120>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d01b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a29      	ldr	r2, [pc, #164]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d017      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a28      	ldr	r2, [pc, #160]	; (800c220 <TIM_Base_SetConfig+0x128>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d013      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a27      	ldr	r2, [pc, #156]	; (800c224 <TIM_Base_SetConfig+0x12c>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d00f      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a26      	ldr	r2, [pc, #152]	; (800c228 <TIM_Base_SetConfig+0x130>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00b      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a25      	ldr	r2, [pc, #148]	; (800c22c <TIM_Base_SetConfig+0x134>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d007      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a24      	ldr	r2, [pc, #144]	; (800c230 <TIM_Base_SetConfig+0x138>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d003      	beq.n	800c1aa <TIM_Base_SetConfig+0xb2>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a23      	ldr	r2, [pc, #140]	; (800c234 <TIM_Base_SetConfig+0x13c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d108      	bne.n	800c1bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a0a      	ldr	r2, [pc, #40]	; (800c20c <TIM_Base_SetConfig+0x114>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d003      	beq.n	800c1f0 <TIM_Base_SetConfig+0xf8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <TIM_Base_SetConfig+0x124>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d103      	bne.n	800c1f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	691a      	ldr	r2, [r3, #16]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	615a      	str	r2, [r3, #20]
}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	40010000 	.word	0x40010000
 800c210:	40000400 	.word	0x40000400
 800c214:	40000800 	.word	0x40000800
 800c218:	40000c00 	.word	0x40000c00
 800c21c:	40010400 	.word	0x40010400
 800c220:	40014000 	.word	0x40014000
 800c224:	40014400 	.word	0x40014400
 800c228:	40014800 	.word	0x40014800
 800c22c:	40001800 	.word	0x40001800
 800c230:	40001c00 	.word	0x40001c00
 800c234:	40002000 	.word	0x40002000

0800c238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	f023 0201 	bic.w	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	f023 030a 	bic.w	r3, r3, #10
 800c274:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	621a      	str	r2, [r3, #32]
}
 800c28a:	bf00      	nop
 800c28c:	371c      	adds	r7, #28
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr

0800c296 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c296:	b480      	push	{r7}
 800c298:	b087      	sub	sp, #28
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	60b9      	str	r1, [r7, #8]
 800c2a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	f023 0210 	bic.w	r2, r3, #16
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	031b      	lsls	r3, r3, #12
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c2d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	621a      	str	r2, [r3, #32]
}
 800c2ea:	bf00      	nop
 800c2ec:	371c      	adds	r7, #28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b085      	sub	sp, #20
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c30c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	4313      	orrs	r3, r2
 800c314:	f043 0307 	orr.w	r3, r3, #7
 800c318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	609a      	str	r2, [r3, #8]
}
 800c320:	bf00      	nop
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	021a      	lsls	r2, r3, #8
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	431a      	orrs	r2, r3
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	4313      	orrs	r3, r2
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	4313      	orrs	r3, r2
 800c358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	609a      	str	r2, [r3, #8]
}
 800c360:	bf00      	nop
 800c362:	371c      	adds	r7, #28
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d101      	bne.n	800c384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c380:	2302      	movs	r3, #2
 800c382:	e05a      	b.n	800c43a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a21      	ldr	r2, [pc, #132]	; (800c448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d022      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3d0:	d01d      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a1d      	ldr	r2, [pc, #116]	; (800c44c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d018      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a1b      	ldr	r2, [pc, #108]	; (800c450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d013      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a1a      	ldr	r2, [pc, #104]	; (800c454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d00e      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a18      	ldr	r2, [pc, #96]	; (800c458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d009      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a17      	ldr	r2, [pc, #92]	; (800c45c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d004      	beq.n	800c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a15      	ldr	r2, [pc, #84]	; (800c460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d10c      	bne.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop
 800c448:	40010000 	.word	0x40010000
 800c44c:	40000400 	.word	0x40000400
 800c450:	40000800 	.word	0x40000800
 800c454:	40000c00 	.word	0x40000c00
 800c458:	40010400 	.word	0x40010400
 800c45c:	40014000 	.word	0x40014000
 800c460:	40001800 	.word	0x40001800

0800c464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e03f      	b.n	800c51e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7f8 ff96 	bl	80053e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2224      	movs	r2, #36	; 0x24
 800c4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68da      	ldr	r2, [r3, #12]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fddf 	bl	800d094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	691a      	ldr	r2, [r3, #16]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695a      	ldr	r2, [r3, #20]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2220      	movs	r2, #32
 800c510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2220      	movs	r2, #32
 800c518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b08a      	sub	sp, #40	; 0x28
 800c52a:	af02      	add	r7, sp, #8
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	603b      	str	r3, [r7, #0]
 800c532:	4613      	mov	r3, r2
 800c534:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b20      	cmp	r3, #32
 800c544:	d17c      	bne.n	800c640 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <HAL_UART_Transmit+0x2c>
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e075      	b.n	800c642 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d101      	bne.n	800c564 <HAL_UART_Transmit+0x3e>
 800c560:	2302      	movs	r3, #2
 800c562:	e06e      	b.n	800c642 <HAL_UART_Transmit+0x11c>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2221      	movs	r2, #33	; 0x21
 800c576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c57a:	f7fb fbbb 	bl	8007cf4 <HAL_GetTick>
 800c57e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	88fa      	ldrh	r2, [r7, #6]
 800c584:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c594:	d108      	bne.n	800c5a8 <HAL_UART_Transmit+0x82>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d104      	bne.n	800c5a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	61bb      	str	r3, [r7, #24]
 800c5a6:	e003      	b.n	800c5b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c5b8:	e02a      	b.n	800c610 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2180      	movs	r1, #128	; 0x80
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 fb1f 	bl	800cc08 <UART_WaitOnFlagUntilTimeout>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d001      	beq.n	800c5d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e036      	b.n	800c642 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10b      	bne.n	800c5f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	3302      	adds	r3, #2
 800c5ee:	61bb      	str	r3, [r7, #24]
 800c5f0:	e007      	b.n	800c602 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	3301      	adds	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c606:	b29b      	uxth	r3, r3
 800c608:	3b01      	subs	r3, #1
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c614:	b29b      	uxth	r3, r3
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1cf      	bne.n	800c5ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	2200      	movs	r2, #0
 800c622:	2140      	movs	r1, #64	; 0x40
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f000 faef 	bl	800cc08 <UART_WaitOnFlagUntilTimeout>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e006      	b.n	800c642 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e000      	b.n	800c642 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c640:	2302      	movs	r3, #2
  }
}
 800c642:	4618      	mov	r0, r3
 800c644:	3720      	adds	r7, #32
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	4613      	mov	r3, r2
 800c656:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b20      	cmp	r3, #32
 800c662:	d11d      	bne.n	800c6a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <HAL_UART_Receive_IT+0x26>
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e016      	b.n	800c6a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Receive_IT+0x38>
 800c67e:	2302      	movs	r3, #2
 800c680:	e00f      	b.n	800c6a2 <HAL_UART_Receive_IT+0x58>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c690:	88fb      	ldrh	r3, [r7, #6]
 800c692:	461a      	mov	r2, r3
 800c694:	68b9      	ldr	r1, [r7, #8]
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 fb24 	bl	800cce4 <UART_Start_Receive_IT>
 800c69c:	4603      	mov	r3, r0
 800c69e:	e000      	b.n	800c6a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c6a0:	2302      	movs	r3, #2
  }
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b0ba      	sub	sp, #232	; 0xe8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e2:	f003 030f 	and.w	r3, r3, #15
 800c6e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c6ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10f      	bne.n	800c712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f6:	f003 0320 	and.w	r3, r3, #32
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d009      	beq.n	800c712 <HAL_UART_IRQHandler+0x66>
 800c6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c702:	f003 0320 	and.w	r3, r3, #32
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fc07 	bl	800cf1e <UART_Receive_IT>
      return;
 800c710:	e256      	b.n	800cbc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80de 	beq.w	800c8d8 <HAL_UART_IRQHandler+0x22c>
 800c71c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c72c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 80d1 	beq.w	800c8d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00b      	beq.n	800c75a <HAL_UART_IRQHandler+0xae>
 800c742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c752:	f043 0201 	orr.w	r2, r3, #1
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c75e:	f003 0304 	and.w	r3, r3, #4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <HAL_UART_IRQHandler+0xd2>
 800c766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d005      	beq.n	800c77e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c776:	f043 0202 	orr.w	r2, r3, #2
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c782:	f003 0302 	and.w	r3, r3, #2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00b      	beq.n	800c7a2 <HAL_UART_IRQHandler+0xf6>
 800c78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d005      	beq.n	800c7a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79a:	f043 0204 	orr.w	r2, r3, #4
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c7a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a6:	f003 0308 	and.w	r3, r3, #8
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d011      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x126>
 800c7ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b2:	f003 0320 	and.w	r3, r3, #32
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d105      	bne.n	800c7c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c7ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7be:	f003 0301 	and.w	r3, r3, #1
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	f043 0208 	orr.w	r2, r3, #8
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 81ed 	beq.w	800cbb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e0:	f003 0320 	and.w	r3, r3, #32
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <HAL_UART_IRQHandler+0x14e>
 800c7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7ec:	f003 0320 	and.w	r3, r3, #32
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fb92 	bl	800cf1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	695b      	ldr	r3, [r3, #20]
 800c800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c804:	2b40      	cmp	r3, #64	; 0x40
 800c806:	bf0c      	ite	eq
 800c808:	2301      	moveq	r3, #1
 800c80a:	2300      	movne	r3, #0
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c816:	f003 0308 	and.w	r3, r3, #8
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <HAL_UART_IRQHandler+0x17a>
 800c81e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c822:	2b00      	cmp	r3, #0
 800c824:	d04f      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fa9a 	bl	800cd60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c836:	2b40      	cmp	r3, #64	; 0x40
 800c838:	d141      	bne.n	800c8be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3314      	adds	r3, #20
 800c840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c848:	e853 3f00 	ldrex	r3, [r3]
 800c84c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3314      	adds	r3, #20
 800c862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c86a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c876:	e841 2300 	strex	r3, r2, [r1]
 800c87a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c87e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1d9      	bne.n	800c83a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d013      	beq.n	800c8b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	4a7d      	ldr	r2, [pc, #500]	; (800ca88 <HAL_UART_IRQHandler+0x3dc>)
 800c894:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fc f8e6 	bl	8008a6c <HAL_DMA_Abort_IT>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d016      	beq.n	800c8d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8b4:	e00e      	b.n	800c8d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f990 	bl	800cbdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8bc:	e00a      	b.n	800c8d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f98c 	bl	800cbdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8c4:	e006      	b.n	800c8d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 f988 	bl	800cbdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c8d2:	e170      	b.n	800cbb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d4:	bf00      	nop
    return;
 800c8d6:	e16e      	b.n	800cbb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	f040 814a 	bne.w	800cb76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e6:	f003 0310 	and.w	r3, r3, #16
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 8143 	beq.w	800cb76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8f4:	f003 0310 	and.w	r3, r3, #16
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f000 813c 	beq.w	800cb76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8fe:	2300      	movs	r3, #0
 800c900:	60bb      	str	r3, [r7, #8]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	60bb      	str	r3, [r7, #8]
 800c912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c91e:	2b40      	cmp	r3, #64	; 0x40
 800c920:	f040 80b4 	bne.w	800ca8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 8140 	beq.w	800cbba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c93e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c942:	429a      	cmp	r2, r3
 800c944:	f080 8139 	bcs.w	800cbba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c94e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c954:	69db      	ldr	r3, [r3, #28]
 800c956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c95a:	f000 8088 	beq.w	800ca6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	330c      	adds	r3, #12
 800c964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c96c:	e853 3f00 	ldrex	r3, [r3]
 800c970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c97c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	330c      	adds	r3, #12
 800c986:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c98a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c98e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c996:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c99a:	e841 2300 	strex	r3, r2, [r1]
 800c99e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1d9      	bne.n	800c95e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	3314      	adds	r3, #20
 800c9b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b4:	e853 3f00 	ldrex	r3, [r3]
 800c9b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9bc:	f023 0301 	bic.w	r3, r3, #1
 800c9c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	3314      	adds	r3, #20
 800c9ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9da:	e841 2300 	strex	r3, r2, [r1]
 800c9de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e1      	bne.n	800c9aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3314      	adds	r3, #20
 800c9ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3314      	adds	r3, #20
 800ca06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ca0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e3      	bne.n	800c9e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	330c      	adds	r3, #12
 800ca32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca36:	e853 3f00 	ldrex	r3, [r3]
 800ca3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3e:	f023 0310 	bic.w	r3, r3, #16
 800ca42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	330c      	adds	r3, #12
 800ca4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ca50:	65ba      	str	r2, [r7, #88]	; 0x58
 800ca52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca58:	e841 2300 	strex	r3, r2, [r1]
 800ca5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1e3      	bne.n	800ca2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fb ff8f 	bl	800898c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f8b6 	bl	800cbf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca84:	e099      	b.n	800cbba <HAL_UART_IRQHandler+0x50e>
 800ca86:	bf00      	nop
 800ca88:	0800ce27 	.word	0x0800ce27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 808b 	beq.w	800cbbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800caa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 8086 	beq.w	800cbbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	330c      	adds	r3, #12
 800cab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	e853 3f00 	ldrex	r3, [r3]
 800cac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	330c      	adds	r3, #12
 800cad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cad6:	647a      	str	r2, [r7, #68]	; 0x44
 800cad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cadc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cade:	e841 2300 	strex	r3, r2, [r1]
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3314      	adds	r3, #20
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	623b      	str	r3, [r7, #32]
   return(result);
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	f023 0301 	bic.w	r3, r3, #1
 800cb00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3314      	adds	r3, #20
 800cb0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cb0e:	633a      	str	r2, [r7, #48]	; 0x30
 800cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb16:	e841 2300 	strex	r3, r2, [r1]
 800cb1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1e3      	bne.n	800caea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	330c      	adds	r3, #12
 800cb36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	e853 3f00 	ldrex	r3, [r3]
 800cb3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0310 	bic.w	r3, r3, #16
 800cb46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	330c      	adds	r3, #12
 800cb50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cb54:	61fa      	str	r2, [r7, #28]
 800cb56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	69b9      	ldr	r1, [r7, #24]
 800cb5a:	69fa      	ldr	r2, [r7, #28]
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	617b      	str	r3, [r7, #20]
   return(result);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e3      	bne.n	800cb30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f83e 	bl	800cbf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb74:	e023      	b.n	800cbbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <HAL_UART_IRQHandler+0x4ea>
 800cb82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d003      	beq.n	800cb96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f95d 	bl	800ce4e <UART_Transmit_IT>
    return;
 800cb94:	e014      	b.n	800cbc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00e      	beq.n	800cbc0 <HAL_UART_IRQHandler+0x514>
 800cba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d008      	beq.n	800cbc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f99d 	bl	800ceee <UART_EndTransmit_IT>
    return;
 800cbb4:	e004      	b.n	800cbc0 <HAL_UART_IRQHandler+0x514>
    return;
 800cbb6:	bf00      	nop
 800cbb8:	e002      	b.n	800cbc0 <HAL_UART_IRQHandler+0x514>
      return;
 800cbba:	bf00      	nop
 800cbbc:	e000      	b.n	800cbc0 <HAL_UART_IRQHandler+0x514>
      return;
 800cbbe:	bf00      	nop
  }
}
 800cbc0:	37e8      	adds	r7, #232	; 0xe8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop

0800cbc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbfc:	bf00      	nop
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b090      	sub	sp, #64	; 0x40
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	603b      	str	r3, [r7, #0]
 800cc14:	4613      	mov	r3, r2
 800cc16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc18:	e050      	b.n	800ccbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc20:	d04c      	beq.n	800ccbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d007      	beq.n	800cc38 <UART_WaitOnFlagUntilTimeout+0x30>
 800cc28:	f7fb f864 	bl	8007cf4 <HAL_GetTick>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d241      	bcs.n	800ccbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	330c      	adds	r3, #12
 800cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	e853 3f00 	ldrex	r3, [r3]
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	330c      	adds	r3, #12
 800cc56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc58:	637a      	str	r2, [r7, #52]	; 0x34
 800cc5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e5      	bne.n	800cc38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3314      	adds	r3, #20
 800cc72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f023 0301 	bic.w	r3, r3, #1
 800cc82:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3314      	adds	r3, #20
 800cc8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc8c:	623a      	str	r2, [r7, #32]
 800cc8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	69f9      	ldr	r1, [r7, #28]
 800cc92:	6a3a      	ldr	r2, [r7, #32]
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e5      	bne.n	800cc6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e00f      	b.n	800ccdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	bf0c      	ite	eq
 800cccc:	2301      	moveq	r3, #1
 800ccce:	2300      	movne	r3, #0
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d09f      	beq.n	800cc1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3740      	adds	r7, #64	; 0x40
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	88fa      	ldrh	r2, [r7, #6]
 800ccfc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	88fa      	ldrh	r2, [r7, #6]
 800cd02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2222      	movs	r2, #34	; 0x22
 800cd0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2200      	movs	r2, #0
 800cd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68da      	ldr	r2, [r3, #12]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	695a      	ldr	r2, [r3, #20]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f042 0201 	orr.w	r2, r2, #1
 800cd40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0220 	orr.w	r2, r2, #32
 800cd50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3714      	adds	r7, #20
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b095      	sub	sp, #84	; 0x54
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd72:	e853 3f00 	ldrex	r3, [r3]
 800cd76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	330c      	adds	r3, #12
 800cd86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd88:	643a      	str	r2, [r7, #64]	; 0x40
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd90:	e841 2300 	strex	r3, r2, [r1]
 800cd94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1e5      	bne.n	800cd68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3314      	adds	r3, #20
 800cda2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	f023 0301 	bic.w	r3, r3, #1
 800cdb2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3314      	adds	r3, #20
 800cdba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e5      	bne.n	800cd9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d119      	bne.n	800ce0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	330c      	adds	r3, #12
 800cdde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	f023 0310 	bic.w	r3, r3, #16
 800cdee:	647b      	str	r3, [r7, #68]	; 0x44
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	330c      	adds	r3, #12
 800cdf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdf8:	61ba      	str	r2, [r7, #24]
 800cdfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfc:	6979      	ldr	r1, [r7, #20]
 800cdfe:	69ba      	ldr	r2, [r7, #24]
 800ce00:	e841 2300 	strex	r3, r2, [r1]
 800ce04:	613b      	str	r3, [r7, #16]
   return(result);
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e5      	bne.n	800cdd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2220      	movs	r2, #32
 800ce10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ce1a:	bf00      	nop
 800ce1c:	3754      	adds	r7, #84	; 0x54
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f7ff fecb 	bl	800cbdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce46:	bf00      	nop
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b085      	sub	sp, #20
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b21      	cmp	r3, #33	; 0x21
 800ce60:	d13e      	bne.n	800cee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce6a:	d114      	bne.n	800ce96 <UART_Transmit_IT+0x48>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d110      	bne.n	800ce96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	1c9a      	adds	r2, r3, #2
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	621a      	str	r2, [r3, #32]
 800ce94:	e008      	b.n	800cea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a1b      	ldr	r3, [r3, #32]
 800ce9a:	1c59      	adds	r1, r3, #1
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6211      	str	r1, [r2, #32]
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10f      	bne.n	800cedc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ceca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68da      	ldr	r2, [r3, #12]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	e000      	b.n	800cee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cee0:	2302      	movs	r3, #2
  }
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2220      	movs	r2, #32
 800cf0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fe5a 	bl	800cbc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b08c      	sub	sp, #48	; 0x30
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b22      	cmp	r3, #34	; 0x22
 800cf30:	f040 80ab 	bne.w	800d08a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf3c:	d117      	bne.n	800cf6e <UART_Receive_IT+0x50>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d113      	bne.n	800cf6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf66:	1c9a      	adds	r2, r3, #2
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	629a      	str	r2, [r3, #40]	; 0x28
 800cf6c:	e026      	b.n	800cfbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf80:	d007      	beq.n	800cf92 <UART_Receive_IT+0x74>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <UART_Receive_IT+0x82>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	e008      	b.n	800cfb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d15a      	bne.n	800d086 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f022 0220 	bic.w	r2, r2, #32
 800cfde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cfee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695a      	ldr	r2, [r3, #20]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0201 	bic.w	r2, r2, #1
 800cffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2220      	movs	r2, #32
 800d004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d135      	bne.n	800d07c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	330c      	adds	r3, #12
 800d01c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	e853 3f00 	ldrex	r3, [r3]
 800d024:	613b      	str	r3, [r7, #16]
   return(result);
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f023 0310 	bic.w	r3, r3, #16
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	330c      	adds	r3, #12
 800d034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d036:	623a      	str	r2, [r7, #32]
 800d038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	69f9      	ldr	r1, [r7, #28]
 800d03c:	6a3a      	ldr	r2, [r7, #32]
 800d03e:	e841 2300 	strex	r3, r2, [r1]
 800d042:	61bb      	str	r3, [r7, #24]
   return(result);
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e5      	bne.n	800d016 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 0310 	and.w	r3, r3, #16
 800d054:	2b10      	cmp	r3, #16
 800d056:	d10a      	bne.n	800d06e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	60fb      	str	r3, [r7, #12]
 800d06c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff fdbb 	bl	800cbf0 <HAL_UARTEx_RxEventCallback>
 800d07a:	e002      	b.n	800d082 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f7f7 ff09 	bl	8004e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	e002      	b.n	800d08c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	e000      	b.n	800d08c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d08a:	2302      	movs	r3, #2
  }
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3730      	adds	r7, #48	; 0x30
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d098:	b0c0      	sub	sp, #256	; 0x100
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b0:	68d9      	ldr	r1, [r3, #12]
 800d0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	ea40 0301 	orr.w	r3, r0, r1
 800d0bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d0ec:	f021 010c 	bic.w	r1, r1, #12
 800d0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d0fa:	430b      	orrs	r3, r1
 800d0fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d10e:	6999      	ldr	r1, [r3, #24]
 800d110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	ea40 0301 	orr.w	r3, r0, r1
 800d11a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4b8f      	ldr	r3, [pc, #572]	; (800d360 <UART_SetConfig+0x2cc>)
 800d124:	429a      	cmp	r2, r3
 800d126:	d005      	beq.n	800d134 <UART_SetConfig+0xa0>
 800d128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	4b8d      	ldr	r3, [pc, #564]	; (800d364 <UART_SetConfig+0x2d0>)
 800d130:	429a      	cmp	r2, r3
 800d132:	d104      	bne.n	800d13e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d134:	f7fd fb62 	bl	800a7fc <HAL_RCC_GetPCLK2Freq>
 800d138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d13c:	e003      	b.n	800d146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d13e:	f7fd fb49 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 800d142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d150:	f040 810c 	bne.w	800d36c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d158:	2200      	movs	r2, #0
 800d15a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d15e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d166:	4622      	mov	r2, r4
 800d168:	462b      	mov	r3, r5
 800d16a:	1891      	adds	r1, r2, r2
 800d16c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d16e:	415b      	adcs	r3, r3
 800d170:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d176:	4621      	mov	r1, r4
 800d178:	eb12 0801 	adds.w	r8, r2, r1
 800d17c:	4629      	mov	r1, r5
 800d17e:	eb43 0901 	adc.w	r9, r3, r1
 800d182:	f04f 0200 	mov.w	r2, #0
 800d186:	f04f 0300 	mov.w	r3, #0
 800d18a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d18e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d196:	4690      	mov	r8, r2
 800d198:	4699      	mov	r9, r3
 800d19a:	4623      	mov	r3, r4
 800d19c:	eb18 0303 	adds.w	r3, r8, r3
 800d1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1a4:	462b      	mov	r3, r5
 800d1a6:	eb49 0303 	adc.w	r3, r9, r3
 800d1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d1be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	18db      	adds	r3, r3, r3
 800d1c6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	eb42 0303 	adc.w	r3, r2, r3
 800d1ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d1d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d1d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d1d8:	f7f3 fda6 	bl	8000d28 <__aeabi_uldivmod>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4b61      	ldr	r3, [pc, #388]	; (800d368 <UART_SetConfig+0x2d4>)
 800d1e2:	fba3 2302 	umull	r2, r3, r3, r2
 800d1e6:	095b      	lsrs	r3, r3, #5
 800d1e8:	011c      	lsls	r4, r3, #4
 800d1ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d1f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d1f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d1fc:	4642      	mov	r2, r8
 800d1fe:	464b      	mov	r3, r9
 800d200:	1891      	adds	r1, r2, r2
 800d202:	64b9      	str	r1, [r7, #72]	; 0x48
 800d204:	415b      	adcs	r3, r3
 800d206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d20c:	4641      	mov	r1, r8
 800d20e:	eb12 0a01 	adds.w	sl, r2, r1
 800d212:	4649      	mov	r1, r9
 800d214:	eb43 0b01 	adc.w	fp, r3, r1
 800d218:	f04f 0200 	mov.w	r2, #0
 800d21c:	f04f 0300 	mov.w	r3, #0
 800d220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d22c:	4692      	mov	sl, r2
 800d22e:	469b      	mov	fp, r3
 800d230:	4643      	mov	r3, r8
 800d232:	eb1a 0303 	adds.w	r3, sl, r3
 800d236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d23a:	464b      	mov	r3, r9
 800d23c:	eb4b 0303 	adc.w	r3, fp, r3
 800d240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d258:	460b      	mov	r3, r1
 800d25a:	18db      	adds	r3, r3, r3
 800d25c:	643b      	str	r3, [r7, #64]	; 0x40
 800d25e:	4613      	mov	r3, r2
 800d260:	eb42 0303 	adc.w	r3, r2, r3
 800d264:	647b      	str	r3, [r7, #68]	; 0x44
 800d266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d26a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d26e:	f7f3 fd5b 	bl	8000d28 <__aeabi_uldivmod>
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	4611      	mov	r1, r2
 800d278:	4b3b      	ldr	r3, [pc, #236]	; (800d368 <UART_SetConfig+0x2d4>)
 800d27a:	fba3 2301 	umull	r2, r3, r3, r1
 800d27e:	095b      	lsrs	r3, r3, #5
 800d280:	2264      	movs	r2, #100	; 0x64
 800d282:	fb02 f303 	mul.w	r3, r2, r3
 800d286:	1acb      	subs	r3, r1, r3
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d28e:	4b36      	ldr	r3, [pc, #216]	; (800d368 <UART_SetConfig+0x2d4>)
 800d290:	fba3 2302 	umull	r2, r3, r3, r2
 800d294:	095b      	lsrs	r3, r3, #5
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d29c:	441c      	add	r4, r3
 800d29e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d2ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d2b0:	4642      	mov	r2, r8
 800d2b2:	464b      	mov	r3, r9
 800d2b4:	1891      	adds	r1, r2, r2
 800d2b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d2b8:	415b      	adcs	r3, r3
 800d2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d2c0:	4641      	mov	r1, r8
 800d2c2:	1851      	adds	r1, r2, r1
 800d2c4:	6339      	str	r1, [r7, #48]	; 0x30
 800d2c6:	4649      	mov	r1, r9
 800d2c8:	414b      	adcs	r3, r1
 800d2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	f04f 0300 	mov.w	r3, #0
 800d2d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d2d8:	4659      	mov	r1, fp
 800d2da:	00cb      	lsls	r3, r1, #3
 800d2dc:	4651      	mov	r1, sl
 800d2de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2e2:	4651      	mov	r1, sl
 800d2e4:	00ca      	lsls	r2, r1, #3
 800d2e6:	4610      	mov	r0, r2
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	4642      	mov	r2, r8
 800d2ee:	189b      	adds	r3, r3, r2
 800d2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2f4:	464b      	mov	r3, r9
 800d2f6:	460a      	mov	r2, r1
 800d2f8:	eb42 0303 	adc.w	r3, r2, r3
 800d2fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d30c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d314:	460b      	mov	r3, r1
 800d316:	18db      	adds	r3, r3, r3
 800d318:	62bb      	str	r3, [r7, #40]	; 0x28
 800d31a:	4613      	mov	r3, r2
 800d31c:	eb42 0303 	adc.w	r3, r2, r3
 800d320:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d32a:	f7f3 fcfd 	bl	8000d28 <__aeabi_uldivmod>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4b0d      	ldr	r3, [pc, #52]	; (800d368 <UART_SetConfig+0x2d4>)
 800d334:	fba3 1302 	umull	r1, r3, r3, r2
 800d338:	095b      	lsrs	r3, r3, #5
 800d33a:	2164      	movs	r1, #100	; 0x64
 800d33c:	fb01 f303 	mul.w	r3, r1, r3
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	3332      	adds	r3, #50	; 0x32
 800d346:	4a08      	ldr	r2, [pc, #32]	; (800d368 <UART_SetConfig+0x2d4>)
 800d348:	fba2 2303 	umull	r2, r3, r2, r3
 800d34c:	095b      	lsrs	r3, r3, #5
 800d34e:	f003 0207 	and.w	r2, r3, #7
 800d352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4422      	add	r2, r4
 800d35a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d35c:	e106      	b.n	800d56c <UART_SetConfig+0x4d8>
 800d35e:	bf00      	nop
 800d360:	40011000 	.word	0x40011000
 800d364:	40011400 	.word	0x40011400
 800d368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d36c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d370:	2200      	movs	r2, #0
 800d372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d37a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d37e:	4642      	mov	r2, r8
 800d380:	464b      	mov	r3, r9
 800d382:	1891      	adds	r1, r2, r2
 800d384:	6239      	str	r1, [r7, #32]
 800d386:	415b      	adcs	r3, r3
 800d388:	627b      	str	r3, [r7, #36]	; 0x24
 800d38a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d38e:	4641      	mov	r1, r8
 800d390:	1854      	adds	r4, r2, r1
 800d392:	4649      	mov	r1, r9
 800d394:	eb43 0501 	adc.w	r5, r3, r1
 800d398:	f04f 0200 	mov.w	r2, #0
 800d39c:	f04f 0300 	mov.w	r3, #0
 800d3a0:	00eb      	lsls	r3, r5, #3
 800d3a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3a6:	00e2      	lsls	r2, r4, #3
 800d3a8:	4614      	mov	r4, r2
 800d3aa:	461d      	mov	r5, r3
 800d3ac:	4643      	mov	r3, r8
 800d3ae:	18e3      	adds	r3, r4, r3
 800d3b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	eb45 0303 	adc.w	r3, r5, r3
 800d3ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d3ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	f04f 0300 	mov.w	r3, #0
 800d3d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d3da:	4629      	mov	r1, r5
 800d3dc:	008b      	lsls	r3, r1, #2
 800d3de:	4621      	mov	r1, r4
 800d3e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	008a      	lsls	r2, r1, #2
 800d3e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d3ec:	f7f3 fc9c 	bl	8000d28 <__aeabi_uldivmod>
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4b60      	ldr	r3, [pc, #384]	; (800d578 <UART_SetConfig+0x4e4>)
 800d3f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d3fa:	095b      	lsrs	r3, r3, #5
 800d3fc:	011c      	lsls	r4, r3, #4
 800d3fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d402:	2200      	movs	r2, #0
 800d404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d40c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d410:	4642      	mov	r2, r8
 800d412:	464b      	mov	r3, r9
 800d414:	1891      	adds	r1, r2, r2
 800d416:	61b9      	str	r1, [r7, #24]
 800d418:	415b      	adcs	r3, r3
 800d41a:	61fb      	str	r3, [r7, #28]
 800d41c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d420:	4641      	mov	r1, r8
 800d422:	1851      	adds	r1, r2, r1
 800d424:	6139      	str	r1, [r7, #16]
 800d426:	4649      	mov	r1, r9
 800d428:	414b      	adcs	r3, r1
 800d42a:	617b      	str	r3, [r7, #20]
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d438:	4659      	mov	r1, fp
 800d43a:	00cb      	lsls	r3, r1, #3
 800d43c:	4651      	mov	r1, sl
 800d43e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d442:	4651      	mov	r1, sl
 800d444:	00ca      	lsls	r2, r1, #3
 800d446:	4610      	mov	r0, r2
 800d448:	4619      	mov	r1, r3
 800d44a:	4603      	mov	r3, r0
 800d44c:	4642      	mov	r2, r8
 800d44e:	189b      	adds	r3, r3, r2
 800d450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d454:	464b      	mov	r3, r9
 800d456:	460a      	mov	r2, r1
 800d458:	eb42 0303 	adc.w	r3, r2, r3
 800d45c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	67bb      	str	r3, [r7, #120]	; 0x78
 800d46a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d46c:	f04f 0200 	mov.w	r2, #0
 800d470:	f04f 0300 	mov.w	r3, #0
 800d474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d478:	4649      	mov	r1, r9
 800d47a:	008b      	lsls	r3, r1, #2
 800d47c:	4641      	mov	r1, r8
 800d47e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d482:	4641      	mov	r1, r8
 800d484:	008a      	lsls	r2, r1, #2
 800d486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d48a:	f7f3 fc4d 	bl	8000d28 <__aeabi_uldivmod>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	4611      	mov	r1, r2
 800d494:	4b38      	ldr	r3, [pc, #224]	; (800d578 <UART_SetConfig+0x4e4>)
 800d496:	fba3 2301 	umull	r2, r3, r3, r1
 800d49a:	095b      	lsrs	r3, r3, #5
 800d49c:	2264      	movs	r2, #100	; 0x64
 800d49e:	fb02 f303 	mul.w	r3, r2, r3
 800d4a2:	1acb      	subs	r3, r1, r3
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	3332      	adds	r3, #50	; 0x32
 800d4a8:	4a33      	ldr	r2, [pc, #204]	; (800d578 <UART_SetConfig+0x4e4>)
 800d4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d4ae:	095b      	lsrs	r3, r3, #5
 800d4b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4b4:	441c      	add	r4, r3
 800d4b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	673b      	str	r3, [r7, #112]	; 0x70
 800d4be:	677a      	str	r2, [r7, #116]	; 0x74
 800d4c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d4c4:	4642      	mov	r2, r8
 800d4c6:	464b      	mov	r3, r9
 800d4c8:	1891      	adds	r1, r2, r2
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	415b      	adcs	r3, r3
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d4d4:	4641      	mov	r1, r8
 800d4d6:	1851      	adds	r1, r2, r1
 800d4d8:	6039      	str	r1, [r7, #0]
 800d4da:	4649      	mov	r1, r9
 800d4dc:	414b      	adcs	r3, r1
 800d4de:	607b      	str	r3, [r7, #4]
 800d4e0:	f04f 0200 	mov.w	r2, #0
 800d4e4:	f04f 0300 	mov.w	r3, #0
 800d4e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d4ec:	4659      	mov	r1, fp
 800d4ee:	00cb      	lsls	r3, r1, #3
 800d4f0:	4651      	mov	r1, sl
 800d4f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d4f6:	4651      	mov	r1, sl
 800d4f8:	00ca      	lsls	r2, r1, #3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4603      	mov	r3, r0
 800d500:	4642      	mov	r2, r8
 800d502:	189b      	adds	r3, r3, r2
 800d504:	66bb      	str	r3, [r7, #104]	; 0x68
 800d506:	464b      	mov	r3, r9
 800d508:	460a      	mov	r2, r1
 800d50a:	eb42 0303 	adc.w	r3, r2, r3
 800d50e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2200      	movs	r2, #0
 800d518:	663b      	str	r3, [r7, #96]	; 0x60
 800d51a:	667a      	str	r2, [r7, #100]	; 0x64
 800d51c:	f04f 0200 	mov.w	r2, #0
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d528:	4649      	mov	r1, r9
 800d52a:	008b      	lsls	r3, r1, #2
 800d52c:	4641      	mov	r1, r8
 800d52e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d532:	4641      	mov	r1, r8
 800d534:	008a      	lsls	r2, r1, #2
 800d536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d53a:	f7f3 fbf5 	bl	8000d28 <__aeabi_uldivmod>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <UART_SetConfig+0x4e4>)
 800d544:	fba3 1302 	umull	r1, r3, r3, r2
 800d548:	095b      	lsrs	r3, r3, #5
 800d54a:	2164      	movs	r1, #100	; 0x64
 800d54c:	fb01 f303 	mul.w	r3, r1, r3
 800d550:	1ad3      	subs	r3, r2, r3
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	3332      	adds	r3, #50	; 0x32
 800d556:	4a08      	ldr	r2, [pc, #32]	; (800d578 <UART_SetConfig+0x4e4>)
 800d558:	fba2 2303 	umull	r2, r3, r2, r3
 800d55c:	095b      	lsrs	r3, r3, #5
 800d55e:	f003 020f 	and.w	r2, r3, #15
 800d562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4422      	add	r2, r4
 800d56a:	609a      	str	r2, [r3, #8]
}
 800d56c:	bf00      	nop
 800d56e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d572:	46bd      	mov	sp, r7
 800d574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d578:	51eb851f 	.word	0x51eb851f

0800d57c <__cvt>:
 800d57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d580:	ec55 4b10 	vmov	r4, r5, d0
 800d584:	2d00      	cmp	r5, #0
 800d586:	460e      	mov	r6, r1
 800d588:	4619      	mov	r1, r3
 800d58a:	462b      	mov	r3, r5
 800d58c:	bfbb      	ittet	lt
 800d58e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d592:	461d      	movlt	r5, r3
 800d594:	2300      	movge	r3, #0
 800d596:	232d      	movlt	r3, #45	; 0x2d
 800d598:	700b      	strb	r3, [r1, #0]
 800d59a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d59c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d5a0:	4691      	mov	r9, r2
 800d5a2:	f023 0820 	bic.w	r8, r3, #32
 800d5a6:	bfbc      	itt	lt
 800d5a8:	4622      	movlt	r2, r4
 800d5aa:	4614      	movlt	r4, r2
 800d5ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5b0:	d005      	beq.n	800d5be <__cvt+0x42>
 800d5b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d5b6:	d100      	bne.n	800d5ba <__cvt+0x3e>
 800d5b8:	3601      	adds	r6, #1
 800d5ba:	2102      	movs	r1, #2
 800d5bc:	e000      	b.n	800d5c0 <__cvt+0x44>
 800d5be:	2103      	movs	r1, #3
 800d5c0:	ab03      	add	r3, sp, #12
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	ab02      	add	r3, sp, #8
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	ec45 4b10 	vmov	d0, r4, r5
 800d5cc:	4653      	mov	r3, sl
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	f001 f88a 	bl	800e6e8 <_dtoa_r>
 800d5d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d5d8:	4607      	mov	r7, r0
 800d5da:	d102      	bne.n	800d5e2 <__cvt+0x66>
 800d5dc:	f019 0f01 	tst.w	r9, #1
 800d5e0:	d022      	beq.n	800d628 <__cvt+0xac>
 800d5e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d5e6:	eb07 0906 	add.w	r9, r7, r6
 800d5ea:	d110      	bne.n	800d60e <__cvt+0x92>
 800d5ec:	783b      	ldrb	r3, [r7, #0]
 800d5ee:	2b30      	cmp	r3, #48	; 0x30
 800d5f0:	d10a      	bne.n	800d608 <__cvt+0x8c>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f3 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 800d5fe:	b918      	cbnz	r0, 800d608 <__cvt+0x8c>
 800d600:	f1c6 0601 	rsb	r6, r6, #1
 800d604:	f8ca 6000 	str.w	r6, [sl]
 800d608:	f8da 3000 	ldr.w	r3, [sl]
 800d60c:	4499      	add	r9, r3
 800d60e:	2200      	movs	r2, #0
 800d610:	2300      	movs	r3, #0
 800d612:	4620      	mov	r0, r4
 800d614:	4629      	mov	r1, r5
 800d616:	f7f3 fa77 	bl	8000b08 <__aeabi_dcmpeq>
 800d61a:	b108      	cbz	r0, 800d620 <__cvt+0xa4>
 800d61c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d620:	2230      	movs	r2, #48	; 0x30
 800d622:	9b03      	ldr	r3, [sp, #12]
 800d624:	454b      	cmp	r3, r9
 800d626:	d307      	bcc.n	800d638 <__cvt+0xbc>
 800d628:	9b03      	ldr	r3, [sp, #12]
 800d62a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d62c:	1bdb      	subs	r3, r3, r7
 800d62e:	4638      	mov	r0, r7
 800d630:	6013      	str	r3, [r2, #0]
 800d632:	b004      	add	sp, #16
 800d634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d638:	1c59      	adds	r1, r3, #1
 800d63a:	9103      	str	r1, [sp, #12]
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	e7f0      	b.n	800d622 <__cvt+0xa6>

0800d640 <__exponent>:
 800d640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d642:	4603      	mov	r3, r0
 800d644:	2900      	cmp	r1, #0
 800d646:	bfb8      	it	lt
 800d648:	4249      	neglt	r1, r1
 800d64a:	f803 2b02 	strb.w	r2, [r3], #2
 800d64e:	bfb4      	ite	lt
 800d650:	222d      	movlt	r2, #45	; 0x2d
 800d652:	222b      	movge	r2, #43	; 0x2b
 800d654:	2909      	cmp	r1, #9
 800d656:	7042      	strb	r2, [r0, #1]
 800d658:	dd2a      	ble.n	800d6b0 <__exponent+0x70>
 800d65a:	f10d 0207 	add.w	r2, sp, #7
 800d65e:	4617      	mov	r7, r2
 800d660:	260a      	movs	r6, #10
 800d662:	4694      	mov	ip, r2
 800d664:	fb91 f5f6 	sdiv	r5, r1, r6
 800d668:	fb06 1415 	mls	r4, r6, r5, r1
 800d66c:	3430      	adds	r4, #48	; 0x30
 800d66e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d672:	460c      	mov	r4, r1
 800d674:	2c63      	cmp	r4, #99	; 0x63
 800d676:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d67a:	4629      	mov	r1, r5
 800d67c:	dcf1      	bgt.n	800d662 <__exponent+0x22>
 800d67e:	3130      	adds	r1, #48	; 0x30
 800d680:	f1ac 0402 	sub.w	r4, ip, #2
 800d684:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d688:	1c41      	adds	r1, r0, #1
 800d68a:	4622      	mov	r2, r4
 800d68c:	42ba      	cmp	r2, r7
 800d68e:	d30a      	bcc.n	800d6a6 <__exponent+0x66>
 800d690:	f10d 0209 	add.w	r2, sp, #9
 800d694:	eba2 020c 	sub.w	r2, r2, ip
 800d698:	42bc      	cmp	r4, r7
 800d69a:	bf88      	it	hi
 800d69c:	2200      	movhi	r2, #0
 800d69e:	4413      	add	r3, r2
 800d6a0:	1a18      	subs	r0, r3, r0
 800d6a2:	b003      	add	sp, #12
 800d6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d6aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d6ae:	e7ed      	b.n	800d68c <__exponent+0x4c>
 800d6b0:	2330      	movs	r3, #48	; 0x30
 800d6b2:	3130      	adds	r1, #48	; 0x30
 800d6b4:	7083      	strb	r3, [r0, #2]
 800d6b6:	70c1      	strb	r1, [r0, #3]
 800d6b8:	1d03      	adds	r3, r0, #4
 800d6ba:	e7f1      	b.n	800d6a0 <__exponent+0x60>

0800d6bc <_printf_float>:
 800d6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c0:	ed2d 8b02 	vpush	{d8}
 800d6c4:	b08d      	sub	sp, #52	; 0x34
 800d6c6:	460c      	mov	r4, r1
 800d6c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d6cc:	4616      	mov	r6, r2
 800d6ce:	461f      	mov	r7, r3
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	f000 fecd 	bl	800e470 <_localeconv_r>
 800d6d6:	f8d0 a000 	ldr.w	sl, [r0]
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f7f2 fde8 	bl	80002b0 <strlen>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	9305      	str	r3, [sp, #20]
 800d6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d6f0:	3307      	adds	r3, #7
 800d6f2:	f023 0307 	bic.w	r3, r3, #7
 800d6f6:	f103 0208 	add.w	r2, r3, #8
 800d6fa:	f8c8 2000 	str.w	r2, [r8]
 800d6fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	f8cd 8018 	str.w	r8, [sp, #24]
 800d70c:	ee08 0a10 	vmov	s16, r0
 800d710:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d718:	4b9e      	ldr	r3, [pc, #632]	; (800d994 <_printf_float+0x2d8>)
 800d71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d71e:	f7f3 fa25 	bl	8000b6c <__aeabi_dcmpun>
 800d722:	bb88      	cbnz	r0, 800d788 <_printf_float+0xcc>
 800d724:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d728:	4b9a      	ldr	r3, [pc, #616]	; (800d994 <_printf_float+0x2d8>)
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d72e:	f7f3 f9ff 	bl	8000b30 <__aeabi_dcmple>
 800d732:	bb48      	cbnz	r0, 800d788 <_printf_float+0xcc>
 800d734:	2200      	movs	r2, #0
 800d736:	2300      	movs	r3, #0
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f3 f9ee 	bl	8000b1c <__aeabi_dcmplt>
 800d740:	b110      	cbz	r0, 800d748 <_printf_float+0x8c>
 800d742:	232d      	movs	r3, #45	; 0x2d
 800d744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d748:	4a93      	ldr	r2, [pc, #588]	; (800d998 <_printf_float+0x2dc>)
 800d74a:	4b94      	ldr	r3, [pc, #592]	; (800d99c <_printf_float+0x2e0>)
 800d74c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d750:	bf94      	ite	ls
 800d752:	4690      	movls	r8, r2
 800d754:	4698      	movhi	r8, r3
 800d756:	2303      	movs	r3, #3
 800d758:	6123      	str	r3, [r4, #16]
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	f023 0304 	bic.w	r3, r3, #4
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	f04f 0900 	mov.w	r9, #0
 800d766:	9700      	str	r7, [sp, #0]
 800d768:	4633      	mov	r3, r6
 800d76a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d76c:	4621      	mov	r1, r4
 800d76e:	4628      	mov	r0, r5
 800d770:	f000 fa82 	bl	800dc78 <_printf_common>
 800d774:	3001      	adds	r0, #1
 800d776:	f040 8090 	bne.w	800d89a <_printf_float+0x1de>
 800d77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d77e:	b00d      	add	sp, #52	; 0x34
 800d780:	ecbd 8b02 	vpop	{d8}
 800d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d788:	4642      	mov	r2, r8
 800d78a:	464b      	mov	r3, r9
 800d78c:	4640      	mov	r0, r8
 800d78e:	4649      	mov	r1, r9
 800d790:	f7f3 f9ec 	bl	8000b6c <__aeabi_dcmpun>
 800d794:	b140      	cbz	r0, 800d7a8 <_printf_float+0xec>
 800d796:	464b      	mov	r3, r9
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfbc      	itt	lt
 800d79c:	232d      	movlt	r3, #45	; 0x2d
 800d79e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d7a2:	4a7f      	ldr	r2, [pc, #508]	; (800d9a0 <_printf_float+0x2e4>)
 800d7a4:	4b7f      	ldr	r3, [pc, #508]	; (800d9a4 <_printf_float+0x2e8>)
 800d7a6:	e7d1      	b.n	800d74c <_printf_float+0x90>
 800d7a8:	6863      	ldr	r3, [r4, #4]
 800d7aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d7ae:	9206      	str	r2, [sp, #24]
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	d13f      	bne.n	800d834 <_printf_float+0x178>
 800d7b4:	2306      	movs	r3, #6
 800d7b6:	6063      	str	r3, [r4, #4]
 800d7b8:	9b05      	ldr	r3, [sp, #20]
 800d7ba:	6861      	ldr	r1, [r4, #4]
 800d7bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	9303      	str	r3, [sp, #12]
 800d7c4:	ab0a      	add	r3, sp, #40	; 0x28
 800d7c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d7ca:	ab09      	add	r3, sp, #36	; 0x24
 800d7cc:	ec49 8b10 	vmov	d0, r8, r9
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f7ff fecf 	bl	800d57c <__cvt>
 800d7de:	9b06      	ldr	r3, [sp, #24]
 800d7e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d7e2:	2b47      	cmp	r3, #71	; 0x47
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	d108      	bne.n	800d7fa <_printf_float+0x13e>
 800d7e8:	1cc8      	adds	r0, r1, #3
 800d7ea:	db02      	blt.n	800d7f2 <_printf_float+0x136>
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	4299      	cmp	r1, r3
 800d7f0:	dd41      	ble.n	800d876 <_printf_float+0x1ba>
 800d7f2:	f1ab 0302 	sub.w	r3, fp, #2
 800d7f6:	fa5f fb83 	uxtb.w	fp, r3
 800d7fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7fe:	d820      	bhi.n	800d842 <_printf_float+0x186>
 800d800:	3901      	subs	r1, #1
 800d802:	465a      	mov	r2, fp
 800d804:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d808:	9109      	str	r1, [sp, #36]	; 0x24
 800d80a:	f7ff ff19 	bl	800d640 <__exponent>
 800d80e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d810:	1813      	adds	r3, r2, r0
 800d812:	2a01      	cmp	r2, #1
 800d814:	4681      	mov	r9, r0
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	dc02      	bgt.n	800d820 <_printf_float+0x164>
 800d81a:	6822      	ldr	r2, [r4, #0]
 800d81c:	07d2      	lsls	r2, r2, #31
 800d81e:	d501      	bpl.n	800d824 <_printf_float+0x168>
 800d820:	3301      	adds	r3, #1
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d09c      	beq.n	800d766 <_printf_float+0xaa>
 800d82c:	232d      	movs	r3, #45	; 0x2d
 800d82e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d832:	e798      	b.n	800d766 <_printf_float+0xaa>
 800d834:	9a06      	ldr	r2, [sp, #24]
 800d836:	2a47      	cmp	r2, #71	; 0x47
 800d838:	d1be      	bne.n	800d7b8 <_printf_float+0xfc>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1bc      	bne.n	800d7b8 <_printf_float+0xfc>
 800d83e:	2301      	movs	r3, #1
 800d840:	e7b9      	b.n	800d7b6 <_printf_float+0xfa>
 800d842:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d846:	d118      	bne.n	800d87a <_printf_float+0x1be>
 800d848:	2900      	cmp	r1, #0
 800d84a:	6863      	ldr	r3, [r4, #4]
 800d84c:	dd0b      	ble.n	800d866 <_printf_float+0x1aa>
 800d84e:	6121      	str	r1, [r4, #16]
 800d850:	b913      	cbnz	r3, 800d858 <_printf_float+0x19c>
 800d852:	6822      	ldr	r2, [r4, #0]
 800d854:	07d0      	lsls	r0, r2, #31
 800d856:	d502      	bpl.n	800d85e <_printf_float+0x1a2>
 800d858:	3301      	adds	r3, #1
 800d85a:	440b      	add	r3, r1
 800d85c:	6123      	str	r3, [r4, #16]
 800d85e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d860:	f04f 0900 	mov.w	r9, #0
 800d864:	e7de      	b.n	800d824 <_printf_float+0x168>
 800d866:	b913      	cbnz	r3, 800d86e <_printf_float+0x1b2>
 800d868:	6822      	ldr	r2, [r4, #0]
 800d86a:	07d2      	lsls	r2, r2, #31
 800d86c:	d501      	bpl.n	800d872 <_printf_float+0x1b6>
 800d86e:	3302      	adds	r3, #2
 800d870:	e7f4      	b.n	800d85c <_printf_float+0x1a0>
 800d872:	2301      	movs	r3, #1
 800d874:	e7f2      	b.n	800d85c <_printf_float+0x1a0>
 800d876:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d87c:	4299      	cmp	r1, r3
 800d87e:	db05      	blt.n	800d88c <_printf_float+0x1d0>
 800d880:	6823      	ldr	r3, [r4, #0]
 800d882:	6121      	str	r1, [r4, #16]
 800d884:	07d8      	lsls	r0, r3, #31
 800d886:	d5ea      	bpl.n	800d85e <_printf_float+0x1a2>
 800d888:	1c4b      	adds	r3, r1, #1
 800d88a:	e7e7      	b.n	800d85c <_printf_float+0x1a0>
 800d88c:	2900      	cmp	r1, #0
 800d88e:	bfd4      	ite	le
 800d890:	f1c1 0202 	rsble	r2, r1, #2
 800d894:	2201      	movgt	r2, #1
 800d896:	4413      	add	r3, r2
 800d898:	e7e0      	b.n	800d85c <_printf_float+0x1a0>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	055a      	lsls	r2, r3, #21
 800d89e:	d407      	bmi.n	800d8b0 <_printf_float+0x1f4>
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	4642      	mov	r2, r8
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d12c      	bne.n	800d908 <_printf_float+0x24c>
 800d8ae:	e764      	b.n	800d77a <_printf_float+0xbe>
 800d8b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d8b4:	f240 80e0 	bls.w	800da78 <_printf_float+0x3bc>
 800d8b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8bc:	2200      	movs	r2, #0
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f7f3 f922 	bl	8000b08 <__aeabi_dcmpeq>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d034      	beq.n	800d932 <_printf_float+0x276>
 800d8c8:	4a37      	ldr	r2, [pc, #220]	; (800d9a8 <_printf_float+0x2ec>)
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4631      	mov	r1, r6
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b8      	blx	r7
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	f43f af51 	beq.w	800d77a <_printf_float+0xbe>
 800d8d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	db02      	blt.n	800d8e6 <_printf_float+0x22a>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	07d8      	lsls	r0, r3, #31
 800d8e4:	d510      	bpl.n	800d908 <_printf_float+0x24c>
 800d8e6:	ee18 3a10 	vmov	r3, s16
 800d8ea:	4652      	mov	r2, sl
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	47b8      	blx	r7
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	f43f af41 	beq.w	800d77a <_printf_float+0xbe>
 800d8f8:	f04f 0800 	mov.w	r8, #0
 800d8fc:	f104 091a 	add.w	r9, r4, #26
 800d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d902:	3b01      	subs	r3, #1
 800d904:	4543      	cmp	r3, r8
 800d906:	dc09      	bgt.n	800d91c <_printf_float+0x260>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	079b      	lsls	r3, r3, #30
 800d90c:	f100 8107 	bmi.w	800db1e <_printf_float+0x462>
 800d910:	68e0      	ldr	r0, [r4, #12]
 800d912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d914:	4298      	cmp	r0, r3
 800d916:	bfb8      	it	lt
 800d918:	4618      	movlt	r0, r3
 800d91a:	e730      	b.n	800d77e <_printf_float+0xc2>
 800d91c:	2301      	movs	r3, #1
 800d91e:	464a      	mov	r2, r9
 800d920:	4631      	mov	r1, r6
 800d922:	4628      	mov	r0, r5
 800d924:	47b8      	blx	r7
 800d926:	3001      	adds	r0, #1
 800d928:	f43f af27 	beq.w	800d77a <_printf_float+0xbe>
 800d92c:	f108 0801 	add.w	r8, r8, #1
 800d930:	e7e6      	b.n	800d900 <_printf_float+0x244>
 800d932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d934:	2b00      	cmp	r3, #0
 800d936:	dc39      	bgt.n	800d9ac <_printf_float+0x2f0>
 800d938:	4a1b      	ldr	r2, [pc, #108]	; (800d9a8 <_printf_float+0x2ec>)
 800d93a:	2301      	movs	r3, #1
 800d93c:	4631      	mov	r1, r6
 800d93e:	4628      	mov	r0, r5
 800d940:	47b8      	blx	r7
 800d942:	3001      	adds	r0, #1
 800d944:	f43f af19 	beq.w	800d77a <_printf_float+0xbe>
 800d948:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d94c:	4313      	orrs	r3, r2
 800d94e:	d102      	bne.n	800d956 <_printf_float+0x29a>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	07d9      	lsls	r1, r3, #31
 800d954:	d5d8      	bpl.n	800d908 <_printf_float+0x24c>
 800d956:	ee18 3a10 	vmov	r3, s16
 800d95a:	4652      	mov	r2, sl
 800d95c:	4631      	mov	r1, r6
 800d95e:	4628      	mov	r0, r5
 800d960:	47b8      	blx	r7
 800d962:	3001      	adds	r0, #1
 800d964:	f43f af09 	beq.w	800d77a <_printf_float+0xbe>
 800d968:	f04f 0900 	mov.w	r9, #0
 800d96c:	f104 0a1a 	add.w	sl, r4, #26
 800d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d972:	425b      	negs	r3, r3
 800d974:	454b      	cmp	r3, r9
 800d976:	dc01      	bgt.n	800d97c <_printf_float+0x2c0>
 800d978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d97a:	e792      	b.n	800d8a2 <_printf_float+0x1e6>
 800d97c:	2301      	movs	r3, #1
 800d97e:	4652      	mov	r2, sl
 800d980:	4631      	mov	r1, r6
 800d982:	4628      	mov	r0, r5
 800d984:	47b8      	blx	r7
 800d986:	3001      	adds	r0, #1
 800d988:	f43f aef7 	beq.w	800d77a <_printf_float+0xbe>
 800d98c:	f109 0901 	add.w	r9, r9, #1
 800d990:	e7ee      	b.n	800d970 <_printf_float+0x2b4>
 800d992:	bf00      	nop
 800d994:	7fefffff 	.word	0x7fefffff
 800d998:	08015d24 	.word	0x08015d24
 800d99c:	08015d28 	.word	0x08015d28
 800d9a0:	08015d2c 	.word	0x08015d2c
 800d9a4:	08015d30 	.word	0x08015d30
 800d9a8:	08015f47 	.word	0x08015f47
 800d9ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	bfa8      	it	ge
 800d9b4:	461a      	movge	r2, r3
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	4691      	mov	r9, r2
 800d9ba:	dc37      	bgt.n	800da2c <_printf_float+0x370>
 800d9bc:	f04f 0b00 	mov.w	fp, #0
 800d9c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9c4:	f104 021a 	add.w	r2, r4, #26
 800d9c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9ca:	9305      	str	r3, [sp, #20]
 800d9cc:	eba3 0309 	sub.w	r3, r3, r9
 800d9d0:	455b      	cmp	r3, fp
 800d9d2:	dc33      	bgt.n	800da3c <_printf_float+0x380>
 800d9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	db3b      	blt.n	800da54 <_printf_float+0x398>
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	07da      	lsls	r2, r3, #31
 800d9e0:	d438      	bmi.n	800da54 <_printf_float+0x398>
 800d9e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9e6:	eba2 0903 	sub.w	r9, r2, r3
 800d9ea:	9b05      	ldr	r3, [sp, #20]
 800d9ec:	1ad2      	subs	r2, r2, r3
 800d9ee:	4591      	cmp	r9, r2
 800d9f0:	bfa8      	it	ge
 800d9f2:	4691      	movge	r9, r2
 800d9f4:	f1b9 0f00 	cmp.w	r9, #0
 800d9f8:	dc35      	bgt.n	800da66 <_printf_float+0x3aa>
 800d9fa:	f04f 0800 	mov.w	r8, #0
 800d9fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da02:	f104 0a1a 	add.w	sl, r4, #26
 800da06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	eba3 0309 	sub.w	r3, r3, r9
 800da10:	4543      	cmp	r3, r8
 800da12:	f77f af79 	ble.w	800d908 <_printf_float+0x24c>
 800da16:	2301      	movs	r3, #1
 800da18:	4652      	mov	r2, sl
 800da1a:	4631      	mov	r1, r6
 800da1c:	4628      	mov	r0, r5
 800da1e:	47b8      	blx	r7
 800da20:	3001      	adds	r0, #1
 800da22:	f43f aeaa 	beq.w	800d77a <_printf_float+0xbe>
 800da26:	f108 0801 	add.w	r8, r8, #1
 800da2a:	e7ec      	b.n	800da06 <_printf_float+0x34a>
 800da2c:	4613      	mov	r3, r2
 800da2e:	4631      	mov	r1, r6
 800da30:	4642      	mov	r2, r8
 800da32:	4628      	mov	r0, r5
 800da34:	47b8      	blx	r7
 800da36:	3001      	adds	r0, #1
 800da38:	d1c0      	bne.n	800d9bc <_printf_float+0x300>
 800da3a:	e69e      	b.n	800d77a <_printf_float+0xbe>
 800da3c:	2301      	movs	r3, #1
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	9205      	str	r2, [sp, #20]
 800da44:	47b8      	blx	r7
 800da46:	3001      	adds	r0, #1
 800da48:	f43f ae97 	beq.w	800d77a <_printf_float+0xbe>
 800da4c:	9a05      	ldr	r2, [sp, #20]
 800da4e:	f10b 0b01 	add.w	fp, fp, #1
 800da52:	e7b9      	b.n	800d9c8 <_printf_float+0x30c>
 800da54:	ee18 3a10 	vmov	r3, s16
 800da58:	4652      	mov	r2, sl
 800da5a:	4631      	mov	r1, r6
 800da5c:	4628      	mov	r0, r5
 800da5e:	47b8      	blx	r7
 800da60:	3001      	adds	r0, #1
 800da62:	d1be      	bne.n	800d9e2 <_printf_float+0x326>
 800da64:	e689      	b.n	800d77a <_printf_float+0xbe>
 800da66:	9a05      	ldr	r2, [sp, #20]
 800da68:	464b      	mov	r3, r9
 800da6a:	4442      	add	r2, r8
 800da6c:	4631      	mov	r1, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	47b8      	blx	r7
 800da72:	3001      	adds	r0, #1
 800da74:	d1c1      	bne.n	800d9fa <_printf_float+0x33e>
 800da76:	e680      	b.n	800d77a <_printf_float+0xbe>
 800da78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da7a:	2a01      	cmp	r2, #1
 800da7c:	dc01      	bgt.n	800da82 <_printf_float+0x3c6>
 800da7e:	07db      	lsls	r3, r3, #31
 800da80:	d53a      	bpl.n	800daf8 <_printf_float+0x43c>
 800da82:	2301      	movs	r3, #1
 800da84:	4642      	mov	r2, r8
 800da86:	4631      	mov	r1, r6
 800da88:	4628      	mov	r0, r5
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	f43f ae74 	beq.w	800d77a <_printf_float+0xbe>
 800da92:	ee18 3a10 	vmov	r3, s16
 800da96:	4652      	mov	r2, sl
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f ae6b 	beq.w	800d77a <_printf_float+0xbe>
 800daa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800daa8:	2200      	movs	r2, #0
 800daaa:	2300      	movs	r3, #0
 800daac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dab0:	f7f3 f82a 	bl	8000b08 <__aeabi_dcmpeq>
 800dab4:	b9d8      	cbnz	r0, 800daee <_printf_float+0x432>
 800dab6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800daba:	f108 0201 	add.w	r2, r8, #1
 800dabe:	4631      	mov	r1, r6
 800dac0:	4628      	mov	r0, r5
 800dac2:	47b8      	blx	r7
 800dac4:	3001      	adds	r0, #1
 800dac6:	d10e      	bne.n	800dae6 <_printf_float+0x42a>
 800dac8:	e657      	b.n	800d77a <_printf_float+0xbe>
 800daca:	2301      	movs	r3, #1
 800dacc:	4652      	mov	r2, sl
 800dace:	4631      	mov	r1, r6
 800dad0:	4628      	mov	r0, r5
 800dad2:	47b8      	blx	r7
 800dad4:	3001      	adds	r0, #1
 800dad6:	f43f ae50 	beq.w	800d77a <_printf_float+0xbe>
 800dada:	f108 0801 	add.w	r8, r8, #1
 800dade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae0:	3b01      	subs	r3, #1
 800dae2:	4543      	cmp	r3, r8
 800dae4:	dcf1      	bgt.n	800daca <_printf_float+0x40e>
 800dae6:	464b      	mov	r3, r9
 800dae8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800daec:	e6da      	b.n	800d8a4 <_printf_float+0x1e8>
 800daee:	f04f 0800 	mov.w	r8, #0
 800daf2:	f104 0a1a 	add.w	sl, r4, #26
 800daf6:	e7f2      	b.n	800dade <_printf_float+0x422>
 800daf8:	2301      	movs	r3, #1
 800dafa:	4642      	mov	r2, r8
 800dafc:	e7df      	b.n	800dabe <_printf_float+0x402>
 800dafe:	2301      	movs	r3, #1
 800db00:	464a      	mov	r2, r9
 800db02:	4631      	mov	r1, r6
 800db04:	4628      	mov	r0, r5
 800db06:	47b8      	blx	r7
 800db08:	3001      	adds	r0, #1
 800db0a:	f43f ae36 	beq.w	800d77a <_printf_float+0xbe>
 800db0e:	f108 0801 	add.w	r8, r8, #1
 800db12:	68e3      	ldr	r3, [r4, #12]
 800db14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db16:	1a5b      	subs	r3, r3, r1
 800db18:	4543      	cmp	r3, r8
 800db1a:	dcf0      	bgt.n	800dafe <_printf_float+0x442>
 800db1c:	e6f8      	b.n	800d910 <_printf_float+0x254>
 800db1e:	f04f 0800 	mov.w	r8, #0
 800db22:	f104 0919 	add.w	r9, r4, #25
 800db26:	e7f4      	b.n	800db12 <_printf_float+0x456>

0800db28 <malloc>:
 800db28:	4b02      	ldr	r3, [pc, #8]	; (800db34 <malloc+0xc>)
 800db2a:	4601      	mov	r1, r0
 800db2c:	6818      	ldr	r0, [r3, #0]
 800db2e:	f000 b823 	b.w	800db78 <_malloc_r>
 800db32:	bf00      	nop
 800db34:	2000009c 	.word	0x2000009c

0800db38 <sbrk_aligned>:
 800db38:	b570      	push	{r4, r5, r6, lr}
 800db3a:	4e0e      	ldr	r6, [pc, #56]	; (800db74 <sbrk_aligned+0x3c>)
 800db3c:	460c      	mov	r4, r1
 800db3e:	6831      	ldr	r1, [r6, #0]
 800db40:	4605      	mov	r5, r0
 800db42:	b911      	cbnz	r1, 800db4a <sbrk_aligned+0x12>
 800db44:	f000 fccc 	bl	800e4e0 <_sbrk_r>
 800db48:	6030      	str	r0, [r6, #0]
 800db4a:	4621      	mov	r1, r4
 800db4c:	4628      	mov	r0, r5
 800db4e:	f000 fcc7 	bl	800e4e0 <_sbrk_r>
 800db52:	1c43      	adds	r3, r0, #1
 800db54:	d00a      	beq.n	800db6c <sbrk_aligned+0x34>
 800db56:	1cc4      	adds	r4, r0, #3
 800db58:	f024 0403 	bic.w	r4, r4, #3
 800db5c:	42a0      	cmp	r0, r4
 800db5e:	d007      	beq.n	800db70 <sbrk_aligned+0x38>
 800db60:	1a21      	subs	r1, r4, r0
 800db62:	4628      	mov	r0, r5
 800db64:	f000 fcbc 	bl	800e4e0 <_sbrk_r>
 800db68:	3001      	adds	r0, #1
 800db6a:	d101      	bne.n	800db70 <sbrk_aligned+0x38>
 800db6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800db70:	4620      	mov	r0, r4
 800db72:	bd70      	pop	{r4, r5, r6, pc}
 800db74:	20009688 	.word	0x20009688

0800db78 <_malloc_r>:
 800db78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db7c:	1ccd      	adds	r5, r1, #3
 800db7e:	f025 0503 	bic.w	r5, r5, #3
 800db82:	3508      	adds	r5, #8
 800db84:	2d0c      	cmp	r5, #12
 800db86:	bf38      	it	cc
 800db88:	250c      	movcc	r5, #12
 800db8a:	2d00      	cmp	r5, #0
 800db8c:	4607      	mov	r7, r0
 800db8e:	db01      	blt.n	800db94 <_malloc_r+0x1c>
 800db90:	42a9      	cmp	r1, r5
 800db92:	d905      	bls.n	800dba0 <_malloc_r+0x28>
 800db94:	230c      	movs	r3, #12
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	2600      	movs	r6, #0
 800db9a:	4630      	mov	r0, r6
 800db9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dc74 <_malloc_r+0xfc>
 800dba4:	f000 fa2c 	bl	800e000 <__malloc_lock>
 800dba8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbac:	461c      	mov	r4, r3
 800dbae:	bb5c      	cbnz	r4, 800dc08 <_malloc_r+0x90>
 800dbb0:	4629      	mov	r1, r5
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	f7ff ffc0 	bl	800db38 <sbrk_aligned>
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	4604      	mov	r4, r0
 800dbbc:	d155      	bne.n	800dc6a <_malloc_r+0xf2>
 800dbbe:	f8d8 4000 	ldr.w	r4, [r8]
 800dbc2:	4626      	mov	r6, r4
 800dbc4:	2e00      	cmp	r6, #0
 800dbc6:	d145      	bne.n	800dc54 <_malloc_r+0xdc>
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	d048      	beq.n	800dc5e <_malloc_r+0xe6>
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	eb04 0903 	add.w	r9, r4, r3
 800dbd6:	f000 fc83 	bl	800e4e0 <_sbrk_r>
 800dbda:	4581      	cmp	r9, r0
 800dbdc:	d13f      	bne.n	800dc5e <_malloc_r+0xe6>
 800dbde:	6821      	ldr	r1, [r4, #0]
 800dbe0:	1a6d      	subs	r5, r5, r1
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4638      	mov	r0, r7
 800dbe6:	f7ff ffa7 	bl	800db38 <sbrk_aligned>
 800dbea:	3001      	adds	r0, #1
 800dbec:	d037      	beq.n	800dc5e <_malloc_r+0xe6>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	442b      	add	r3, r5
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d038      	beq.n	800dc6e <_malloc_r+0xf6>
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	42a2      	cmp	r2, r4
 800dc00:	d12b      	bne.n	800dc5a <_malloc_r+0xe2>
 800dc02:	2200      	movs	r2, #0
 800dc04:	605a      	str	r2, [r3, #4]
 800dc06:	e00f      	b.n	800dc28 <_malloc_r+0xb0>
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	1b52      	subs	r2, r2, r5
 800dc0c:	d41f      	bmi.n	800dc4e <_malloc_r+0xd6>
 800dc0e:	2a0b      	cmp	r2, #11
 800dc10:	d917      	bls.n	800dc42 <_malloc_r+0xca>
 800dc12:	1961      	adds	r1, r4, r5
 800dc14:	42a3      	cmp	r3, r4
 800dc16:	6025      	str	r5, [r4, #0]
 800dc18:	bf18      	it	ne
 800dc1a:	6059      	strne	r1, [r3, #4]
 800dc1c:	6863      	ldr	r3, [r4, #4]
 800dc1e:	bf08      	it	eq
 800dc20:	f8c8 1000 	streq.w	r1, [r8]
 800dc24:	5162      	str	r2, [r4, r5]
 800dc26:	604b      	str	r3, [r1, #4]
 800dc28:	4638      	mov	r0, r7
 800dc2a:	f104 060b 	add.w	r6, r4, #11
 800dc2e:	f000 f9ed 	bl	800e00c <__malloc_unlock>
 800dc32:	f026 0607 	bic.w	r6, r6, #7
 800dc36:	1d23      	adds	r3, r4, #4
 800dc38:	1af2      	subs	r2, r6, r3
 800dc3a:	d0ae      	beq.n	800db9a <_malloc_r+0x22>
 800dc3c:	1b9b      	subs	r3, r3, r6
 800dc3e:	50a3      	str	r3, [r4, r2]
 800dc40:	e7ab      	b.n	800db9a <_malloc_r+0x22>
 800dc42:	42a3      	cmp	r3, r4
 800dc44:	6862      	ldr	r2, [r4, #4]
 800dc46:	d1dd      	bne.n	800dc04 <_malloc_r+0x8c>
 800dc48:	f8c8 2000 	str.w	r2, [r8]
 800dc4c:	e7ec      	b.n	800dc28 <_malloc_r+0xb0>
 800dc4e:	4623      	mov	r3, r4
 800dc50:	6864      	ldr	r4, [r4, #4]
 800dc52:	e7ac      	b.n	800dbae <_malloc_r+0x36>
 800dc54:	4634      	mov	r4, r6
 800dc56:	6876      	ldr	r6, [r6, #4]
 800dc58:	e7b4      	b.n	800dbc4 <_malloc_r+0x4c>
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	e7cc      	b.n	800dbf8 <_malloc_r+0x80>
 800dc5e:	230c      	movs	r3, #12
 800dc60:	603b      	str	r3, [r7, #0]
 800dc62:	4638      	mov	r0, r7
 800dc64:	f000 f9d2 	bl	800e00c <__malloc_unlock>
 800dc68:	e797      	b.n	800db9a <_malloc_r+0x22>
 800dc6a:	6025      	str	r5, [r4, #0]
 800dc6c:	e7dc      	b.n	800dc28 <_malloc_r+0xb0>
 800dc6e:	605b      	str	r3, [r3, #4]
 800dc70:	deff      	udf	#255	; 0xff
 800dc72:	bf00      	nop
 800dc74:	20009684 	.word	0x20009684

0800dc78 <_printf_common>:
 800dc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	4616      	mov	r6, r2
 800dc7e:	4699      	mov	r9, r3
 800dc80:	688a      	ldr	r2, [r1, #8]
 800dc82:	690b      	ldr	r3, [r1, #16]
 800dc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	bfb8      	it	lt
 800dc8c:	4613      	movlt	r3, r2
 800dc8e:	6033      	str	r3, [r6, #0]
 800dc90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc94:	4607      	mov	r7, r0
 800dc96:	460c      	mov	r4, r1
 800dc98:	b10a      	cbz	r2, 800dc9e <_printf_common+0x26>
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	6033      	str	r3, [r6, #0]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	0699      	lsls	r1, r3, #26
 800dca2:	bf42      	ittt	mi
 800dca4:	6833      	ldrmi	r3, [r6, #0]
 800dca6:	3302      	addmi	r3, #2
 800dca8:	6033      	strmi	r3, [r6, #0]
 800dcaa:	6825      	ldr	r5, [r4, #0]
 800dcac:	f015 0506 	ands.w	r5, r5, #6
 800dcb0:	d106      	bne.n	800dcc0 <_printf_common+0x48>
 800dcb2:	f104 0a19 	add.w	sl, r4, #25
 800dcb6:	68e3      	ldr	r3, [r4, #12]
 800dcb8:	6832      	ldr	r2, [r6, #0]
 800dcba:	1a9b      	subs	r3, r3, r2
 800dcbc:	42ab      	cmp	r3, r5
 800dcbe:	dc26      	bgt.n	800dd0e <_printf_common+0x96>
 800dcc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcc4:	1e13      	subs	r3, r2, #0
 800dcc6:	6822      	ldr	r2, [r4, #0]
 800dcc8:	bf18      	it	ne
 800dcca:	2301      	movne	r3, #1
 800dccc:	0692      	lsls	r2, r2, #26
 800dcce:	d42b      	bmi.n	800dd28 <_printf_common+0xb0>
 800dcd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	47c0      	blx	r8
 800dcda:	3001      	adds	r0, #1
 800dcdc:	d01e      	beq.n	800dd1c <_printf_common+0xa4>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	6922      	ldr	r2, [r4, #16]
 800dce2:	f003 0306 	and.w	r3, r3, #6
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	bf02      	ittt	eq
 800dcea:	68e5      	ldreq	r5, [r4, #12]
 800dcec:	6833      	ldreq	r3, [r6, #0]
 800dcee:	1aed      	subeq	r5, r5, r3
 800dcf0:	68a3      	ldr	r3, [r4, #8]
 800dcf2:	bf0c      	ite	eq
 800dcf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcf8:	2500      	movne	r5, #0
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	bfc4      	itt	gt
 800dcfe:	1a9b      	subgt	r3, r3, r2
 800dd00:	18ed      	addgt	r5, r5, r3
 800dd02:	2600      	movs	r6, #0
 800dd04:	341a      	adds	r4, #26
 800dd06:	42b5      	cmp	r5, r6
 800dd08:	d11a      	bne.n	800dd40 <_printf_common+0xc8>
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	e008      	b.n	800dd20 <_printf_common+0xa8>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	4652      	mov	r2, sl
 800dd12:	4649      	mov	r1, r9
 800dd14:	4638      	mov	r0, r7
 800dd16:	47c0      	blx	r8
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d103      	bne.n	800dd24 <_printf_common+0xac>
 800dd1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd24:	3501      	adds	r5, #1
 800dd26:	e7c6      	b.n	800dcb6 <_printf_common+0x3e>
 800dd28:	18e1      	adds	r1, r4, r3
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	2030      	movs	r0, #48	; 0x30
 800dd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd32:	4422      	add	r2, r4
 800dd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd3c:	3302      	adds	r3, #2
 800dd3e:	e7c7      	b.n	800dcd0 <_printf_common+0x58>
 800dd40:	2301      	movs	r3, #1
 800dd42:	4622      	mov	r2, r4
 800dd44:	4649      	mov	r1, r9
 800dd46:	4638      	mov	r0, r7
 800dd48:	47c0      	blx	r8
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d0e6      	beq.n	800dd1c <_printf_common+0xa4>
 800dd4e:	3601      	adds	r6, #1
 800dd50:	e7d9      	b.n	800dd06 <_printf_common+0x8e>
	...

0800dd54 <_printf_i>:
 800dd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	7e0f      	ldrb	r7, [r1, #24]
 800dd5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd5c:	2f78      	cmp	r7, #120	; 0x78
 800dd5e:	4691      	mov	r9, r2
 800dd60:	4680      	mov	r8, r0
 800dd62:	460c      	mov	r4, r1
 800dd64:	469a      	mov	sl, r3
 800dd66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd6a:	d807      	bhi.n	800dd7c <_printf_i+0x28>
 800dd6c:	2f62      	cmp	r7, #98	; 0x62
 800dd6e:	d80a      	bhi.n	800dd86 <_printf_i+0x32>
 800dd70:	2f00      	cmp	r7, #0
 800dd72:	f000 80d4 	beq.w	800df1e <_printf_i+0x1ca>
 800dd76:	2f58      	cmp	r7, #88	; 0x58
 800dd78:	f000 80c0 	beq.w	800defc <_printf_i+0x1a8>
 800dd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd84:	e03a      	b.n	800ddfc <_printf_i+0xa8>
 800dd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd8a:	2b15      	cmp	r3, #21
 800dd8c:	d8f6      	bhi.n	800dd7c <_printf_i+0x28>
 800dd8e:	a101      	add	r1, pc, #4	; (adr r1, 800dd94 <_printf_i+0x40>)
 800dd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd94:	0800dded 	.word	0x0800dded
 800dd98:	0800de01 	.word	0x0800de01
 800dd9c:	0800dd7d 	.word	0x0800dd7d
 800dda0:	0800dd7d 	.word	0x0800dd7d
 800dda4:	0800dd7d 	.word	0x0800dd7d
 800dda8:	0800dd7d 	.word	0x0800dd7d
 800ddac:	0800de01 	.word	0x0800de01
 800ddb0:	0800dd7d 	.word	0x0800dd7d
 800ddb4:	0800dd7d 	.word	0x0800dd7d
 800ddb8:	0800dd7d 	.word	0x0800dd7d
 800ddbc:	0800dd7d 	.word	0x0800dd7d
 800ddc0:	0800df05 	.word	0x0800df05
 800ddc4:	0800de2d 	.word	0x0800de2d
 800ddc8:	0800debf 	.word	0x0800debf
 800ddcc:	0800dd7d 	.word	0x0800dd7d
 800ddd0:	0800dd7d 	.word	0x0800dd7d
 800ddd4:	0800df27 	.word	0x0800df27
 800ddd8:	0800dd7d 	.word	0x0800dd7d
 800dddc:	0800de2d 	.word	0x0800de2d
 800dde0:	0800dd7d 	.word	0x0800dd7d
 800dde4:	0800dd7d 	.word	0x0800dd7d
 800dde8:	0800dec7 	.word	0x0800dec7
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	1d1a      	adds	r2, r3, #4
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	602a      	str	r2, [r5, #0]
 800ddf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e09f      	b.n	800df40 <_printf_i+0x1ec>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	682b      	ldr	r3, [r5, #0]
 800de04:	0607      	lsls	r7, r0, #24
 800de06:	f103 0104 	add.w	r1, r3, #4
 800de0a:	6029      	str	r1, [r5, #0]
 800de0c:	d501      	bpl.n	800de12 <_printf_i+0xbe>
 800de0e:	681e      	ldr	r6, [r3, #0]
 800de10:	e003      	b.n	800de1a <_printf_i+0xc6>
 800de12:	0646      	lsls	r6, r0, #25
 800de14:	d5fb      	bpl.n	800de0e <_printf_i+0xba>
 800de16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	da03      	bge.n	800de26 <_printf_i+0xd2>
 800de1e:	232d      	movs	r3, #45	; 0x2d
 800de20:	4276      	negs	r6, r6
 800de22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de26:	485a      	ldr	r0, [pc, #360]	; (800df90 <_printf_i+0x23c>)
 800de28:	230a      	movs	r3, #10
 800de2a:	e012      	b.n	800de52 <_printf_i+0xfe>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	6820      	ldr	r0, [r4, #0]
 800de30:	1d19      	adds	r1, r3, #4
 800de32:	6029      	str	r1, [r5, #0]
 800de34:	0605      	lsls	r5, r0, #24
 800de36:	d501      	bpl.n	800de3c <_printf_i+0xe8>
 800de38:	681e      	ldr	r6, [r3, #0]
 800de3a:	e002      	b.n	800de42 <_printf_i+0xee>
 800de3c:	0641      	lsls	r1, r0, #25
 800de3e:	d5fb      	bpl.n	800de38 <_printf_i+0xe4>
 800de40:	881e      	ldrh	r6, [r3, #0]
 800de42:	4853      	ldr	r0, [pc, #332]	; (800df90 <_printf_i+0x23c>)
 800de44:	2f6f      	cmp	r7, #111	; 0x6f
 800de46:	bf0c      	ite	eq
 800de48:	2308      	moveq	r3, #8
 800de4a:	230a      	movne	r3, #10
 800de4c:	2100      	movs	r1, #0
 800de4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de52:	6865      	ldr	r5, [r4, #4]
 800de54:	60a5      	str	r5, [r4, #8]
 800de56:	2d00      	cmp	r5, #0
 800de58:	bfa2      	ittt	ge
 800de5a:	6821      	ldrge	r1, [r4, #0]
 800de5c:	f021 0104 	bicge.w	r1, r1, #4
 800de60:	6021      	strge	r1, [r4, #0]
 800de62:	b90e      	cbnz	r6, 800de68 <_printf_i+0x114>
 800de64:	2d00      	cmp	r5, #0
 800de66:	d04b      	beq.n	800df00 <_printf_i+0x1ac>
 800de68:	4615      	mov	r5, r2
 800de6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800de6e:	fb03 6711 	mls	r7, r3, r1, r6
 800de72:	5dc7      	ldrb	r7, [r0, r7]
 800de74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de78:	4637      	mov	r7, r6
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	460e      	mov	r6, r1
 800de7e:	d9f4      	bls.n	800de6a <_printf_i+0x116>
 800de80:	2b08      	cmp	r3, #8
 800de82:	d10b      	bne.n	800de9c <_printf_i+0x148>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	07de      	lsls	r6, r3, #31
 800de88:	d508      	bpl.n	800de9c <_printf_i+0x148>
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	6861      	ldr	r1, [r4, #4]
 800de8e:	4299      	cmp	r1, r3
 800de90:	bfde      	ittt	le
 800de92:	2330      	movle	r3, #48	; 0x30
 800de94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800de9c:	1b52      	subs	r2, r2, r5
 800de9e:	6122      	str	r2, [r4, #16]
 800dea0:	f8cd a000 	str.w	sl, [sp]
 800dea4:	464b      	mov	r3, r9
 800dea6:	aa03      	add	r2, sp, #12
 800dea8:	4621      	mov	r1, r4
 800deaa:	4640      	mov	r0, r8
 800deac:	f7ff fee4 	bl	800dc78 <_printf_common>
 800deb0:	3001      	adds	r0, #1
 800deb2:	d14a      	bne.n	800df4a <_printf_i+0x1f6>
 800deb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800deb8:	b004      	add	sp, #16
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	f043 0320 	orr.w	r3, r3, #32
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	4833      	ldr	r0, [pc, #204]	; (800df94 <_printf_i+0x240>)
 800dec8:	2778      	movs	r7, #120	; 0x78
 800deca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	6829      	ldr	r1, [r5, #0]
 800ded2:	061f      	lsls	r7, r3, #24
 800ded4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ded8:	d402      	bmi.n	800dee0 <_printf_i+0x18c>
 800deda:	065f      	lsls	r7, r3, #25
 800dedc:	bf48      	it	mi
 800dede:	b2b6      	uxthmi	r6, r6
 800dee0:	07df      	lsls	r7, r3, #31
 800dee2:	bf48      	it	mi
 800dee4:	f043 0320 	orrmi.w	r3, r3, #32
 800dee8:	6029      	str	r1, [r5, #0]
 800deea:	bf48      	it	mi
 800deec:	6023      	strmi	r3, [r4, #0]
 800deee:	b91e      	cbnz	r6, 800def8 <_printf_i+0x1a4>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	f023 0320 	bic.w	r3, r3, #32
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	2310      	movs	r3, #16
 800defa:	e7a7      	b.n	800de4c <_printf_i+0xf8>
 800defc:	4824      	ldr	r0, [pc, #144]	; (800df90 <_printf_i+0x23c>)
 800defe:	e7e4      	b.n	800deca <_printf_i+0x176>
 800df00:	4615      	mov	r5, r2
 800df02:	e7bd      	b.n	800de80 <_printf_i+0x12c>
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	6826      	ldr	r6, [r4, #0]
 800df08:	6961      	ldr	r1, [r4, #20]
 800df0a:	1d18      	adds	r0, r3, #4
 800df0c:	6028      	str	r0, [r5, #0]
 800df0e:	0635      	lsls	r5, r6, #24
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	d501      	bpl.n	800df18 <_printf_i+0x1c4>
 800df14:	6019      	str	r1, [r3, #0]
 800df16:	e002      	b.n	800df1e <_printf_i+0x1ca>
 800df18:	0670      	lsls	r0, r6, #25
 800df1a:	d5fb      	bpl.n	800df14 <_printf_i+0x1c0>
 800df1c:	8019      	strh	r1, [r3, #0]
 800df1e:	2300      	movs	r3, #0
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	4615      	mov	r5, r2
 800df24:	e7bc      	b.n	800dea0 <_printf_i+0x14c>
 800df26:	682b      	ldr	r3, [r5, #0]
 800df28:	1d1a      	adds	r2, r3, #4
 800df2a:	602a      	str	r2, [r5, #0]
 800df2c:	681d      	ldr	r5, [r3, #0]
 800df2e:	6862      	ldr	r2, [r4, #4]
 800df30:	2100      	movs	r1, #0
 800df32:	4628      	mov	r0, r5
 800df34:	f7f2 f96c 	bl	8000210 <memchr>
 800df38:	b108      	cbz	r0, 800df3e <_printf_i+0x1ea>
 800df3a:	1b40      	subs	r0, r0, r5
 800df3c:	6060      	str	r0, [r4, #4]
 800df3e:	6863      	ldr	r3, [r4, #4]
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	2300      	movs	r3, #0
 800df44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df48:	e7aa      	b.n	800dea0 <_printf_i+0x14c>
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	462a      	mov	r2, r5
 800df4e:	4649      	mov	r1, r9
 800df50:	4640      	mov	r0, r8
 800df52:	47d0      	blx	sl
 800df54:	3001      	adds	r0, #1
 800df56:	d0ad      	beq.n	800deb4 <_printf_i+0x160>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	079b      	lsls	r3, r3, #30
 800df5c:	d413      	bmi.n	800df86 <_printf_i+0x232>
 800df5e:	68e0      	ldr	r0, [r4, #12]
 800df60:	9b03      	ldr	r3, [sp, #12]
 800df62:	4298      	cmp	r0, r3
 800df64:	bfb8      	it	lt
 800df66:	4618      	movlt	r0, r3
 800df68:	e7a6      	b.n	800deb8 <_printf_i+0x164>
 800df6a:	2301      	movs	r3, #1
 800df6c:	4632      	mov	r2, r6
 800df6e:	4649      	mov	r1, r9
 800df70:	4640      	mov	r0, r8
 800df72:	47d0      	blx	sl
 800df74:	3001      	adds	r0, #1
 800df76:	d09d      	beq.n	800deb4 <_printf_i+0x160>
 800df78:	3501      	adds	r5, #1
 800df7a:	68e3      	ldr	r3, [r4, #12]
 800df7c:	9903      	ldr	r1, [sp, #12]
 800df7e:	1a5b      	subs	r3, r3, r1
 800df80:	42ab      	cmp	r3, r5
 800df82:	dcf2      	bgt.n	800df6a <_printf_i+0x216>
 800df84:	e7eb      	b.n	800df5e <_printf_i+0x20a>
 800df86:	2500      	movs	r5, #0
 800df88:	f104 0619 	add.w	r6, r4, #25
 800df8c:	e7f5      	b.n	800df7a <_printf_i+0x226>
 800df8e:	bf00      	nop
 800df90:	08015d34 	.word	0x08015d34
 800df94:	08015d45 	.word	0x08015d45

0800df98 <sniprintf>:
 800df98:	b40c      	push	{r2, r3}
 800df9a:	b530      	push	{r4, r5, lr}
 800df9c:	4b17      	ldr	r3, [pc, #92]	; (800dffc <sniprintf+0x64>)
 800df9e:	1e0c      	subs	r4, r1, #0
 800dfa0:	681d      	ldr	r5, [r3, #0]
 800dfa2:	b09d      	sub	sp, #116	; 0x74
 800dfa4:	da08      	bge.n	800dfb8 <sniprintf+0x20>
 800dfa6:	238b      	movs	r3, #139	; 0x8b
 800dfa8:	602b      	str	r3, [r5, #0]
 800dfaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfae:	b01d      	add	sp, #116	; 0x74
 800dfb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfb4:	b002      	add	sp, #8
 800dfb6:	4770      	bx	lr
 800dfb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dfbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dfc0:	bf14      	ite	ne
 800dfc2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800dfc6:	4623      	moveq	r3, r4
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	9307      	str	r3, [sp, #28]
 800dfcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfd0:	9002      	str	r0, [sp, #8]
 800dfd2:	9006      	str	r0, [sp, #24]
 800dfd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dfd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dfda:	ab21      	add	r3, sp, #132	; 0x84
 800dfdc:	a902      	add	r1, sp, #8
 800dfde:	4628      	mov	r0, r5
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	f001 fa19 	bl	800f418 <_svfiprintf_r>
 800dfe6:	1c43      	adds	r3, r0, #1
 800dfe8:	bfbc      	itt	lt
 800dfea:	238b      	movlt	r3, #139	; 0x8b
 800dfec:	602b      	strlt	r3, [r5, #0]
 800dfee:	2c00      	cmp	r4, #0
 800dff0:	d0dd      	beq.n	800dfae <sniprintf+0x16>
 800dff2:	9b02      	ldr	r3, [sp, #8]
 800dff4:	2200      	movs	r2, #0
 800dff6:	701a      	strb	r2, [r3, #0]
 800dff8:	e7d9      	b.n	800dfae <sniprintf+0x16>
 800dffa:	bf00      	nop
 800dffc:	2000009c 	.word	0x2000009c

0800e000 <__malloc_lock>:
 800e000:	4801      	ldr	r0, [pc, #4]	; (800e008 <__malloc_lock+0x8>)
 800e002:	f000 baba 	b.w	800e57a <__retarget_lock_acquire_recursive>
 800e006:	bf00      	nop
 800e008:	200097cc 	.word	0x200097cc

0800e00c <__malloc_unlock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	; (800e014 <__malloc_unlock+0x8>)
 800e00e:	f000 bab5 	b.w	800e57c <__retarget_lock_release_recursive>
 800e012:	bf00      	nop
 800e014:	200097cc 	.word	0x200097cc

0800e018 <siprintf>:
 800e018:	b40e      	push	{r1, r2, r3}
 800e01a:	b500      	push	{lr}
 800e01c:	b09c      	sub	sp, #112	; 0x70
 800e01e:	ab1d      	add	r3, sp, #116	; 0x74
 800e020:	9002      	str	r0, [sp, #8]
 800e022:	9006      	str	r0, [sp, #24]
 800e024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e028:	4809      	ldr	r0, [pc, #36]	; (800e050 <siprintf+0x38>)
 800e02a:	9107      	str	r1, [sp, #28]
 800e02c:	9104      	str	r1, [sp, #16]
 800e02e:	4909      	ldr	r1, [pc, #36]	; (800e054 <siprintf+0x3c>)
 800e030:	f853 2b04 	ldr.w	r2, [r3], #4
 800e034:	9105      	str	r1, [sp, #20]
 800e036:	6800      	ldr	r0, [r0, #0]
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	a902      	add	r1, sp, #8
 800e03c:	f001 f9ec 	bl	800f418 <_svfiprintf_r>
 800e040:	9b02      	ldr	r3, [sp, #8]
 800e042:	2200      	movs	r2, #0
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	b01c      	add	sp, #112	; 0x70
 800e048:	f85d eb04 	ldr.w	lr, [sp], #4
 800e04c:	b003      	add	sp, #12
 800e04e:	4770      	bx	lr
 800e050:	2000009c 	.word	0x2000009c
 800e054:	ffff0208 	.word	0xffff0208

0800e058 <siscanf>:
 800e058:	b40e      	push	{r1, r2, r3}
 800e05a:	b510      	push	{r4, lr}
 800e05c:	b09f      	sub	sp, #124	; 0x7c
 800e05e:	ac21      	add	r4, sp, #132	; 0x84
 800e060:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e064:	f854 2b04 	ldr.w	r2, [r4], #4
 800e068:	9201      	str	r2, [sp, #4]
 800e06a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e06e:	9004      	str	r0, [sp, #16]
 800e070:	9008      	str	r0, [sp, #32]
 800e072:	f7f2 f91d 	bl	80002b0 <strlen>
 800e076:	4b0c      	ldr	r3, [pc, #48]	; (800e0a8 <siscanf+0x50>)
 800e078:	9005      	str	r0, [sp, #20]
 800e07a:	9009      	str	r0, [sp, #36]	; 0x24
 800e07c:	930d      	str	r3, [sp, #52]	; 0x34
 800e07e:	480b      	ldr	r0, [pc, #44]	; (800e0ac <siscanf+0x54>)
 800e080:	9a01      	ldr	r2, [sp, #4]
 800e082:	6800      	ldr	r0, [r0, #0]
 800e084:	9403      	str	r4, [sp, #12]
 800e086:	2300      	movs	r3, #0
 800e088:	9311      	str	r3, [sp, #68]	; 0x44
 800e08a:	9316      	str	r3, [sp, #88]	; 0x58
 800e08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e090:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e094:	a904      	add	r1, sp, #16
 800e096:	4623      	mov	r3, r4
 800e098:	f001 fb16 	bl	800f6c8 <__ssvfiscanf_r>
 800e09c:	b01f      	add	sp, #124	; 0x7c
 800e09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a2:	b003      	add	sp, #12
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	0800e0d3 	.word	0x0800e0d3
 800e0ac:	2000009c 	.word	0x2000009c

0800e0b0 <__sread>:
 800e0b0:	b510      	push	{r4, lr}
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b8:	f000 fa00 	bl	800e4bc <_read_r>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	bfab      	itete	ge
 800e0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0c4:	181b      	addge	r3, r3, r0
 800e0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0ca:	bfac      	ite	ge
 800e0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0ce:	81a3      	strhlt	r3, [r4, #12]
 800e0d0:	bd10      	pop	{r4, pc}

0800e0d2 <__seofread>:
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	4770      	bx	lr

0800e0d6 <__swrite>:
 800e0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0da:	461f      	mov	r7, r3
 800e0dc:	898b      	ldrh	r3, [r1, #12]
 800e0de:	05db      	lsls	r3, r3, #23
 800e0e0:	4605      	mov	r5, r0
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	4616      	mov	r6, r2
 800e0e6:	d505      	bpl.n	800e0f4 <__swrite+0x1e>
 800e0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f000 f9d2 	bl	800e498 <_lseek_r>
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0fe:	81a3      	strh	r3, [r4, #12]
 800e100:	4632      	mov	r2, r6
 800e102:	463b      	mov	r3, r7
 800e104:	4628      	mov	r0, r5
 800e106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e10a:	f000 b9f9 	b.w	800e500 <_write_r>

0800e10e <__sseek>:
 800e10e:	b510      	push	{r4, lr}
 800e110:	460c      	mov	r4, r1
 800e112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e116:	f000 f9bf 	bl	800e498 <_lseek_r>
 800e11a:	1c43      	adds	r3, r0, #1
 800e11c:	89a3      	ldrh	r3, [r4, #12]
 800e11e:	bf15      	itete	ne
 800e120:	6560      	strne	r0, [r4, #84]	; 0x54
 800e122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e12a:	81a3      	strheq	r3, [r4, #12]
 800e12c:	bf18      	it	ne
 800e12e:	81a3      	strhne	r3, [r4, #12]
 800e130:	bd10      	pop	{r4, pc}

0800e132 <__sclose>:
 800e132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e136:	f000 b99f 	b.w	800e478 <_close_r>
	...

0800e13c <std>:
 800e13c:	2300      	movs	r3, #0
 800e13e:	b510      	push	{r4, lr}
 800e140:	4604      	mov	r4, r0
 800e142:	e9c0 3300 	strd	r3, r3, [r0]
 800e146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e14a:	6083      	str	r3, [r0, #8]
 800e14c:	8181      	strh	r1, [r0, #12]
 800e14e:	6643      	str	r3, [r0, #100]	; 0x64
 800e150:	81c2      	strh	r2, [r0, #14]
 800e152:	6183      	str	r3, [r0, #24]
 800e154:	4619      	mov	r1, r3
 800e156:	2208      	movs	r2, #8
 800e158:	305c      	adds	r0, #92	; 0x5c
 800e15a:	f000 f981 	bl	800e460 <memset>
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <std+0x58>)
 800e160:	6263      	str	r3, [r4, #36]	; 0x24
 800e162:	4b0d      	ldr	r3, [pc, #52]	; (800e198 <std+0x5c>)
 800e164:	62a3      	str	r3, [r4, #40]	; 0x28
 800e166:	4b0d      	ldr	r3, [pc, #52]	; (800e19c <std+0x60>)
 800e168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e16a:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <std+0x64>)
 800e16c:	6323      	str	r3, [r4, #48]	; 0x30
 800e16e:	4b0d      	ldr	r3, [pc, #52]	; (800e1a4 <std+0x68>)
 800e170:	6224      	str	r4, [r4, #32]
 800e172:	429c      	cmp	r4, r3
 800e174:	d006      	beq.n	800e184 <std+0x48>
 800e176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e17a:	4294      	cmp	r4, r2
 800e17c:	d002      	beq.n	800e184 <std+0x48>
 800e17e:	33d0      	adds	r3, #208	; 0xd0
 800e180:	429c      	cmp	r4, r3
 800e182:	d105      	bne.n	800e190 <std+0x54>
 800e184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e18c:	f000 b9f4 	b.w	800e578 <__retarget_lock_init_recursive>
 800e190:	bd10      	pop	{r4, pc}
 800e192:	bf00      	nop
 800e194:	0800e0b1 	.word	0x0800e0b1
 800e198:	0800e0d7 	.word	0x0800e0d7
 800e19c:	0800e10f 	.word	0x0800e10f
 800e1a0:	0800e133 	.word	0x0800e133
 800e1a4:	2000968c 	.word	0x2000968c

0800e1a8 <stdio_exit_handler>:
 800e1a8:	4a02      	ldr	r2, [pc, #8]	; (800e1b4 <stdio_exit_handler+0xc>)
 800e1aa:	4903      	ldr	r1, [pc, #12]	; (800e1b8 <stdio_exit_handler+0x10>)
 800e1ac:	4803      	ldr	r0, [pc, #12]	; (800e1bc <stdio_exit_handler+0x14>)
 800e1ae:	f000 b8ed 	b.w	800e38c <_fwalk_sglue>
 800e1b2:	bf00      	nop
 800e1b4:	20000044 	.word	0x20000044
 800e1b8:	0801005d 	.word	0x0801005d
 800e1bc:	20000050 	.word	0x20000050

0800e1c0 <cleanup_stdio>:
 800e1c0:	6841      	ldr	r1, [r0, #4]
 800e1c2:	4b0c      	ldr	r3, [pc, #48]	; (800e1f4 <cleanup_stdio+0x34>)
 800e1c4:	4299      	cmp	r1, r3
 800e1c6:	b510      	push	{r4, lr}
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	d001      	beq.n	800e1d0 <cleanup_stdio+0x10>
 800e1cc:	f001 ff46 	bl	801005c <_fflush_r>
 800e1d0:	68a1      	ldr	r1, [r4, #8]
 800e1d2:	4b09      	ldr	r3, [pc, #36]	; (800e1f8 <cleanup_stdio+0x38>)
 800e1d4:	4299      	cmp	r1, r3
 800e1d6:	d002      	beq.n	800e1de <cleanup_stdio+0x1e>
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f001 ff3f 	bl	801005c <_fflush_r>
 800e1de:	68e1      	ldr	r1, [r4, #12]
 800e1e0:	4b06      	ldr	r3, [pc, #24]	; (800e1fc <cleanup_stdio+0x3c>)
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	d004      	beq.n	800e1f0 <cleanup_stdio+0x30>
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1ec:	f001 bf36 	b.w	801005c <_fflush_r>
 800e1f0:	bd10      	pop	{r4, pc}
 800e1f2:	bf00      	nop
 800e1f4:	2000968c 	.word	0x2000968c
 800e1f8:	200096f4 	.word	0x200096f4
 800e1fc:	2000975c 	.word	0x2000975c

0800e200 <global_stdio_init.part.0>:
 800e200:	b510      	push	{r4, lr}
 800e202:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <global_stdio_init.part.0+0x30>)
 800e204:	4c0b      	ldr	r4, [pc, #44]	; (800e234 <global_stdio_init.part.0+0x34>)
 800e206:	4a0c      	ldr	r2, [pc, #48]	; (800e238 <global_stdio_init.part.0+0x38>)
 800e208:	601a      	str	r2, [r3, #0]
 800e20a:	4620      	mov	r0, r4
 800e20c:	2200      	movs	r2, #0
 800e20e:	2104      	movs	r1, #4
 800e210:	f7ff ff94 	bl	800e13c <std>
 800e214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e218:	2201      	movs	r2, #1
 800e21a:	2109      	movs	r1, #9
 800e21c:	f7ff ff8e 	bl	800e13c <std>
 800e220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e224:	2202      	movs	r2, #2
 800e226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e22a:	2112      	movs	r1, #18
 800e22c:	f7ff bf86 	b.w	800e13c <std>
 800e230:	200097c4 	.word	0x200097c4
 800e234:	2000968c 	.word	0x2000968c
 800e238:	0800e1a9 	.word	0x0800e1a9

0800e23c <__sfp_lock_acquire>:
 800e23c:	4801      	ldr	r0, [pc, #4]	; (800e244 <__sfp_lock_acquire+0x8>)
 800e23e:	f000 b99c 	b.w	800e57a <__retarget_lock_acquire_recursive>
 800e242:	bf00      	nop
 800e244:	200097cd 	.word	0x200097cd

0800e248 <__sfp_lock_release>:
 800e248:	4801      	ldr	r0, [pc, #4]	; (800e250 <__sfp_lock_release+0x8>)
 800e24a:	f000 b997 	b.w	800e57c <__retarget_lock_release_recursive>
 800e24e:	bf00      	nop
 800e250:	200097cd 	.word	0x200097cd

0800e254 <__sinit>:
 800e254:	b510      	push	{r4, lr}
 800e256:	4604      	mov	r4, r0
 800e258:	f7ff fff0 	bl	800e23c <__sfp_lock_acquire>
 800e25c:	6a23      	ldr	r3, [r4, #32]
 800e25e:	b11b      	cbz	r3, 800e268 <__sinit+0x14>
 800e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e264:	f7ff bff0 	b.w	800e248 <__sfp_lock_release>
 800e268:	4b04      	ldr	r3, [pc, #16]	; (800e27c <__sinit+0x28>)
 800e26a:	6223      	str	r3, [r4, #32]
 800e26c:	4b04      	ldr	r3, [pc, #16]	; (800e280 <__sinit+0x2c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1f5      	bne.n	800e260 <__sinit+0xc>
 800e274:	f7ff ffc4 	bl	800e200 <global_stdio_init.part.0>
 800e278:	e7f2      	b.n	800e260 <__sinit+0xc>
 800e27a:	bf00      	nop
 800e27c:	0800e1c1 	.word	0x0800e1c1
 800e280:	200097c4 	.word	0x200097c4

0800e284 <_strtol_l.constprop.0>:
 800e284:	2b01      	cmp	r3, #1
 800e286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28a:	d001      	beq.n	800e290 <_strtol_l.constprop.0+0xc>
 800e28c:	2b24      	cmp	r3, #36	; 0x24
 800e28e:	d906      	bls.n	800e29e <_strtol_l.constprop.0+0x1a>
 800e290:	f000 f948 	bl	800e524 <__errno>
 800e294:	2316      	movs	r3, #22
 800e296:	6003      	str	r3, [r0, #0]
 800e298:	2000      	movs	r0, #0
 800e29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e384 <_strtol_l.constprop.0+0x100>
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	462e      	mov	r6, r5
 800e2a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2aa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e2ae:	f017 0708 	ands.w	r7, r7, #8
 800e2b2:	d1f7      	bne.n	800e2a4 <_strtol_l.constprop.0+0x20>
 800e2b4:	2c2d      	cmp	r4, #45	; 0x2d
 800e2b6:	d132      	bne.n	800e31e <_strtol_l.constprop.0+0x9a>
 800e2b8:	782c      	ldrb	r4, [r5, #0]
 800e2ba:	2701      	movs	r7, #1
 800e2bc:	1cb5      	adds	r5, r6, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d05b      	beq.n	800e37a <_strtol_l.constprop.0+0xf6>
 800e2c2:	2b10      	cmp	r3, #16
 800e2c4:	d109      	bne.n	800e2da <_strtol_l.constprop.0+0x56>
 800e2c6:	2c30      	cmp	r4, #48	; 0x30
 800e2c8:	d107      	bne.n	800e2da <_strtol_l.constprop.0+0x56>
 800e2ca:	782c      	ldrb	r4, [r5, #0]
 800e2cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2d0:	2c58      	cmp	r4, #88	; 0x58
 800e2d2:	d14d      	bne.n	800e370 <_strtol_l.constprop.0+0xec>
 800e2d4:	786c      	ldrb	r4, [r5, #1]
 800e2d6:	2310      	movs	r3, #16
 800e2d8:	3502      	adds	r5, #2
 800e2da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e2de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e2e2:	f04f 0e00 	mov.w	lr, #0
 800e2e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e2ea:	4676      	mov	r6, lr
 800e2ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800e2f0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e2f4:	f1bc 0f09 	cmp.w	ip, #9
 800e2f8:	d816      	bhi.n	800e328 <_strtol_l.constprop.0+0xa4>
 800e2fa:	4664      	mov	r4, ip
 800e2fc:	42a3      	cmp	r3, r4
 800e2fe:	dd24      	ble.n	800e34a <_strtol_l.constprop.0+0xc6>
 800e300:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e304:	d008      	beq.n	800e318 <_strtol_l.constprop.0+0x94>
 800e306:	45b1      	cmp	r9, r6
 800e308:	d31c      	bcc.n	800e344 <_strtol_l.constprop.0+0xc0>
 800e30a:	d101      	bne.n	800e310 <_strtol_l.constprop.0+0x8c>
 800e30c:	45a2      	cmp	sl, r4
 800e30e:	db19      	blt.n	800e344 <_strtol_l.constprop.0+0xc0>
 800e310:	fb06 4603 	mla	r6, r6, r3, r4
 800e314:	f04f 0e01 	mov.w	lr, #1
 800e318:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e31c:	e7e8      	b.n	800e2f0 <_strtol_l.constprop.0+0x6c>
 800e31e:	2c2b      	cmp	r4, #43	; 0x2b
 800e320:	bf04      	itt	eq
 800e322:	782c      	ldrbeq	r4, [r5, #0]
 800e324:	1cb5      	addeq	r5, r6, #2
 800e326:	e7ca      	b.n	800e2be <_strtol_l.constprop.0+0x3a>
 800e328:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e32c:	f1bc 0f19 	cmp.w	ip, #25
 800e330:	d801      	bhi.n	800e336 <_strtol_l.constprop.0+0xb2>
 800e332:	3c37      	subs	r4, #55	; 0x37
 800e334:	e7e2      	b.n	800e2fc <_strtol_l.constprop.0+0x78>
 800e336:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e33a:	f1bc 0f19 	cmp.w	ip, #25
 800e33e:	d804      	bhi.n	800e34a <_strtol_l.constprop.0+0xc6>
 800e340:	3c57      	subs	r4, #87	; 0x57
 800e342:	e7db      	b.n	800e2fc <_strtol_l.constprop.0+0x78>
 800e344:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e348:	e7e6      	b.n	800e318 <_strtol_l.constprop.0+0x94>
 800e34a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e34e:	d105      	bne.n	800e35c <_strtol_l.constprop.0+0xd8>
 800e350:	2322      	movs	r3, #34	; 0x22
 800e352:	6003      	str	r3, [r0, #0]
 800e354:	4646      	mov	r6, r8
 800e356:	b942      	cbnz	r2, 800e36a <_strtol_l.constprop.0+0xe6>
 800e358:	4630      	mov	r0, r6
 800e35a:	e79e      	b.n	800e29a <_strtol_l.constprop.0+0x16>
 800e35c:	b107      	cbz	r7, 800e360 <_strtol_l.constprop.0+0xdc>
 800e35e:	4276      	negs	r6, r6
 800e360:	2a00      	cmp	r2, #0
 800e362:	d0f9      	beq.n	800e358 <_strtol_l.constprop.0+0xd4>
 800e364:	f1be 0f00 	cmp.w	lr, #0
 800e368:	d000      	beq.n	800e36c <_strtol_l.constprop.0+0xe8>
 800e36a:	1e69      	subs	r1, r5, #1
 800e36c:	6011      	str	r1, [r2, #0]
 800e36e:	e7f3      	b.n	800e358 <_strtol_l.constprop.0+0xd4>
 800e370:	2430      	movs	r4, #48	; 0x30
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1b1      	bne.n	800e2da <_strtol_l.constprop.0+0x56>
 800e376:	2308      	movs	r3, #8
 800e378:	e7af      	b.n	800e2da <_strtol_l.constprop.0+0x56>
 800e37a:	2c30      	cmp	r4, #48	; 0x30
 800e37c:	d0a5      	beq.n	800e2ca <_strtol_l.constprop.0+0x46>
 800e37e:	230a      	movs	r3, #10
 800e380:	e7ab      	b.n	800e2da <_strtol_l.constprop.0+0x56>
 800e382:	bf00      	nop
 800e384:	08015d57 	.word	0x08015d57

0800e388 <_strtol_r>:
 800e388:	f7ff bf7c 	b.w	800e284 <_strtol_l.constprop.0>

0800e38c <_fwalk_sglue>:
 800e38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e390:	4607      	mov	r7, r0
 800e392:	4688      	mov	r8, r1
 800e394:	4614      	mov	r4, r2
 800e396:	2600      	movs	r6, #0
 800e398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e39c:	f1b9 0901 	subs.w	r9, r9, #1
 800e3a0:	d505      	bpl.n	800e3ae <_fwalk_sglue+0x22>
 800e3a2:	6824      	ldr	r4, [r4, #0]
 800e3a4:	2c00      	cmp	r4, #0
 800e3a6:	d1f7      	bne.n	800e398 <_fwalk_sglue+0xc>
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ae:	89ab      	ldrh	r3, [r5, #12]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d907      	bls.n	800e3c4 <_fwalk_sglue+0x38>
 800e3b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	d003      	beq.n	800e3c4 <_fwalk_sglue+0x38>
 800e3bc:	4629      	mov	r1, r5
 800e3be:	4638      	mov	r0, r7
 800e3c0:	47c0      	blx	r8
 800e3c2:	4306      	orrs	r6, r0
 800e3c4:	3568      	adds	r5, #104	; 0x68
 800e3c6:	e7e9      	b.n	800e39c <_fwalk_sglue+0x10>

0800e3c8 <_vsniprintf_r>:
 800e3c8:	b530      	push	{r4, r5, lr}
 800e3ca:	4614      	mov	r4, r2
 800e3cc:	2c00      	cmp	r4, #0
 800e3ce:	b09b      	sub	sp, #108	; 0x6c
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	da05      	bge.n	800e3e2 <_vsniprintf_r+0x1a>
 800e3d6:	238b      	movs	r3, #139	; 0x8b
 800e3d8:	6003      	str	r3, [r0, #0]
 800e3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3de:	b01b      	add	sp, #108	; 0x6c
 800e3e0:	bd30      	pop	{r4, r5, pc}
 800e3e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e3e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e3ea:	bf14      	ite	ne
 800e3ec:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e3f0:	4623      	moveq	r3, r4
 800e3f2:	9302      	str	r3, [sp, #8]
 800e3f4:	9305      	str	r3, [sp, #20]
 800e3f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3fa:	9100      	str	r1, [sp, #0]
 800e3fc:	9104      	str	r1, [sp, #16]
 800e3fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e402:	4669      	mov	r1, sp
 800e404:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e406:	f001 f807 	bl	800f418 <_svfiprintf_r>
 800e40a:	1c43      	adds	r3, r0, #1
 800e40c:	bfbc      	itt	lt
 800e40e:	238b      	movlt	r3, #139	; 0x8b
 800e410:	602b      	strlt	r3, [r5, #0]
 800e412:	2c00      	cmp	r4, #0
 800e414:	d0e3      	beq.n	800e3de <_vsniprintf_r+0x16>
 800e416:	9b00      	ldr	r3, [sp, #0]
 800e418:	2200      	movs	r2, #0
 800e41a:	701a      	strb	r2, [r3, #0]
 800e41c:	e7df      	b.n	800e3de <_vsniprintf_r+0x16>
	...

0800e420 <vsniprintf>:
 800e420:	b507      	push	{r0, r1, r2, lr}
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	4613      	mov	r3, r2
 800e426:	460a      	mov	r2, r1
 800e428:	4601      	mov	r1, r0
 800e42a:	4803      	ldr	r0, [pc, #12]	; (800e438 <vsniprintf+0x18>)
 800e42c:	6800      	ldr	r0, [r0, #0]
 800e42e:	f7ff ffcb 	bl	800e3c8 <_vsniprintf_r>
 800e432:	b003      	add	sp, #12
 800e434:	f85d fb04 	ldr.w	pc, [sp], #4
 800e438:	2000009c 	.word	0x2000009c

0800e43c <iprintf>:
 800e43c:	b40f      	push	{r0, r1, r2, r3}
 800e43e:	b507      	push	{r0, r1, r2, lr}
 800e440:	4906      	ldr	r1, [pc, #24]	; (800e45c <iprintf+0x20>)
 800e442:	ab04      	add	r3, sp, #16
 800e444:	6808      	ldr	r0, [r1, #0]
 800e446:	f853 2b04 	ldr.w	r2, [r3], #4
 800e44a:	6881      	ldr	r1, [r0, #8]
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	f001 fadd 	bl	800fa0c <_vfiprintf_r>
 800e452:	b003      	add	sp, #12
 800e454:	f85d eb04 	ldr.w	lr, [sp], #4
 800e458:	b004      	add	sp, #16
 800e45a:	4770      	bx	lr
 800e45c:	2000009c 	.word	0x2000009c

0800e460 <memset>:
 800e460:	4402      	add	r2, r0
 800e462:	4603      	mov	r3, r0
 800e464:	4293      	cmp	r3, r2
 800e466:	d100      	bne.n	800e46a <memset+0xa>
 800e468:	4770      	bx	lr
 800e46a:	f803 1b01 	strb.w	r1, [r3], #1
 800e46e:	e7f9      	b.n	800e464 <memset+0x4>

0800e470 <_localeconv_r>:
 800e470:	4800      	ldr	r0, [pc, #0]	; (800e474 <_localeconv_r+0x4>)
 800e472:	4770      	bx	lr
 800e474:	20000190 	.word	0x20000190

0800e478 <_close_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d06      	ldr	r5, [pc, #24]	; (800e494 <_close_r+0x1c>)
 800e47c:	2300      	movs	r3, #0
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	f7f7 f91d 	bl	80056c2 <_close>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_close_r+0x1a>
 800e48c:	682b      	ldr	r3, [r5, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_close_r+0x1a>
 800e490:	6023      	str	r3, [r4, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	200097c8 	.word	0x200097c8

0800e498 <_lseek_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4d07      	ldr	r5, [pc, #28]	; (800e4b8 <_lseek_r+0x20>)
 800e49c:	4604      	mov	r4, r0
 800e49e:	4608      	mov	r0, r1
 800e4a0:	4611      	mov	r1, r2
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	602a      	str	r2, [r5, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	f7f7 f932 	bl	8005710 <_lseek>
 800e4ac:	1c43      	adds	r3, r0, #1
 800e4ae:	d102      	bne.n	800e4b6 <_lseek_r+0x1e>
 800e4b0:	682b      	ldr	r3, [r5, #0]
 800e4b2:	b103      	cbz	r3, 800e4b6 <_lseek_r+0x1e>
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	200097c8 	.word	0x200097c8

0800e4bc <_read_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d07      	ldr	r5, [pc, #28]	; (800e4dc <_read_r+0x20>)
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	602a      	str	r2, [r5, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f7f7 f8c0 	bl	8005650 <_read>
 800e4d0:	1c43      	adds	r3, r0, #1
 800e4d2:	d102      	bne.n	800e4da <_read_r+0x1e>
 800e4d4:	682b      	ldr	r3, [r5, #0]
 800e4d6:	b103      	cbz	r3, 800e4da <_read_r+0x1e>
 800e4d8:	6023      	str	r3, [r4, #0]
 800e4da:	bd38      	pop	{r3, r4, r5, pc}
 800e4dc:	200097c8 	.word	0x200097c8

0800e4e0 <_sbrk_r>:
 800e4e0:	b538      	push	{r3, r4, r5, lr}
 800e4e2:	4d06      	ldr	r5, [pc, #24]	; (800e4fc <_sbrk_r+0x1c>)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	602b      	str	r3, [r5, #0]
 800e4ec:	f7f7 f91e 	bl	800572c <_sbrk>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d102      	bne.n	800e4fa <_sbrk_r+0x1a>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b103      	cbz	r3, 800e4fa <_sbrk_r+0x1a>
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	bd38      	pop	{r3, r4, r5, pc}
 800e4fc:	200097c8 	.word	0x200097c8

0800e500 <_write_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	4d07      	ldr	r5, [pc, #28]	; (800e520 <_write_r+0x20>)
 800e504:	4604      	mov	r4, r0
 800e506:	4608      	mov	r0, r1
 800e508:	4611      	mov	r1, r2
 800e50a:	2200      	movs	r2, #0
 800e50c:	602a      	str	r2, [r5, #0]
 800e50e:	461a      	mov	r2, r3
 800e510:	f7f7 f8bb 	bl	800568a <_write>
 800e514:	1c43      	adds	r3, r0, #1
 800e516:	d102      	bne.n	800e51e <_write_r+0x1e>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	b103      	cbz	r3, 800e51e <_write_r+0x1e>
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	bd38      	pop	{r3, r4, r5, pc}
 800e520:	200097c8 	.word	0x200097c8

0800e524 <__errno>:
 800e524:	4b01      	ldr	r3, [pc, #4]	; (800e52c <__errno+0x8>)
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	2000009c 	.word	0x2000009c

0800e530 <__libc_init_array>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	4d0d      	ldr	r5, [pc, #52]	; (800e568 <__libc_init_array+0x38>)
 800e534:	4c0d      	ldr	r4, [pc, #52]	; (800e56c <__libc_init_array+0x3c>)
 800e536:	1b64      	subs	r4, r4, r5
 800e538:	10a4      	asrs	r4, r4, #2
 800e53a:	2600      	movs	r6, #0
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	d109      	bne.n	800e554 <__libc_init_array+0x24>
 800e540:	4d0b      	ldr	r5, [pc, #44]	; (800e570 <__libc_init_array+0x40>)
 800e542:	4c0c      	ldr	r4, [pc, #48]	; (800e574 <__libc_init_array+0x44>)
 800e544:	f003 f80c 	bl	8011560 <_init>
 800e548:	1b64      	subs	r4, r4, r5
 800e54a:	10a4      	asrs	r4, r4, #2
 800e54c:	2600      	movs	r6, #0
 800e54e:	42a6      	cmp	r6, r4
 800e550:	d105      	bne.n	800e55e <__libc_init_array+0x2e>
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	f855 3b04 	ldr.w	r3, [r5], #4
 800e558:	4798      	blx	r3
 800e55a:	3601      	adds	r6, #1
 800e55c:	e7ee      	b.n	800e53c <__libc_init_array+0xc>
 800e55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e562:	4798      	blx	r3
 800e564:	3601      	adds	r6, #1
 800e566:	e7f2      	b.n	800e54e <__libc_init_array+0x1e>
 800e568:	080160b8 	.word	0x080160b8
 800e56c:	080160b8 	.word	0x080160b8
 800e570:	080160b8 	.word	0x080160b8
 800e574:	080160bc 	.word	0x080160bc

0800e578 <__retarget_lock_init_recursive>:
 800e578:	4770      	bx	lr

0800e57a <__retarget_lock_acquire_recursive>:
 800e57a:	4770      	bx	lr

0800e57c <__retarget_lock_release_recursive>:
 800e57c:	4770      	bx	lr

0800e57e <memcpy>:
 800e57e:	440a      	add	r2, r1
 800e580:	4291      	cmp	r1, r2
 800e582:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e586:	d100      	bne.n	800e58a <memcpy+0xc>
 800e588:	4770      	bx	lr
 800e58a:	b510      	push	{r4, lr}
 800e58c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e590:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e594:	4291      	cmp	r1, r2
 800e596:	d1f9      	bne.n	800e58c <memcpy+0xe>
 800e598:	bd10      	pop	{r4, pc}
	...

0800e59c <__assert_func>:
 800e59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e59e:	4614      	mov	r4, r2
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <__assert_func+0x2c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	68d8      	ldr	r0, [r3, #12]
 800e5aa:	b14c      	cbz	r4, 800e5c0 <__assert_func+0x24>
 800e5ac:	4b07      	ldr	r3, [pc, #28]	; (800e5cc <__assert_func+0x30>)
 800e5ae:	9100      	str	r1, [sp, #0]
 800e5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5b4:	4906      	ldr	r1, [pc, #24]	; (800e5d0 <__assert_func+0x34>)
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f002 f8f4 	bl	80107a4 <fiprintf>
 800e5bc:	f002 fb16 	bl	8010bec <abort>
 800e5c0:	4b04      	ldr	r3, [pc, #16]	; (800e5d4 <__assert_func+0x38>)
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	e7f3      	b.n	800e5ae <__assert_func+0x12>
 800e5c6:	bf00      	nop
 800e5c8:	2000009c 	.word	0x2000009c
 800e5cc:	08015e57 	.word	0x08015e57
 800e5d0:	08015e64 	.word	0x08015e64
 800e5d4:	08015e92 	.word	0x08015e92

0800e5d8 <quorem>:
 800e5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5dc:	6903      	ldr	r3, [r0, #16]
 800e5de:	690c      	ldr	r4, [r1, #16]
 800e5e0:	42a3      	cmp	r3, r4
 800e5e2:	4607      	mov	r7, r0
 800e5e4:	db7e      	blt.n	800e6e4 <quorem+0x10c>
 800e5e6:	3c01      	subs	r4, #1
 800e5e8:	f101 0814 	add.w	r8, r1, #20
 800e5ec:	f100 0514 	add.w	r5, r0, #20
 800e5f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5fe:	3301      	adds	r3, #1
 800e600:	429a      	cmp	r2, r3
 800e602:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e60a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e60e:	d331      	bcc.n	800e674 <quorem+0x9c>
 800e610:	f04f 0e00 	mov.w	lr, #0
 800e614:	4640      	mov	r0, r8
 800e616:	46ac      	mov	ip, r5
 800e618:	46f2      	mov	sl, lr
 800e61a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e61e:	b293      	uxth	r3, r2
 800e620:	fb06 e303 	mla	r3, r6, r3, lr
 800e624:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e628:	0c1a      	lsrs	r2, r3, #16
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	ebaa 0303 	sub.w	r3, sl, r3
 800e630:	f8dc a000 	ldr.w	sl, [ip]
 800e634:	fa13 f38a 	uxtah	r3, r3, sl
 800e638:	fb06 220e 	mla	r2, r6, lr, r2
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	9b00      	ldr	r3, [sp, #0]
 800e640:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e644:	b292      	uxth	r2, r2
 800e646:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e64a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e64e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e652:	4581      	cmp	r9, r0
 800e654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e658:	f84c 3b04 	str.w	r3, [ip], #4
 800e65c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e660:	d2db      	bcs.n	800e61a <quorem+0x42>
 800e662:	f855 300b 	ldr.w	r3, [r5, fp]
 800e666:	b92b      	cbnz	r3, 800e674 <quorem+0x9c>
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	3b04      	subs	r3, #4
 800e66c:	429d      	cmp	r5, r3
 800e66e:	461a      	mov	r2, r3
 800e670:	d32c      	bcc.n	800e6cc <quorem+0xf4>
 800e672:	613c      	str	r4, [r7, #16]
 800e674:	4638      	mov	r0, r7
 800e676:	f001 ff95 	bl	80105a4 <__mcmp>
 800e67a:	2800      	cmp	r0, #0
 800e67c:	db22      	blt.n	800e6c4 <quorem+0xec>
 800e67e:	3601      	adds	r6, #1
 800e680:	4629      	mov	r1, r5
 800e682:	2000      	movs	r0, #0
 800e684:	f858 2b04 	ldr.w	r2, [r8], #4
 800e688:	f8d1 c000 	ldr.w	ip, [r1]
 800e68c:	b293      	uxth	r3, r2
 800e68e:	1ac3      	subs	r3, r0, r3
 800e690:	0c12      	lsrs	r2, r2, #16
 800e692:	fa13 f38c 	uxtah	r3, r3, ip
 800e696:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e69a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6a4:	45c1      	cmp	r9, r8
 800e6a6:	f841 3b04 	str.w	r3, [r1], #4
 800e6aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e6ae:	d2e9      	bcs.n	800e684 <quorem+0xac>
 800e6b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6b8:	b922      	cbnz	r2, 800e6c4 <quorem+0xec>
 800e6ba:	3b04      	subs	r3, #4
 800e6bc:	429d      	cmp	r5, r3
 800e6be:	461a      	mov	r2, r3
 800e6c0:	d30a      	bcc.n	800e6d8 <quorem+0x100>
 800e6c2:	613c      	str	r4, [r7, #16]
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	b003      	add	sp, #12
 800e6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6cc:	6812      	ldr	r2, [r2, #0]
 800e6ce:	3b04      	subs	r3, #4
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	d1ce      	bne.n	800e672 <quorem+0x9a>
 800e6d4:	3c01      	subs	r4, #1
 800e6d6:	e7c9      	b.n	800e66c <quorem+0x94>
 800e6d8:	6812      	ldr	r2, [r2, #0]
 800e6da:	3b04      	subs	r3, #4
 800e6dc:	2a00      	cmp	r2, #0
 800e6de:	d1f0      	bne.n	800e6c2 <quorem+0xea>
 800e6e0:	3c01      	subs	r4, #1
 800e6e2:	e7eb      	b.n	800e6bc <quorem+0xe4>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e7ee      	b.n	800e6c6 <quorem+0xee>

0800e6e8 <_dtoa_r>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	ed2d 8b04 	vpush	{d8-d9}
 800e6f0:	69c5      	ldr	r5, [r0, #28]
 800e6f2:	b093      	sub	sp, #76	; 0x4c
 800e6f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e6f8:	ec57 6b10 	vmov	r6, r7, d0
 800e6fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e700:	9107      	str	r1, [sp, #28]
 800e702:	4604      	mov	r4, r0
 800e704:	920a      	str	r2, [sp, #40]	; 0x28
 800e706:	930d      	str	r3, [sp, #52]	; 0x34
 800e708:	b975      	cbnz	r5, 800e728 <_dtoa_r+0x40>
 800e70a:	2010      	movs	r0, #16
 800e70c:	f7ff fa0c 	bl	800db28 <malloc>
 800e710:	4602      	mov	r2, r0
 800e712:	61e0      	str	r0, [r4, #28]
 800e714:	b920      	cbnz	r0, 800e720 <_dtoa_r+0x38>
 800e716:	4bae      	ldr	r3, [pc, #696]	; (800e9d0 <_dtoa_r+0x2e8>)
 800e718:	21ef      	movs	r1, #239	; 0xef
 800e71a:	48ae      	ldr	r0, [pc, #696]	; (800e9d4 <_dtoa_r+0x2ec>)
 800e71c:	f7ff ff3e 	bl	800e59c <__assert_func>
 800e720:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e724:	6005      	str	r5, [r0, #0]
 800e726:	60c5      	str	r5, [r0, #12]
 800e728:	69e3      	ldr	r3, [r4, #28]
 800e72a:	6819      	ldr	r1, [r3, #0]
 800e72c:	b151      	cbz	r1, 800e744 <_dtoa_r+0x5c>
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	604a      	str	r2, [r1, #4]
 800e732:	2301      	movs	r3, #1
 800e734:	4093      	lsls	r3, r2
 800e736:	608b      	str	r3, [r1, #8]
 800e738:	4620      	mov	r0, r4
 800e73a:	f001 fcf7 	bl	801012c <_Bfree>
 800e73e:	69e3      	ldr	r3, [r4, #28]
 800e740:	2200      	movs	r2, #0
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	1e3b      	subs	r3, r7, #0
 800e746:	bfbb      	ittet	lt
 800e748:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e74c:	9303      	strlt	r3, [sp, #12]
 800e74e:	2300      	movge	r3, #0
 800e750:	2201      	movlt	r2, #1
 800e752:	bfac      	ite	ge
 800e754:	f8c8 3000 	strge.w	r3, [r8]
 800e758:	f8c8 2000 	strlt.w	r2, [r8]
 800e75c:	4b9e      	ldr	r3, [pc, #632]	; (800e9d8 <_dtoa_r+0x2f0>)
 800e75e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e762:	ea33 0308 	bics.w	r3, r3, r8
 800e766:	d11b      	bne.n	800e7a0 <_dtoa_r+0xb8>
 800e768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e76a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e774:	4333      	orrs	r3, r6
 800e776:	f000 8593 	beq.w	800f2a0 <_dtoa_r+0xbb8>
 800e77a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e77c:	b963      	cbnz	r3, 800e798 <_dtoa_r+0xb0>
 800e77e:	4b97      	ldr	r3, [pc, #604]	; (800e9dc <_dtoa_r+0x2f4>)
 800e780:	e027      	b.n	800e7d2 <_dtoa_r+0xea>
 800e782:	4b97      	ldr	r3, [pc, #604]	; (800e9e0 <_dtoa_r+0x2f8>)
 800e784:	9300      	str	r3, [sp, #0]
 800e786:	3308      	adds	r3, #8
 800e788:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	9800      	ldr	r0, [sp, #0]
 800e78e:	b013      	add	sp, #76	; 0x4c
 800e790:	ecbd 8b04 	vpop	{d8-d9}
 800e794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e798:	4b90      	ldr	r3, [pc, #576]	; (800e9dc <_dtoa_r+0x2f4>)
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	3303      	adds	r3, #3
 800e79e:	e7f3      	b.n	800e788 <_dtoa_r+0xa0>
 800e7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	ec51 0b17 	vmov	r0, r1, d7
 800e7aa:	eeb0 8a47 	vmov.f32	s16, s14
 800e7ae:	eef0 8a67 	vmov.f32	s17, s15
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	f7f2 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 800e7b8:	4681      	mov	r9, r0
 800e7ba:	b160      	cbz	r0, 800e7d6 <_dtoa_r+0xee>
 800e7bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7be:	2301      	movs	r3, #1
 800e7c0:	6013      	str	r3, [r2, #0]
 800e7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f000 8568 	beq.w	800f29a <_dtoa_r+0xbb2>
 800e7ca:	4b86      	ldr	r3, [pc, #536]	; (800e9e4 <_dtoa_r+0x2fc>)
 800e7cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	e7da      	b.n	800e78c <_dtoa_r+0xa4>
 800e7d6:	aa10      	add	r2, sp, #64	; 0x40
 800e7d8:	a911      	add	r1, sp, #68	; 0x44
 800e7da:	4620      	mov	r0, r4
 800e7dc:	eeb0 0a48 	vmov.f32	s0, s16
 800e7e0:	eef0 0a68 	vmov.f32	s1, s17
 800e7e4:	f001 ff84 	bl	80106f0 <__d2b>
 800e7e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e7ec:	4682      	mov	sl, r0
 800e7ee:	2d00      	cmp	r5, #0
 800e7f0:	d07f      	beq.n	800e8f2 <_dtoa_r+0x20a>
 800e7f2:	ee18 3a90 	vmov	r3, s17
 800e7f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e7fe:	ec51 0b18 	vmov	r0, r1, d8
 800e802:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e80a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e80e:	4619      	mov	r1, r3
 800e810:	2200      	movs	r2, #0
 800e812:	4b75      	ldr	r3, [pc, #468]	; (800e9e8 <_dtoa_r+0x300>)
 800e814:	f7f1 fd58 	bl	80002c8 <__aeabi_dsub>
 800e818:	a367      	add	r3, pc, #412	; (adr r3, 800e9b8 <_dtoa_r+0x2d0>)
 800e81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81e:	f7f1 ff0b 	bl	8000638 <__aeabi_dmul>
 800e822:	a367      	add	r3, pc, #412	; (adr r3, 800e9c0 <_dtoa_r+0x2d8>)
 800e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e828:	f7f1 fd50 	bl	80002cc <__adddf3>
 800e82c:	4606      	mov	r6, r0
 800e82e:	4628      	mov	r0, r5
 800e830:	460f      	mov	r7, r1
 800e832:	f7f1 fe97 	bl	8000564 <__aeabi_i2d>
 800e836:	a364      	add	r3, pc, #400	; (adr r3, 800e9c8 <_dtoa_r+0x2e0>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f7f1 fefc 	bl	8000638 <__aeabi_dmul>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4630      	mov	r0, r6
 800e846:	4639      	mov	r1, r7
 800e848:	f7f1 fd40 	bl	80002cc <__adddf3>
 800e84c:	4606      	mov	r6, r0
 800e84e:	460f      	mov	r7, r1
 800e850:	f7f2 f9a2 	bl	8000b98 <__aeabi_d2iz>
 800e854:	2200      	movs	r2, #0
 800e856:	4683      	mov	fp, r0
 800e858:	2300      	movs	r3, #0
 800e85a:	4630      	mov	r0, r6
 800e85c:	4639      	mov	r1, r7
 800e85e:	f7f2 f95d 	bl	8000b1c <__aeabi_dcmplt>
 800e862:	b148      	cbz	r0, 800e878 <_dtoa_r+0x190>
 800e864:	4658      	mov	r0, fp
 800e866:	f7f1 fe7d 	bl	8000564 <__aeabi_i2d>
 800e86a:	4632      	mov	r2, r6
 800e86c:	463b      	mov	r3, r7
 800e86e:	f7f2 f94b 	bl	8000b08 <__aeabi_dcmpeq>
 800e872:	b908      	cbnz	r0, 800e878 <_dtoa_r+0x190>
 800e874:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e878:	f1bb 0f16 	cmp.w	fp, #22
 800e87c:	d857      	bhi.n	800e92e <_dtoa_r+0x246>
 800e87e:	4b5b      	ldr	r3, [pc, #364]	; (800e9ec <_dtoa_r+0x304>)
 800e880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e888:	ec51 0b18 	vmov	r0, r1, d8
 800e88c:	f7f2 f946 	bl	8000b1c <__aeabi_dcmplt>
 800e890:	2800      	cmp	r0, #0
 800e892:	d04e      	beq.n	800e932 <_dtoa_r+0x24a>
 800e894:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e898:	2300      	movs	r3, #0
 800e89a:	930c      	str	r3, [sp, #48]	; 0x30
 800e89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e89e:	1b5b      	subs	r3, r3, r5
 800e8a0:	1e5a      	subs	r2, r3, #1
 800e8a2:	bf45      	ittet	mi
 800e8a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e8a8:	9305      	strmi	r3, [sp, #20]
 800e8aa:	2300      	movpl	r3, #0
 800e8ac:	2300      	movmi	r3, #0
 800e8ae:	9206      	str	r2, [sp, #24]
 800e8b0:	bf54      	ite	pl
 800e8b2:	9305      	strpl	r3, [sp, #20]
 800e8b4:	9306      	strmi	r3, [sp, #24]
 800e8b6:	f1bb 0f00 	cmp.w	fp, #0
 800e8ba:	db3c      	blt.n	800e936 <_dtoa_r+0x24e>
 800e8bc:	9b06      	ldr	r3, [sp, #24]
 800e8be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e8c2:	445b      	add	r3, fp
 800e8c4:	9306      	str	r3, [sp, #24]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	9308      	str	r3, [sp, #32]
 800e8ca:	9b07      	ldr	r3, [sp, #28]
 800e8cc:	2b09      	cmp	r3, #9
 800e8ce:	d868      	bhi.n	800e9a2 <_dtoa_r+0x2ba>
 800e8d0:	2b05      	cmp	r3, #5
 800e8d2:	bfc4      	itt	gt
 800e8d4:	3b04      	subgt	r3, #4
 800e8d6:	9307      	strgt	r3, [sp, #28]
 800e8d8:	9b07      	ldr	r3, [sp, #28]
 800e8da:	f1a3 0302 	sub.w	r3, r3, #2
 800e8de:	bfcc      	ite	gt
 800e8e0:	2500      	movgt	r5, #0
 800e8e2:	2501      	movle	r5, #1
 800e8e4:	2b03      	cmp	r3, #3
 800e8e6:	f200 8085 	bhi.w	800e9f4 <_dtoa_r+0x30c>
 800e8ea:	e8df f003 	tbb	[pc, r3]
 800e8ee:	3b2e      	.short	0x3b2e
 800e8f0:	5839      	.short	0x5839
 800e8f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e8f6:	441d      	add	r5, r3
 800e8f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e8fc:	2b20      	cmp	r3, #32
 800e8fe:	bfc1      	itttt	gt
 800e900:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e904:	fa08 f803 	lslgt.w	r8, r8, r3
 800e908:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e90c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e910:	bfd6      	itet	le
 800e912:	f1c3 0320 	rsble	r3, r3, #32
 800e916:	ea48 0003 	orrgt.w	r0, r8, r3
 800e91a:	fa06 f003 	lslle.w	r0, r6, r3
 800e91e:	f7f1 fe11 	bl	8000544 <__aeabi_ui2d>
 800e922:	2201      	movs	r2, #1
 800e924:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e928:	3d01      	subs	r5, #1
 800e92a:	920e      	str	r2, [sp, #56]	; 0x38
 800e92c:	e76f      	b.n	800e80e <_dtoa_r+0x126>
 800e92e:	2301      	movs	r3, #1
 800e930:	e7b3      	b.n	800e89a <_dtoa_r+0x1b2>
 800e932:	900c      	str	r0, [sp, #48]	; 0x30
 800e934:	e7b2      	b.n	800e89c <_dtoa_r+0x1b4>
 800e936:	9b05      	ldr	r3, [sp, #20]
 800e938:	eba3 030b 	sub.w	r3, r3, fp
 800e93c:	9305      	str	r3, [sp, #20]
 800e93e:	f1cb 0300 	rsb	r3, fp, #0
 800e942:	9308      	str	r3, [sp, #32]
 800e944:	2300      	movs	r3, #0
 800e946:	930b      	str	r3, [sp, #44]	; 0x2c
 800e948:	e7bf      	b.n	800e8ca <_dtoa_r+0x1e2>
 800e94a:	2300      	movs	r3, #0
 800e94c:	9309      	str	r3, [sp, #36]	; 0x24
 800e94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e950:	2b00      	cmp	r3, #0
 800e952:	dc52      	bgt.n	800e9fa <_dtoa_r+0x312>
 800e954:	2301      	movs	r3, #1
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	9304      	str	r3, [sp, #16]
 800e95a:	461a      	mov	r2, r3
 800e95c:	920a      	str	r2, [sp, #40]	; 0x28
 800e95e:	e00b      	b.n	800e978 <_dtoa_r+0x290>
 800e960:	2301      	movs	r3, #1
 800e962:	e7f3      	b.n	800e94c <_dtoa_r+0x264>
 800e964:	2300      	movs	r3, #0
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96a:	445b      	add	r3, fp
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	3301      	adds	r3, #1
 800e970:	2b01      	cmp	r3, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	bfb8      	it	lt
 800e976:	2301      	movlt	r3, #1
 800e978:	69e0      	ldr	r0, [r4, #28]
 800e97a:	2100      	movs	r1, #0
 800e97c:	2204      	movs	r2, #4
 800e97e:	f102 0614 	add.w	r6, r2, #20
 800e982:	429e      	cmp	r6, r3
 800e984:	d93d      	bls.n	800ea02 <_dtoa_r+0x31a>
 800e986:	6041      	str	r1, [r0, #4]
 800e988:	4620      	mov	r0, r4
 800e98a:	f001 fb8f 	bl	80100ac <_Balloc>
 800e98e:	9000      	str	r0, [sp, #0]
 800e990:	2800      	cmp	r0, #0
 800e992:	d139      	bne.n	800ea08 <_dtoa_r+0x320>
 800e994:	4b16      	ldr	r3, [pc, #88]	; (800e9f0 <_dtoa_r+0x308>)
 800e996:	4602      	mov	r2, r0
 800e998:	f240 11af 	movw	r1, #431	; 0x1af
 800e99c:	e6bd      	b.n	800e71a <_dtoa_r+0x32>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e7e1      	b.n	800e966 <_dtoa_r+0x27e>
 800e9a2:	2501      	movs	r5, #1
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	9307      	str	r3, [sp, #28]
 800e9a8:	9509      	str	r5, [sp, #36]	; 0x24
 800e9aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9ae:	9301      	str	r3, [sp, #4]
 800e9b0:	9304      	str	r3, [sp, #16]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	2312      	movs	r3, #18
 800e9b6:	e7d1      	b.n	800e95c <_dtoa_r+0x274>
 800e9b8:	636f4361 	.word	0x636f4361
 800e9bc:	3fd287a7 	.word	0x3fd287a7
 800e9c0:	8b60c8b3 	.word	0x8b60c8b3
 800e9c4:	3fc68a28 	.word	0x3fc68a28
 800e9c8:	509f79fb 	.word	0x509f79fb
 800e9cc:	3fd34413 	.word	0x3fd34413
 800e9d0:	08015ea0 	.word	0x08015ea0
 800e9d4:	08015eb7 	.word	0x08015eb7
 800e9d8:	7ff00000 	.word	0x7ff00000
 800e9dc:	08015e9c 	.word	0x08015e9c
 800e9e0:	08015e93 	.word	0x08015e93
 800e9e4:	08015f48 	.word	0x08015f48
 800e9e8:	3ff80000 	.word	0x3ff80000
 800e9ec:	08015fd0 	.word	0x08015fd0
 800e9f0:	08015f0f 	.word	0x08015f0f
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e9f8:	e7d7      	b.n	800e9aa <_dtoa_r+0x2c2>
 800e9fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9fc:	9301      	str	r3, [sp, #4]
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	e7ba      	b.n	800e978 <_dtoa_r+0x290>
 800ea02:	3101      	adds	r1, #1
 800ea04:	0052      	lsls	r2, r2, #1
 800ea06:	e7ba      	b.n	800e97e <_dtoa_r+0x296>
 800ea08:	69e3      	ldr	r3, [r4, #28]
 800ea0a:	9a00      	ldr	r2, [sp, #0]
 800ea0c:	601a      	str	r2, [r3, #0]
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	2b0e      	cmp	r3, #14
 800ea12:	f200 80a8 	bhi.w	800eb66 <_dtoa_r+0x47e>
 800ea16:	2d00      	cmp	r5, #0
 800ea18:	f000 80a5 	beq.w	800eb66 <_dtoa_r+0x47e>
 800ea1c:	f1bb 0f00 	cmp.w	fp, #0
 800ea20:	dd38      	ble.n	800ea94 <_dtoa_r+0x3ac>
 800ea22:	4bc0      	ldr	r3, [pc, #768]	; (800ed24 <_dtoa_r+0x63c>)
 800ea24:	f00b 020f 	and.w	r2, fp, #15
 800ea28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ea30:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ea34:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ea38:	d019      	beq.n	800ea6e <_dtoa_r+0x386>
 800ea3a:	4bbb      	ldr	r3, [pc, #748]	; (800ed28 <_dtoa_r+0x640>)
 800ea3c:	ec51 0b18 	vmov	r0, r1, d8
 800ea40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea44:	f7f1 ff22 	bl	800088c <__aeabi_ddiv>
 800ea48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea4c:	f008 080f 	and.w	r8, r8, #15
 800ea50:	2503      	movs	r5, #3
 800ea52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ed28 <_dtoa_r+0x640>
 800ea56:	f1b8 0f00 	cmp.w	r8, #0
 800ea5a:	d10a      	bne.n	800ea72 <_dtoa_r+0x38a>
 800ea5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea60:	4632      	mov	r2, r6
 800ea62:	463b      	mov	r3, r7
 800ea64:	f7f1 ff12 	bl	800088c <__aeabi_ddiv>
 800ea68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6c:	e02b      	b.n	800eac6 <_dtoa_r+0x3de>
 800ea6e:	2502      	movs	r5, #2
 800ea70:	e7ef      	b.n	800ea52 <_dtoa_r+0x36a>
 800ea72:	f018 0f01 	tst.w	r8, #1
 800ea76:	d008      	beq.n	800ea8a <_dtoa_r+0x3a2>
 800ea78:	4630      	mov	r0, r6
 800ea7a:	4639      	mov	r1, r7
 800ea7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea80:	f7f1 fdda 	bl	8000638 <__aeabi_dmul>
 800ea84:	3501      	adds	r5, #1
 800ea86:	4606      	mov	r6, r0
 800ea88:	460f      	mov	r7, r1
 800ea8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea8e:	f109 0908 	add.w	r9, r9, #8
 800ea92:	e7e0      	b.n	800ea56 <_dtoa_r+0x36e>
 800ea94:	f000 809f 	beq.w	800ebd6 <_dtoa_r+0x4ee>
 800ea98:	f1cb 0600 	rsb	r6, fp, #0
 800ea9c:	4ba1      	ldr	r3, [pc, #644]	; (800ed24 <_dtoa_r+0x63c>)
 800ea9e:	4fa2      	ldr	r7, [pc, #648]	; (800ed28 <_dtoa_r+0x640>)
 800eaa0:	f006 020f 	and.w	r2, r6, #15
 800eaa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	ec51 0b18 	vmov	r0, r1, d8
 800eab0:	f7f1 fdc2 	bl	8000638 <__aeabi_dmul>
 800eab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eab8:	1136      	asrs	r6, r6, #4
 800eaba:	2300      	movs	r3, #0
 800eabc:	2502      	movs	r5, #2
 800eabe:	2e00      	cmp	r6, #0
 800eac0:	d17e      	bne.n	800ebc0 <_dtoa_r+0x4d8>
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1d0      	bne.n	800ea68 <_dtoa_r+0x380>
 800eac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eac8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 8084 	beq.w	800ebda <_dtoa_r+0x4f2>
 800ead2:	4b96      	ldr	r3, [pc, #600]	; (800ed2c <_dtoa_r+0x644>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	4640      	mov	r0, r8
 800ead8:	4649      	mov	r1, r9
 800eada:	f7f2 f81f 	bl	8000b1c <__aeabi_dcmplt>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d07b      	beq.n	800ebda <_dtoa_r+0x4f2>
 800eae2:	9b04      	ldr	r3, [sp, #16]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d078      	beq.n	800ebda <_dtoa_r+0x4f2>
 800eae8:	9b01      	ldr	r3, [sp, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dd39      	ble.n	800eb62 <_dtoa_r+0x47a>
 800eaee:	4b90      	ldr	r3, [pc, #576]	; (800ed30 <_dtoa_r+0x648>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	4649      	mov	r1, r9
 800eaf6:	f7f1 fd9f 	bl	8000638 <__aeabi_dmul>
 800eafa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eafe:	9e01      	ldr	r6, [sp, #4]
 800eb00:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800eb04:	3501      	adds	r5, #1
 800eb06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f7f1 fd2a 	bl	8000564 <__aeabi_i2d>
 800eb10:	4642      	mov	r2, r8
 800eb12:	464b      	mov	r3, r9
 800eb14:	f7f1 fd90 	bl	8000638 <__aeabi_dmul>
 800eb18:	4b86      	ldr	r3, [pc, #536]	; (800ed34 <_dtoa_r+0x64c>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f7f1 fbd6 	bl	80002cc <__adddf3>
 800eb20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb28:	9303      	str	r3, [sp, #12]
 800eb2a:	2e00      	cmp	r6, #0
 800eb2c:	d158      	bne.n	800ebe0 <_dtoa_r+0x4f8>
 800eb2e:	4b82      	ldr	r3, [pc, #520]	; (800ed38 <_dtoa_r+0x650>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	4640      	mov	r0, r8
 800eb34:	4649      	mov	r1, r9
 800eb36:	f7f1 fbc7 	bl	80002c8 <__aeabi_dsub>
 800eb3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb3e:	4680      	mov	r8, r0
 800eb40:	4689      	mov	r9, r1
 800eb42:	f7f2 f809 	bl	8000b58 <__aeabi_dcmpgt>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f040 8296 	bne.w	800f078 <_dtoa_r+0x990>
 800eb4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb50:	4640      	mov	r0, r8
 800eb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb56:	4649      	mov	r1, r9
 800eb58:	f7f1 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f040 8289 	bne.w	800f074 <_dtoa_r+0x98c>
 800eb62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800eb66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f2c0 814e 	blt.w	800ee0a <_dtoa_r+0x722>
 800eb6e:	f1bb 0f0e 	cmp.w	fp, #14
 800eb72:	f300 814a 	bgt.w	800ee0a <_dtoa_r+0x722>
 800eb76:	4b6b      	ldr	r3, [pc, #428]	; (800ed24 <_dtoa_r+0x63c>)
 800eb78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eb7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f280 80dc 	bge.w	800ed40 <_dtoa_r+0x658>
 800eb88:	9b04      	ldr	r3, [sp, #16]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f300 80d8 	bgt.w	800ed40 <_dtoa_r+0x658>
 800eb90:	f040 826f 	bne.w	800f072 <_dtoa_r+0x98a>
 800eb94:	4b68      	ldr	r3, [pc, #416]	; (800ed38 <_dtoa_r+0x650>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	4640      	mov	r0, r8
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	f7f1 fd4c 	bl	8000638 <__aeabi_dmul>
 800eba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eba4:	f7f1 ffce 	bl	8000b44 <__aeabi_dcmpge>
 800eba8:	9e04      	ldr	r6, [sp, #16]
 800ebaa:	4637      	mov	r7, r6
 800ebac:	2800      	cmp	r0, #0
 800ebae:	f040 8245 	bne.w	800f03c <_dtoa_r+0x954>
 800ebb2:	9d00      	ldr	r5, [sp, #0]
 800ebb4:	2331      	movs	r3, #49	; 0x31
 800ebb6:	f805 3b01 	strb.w	r3, [r5], #1
 800ebba:	f10b 0b01 	add.w	fp, fp, #1
 800ebbe:	e241      	b.n	800f044 <_dtoa_r+0x95c>
 800ebc0:	07f2      	lsls	r2, r6, #31
 800ebc2:	d505      	bpl.n	800ebd0 <_dtoa_r+0x4e8>
 800ebc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc8:	f7f1 fd36 	bl	8000638 <__aeabi_dmul>
 800ebcc:	3501      	adds	r5, #1
 800ebce:	2301      	movs	r3, #1
 800ebd0:	1076      	asrs	r6, r6, #1
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	e773      	b.n	800eabe <_dtoa_r+0x3d6>
 800ebd6:	2502      	movs	r5, #2
 800ebd8:	e775      	b.n	800eac6 <_dtoa_r+0x3de>
 800ebda:	9e04      	ldr	r6, [sp, #16]
 800ebdc:	465f      	mov	r7, fp
 800ebde:	e792      	b.n	800eb06 <_dtoa_r+0x41e>
 800ebe0:	9900      	ldr	r1, [sp, #0]
 800ebe2:	4b50      	ldr	r3, [pc, #320]	; (800ed24 <_dtoa_r+0x63c>)
 800ebe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ebe8:	4431      	add	r1, r6
 800ebea:	9102      	str	r1, [sp, #8]
 800ebec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebee:	eeb0 9a47 	vmov.f32	s18, s14
 800ebf2:	eef0 9a67 	vmov.f32	s19, s15
 800ebf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ebfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebfe:	2900      	cmp	r1, #0
 800ec00:	d044      	beq.n	800ec8c <_dtoa_r+0x5a4>
 800ec02:	494e      	ldr	r1, [pc, #312]	; (800ed3c <_dtoa_r+0x654>)
 800ec04:	2000      	movs	r0, #0
 800ec06:	f7f1 fe41 	bl	800088c <__aeabi_ddiv>
 800ec0a:	ec53 2b19 	vmov	r2, r3, d9
 800ec0e:	f7f1 fb5b 	bl	80002c8 <__aeabi_dsub>
 800ec12:	9d00      	ldr	r5, [sp, #0]
 800ec14:	ec41 0b19 	vmov	d9, r0, r1
 800ec18:	4649      	mov	r1, r9
 800ec1a:	4640      	mov	r0, r8
 800ec1c:	f7f1 ffbc 	bl	8000b98 <__aeabi_d2iz>
 800ec20:	4606      	mov	r6, r0
 800ec22:	f7f1 fc9f 	bl	8000564 <__aeabi_i2d>
 800ec26:	4602      	mov	r2, r0
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	f7f1 fb4b 	bl	80002c8 <__aeabi_dsub>
 800ec32:	3630      	adds	r6, #48	; 0x30
 800ec34:	f805 6b01 	strb.w	r6, [r5], #1
 800ec38:	ec53 2b19 	vmov	r2, r3, d9
 800ec3c:	4680      	mov	r8, r0
 800ec3e:	4689      	mov	r9, r1
 800ec40:	f7f1 ff6c 	bl	8000b1c <__aeabi_dcmplt>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d164      	bne.n	800ed12 <_dtoa_r+0x62a>
 800ec48:	4642      	mov	r2, r8
 800ec4a:	464b      	mov	r3, r9
 800ec4c:	4937      	ldr	r1, [pc, #220]	; (800ed2c <_dtoa_r+0x644>)
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f7f1 fb3a 	bl	80002c8 <__aeabi_dsub>
 800ec54:	ec53 2b19 	vmov	r2, r3, d9
 800ec58:	f7f1 ff60 	bl	8000b1c <__aeabi_dcmplt>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	f040 80b6 	bne.w	800edce <_dtoa_r+0x6e6>
 800ec62:	9b02      	ldr	r3, [sp, #8]
 800ec64:	429d      	cmp	r5, r3
 800ec66:	f43f af7c 	beq.w	800eb62 <_dtoa_r+0x47a>
 800ec6a:	4b31      	ldr	r3, [pc, #196]	; (800ed30 <_dtoa_r+0x648>)
 800ec6c:	ec51 0b19 	vmov	r0, r1, d9
 800ec70:	2200      	movs	r2, #0
 800ec72:	f7f1 fce1 	bl	8000638 <__aeabi_dmul>
 800ec76:	4b2e      	ldr	r3, [pc, #184]	; (800ed30 <_dtoa_r+0x648>)
 800ec78:	ec41 0b19 	vmov	d9, r0, r1
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4640      	mov	r0, r8
 800ec80:	4649      	mov	r1, r9
 800ec82:	f7f1 fcd9 	bl	8000638 <__aeabi_dmul>
 800ec86:	4680      	mov	r8, r0
 800ec88:	4689      	mov	r9, r1
 800ec8a:	e7c5      	b.n	800ec18 <_dtoa_r+0x530>
 800ec8c:	ec51 0b17 	vmov	r0, r1, d7
 800ec90:	f7f1 fcd2 	bl	8000638 <__aeabi_dmul>
 800ec94:	9b02      	ldr	r3, [sp, #8]
 800ec96:	9d00      	ldr	r5, [sp, #0]
 800ec98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec9a:	ec41 0b19 	vmov	d9, r0, r1
 800ec9e:	4649      	mov	r1, r9
 800eca0:	4640      	mov	r0, r8
 800eca2:	f7f1 ff79 	bl	8000b98 <__aeabi_d2iz>
 800eca6:	4606      	mov	r6, r0
 800eca8:	f7f1 fc5c 	bl	8000564 <__aeabi_i2d>
 800ecac:	3630      	adds	r6, #48	; 0x30
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	f7f1 fb07 	bl	80002c8 <__aeabi_dsub>
 800ecba:	f805 6b01 	strb.w	r6, [r5], #1
 800ecbe:	9b02      	ldr	r3, [sp, #8]
 800ecc0:	429d      	cmp	r5, r3
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	4689      	mov	r9, r1
 800ecc6:	f04f 0200 	mov.w	r2, #0
 800ecca:	d124      	bne.n	800ed16 <_dtoa_r+0x62e>
 800eccc:	4b1b      	ldr	r3, [pc, #108]	; (800ed3c <_dtoa_r+0x654>)
 800ecce:	ec51 0b19 	vmov	r0, r1, d9
 800ecd2:	f7f1 fafb 	bl	80002cc <__adddf3>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	4640      	mov	r0, r8
 800ecdc:	4649      	mov	r1, r9
 800ecde:	f7f1 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d173      	bne.n	800edce <_dtoa_r+0x6e6>
 800ece6:	ec53 2b19 	vmov	r2, r3, d9
 800ecea:	4914      	ldr	r1, [pc, #80]	; (800ed3c <_dtoa_r+0x654>)
 800ecec:	2000      	movs	r0, #0
 800ecee:	f7f1 faeb 	bl	80002c8 <__aeabi_dsub>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4640      	mov	r0, r8
 800ecf8:	4649      	mov	r1, r9
 800ecfa:	f7f1 ff0f 	bl	8000b1c <__aeabi_dcmplt>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	f43f af2f 	beq.w	800eb62 <_dtoa_r+0x47a>
 800ed04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed06:	1e6b      	subs	r3, r5, #1
 800ed08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed0e:	2b30      	cmp	r3, #48	; 0x30
 800ed10:	d0f8      	beq.n	800ed04 <_dtoa_r+0x61c>
 800ed12:	46bb      	mov	fp, r7
 800ed14:	e04a      	b.n	800edac <_dtoa_r+0x6c4>
 800ed16:	4b06      	ldr	r3, [pc, #24]	; (800ed30 <_dtoa_r+0x648>)
 800ed18:	f7f1 fc8e 	bl	8000638 <__aeabi_dmul>
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4689      	mov	r9, r1
 800ed20:	e7bd      	b.n	800ec9e <_dtoa_r+0x5b6>
 800ed22:	bf00      	nop
 800ed24:	08015fd0 	.word	0x08015fd0
 800ed28:	08015fa8 	.word	0x08015fa8
 800ed2c:	3ff00000 	.word	0x3ff00000
 800ed30:	40240000 	.word	0x40240000
 800ed34:	401c0000 	.word	0x401c0000
 800ed38:	40140000 	.word	0x40140000
 800ed3c:	3fe00000 	.word	0x3fe00000
 800ed40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed44:	9d00      	ldr	r5, [sp, #0]
 800ed46:	4642      	mov	r2, r8
 800ed48:	464b      	mov	r3, r9
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	f7f1 fd9d 	bl	800088c <__aeabi_ddiv>
 800ed52:	f7f1 ff21 	bl	8000b98 <__aeabi_d2iz>
 800ed56:	9001      	str	r0, [sp, #4]
 800ed58:	f7f1 fc04 	bl	8000564 <__aeabi_i2d>
 800ed5c:	4642      	mov	r2, r8
 800ed5e:	464b      	mov	r3, r9
 800ed60:	f7f1 fc6a 	bl	8000638 <__aeabi_dmul>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 faac 	bl	80002c8 <__aeabi_dsub>
 800ed70:	9e01      	ldr	r6, [sp, #4]
 800ed72:	9f04      	ldr	r7, [sp, #16]
 800ed74:	3630      	adds	r6, #48	; 0x30
 800ed76:	f805 6b01 	strb.w	r6, [r5], #1
 800ed7a:	9e00      	ldr	r6, [sp, #0]
 800ed7c:	1bae      	subs	r6, r5, r6
 800ed7e:	42b7      	cmp	r7, r6
 800ed80:	4602      	mov	r2, r0
 800ed82:	460b      	mov	r3, r1
 800ed84:	d134      	bne.n	800edf0 <_dtoa_r+0x708>
 800ed86:	f7f1 faa1 	bl	80002cc <__adddf3>
 800ed8a:	4642      	mov	r2, r8
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	f7f1 fee1 	bl	8000b58 <__aeabi_dcmpgt>
 800ed96:	b9c8      	cbnz	r0, 800edcc <_dtoa_r+0x6e4>
 800ed98:	4642      	mov	r2, r8
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	4639      	mov	r1, r7
 800eda0:	f7f1 feb2 	bl	8000b08 <__aeabi_dcmpeq>
 800eda4:	b110      	cbz	r0, 800edac <_dtoa_r+0x6c4>
 800eda6:	9b01      	ldr	r3, [sp, #4]
 800eda8:	07db      	lsls	r3, r3, #31
 800edaa:	d40f      	bmi.n	800edcc <_dtoa_r+0x6e4>
 800edac:	4651      	mov	r1, sl
 800edae:	4620      	mov	r0, r4
 800edb0:	f001 f9bc 	bl	801012c <_Bfree>
 800edb4:	2300      	movs	r3, #0
 800edb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800edb8:	702b      	strb	r3, [r5, #0]
 800edba:	f10b 0301 	add.w	r3, fp, #1
 800edbe:	6013      	str	r3, [r2, #0]
 800edc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f43f ace2 	beq.w	800e78c <_dtoa_r+0xa4>
 800edc8:	601d      	str	r5, [r3, #0]
 800edca:	e4df      	b.n	800e78c <_dtoa_r+0xa4>
 800edcc:	465f      	mov	r7, fp
 800edce:	462b      	mov	r3, r5
 800edd0:	461d      	mov	r5, r3
 800edd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800edd6:	2a39      	cmp	r2, #57	; 0x39
 800edd8:	d106      	bne.n	800ede8 <_dtoa_r+0x700>
 800edda:	9a00      	ldr	r2, [sp, #0]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d1f7      	bne.n	800edd0 <_dtoa_r+0x6e8>
 800ede0:	9900      	ldr	r1, [sp, #0]
 800ede2:	2230      	movs	r2, #48	; 0x30
 800ede4:	3701      	adds	r7, #1
 800ede6:	700a      	strb	r2, [r1, #0]
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	3201      	adds	r2, #1
 800edec:	701a      	strb	r2, [r3, #0]
 800edee:	e790      	b.n	800ed12 <_dtoa_r+0x62a>
 800edf0:	4ba3      	ldr	r3, [pc, #652]	; (800f080 <_dtoa_r+0x998>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	f7f1 fc20 	bl	8000638 <__aeabi_dmul>
 800edf8:	2200      	movs	r2, #0
 800edfa:	2300      	movs	r3, #0
 800edfc:	4606      	mov	r6, r0
 800edfe:	460f      	mov	r7, r1
 800ee00:	f7f1 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d09e      	beq.n	800ed46 <_dtoa_r+0x65e>
 800ee08:	e7d0      	b.n	800edac <_dtoa_r+0x6c4>
 800ee0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee0c:	2a00      	cmp	r2, #0
 800ee0e:	f000 80ca 	beq.w	800efa6 <_dtoa_r+0x8be>
 800ee12:	9a07      	ldr	r2, [sp, #28]
 800ee14:	2a01      	cmp	r2, #1
 800ee16:	f300 80ad 	bgt.w	800ef74 <_dtoa_r+0x88c>
 800ee1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee1c:	2a00      	cmp	r2, #0
 800ee1e:	f000 80a5 	beq.w	800ef6c <_dtoa_r+0x884>
 800ee22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee26:	9e08      	ldr	r6, [sp, #32]
 800ee28:	9d05      	ldr	r5, [sp, #20]
 800ee2a:	9a05      	ldr	r2, [sp, #20]
 800ee2c:	441a      	add	r2, r3
 800ee2e:	9205      	str	r2, [sp, #20]
 800ee30:	9a06      	ldr	r2, [sp, #24]
 800ee32:	2101      	movs	r1, #1
 800ee34:	441a      	add	r2, r3
 800ee36:	4620      	mov	r0, r4
 800ee38:	9206      	str	r2, [sp, #24]
 800ee3a:	f001 fa2d 	bl	8010298 <__i2b>
 800ee3e:	4607      	mov	r7, r0
 800ee40:	b165      	cbz	r5, 800ee5c <_dtoa_r+0x774>
 800ee42:	9b06      	ldr	r3, [sp, #24]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	dd09      	ble.n	800ee5c <_dtoa_r+0x774>
 800ee48:	42ab      	cmp	r3, r5
 800ee4a:	9a05      	ldr	r2, [sp, #20]
 800ee4c:	bfa8      	it	ge
 800ee4e:	462b      	movge	r3, r5
 800ee50:	1ad2      	subs	r2, r2, r3
 800ee52:	9205      	str	r2, [sp, #20]
 800ee54:	9a06      	ldr	r2, [sp, #24]
 800ee56:	1aed      	subs	r5, r5, r3
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	9b08      	ldr	r3, [sp, #32]
 800ee5e:	b1f3      	cbz	r3, 800ee9e <_dtoa_r+0x7b6>
 800ee60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 80a3 	beq.w	800efae <_dtoa_r+0x8c6>
 800ee68:	2e00      	cmp	r6, #0
 800ee6a:	dd10      	ble.n	800ee8e <_dtoa_r+0x7a6>
 800ee6c:	4639      	mov	r1, r7
 800ee6e:	4632      	mov	r2, r6
 800ee70:	4620      	mov	r0, r4
 800ee72:	f001 fad1 	bl	8010418 <__pow5mult>
 800ee76:	4652      	mov	r2, sl
 800ee78:	4601      	mov	r1, r0
 800ee7a:	4607      	mov	r7, r0
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f001 fa21 	bl	80102c4 <__multiply>
 800ee82:	4651      	mov	r1, sl
 800ee84:	4680      	mov	r8, r0
 800ee86:	4620      	mov	r0, r4
 800ee88:	f001 f950 	bl	801012c <_Bfree>
 800ee8c:	46c2      	mov	sl, r8
 800ee8e:	9b08      	ldr	r3, [sp, #32]
 800ee90:	1b9a      	subs	r2, r3, r6
 800ee92:	d004      	beq.n	800ee9e <_dtoa_r+0x7b6>
 800ee94:	4651      	mov	r1, sl
 800ee96:	4620      	mov	r0, r4
 800ee98:	f001 fabe 	bl	8010418 <__pow5mult>
 800ee9c:	4682      	mov	sl, r0
 800ee9e:	2101      	movs	r1, #1
 800eea0:	4620      	mov	r0, r4
 800eea2:	f001 f9f9 	bl	8010298 <__i2b>
 800eea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	4606      	mov	r6, r0
 800eeac:	f340 8081 	ble.w	800efb2 <_dtoa_r+0x8ca>
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	4601      	mov	r1, r0
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f001 faaf 	bl	8010418 <__pow5mult>
 800eeba:	9b07      	ldr	r3, [sp, #28]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	4606      	mov	r6, r0
 800eec0:	dd7a      	ble.n	800efb8 <_dtoa_r+0x8d0>
 800eec2:	f04f 0800 	mov.w	r8, #0
 800eec6:	6933      	ldr	r3, [r6, #16]
 800eec8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eecc:	6918      	ldr	r0, [r3, #16]
 800eece:	f001 f995 	bl	80101fc <__hi0bits>
 800eed2:	f1c0 0020 	rsb	r0, r0, #32
 800eed6:	9b06      	ldr	r3, [sp, #24]
 800eed8:	4418      	add	r0, r3
 800eeda:	f010 001f 	ands.w	r0, r0, #31
 800eede:	f000 8094 	beq.w	800f00a <_dtoa_r+0x922>
 800eee2:	f1c0 0320 	rsb	r3, r0, #32
 800eee6:	2b04      	cmp	r3, #4
 800eee8:	f340 8085 	ble.w	800eff6 <_dtoa_r+0x90e>
 800eeec:	9b05      	ldr	r3, [sp, #20]
 800eeee:	f1c0 001c 	rsb	r0, r0, #28
 800eef2:	4403      	add	r3, r0
 800eef4:	9305      	str	r3, [sp, #20]
 800eef6:	9b06      	ldr	r3, [sp, #24]
 800eef8:	4403      	add	r3, r0
 800eefa:	4405      	add	r5, r0
 800eefc:	9306      	str	r3, [sp, #24]
 800eefe:	9b05      	ldr	r3, [sp, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	dd05      	ble.n	800ef10 <_dtoa_r+0x828>
 800ef04:	4651      	mov	r1, sl
 800ef06:	461a      	mov	r2, r3
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f001 fadf 	bl	80104cc <__lshift>
 800ef0e:	4682      	mov	sl, r0
 800ef10:	9b06      	ldr	r3, [sp, #24]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	dd05      	ble.n	800ef22 <_dtoa_r+0x83a>
 800ef16:	4631      	mov	r1, r6
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f001 fad6 	bl	80104cc <__lshift>
 800ef20:	4606      	mov	r6, r0
 800ef22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d072      	beq.n	800f00e <_dtoa_r+0x926>
 800ef28:	4631      	mov	r1, r6
 800ef2a:	4650      	mov	r0, sl
 800ef2c:	f001 fb3a 	bl	80105a4 <__mcmp>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	da6c      	bge.n	800f00e <_dtoa_r+0x926>
 800ef34:	2300      	movs	r3, #0
 800ef36:	4651      	mov	r1, sl
 800ef38:	220a      	movs	r2, #10
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f001 f918 	bl	8010170 <__multadd>
 800ef40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ef46:	4682      	mov	sl, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f000 81b0 	beq.w	800f2ae <_dtoa_r+0xbc6>
 800ef4e:	2300      	movs	r3, #0
 800ef50:	4639      	mov	r1, r7
 800ef52:	220a      	movs	r2, #10
 800ef54:	4620      	mov	r0, r4
 800ef56:	f001 f90b 	bl	8010170 <__multadd>
 800ef5a:	9b01      	ldr	r3, [sp, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	4607      	mov	r7, r0
 800ef60:	f300 8096 	bgt.w	800f090 <_dtoa_r+0x9a8>
 800ef64:	9b07      	ldr	r3, [sp, #28]
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	dc59      	bgt.n	800f01e <_dtoa_r+0x936>
 800ef6a:	e091      	b.n	800f090 <_dtoa_r+0x9a8>
 800ef6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef72:	e758      	b.n	800ee26 <_dtoa_r+0x73e>
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	1e5e      	subs	r6, r3, #1
 800ef78:	9b08      	ldr	r3, [sp, #32]
 800ef7a:	42b3      	cmp	r3, r6
 800ef7c:	bfbf      	itttt	lt
 800ef7e:	9b08      	ldrlt	r3, [sp, #32]
 800ef80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ef82:	9608      	strlt	r6, [sp, #32]
 800ef84:	1af3      	sublt	r3, r6, r3
 800ef86:	bfb4      	ite	lt
 800ef88:	18d2      	addlt	r2, r2, r3
 800ef8a:	1b9e      	subge	r6, r3, r6
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	bfbc      	itt	lt
 800ef90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ef92:	2600      	movlt	r6, #0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	bfb7      	itett	lt
 800ef98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ef9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800efa0:	1a9d      	sublt	r5, r3, r2
 800efa2:	2300      	movlt	r3, #0
 800efa4:	e741      	b.n	800ee2a <_dtoa_r+0x742>
 800efa6:	9e08      	ldr	r6, [sp, #32]
 800efa8:	9d05      	ldr	r5, [sp, #20]
 800efaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800efac:	e748      	b.n	800ee40 <_dtoa_r+0x758>
 800efae:	9a08      	ldr	r2, [sp, #32]
 800efb0:	e770      	b.n	800ee94 <_dtoa_r+0x7ac>
 800efb2:	9b07      	ldr	r3, [sp, #28]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	dc19      	bgt.n	800efec <_dtoa_r+0x904>
 800efb8:	9b02      	ldr	r3, [sp, #8]
 800efba:	b9bb      	cbnz	r3, 800efec <_dtoa_r+0x904>
 800efbc:	9b03      	ldr	r3, [sp, #12]
 800efbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efc2:	b99b      	cbnz	r3, 800efec <_dtoa_r+0x904>
 800efc4:	9b03      	ldr	r3, [sp, #12]
 800efc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efca:	0d1b      	lsrs	r3, r3, #20
 800efcc:	051b      	lsls	r3, r3, #20
 800efce:	b183      	cbz	r3, 800eff2 <_dtoa_r+0x90a>
 800efd0:	9b05      	ldr	r3, [sp, #20]
 800efd2:	3301      	adds	r3, #1
 800efd4:	9305      	str	r3, [sp, #20]
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	3301      	adds	r3, #1
 800efda:	9306      	str	r3, [sp, #24]
 800efdc:	f04f 0801 	mov.w	r8, #1
 800efe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f47f af6f 	bne.w	800eec6 <_dtoa_r+0x7de>
 800efe8:	2001      	movs	r0, #1
 800efea:	e774      	b.n	800eed6 <_dtoa_r+0x7ee>
 800efec:	f04f 0800 	mov.w	r8, #0
 800eff0:	e7f6      	b.n	800efe0 <_dtoa_r+0x8f8>
 800eff2:	4698      	mov	r8, r3
 800eff4:	e7f4      	b.n	800efe0 <_dtoa_r+0x8f8>
 800eff6:	d082      	beq.n	800eefe <_dtoa_r+0x816>
 800eff8:	9a05      	ldr	r2, [sp, #20]
 800effa:	331c      	adds	r3, #28
 800effc:	441a      	add	r2, r3
 800effe:	9205      	str	r2, [sp, #20]
 800f000:	9a06      	ldr	r2, [sp, #24]
 800f002:	441a      	add	r2, r3
 800f004:	441d      	add	r5, r3
 800f006:	9206      	str	r2, [sp, #24]
 800f008:	e779      	b.n	800eefe <_dtoa_r+0x816>
 800f00a:	4603      	mov	r3, r0
 800f00c:	e7f4      	b.n	800eff8 <_dtoa_r+0x910>
 800f00e:	9b04      	ldr	r3, [sp, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	dc37      	bgt.n	800f084 <_dtoa_r+0x99c>
 800f014:	9b07      	ldr	r3, [sp, #28]
 800f016:	2b02      	cmp	r3, #2
 800f018:	dd34      	ble.n	800f084 <_dtoa_r+0x99c>
 800f01a:	9b04      	ldr	r3, [sp, #16]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	9b01      	ldr	r3, [sp, #4]
 800f020:	b963      	cbnz	r3, 800f03c <_dtoa_r+0x954>
 800f022:	4631      	mov	r1, r6
 800f024:	2205      	movs	r2, #5
 800f026:	4620      	mov	r0, r4
 800f028:	f001 f8a2 	bl	8010170 <__multadd>
 800f02c:	4601      	mov	r1, r0
 800f02e:	4606      	mov	r6, r0
 800f030:	4650      	mov	r0, sl
 800f032:	f001 fab7 	bl	80105a4 <__mcmp>
 800f036:	2800      	cmp	r0, #0
 800f038:	f73f adbb 	bgt.w	800ebb2 <_dtoa_r+0x4ca>
 800f03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f03e:	9d00      	ldr	r5, [sp, #0]
 800f040:	ea6f 0b03 	mvn.w	fp, r3
 800f044:	f04f 0800 	mov.w	r8, #0
 800f048:	4631      	mov	r1, r6
 800f04a:	4620      	mov	r0, r4
 800f04c:	f001 f86e 	bl	801012c <_Bfree>
 800f050:	2f00      	cmp	r7, #0
 800f052:	f43f aeab 	beq.w	800edac <_dtoa_r+0x6c4>
 800f056:	f1b8 0f00 	cmp.w	r8, #0
 800f05a:	d005      	beq.n	800f068 <_dtoa_r+0x980>
 800f05c:	45b8      	cmp	r8, r7
 800f05e:	d003      	beq.n	800f068 <_dtoa_r+0x980>
 800f060:	4641      	mov	r1, r8
 800f062:	4620      	mov	r0, r4
 800f064:	f001 f862 	bl	801012c <_Bfree>
 800f068:	4639      	mov	r1, r7
 800f06a:	4620      	mov	r0, r4
 800f06c:	f001 f85e 	bl	801012c <_Bfree>
 800f070:	e69c      	b.n	800edac <_dtoa_r+0x6c4>
 800f072:	2600      	movs	r6, #0
 800f074:	4637      	mov	r7, r6
 800f076:	e7e1      	b.n	800f03c <_dtoa_r+0x954>
 800f078:	46bb      	mov	fp, r7
 800f07a:	4637      	mov	r7, r6
 800f07c:	e599      	b.n	800ebb2 <_dtoa_r+0x4ca>
 800f07e:	bf00      	nop
 800f080:	40240000 	.word	0x40240000
 800f084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 80c8 	beq.w	800f21c <_dtoa_r+0xb34>
 800f08c:	9b04      	ldr	r3, [sp, #16]
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	2d00      	cmp	r5, #0
 800f092:	dd05      	ble.n	800f0a0 <_dtoa_r+0x9b8>
 800f094:	4639      	mov	r1, r7
 800f096:	462a      	mov	r2, r5
 800f098:	4620      	mov	r0, r4
 800f09a:	f001 fa17 	bl	80104cc <__lshift>
 800f09e:	4607      	mov	r7, r0
 800f0a0:	f1b8 0f00 	cmp.w	r8, #0
 800f0a4:	d05b      	beq.n	800f15e <_dtoa_r+0xa76>
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f000 ffff 	bl	80100ac <_Balloc>
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	b928      	cbnz	r0, 800f0be <_dtoa_r+0x9d6>
 800f0b2:	4b83      	ldr	r3, [pc, #524]	; (800f2c0 <_dtoa_r+0xbd8>)
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f0ba:	f7ff bb2e 	b.w	800e71a <_dtoa_r+0x32>
 800f0be:	693a      	ldr	r2, [r7, #16]
 800f0c0:	3202      	adds	r2, #2
 800f0c2:	0092      	lsls	r2, r2, #2
 800f0c4:	f107 010c 	add.w	r1, r7, #12
 800f0c8:	300c      	adds	r0, #12
 800f0ca:	f7ff fa58 	bl	800e57e <memcpy>
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f001 f9fa 	bl	80104cc <__lshift>
 800f0d8:	9b00      	ldr	r3, [sp, #0]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	9308      	str	r3, [sp, #32]
 800f0e6:	9b02      	ldr	r3, [sp, #8]
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	46b8      	mov	r8, r7
 800f0ee:	9306      	str	r3, [sp, #24]
 800f0f0:	4607      	mov	r7, r0
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	4650      	mov	r0, sl
 800f0fa:	9301      	str	r3, [sp, #4]
 800f0fc:	f7ff fa6c 	bl	800e5d8 <quorem>
 800f100:	4641      	mov	r1, r8
 800f102:	9002      	str	r0, [sp, #8]
 800f104:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f108:	4650      	mov	r0, sl
 800f10a:	f001 fa4b 	bl	80105a4 <__mcmp>
 800f10e:	463a      	mov	r2, r7
 800f110:	9005      	str	r0, [sp, #20]
 800f112:	4631      	mov	r1, r6
 800f114:	4620      	mov	r0, r4
 800f116:	f001 fa61 	bl	80105dc <__mdiff>
 800f11a:	68c2      	ldr	r2, [r0, #12]
 800f11c:	4605      	mov	r5, r0
 800f11e:	bb02      	cbnz	r2, 800f162 <_dtoa_r+0xa7a>
 800f120:	4601      	mov	r1, r0
 800f122:	4650      	mov	r0, sl
 800f124:	f001 fa3e 	bl	80105a4 <__mcmp>
 800f128:	4602      	mov	r2, r0
 800f12a:	4629      	mov	r1, r5
 800f12c:	4620      	mov	r0, r4
 800f12e:	9209      	str	r2, [sp, #36]	; 0x24
 800f130:	f000 fffc 	bl	801012c <_Bfree>
 800f134:	9b07      	ldr	r3, [sp, #28]
 800f136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f138:	9d04      	ldr	r5, [sp, #16]
 800f13a:	ea43 0102 	orr.w	r1, r3, r2
 800f13e:	9b06      	ldr	r3, [sp, #24]
 800f140:	4319      	orrs	r1, r3
 800f142:	d110      	bne.n	800f166 <_dtoa_r+0xa7e>
 800f144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f148:	d029      	beq.n	800f19e <_dtoa_r+0xab6>
 800f14a:	9b05      	ldr	r3, [sp, #20]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dd02      	ble.n	800f156 <_dtoa_r+0xa6e>
 800f150:	9b02      	ldr	r3, [sp, #8]
 800f152:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f156:	9b01      	ldr	r3, [sp, #4]
 800f158:	f883 9000 	strb.w	r9, [r3]
 800f15c:	e774      	b.n	800f048 <_dtoa_r+0x960>
 800f15e:	4638      	mov	r0, r7
 800f160:	e7ba      	b.n	800f0d8 <_dtoa_r+0x9f0>
 800f162:	2201      	movs	r2, #1
 800f164:	e7e1      	b.n	800f12a <_dtoa_r+0xa42>
 800f166:	9b05      	ldr	r3, [sp, #20]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	db04      	blt.n	800f176 <_dtoa_r+0xa8e>
 800f16c:	9907      	ldr	r1, [sp, #28]
 800f16e:	430b      	orrs	r3, r1
 800f170:	9906      	ldr	r1, [sp, #24]
 800f172:	430b      	orrs	r3, r1
 800f174:	d120      	bne.n	800f1b8 <_dtoa_r+0xad0>
 800f176:	2a00      	cmp	r2, #0
 800f178:	dded      	ble.n	800f156 <_dtoa_r+0xa6e>
 800f17a:	4651      	mov	r1, sl
 800f17c:	2201      	movs	r2, #1
 800f17e:	4620      	mov	r0, r4
 800f180:	f001 f9a4 	bl	80104cc <__lshift>
 800f184:	4631      	mov	r1, r6
 800f186:	4682      	mov	sl, r0
 800f188:	f001 fa0c 	bl	80105a4 <__mcmp>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	dc03      	bgt.n	800f198 <_dtoa_r+0xab0>
 800f190:	d1e1      	bne.n	800f156 <_dtoa_r+0xa6e>
 800f192:	f019 0f01 	tst.w	r9, #1
 800f196:	d0de      	beq.n	800f156 <_dtoa_r+0xa6e>
 800f198:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f19c:	d1d8      	bne.n	800f150 <_dtoa_r+0xa68>
 800f19e:	9a01      	ldr	r2, [sp, #4]
 800f1a0:	2339      	movs	r3, #57	; 0x39
 800f1a2:	7013      	strb	r3, [r2, #0]
 800f1a4:	462b      	mov	r3, r5
 800f1a6:	461d      	mov	r5, r3
 800f1a8:	3b01      	subs	r3, #1
 800f1aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1ae:	2a39      	cmp	r2, #57	; 0x39
 800f1b0:	d06c      	beq.n	800f28c <_dtoa_r+0xba4>
 800f1b2:	3201      	adds	r2, #1
 800f1b4:	701a      	strb	r2, [r3, #0]
 800f1b6:	e747      	b.n	800f048 <_dtoa_r+0x960>
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	dd07      	ble.n	800f1cc <_dtoa_r+0xae4>
 800f1bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f1c0:	d0ed      	beq.n	800f19e <_dtoa_r+0xab6>
 800f1c2:	9a01      	ldr	r2, [sp, #4]
 800f1c4:	f109 0301 	add.w	r3, r9, #1
 800f1c8:	7013      	strb	r3, [r2, #0]
 800f1ca:	e73d      	b.n	800f048 <_dtoa_r+0x960>
 800f1cc:	9b04      	ldr	r3, [sp, #16]
 800f1ce:	9a08      	ldr	r2, [sp, #32]
 800f1d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d043      	beq.n	800f260 <_dtoa_r+0xb78>
 800f1d8:	4651      	mov	r1, sl
 800f1da:	2300      	movs	r3, #0
 800f1dc:	220a      	movs	r2, #10
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 ffc6 	bl	8010170 <__multadd>
 800f1e4:	45b8      	cmp	r8, r7
 800f1e6:	4682      	mov	sl, r0
 800f1e8:	f04f 0300 	mov.w	r3, #0
 800f1ec:	f04f 020a 	mov.w	r2, #10
 800f1f0:	4641      	mov	r1, r8
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	d107      	bne.n	800f206 <_dtoa_r+0xb1e>
 800f1f6:	f000 ffbb 	bl	8010170 <__multadd>
 800f1fa:	4680      	mov	r8, r0
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	9b04      	ldr	r3, [sp, #16]
 800f200:	3301      	adds	r3, #1
 800f202:	9304      	str	r3, [sp, #16]
 800f204:	e775      	b.n	800f0f2 <_dtoa_r+0xa0a>
 800f206:	f000 ffb3 	bl	8010170 <__multadd>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4680      	mov	r8, r0
 800f20e:	2300      	movs	r3, #0
 800f210:	220a      	movs	r2, #10
 800f212:	4620      	mov	r0, r4
 800f214:	f000 ffac 	bl	8010170 <__multadd>
 800f218:	4607      	mov	r7, r0
 800f21a:	e7f0      	b.n	800f1fe <_dtoa_r+0xb16>
 800f21c:	9b04      	ldr	r3, [sp, #16]
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	9d00      	ldr	r5, [sp, #0]
 800f222:	4631      	mov	r1, r6
 800f224:	4650      	mov	r0, sl
 800f226:	f7ff f9d7 	bl	800e5d8 <quorem>
 800f22a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f22e:	9b00      	ldr	r3, [sp, #0]
 800f230:	f805 9b01 	strb.w	r9, [r5], #1
 800f234:	1aea      	subs	r2, r5, r3
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	4293      	cmp	r3, r2
 800f23a:	dd07      	ble.n	800f24c <_dtoa_r+0xb64>
 800f23c:	4651      	mov	r1, sl
 800f23e:	2300      	movs	r3, #0
 800f240:	220a      	movs	r2, #10
 800f242:	4620      	mov	r0, r4
 800f244:	f000 ff94 	bl	8010170 <__multadd>
 800f248:	4682      	mov	sl, r0
 800f24a:	e7ea      	b.n	800f222 <_dtoa_r+0xb3a>
 800f24c:	9b01      	ldr	r3, [sp, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	bfc8      	it	gt
 800f252:	461d      	movgt	r5, r3
 800f254:	9b00      	ldr	r3, [sp, #0]
 800f256:	bfd8      	it	le
 800f258:	2501      	movle	r5, #1
 800f25a:	441d      	add	r5, r3
 800f25c:	f04f 0800 	mov.w	r8, #0
 800f260:	4651      	mov	r1, sl
 800f262:	2201      	movs	r2, #1
 800f264:	4620      	mov	r0, r4
 800f266:	f001 f931 	bl	80104cc <__lshift>
 800f26a:	4631      	mov	r1, r6
 800f26c:	4682      	mov	sl, r0
 800f26e:	f001 f999 	bl	80105a4 <__mcmp>
 800f272:	2800      	cmp	r0, #0
 800f274:	dc96      	bgt.n	800f1a4 <_dtoa_r+0xabc>
 800f276:	d102      	bne.n	800f27e <_dtoa_r+0xb96>
 800f278:	f019 0f01 	tst.w	r9, #1
 800f27c:	d192      	bne.n	800f1a4 <_dtoa_r+0xabc>
 800f27e:	462b      	mov	r3, r5
 800f280:	461d      	mov	r5, r3
 800f282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f286:	2a30      	cmp	r2, #48	; 0x30
 800f288:	d0fa      	beq.n	800f280 <_dtoa_r+0xb98>
 800f28a:	e6dd      	b.n	800f048 <_dtoa_r+0x960>
 800f28c:	9a00      	ldr	r2, [sp, #0]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d189      	bne.n	800f1a6 <_dtoa_r+0xabe>
 800f292:	f10b 0b01 	add.w	fp, fp, #1
 800f296:	2331      	movs	r3, #49	; 0x31
 800f298:	e796      	b.n	800f1c8 <_dtoa_r+0xae0>
 800f29a:	4b0a      	ldr	r3, [pc, #40]	; (800f2c4 <_dtoa_r+0xbdc>)
 800f29c:	f7ff ba99 	b.w	800e7d2 <_dtoa_r+0xea>
 800f2a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f47f aa6d 	bne.w	800e782 <_dtoa_r+0x9a>
 800f2a8:	4b07      	ldr	r3, [pc, #28]	; (800f2c8 <_dtoa_r+0xbe0>)
 800f2aa:	f7ff ba92 	b.w	800e7d2 <_dtoa_r+0xea>
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	dcb5      	bgt.n	800f220 <_dtoa_r+0xb38>
 800f2b4:	9b07      	ldr	r3, [sp, #28]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	f73f aeb1 	bgt.w	800f01e <_dtoa_r+0x936>
 800f2bc:	e7b0      	b.n	800f220 <_dtoa_r+0xb38>
 800f2be:	bf00      	nop
 800f2c0:	08015f0f 	.word	0x08015f0f
 800f2c4:	08015f47 	.word	0x08015f47
 800f2c8:	08015e93 	.word	0x08015e93

0800f2cc <_free_r>:
 800f2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	d044      	beq.n	800f35c <_free_r+0x90>
 800f2d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2d6:	9001      	str	r0, [sp, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f1a1 0404 	sub.w	r4, r1, #4
 800f2de:	bfb8      	it	lt
 800f2e0:	18e4      	addlt	r4, r4, r3
 800f2e2:	f7fe fe8d 	bl	800e000 <__malloc_lock>
 800f2e6:	4a1e      	ldr	r2, [pc, #120]	; (800f360 <_free_r+0x94>)
 800f2e8:	9801      	ldr	r0, [sp, #4]
 800f2ea:	6813      	ldr	r3, [r2, #0]
 800f2ec:	b933      	cbnz	r3, 800f2fc <_free_r+0x30>
 800f2ee:	6063      	str	r3, [r4, #4]
 800f2f0:	6014      	str	r4, [r2, #0]
 800f2f2:	b003      	add	sp, #12
 800f2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2f8:	f7fe be88 	b.w	800e00c <__malloc_unlock>
 800f2fc:	42a3      	cmp	r3, r4
 800f2fe:	d908      	bls.n	800f312 <_free_r+0x46>
 800f300:	6825      	ldr	r5, [r4, #0]
 800f302:	1961      	adds	r1, r4, r5
 800f304:	428b      	cmp	r3, r1
 800f306:	bf01      	itttt	eq
 800f308:	6819      	ldreq	r1, [r3, #0]
 800f30a:	685b      	ldreq	r3, [r3, #4]
 800f30c:	1949      	addeq	r1, r1, r5
 800f30e:	6021      	streq	r1, [r4, #0]
 800f310:	e7ed      	b.n	800f2ee <_free_r+0x22>
 800f312:	461a      	mov	r2, r3
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	b10b      	cbz	r3, 800f31c <_free_r+0x50>
 800f318:	42a3      	cmp	r3, r4
 800f31a:	d9fa      	bls.n	800f312 <_free_r+0x46>
 800f31c:	6811      	ldr	r1, [r2, #0]
 800f31e:	1855      	adds	r5, r2, r1
 800f320:	42a5      	cmp	r5, r4
 800f322:	d10b      	bne.n	800f33c <_free_r+0x70>
 800f324:	6824      	ldr	r4, [r4, #0]
 800f326:	4421      	add	r1, r4
 800f328:	1854      	adds	r4, r2, r1
 800f32a:	42a3      	cmp	r3, r4
 800f32c:	6011      	str	r1, [r2, #0]
 800f32e:	d1e0      	bne.n	800f2f2 <_free_r+0x26>
 800f330:	681c      	ldr	r4, [r3, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	6053      	str	r3, [r2, #4]
 800f336:	440c      	add	r4, r1
 800f338:	6014      	str	r4, [r2, #0]
 800f33a:	e7da      	b.n	800f2f2 <_free_r+0x26>
 800f33c:	d902      	bls.n	800f344 <_free_r+0x78>
 800f33e:	230c      	movs	r3, #12
 800f340:	6003      	str	r3, [r0, #0]
 800f342:	e7d6      	b.n	800f2f2 <_free_r+0x26>
 800f344:	6825      	ldr	r5, [r4, #0]
 800f346:	1961      	adds	r1, r4, r5
 800f348:	428b      	cmp	r3, r1
 800f34a:	bf04      	itt	eq
 800f34c:	6819      	ldreq	r1, [r3, #0]
 800f34e:	685b      	ldreq	r3, [r3, #4]
 800f350:	6063      	str	r3, [r4, #4]
 800f352:	bf04      	itt	eq
 800f354:	1949      	addeq	r1, r1, r5
 800f356:	6021      	streq	r1, [r4, #0]
 800f358:	6054      	str	r4, [r2, #4]
 800f35a:	e7ca      	b.n	800f2f2 <_free_r+0x26>
 800f35c:	b003      	add	sp, #12
 800f35e:	bd30      	pop	{r4, r5, pc}
 800f360:	20009684 	.word	0x20009684

0800f364 <__ssputs_r>:
 800f364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f368:	688e      	ldr	r6, [r1, #8]
 800f36a:	461f      	mov	r7, r3
 800f36c:	42be      	cmp	r6, r7
 800f36e:	680b      	ldr	r3, [r1, #0]
 800f370:	4682      	mov	sl, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4690      	mov	r8, r2
 800f376:	d82c      	bhi.n	800f3d2 <__ssputs_r+0x6e>
 800f378:	898a      	ldrh	r2, [r1, #12]
 800f37a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f37e:	d026      	beq.n	800f3ce <__ssputs_r+0x6a>
 800f380:	6965      	ldr	r5, [r4, #20]
 800f382:	6909      	ldr	r1, [r1, #16]
 800f384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f388:	eba3 0901 	sub.w	r9, r3, r1
 800f38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f390:	1c7b      	adds	r3, r7, #1
 800f392:	444b      	add	r3, r9
 800f394:	106d      	asrs	r5, r5, #1
 800f396:	429d      	cmp	r5, r3
 800f398:	bf38      	it	cc
 800f39a:	461d      	movcc	r5, r3
 800f39c:	0553      	lsls	r3, r2, #21
 800f39e:	d527      	bpl.n	800f3f0 <__ssputs_r+0x8c>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	f7fe fbe9 	bl	800db78 <_malloc_r>
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	b360      	cbz	r0, 800f404 <__ssputs_r+0xa0>
 800f3aa:	6921      	ldr	r1, [r4, #16]
 800f3ac:	464a      	mov	r2, r9
 800f3ae:	f7ff f8e6 	bl	800e57e <memcpy>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3bc:	81a3      	strh	r3, [r4, #12]
 800f3be:	6126      	str	r6, [r4, #16]
 800f3c0:	6165      	str	r5, [r4, #20]
 800f3c2:	444e      	add	r6, r9
 800f3c4:	eba5 0509 	sub.w	r5, r5, r9
 800f3c8:	6026      	str	r6, [r4, #0]
 800f3ca:	60a5      	str	r5, [r4, #8]
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	42be      	cmp	r6, r7
 800f3d0:	d900      	bls.n	800f3d4 <__ssputs_r+0x70>
 800f3d2:	463e      	mov	r6, r7
 800f3d4:	6820      	ldr	r0, [r4, #0]
 800f3d6:	4632      	mov	r2, r6
 800f3d8:	4641      	mov	r1, r8
 800f3da:	f001 fbcb 	bl	8010b74 <memmove>
 800f3de:	68a3      	ldr	r3, [r4, #8]
 800f3e0:	1b9b      	subs	r3, r3, r6
 800f3e2:	60a3      	str	r3, [r4, #8]
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	4433      	add	r3, r6
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	f001 fa23 	bl	801083c <_realloc_r>
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d1e0      	bne.n	800f3be <__ssputs_r+0x5a>
 800f3fc:	6921      	ldr	r1, [r4, #16]
 800f3fe:	4650      	mov	r0, sl
 800f400:	f7ff ff64 	bl	800f2cc <_free_r>
 800f404:	230c      	movs	r3, #12
 800f406:	f8ca 3000 	str.w	r3, [sl]
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f410:	81a3      	strh	r3, [r4, #12]
 800f412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f416:	e7e9      	b.n	800f3ec <__ssputs_r+0x88>

0800f418 <_svfiprintf_r>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	4698      	mov	r8, r3
 800f41e:	898b      	ldrh	r3, [r1, #12]
 800f420:	061b      	lsls	r3, r3, #24
 800f422:	b09d      	sub	sp, #116	; 0x74
 800f424:	4607      	mov	r7, r0
 800f426:	460d      	mov	r5, r1
 800f428:	4614      	mov	r4, r2
 800f42a:	d50e      	bpl.n	800f44a <_svfiprintf_r+0x32>
 800f42c:	690b      	ldr	r3, [r1, #16]
 800f42e:	b963      	cbnz	r3, 800f44a <_svfiprintf_r+0x32>
 800f430:	2140      	movs	r1, #64	; 0x40
 800f432:	f7fe fba1 	bl	800db78 <_malloc_r>
 800f436:	6028      	str	r0, [r5, #0]
 800f438:	6128      	str	r0, [r5, #16]
 800f43a:	b920      	cbnz	r0, 800f446 <_svfiprintf_r+0x2e>
 800f43c:	230c      	movs	r3, #12
 800f43e:	603b      	str	r3, [r7, #0]
 800f440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f444:	e0d0      	b.n	800f5e8 <_svfiprintf_r+0x1d0>
 800f446:	2340      	movs	r3, #64	; 0x40
 800f448:	616b      	str	r3, [r5, #20]
 800f44a:	2300      	movs	r3, #0
 800f44c:	9309      	str	r3, [sp, #36]	; 0x24
 800f44e:	2320      	movs	r3, #32
 800f450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f454:	f8cd 800c 	str.w	r8, [sp, #12]
 800f458:	2330      	movs	r3, #48	; 0x30
 800f45a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f600 <_svfiprintf_r+0x1e8>
 800f45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f462:	f04f 0901 	mov.w	r9, #1
 800f466:	4623      	mov	r3, r4
 800f468:	469a      	mov	sl, r3
 800f46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46e:	b10a      	cbz	r2, 800f474 <_svfiprintf_r+0x5c>
 800f470:	2a25      	cmp	r2, #37	; 0x25
 800f472:	d1f9      	bne.n	800f468 <_svfiprintf_r+0x50>
 800f474:	ebba 0b04 	subs.w	fp, sl, r4
 800f478:	d00b      	beq.n	800f492 <_svfiprintf_r+0x7a>
 800f47a:	465b      	mov	r3, fp
 800f47c:	4622      	mov	r2, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	4638      	mov	r0, r7
 800f482:	f7ff ff6f 	bl	800f364 <__ssputs_r>
 800f486:	3001      	adds	r0, #1
 800f488:	f000 80a9 	beq.w	800f5de <_svfiprintf_r+0x1c6>
 800f48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f48e:	445a      	add	r2, fp
 800f490:	9209      	str	r2, [sp, #36]	; 0x24
 800f492:	f89a 3000 	ldrb.w	r3, [sl]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 80a1 	beq.w	800f5de <_svfiprintf_r+0x1c6>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4a6:	f10a 0a01 	add.w	sl, sl, #1
 800f4aa:	9304      	str	r3, [sp, #16]
 800f4ac:	9307      	str	r3, [sp, #28]
 800f4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800f4b4:	4654      	mov	r4, sl
 800f4b6:	2205      	movs	r2, #5
 800f4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4bc:	4850      	ldr	r0, [pc, #320]	; (800f600 <_svfiprintf_r+0x1e8>)
 800f4be:	f7f0 fea7 	bl	8000210 <memchr>
 800f4c2:	9a04      	ldr	r2, [sp, #16]
 800f4c4:	b9d8      	cbnz	r0, 800f4fe <_svfiprintf_r+0xe6>
 800f4c6:	06d0      	lsls	r0, r2, #27
 800f4c8:	bf44      	itt	mi
 800f4ca:	2320      	movmi	r3, #32
 800f4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4d0:	0711      	lsls	r1, r2, #28
 800f4d2:	bf44      	itt	mi
 800f4d4:	232b      	movmi	r3, #43	; 0x2b
 800f4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4da:	f89a 3000 	ldrb.w	r3, [sl]
 800f4de:	2b2a      	cmp	r3, #42	; 0x2a
 800f4e0:	d015      	beq.n	800f50e <_svfiprintf_r+0xf6>
 800f4e2:	9a07      	ldr	r2, [sp, #28]
 800f4e4:	4654      	mov	r4, sl
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	f04f 0c0a 	mov.w	ip, #10
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4f2:	3b30      	subs	r3, #48	; 0x30
 800f4f4:	2b09      	cmp	r3, #9
 800f4f6:	d94d      	bls.n	800f594 <_svfiprintf_r+0x17c>
 800f4f8:	b1b0      	cbz	r0, 800f528 <_svfiprintf_r+0x110>
 800f4fa:	9207      	str	r2, [sp, #28]
 800f4fc:	e014      	b.n	800f528 <_svfiprintf_r+0x110>
 800f4fe:	eba0 0308 	sub.w	r3, r0, r8
 800f502:	fa09 f303 	lsl.w	r3, r9, r3
 800f506:	4313      	orrs	r3, r2
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	46a2      	mov	sl, r4
 800f50c:	e7d2      	b.n	800f4b4 <_svfiprintf_r+0x9c>
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	1d19      	adds	r1, r3, #4
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	9103      	str	r1, [sp, #12]
 800f516:	2b00      	cmp	r3, #0
 800f518:	bfbb      	ittet	lt
 800f51a:	425b      	neglt	r3, r3
 800f51c:	f042 0202 	orrlt.w	r2, r2, #2
 800f520:	9307      	strge	r3, [sp, #28]
 800f522:	9307      	strlt	r3, [sp, #28]
 800f524:	bfb8      	it	lt
 800f526:	9204      	strlt	r2, [sp, #16]
 800f528:	7823      	ldrb	r3, [r4, #0]
 800f52a:	2b2e      	cmp	r3, #46	; 0x2e
 800f52c:	d10c      	bne.n	800f548 <_svfiprintf_r+0x130>
 800f52e:	7863      	ldrb	r3, [r4, #1]
 800f530:	2b2a      	cmp	r3, #42	; 0x2a
 800f532:	d134      	bne.n	800f59e <_svfiprintf_r+0x186>
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	1d1a      	adds	r2, r3, #4
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	9203      	str	r2, [sp, #12]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	bfb8      	it	lt
 800f540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f544:	3402      	adds	r4, #2
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f610 <_svfiprintf_r+0x1f8>
 800f54c:	7821      	ldrb	r1, [r4, #0]
 800f54e:	2203      	movs	r2, #3
 800f550:	4650      	mov	r0, sl
 800f552:	f7f0 fe5d 	bl	8000210 <memchr>
 800f556:	b138      	cbz	r0, 800f568 <_svfiprintf_r+0x150>
 800f558:	9b04      	ldr	r3, [sp, #16]
 800f55a:	eba0 000a 	sub.w	r0, r0, sl
 800f55e:	2240      	movs	r2, #64	; 0x40
 800f560:	4082      	lsls	r2, r0
 800f562:	4313      	orrs	r3, r2
 800f564:	3401      	adds	r4, #1
 800f566:	9304      	str	r3, [sp, #16]
 800f568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56c:	4825      	ldr	r0, [pc, #148]	; (800f604 <_svfiprintf_r+0x1ec>)
 800f56e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f572:	2206      	movs	r2, #6
 800f574:	f7f0 fe4c 	bl	8000210 <memchr>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d038      	beq.n	800f5ee <_svfiprintf_r+0x1d6>
 800f57c:	4b22      	ldr	r3, [pc, #136]	; (800f608 <_svfiprintf_r+0x1f0>)
 800f57e:	bb1b      	cbnz	r3, 800f5c8 <_svfiprintf_r+0x1b0>
 800f580:	9b03      	ldr	r3, [sp, #12]
 800f582:	3307      	adds	r3, #7
 800f584:	f023 0307 	bic.w	r3, r3, #7
 800f588:	3308      	adds	r3, #8
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58e:	4433      	add	r3, r6
 800f590:	9309      	str	r3, [sp, #36]	; 0x24
 800f592:	e768      	b.n	800f466 <_svfiprintf_r+0x4e>
 800f594:	fb0c 3202 	mla	r2, ip, r2, r3
 800f598:	460c      	mov	r4, r1
 800f59a:	2001      	movs	r0, #1
 800f59c:	e7a6      	b.n	800f4ec <_svfiprintf_r+0xd4>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	3401      	adds	r4, #1
 800f5a2:	9305      	str	r3, [sp, #20]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f04f 0c0a 	mov.w	ip, #10
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5b0:	3a30      	subs	r2, #48	; 0x30
 800f5b2:	2a09      	cmp	r2, #9
 800f5b4:	d903      	bls.n	800f5be <_svfiprintf_r+0x1a6>
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0c6      	beq.n	800f548 <_svfiprintf_r+0x130>
 800f5ba:	9105      	str	r1, [sp, #20]
 800f5bc:	e7c4      	b.n	800f548 <_svfiprintf_r+0x130>
 800f5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e7f0      	b.n	800f5aa <_svfiprintf_r+0x192>
 800f5c8:	ab03      	add	r3, sp, #12
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <_svfiprintf_r+0x1f4>)
 800f5d0:	a904      	add	r1, sp, #16
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	f7fe f872 	bl	800d6bc <_printf_float>
 800f5d8:	1c42      	adds	r2, r0, #1
 800f5da:	4606      	mov	r6, r0
 800f5dc:	d1d6      	bne.n	800f58c <_svfiprintf_r+0x174>
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	065b      	lsls	r3, r3, #25
 800f5e2:	f53f af2d 	bmi.w	800f440 <_svfiprintf_r+0x28>
 800f5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5e8:	b01d      	add	sp, #116	; 0x74
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ee:	ab03      	add	r3, sp, #12
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <_svfiprintf_r+0x1f4>)
 800f5f6:	a904      	add	r1, sp, #16
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	f7fe fbab 	bl	800dd54 <_printf_i>
 800f5fe:	e7eb      	b.n	800f5d8 <_svfiprintf_r+0x1c0>
 800f600:	08015f20 	.word	0x08015f20
 800f604:	08015f2a 	.word	0x08015f2a
 800f608:	0800d6bd 	.word	0x0800d6bd
 800f60c:	0800f365 	.word	0x0800f365
 800f610:	08015f26 	.word	0x08015f26

0800f614 <_sungetc_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	1c4b      	adds	r3, r1, #1
 800f618:	4614      	mov	r4, r2
 800f61a:	d103      	bne.n	800f624 <_sungetc_r+0x10>
 800f61c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f620:	4628      	mov	r0, r5
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	8993      	ldrh	r3, [r2, #12]
 800f626:	f023 0320 	bic.w	r3, r3, #32
 800f62a:	8193      	strh	r3, [r2, #12]
 800f62c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f62e:	6852      	ldr	r2, [r2, #4]
 800f630:	b2cd      	uxtb	r5, r1
 800f632:	b18b      	cbz	r3, 800f658 <_sungetc_r+0x44>
 800f634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f636:	4293      	cmp	r3, r2
 800f638:	dd08      	ble.n	800f64c <_sungetc_r+0x38>
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	1e5a      	subs	r2, r3, #1
 800f63e:	6022      	str	r2, [r4, #0]
 800f640:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f644:	6863      	ldr	r3, [r4, #4]
 800f646:	3301      	adds	r3, #1
 800f648:	6063      	str	r3, [r4, #4]
 800f64a:	e7e9      	b.n	800f620 <_sungetc_r+0xc>
 800f64c:	4621      	mov	r1, r4
 800f64e:	f001 f8bb 	bl	80107c8 <__submore>
 800f652:	2800      	cmp	r0, #0
 800f654:	d0f1      	beq.n	800f63a <_sungetc_r+0x26>
 800f656:	e7e1      	b.n	800f61c <_sungetc_r+0x8>
 800f658:	6921      	ldr	r1, [r4, #16]
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	b151      	cbz	r1, 800f674 <_sungetc_r+0x60>
 800f65e:	4299      	cmp	r1, r3
 800f660:	d208      	bcs.n	800f674 <_sungetc_r+0x60>
 800f662:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f666:	42a9      	cmp	r1, r5
 800f668:	d104      	bne.n	800f674 <_sungetc_r+0x60>
 800f66a:	3b01      	subs	r3, #1
 800f66c:	3201      	adds	r2, #1
 800f66e:	6023      	str	r3, [r4, #0]
 800f670:	6062      	str	r2, [r4, #4]
 800f672:	e7d5      	b.n	800f620 <_sungetc_r+0xc>
 800f674:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f67c:	6363      	str	r3, [r4, #52]	; 0x34
 800f67e:	2303      	movs	r3, #3
 800f680:	63a3      	str	r3, [r4, #56]	; 0x38
 800f682:	4623      	mov	r3, r4
 800f684:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f688:	6023      	str	r3, [r4, #0]
 800f68a:	2301      	movs	r3, #1
 800f68c:	e7dc      	b.n	800f648 <_sungetc_r+0x34>

0800f68e <__ssrefill_r>:
 800f68e:	b510      	push	{r4, lr}
 800f690:	460c      	mov	r4, r1
 800f692:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f694:	b169      	cbz	r1, 800f6b2 <__ssrefill_r+0x24>
 800f696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f69a:	4299      	cmp	r1, r3
 800f69c:	d001      	beq.n	800f6a2 <__ssrefill_r+0x14>
 800f69e:	f7ff fe15 	bl	800f2cc <_free_r>
 800f6a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6a4:	6063      	str	r3, [r4, #4]
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	6360      	str	r0, [r4, #52]	; 0x34
 800f6aa:	b113      	cbz	r3, 800f6b2 <__ssrefill_r+0x24>
 800f6ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	bd10      	pop	{r4, pc}
 800f6b2:	6923      	ldr	r3, [r4, #16]
 800f6b4:	6023      	str	r3, [r4, #0]
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	6063      	str	r3, [r4, #4]
 800f6ba:	89a3      	ldrh	r3, [r4, #12]
 800f6bc:	f043 0320 	orr.w	r3, r3, #32
 800f6c0:	81a3      	strh	r3, [r4, #12]
 800f6c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6c6:	e7f3      	b.n	800f6b0 <__ssrefill_r+0x22>

0800f6c8 <__ssvfiscanf_r>:
 800f6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f6d8:	49a6      	ldr	r1, [pc, #664]	; (800f974 <__ssvfiscanf_r+0x2ac>)
 800f6da:	91a0      	str	r1, [sp, #640]	; 0x280
 800f6dc:	f10d 0804 	add.w	r8, sp, #4
 800f6e0:	49a5      	ldr	r1, [pc, #660]	; (800f978 <__ssvfiscanf_r+0x2b0>)
 800f6e2:	4fa6      	ldr	r7, [pc, #664]	; (800f97c <__ssvfiscanf_r+0x2b4>)
 800f6e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f980 <__ssvfiscanf_r+0x2b8>
 800f6e8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f6ec:	4606      	mov	r6, r0
 800f6ee:	91a1      	str	r1, [sp, #644]	; 0x284
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	7813      	ldrb	r3, [r2, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	f000 815a 	beq.w	800f9ae <__ssvfiscanf_r+0x2e6>
 800f6fa:	5cf9      	ldrb	r1, [r7, r3]
 800f6fc:	f011 0108 	ands.w	r1, r1, #8
 800f700:	f102 0501 	add.w	r5, r2, #1
 800f704:	d019      	beq.n	800f73a <__ssvfiscanf_r+0x72>
 800f706:	6863      	ldr	r3, [r4, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	dd0f      	ble.n	800f72c <__ssvfiscanf_r+0x64>
 800f70c:	6823      	ldr	r3, [r4, #0]
 800f70e:	781a      	ldrb	r2, [r3, #0]
 800f710:	5cba      	ldrb	r2, [r7, r2]
 800f712:	0712      	lsls	r2, r2, #28
 800f714:	d401      	bmi.n	800f71a <__ssvfiscanf_r+0x52>
 800f716:	462a      	mov	r2, r5
 800f718:	e7eb      	b.n	800f6f2 <__ssvfiscanf_r+0x2a>
 800f71a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f71c:	3201      	adds	r2, #1
 800f71e:	9245      	str	r2, [sp, #276]	; 0x114
 800f720:	6862      	ldr	r2, [r4, #4]
 800f722:	3301      	adds	r3, #1
 800f724:	3a01      	subs	r2, #1
 800f726:	6062      	str	r2, [r4, #4]
 800f728:	6023      	str	r3, [r4, #0]
 800f72a:	e7ec      	b.n	800f706 <__ssvfiscanf_r+0x3e>
 800f72c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f72e:	4621      	mov	r1, r4
 800f730:	4630      	mov	r0, r6
 800f732:	4798      	blx	r3
 800f734:	2800      	cmp	r0, #0
 800f736:	d0e9      	beq.n	800f70c <__ssvfiscanf_r+0x44>
 800f738:	e7ed      	b.n	800f716 <__ssvfiscanf_r+0x4e>
 800f73a:	2b25      	cmp	r3, #37	; 0x25
 800f73c:	d012      	beq.n	800f764 <__ssvfiscanf_r+0x9c>
 800f73e:	469a      	mov	sl, r3
 800f740:	6863      	ldr	r3, [r4, #4]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f340 8091 	ble.w	800f86a <__ssvfiscanf_r+0x1a2>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	7813      	ldrb	r3, [r2, #0]
 800f74c:	4553      	cmp	r3, sl
 800f74e:	f040 812e 	bne.w	800f9ae <__ssvfiscanf_r+0x2e6>
 800f752:	6863      	ldr	r3, [r4, #4]
 800f754:	3b01      	subs	r3, #1
 800f756:	6063      	str	r3, [r4, #4]
 800f758:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f75a:	3201      	adds	r2, #1
 800f75c:	3301      	adds	r3, #1
 800f75e:	6022      	str	r2, [r4, #0]
 800f760:	9345      	str	r3, [sp, #276]	; 0x114
 800f762:	e7d8      	b.n	800f716 <__ssvfiscanf_r+0x4e>
 800f764:	9141      	str	r1, [sp, #260]	; 0x104
 800f766:	9143      	str	r1, [sp, #268]	; 0x10c
 800f768:	7853      	ldrb	r3, [r2, #1]
 800f76a:	2b2a      	cmp	r3, #42	; 0x2a
 800f76c:	bf02      	ittt	eq
 800f76e:	2310      	moveq	r3, #16
 800f770:	1c95      	addeq	r5, r2, #2
 800f772:	9341      	streq	r3, [sp, #260]	; 0x104
 800f774:	220a      	movs	r2, #10
 800f776:	46aa      	mov	sl, r5
 800f778:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f77c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f780:	2b09      	cmp	r3, #9
 800f782:	d91c      	bls.n	800f7be <__ssvfiscanf_r+0xf6>
 800f784:	487e      	ldr	r0, [pc, #504]	; (800f980 <__ssvfiscanf_r+0x2b8>)
 800f786:	2203      	movs	r2, #3
 800f788:	f7f0 fd42 	bl	8000210 <memchr>
 800f78c:	b138      	cbz	r0, 800f79e <__ssvfiscanf_r+0xd6>
 800f78e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f790:	eba0 0009 	sub.w	r0, r0, r9
 800f794:	2301      	movs	r3, #1
 800f796:	4083      	lsls	r3, r0
 800f798:	4313      	orrs	r3, r2
 800f79a:	9341      	str	r3, [sp, #260]	; 0x104
 800f79c:	4655      	mov	r5, sl
 800f79e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f7a2:	2b78      	cmp	r3, #120	; 0x78
 800f7a4:	d806      	bhi.n	800f7b4 <__ssvfiscanf_r+0xec>
 800f7a6:	2b57      	cmp	r3, #87	; 0x57
 800f7a8:	d810      	bhi.n	800f7cc <__ssvfiscanf_r+0x104>
 800f7aa:	2b25      	cmp	r3, #37	; 0x25
 800f7ac:	d0c7      	beq.n	800f73e <__ssvfiscanf_r+0x76>
 800f7ae:	d857      	bhi.n	800f860 <__ssvfiscanf_r+0x198>
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d065      	beq.n	800f880 <__ssvfiscanf_r+0x1b8>
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f7b8:	230a      	movs	r3, #10
 800f7ba:	9342      	str	r3, [sp, #264]	; 0x108
 800f7bc:	e076      	b.n	800f8ac <__ssvfiscanf_r+0x1e4>
 800f7be:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f7c0:	fb02 1103 	mla	r1, r2, r3, r1
 800f7c4:	3930      	subs	r1, #48	; 0x30
 800f7c6:	9143      	str	r1, [sp, #268]	; 0x10c
 800f7c8:	4655      	mov	r5, sl
 800f7ca:	e7d4      	b.n	800f776 <__ssvfiscanf_r+0xae>
 800f7cc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f7d0:	2a20      	cmp	r2, #32
 800f7d2:	d8ef      	bhi.n	800f7b4 <__ssvfiscanf_r+0xec>
 800f7d4:	a101      	add	r1, pc, #4	; (adr r1, 800f7dc <__ssvfiscanf_r+0x114>)
 800f7d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f7da:	bf00      	nop
 800f7dc:	0800f88f 	.word	0x0800f88f
 800f7e0:	0800f7b5 	.word	0x0800f7b5
 800f7e4:	0800f7b5 	.word	0x0800f7b5
 800f7e8:	0800f8ed 	.word	0x0800f8ed
 800f7ec:	0800f7b5 	.word	0x0800f7b5
 800f7f0:	0800f7b5 	.word	0x0800f7b5
 800f7f4:	0800f7b5 	.word	0x0800f7b5
 800f7f8:	0800f7b5 	.word	0x0800f7b5
 800f7fc:	0800f7b5 	.word	0x0800f7b5
 800f800:	0800f7b5 	.word	0x0800f7b5
 800f804:	0800f7b5 	.word	0x0800f7b5
 800f808:	0800f903 	.word	0x0800f903
 800f80c:	0800f8e9 	.word	0x0800f8e9
 800f810:	0800f867 	.word	0x0800f867
 800f814:	0800f867 	.word	0x0800f867
 800f818:	0800f867 	.word	0x0800f867
 800f81c:	0800f7b5 	.word	0x0800f7b5
 800f820:	0800f8a5 	.word	0x0800f8a5
 800f824:	0800f7b5 	.word	0x0800f7b5
 800f828:	0800f7b5 	.word	0x0800f7b5
 800f82c:	0800f7b5 	.word	0x0800f7b5
 800f830:	0800f7b5 	.word	0x0800f7b5
 800f834:	0800f913 	.word	0x0800f913
 800f838:	0800f8e1 	.word	0x0800f8e1
 800f83c:	0800f887 	.word	0x0800f887
 800f840:	0800f7b5 	.word	0x0800f7b5
 800f844:	0800f7b5 	.word	0x0800f7b5
 800f848:	0800f90f 	.word	0x0800f90f
 800f84c:	0800f7b5 	.word	0x0800f7b5
 800f850:	0800f8e9 	.word	0x0800f8e9
 800f854:	0800f7b5 	.word	0x0800f7b5
 800f858:	0800f7b5 	.word	0x0800f7b5
 800f85c:	0800f88f 	.word	0x0800f88f
 800f860:	3b45      	subs	r3, #69	; 0x45
 800f862:	2b02      	cmp	r3, #2
 800f864:	d8a6      	bhi.n	800f7b4 <__ssvfiscanf_r+0xec>
 800f866:	2305      	movs	r3, #5
 800f868:	e01f      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f86a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f86c:	4621      	mov	r1, r4
 800f86e:	4630      	mov	r0, r6
 800f870:	4798      	blx	r3
 800f872:	2800      	cmp	r0, #0
 800f874:	f43f af68 	beq.w	800f748 <__ssvfiscanf_r+0x80>
 800f878:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f87a:	2800      	cmp	r0, #0
 800f87c:	f040 808d 	bne.w	800f99a <__ssvfiscanf_r+0x2d2>
 800f880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f884:	e08f      	b.n	800f9a6 <__ssvfiscanf_r+0x2de>
 800f886:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f888:	f042 0220 	orr.w	r2, r2, #32
 800f88c:	9241      	str	r2, [sp, #260]	; 0x104
 800f88e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f894:	9241      	str	r2, [sp, #260]	; 0x104
 800f896:	2210      	movs	r2, #16
 800f898:	2b6f      	cmp	r3, #111	; 0x6f
 800f89a:	9242      	str	r2, [sp, #264]	; 0x108
 800f89c:	bf34      	ite	cc
 800f89e:	2303      	movcc	r3, #3
 800f8a0:	2304      	movcs	r3, #4
 800f8a2:	e002      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	9342      	str	r3, [sp, #264]	; 0x108
 800f8a8:	2303      	movs	r3, #3
 800f8aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800f8ac:	6863      	ldr	r3, [r4, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dd3d      	ble.n	800f92e <__ssvfiscanf_r+0x266>
 800f8b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8b4:	0659      	lsls	r1, r3, #25
 800f8b6:	d404      	bmi.n	800f8c2 <__ssvfiscanf_r+0x1fa>
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	781a      	ldrb	r2, [r3, #0]
 800f8bc:	5cba      	ldrb	r2, [r7, r2]
 800f8be:	0712      	lsls	r2, r2, #28
 800f8c0:	d43c      	bmi.n	800f93c <__ssvfiscanf_r+0x274>
 800f8c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	dc4b      	bgt.n	800f960 <__ssvfiscanf_r+0x298>
 800f8c8:	466b      	mov	r3, sp
 800f8ca:	4622      	mov	r2, r4
 800f8cc:	a941      	add	r1, sp, #260	; 0x104
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f000 f9b6 	bl	800fc40 <_scanf_chars>
 800f8d4:	2801      	cmp	r0, #1
 800f8d6:	d06a      	beq.n	800f9ae <__ssvfiscanf_r+0x2e6>
 800f8d8:	2802      	cmp	r0, #2
 800f8da:	f47f af1c 	bne.w	800f716 <__ssvfiscanf_r+0x4e>
 800f8de:	e7cb      	b.n	800f878 <__ssvfiscanf_r+0x1b0>
 800f8e0:	2308      	movs	r3, #8
 800f8e2:	9342      	str	r3, [sp, #264]	; 0x108
 800f8e4:	2304      	movs	r3, #4
 800f8e6:	e7e0      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f8e8:	220a      	movs	r2, #10
 800f8ea:	e7d5      	b.n	800f898 <__ssvfiscanf_r+0x1d0>
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	4640      	mov	r0, r8
 800f8f0:	f000 faf4 	bl	800fedc <__sccl>
 800f8f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8fa:	9341      	str	r3, [sp, #260]	; 0x104
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	2301      	movs	r3, #1
 800f900:	e7d3      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f902:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f908:	9341      	str	r3, [sp, #260]	; 0x104
 800f90a:	2300      	movs	r3, #0
 800f90c:	e7cd      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f90e:	2302      	movs	r3, #2
 800f910:	e7cb      	b.n	800f8aa <__ssvfiscanf_r+0x1e2>
 800f912:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f914:	06c3      	lsls	r3, r0, #27
 800f916:	f53f aefe 	bmi.w	800f716 <__ssvfiscanf_r+0x4e>
 800f91a:	9b00      	ldr	r3, [sp, #0]
 800f91c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f91e:	1d19      	adds	r1, r3, #4
 800f920:	9100      	str	r1, [sp, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	07c0      	lsls	r0, r0, #31
 800f926:	bf4c      	ite	mi
 800f928:	801a      	strhmi	r2, [r3, #0]
 800f92a:	601a      	strpl	r2, [r3, #0]
 800f92c:	e6f3      	b.n	800f716 <__ssvfiscanf_r+0x4e>
 800f92e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f930:	4621      	mov	r1, r4
 800f932:	4630      	mov	r0, r6
 800f934:	4798      	blx	r3
 800f936:	2800      	cmp	r0, #0
 800f938:	d0bb      	beq.n	800f8b2 <__ssvfiscanf_r+0x1ea>
 800f93a:	e79d      	b.n	800f878 <__ssvfiscanf_r+0x1b0>
 800f93c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f93e:	3201      	adds	r2, #1
 800f940:	9245      	str	r2, [sp, #276]	; 0x114
 800f942:	6862      	ldr	r2, [r4, #4]
 800f944:	3a01      	subs	r2, #1
 800f946:	2a00      	cmp	r2, #0
 800f948:	6062      	str	r2, [r4, #4]
 800f94a:	dd02      	ble.n	800f952 <__ssvfiscanf_r+0x28a>
 800f94c:	3301      	adds	r3, #1
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	e7b2      	b.n	800f8b8 <__ssvfiscanf_r+0x1f0>
 800f952:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f954:	4621      	mov	r1, r4
 800f956:	4630      	mov	r0, r6
 800f958:	4798      	blx	r3
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d0ac      	beq.n	800f8b8 <__ssvfiscanf_r+0x1f0>
 800f95e:	e78b      	b.n	800f878 <__ssvfiscanf_r+0x1b0>
 800f960:	2b04      	cmp	r3, #4
 800f962:	dc0f      	bgt.n	800f984 <__ssvfiscanf_r+0x2bc>
 800f964:	466b      	mov	r3, sp
 800f966:	4622      	mov	r2, r4
 800f968:	a941      	add	r1, sp, #260	; 0x104
 800f96a:	4630      	mov	r0, r6
 800f96c:	f000 f9c2 	bl	800fcf4 <_scanf_i>
 800f970:	e7b0      	b.n	800f8d4 <__ssvfiscanf_r+0x20c>
 800f972:	bf00      	nop
 800f974:	0800f615 	.word	0x0800f615
 800f978:	0800f68f 	.word	0x0800f68f
 800f97c:	08015d57 	.word	0x08015d57
 800f980:	08015f26 	.word	0x08015f26
 800f984:	4b0b      	ldr	r3, [pc, #44]	; (800f9b4 <__ssvfiscanf_r+0x2ec>)
 800f986:	2b00      	cmp	r3, #0
 800f988:	f43f aec5 	beq.w	800f716 <__ssvfiscanf_r+0x4e>
 800f98c:	466b      	mov	r3, sp
 800f98e:	4622      	mov	r2, r4
 800f990:	a941      	add	r1, sp, #260	; 0x104
 800f992:	4630      	mov	r0, r6
 800f994:	f3af 8000 	nop.w
 800f998:	e79c      	b.n	800f8d4 <__ssvfiscanf_r+0x20c>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f9a0:	bf18      	it	ne
 800f9a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f9a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f9b0:	e7f9      	b.n	800f9a6 <__ssvfiscanf_r+0x2de>
 800f9b2:	bf00      	nop
 800f9b4:	00000000 	.word	0x00000000

0800f9b8 <__sfputc_r>:
 800f9b8:	6893      	ldr	r3, [r2, #8]
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	b410      	push	{r4}
 800f9c0:	6093      	str	r3, [r2, #8]
 800f9c2:	da08      	bge.n	800f9d6 <__sfputc_r+0x1e>
 800f9c4:	6994      	ldr	r4, [r2, #24]
 800f9c6:	42a3      	cmp	r3, r4
 800f9c8:	db01      	blt.n	800f9ce <__sfputc_r+0x16>
 800f9ca:	290a      	cmp	r1, #10
 800f9cc:	d103      	bne.n	800f9d6 <__sfputc_r+0x1e>
 800f9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9d2:	f000 bfd7 	b.w	8010984 <__swbuf_r>
 800f9d6:	6813      	ldr	r3, [r2, #0]
 800f9d8:	1c58      	adds	r0, r3, #1
 800f9da:	6010      	str	r0, [r2, #0]
 800f9dc:	7019      	strb	r1, [r3, #0]
 800f9de:	4608      	mov	r0, r1
 800f9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9e4:	4770      	bx	lr

0800f9e6 <__sfputs_r>:
 800f9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	460f      	mov	r7, r1
 800f9ec:	4614      	mov	r4, r2
 800f9ee:	18d5      	adds	r5, r2, r3
 800f9f0:	42ac      	cmp	r4, r5
 800f9f2:	d101      	bne.n	800f9f8 <__sfputs_r+0x12>
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	e007      	b.n	800fa08 <__sfputs_r+0x22>
 800f9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9fc:	463a      	mov	r2, r7
 800f9fe:	4630      	mov	r0, r6
 800fa00:	f7ff ffda 	bl	800f9b8 <__sfputc_r>
 800fa04:	1c43      	adds	r3, r0, #1
 800fa06:	d1f3      	bne.n	800f9f0 <__sfputs_r+0xa>
 800fa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa0c <_vfiprintf_r>:
 800fa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa10:	460d      	mov	r5, r1
 800fa12:	b09d      	sub	sp, #116	; 0x74
 800fa14:	4614      	mov	r4, r2
 800fa16:	4698      	mov	r8, r3
 800fa18:	4606      	mov	r6, r0
 800fa1a:	b118      	cbz	r0, 800fa24 <_vfiprintf_r+0x18>
 800fa1c:	6a03      	ldr	r3, [r0, #32]
 800fa1e:	b90b      	cbnz	r3, 800fa24 <_vfiprintf_r+0x18>
 800fa20:	f7fe fc18 	bl	800e254 <__sinit>
 800fa24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa26:	07d9      	lsls	r1, r3, #31
 800fa28:	d405      	bmi.n	800fa36 <_vfiprintf_r+0x2a>
 800fa2a:	89ab      	ldrh	r3, [r5, #12]
 800fa2c:	059a      	lsls	r2, r3, #22
 800fa2e:	d402      	bmi.n	800fa36 <_vfiprintf_r+0x2a>
 800fa30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa32:	f7fe fda2 	bl	800e57a <__retarget_lock_acquire_recursive>
 800fa36:	89ab      	ldrh	r3, [r5, #12]
 800fa38:	071b      	lsls	r3, r3, #28
 800fa3a:	d501      	bpl.n	800fa40 <_vfiprintf_r+0x34>
 800fa3c:	692b      	ldr	r3, [r5, #16]
 800fa3e:	b99b      	cbnz	r3, 800fa68 <_vfiprintf_r+0x5c>
 800fa40:	4629      	mov	r1, r5
 800fa42:	4630      	mov	r0, r6
 800fa44:	f000 ffdc 	bl	8010a00 <__swsetup_r>
 800fa48:	b170      	cbz	r0, 800fa68 <_vfiprintf_r+0x5c>
 800fa4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa4c:	07dc      	lsls	r4, r3, #31
 800fa4e:	d504      	bpl.n	800fa5a <_vfiprintf_r+0x4e>
 800fa50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa54:	b01d      	add	sp, #116	; 0x74
 800fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5a:	89ab      	ldrh	r3, [r5, #12]
 800fa5c:	0598      	lsls	r0, r3, #22
 800fa5e:	d4f7      	bmi.n	800fa50 <_vfiprintf_r+0x44>
 800fa60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa62:	f7fe fd8b 	bl	800e57c <__retarget_lock_release_recursive>
 800fa66:	e7f3      	b.n	800fa50 <_vfiprintf_r+0x44>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa6c:	2320      	movs	r3, #32
 800fa6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa72:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa76:	2330      	movs	r3, #48	; 0x30
 800fa78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fc2c <_vfiprintf_r+0x220>
 800fa7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa80:	f04f 0901 	mov.w	r9, #1
 800fa84:	4623      	mov	r3, r4
 800fa86:	469a      	mov	sl, r3
 800fa88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa8c:	b10a      	cbz	r2, 800fa92 <_vfiprintf_r+0x86>
 800fa8e:	2a25      	cmp	r2, #37	; 0x25
 800fa90:	d1f9      	bne.n	800fa86 <_vfiprintf_r+0x7a>
 800fa92:	ebba 0b04 	subs.w	fp, sl, r4
 800fa96:	d00b      	beq.n	800fab0 <_vfiprintf_r+0xa4>
 800fa98:	465b      	mov	r3, fp
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7ff ffa1 	bl	800f9e6 <__sfputs_r>
 800faa4:	3001      	adds	r0, #1
 800faa6:	f000 80a9 	beq.w	800fbfc <_vfiprintf_r+0x1f0>
 800faaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faac:	445a      	add	r2, fp
 800faae:	9209      	str	r2, [sp, #36]	; 0x24
 800fab0:	f89a 3000 	ldrb.w	r3, [sl]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f000 80a1 	beq.w	800fbfc <_vfiprintf_r+0x1f0>
 800faba:	2300      	movs	r3, #0
 800fabc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fac4:	f10a 0a01 	add.w	sl, sl, #1
 800fac8:	9304      	str	r3, [sp, #16]
 800faca:	9307      	str	r3, [sp, #28]
 800facc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fad0:	931a      	str	r3, [sp, #104]	; 0x68
 800fad2:	4654      	mov	r4, sl
 800fad4:	2205      	movs	r2, #5
 800fad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fada:	4854      	ldr	r0, [pc, #336]	; (800fc2c <_vfiprintf_r+0x220>)
 800fadc:	f7f0 fb98 	bl	8000210 <memchr>
 800fae0:	9a04      	ldr	r2, [sp, #16]
 800fae2:	b9d8      	cbnz	r0, 800fb1c <_vfiprintf_r+0x110>
 800fae4:	06d1      	lsls	r1, r2, #27
 800fae6:	bf44      	itt	mi
 800fae8:	2320      	movmi	r3, #32
 800faea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faee:	0713      	lsls	r3, r2, #28
 800faf0:	bf44      	itt	mi
 800faf2:	232b      	movmi	r3, #43	; 0x2b
 800faf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fafc:	2b2a      	cmp	r3, #42	; 0x2a
 800fafe:	d015      	beq.n	800fb2c <_vfiprintf_r+0x120>
 800fb00:	9a07      	ldr	r2, [sp, #28]
 800fb02:	4654      	mov	r4, sl
 800fb04:	2000      	movs	r0, #0
 800fb06:	f04f 0c0a 	mov.w	ip, #10
 800fb0a:	4621      	mov	r1, r4
 800fb0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb10:	3b30      	subs	r3, #48	; 0x30
 800fb12:	2b09      	cmp	r3, #9
 800fb14:	d94d      	bls.n	800fbb2 <_vfiprintf_r+0x1a6>
 800fb16:	b1b0      	cbz	r0, 800fb46 <_vfiprintf_r+0x13a>
 800fb18:	9207      	str	r2, [sp, #28]
 800fb1a:	e014      	b.n	800fb46 <_vfiprintf_r+0x13a>
 800fb1c:	eba0 0308 	sub.w	r3, r0, r8
 800fb20:	fa09 f303 	lsl.w	r3, r9, r3
 800fb24:	4313      	orrs	r3, r2
 800fb26:	9304      	str	r3, [sp, #16]
 800fb28:	46a2      	mov	sl, r4
 800fb2a:	e7d2      	b.n	800fad2 <_vfiprintf_r+0xc6>
 800fb2c:	9b03      	ldr	r3, [sp, #12]
 800fb2e:	1d19      	adds	r1, r3, #4
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	9103      	str	r1, [sp, #12]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bfbb      	ittet	lt
 800fb38:	425b      	neglt	r3, r3
 800fb3a:	f042 0202 	orrlt.w	r2, r2, #2
 800fb3e:	9307      	strge	r3, [sp, #28]
 800fb40:	9307      	strlt	r3, [sp, #28]
 800fb42:	bfb8      	it	lt
 800fb44:	9204      	strlt	r2, [sp, #16]
 800fb46:	7823      	ldrb	r3, [r4, #0]
 800fb48:	2b2e      	cmp	r3, #46	; 0x2e
 800fb4a:	d10c      	bne.n	800fb66 <_vfiprintf_r+0x15a>
 800fb4c:	7863      	ldrb	r3, [r4, #1]
 800fb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb50:	d134      	bne.n	800fbbc <_vfiprintf_r+0x1b0>
 800fb52:	9b03      	ldr	r3, [sp, #12]
 800fb54:	1d1a      	adds	r2, r3, #4
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	9203      	str	r2, [sp, #12]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	bfb8      	it	lt
 800fb5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fb62:	3402      	adds	r4, #2
 800fb64:	9305      	str	r3, [sp, #20]
 800fb66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fc3c <_vfiprintf_r+0x230>
 800fb6a:	7821      	ldrb	r1, [r4, #0]
 800fb6c:	2203      	movs	r2, #3
 800fb6e:	4650      	mov	r0, sl
 800fb70:	f7f0 fb4e 	bl	8000210 <memchr>
 800fb74:	b138      	cbz	r0, 800fb86 <_vfiprintf_r+0x17a>
 800fb76:	9b04      	ldr	r3, [sp, #16]
 800fb78:	eba0 000a 	sub.w	r0, r0, sl
 800fb7c:	2240      	movs	r2, #64	; 0x40
 800fb7e:	4082      	lsls	r2, r0
 800fb80:	4313      	orrs	r3, r2
 800fb82:	3401      	adds	r4, #1
 800fb84:	9304      	str	r3, [sp, #16]
 800fb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb8a:	4829      	ldr	r0, [pc, #164]	; (800fc30 <_vfiprintf_r+0x224>)
 800fb8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb90:	2206      	movs	r2, #6
 800fb92:	f7f0 fb3d 	bl	8000210 <memchr>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d03f      	beq.n	800fc1a <_vfiprintf_r+0x20e>
 800fb9a:	4b26      	ldr	r3, [pc, #152]	; (800fc34 <_vfiprintf_r+0x228>)
 800fb9c:	bb1b      	cbnz	r3, 800fbe6 <_vfiprintf_r+0x1da>
 800fb9e:	9b03      	ldr	r3, [sp, #12]
 800fba0:	3307      	adds	r3, #7
 800fba2:	f023 0307 	bic.w	r3, r3, #7
 800fba6:	3308      	adds	r3, #8
 800fba8:	9303      	str	r3, [sp, #12]
 800fbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbac:	443b      	add	r3, r7
 800fbae:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb0:	e768      	b.n	800fa84 <_vfiprintf_r+0x78>
 800fbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	2001      	movs	r0, #1
 800fbba:	e7a6      	b.n	800fb0a <_vfiprintf_r+0xfe>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	3401      	adds	r4, #1
 800fbc0:	9305      	str	r3, [sp, #20]
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	f04f 0c0a 	mov.w	ip, #10
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbce:	3a30      	subs	r2, #48	; 0x30
 800fbd0:	2a09      	cmp	r2, #9
 800fbd2:	d903      	bls.n	800fbdc <_vfiprintf_r+0x1d0>
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d0c6      	beq.n	800fb66 <_vfiprintf_r+0x15a>
 800fbd8:	9105      	str	r1, [sp, #20]
 800fbda:	e7c4      	b.n	800fb66 <_vfiprintf_r+0x15a>
 800fbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e7f0      	b.n	800fbc8 <_vfiprintf_r+0x1bc>
 800fbe6:	ab03      	add	r3, sp, #12
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	462a      	mov	r2, r5
 800fbec:	4b12      	ldr	r3, [pc, #72]	; (800fc38 <_vfiprintf_r+0x22c>)
 800fbee:	a904      	add	r1, sp, #16
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f7fd fd63 	bl	800d6bc <_printf_float>
 800fbf6:	4607      	mov	r7, r0
 800fbf8:	1c78      	adds	r0, r7, #1
 800fbfa:	d1d6      	bne.n	800fbaa <_vfiprintf_r+0x19e>
 800fbfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbfe:	07d9      	lsls	r1, r3, #31
 800fc00:	d405      	bmi.n	800fc0e <_vfiprintf_r+0x202>
 800fc02:	89ab      	ldrh	r3, [r5, #12]
 800fc04:	059a      	lsls	r2, r3, #22
 800fc06:	d402      	bmi.n	800fc0e <_vfiprintf_r+0x202>
 800fc08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc0a:	f7fe fcb7 	bl	800e57c <__retarget_lock_release_recursive>
 800fc0e:	89ab      	ldrh	r3, [r5, #12]
 800fc10:	065b      	lsls	r3, r3, #25
 800fc12:	f53f af1d 	bmi.w	800fa50 <_vfiprintf_r+0x44>
 800fc16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc18:	e71c      	b.n	800fa54 <_vfiprintf_r+0x48>
 800fc1a:	ab03      	add	r3, sp, #12
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	462a      	mov	r2, r5
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <_vfiprintf_r+0x22c>)
 800fc22:	a904      	add	r1, sp, #16
 800fc24:	4630      	mov	r0, r6
 800fc26:	f7fe f895 	bl	800dd54 <_printf_i>
 800fc2a:	e7e4      	b.n	800fbf6 <_vfiprintf_r+0x1ea>
 800fc2c:	08015f20 	.word	0x08015f20
 800fc30:	08015f2a 	.word	0x08015f2a
 800fc34:	0800d6bd 	.word	0x0800d6bd
 800fc38:	0800f9e7 	.word	0x0800f9e7
 800fc3c:	08015f26 	.word	0x08015f26

0800fc40 <_scanf_chars>:
 800fc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc44:	4615      	mov	r5, r2
 800fc46:	688a      	ldr	r2, [r1, #8]
 800fc48:	4680      	mov	r8, r0
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	b932      	cbnz	r2, 800fc5c <_scanf_chars+0x1c>
 800fc4e:	698a      	ldr	r2, [r1, #24]
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	bf0c      	ite	eq
 800fc54:	2201      	moveq	r2, #1
 800fc56:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800fc5a:	608a      	str	r2, [r1, #8]
 800fc5c:	6822      	ldr	r2, [r4, #0]
 800fc5e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fcf0 <_scanf_chars+0xb0>
 800fc62:	06d1      	lsls	r1, r2, #27
 800fc64:	bf5f      	itttt	pl
 800fc66:	681a      	ldrpl	r2, [r3, #0]
 800fc68:	1d11      	addpl	r1, r2, #4
 800fc6a:	6019      	strpl	r1, [r3, #0]
 800fc6c:	6816      	ldrpl	r6, [r2, #0]
 800fc6e:	2700      	movs	r7, #0
 800fc70:	69a0      	ldr	r0, [r4, #24]
 800fc72:	b188      	cbz	r0, 800fc98 <_scanf_chars+0x58>
 800fc74:	2801      	cmp	r0, #1
 800fc76:	d107      	bne.n	800fc88 <_scanf_chars+0x48>
 800fc78:	682a      	ldr	r2, [r5, #0]
 800fc7a:	7811      	ldrb	r1, [r2, #0]
 800fc7c:	6962      	ldr	r2, [r4, #20]
 800fc7e:	5c52      	ldrb	r2, [r2, r1]
 800fc80:	b952      	cbnz	r2, 800fc98 <_scanf_chars+0x58>
 800fc82:	2f00      	cmp	r7, #0
 800fc84:	d031      	beq.n	800fcea <_scanf_chars+0xaa>
 800fc86:	e022      	b.n	800fcce <_scanf_chars+0x8e>
 800fc88:	2802      	cmp	r0, #2
 800fc8a:	d120      	bne.n	800fcce <_scanf_chars+0x8e>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fc94:	071b      	lsls	r3, r3, #28
 800fc96:	d41a      	bmi.n	800fcce <_scanf_chars+0x8e>
 800fc98:	6823      	ldr	r3, [r4, #0]
 800fc9a:	06da      	lsls	r2, r3, #27
 800fc9c:	bf5e      	ittt	pl
 800fc9e:	682b      	ldrpl	r3, [r5, #0]
 800fca0:	781b      	ldrbpl	r3, [r3, #0]
 800fca2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fca6:	682a      	ldr	r2, [r5, #0]
 800fca8:	686b      	ldr	r3, [r5, #4]
 800fcaa:	3201      	adds	r2, #1
 800fcac:	602a      	str	r2, [r5, #0]
 800fcae:	68a2      	ldr	r2, [r4, #8]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	3a01      	subs	r2, #1
 800fcb4:	606b      	str	r3, [r5, #4]
 800fcb6:	3701      	adds	r7, #1
 800fcb8:	60a2      	str	r2, [r4, #8]
 800fcba:	b142      	cbz	r2, 800fcce <_scanf_chars+0x8e>
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	dcd7      	bgt.n	800fc70 <_scanf_chars+0x30>
 800fcc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	4798      	blx	r3
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d0d0      	beq.n	800fc70 <_scanf_chars+0x30>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	f013 0310 	ands.w	r3, r3, #16
 800fcd4:	d105      	bne.n	800fce2 <_scanf_chars+0xa2>
 800fcd6:	68e2      	ldr	r2, [r4, #12]
 800fcd8:	3201      	adds	r2, #1
 800fcda:	60e2      	str	r2, [r4, #12]
 800fcdc:	69a2      	ldr	r2, [r4, #24]
 800fcde:	b102      	cbz	r2, 800fce2 <_scanf_chars+0xa2>
 800fce0:	7033      	strb	r3, [r6, #0]
 800fce2:	6923      	ldr	r3, [r4, #16]
 800fce4:	443b      	add	r3, r7
 800fce6:	6123      	str	r3, [r4, #16]
 800fce8:	2000      	movs	r0, #0
 800fcea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcee:	bf00      	nop
 800fcf0:	08015d57 	.word	0x08015d57

0800fcf4 <_scanf_i>:
 800fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	4698      	mov	r8, r3
 800fcfa:	4b74      	ldr	r3, [pc, #464]	; (800fecc <_scanf_i+0x1d8>)
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	4682      	mov	sl, r0
 800fd00:	4616      	mov	r6, r2
 800fd02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd06:	b087      	sub	sp, #28
 800fd08:	ab03      	add	r3, sp, #12
 800fd0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fd0e:	4b70      	ldr	r3, [pc, #448]	; (800fed0 <_scanf_i+0x1dc>)
 800fd10:	69a1      	ldr	r1, [r4, #24]
 800fd12:	4a70      	ldr	r2, [pc, #448]	; (800fed4 <_scanf_i+0x1e0>)
 800fd14:	2903      	cmp	r1, #3
 800fd16:	bf18      	it	ne
 800fd18:	461a      	movne	r2, r3
 800fd1a:	68a3      	ldr	r3, [r4, #8]
 800fd1c:	9201      	str	r2, [sp, #4]
 800fd1e:	1e5a      	subs	r2, r3, #1
 800fd20:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd24:	bf88      	it	hi
 800fd26:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd2a:	4627      	mov	r7, r4
 800fd2c:	bf82      	ittt	hi
 800fd2e:	eb03 0905 	addhi.w	r9, r3, r5
 800fd32:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd36:	60a3      	strhi	r3, [r4, #8]
 800fd38:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fd3c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fd40:	bf98      	it	ls
 800fd42:	f04f 0900 	movls.w	r9, #0
 800fd46:	6023      	str	r3, [r4, #0]
 800fd48:	463d      	mov	r5, r7
 800fd4a:	f04f 0b00 	mov.w	fp, #0
 800fd4e:	6831      	ldr	r1, [r6, #0]
 800fd50:	ab03      	add	r3, sp, #12
 800fd52:	7809      	ldrb	r1, [r1, #0]
 800fd54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fd58:	2202      	movs	r2, #2
 800fd5a:	f7f0 fa59 	bl	8000210 <memchr>
 800fd5e:	b328      	cbz	r0, 800fdac <_scanf_i+0xb8>
 800fd60:	f1bb 0f01 	cmp.w	fp, #1
 800fd64:	d159      	bne.n	800fe1a <_scanf_i+0x126>
 800fd66:	6862      	ldr	r2, [r4, #4]
 800fd68:	b92a      	cbnz	r2, 800fd76 <_scanf_i+0x82>
 800fd6a:	6822      	ldr	r2, [r4, #0]
 800fd6c:	2308      	movs	r3, #8
 800fd6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd72:	6063      	str	r3, [r4, #4]
 800fd74:	6022      	str	r2, [r4, #0]
 800fd76:	6822      	ldr	r2, [r4, #0]
 800fd78:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fd7c:	6022      	str	r2, [r4, #0]
 800fd7e:	68a2      	ldr	r2, [r4, #8]
 800fd80:	1e51      	subs	r1, r2, #1
 800fd82:	60a1      	str	r1, [r4, #8]
 800fd84:	b192      	cbz	r2, 800fdac <_scanf_i+0xb8>
 800fd86:	6832      	ldr	r2, [r6, #0]
 800fd88:	1c51      	adds	r1, r2, #1
 800fd8a:	6031      	str	r1, [r6, #0]
 800fd8c:	7812      	ldrb	r2, [r2, #0]
 800fd8e:	f805 2b01 	strb.w	r2, [r5], #1
 800fd92:	6872      	ldr	r2, [r6, #4]
 800fd94:	3a01      	subs	r2, #1
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	6072      	str	r2, [r6, #4]
 800fd9a:	dc07      	bgt.n	800fdac <_scanf_i+0xb8>
 800fd9c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fda0:	4631      	mov	r1, r6
 800fda2:	4650      	mov	r0, sl
 800fda4:	4790      	blx	r2
 800fda6:	2800      	cmp	r0, #0
 800fda8:	f040 8085 	bne.w	800feb6 <_scanf_i+0x1c2>
 800fdac:	f10b 0b01 	add.w	fp, fp, #1
 800fdb0:	f1bb 0f03 	cmp.w	fp, #3
 800fdb4:	d1cb      	bne.n	800fd4e <_scanf_i+0x5a>
 800fdb6:	6863      	ldr	r3, [r4, #4]
 800fdb8:	b90b      	cbnz	r3, 800fdbe <_scanf_i+0xca>
 800fdba:	230a      	movs	r3, #10
 800fdbc:	6063      	str	r3, [r4, #4]
 800fdbe:	6863      	ldr	r3, [r4, #4]
 800fdc0:	4945      	ldr	r1, [pc, #276]	; (800fed8 <_scanf_i+0x1e4>)
 800fdc2:	6960      	ldr	r0, [r4, #20]
 800fdc4:	1ac9      	subs	r1, r1, r3
 800fdc6:	f000 f889 	bl	800fedc <__sccl>
 800fdca:	f04f 0b00 	mov.w	fp, #0
 800fdce:	68a3      	ldr	r3, [r4, #8]
 800fdd0:	6822      	ldr	r2, [r4, #0]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d03d      	beq.n	800fe52 <_scanf_i+0x15e>
 800fdd6:	6831      	ldr	r1, [r6, #0]
 800fdd8:	6960      	ldr	r0, [r4, #20]
 800fdda:	f891 c000 	ldrb.w	ip, [r1]
 800fdde:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d035      	beq.n	800fe52 <_scanf_i+0x15e>
 800fde6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fdea:	d124      	bne.n	800fe36 <_scanf_i+0x142>
 800fdec:	0510      	lsls	r0, r2, #20
 800fdee:	d522      	bpl.n	800fe36 <_scanf_i+0x142>
 800fdf0:	f10b 0b01 	add.w	fp, fp, #1
 800fdf4:	f1b9 0f00 	cmp.w	r9, #0
 800fdf8:	d003      	beq.n	800fe02 <_scanf_i+0x10e>
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fe00:	60a3      	str	r3, [r4, #8]
 800fe02:	6873      	ldr	r3, [r6, #4]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	6073      	str	r3, [r6, #4]
 800fe0a:	dd1b      	ble.n	800fe44 <_scanf_i+0x150>
 800fe0c:	6833      	ldr	r3, [r6, #0]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	6033      	str	r3, [r6, #0]
 800fe12:	68a3      	ldr	r3, [r4, #8]
 800fe14:	3b01      	subs	r3, #1
 800fe16:	60a3      	str	r3, [r4, #8]
 800fe18:	e7d9      	b.n	800fdce <_scanf_i+0xda>
 800fe1a:	f1bb 0f02 	cmp.w	fp, #2
 800fe1e:	d1ae      	bne.n	800fd7e <_scanf_i+0x8a>
 800fe20:	6822      	ldr	r2, [r4, #0]
 800fe22:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fe26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fe2a:	d1bf      	bne.n	800fdac <_scanf_i+0xb8>
 800fe2c:	2310      	movs	r3, #16
 800fe2e:	6063      	str	r3, [r4, #4]
 800fe30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe34:	e7a2      	b.n	800fd7c <_scanf_i+0x88>
 800fe36:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fe3a:	6022      	str	r2, [r4, #0]
 800fe3c:	780b      	ldrb	r3, [r1, #0]
 800fe3e:	f805 3b01 	strb.w	r3, [r5], #1
 800fe42:	e7de      	b.n	800fe02 <_scanf_i+0x10e>
 800fe44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe48:	4631      	mov	r1, r6
 800fe4a:	4650      	mov	r0, sl
 800fe4c:	4798      	blx	r3
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d0df      	beq.n	800fe12 <_scanf_i+0x11e>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	05d9      	lsls	r1, r3, #23
 800fe56:	d50d      	bpl.n	800fe74 <_scanf_i+0x180>
 800fe58:	42bd      	cmp	r5, r7
 800fe5a:	d909      	bls.n	800fe70 <_scanf_i+0x17c>
 800fe5c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fe60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe64:	4632      	mov	r2, r6
 800fe66:	4650      	mov	r0, sl
 800fe68:	4798      	blx	r3
 800fe6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800fe6e:	464d      	mov	r5, r9
 800fe70:	42bd      	cmp	r5, r7
 800fe72:	d028      	beq.n	800fec6 <_scanf_i+0x1d2>
 800fe74:	6822      	ldr	r2, [r4, #0]
 800fe76:	f012 0210 	ands.w	r2, r2, #16
 800fe7a:	d113      	bne.n	800fea4 <_scanf_i+0x1b0>
 800fe7c:	702a      	strb	r2, [r5, #0]
 800fe7e:	6863      	ldr	r3, [r4, #4]
 800fe80:	9e01      	ldr	r6, [sp, #4]
 800fe82:	4639      	mov	r1, r7
 800fe84:	4650      	mov	r0, sl
 800fe86:	47b0      	blx	r6
 800fe88:	f8d8 3000 	ldr.w	r3, [r8]
 800fe8c:	6821      	ldr	r1, [r4, #0]
 800fe8e:	1d1a      	adds	r2, r3, #4
 800fe90:	f8c8 2000 	str.w	r2, [r8]
 800fe94:	f011 0f20 	tst.w	r1, #32
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	d00f      	beq.n	800febc <_scanf_i+0x1c8>
 800fe9c:	6018      	str	r0, [r3, #0]
 800fe9e:	68e3      	ldr	r3, [r4, #12]
 800fea0:	3301      	adds	r3, #1
 800fea2:	60e3      	str	r3, [r4, #12]
 800fea4:	6923      	ldr	r3, [r4, #16]
 800fea6:	1bed      	subs	r5, r5, r7
 800fea8:	445d      	add	r5, fp
 800feaa:	442b      	add	r3, r5
 800feac:	6123      	str	r3, [r4, #16]
 800feae:	2000      	movs	r0, #0
 800feb0:	b007      	add	sp, #28
 800feb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb6:	f04f 0b00 	mov.w	fp, #0
 800feba:	e7ca      	b.n	800fe52 <_scanf_i+0x15e>
 800febc:	07ca      	lsls	r2, r1, #31
 800febe:	bf4c      	ite	mi
 800fec0:	8018      	strhmi	r0, [r3, #0]
 800fec2:	6018      	strpl	r0, [r3, #0]
 800fec4:	e7eb      	b.n	800fe9e <_scanf_i+0x1aa>
 800fec6:	2001      	movs	r0, #1
 800fec8:	e7f2      	b.n	800feb0 <_scanf_i+0x1bc>
 800feca:	bf00      	nop
 800fecc:	08011c44 	.word	0x08011c44
 800fed0:	08010981 	.word	0x08010981
 800fed4:	0800e389 	.word	0x0800e389
 800fed8:	08015f41 	.word	0x08015f41

0800fedc <__sccl>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	780b      	ldrb	r3, [r1, #0]
 800fee0:	4604      	mov	r4, r0
 800fee2:	2b5e      	cmp	r3, #94	; 0x5e
 800fee4:	bf0b      	itete	eq
 800fee6:	784b      	ldrbeq	r3, [r1, #1]
 800fee8:	1c4a      	addne	r2, r1, #1
 800feea:	1c8a      	addeq	r2, r1, #2
 800feec:	2100      	movne	r1, #0
 800feee:	bf08      	it	eq
 800fef0:	2101      	moveq	r1, #1
 800fef2:	3801      	subs	r0, #1
 800fef4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fef8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fefc:	42a8      	cmp	r0, r5
 800fefe:	d1fb      	bne.n	800fef8 <__sccl+0x1c>
 800ff00:	b90b      	cbnz	r3, 800ff06 <__sccl+0x2a>
 800ff02:	1e50      	subs	r0, r2, #1
 800ff04:	bd70      	pop	{r4, r5, r6, pc}
 800ff06:	f081 0101 	eor.w	r1, r1, #1
 800ff0a:	54e1      	strb	r1, [r4, r3]
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	4602      	mov	r2, r0
 800ff10:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ff14:	2d2d      	cmp	r5, #45	; 0x2d
 800ff16:	d005      	beq.n	800ff24 <__sccl+0x48>
 800ff18:	2d5d      	cmp	r5, #93	; 0x5d
 800ff1a:	d016      	beq.n	800ff4a <__sccl+0x6e>
 800ff1c:	2d00      	cmp	r5, #0
 800ff1e:	d0f1      	beq.n	800ff04 <__sccl+0x28>
 800ff20:	462b      	mov	r3, r5
 800ff22:	e7f2      	b.n	800ff0a <__sccl+0x2e>
 800ff24:	7846      	ldrb	r6, [r0, #1]
 800ff26:	2e5d      	cmp	r6, #93	; 0x5d
 800ff28:	d0fa      	beq.n	800ff20 <__sccl+0x44>
 800ff2a:	42b3      	cmp	r3, r6
 800ff2c:	dcf8      	bgt.n	800ff20 <__sccl+0x44>
 800ff2e:	3002      	adds	r0, #2
 800ff30:	461a      	mov	r2, r3
 800ff32:	3201      	adds	r2, #1
 800ff34:	4296      	cmp	r6, r2
 800ff36:	54a1      	strb	r1, [r4, r2]
 800ff38:	dcfb      	bgt.n	800ff32 <__sccl+0x56>
 800ff3a:	1af2      	subs	r2, r6, r3
 800ff3c:	3a01      	subs	r2, #1
 800ff3e:	1c5d      	adds	r5, r3, #1
 800ff40:	42b3      	cmp	r3, r6
 800ff42:	bfa8      	it	ge
 800ff44:	2200      	movge	r2, #0
 800ff46:	18ab      	adds	r3, r5, r2
 800ff48:	e7e1      	b.n	800ff0e <__sccl+0x32>
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	e7da      	b.n	800ff04 <__sccl+0x28>
	...

0800ff50 <__sflush_r>:
 800ff50:	898a      	ldrh	r2, [r1, #12]
 800ff52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	4605      	mov	r5, r0
 800ff58:	0710      	lsls	r0, r2, #28
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	d458      	bmi.n	8010010 <__sflush_r+0xc0>
 800ff5e:	684b      	ldr	r3, [r1, #4]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	dc05      	bgt.n	800ff70 <__sflush_r+0x20>
 800ff64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dc02      	bgt.n	800ff70 <__sflush_r+0x20>
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff72:	2e00      	cmp	r6, #0
 800ff74:	d0f9      	beq.n	800ff6a <__sflush_r+0x1a>
 800ff76:	2300      	movs	r3, #0
 800ff78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff7c:	682f      	ldr	r7, [r5, #0]
 800ff7e:	6a21      	ldr	r1, [r4, #32]
 800ff80:	602b      	str	r3, [r5, #0]
 800ff82:	d032      	beq.n	800ffea <__sflush_r+0x9a>
 800ff84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff86:	89a3      	ldrh	r3, [r4, #12]
 800ff88:	075a      	lsls	r2, r3, #29
 800ff8a:	d505      	bpl.n	800ff98 <__sflush_r+0x48>
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	1ac0      	subs	r0, r0, r3
 800ff90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff92:	b10b      	cbz	r3, 800ff98 <__sflush_r+0x48>
 800ff94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff96:	1ac0      	subs	r0, r0, r3
 800ff98:	2300      	movs	r3, #0
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff9e:	6a21      	ldr	r1, [r4, #32]
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	47b0      	blx	r6
 800ffa4:	1c43      	adds	r3, r0, #1
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	d106      	bne.n	800ffb8 <__sflush_r+0x68>
 800ffaa:	6829      	ldr	r1, [r5, #0]
 800ffac:	291d      	cmp	r1, #29
 800ffae:	d82b      	bhi.n	8010008 <__sflush_r+0xb8>
 800ffb0:	4a29      	ldr	r2, [pc, #164]	; (8010058 <__sflush_r+0x108>)
 800ffb2:	410a      	asrs	r2, r1
 800ffb4:	07d6      	lsls	r6, r2, #31
 800ffb6:	d427      	bmi.n	8010008 <__sflush_r+0xb8>
 800ffb8:	2200      	movs	r2, #0
 800ffba:	6062      	str	r2, [r4, #4]
 800ffbc:	04d9      	lsls	r1, r3, #19
 800ffbe:	6922      	ldr	r2, [r4, #16]
 800ffc0:	6022      	str	r2, [r4, #0]
 800ffc2:	d504      	bpl.n	800ffce <__sflush_r+0x7e>
 800ffc4:	1c42      	adds	r2, r0, #1
 800ffc6:	d101      	bne.n	800ffcc <__sflush_r+0x7c>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	b903      	cbnz	r3, 800ffce <__sflush_r+0x7e>
 800ffcc:	6560      	str	r0, [r4, #84]	; 0x54
 800ffce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffd0:	602f      	str	r7, [r5, #0]
 800ffd2:	2900      	cmp	r1, #0
 800ffd4:	d0c9      	beq.n	800ff6a <__sflush_r+0x1a>
 800ffd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffda:	4299      	cmp	r1, r3
 800ffdc:	d002      	beq.n	800ffe4 <__sflush_r+0x94>
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f7ff f974 	bl	800f2cc <_free_r>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	6360      	str	r0, [r4, #52]	; 0x34
 800ffe8:	e7c0      	b.n	800ff6c <__sflush_r+0x1c>
 800ffea:	2301      	movs	r3, #1
 800ffec:	4628      	mov	r0, r5
 800ffee:	47b0      	blx	r6
 800fff0:	1c41      	adds	r1, r0, #1
 800fff2:	d1c8      	bne.n	800ff86 <__sflush_r+0x36>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d0c5      	beq.n	800ff86 <__sflush_r+0x36>
 800fffa:	2b1d      	cmp	r3, #29
 800fffc:	d001      	beq.n	8010002 <__sflush_r+0xb2>
 800fffe:	2b16      	cmp	r3, #22
 8010000:	d101      	bne.n	8010006 <__sflush_r+0xb6>
 8010002:	602f      	str	r7, [r5, #0]
 8010004:	e7b1      	b.n	800ff6a <__sflush_r+0x1a>
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801000c:	81a3      	strh	r3, [r4, #12]
 801000e:	e7ad      	b.n	800ff6c <__sflush_r+0x1c>
 8010010:	690f      	ldr	r7, [r1, #16]
 8010012:	2f00      	cmp	r7, #0
 8010014:	d0a9      	beq.n	800ff6a <__sflush_r+0x1a>
 8010016:	0793      	lsls	r3, r2, #30
 8010018:	680e      	ldr	r6, [r1, #0]
 801001a:	bf08      	it	eq
 801001c:	694b      	ldreq	r3, [r1, #20]
 801001e:	600f      	str	r7, [r1, #0]
 8010020:	bf18      	it	ne
 8010022:	2300      	movne	r3, #0
 8010024:	eba6 0807 	sub.w	r8, r6, r7
 8010028:	608b      	str	r3, [r1, #8]
 801002a:	f1b8 0f00 	cmp.w	r8, #0
 801002e:	dd9c      	ble.n	800ff6a <__sflush_r+0x1a>
 8010030:	6a21      	ldr	r1, [r4, #32]
 8010032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010034:	4643      	mov	r3, r8
 8010036:	463a      	mov	r2, r7
 8010038:	4628      	mov	r0, r5
 801003a:	47b0      	blx	r6
 801003c:	2800      	cmp	r0, #0
 801003e:	dc06      	bgt.n	801004e <__sflush_r+0xfe>
 8010040:	89a3      	ldrh	r3, [r4, #12]
 8010042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801004c:	e78e      	b.n	800ff6c <__sflush_r+0x1c>
 801004e:	4407      	add	r7, r0
 8010050:	eba8 0800 	sub.w	r8, r8, r0
 8010054:	e7e9      	b.n	801002a <__sflush_r+0xda>
 8010056:	bf00      	nop
 8010058:	dfbffffe 	.word	0xdfbffffe

0801005c <_fflush_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	690b      	ldr	r3, [r1, #16]
 8010060:	4605      	mov	r5, r0
 8010062:	460c      	mov	r4, r1
 8010064:	b913      	cbnz	r3, 801006c <_fflush_r+0x10>
 8010066:	2500      	movs	r5, #0
 8010068:	4628      	mov	r0, r5
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	b118      	cbz	r0, 8010076 <_fflush_r+0x1a>
 801006e:	6a03      	ldr	r3, [r0, #32]
 8010070:	b90b      	cbnz	r3, 8010076 <_fflush_r+0x1a>
 8010072:	f7fe f8ef 	bl	800e254 <__sinit>
 8010076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d0f3      	beq.n	8010066 <_fflush_r+0xa>
 801007e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010080:	07d0      	lsls	r0, r2, #31
 8010082:	d404      	bmi.n	801008e <_fflush_r+0x32>
 8010084:	0599      	lsls	r1, r3, #22
 8010086:	d402      	bmi.n	801008e <_fflush_r+0x32>
 8010088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801008a:	f7fe fa76 	bl	800e57a <__retarget_lock_acquire_recursive>
 801008e:	4628      	mov	r0, r5
 8010090:	4621      	mov	r1, r4
 8010092:	f7ff ff5d 	bl	800ff50 <__sflush_r>
 8010096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010098:	07da      	lsls	r2, r3, #31
 801009a:	4605      	mov	r5, r0
 801009c:	d4e4      	bmi.n	8010068 <_fflush_r+0xc>
 801009e:	89a3      	ldrh	r3, [r4, #12]
 80100a0:	059b      	lsls	r3, r3, #22
 80100a2:	d4e1      	bmi.n	8010068 <_fflush_r+0xc>
 80100a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100a6:	f7fe fa69 	bl	800e57c <__retarget_lock_release_recursive>
 80100aa:	e7dd      	b.n	8010068 <_fflush_r+0xc>

080100ac <_Balloc>:
 80100ac:	b570      	push	{r4, r5, r6, lr}
 80100ae:	69c6      	ldr	r6, [r0, #28]
 80100b0:	4604      	mov	r4, r0
 80100b2:	460d      	mov	r5, r1
 80100b4:	b976      	cbnz	r6, 80100d4 <_Balloc+0x28>
 80100b6:	2010      	movs	r0, #16
 80100b8:	f7fd fd36 	bl	800db28 <malloc>
 80100bc:	4602      	mov	r2, r0
 80100be:	61e0      	str	r0, [r4, #28]
 80100c0:	b920      	cbnz	r0, 80100cc <_Balloc+0x20>
 80100c2:	4b18      	ldr	r3, [pc, #96]	; (8010124 <_Balloc+0x78>)
 80100c4:	4818      	ldr	r0, [pc, #96]	; (8010128 <_Balloc+0x7c>)
 80100c6:	216b      	movs	r1, #107	; 0x6b
 80100c8:	f7fe fa68 	bl	800e59c <__assert_func>
 80100cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100d0:	6006      	str	r6, [r0, #0]
 80100d2:	60c6      	str	r6, [r0, #12]
 80100d4:	69e6      	ldr	r6, [r4, #28]
 80100d6:	68f3      	ldr	r3, [r6, #12]
 80100d8:	b183      	cbz	r3, 80100fc <_Balloc+0x50>
 80100da:	69e3      	ldr	r3, [r4, #28]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100e2:	b9b8      	cbnz	r0, 8010114 <_Balloc+0x68>
 80100e4:	2101      	movs	r1, #1
 80100e6:	fa01 f605 	lsl.w	r6, r1, r5
 80100ea:	1d72      	adds	r2, r6, #5
 80100ec:	0092      	lsls	r2, r2, #2
 80100ee:	4620      	mov	r0, r4
 80100f0:	f000 fd83 	bl	8010bfa <_calloc_r>
 80100f4:	b160      	cbz	r0, 8010110 <_Balloc+0x64>
 80100f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100fa:	e00e      	b.n	801011a <_Balloc+0x6e>
 80100fc:	2221      	movs	r2, #33	; 0x21
 80100fe:	2104      	movs	r1, #4
 8010100:	4620      	mov	r0, r4
 8010102:	f000 fd7a 	bl	8010bfa <_calloc_r>
 8010106:	69e3      	ldr	r3, [r4, #28]
 8010108:	60f0      	str	r0, [r6, #12]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d1e4      	bne.n	80100da <_Balloc+0x2e>
 8010110:	2000      	movs	r0, #0
 8010112:	bd70      	pop	{r4, r5, r6, pc}
 8010114:	6802      	ldr	r2, [r0, #0]
 8010116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801011a:	2300      	movs	r3, #0
 801011c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010120:	e7f7      	b.n	8010112 <_Balloc+0x66>
 8010122:	bf00      	nop
 8010124:	08015ea0 	.word	0x08015ea0
 8010128:	08015f4c 	.word	0x08015f4c

0801012c <_Bfree>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	69c6      	ldr	r6, [r0, #28]
 8010130:	4605      	mov	r5, r0
 8010132:	460c      	mov	r4, r1
 8010134:	b976      	cbnz	r6, 8010154 <_Bfree+0x28>
 8010136:	2010      	movs	r0, #16
 8010138:	f7fd fcf6 	bl	800db28 <malloc>
 801013c:	4602      	mov	r2, r0
 801013e:	61e8      	str	r0, [r5, #28]
 8010140:	b920      	cbnz	r0, 801014c <_Bfree+0x20>
 8010142:	4b09      	ldr	r3, [pc, #36]	; (8010168 <_Bfree+0x3c>)
 8010144:	4809      	ldr	r0, [pc, #36]	; (801016c <_Bfree+0x40>)
 8010146:	218f      	movs	r1, #143	; 0x8f
 8010148:	f7fe fa28 	bl	800e59c <__assert_func>
 801014c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010150:	6006      	str	r6, [r0, #0]
 8010152:	60c6      	str	r6, [r0, #12]
 8010154:	b13c      	cbz	r4, 8010166 <_Bfree+0x3a>
 8010156:	69eb      	ldr	r3, [r5, #28]
 8010158:	6862      	ldr	r2, [r4, #4]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010160:	6021      	str	r1, [r4, #0]
 8010162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	08015ea0 	.word	0x08015ea0
 801016c:	08015f4c 	.word	0x08015f4c

08010170 <__multadd>:
 8010170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010174:	690d      	ldr	r5, [r1, #16]
 8010176:	4607      	mov	r7, r0
 8010178:	460c      	mov	r4, r1
 801017a:	461e      	mov	r6, r3
 801017c:	f101 0c14 	add.w	ip, r1, #20
 8010180:	2000      	movs	r0, #0
 8010182:	f8dc 3000 	ldr.w	r3, [ip]
 8010186:	b299      	uxth	r1, r3
 8010188:	fb02 6101 	mla	r1, r2, r1, r6
 801018c:	0c1e      	lsrs	r6, r3, #16
 801018e:	0c0b      	lsrs	r3, r1, #16
 8010190:	fb02 3306 	mla	r3, r2, r6, r3
 8010194:	b289      	uxth	r1, r1
 8010196:	3001      	adds	r0, #1
 8010198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801019c:	4285      	cmp	r5, r0
 801019e:	f84c 1b04 	str.w	r1, [ip], #4
 80101a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80101a6:	dcec      	bgt.n	8010182 <__multadd+0x12>
 80101a8:	b30e      	cbz	r6, 80101ee <__multadd+0x7e>
 80101aa:	68a3      	ldr	r3, [r4, #8]
 80101ac:	42ab      	cmp	r3, r5
 80101ae:	dc19      	bgt.n	80101e4 <__multadd+0x74>
 80101b0:	6861      	ldr	r1, [r4, #4]
 80101b2:	4638      	mov	r0, r7
 80101b4:	3101      	adds	r1, #1
 80101b6:	f7ff ff79 	bl	80100ac <_Balloc>
 80101ba:	4680      	mov	r8, r0
 80101bc:	b928      	cbnz	r0, 80101ca <__multadd+0x5a>
 80101be:	4602      	mov	r2, r0
 80101c0:	4b0c      	ldr	r3, [pc, #48]	; (80101f4 <__multadd+0x84>)
 80101c2:	480d      	ldr	r0, [pc, #52]	; (80101f8 <__multadd+0x88>)
 80101c4:	21ba      	movs	r1, #186	; 0xba
 80101c6:	f7fe f9e9 	bl	800e59c <__assert_func>
 80101ca:	6922      	ldr	r2, [r4, #16]
 80101cc:	3202      	adds	r2, #2
 80101ce:	f104 010c 	add.w	r1, r4, #12
 80101d2:	0092      	lsls	r2, r2, #2
 80101d4:	300c      	adds	r0, #12
 80101d6:	f7fe f9d2 	bl	800e57e <memcpy>
 80101da:	4621      	mov	r1, r4
 80101dc:	4638      	mov	r0, r7
 80101de:	f7ff ffa5 	bl	801012c <_Bfree>
 80101e2:	4644      	mov	r4, r8
 80101e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80101e8:	3501      	adds	r5, #1
 80101ea:	615e      	str	r6, [r3, #20]
 80101ec:	6125      	str	r5, [r4, #16]
 80101ee:	4620      	mov	r0, r4
 80101f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f4:	08015f0f 	.word	0x08015f0f
 80101f8:	08015f4c 	.word	0x08015f4c

080101fc <__hi0bits>:
 80101fc:	0c03      	lsrs	r3, r0, #16
 80101fe:	041b      	lsls	r3, r3, #16
 8010200:	b9d3      	cbnz	r3, 8010238 <__hi0bits+0x3c>
 8010202:	0400      	lsls	r0, r0, #16
 8010204:	2310      	movs	r3, #16
 8010206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801020a:	bf04      	itt	eq
 801020c:	0200      	lsleq	r0, r0, #8
 801020e:	3308      	addeq	r3, #8
 8010210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010214:	bf04      	itt	eq
 8010216:	0100      	lsleq	r0, r0, #4
 8010218:	3304      	addeq	r3, #4
 801021a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801021e:	bf04      	itt	eq
 8010220:	0080      	lsleq	r0, r0, #2
 8010222:	3302      	addeq	r3, #2
 8010224:	2800      	cmp	r0, #0
 8010226:	db05      	blt.n	8010234 <__hi0bits+0x38>
 8010228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801022c:	f103 0301 	add.w	r3, r3, #1
 8010230:	bf08      	it	eq
 8010232:	2320      	moveq	r3, #32
 8010234:	4618      	mov	r0, r3
 8010236:	4770      	bx	lr
 8010238:	2300      	movs	r3, #0
 801023a:	e7e4      	b.n	8010206 <__hi0bits+0xa>

0801023c <__lo0bits>:
 801023c:	6803      	ldr	r3, [r0, #0]
 801023e:	f013 0207 	ands.w	r2, r3, #7
 8010242:	d00c      	beq.n	801025e <__lo0bits+0x22>
 8010244:	07d9      	lsls	r1, r3, #31
 8010246:	d422      	bmi.n	801028e <__lo0bits+0x52>
 8010248:	079a      	lsls	r2, r3, #30
 801024a:	bf49      	itett	mi
 801024c:	085b      	lsrmi	r3, r3, #1
 801024e:	089b      	lsrpl	r3, r3, #2
 8010250:	6003      	strmi	r3, [r0, #0]
 8010252:	2201      	movmi	r2, #1
 8010254:	bf5c      	itt	pl
 8010256:	6003      	strpl	r3, [r0, #0]
 8010258:	2202      	movpl	r2, #2
 801025a:	4610      	mov	r0, r2
 801025c:	4770      	bx	lr
 801025e:	b299      	uxth	r1, r3
 8010260:	b909      	cbnz	r1, 8010266 <__lo0bits+0x2a>
 8010262:	0c1b      	lsrs	r3, r3, #16
 8010264:	2210      	movs	r2, #16
 8010266:	b2d9      	uxtb	r1, r3
 8010268:	b909      	cbnz	r1, 801026e <__lo0bits+0x32>
 801026a:	3208      	adds	r2, #8
 801026c:	0a1b      	lsrs	r3, r3, #8
 801026e:	0719      	lsls	r1, r3, #28
 8010270:	bf04      	itt	eq
 8010272:	091b      	lsreq	r3, r3, #4
 8010274:	3204      	addeq	r2, #4
 8010276:	0799      	lsls	r1, r3, #30
 8010278:	bf04      	itt	eq
 801027a:	089b      	lsreq	r3, r3, #2
 801027c:	3202      	addeq	r2, #2
 801027e:	07d9      	lsls	r1, r3, #31
 8010280:	d403      	bmi.n	801028a <__lo0bits+0x4e>
 8010282:	085b      	lsrs	r3, r3, #1
 8010284:	f102 0201 	add.w	r2, r2, #1
 8010288:	d003      	beq.n	8010292 <__lo0bits+0x56>
 801028a:	6003      	str	r3, [r0, #0]
 801028c:	e7e5      	b.n	801025a <__lo0bits+0x1e>
 801028e:	2200      	movs	r2, #0
 8010290:	e7e3      	b.n	801025a <__lo0bits+0x1e>
 8010292:	2220      	movs	r2, #32
 8010294:	e7e1      	b.n	801025a <__lo0bits+0x1e>
	...

08010298 <__i2b>:
 8010298:	b510      	push	{r4, lr}
 801029a:	460c      	mov	r4, r1
 801029c:	2101      	movs	r1, #1
 801029e:	f7ff ff05 	bl	80100ac <_Balloc>
 80102a2:	4602      	mov	r2, r0
 80102a4:	b928      	cbnz	r0, 80102b2 <__i2b+0x1a>
 80102a6:	4b05      	ldr	r3, [pc, #20]	; (80102bc <__i2b+0x24>)
 80102a8:	4805      	ldr	r0, [pc, #20]	; (80102c0 <__i2b+0x28>)
 80102aa:	f240 1145 	movw	r1, #325	; 0x145
 80102ae:	f7fe f975 	bl	800e59c <__assert_func>
 80102b2:	2301      	movs	r3, #1
 80102b4:	6144      	str	r4, [r0, #20]
 80102b6:	6103      	str	r3, [r0, #16]
 80102b8:	bd10      	pop	{r4, pc}
 80102ba:	bf00      	nop
 80102bc:	08015f0f 	.word	0x08015f0f
 80102c0:	08015f4c 	.word	0x08015f4c

080102c4 <__multiply>:
 80102c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c8:	4691      	mov	r9, r2
 80102ca:	690a      	ldr	r2, [r1, #16]
 80102cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	bfb8      	it	lt
 80102d4:	460b      	movlt	r3, r1
 80102d6:	460c      	mov	r4, r1
 80102d8:	bfbc      	itt	lt
 80102da:	464c      	movlt	r4, r9
 80102dc:	4699      	movlt	r9, r3
 80102de:	6927      	ldr	r7, [r4, #16]
 80102e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80102e4:	68a3      	ldr	r3, [r4, #8]
 80102e6:	6861      	ldr	r1, [r4, #4]
 80102e8:	eb07 060a 	add.w	r6, r7, sl
 80102ec:	42b3      	cmp	r3, r6
 80102ee:	b085      	sub	sp, #20
 80102f0:	bfb8      	it	lt
 80102f2:	3101      	addlt	r1, #1
 80102f4:	f7ff feda 	bl	80100ac <_Balloc>
 80102f8:	b930      	cbnz	r0, 8010308 <__multiply+0x44>
 80102fa:	4602      	mov	r2, r0
 80102fc:	4b44      	ldr	r3, [pc, #272]	; (8010410 <__multiply+0x14c>)
 80102fe:	4845      	ldr	r0, [pc, #276]	; (8010414 <__multiply+0x150>)
 8010300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010304:	f7fe f94a 	bl	800e59c <__assert_func>
 8010308:	f100 0514 	add.w	r5, r0, #20
 801030c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010310:	462b      	mov	r3, r5
 8010312:	2200      	movs	r2, #0
 8010314:	4543      	cmp	r3, r8
 8010316:	d321      	bcc.n	801035c <__multiply+0x98>
 8010318:	f104 0314 	add.w	r3, r4, #20
 801031c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010320:	f109 0314 	add.w	r3, r9, #20
 8010324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010328:	9202      	str	r2, [sp, #8]
 801032a:	1b3a      	subs	r2, r7, r4
 801032c:	3a15      	subs	r2, #21
 801032e:	f022 0203 	bic.w	r2, r2, #3
 8010332:	3204      	adds	r2, #4
 8010334:	f104 0115 	add.w	r1, r4, #21
 8010338:	428f      	cmp	r7, r1
 801033a:	bf38      	it	cc
 801033c:	2204      	movcc	r2, #4
 801033e:	9201      	str	r2, [sp, #4]
 8010340:	9a02      	ldr	r2, [sp, #8]
 8010342:	9303      	str	r3, [sp, #12]
 8010344:	429a      	cmp	r2, r3
 8010346:	d80c      	bhi.n	8010362 <__multiply+0x9e>
 8010348:	2e00      	cmp	r6, #0
 801034a:	dd03      	ble.n	8010354 <__multiply+0x90>
 801034c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010350:	2b00      	cmp	r3, #0
 8010352:	d05b      	beq.n	801040c <__multiply+0x148>
 8010354:	6106      	str	r6, [r0, #16]
 8010356:	b005      	add	sp, #20
 8010358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035c:	f843 2b04 	str.w	r2, [r3], #4
 8010360:	e7d8      	b.n	8010314 <__multiply+0x50>
 8010362:	f8b3 a000 	ldrh.w	sl, [r3]
 8010366:	f1ba 0f00 	cmp.w	sl, #0
 801036a:	d024      	beq.n	80103b6 <__multiply+0xf2>
 801036c:	f104 0e14 	add.w	lr, r4, #20
 8010370:	46a9      	mov	r9, r5
 8010372:	f04f 0c00 	mov.w	ip, #0
 8010376:	f85e 2b04 	ldr.w	r2, [lr], #4
 801037a:	f8d9 1000 	ldr.w	r1, [r9]
 801037e:	fa1f fb82 	uxth.w	fp, r2
 8010382:	b289      	uxth	r1, r1
 8010384:	fb0a 110b 	mla	r1, sl, fp, r1
 8010388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801038c:	f8d9 2000 	ldr.w	r2, [r9]
 8010390:	4461      	add	r1, ip
 8010392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010396:	fb0a c20b 	mla	r2, sl, fp, ip
 801039a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801039e:	b289      	uxth	r1, r1
 80103a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80103a4:	4577      	cmp	r7, lr
 80103a6:	f849 1b04 	str.w	r1, [r9], #4
 80103aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80103ae:	d8e2      	bhi.n	8010376 <__multiply+0xb2>
 80103b0:	9a01      	ldr	r2, [sp, #4]
 80103b2:	f845 c002 	str.w	ip, [r5, r2]
 80103b6:	9a03      	ldr	r2, [sp, #12]
 80103b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80103bc:	3304      	adds	r3, #4
 80103be:	f1b9 0f00 	cmp.w	r9, #0
 80103c2:	d021      	beq.n	8010408 <__multiply+0x144>
 80103c4:	6829      	ldr	r1, [r5, #0]
 80103c6:	f104 0c14 	add.w	ip, r4, #20
 80103ca:	46ae      	mov	lr, r5
 80103cc:	f04f 0a00 	mov.w	sl, #0
 80103d0:	f8bc b000 	ldrh.w	fp, [ip]
 80103d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80103d8:	fb09 220b 	mla	r2, r9, fp, r2
 80103dc:	4452      	add	r2, sl
 80103de:	b289      	uxth	r1, r1
 80103e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80103e4:	f84e 1b04 	str.w	r1, [lr], #4
 80103e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80103ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80103f0:	f8be 1000 	ldrh.w	r1, [lr]
 80103f4:	fb09 110a 	mla	r1, r9, sl, r1
 80103f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80103fc:	4567      	cmp	r7, ip
 80103fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010402:	d8e5      	bhi.n	80103d0 <__multiply+0x10c>
 8010404:	9a01      	ldr	r2, [sp, #4]
 8010406:	50a9      	str	r1, [r5, r2]
 8010408:	3504      	adds	r5, #4
 801040a:	e799      	b.n	8010340 <__multiply+0x7c>
 801040c:	3e01      	subs	r6, #1
 801040e:	e79b      	b.n	8010348 <__multiply+0x84>
 8010410:	08015f0f 	.word	0x08015f0f
 8010414:	08015f4c 	.word	0x08015f4c

08010418 <__pow5mult>:
 8010418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801041c:	4615      	mov	r5, r2
 801041e:	f012 0203 	ands.w	r2, r2, #3
 8010422:	4606      	mov	r6, r0
 8010424:	460f      	mov	r7, r1
 8010426:	d007      	beq.n	8010438 <__pow5mult+0x20>
 8010428:	4c25      	ldr	r4, [pc, #148]	; (80104c0 <__pow5mult+0xa8>)
 801042a:	3a01      	subs	r2, #1
 801042c:	2300      	movs	r3, #0
 801042e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010432:	f7ff fe9d 	bl	8010170 <__multadd>
 8010436:	4607      	mov	r7, r0
 8010438:	10ad      	asrs	r5, r5, #2
 801043a:	d03d      	beq.n	80104b8 <__pow5mult+0xa0>
 801043c:	69f4      	ldr	r4, [r6, #28]
 801043e:	b97c      	cbnz	r4, 8010460 <__pow5mult+0x48>
 8010440:	2010      	movs	r0, #16
 8010442:	f7fd fb71 	bl	800db28 <malloc>
 8010446:	4602      	mov	r2, r0
 8010448:	61f0      	str	r0, [r6, #28]
 801044a:	b928      	cbnz	r0, 8010458 <__pow5mult+0x40>
 801044c:	4b1d      	ldr	r3, [pc, #116]	; (80104c4 <__pow5mult+0xac>)
 801044e:	481e      	ldr	r0, [pc, #120]	; (80104c8 <__pow5mult+0xb0>)
 8010450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010454:	f7fe f8a2 	bl	800e59c <__assert_func>
 8010458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801045c:	6004      	str	r4, [r0, #0]
 801045e:	60c4      	str	r4, [r0, #12]
 8010460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010468:	b94c      	cbnz	r4, 801047e <__pow5mult+0x66>
 801046a:	f240 2171 	movw	r1, #625	; 0x271
 801046e:	4630      	mov	r0, r6
 8010470:	f7ff ff12 	bl	8010298 <__i2b>
 8010474:	2300      	movs	r3, #0
 8010476:	f8c8 0008 	str.w	r0, [r8, #8]
 801047a:	4604      	mov	r4, r0
 801047c:	6003      	str	r3, [r0, #0]
 801047e:	f04f 0900 	mov.w	r9, #0
 8010482:	07eb      	lsls	r3, r5, #31
 8010484:	d50a      	bpl.n	801049c <__pow5mult+0x84>
 8010486:	4639      	mov	r1, r7
 8010488:	4622      	mov	r2, r4
 801048a:	4630      	mov	r0, r6
 801048c:	f7ff ff1a 	bl	80102c4 <__multiply>
 8010490:	4639      	mov	r1, r7
 8010492:	4680      	mov	r8, r0
 8010494:	4630      	mov	r0, r6
 8010496:	f7ff fe49 	bl	801012c <_Bfree>
 801049a:	4647      	mov	r7, r8
 801049c:	106d      	asrs	r5, r5, #1
 801049e:	d00b      	beq.n	80104b8 <__pow5mult+0xa0>
 80104a0:	6820      	ldr	r0, [r4, #0]
 80104a2:	b938      	cbnz	r0, 80104b4 <__pow5mult+0x9c>
 80104a4:	4622      	mov	r2, r4
 80104a6:	4621      	mov	r1, r4
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7ff ff0b 	bl	80102c4 <__multiply>
 80104ae:	6020      	str	r0, [r4, #0]
 80104b0:	f8c0 9000 	str.w	r9, [r0]
 80104b4:	4604      	mov	r4, r0
 80104b6:	e7e4      	b.n	8010482 <__pow5mult+0x6a>
 80104b8:	4638      	mov	r0, r7
 80104ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104be:	bf00      	nop
 80104c0:	08016098 	.word	0x08016098
 80104c4:	08015ea0 	.word	0x08015ea0
 80104c8:	08015f4c 	.word	0x08015f4c

080104cc <__lshift>:
 80104cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d0:	460c      	mov	r4, r1
 80104d2:	6849      	ldr	r1, [r1, #4]
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104da:	68a3      	ldr	r3, [r4, #8]
 80104dc:	4607      	mov	r7, r0
 80104de:	4691      	mov	r9, r2
 80104e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104e4:	f108 0601 	add.w	r6, r8, #1
 80104e8:	42b3      	cmp	r3, r6
 80104ea:	db0b      	blt.n	8010504 <__lshift+0x38>
 80104ec:	4638      	mov	r0, r7
 80104ee:	f7ff fddd 	bl	80100ac <_Balloc>
 80104f2:	4605      	mov	r5, r0
 80104f4:	b948      	cbnz	r0, 801050a <__lshift+0x3e>
 80104f6:	4602      	mov	r2, r0
 80104f8:	4b28      	ldr	r3, [pc, #160]	; (801059c <__lshift+0xd0>)
 80104fa:	4829      	ldr	r0, [pc, #164]	; (80105a0 <__lshift+0xd4>)
 80104fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010500:	f7fe f84c 	bl	800e59c <__assert_func>
 8010504:	3101      	adds	r1, #1
 8010506:	005b      	lsls	r3, r3, #1
 8010508:	e7ee      	b.n	80104e8 <__lshift+0x1c>
 801050a:	2300      	movs	r3, #0
 801050c:	f100 0114 	add.w	r1, r0, #20
 8010510:	f100 0210 	add.w	r2, r0, #16
 8010514:	4618      	mov	r0, r3
 8010516:	4553      	cmp	r3, sl
 8010518:	db33      	blt.n	8010582 <__lshift+0xb6>
 801051a:	6920      	ldr	r0, [r4, #16]
 801051c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010520:	f104 0314 	add.w	r3, r4, #20
 8010524:	f019 091f 	ands.w	r9, r9, #31
 8010528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801052c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010530:	d02b      	beq.n	801058a <__lshift+0xbe>
 8010532:	f1c9 0e20 	rsb	lr, r9, #32
 8010536:	468a      	mov	sl, r1
 8010538:	2200      	movs	r2, #0
 801053a:	6818      	ldr	r0, [r3, #0]
 801053c:	fa00 f009 	lsl.w	r0, r0, r9
 8010540:	4310      	orrs	r0, r2
 8010542:	f84a 0b04 	str.w	r0, [sl], #4
 8010546:	f853 2b04 	ldr.w	r2, [r3], #4
 801054a:	459c      	cmp	ip, r3
 801054c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010550:	d8f3      	bhi.n	801053a <__lshift+0x6e>
 8010552:	ebac 0304 	sub.w	r3, ip, r4
 8010556:	3b15      	subs	r3, #21
 8010558:	f023 0303 	bic.w	r3, r3, #3
 801055c:	3304      	adds	r3, #4
 801055e:	f104 0015 	add.w	r0, r4, #21
 8010562:	4584      	cmp	ip, r0
 8010564:	bf38      	it	cc
 8010566:	2304      	movcc	r3, #4
 8010568:	50ca      	str	r2, [r1, r3]
 801056a:	b10a      	cbz	r2, 8010570 <__lshift+0xa4>
 801056c:	f108 0602 	add.w	r6, r8, #2
 8010570:	3e01      	subs	r6, #1
 8010572:	4638      	mov	r0, r7
 8010574:	612e      	str	r6, [r5, #16]
 8010576:	4621      	mov	r1, r4
 8010578:	f7ff fdd8 	bl	801012c <_Bfree>
 801057c:	4628      	mov	r0, r5
 801057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010582:	f842 0f04 	str.w	r0, [r2, #4]!
 8010586:	3301      	adds	r3, #1
 8010588:	e7c5      	b.n	8010516 <__lshift+0x4a>
 801058a:	3904      	subs	r1, #4
 801058c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010590:	f841 2f04 	str.w	r2, [r1, #4]!
 8010594:	459c      	cmp	ip, r3
 8010596:	d8f9      	bhi.n	801058c <__lshift+0xc0>
 8010598:	e7ea      	b.n	8010570 <__lshift+0xa4>
 801059a:	bf00      	nop
 801059c:	08015f0f 	.word	0x08015f0f
 80105a0:	08015f4c 	.word	0x08015f4c

080105a4 <__mcmp>:
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	6902      	ldr	r2, [r0, #16]
 80105a8:	690c      	ldr	r4, [r1, #16]
 80105aa:	1b12      	subs	r2, r2, r4
 80105ac:	d10e      	bne.n	80105cc <__mcmp+0x28>
 80105ae:	f100 0314 	add.w	r3, r0, #20
 80105b2:	3114      	adds	r1, #20
 80105b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80105b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80105bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80105c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80105c4:	42a5      	cmp	r5, r4
 80105c6:	d003      	beq.n	80105d0 <__mcmp+0x2c>
 80105c8:	d305      	bcc.n	80105d6 <__mcmp+0x32>
 80105ca:	2201      	movs	r2, #1
 80105cc:	4610      	mov	r0, r2
 80105ce:	bd30      	pop	{r4, r5, pc}
 80105d0:	4283      	cmp	r3, r0
 80105d2:	d3f3      	bcc.n	80105bc <__mcmp+0x18>
 80105d4:	e7fa      	b.n	80105cc <__mcmp+0x28>
 80105d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105da:	e7f7      	b.n	80105cc <__mcmp+0x28>

080105dc <__mdiff>:
 80105dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e0:	460c      	mov	r4, r1
 80105e2:	4606      	mov	r6, r0
 80105e4:	4611      	mov	r1, r2
 80105e6:	4620      	mov	r0, r4
 80105e8:	4690      	mov	r8, r2
 80105ea:	f7ff ffdb 	bl	80105a4 <__mcmp>
 80105ee:	1e05      	subs	r5, r0, #0
 80105f0:	d110      	bne.n	8010614 <__mdiff+0x38>
 80105f2:	4629      	mov	r1, r5
 80105f4:	4630      	mov	r0, r6
 80105f6:	f7ff fd59 	bl	80100ac <_Balloc>
 80105fa:	b930      	cbnz	r0, 801060a <__mdiff+0x2e>
 80105fc:	4b3a      	ldr	r3, [pc, #232]	; (80106e8 <__mdiff+0x10c>)
 80105fe:	4602      	mov	r2, r0
 8010600:	f240 2137 	movw	r1, #567	; 0x237
 8010604:	4839      	ldr	r0, [pc, #228]	; (80106ec <__mdiff+0x110>)
 8010606:	f7fd ffc9 	bl	800e59c <__assert_func>
 801060a:	2301      	movs	r3, #1
 801060c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010614:	bfa4      	itt	ge
 8010616:	4643      	movge	r3, r8
 8010618:	46a0      	movge	r8, r4
 801061a:	4630      	mov	r0, r6
 801061c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010620:	bfa6      	itte	ge
 8010622:	461c      	movge	r4, r3
 8010624:	2500      	movge	r5, #0
 8010626:	2501      	movlt	r5, #1
 8010628:	f7ff fd40 	bl	80100ac <_Balloc>
 801062c:	b920      	cbnz	r0, 8010638 <__mdiff+0x5c>
 801062e:	4b2e      	ldr	r3, [pc, #184]	; (80106e8 <__mdiff+0x10c>)
 8010630:	4602      	mov	r2, r0
 8010632:	f240 2145 	movw	r1, #581	; 0x245
 8010636:	e7e5      	b.n	8010604 <__mdiff+0x28>
 8010638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801063c:	6926      	ldr	r6, [r4, #16]
 801063e:	60c5      	str	r5, [r0, #12]
 8010640:	f104 0914 	add.w	r9, r4, #20
 8010644:	f108 0514 	add.w	r5, r8, #20
 8010648:	f100 0e14 	add.w	lr, r0, #20
 801064c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010654:	f108 0210 	add.w	r2, r8, #16
 8010658:	46f2      	mov	sl, lr
 801065a:	2100      	movs	r1, #0
 801065c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010664:	fa11 f88b 	uxtah	r8, r1, fp
 8010668:	b299      	uxth	r1, r3
 801066a:	0c1b      	lsrs	r3, r3, #16
 801066c:	eba8 0801 	sub.w	r8, r8, r1
 8010670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010678:	fa1f f888 	uxth.w	r8, r8
 801067c:	1419      	asrs	r1, r3, #16
 801067e:	454e      	cmp	r6, r9
 8010680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010684:	f84a 3b04 	str.w	r3, [sl], #4
 8010688:	d8e8      	bhi.n	801065c <__mdiff+0x80>
 801068a:	1b33      	subs	r3, r6, r4
 801068c:	3b15      	subs	r3, #21
 801068e:	f023 0303 	bic.w	r3, r3, #3
 8010692:	3304      	adds	r3, #4
 8010694:	3415      	adds	r4, #21
 8010696:	42a6      	cmp	r6, r4
 8010698:	bf38      	it	cc
 801069a:	2304      	movcc	r3, #4
 801069c:	441d      	add	r5, r3
 801069e:	4473      	add	r3, lr
 80106a0:	469e      	mov	lr, r3
 80106a2:	462e      	mov	r6, r5
 80106a4:	4566      	cmp	r6, ip
 80106a6:	d30e      	bcc.n	80106c6 <__mdiff+0xea>
 80106a8:	f10c 0203 	add.w	r2, ip, #3
 80106ac:	1b52      	subs	r2, r2, r5
 80106ae:	f022 0203 	bic.w	r2, r2, #3
 80106b2:	3d03      	subs	r5, #3
 80106b4:	45ac      	cmp	ip, r5
 80106b6:	bf38      	it	cc
 80106b8:	2200      	movcc	r2, #0
 80106ba:	4413      	add	r3, r2
 80106bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80106c0:	b17a      	cbz	r2, 80106e2 <__mdiff+0x106>
 80106c2:	6107      	str	r7, [r0, #16]
 80106c4:	e7a4      	b.n	8010610 <__mdiff+0x34>
 80106c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80106ca:	fa11 f288 	uxtah	r2, r1, r8
 80106ce:	1414      	asrs	r4, r2, #16
 80106d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80106d4:	b292      	uxth	r2, r2
 80106d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80106da:	f84e 2b04 	str.w	r2, [lr], #4
 80106de:	1421      	asrs	r1, r4, #16
 80106e0:	e7e0      	b.n	80106a4 <__mdiff+0xc8>
 80106e2:	3f01      	subs	r7, #1
 80106e4:	e7ea      	b.n	80106bc <__mdiff+0xe0>
 80106e6:	bf00      	nop
 80106e8:	08015f0f 	.word	0x08015f0f
 80106ec:	08015f4c 	.word	0x08015f4c

080106f0 <__d2b>:
 80106f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106f4:	460f      	mov	r7, r1
 80106f6:	2101      	movs	r1, #1
 80106f8:	ec59 8b10 	vmov	r8, r9, d0
 80106fc:	4616      	mov	r6, r2
 80106fe:	f7ff fcd5 	bl	80100ac <_Balloc>
 8010702:	4604      	mov	r4, r0
 8010704:	b930      	cbnz	r0, 8010714 <__d2b+0x24>
 8010706:	4602      	mov	r2, r0
 8010708:	4b24      	ldr	r3, [pc, #144]	; (801079c <__d2b+0xac>)
 801070a:	4825      	ldr	r0, [pc, #148]	; (80107a0 <__d2b+0xb0>)
 801070c:	f240 310f 	movw	r1, #783	; 0x30f
 8010710:	f7fd ff44 	bl	800e59c <__assert_func>
 8010714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801071c:	bb2d      	cbnz	r5, 801076a <__d2b+0x7a>
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	f1b8 0300 	subs.w	r3, r8, #0
 8010724:	d026      	beq.n	8010774 <__d2b+0x84>
 8010726:	4668      	mov	r0, sp
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	f7ff fd87 	bl	801023c <__lo0bits>
 801072e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010732:	b1e8      	cbz	r0, 8010770 <__d2b+0x80>
 8010734:	f1c0 0320 	rsb	r3, r0, #32
 8010738:	fa02 f303 	lsl.w	r3, r2, r3
 801073c:	430b      	orrs	r3, r1
 801073e:	40c2      	lsrs	r2, r0
 8010740:	6163      	str	r3, [r4, #20]
 8010742:	9201      	str	r2, [sp, #4]
 8010744:	9b01      	ldr	r3, [sp, #4]
 8010746:	61a3      	str	r3, [r4, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	bf14      	ite	ne
 801074c:	2202      	movne	r2, #2
 801074e:	2201      	moveq	r2, #1
 8010750:	6122      	str	r2, [r4, #16]
 8010752:	b1bd      	cbz	r5, 8010784 <__d2b+0x94>
 8010754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010758:	4405      	add	r5, r0
 801075a:	603d      	str	r5, [r7, #0]
 801075c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010760:	6030      	str	r0, [r6, #0]
 8010762:	4620      	mov	r0, r4
 8010764:	b003      	add	sp, #12
 8010766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801076a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801076e:	e7d6      	b.n	801071e <__d2b+0x2e>
 8010770:	6161      	str	r1, [r4, #20]
 8010772:	e7e7      	b.n	8010744 <__d2b+0x54>
 8010774:	a801      	add	r0, sp, #4
 8010776:	f7ff fd61 	bl	801023c <__lo0bits>
 801077a:	9b01      	ldr	r3, [sp, #4]
 801077c:	6163      	str	r3, [r4, #20]
 801077e:	3020      	adds	r0, #32
 8010780:	2201      	movs	r2, #1
 8010782:	e7e5      	b.n	8010750 <__d2b+0x60>
 8010784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801078c:	6038      	str	r0, [r7, #0]
 801078e:	6918      	ldr	r0, [r3, #16]
 8010790:	f7ff fd34 	bl	80101fc <__hi0bits>
 8010794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010798:	e7e2      	b.n	8010760 <__d2b+0x70>
 801079a:	bf00      	nop
 801079c:	08015f0f 	.word	0x08015f0f
 80107a0:	08015f4c 	.word	0x08015f4c

080107a4 <fiprintf>:
 80107a4:	b40e      	push	{r1, r2, r3}
 80107a6:	b503      	push	{r0, r1, lr}
 80107a8:	4601      	mov	r1, r0
 80107aa:	ab03      	add	r3, sp, #12
 80107ac:	4805      	ldr	r0, [pc, #20]	; (80107c4 <fiprintf+0x20>)
 80107ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80107b2:	6800      	ldr	r0, [r0, #0]
 80107b4:	9301      	str	r3, [sp, #4]
 80107b6:	f7ff f929 	bl	800fa0c <_vfiprintf_r>
 80107ba:	b002      	add	sp, #8
 80107bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80107c0:	b003      	add	sp, #12
 80107c2:	4770      	bx	lr
 80107c4:	2000009c 	.word	0x2000009c

080107c8 <__submore>:
 80107c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107cc:	460c      	mov	r4, r1
 80107ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80107d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107d4:	4299      	cmp	r1, r3
 80107d6:	d11d      	bne.n	8010814 <__submore+0x4c>
 80107d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80107dc:	f7fd f9cc 	bl	800db78 <_malloc_r>
 80107e0:	b918      	cbnz	r0, 80107ea <__submore+0x22>
 80107e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80107f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80107f4:	6360      	str	r0, [r4, #52]	; 0x34
 80107f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80107fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80107fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010806:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801080a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801080e:	6020      	str	r0, [r4, #0]
 8010810:	2000      	movs	r0, #0
 8010812:	e7e8      	b.n	80107e6 <__submore+0x1e>
 8010814:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010816:	0077      	lsls	r7, r6, #1
 8010818:	463a      	mov	r2, r7
 801081a:	f000 f80f 	bl	801083c <_realloc_r>
 801081e:	4605      	mov	r5, r0
 8010820:	2800      	cmp	r0, #0
 8010822:	d0de      	beq.n	80107e2 <__submore+0x1a>
 8010824:	eb00 0806 	add.w	r8, r0, r6
 8010828:	4601      	mov	r1, r0
 801082a:	4632      	mov	r2, r6
 801082c:	4640      	mov	r0, r8
 801082e:	f7fd fea6 	bl	800e57e <memcpy>
 8010832:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010836:	f8c4 8000 	str.w	r8, [r4]
 801083a:	e7e9      	b.n	8010810 <__submore+0x48>

0801083c <_realloc_r>:
 801083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010840:	4680      	mov	r8, r0
 8010842:	4614      	mov	r4, r2
 8010844:	460e      	mov	r6, r1
 8010846:	b921      	cbnz	r1, 8010852 <_realloc_r+0x16>
 8010848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801084c:	4611      	mov	r1, r2
 801084e:	f7fd b993 	b.w	800db78 <_malloc_r>
 8010852:	b92a      	cbnz	r2, 8010860 <_realloc_r+0x24>
 8010854:	f7fe fd3a 	bl	800f2cc <_free_r>
 8010858:	4625      	mov	r5, r4
 801085a:	4628      	mov	r0, r5
 801085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010860:	f000 f9f3 	bl	8010c4a <_malloc_usable_size_r>
 8010864:	4284      	cmp	r4, r0
 8010866:	4607      	mov	r7, r0
 8010868:	d802      	bhi.n	8010870 <_realloc_r+0x34>
 801086a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801086e:	d812      	bhi.n	8010896 <_realloc_r+0x5a>
 8010870:	4621      	mov	r1, r4
 8010872:	4640      	mov	r0, r8
 8010874:	f7fd f980 	bl	800db78 <_malloc_r>
 8010878:	4605      	mov	r5, r0
 801087a:	2800      	cmp	r0, #0
 801087c:	d0ed      	beq.n	801085a <_realloc_r+0x1e>
 801087e:	42bc      	cmp	r4, r7
 8010880:	4622      	mov	r2, r4
 8010882:	4631      	mov	r1, r6
 8010884:	bf28      	it	cs
 8010886:	463a      	movcs	r2, r7
 8010888:	f7fd fe79 	bl	800e57e <memcpy>
 801088c:	4631      	mov	r1, r6
 801088e:	4640      	mov	r0, r8
 8010890:	f7fe fd1c 	bl	800f2cc <_free_r>
 8010894:	e7e1      	b.n	801085a <_realloc_r+0x1e>
 8010896:	4635      	mov	r5, r6
 8010898:	e7df      	b.n	801085a <_realloc_r+0x1e>
	...

0801089c <_strtoul_l.constprop.0>:
 801089c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108a0:	4f36      	ldr	r7, [pc, #216]	; (801097c <_strtoul_l.constprop.0+0xe0>)
 80108a2:	4686      	mov	lr, r0
 80108a4:	460d      	mov	r5, r1
 80108a6:	4628      	mov	r0, r5
 80108a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108ac:	5d3e      	ldrb	r6, [r7, r4]
 80108ae:	f016 0608 	ands.w	r6, r6, #8
 80108b2:	d1f8      	bne.n	80108a6 <_strtoul_l.constprop.0+0xa>
 80108b4:	2c2d      	cmp	r4, #45	; 0x2d
 80108b6:	d130      	bne.n	801091a <_strtoul_l.constprop.0+0x7e>
 80108b8:	782c      	ldrb	r4, [r5, #0]
 80108ba:	2601      	movs	r6, #1
 80108bc:	1c85      	adds	r5, r0, #2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d057      	beq.n	8010972 <_strtoul_l.constprop.0+0xd6>
 80108c2:	2b10      	cmp	r3, #16
 80108c4:	d109      	bne.n	80108da <_strtoul_l.constprop.0+0x3e>
 80108c6:	2c30      	cmp	r4, #48	; 0x30
 80108c8:	d107      	bne.n	80108da <_strtoul_l.constprop.0+0x3e>
 80108ca:	7828      	ldrb	r0, [r5, #0]
 80108cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80108d0:	2858      	cmp	r0, #88	; 0x58
 80108d2:	d149      	bne.n	8010968 <_strtoul_l.constprop.0+0xcc>
 80108d4:	786c      	ldrb	r4, [r5, #1]
 80108d6:	2310      	movs	r3, #16
 80108d8:	3502      	adds	r5, #2
 80108da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80108de:	2700      	movs	r7, #0
 80108e0:	fbb8 f8f3 	udiv	r8, r8, r3
 80108e4:	fb03 f908 	mul.w	r9, r3, r8
 80108e8:	ea6f 0909 	mvn.w	r9, r9
 80108ec:	4638      	mov	r0, r7
 80108ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80108f2:	f1bc 0f09 	cmp.w	ip, #9
 80108f6:	d815      	bhi.n	8010924 <_strtoul_l.constprop.0+0x88>
 80108f8:	4664      	mov	r4, ip
 80108fa:	42a3      	cmp	r3, r4
 80108fc:	dd23      	ble.n	8010946 <_strtoul_l.constprop.0+0xaa>
 80108fe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8010902:	d007      	beq.n	8010914 <_strtoul_l.constprop.0+0x78>
 8010904:	4580      	cmp	r8, r0
 8010906:	d31b      	bcc.n	8010940 <_strtoul_l.constprop.0+0xa4>
 8010908:	d101      	bne.n	801090e <_strtoul_l.constprop.0+0x72>
 801090a:	45a1      	cmp	r9, r4
 801090c:	db18      	blt.n	8010940 <_strtoul_l.constprop.0+0xa4>
 801090e:	fb00 4003 	mla	r0, r0, r3, r4
 8010912:	2701      	movs	r7, #1
 8010914:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010918:	e7e9      	b.n	80108ee <_strtoul_l.constprop.0+0x52>
 801091a:	2c2b      	cmp	r4, #43	; 0x2b
 801091c:	bf04      	itt	eq
 801091e:	782c      	ldrbeq	r4, [r5, #0]
 8010920:	1c85      	addeq	r5, r0, #2
 8010922:	e7cc      	b.n	80108be <_strtoul_l.constprop.0+0x22>
 8010924:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010928:	f1bc 0f19 	cmp.w	ip, #25
 801092c:	d801      	bhi.n	8010932 <_strtoul_l.constprop.0+0x96>
 801092e:	3c37      	subs	r4, #55	; 0x37
 8010930:	e7e3      	b.n	80108fa <_strtoul_l.constprop.0+0x5e>
 8010932:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010936:	f1bc 0f19 	cmp.w	ip, #25
 801093a:	d804      	bhi.n	8010946 <_strtoul_l.constprop.0+0xaa>
 801093c:	3c57      	subs	r4, #87	; 0x57
 801093e:	e7dc      	b.n	80108fa <_strtoul_l.constprop.0+0x5e>
 8010940:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010944:	e7e6      	b.n	8010914 <_strtoul_l.constprop.0+0x78>
 8010946:	1c7b      	adds	r3, r7, #1
 8010948:	d106      	bne.n	8010958 <_strtoul_l.constprop.0+0xbc>
 801094a:	2322      	movs	r3, #34	; 0x22
 801094c:	f8ce 3000 	str.w	r3, [lr]
 8010950:	4638      	mov	r0, r7
 8010952:	b932      	cbnz	r2, 8010962 <_strtoul_l.constprop.0+0xc6>
 8010954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010958:	b106      	cbz	r6, 801095c <_strtoul_l.constprop.0+0xc0>
 801095a:	4240      	negs	r0, r0
 801095c:	2a00      	cmp	r2, #0
 801095e:	d0f9      	beq.n	8010954 <_strtoul_l.constprop.0+0xb8>
 8010960:	b107      	cbz	r7, 8010964 <_strtoul_l.constprop.0+0xc8>
 8010962:	1e69      	subs	r1, r5, #1
 8010964:	6011      	str	r1, [r2, #0]
 8010966:	e7f5      	b.n	8010954 <_strtoul_l.constprop.0+0xb8>
 8010968:	2430      	movs	r4, #48	; 0x30
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1b5      	bne.n	80108da <_strtoul_l.constprop.0+0x3e>
 801096e:	2308      	movs	r3, #8
 8010970:	e7b3      	b.n	80108da <_strtoul_l.constprop.0+0x3e>
 8010972:	2c30      	cmp	r4, #48	; 0x30
 8010974:	d0a9      	beq.n	80108ca <_strtoul_l.constprop.0+0x2e>
 8010976:	230a      	movs	r3, #10
 8010978:	e7af      	b.n	80108da <_strtoul_l.constprop.0+0x3e>
 801097a:	bf00      	nop
 801097c:	08015d57 	.word	0x08015d57

08010980 <_strtoul_r>:
 8010980:	f7ff bf8c 	b.w	801089c <_strtoul_l.constprop.0>

08010984 <__swbuf_r>:
 8010984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010986:	460e      	mov	r6, r1
 8010988:	4614      	mov	r4, r2
 801098a:	4605      	mov	r5, r0
 801098c:	b118      	cbz	r0, 8010996 <__swbuf_r+0x12>
 801098e:	6a03      	ldr	r3, [r0, #32]
 8010990:	b90b      	cbnz	r3, 8010996 <__swbuf_r+0x12>
 8010992:	f7fd fc5f 	bl	800e254 <__sinit>
 8010996:	69a3      	ldr	r3, [r4, #24]
 8010998:	60a3      	str	r3, [r4, #8]
 801099a:	89a3      	ldrh	r3, [r4, #12]
 801099c:	071a      	lsls	r2, r3, #28
 801099e:	d525      	bpl.n	80109ec <__swbuf_r+0x68>
 80109a0:	6923      	ldr	r3, [r4, #16]
 80109a2:	b31b      	cbz	r3, 80109ec <__swbuf_r+0x68>
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	6922      	ldr	r2, [r4, #16]
 80109a8:	1a98      	subs	r0, r3, r2
 80109aa:	6963      	ldr	r3, [r4, #20]
 80109ac:	b2f6      	uxtb	r6, r6
 80109ae:	4283      	cmp	r3, r0
 80109b0:	4637      	mov	r7, r6
 80109b2:	dc04      	bgt.n	80109be <__swbuf_r+0x3a>
 80109b4:	4621      	mov	r1, r4
 80109b6:	4628      	mov	r0, r5
 80109b8:	f7ff fb50 	bl	801005c <_fflush_r>
 80109bc:	b9e0      	cbnz	r0, 80109f8 <__swbuf_r+0x74>
 80109be:	68a3      	ldr	r3, [r4, #8]
 80109c0:	3b01      	subs	r3, #1
 80109c2:	60a3      	str	r3, [r4, #8]
 80109c4:	6823      	ldr	r3, [r4, #0]
 80109c6:	1c5a      	adds	r2, r3, #1
 80109c8:	6022      	str	r2, [r4, #0]
 80109ca:	701e      	strb	r6, [r3, #0]
 80109cc:	6962      	ldr	r2, [r4, #20]
 80109ce:	1c43      	adds	r3, r0, #1
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d004      	beq.n	80109de <__swbuf_r+0x5a>
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	07db      	lsls	r3, r3, #31
 80109d8:	d506      	bpl.n	80109e8 <__swbuf_r+0x64>
 80109da:	2e0a      	cmp	r6, #10
 80109dc:	d104      	bne.n	80109e8 <__swbuf_r+0x64>
 80109de:	4621      	mov	r1, r4
 80109e0:	4628      	mov	r0, r5
 80109e2:	f7ff fb3b 	bl	801005c <_fflush_r>
 80109e6:	b938      	cbnz	r0, 80109f8 <__swbuf_r+0x74>
 80109e8:	4638      	mov	r0, r7
 80109ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ec:	4621      	mov	r1, r4
 80109ee:	4628      	mov	r0, r5
 80109f0:	f000 f806 	bl	8010a00 <__swsetup_r>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d0d5      	beq.n	80109a4 <__swbuf_r+0x20>
 80109f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80109fc:	e7f4      	b.n	80109e8 <__swbuf_r+0x64>
	...

08010a00 <__swsetup_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4b2a      	ldr	r3, [pc, #168]	; (8010aac <__swsetup_r+0xac>)
 8010a04:	4605      	mov	r5, r0
 8010a06:	6818      	ldr	r0, [r3, #0]
 8010a08:	460c      	mov	r4, r1
 8010a0a:	b118      	cbz	r0, 8010a14 <__swsetup_r+0x14>
 8010a0c:	6a03      	ldr	r3, [r0, #32]
 8010a0e:	b90b      	cbnz	r3, 8010a14 <__swsetup_r+0x14>
 8010a10:	f7fd fc20 	bl	800e254 <__sinit>
 8010a14:	89a3      	ldrh	r3, [r4, #12]
 8010a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a1a:	0718      	lsls	r0, r3, #28
 8010a1c:	d422      	bmi.n	8010a64 <__swsetup_r+0x64>
 8010a1e:	06d9      	lsls	r1, r3, #27
 8010a20:	d407      	bmi.n	8010a32 <__swsetup_r+0x32>
 8010a22:	2309      	movs	r3, #9
 8010a24:	602b      	str	r3, [r5, #0]
 8010a26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a2a:	81a3      	strh	r3, [r4, #12]
 8010a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a30:	e034      	b.n	8010a9c <__swsetup_r+0x9c>
 8010a32:	0758      	lsls	r0, r3, #29
 8010a34:	d512      	bpl.n	8010a5c <__swsetup_r+0x5c>
 8010a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a38:	b141      	cbz	r1, 8010a4c <__swsetup_r+0x4c>
 8010a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	d002      	beq.n	8010a48 <__swsetup_r+0x48>
 8010a42:	4628      	mov	r0, r5
 8010a44:	f7fe fc42 	bl	800f2cc <_free_r>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	6363      	str	r3, [r4, #52]	; 0x34
 8010a4c:	89a3      	ldrh	r3, [r4, #12]
 8010a4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a52:	81a3      	strh	r3, [r4, #12]
 8010a54:	2300      	movs	r3, #0
 8010a56:	6063      	str	r3, [r4, #4]
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	6023      	str	r3, [r4, #0]
 8010a5c:	89a3      	ldrh	r3, [r4, #12]
 8010a5e:	f043 0308 	orr.w	r3, r3, #8
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	6923      	ldr	r3, [r4, #16]
 8010a66:	b94b      	cbnz	r3, 8010a7c <__swsetup_r+0x7c>
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a72:	d003      	beq.n	8010a7c <__swsetup_r+0x7c>
 8010a74:	4621      	mov	r1, r4
 8010a76:	4628      	mov	r0, r5
 8010a78:	f000 f840 	bl	8010afc <__smakebuf_r>
 8010a7c:	89a0      	ldrh	r0, [r4, #12]
 8010a7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a82:	f010 0301 	ands.w	r3, r0, #1
 8010a86:	d00a      	beq.n	8010a9e <__swsetup_r+0x9e>
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60a3      	str	r3, [r4, #8]
 8010a8c:	6963      	ldr	r3, [r4, #20]
 8010a8e:	425b      	negs	r3, r3
 8010a90:	61a3      	str	r3, [r4, #24]
 8010a92:	6923      	ldr	r3, [r4, #16]
 8010a94:	b943      	cbnz	r3, 8010aa8 <__swsetup_r+0xa8>
 8010a96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a9a:	d1c4      	bne.n	8010a26 <__swsetup_r+0x26>
 8010a9c:	bd38      	pop	{r3, r4, r5, pc}
 8010a9e:	0781      	lsls	r1, r0, #30
 8010aa0:	bf58      	it	pl
 8010aa2:	6963      	ldrpl	r3, [r4, #20]
 8010aa4:	60a3      	str	r3, [r4, #8]
 8010aa6:	e7f4      	b.n	8010a92 <__swsetup_r+0x92>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	e7f7      	b.n	8010a9c <__swsetup_r+0x9c>
 8010aac:	2000009c 	.word	0x2000009c

08010ab0 <__swhatbuf_r>:
 8010ab0:	b570      	push	{r4, r5, r6, lr}
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	b096      	sub	sp, #88	; 0x58
 8010abc:	4615      	mov	r5, r2
 8010abe:	461e      	mov	r6, r3
 8010ac0:	da0d      	bge.n	8010ade <__swhatbuf_r+0x2e>
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ac8:	f04f 0100 	mov.w	r1, #0
 8010acc:	bf0c      	ite	eq
 8010ace:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010ad2:	2340      	movne	r3, #64	; 0x40
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	6031      	str	r1, [r6, #0]
 8010ad8:	602b      	str	r3, [r5, #0]
 8010ada:	b016      	add	sp, #88	; 0x58
 8010adc:	bd70      	pop	{r4, r5, r6, pc}
 8010ade:	466a      	mov	r2, sp
 8010ae0:	f000 f862 	bl	8010ba8 <_fstat_r>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	dbec      	blt.n	8010ac2 <__swhatbuf_r+0x12>
 8010ae8:	9901      	ldr	r1, [sp, #4]
 8010aea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010aee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010af2:	4259      	negs	r1, r3
 8010af4:	4159      	adcs	r1, r3
 8010af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afa:	e7eb      	b.n	8010ad4 <__swhatbuf_r+0x24>

08010afc <__smakebuf_r>:
 8010afc:	898b      	ldrh	r3, [r1, #12]
 8010afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b00:	079d      	lsls	r5, r3, #30
 8010b02:	4606      	mov	r6, r0
 8010b04:	460c      	mov	r4, r1
 8010b06:	d507      	bpl.n	8010b18 <__smakebuf_r+0x1c>
 8010b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b0c:	6023      	str	r3, [r4, #0]
 8010b0e:	6123      	str	r3, [r4, #16]
 8010b10:	2301      	movs	r3, #1
 8010b12:	6163      	str	r3, [r4, #20]
 8010b14:	b002      	add	sp, #8
 8010b16:	bd70      	pop	{r4, r5, r6, pc}
 8010b18:	ab01      	add	r3, sp, #4
 8010b1a:	466a      	mov	r2, sp
 8010b1c:	f7ff ffc8 	bl	8010ab0 <__swhatbuf_r>
 8010b20:	9900      	ldr	r1, [sp, #0]
 8010b22:	4605      	mov	r5, r0
 8010b24:	4630      	mov	r0, r6
 8010b26:	f7fd f827 	bl	800db78 <_malloc_r>
 8010b2a:	b948      	cbnz	r0, 8010b40 <__smakebuf_r+0x44>
 8010b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b30:	059a      	lsls	r2, r3, #22
 8010b32:	d4ef      	bmi.n	8010b14 <__smakebuf_r+0x18>
 8010b34:	f023 0303 	bic.w	r3, r3, #3
 8010b38:	f043 0302 	orr.w	r3, r3, #2
 8010b3c:	81a3      	strh	r3, [r4, #12]
 8010b3e:	e7e3      	b.n	8010b08 <__smakebuf_r+0xc>
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	6020      	str	r0, [r4, #0]
 8010b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b48:	81a3      	strh	r3, [r4, #12]
 8010b4a:	9b00      	ldr	r3, [sp, #0]
 8010b4c:	6163      	str	r3, [r4, #20]
 8010b4e:	9b01      	ldr	r3, [sp, #4]
 8010b50:	6120      	str	r0, [r4, #16]
 8010b52:	b15b      	cbz	r3, 8010b6c <__smakebuf_r+0x70>
 8010b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f000 f837 	bl	8010bcc <_isatty_r>
 8010b5e:	b128      	cbz	r0, 8010b6c <__smakebuf_r+0x70>
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	f023 0303 	bic.w	r3, r3, #3
 8010b66:	f043 0301 	orr.w	r3, r3, #1
 8010b6a:	81a3      	strh	r3, [r4, #12]
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	431d      	orrs	r5, r3
 8010b70:	81a5      	strh	r5, [r4, #12]
 8010b72:	e7cf      	b.n	8010b14 <__smakebuf_r+0x18>

08010b74 <memmove>:
 8010b74:	4288      	cmp	r0, r1
 8010b76:	b510      	push	{r4, lr}
 8010b78:	eb01 0402 	add.w	r4, r1, r2
 8010b7c:	d902      	bls.n	8010b84 <memmove+0x10>
 8010b7e:	4284      	cmp	r4, r0
 8010b80:	4623      	mov	r3, r4
 8010b82:	d807      	bhi.n	8010b94 <memmove+0x20>
 8010b84:	1e43      	subs	r3, r0, #1
 8010b86:	42a1      	cmp	r1, r4
 8010b88:	d008      	beq.n	8010b9c <memmove+0x28>
 8010b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b92:	e7f8      	b.n	8010b86 <memmove+0x12>
 8010b94:	4402      	add	r2, r0
 8010b96:	4601      	mov	r1, r0
 8010b98:	428a      	cmp	r2, r1
 8010b9a:	d100      	bne.n	8010b9e <memmove+0x2a>
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ba6:	e7f7      	b.n	8010b98 <memmove+0x24>

08010ba8 <_fstat_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	4d07      	ldr	r5, [pc, #28]	; (8010bc8 <_fstat_r+0x20>)
 8010bac:	2300      	movs	r3, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	602b      	str	r3, [r5, #0]
 8010bb6:	f7f4 fd90 	bl	80056da <_fstat>
 8010bba:	1c43      	adds	r3, r0, #1
 8010bbc:	d102      	bne.n	8010bc4 <_fstat_r+0x1c>
 8010bbe:	682b      	ldr	r3, [r5, #0]
 8010bc0:	b103      	cbz	r3, 8010bc4 <_fstat_r+0x1c>
 8010bc2:	6023      	str	r3, [r4, #0]
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
 8010bc6:	bf00      	nop
 8010bc8:	200097c8 	.word	0x200097c8

08010bcc <_isatty_r>:
 8010bcc:	b538      	push	{r3, r4, r5, lr}
 8010bce:	4d06      	ldr	r5, [pc, #24]	; (8010be8 <_isatty_r+0x1c>)
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	4608      	mov	r0, r1
 8010bd6:	602b      	str	r3, [r5, #0]
 8010bd8:	f7f4 fd8f 	bl	80056fa <_isatty>
 8010bdc:	1c43      	adds	r3, r0, #1
 8010bde:	d102      	bne.n	8010be6 <_isatty_r+0x1a>
 8010be0:	682b      	ldr	r3, [r5, #0]
 8010be2:	b103      	cbz	r3, 8010be6 <_isatty_r+0x1a>
 8010be4:	6023      	str	r3, [r4, #0]
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	200097c8 	.word	0x200097c8

08010bec <abort>:
 8010bec:	b508      	push	{r3, lr}
 8010bee:	2006      	movs	r0, #6
 8010bf0:	f000 f868 	bl	8010cc4 <raise>
 8010bf4:	2001      	movs	r0, #1
 8010bf6:	f7f4 fd21 	bl	800563c <_exit>

08010bfa <_calloc_r>:
 8010bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bfc:	fba1 2402 	umull	r2, r4, r1, r2
 8010c00:	b94c      	cbnz	r4, 8010c16 <_calloc_r+0x1c>
 8010c02:	4611      	mov	r1, r2
 8010c04:	9201      	str	r2, [sp, #4]
 8010c06:	f7fc ffb7 	bl	800db78 <_malloc_r>
 8010c0a:	9a01      	ldr	r2, [sp, #4]
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	b930      	cbnz	r0, 8010c1e <_calloc_r+0x24>
 8010c10:	4628      	mov	r0, r5
 8010c12:	b003      	add	sp, #12
 8010c14:	bd30      	pop	{r4, r5, pc}
 8010c16:	220c      	movs	r2, #12
 8010c18:	6002      	str	r2, [r0, #0]
 8010c1a:	2500      	movs	r5, #0
 8010c1c:	e7f8      	b.n	8010c10 <_calloc_r+0x16>
 8010c1e:	4621      	mov	r1, r4
 8010c20:	f7fd fc1e 	bl	800e460 <memset>
 8010c24:	e7f4      	b.n	8010c10 <_calloc_r+0x16>

08010c26 <__ascii_mbtowc>:
 8010c26:	b082      	sub	sp, #8
 8010c28:	b901      	cbnz	r1, 8010c2c <__ascii_mbtowc+0x6>
 8010c2a:	a901      	add	r1, sp, #4
 8010c2c:	b142      	cbz	r2, 8010c40 <__ascii_mbtowc+0x1a>
 8010c2e:	b14b      	cbz	r3, 8010c44 <__ascii_mbtowc+0x1e>
 8010c30:	7813      	ldrb	r3, [r2, #0]
 8010c32:	600b      	str	r3, [r1, #0]
 8010c34:	7812      	ldrb	r2, [r2, #0]
 8010c36:	1e10      	subs	r0, r2, #0
 8010c38:	bf18      	it	ne
 8010c3a:	2001      	movne	r0, #1
 8010c3c:	b002      	add	sp, #8
 8010c3e:	4770      	bx	lr
 8010c40:	4610      	mov	r0, r2
 8010c42:	e7fb      	b.n	8010c3c <__ascii_mbtowc+0x16>
 8010c44:	f06f 0001 	mvn.w	r0, #1
 8010c48:	e7f8      	b.n	8010c3c <__ascii_mbtowc+0x16>

08010c4a <_malloc_usable_size_r>:
 8010c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c4e:	1f18      	subs	r0, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	bfbc      	itt	lt
 8010c54:	580b      	ldrlt	r3, [r1, r0]
 8010c56:	18c0      	addlt	r0, r0, r3
 8010c58:	4770      	bx	lr

08010c5a <__ascii_wctomb>:
 8010c5a:	b149      	cbz	r1, 8010c70 <__ascii_wctomb+0x16>
 8010c5c:	2aff      	cmp	r2, #255	; 0xff
 8010c5e:	bf85      	ittet	hi
 8010c60:	238a      	movhi	r3, #138	; 0x8a
 8010c62:	6003      	strhi	r3, [r0, #0]
 8010c64:	700a      	strbls	r2, [r1, #0]
 8010c66:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010c6a:	bf98      	it	ls
 8010c6c:	2001      	movls	r0, #1
 8010c6e:	4770      	bx	lr
 8010c70:	4608      	mov	r0, r1
 8010c72:	4770      	bx	lr

08010c74 <_raise_r>:
 8010c74:	291f      	cmp	r1, #31
 8010c76:	b538      	push	{r3, r4, r5, lr}
 8010c78:	4604      	mov	r4, r0
 8010c7a:	460d      	mov	r5, r1
 8010c7c:	d904      	bls.n	8010c88 <_raise_r+0x14>
 8010c7e:	2316      	movs	r3, #22
 8010c80:	6003      	str	r3, [r0, #0]
 8010c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c86:	bd38      	pop	{r3, r4, r5, pc}
 8010c88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010c8a:	b112      	cbz	r2, 8010c92 <_raise_r+0x1e>
 8010c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c90:	b94b      	cbnz	r3, 8010ca6 <_raise_r+0x32>
 8010c92:	4620      	mov	r0, r4
 8010c94:	f000 f830 	bl	8010cf8 <_getpid_r>
 8010c98:	462a      	mov	r2, r5
 8010c9a:	4601      	mov	r1, r0
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ca2:	f000 b817 	b.w	8010cd4 <_kill_r>
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d00a      	beq.n	8010cc0 <_raise_r+0x4c>
 8010caa:	1c59      	adds	r1, r3, #1
 8010cac:	d103      	bne.n	8010cb6 <_raise_r+0x42>
 8010cae:	2316      	movs	r3, #22
 8010cb0:	6003      	str	r3, [r0, #0]
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	e7e7      	b.n	8010c86 <_raise_r+0x12>
 8010cb6:	2400      	movs	r4, #0
 8010cb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	4798      	blx	r3
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	e7e0      	b.n	8010c86 <_raise_r+0x12>

08010cc4 <raise>:
 8010cc4:	4b02      	ldr	r3, [pc, #8]	; (8010cd0 <raise+0xc>)
 8010cc6:	4601      	mov	r1, r0
 8010cc8:	6818      	ldr	r0, [r3, #0]
 8010cca:	f7ff bfd3 	b.w	8010c74 <_raise_r>
 8010cce:	bf00      	nop
 8010cd0:	2000009c 	.word	0x2000009c

08010cd4 <_kill_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4d07      	ldr	r5, [pc, #28]	; (8010cf4 <_kill_r+0x20>)
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4604      	mov	r4, r0
 8010cdc:	4608      	mov	r0, r1
 8010cde:	4611      	mov	r1, r2
 8010ce0:	602b      	str	r3, [r5, #0]
 8010ce2:	f7f4 fc9b 	bl	800561c <_kill>
 8010ce6:	1c43      	adds	r3, r0, #1
 8010ce8:	d102      	bne.n	8010cf0 <_kill_r+0x1c>
 8010cea:	682b      	ldr	r3, [r5, #0]
 8010cec:	b103      	cbz	r3, 8010cf0 <_kill_r+0x1c>
 8010cee:	6023      	str	r3, [r4, #0]
 8010cf0:	bd38      	pop	{r3, r4, r5, pc}
 8010cf2:	bf00      	nop
 8010cf4:	200097c8 	.word	0x200097c8

08010cf8 <_getpid_r>:
 8010cf8:	f7f4 bc88 	b.w	800560c <_getpid>

08010cfc <acos>:
 8010cfc:	b538      	push	{r3, r4, r5, lr}
 8010cfe:	ed2d 8b02 	vpush	{d8}
 8010d02:	ec55 4b10 	vmov	r4, r5, d0
 8010d06:	f000 f82f 	bl	8010d68 <__ieee754_acos>
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	4620      	mov	r0, r4
 8010d10:	4629      	mov	r1, r5
 8010d12:	eeb0 8a40 	vmov.f32	s16, s0
 8010d16:	eef0 8a60 	vmov.f32	s17, s1
 8010d1a:	f7ef ff27 	bl	8000b6c <__aeabi_dcmpun>
 8010d1e:	b9a8      	cbnz	r0, 8010d4c <acos+0x50>
 8010d20:	ec45 4b10 	vmov	d0, r4, r5
 8010d24:	f000 faac 	bl	8011280 <fabs>
 8010d28:	4b0c      	ldr	r3, [pc, #48]	; (8010d5c <acos+0x60>)
 8010d2a:	ec51 0b10 	vmov	r0, r1, d0
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f7ef ff12 	bl	8000b58 <__aeabi_dcmpgt>
 8010d34:	b150      	cbz	r0, 8010d4c <acos+0x50>
 8010d36:	f7fd fbf5 	bl	800e524 <__errno>
 8010d3a:	ecbd 8b02 	vpop	{d8}
 8010d3e:	2321      	movs	r3, #33	; 0x21
 8010d40:	6003      	str	r3, [r0, #0]
 8010d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d46:	4806      	ldr	r0, [pc, #24]	; (8010d60 <acos+0x64>)
 8010d48:	f000 bc02 	b.w	8011550 <nan>
 8010d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8010d50:	eef0 0a68 	vmov.f32	s1, s17
 8010d54:	ecbd 8b02 	vpop	{d8}
 8010d58:	bd38      	pop	{r3, r4, r5, pc}
 8010d5a:	bf00      	nop
 8010d5c:	3ff00000 	.word	0x3ff00000
 8010d60:	08015e92 	.word	0x08015e92
 8010d64:	00000000 	.word	0x00000000

08010d68 <__ieee754_acos>:
 8010d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d6c:	ec55 4b10 	vmov	r4, r5, d0
 8010d70:	49b7      	ldr	r1, [pc, #732]	; (8011050 <__ieee754_acos+0x2e8>)
 8010d72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d76:	428b      	cmp	r3, r1
 8010d78:	dd1b      	ble.n	8010db2 <__ieee754_acos+0x4a>
 8010d7a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010d7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010d82:	4323      	orrs	r3, r4
 8010d84:	d106      	bne.n	8010d94 <__ieee754_acos+0x2c>
 8010d86:	2d00      	cmp	r5, #0
 8010d88:	f300 8211 	bgt.w	80111ae <__ieee754_acos+0x446>
 8010d8c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010fe8 <__ieee754_acos+0x280>
 8010d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d94:	ee10 2a10 	vmov	r2, s0
 8010d98:	462b      	mov	r3, r5
 8010d9a:	ee10 0a10 	vmov	r0, s0
 8010d9e:	4629      	mov	r1, r5
 8010da0:	f7ef fa92 	bl	80002c8 <__aeabi_dsub>
 8010da4:	4602      	mov	r2, r0
 8010da6:	460b      	mov	r3, r1
 8010da8:	f7ef fd70 	bl	800088c <__aeabi_ddiv>
 8010dac:	ec41 0b10 	vmov	d0, r0, r1
 8010db0:	e7ee      	b.n	8010d90 <__ieee754_acos+0x28>
 8010db2:	49a8      	ldr	r1, [pc, #672]	; (8011054 <__ieee754_acos+0x2ec>)
 8010db4:	428b      	cmp	r3, r1
 8010db6:	f300 8087 	bgt.w	8010ec8 <__ieee754_acos+0x160>
 8010dba:	4aa7      	ldr	r2, [pc, #668]	; (8011058 <__ieee754_acos+0x2f0>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	f340 81f9 	ble.w	80111b4 <__ieee754_acos+0x44c>
 8010dc2:	ee10 2a10 	vmov	r2, s0
 8010dc6:	ee10 0a10 	vmov	r0, s0
 8010dca:	462b      	mov	r3, r5
 8010dcc:	4629      	mov	r1, r5
 8010dce:	f7ef fc33 	bl	8000638 <__aeabi_dmul>
 8010dd2:	a387      	add	r3, pc, #540	; (adr r3, 8010ff0 <__ieee754_acos+0x288>)
 8010dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd8:	4606      	mov	r6, r0
 8010dda:	460f      	mov	r7, r1
 8010ddc:	f7ef fc2c 	bl	8000638 <__aeabi_dmul>
 8010de0:	a385      	add	r3, pc, #532	; (adr r3, 8010ff8 <__ieee754_acos+0x290>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	f7ef fa71 	bl	80002cc <__adddf3>
 8010dea:	4632      	mov	r2, r6
 8010dec:	463b      	mov	r3, r7
 8010dee:	f7ef fc23 	bl	8000638 <__aeabi_dmul>
 8010df2:	a383      	add	r3, pc, #524	; (adr r3, 8011000 <__ieee754_acos+0x298>)
 8010df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df8:	f7ef fa66 	bl	80002c8 <__aeabi_dsub>
 8010dfc:	4632      	mov	r2, r6
 8010dfe:	463b      	mov	r3, r7
 8010e00:	f7ef fc1a 	bl	8000638 <__aeabi_dmul>
 8010e04:	a380      	add	r3, pc, #512	; (adr r3, 8011008 <__ieee754_acos+0x2a0>)
 8010e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0a:	f7ef fa5f 	bl	80002cc <__adddf3>
 8010e0e:	4632      	mov	r2, r6
 8010e10:	463b      	mov	r3, r7
 8010e12:	f7ef fc11 	bl	8000638 <__aeabi_dmul>
 8010e16:	a37e      	add	r3, pc, #504	; (adr r3, 8011010 <__ieee754_acos+0x2a8>)
 8010e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1c:	f7ef fa54 	bl	80002c8 <__aeabi_dsub>
 8010e20:	4632      	mov	r2, r6
 8010e22:	463b      	mov	r3, r7
 8010e24:	f7ef fc08 	bl	8000638 <__aeabi_dmul>
 8010e28:	a37b      	add	r3, pc, #492	; (adr r3, 8011018 <__ieee754_acos+0x2b0>)
 8010e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2e:	f7ef fa4d 	bl	80002cc <__adddf3>
 8010e32:	4632      	mov	r2, r6
 8010e34:	463b      	mov	r3, r7
 8010e36:	f7ef fbff 	bl	8000638 <__aeabi_dmul>
 8010e3a:	a379      	add	r3, pc, #484	; (adr r3, 8011020 <__ieee754_acos+0x2b8>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	4680      	mov	r8, r0
 8010e42:	4689      	mov	r9, r1
 8010e44:	4630      	mov	r0, r6
 8010e46:	4639      	mov	r1, r7
 8010e48:	f7ef fbf6 	bl	8000638 <__aeabi_dmul>
 8010e4c:	a376      	add	r3, pc, #472	; (adr r3, 8011028 <__ieee754_acos+0x2c0>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	f7ef fa39 	bl	80002c8 <__aeabi_dsub>
 8010e56:	4632      	mov	r2, r6
 8010e58:	463b      	mov	r3, r7
 8010e5a:	f7ef fbed 	bl	8000638 <__aeabi_dmul>
 8010e5e:	a374      	add	r3, pc, #464	; (adr r3, 8011030 <__ieee754_acos+0x2c8>)
 8010e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e64:	f7ef fa32 	bl	80002cc <__adddf3>
 8010e68:	4632      	mov	r2, r6
 8010e6a:	463b      	mov	r3, r7
 8010e6c:	f7ef fbe4 	bl	8000638 <__aeabi_dmul>
 8010e70:	a371      	add	r3, pc, #452	; (adr r3, 8011038 <__ieee754_acos+0x2d0>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7ef fa27 	bl	80002c8 <__aeabi_dsub>
 8010e7a:	4632      	mov	r2, r6
 8010e7c:	463b      	mov	r3, r7
 8010e7e:	f7ef fbdb 	bl	8000638 <__aeabi_dmul>
 8010e82:	4b76      	ldr	r3, [pc, #472]	; (801105c <__ieee754_acos+0x2f4>)
 8010e84:	2200      	movs	r2, #0
 8010e86:	f7ef fa21 	bl	80002cc <__adddf3>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	4640      	mov	r0, r8
 8010e90:	4649      	mov	r1, r9
 8010e92:	f7ef fcfb 	bl	800088c <__aeabi_ddiv>
 8010e96:	4622      	mov	r2, r4
 8010e98:	462b      	mov	r3, r5
 8010e9a:	f7ef fbcd 	bl	8000638 <__aeabi_dmul>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	a167      	add	r1, pc, #412	; (adr r1, 8011040 <__ieee754_acos+0x2d8>)
 8010ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ea8:	f7ef fa0e 	bl	80002c8 <__aeabi_dsub>
 8010eac:	4602      	mov	r2, r0
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	f7ef fa08 	bl	80002c8 <__aeabi_dsub>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	a162      	add	r1, pc, #392	; (adr r1, 8011048 <__ieee754_acos+0x2e0>)
 8010ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ec2:	f7ef fa01 	bl	80002c8 <__aeabi_dsub>
 8010ec6:	e771      	b.n	8010dac <__ieee754_acos+0x44>
 8010ec8:	2d00      	cmp	r5, #0
 8010eca:	f280 80cb 	bge.w	8011064 <__ieee754_acos+0x2fc>
 8010ece:	ee10 0a10 	vmov	r0, s0
 8010ed2:	4b62      	ldr	r3, [pc, #392]	; (801105c <__ieee754_acos+0x2f4>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	4629      	mov	r1, r5
 8010ed8:	f7ef f9f8 	bl	80002cc <__adddf3>
 8010edc:	4b60      	ldr	r3, [pc, #384]	; (8011060 <__ieee754_acos+0x2f8>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	f7ef fbaa 	bl	8000638 <__aeabi_dmul>
 8010ee4:	a342      	add	r3, pc, #264	; (adr r3, 8010ff0 <__ieee754_acos+0x288>)
 8010ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eea:	4604      	mov	r4, r0
 8010eec:	460d      	mov	r5, r1
 8010eee:	f7ef fba3 	bl	8000638 <__aeabi_dmul>
 8010ef2:	a341      	add	r3, pc, #260	; (adr r3, 8010ff8 <__ieee754_acos+0x290>)
 8010ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef8:	f7ef f9e8 	bl	80002cc <__adddf3>
 8010efc:	4622      	mov	r2, r4
 8010efe:	462b      	mov	r3, r5
 8010f00:	f7ef fb9a 	bl	8000638 <__aeabi_dmul>
 8010f04:	a33e      	add	r3, pc, #248	; (adr r3, 8011000 <__ieee754_acos+0x298>)
 8010f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0a:	f7ef f9dd 	bl	80002c8 <__aeabi_dsub>
 8010f0e:	4622      	mov	r2, r4
 8010f10:	462b      	mov	r3, r5
 8010f12:	f7ef fb91 	bl	8000638 <__aeabi_dmul>
 8010f16:	a33c      	add	r3, pc, #240	; (adr r3, 8011008 <__ieee754_acos+0x2a0>)
 8010f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1c:	f7ef f9d6 	bl	80002cc <__adddf3>
 8010f20:	4622      	mov	r2, r4
 8010f22:	462b      	mov	r3, r5
 8010f24:	f7ef fb88 	bl	8000638 <__aeabi_dmul>
 8010f28:	a339      	add	r3, pc, #228	; (adr r3, 8011010 <__ieee754_acos+0x2a8>)
 8010f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2e:	f7ef f9cb 	bl	80002c8 <__aeabi_dsub>
 8010f32:	4622      	mov	r2, r4
 8010f34:	462b      	mov	r3, r5
 8010f36:	f7ef fb7f 	bl	8000638 <__aeabi_dmul>
 8010f3a:	a337      	add	r3, pc, #220	; (adr r3, 8011018 <__ieee754_acos+0x2b0>)
 8010f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f40:	f7ef f9c4 	bl	80002cc <__adddf3>
 8010f44:	4622      	mov	r2, r4
 8010f46:	462b      	mov	r3, r5
 8010f48:	f7ef fb76 	bl	8000638 <__aeabi_dmul>
 8010f4c:	ec45 4b10 	vmov	d0, r4, r5
 8010f50:	4680      	mov	r8, r0
 8010f52:	4689      	mov	r9, r1
 8010f54:	f000 f99e 	bl	8011294 <__ieee754_sqrt>
 8010f58:	a331      	add	r3, pc, #196	; (adr r3, 8011020 <__ieee754_acos+0x2b8>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	4620      	mov	r0, r4
 8010f60:	4629      	mov	r1, r5
 8010f62:	ec57 6b10 	vmov	r6, r7, d0
 8010f66:	f7ef fb67 	bl	8000638 <__aeabi_dmul>
 8010f6a:	a32f      	add	r3, pc, #188	; (adr r3, 8011028 <__ieee754_acos+0x2c0>)
 8010f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f70:	f7ef f9aa 	bl	80002c8 <__aeabi_dsub>
 8010f74:	4622      	mov	r2, r4
 8010f76:	462b      	mov	r3, r5
 8010f78:	f7ef fb5e 	bl	8000638 <__aeabi_dmul>
 8010f7c:	a32c      	add	r3, pc, #176	; (adr r3, 8011030 <__ieee754_acos+0x2c8>)
 8010f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f82:	f7ef f9a3 	bl	80002cc <__adddf3>
 8010f86:	4622      	mov	r2, r4
 8010f88:	462b      	mov	r3, r5
 8010f8a:	f7ef fb55 	bl	8000638 <__aeabi_dmul>
 8010f8e:	a32a      	add	r3, pc, #168	; (adr r3, 8011038 <__ieee754_acos+0x2d0>)
 8010f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f94:	f7ef f998 	bl	80002c8 <__aeabi_dsub>
 8010f98:	4622      	mov	r2, r4
 8010f9a:	462b      	mov	r3, r5
 8010f9c:	f7ef fb4c 	bl	8000638 <__aeabi_dmul>
 8010fa0:	4b2e      	ldr	r3, [pc, #184]	; (801105c <__ieee754_acos+0x2f4>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f7ef f992 	bl	80002cc <__adddf3>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4640      	mov	r0, r8
 8010fae:	4649      	mov	r1, r9
 8010fb0:	f7ef fc6c 	bl	800088c <__aeabi_ddiv>
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	463b      	mov	r3, r7
 8010fb8:	f7ef fb3e 	bl	8000638 <__aeabi_dmul>
 8010fbc:	a320      	add	r3, pc, #128	; (adr r3, 8011040 <__ieee754_acos+0x2d8>)
 8010fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc2:	f7ef f981 	bl	80002c8 <__aeabi_dsub>
 8010fc6:	4632      	mov	r2, r6
 8010fc8:	463b      	mov	r3, r7
 8010fca:	f7ef f97f 	bl	80002cc <__adddf3>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	f7ef f97b 	bl	80002cc <__adddf3>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	460b      	mov	r3, r1
 8010fda:	a103      	add	r1, pc, #12	; (adr r1, 8010fe8 <__ieee754_acos+0x280>)
 8010fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fe0:	e76f      	b.n	8010ec2 <__ieee754_acos+0x15a>
 8010fe2:	bf00      	nop
 8010fe4:	f3af 8000 	nop.w
 8010fe8:	54442d18 	.word	0x54442d18
 8010fec:	400921fb 	.word	0x400921fb
 8010ff0:	0dfdf709 	.word	0x0dfdf709
 8010ff4:	3f023de1 	.word	0x3f023de1
 8010ff8:	7501b288 	.word	0x7501b288
 8010ffc:	3f49efe0 	.word	0x3f49efe0
 8011000:	b5688f3b 	.word	0xb5688f3b
 8011004:	3fa48228 	.word	0x3fa48228
 8011008:	0e884455 	.word	0x0e884455
 801100c:	3fc9c155 	.word	0x3fc9c155
 8011010:	03eb6f7d 	.word	0x03eb6f7d
 8011014:	3fd4d612 	.word	0x3fd4d612
 8011018:	55555555 	.word	0x55555555
 801101c:	3fc55555 	.word	0x3fc55555
 8011020:	b12e9282 	.word	0xb12e9282
 8011024:	3fb3b8c5 	.word	0x3fb3b8c5
 8011028:	1b8d0159 	.word	0x1b8d0159
 801102c:	3fe6066c 	.word	0x3fe6066c
 8011030:	9c598ac8 	.word	0x9c598ac8
 8011034:	40002ae5 	.word	0x40002ae5
 8011038:	1c8a2d4b 	.word	0x1c8a2d4b
 801103c:	40033a27 	.word	0x40033a27
 8011040:	33145c07 	.word	0x33145c07
 8011044:	3c91a626 	.word	0x3c91a626
 8011048:	54442d18 	.word	0x54442d18
 801104c:	3ff921fb 	.word	0x3ff921fb
 8011050:	3fefffff 	.word	0x3fefffff
 8011054:	3fdfffff 	.word	0x3fdfffff
 8011058:	3c600000 	.word	0x3c600000
 801105c:	3ff00000 	.word	0x3ff00000
 8011060:	3fe00000 	.word	0x3fe00000
 8011064:	ee10 2a10 	vmov	r2, s0
 8011068:	462b      	mov	r3, r5
 801106a:	496d      	ldr	r1, [pc, #436]	; (8011220 <__ieee754_acos+0x4b8>)
 801106c:	2000      	movs	r0, #0
 801106e:	f7ef f92b 	bl	80002c8 <__aeabi_dsub>
 8011072:	4b6c      	ldr	r3, [pc, #432]	; (8011224 <__ieee754_acos+0x4bc>)
 8011074:	2200      	movs	r2, #0
 8011076:	f7ef fadf 	bl	8000638 <__aeabi_dmul>
 801107a:	4604      	mov	r4, r0
 801107c:	460d      	mov	r5, r1
 801107e:	ec45 4b10 	vmov	d0, r4, r5
 8011082:	f000 f907 	bl	8011294 <__ieee754_sqrt>
 8011086:	a34e      	add	r3, pc, #312	; (adr r3, 80111c0 <__ieee754_acos+0x458>)
 8011088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108c:	4620      	mov	r0, r4
 801108e:	4629      	mov	r1, r5
 8011090:	ec59 8b10 	vmov	r8, r9, d0
 8011094:	f7ef fad0 	bl	8000638 <__aeabi_dmul>
 8011098:	a34b      	add	r3, pc, #300	; (adr r3, 80111c8 <__ieee754_acos+0x460>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	f7ef f915 	bl	80002cc <__adddf3>
 80110a2:	4622      	mov	r2, r4
 80110a4:	462b      	mov	r3, r5
 80110a6:	f7ef fac7 	bl	8000638 <__aeabi_dmul>
 80110aa:	a349      	add	r3, pc, #292	; (adr r3, 80111d0 <__ieee754_acos+0x468>)
 80110ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b0:	f7ef f90a 	bl	80002c8 <__aeabi_dsub>
 80110b4:	4622      	mov	r2, r4
 80110b6:	462b      	mov	r3, r5
 80110b8:	f7ef fabe 	bl	8000638 <__aeabi_dmul>
 80110bc:	a346      	add	r3, pc, #280	; (adr r3, 80111d8 <__ieee754_acos+0x470>)
 80110be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c2:	f7ef f903 	bl	80002cc <__adddf3>
 80110c6:	4622      	mov	r2, r4
 80110c8:	462b      	mov	r3, r5
 80110ca:	f7ef fab5 	bl	8000638 <__aeabi_dmul>
 80110ce:	a344      	add	r3, pc, #272	; (adr r3, 80111e0 <__ieee754_acos+0x478>)
 80110d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d4:	f7ef f8f8 	bl	80002c8 <__aeabi_dsub>
 80110d8:	4622      	mov	r2, r4
 80110da:	462b      	mov	r3, r5
 80110dc:	f7ef faac 	bl	8000638 <__aeabi_dmul>
 80110e0:	a341      	add	r3, pc, #260	; (adr r3, 80111e8 <__ieee754_acos+0x480>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	f7ef f8f1 	bl	80002cc <__adddf3>
 80110ea:	4622      	mov	r2, r4
 80110ec:	462b      	mov	r3, r5
 80110ee:	f7ef faa3 	bl	8000638 <__aeabi_dmul>
 80110f2:	a33f      	add	r3, pc, #252	; (adr r3, 80111f0 <__ieee754_acos+0x488>)
 80110f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f8:	4682      	mov	sl, r0
 80110fa:	468b      	mov	fp, r1
 80110fc:	4620      	mov	r0, r4
 80110fe:	4629      	mov	r1, r5
 8011100:	f7ef fa9a 	bl	8000638 <__aeabi_dmul>
 8011104:	a33c      	add	r3, pc, #240	; (adr r3, 80111f8 <__ieee754_acos+0x490>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	f7ef f8dd 	bl	80002c8 <__aeabi_dsub>
 801110e:	4622      	mov	r2, r4
 8011110:	462b      	mov	r3, r5
 8011112:	f7ef fa91 	bl	8000638 <__aeabi_dmul>
 8011116:	a33a      	add	r3, pc, #232	; (adr r3, 8011200 <__ieee754_acos+0x498>)
 8011118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111c:	f7ef f8d6 	bl	80002cc <__adddf3>
 8011120:	4622      	mov	r2, r4
 8011122:	462b      	mov	r3, r5
 8011124:	f7ef fa88 	bl	8000638 <__aeabi_dmul>
 8011128:	a337      	add	r3, pc, #220	; (adr r3, 8011208 <__ieee754_acos+0x4a0>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef f8cb 	bl	80002c8 <__aeabi_dsub>
 8011132:	4622      	mov	r2, r4
 8011134:	462b      	mov	r3, r5
 8011136:	f7ef fa7f 	bl	8000638 <__aeabi_dmul>
 801113a:	4b39      	ldr	r3, [pc, #228]	; (8011220 <__ieee754_acos+0x4b8>)
 801113c:	2200      	movs	r2, #0
 801113e:	f7ef f8c5 	bl	80002cc <__adddf3>
 8011142:	4602      	mov	r2, r0
 8011144:	460b      	mov	r3, r1
 8011146:	4650      	mov	r0, sl
 8011148:	4659      	mov	r1, fp
 801114a:	f7ef fb9f 	bl	800088c <__aeabi_ddiv>
 801114e:	4642      	mov	r2, r8
 8011150:	464b      	mov	r3, r9
 8011152:	f7ef fa71 	bl	8000638 <__aeabi_dmul>
 8011156:	2600      	movs	r6, #0
 8011158:	4682      	mov	sl, r0
 801115a:	468b      	mov	fp, r1
 801115c:	4632      	mov	r2, r6
 801115e:	464b      	mov	r3, r9
 8011160:	4630      	mov	r0, r6
 8011162:	4649      	mov	r1, r9
 8011164:	f7ef fa68 	bl	8000638 <__aeabi_dmul>
 8011168:	4602      	mov	r2, r0
 801116a:	460b      	mov	r3, r1
 801116c:	4620      	mov	r0, r4
 801116e:	4629      	mov	r1, r5
 8011170:	f7ef f8aa 	bl	80002c8 <__aeabi_dsub>
 8011174:	4632      	mov	r2, r6
 8011176:	4604      	mov	r4, r0
 8011178:	460d      	mov	r5, r1
 801117a:	464b      	mov	r3, r9
 801117c:	4640      	mov	r0, r8
 801117e:	4649      	mov	r1, r9
 8011180:	f7ef f8a4 	bl	80002cc <__adddf3>
 8011184:	4602      	mov	r2, r0
 8011186:	460b      	mov	r3, r1
 8011188:	4620      	mov	r0, r4
 801118a:	4629      	mov	r1, r5
 801118c:	f7ef fb7e 	bl	800088c <__aeabi_ddiv>
 8011190:	4602      	mov	r2, r0
 8011192:	460b      	mov	r3, r1
 8011194:	4650      	mov	r0, sl
 8011196:	4659      	mov	r1, fp
 8011198:	f7ef f898 	bl	80002cc <__adddf3>
 801119c:	4632      	mov	r2, r6
 801119e:	464b      	mov	r3, r9
 80111a0:	f7ef f894 	bl	80002cc <__adddf3>
 80111a4:	4602      	mov	r2, r0
 80111a6:	460b      	mov	r3, r1
 80111a8:	f7ef f890 	bl	80002cc <__adddf3>
 80111ac:	e5fe      	b.n	8010dac <__ieee754_acos+0x44>
 80111ae:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011210 <__ieee754_acos+0x4a8>
 80111b2:	e5ed      	b.n	8010d90 <__ieee754_acos+0x28>
 80111b4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011218 <__ieee754_acos+0x4b0>
 80111b8:	e5ea      	b.n	8010d90 <__ieee754_acos+0x28>
 80111ba:	bf00      	nop
 80111bc:	f3af 8000 	nop.w
 80111c0:	0dfdf709 	.word	0x0dfdf709
 80111c4:	3f023de1 	.word	0x3f023de1
 80111c8:	7501b288 	.word	0x7501b288
 80111cc:	3f49efe0 	.word	0x3f49efe0
 80111d0:	b5688f3b 	.word	0xb5688f3b
 80111d4:	3fa48228 	.word	0x3fa48228
 80111d8:	0e884455 	.word	0x0e884455
 80111dc:	3fc9c155 	.word	0x3fc9c155
 80111e0:	03eb6f7d 	.word	0x03eb6f7d
 80111e4:	3fd4d612 	.word	0x3fd4d612
 80111e8:	55555555 	.word	0x55555555
 80111ec:	3fc55555 	.word	0x3fc55555
 80111f0:	b12e9282 	.word	0xb12e9282
 80111f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80111f8:	1b8d0159 	.word	0x1b8d0159
 80111fc:	3fe6066c 	.word	0x3fe6066c
 8011200:	9c598ac8 	.word	0x9c598ac8
 8011204:	40002ae5 	.word	0x40002ae5
 8011208:	1c8a2d4b 	.word	0x1c8a2d4b
 801120c:	40033a27 	.word	0x40033a27
	...
 8011218:	54442d18 	.word	0x54442d18
 801121c:	3ff921fb 	.word	0x3ff921fb
 8011220:	3ff00000 	.word	0x3ff00000
 8011224:	3fe00000 	.word	0x3fe00000

08011228 <sqrt>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	ed2d 8b02 	vpush	{d8}
 801122e:	ec55 4b10 	vmov	r4, r5, d0
 8011232:	f000 f82f 	bl	8011294 <__ieee754_sqrt>
 8011236:	4622      	mov	r2, r4
 8011238:	462b      	mov	r3, r5
 801123a:	4620      	mov	r0, r4
 801123c:	4629      	mov	r1, r5
 801123e:	eeb0 8a40 	vmov.f32	s16, s0
 8011242:	eef0 8a60 	vmov.f32	s17, s1
 8011246:	f7ef fc91 	bl	8000b6c <__aeabi_dcmpun>
 801124a:	b990      	cbnz	r0, 8011272 <sqrt+0x4a>
 801124c:	2200      	movs	r2, #0
 801124e:	2300      	movs	r3, #0
 8011250:	4620      	mov	r0, r4
 8011252:	4629      	mov	r1, r5
 8011254:	f7ef fc62 	bl	8000b1c <__aeabi_dcmplt>
 8011258:	b158      	cbz	r0, 8011272 <sqrt+0x4a>
 801125a:	f7fd f963 	bl	800e524 <__errno>
 801125e:	2321      	movs	r3, #33	; 0x21
 8011260:	6003      	str	r3, [r0, #0]
 8011262:	2200      	movs	r2, #0
 8011264:	2300      	movs	r3, #0
 8011266:	4610      	mov	r0, r2
 8011268:	4619      	mov	r1, r3
 801126a:	f7ef fb0f 	bl	800088c <__aeabi_ddiv>
 801126e:	ec41 0b18 	vmov	d8, r0, r1
 8011272:	eeb0 0a48 	vmov.f32	s0, s16
 8011276:	eef0 0a68 	vmov.f32	s1, s17
 801127a:	ecbd 8b02 	vpop	{d8}
 801127e:	bd38      	pop	{r3, r4, r5, pc}

08011280 <fabs>:
 8011280:	ec51 0b10 	vmov	r0, r1, d0
 8011284:	ee10 2a10 	vmov	r2, s0
 8011288:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801128c:	ec43 2b10 	vmov	d0, r2, r3
 8011290:	4770      	bx	lr
	...

08011294 <__ieee754_sqrt>:
 8011294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011298:	ec55 4b10 	vmov	r4, r5, d0
 801129c:	4e67      	ldr	r6, [pc, #412]	; (801143c <__ieee754_sqrt+0x1a8>)
 801129e:	43ae      	bics	r6, r5
 80112a0:	ee10 0a10 	vmov	r0, s0
 80112a4:	ee10 2a10 	vmov	r2, s0
 80112a8:	4629      	mov	r1, r5
 80112aa:	462b      	mov	r3, r5
 80112ac:	d10d      	bne.n	80112ca <__ieee754_sqrt+0x36>
 80112ae:	f7ef f9c3 	bl	8000638 <__aeabi_dmul>
 80112b2:	4602      	mov	r2, r0
 80112b4:	460b      	mov	r3, r1
 80112b6:	4620      	mov	r0, r4
 80112b8:	4629      	mov	r1, r5
 80112ba:	f7ef f807 	bl	80002cc <__adddf3>
 80112be:	4604      	mov	r4, r0
 80112c0:	460d      	mov	r5, r1
 80112c2:	ec45 4b10 	vmov	d0, r4, r5
 80112c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ca:	2d00      	cmp	r5, #0
 80112cc:	dc0b      	bgt.n	80112e6 <__ieee754_sqrt+0x52>
 80112ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80112d2:	4326      	orrs	r6, r4
 80112d4:	d0f5      	beq.n	80112c2 <__ieee754_sqrt+0x2e>
 80112d6:	b135      	cbz	r5, 80112e6 <__ieee754_sqrt+0x52>
 80112d8:	f7ee fff6 	bl	80002c8 <__aeabi_dsub>
 80112dc:	4602      	mov	r2, r0
 80112de:	460b      	mov	r3, r1
 80112e0:	f7ef fad4 	bl	800088c <__aeabi_ddiv>
 80112e4:	e7eb      	b.n	80112be <__ieee754_sqrt+0x2a>
 80112e6:	1509      	asrs	r1, r1, #20
 80112e8:	f000 808d 	beq.w	8011406 <__ieee754_sqrt+0x172>
 80112ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80112f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80112f8:	07c9      	lsls	r1, r1, #31
 80112fa:	bf5c      	itt	pl
 80112fc:	005b      	lslpl	r3, r3, #1
 80112fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011302:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011306:	bf58      	it	pl
 8011308:	0052      	lslpl	r2, r2, #1
 801130a:	2500      	movs	r5, #0
 801130c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011310:	1076      	asrs	r6, r6, #1
 8011312:	0052      	lsls	r2, r2, #1
 8011314:	f04f 0e16 	mov.w	lr, #22
 8011318:	46ac      	mov	ip, r5
 801131a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801131e:	eb0c 0001 	add.w	r0, ip, r1
 8011322:	4298      	cmp	r0, r3
 8011324:	bfde      	ittt	le
 8011326:	1a1b      	suble	r3, r3, r0
 8011328:	eb00 0c01 	addle.w	ip, r0, r1
 801132c:	186d      	addle	r5, r5, r1
 801132e:	005b      	lsls	r3, r3, #1
 8011330:	f1be 0e01 	subs.w	lr, lr, #1
 8011334:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011338:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801133c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011340:	d1ed      	bne.n	801131e <__ieee754_sqrt+0x8a>
 8011342:	4674      	mov	r4, lr
 8011344:	2720      	movs	r7, #32
 8011346:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801134a:	4563      	cmp	r3, ip
 801134c:	eb01 000e 	add.w	r0, r1, lr
 8011350:	dc02      	bgt.n	8011358 <__ieee754_sqrt+0xc4>
 8011352:	d113      	bne.n	801137c <__ieee754_sqrt+0xe8>
 8011354:	4290      	cmp	r0, r2
 8011356:	d811      	bhi.n	801137c <__ieee754_sqrt+0xe8>
 8011358:	2800      	cmp	r0, #0
 801135a:	eb00 0e01 	add.w	lr, r0, r1
 801135e:	da57      	bge.n	8011410 <__ieee754_sqrt+0x17c>
 8011360:	f1be 0f00 	cmp.w	lr, #0
 8011364:	db54      	blt.n	8011410 <__ieee754_sqrt+0x17c>
 8011366:	f10c 0801 	add.w	r8, ip, #1
 801136a:	eba3 030c 	sub.w	r3, r3, ip
 801136e:	4290      	cmp	r0, r2
 8011370:	bf88      	it	hi
 8011372:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8011376:	1a12      	subs	r2, r2, r0
 8011378:	440c      	add	r4, r1
 801137a:	46c4      	mov	ip, r8
 801137c:	005b      	lsls	r3, r3, #1
 801137e:	3f01      	subs	r7, #1
 8011380:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011384:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011388:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801138c:	d1dd      	bne.n	801134a <__ieee754_sqrt+0xb6>
 801138e:	4313      	orrs	r3, r2
 8011390:	d01b      	beq.n	80113ca <__ieee754_sqrt+0x136>
 8011392:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011440 <__ieee754_sqrt+0x1ac>
 8011396:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011444 <__ieee754_sqrt+0x1b0>
 801139a:	e9da 0100 	ldrd	r0, r1, [sl]
 801139e:	e9db 2300 	ldrd	r2, r3, [fp]
 80113a2:	f7ee ff91 	bl	80002c8 <__aeabi_dsub>
 80113a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4640      	mov	r0, r8
 80113b0:	4649      	mov	r1, r9
 80113b2:	f7ef fbbd 	bl	8000b30 <__aeabi_dcmple>
 80113b6:	b140      	cbz	r0, 80113ca <__ieee754_sqrt+0x136>
 80113b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80113bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80113c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80113c4:	d126      	bne.n	8011414 <__ieee754_sqrt+0x180>
 80113c6:	3501      	adds	r5, #1
 80113c8:	463c      	mov	r4, r7
 80113ca:	106a      	asrs	r2, r5, #1
 80113cc:	0863      	lsrs	r3, r4, #1
 80113ce:	07e9      	lsls	r1, r5, #31
 80113d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80113d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80113d8:	bf48      	it	mi
 80113da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80113de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80113e2:	461c      	mov	r4, r3
 80113e4:	e76d      	b.n	80112c2 <__ieee754_sqrt+0x2e>
 80113e6:	0ad3      	lsrs	r3, r2, #11
 80113e8:	3815      	subs	r0, #21
 80113ea:	0552      	lsls	r2, r2, #21
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d0fa      	beq.n	80113e6 <__ieee754_sqrt+0x152>
 80113f0:	02dc      	lsls	r4, r3, #11
 80113f2:	d50a      	bpl.n	801140a <__ieee754_sqrt+0x176>
 80113f4:	f1c1 0420 	rsb	r4, r1, #32
 80113f8:	fa22 f404 	lsr.w	r4, r2, r4
 80113fc:	1e4d      	subs	r5, r1, #1
 80113fe:	408a      	lsls	r2, r1
 8011400:	4323      	orrs	r3, r4
 8011402:	1b41      	subs	r1, r0, r5
 8011404:	e772      	b.n	80112ec <__ieee754_sqrt+0x58>
 8011406:	4608      	mov	r0, r1
 8011408:	e7f0      	b.n	80113ec <__ieee754_sqrt+0x158>
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	3101      	adds	r1, #1
 801140e:	e7ef      	b.n	80113f0 <__ieee754_sqrt+0x15c>
 8011410:	46e0      	mov	r8, ip
 8011412:	e7aa      	b.n	801136a <__ieee754_sqrt+0xd6>
 8011414:	f7ee ff5a 	bl	80002cc <__adddf3>
 8011418:	e9da 8900 	ldrd	r8, r9, [sl]
 801141c:	4602      	mov	r2, r0
 801141e:	460b      	mov	r3, r1
 8011420:	4640      	mov	r0, r8
 8011422:	4649      	mov	r1, r9
 8011424:	f7ef fb7a 	bl	8000b1c <__aeabi_dcmplt>
 8011428:	b120      	cbz	r0, 8011434 <__ieee754_sqrt+0x1a0>
 801142a:	1ca0      	adds	r0, r4, #2
 801142c:	bf08      	it	eq
 801142e:	3501      	addeq	r5, #1
 8011430:	3402      	adds	r4, #2
 8011432:	e7ca      	b.n	80113ca <__ieee754_sqrt+0x136>
 8011434:	3401      	adds	r4, #1
 8011436:	f024 0401 	bic.w	r4, r4, #1
 801143a:	e7c6      	b.n	80113ca <__ieee754_sqrt+0x136>
 801143c:	7ff00000 	.word	0x7ff00000
 8011440:	20000210 	.word	0x20000210
 8011444:	20000218 	.word	0x20000218

08011448 <round>:
 8011448:	ec53 2b10 	vmov	r2, r3, d0
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8011452:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8011456:	2813      	cmp	r0, #19
 8011458:	ee10 5a10 	vmov	r5, s0
 801145c:	4619      	mov	r1, r3
 801145e:	dc18      	bgt.n	8011492 <round+0x4a>
 8011460:	2800      	cmp	r0, #0
 8011462:	da09      	bge.n	8011478 <round+0x30>
 8011464:	3001      	adds	r0, #1
 8011466:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801146a:	d103      	bne.n	8011474 <round+0x2c>
 801146c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8011470:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011474:	2300      	movs	r3, #0
 8011476:	e02a      	b.n	80114ce <round+0x86>
 8011478:	4c16      	ldr	r4, [pc, #88]	; (80114d4 <round+0x8c>)
 801147a:	4104      	asrs	r4, r0
 801147c:	ea03 0604 	and.w	r6, r3, r4
 8011480:	4316      	orrs	r6, r2
 8011482:	d011      	beq.n	80114a8 <round+0x60>
 8011484:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011488:	4103      	asrs	r3, r0
 801148a:	440b      	add	r3, r1
 801148c:	ea23 0104 	bic.w	r1, r3, r4
 8011490:	e7f0      	b.n	8011474 <round+0x2c>
 8011492:	2833      	cmp	r0, #51	; 0x33
 8011494:	dd0b      	ble.n	80114ae <round+0x66>
 8011496:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801149a:	d105      	bne.n	80114a8 <round+0x60>
 801149c:	ee10 0a10 	vmov	r0, s0
 80114a0:	f7ee ff14 	bl	80002cc <__adddf3>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	ec43 2b10 	vmov	d0, r2, r3
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
 80114ae:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80114b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80114b6:	40f4      	lsrs	r4, r6
 80114b8:	4214      	tst	r4, r2
 80114ba:	d0f5      	beq.n	80114a8 <round+0x60>
 80114bc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80114c0:	2301      	movs	r3, #1
 80114c2:	4083      	lsls	r3, r0
 80114c4:	195b      	adds	r3, r3, r5
 80114c6:	bf28      	it	cs
 80114c8:	3101      	addcs	r1, #1
 80114ca:	ea23 0304 	bic.w	r3, r3, r4
 80114ce:	461a      	mov	r2, r3
 80114d0:	460b      	mov	r3, r1
 80114d2:	e7e9      	b.n	80114a8 <round+0x60>
 80114d4:	000fffff 	.word	0x000fffff

080114d8 <trunc>:
 80114d8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80114dc:	ec5c bb10 	vmov	fp, ip, d0
 80114e0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80114e4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80114e8:	2913      	cmp	r1, #19
 80114ea:	4664      	mov	r4, ip
 80114ec:	dc11      	bgt.n	8011512 <trunc+0x3a>
 80114ee:	2900      	cmp	r1, #0
 80114f0:	bfa7      	ittee	ge
 80114f2:	4b15      	ldrge	r3, [pc, #84]	; (8011548 <trunc+0x70>)
 80114f4:	fa43 f101 	asrge.w	r1, r3, r1
 80114f8:	2200      	movlt	r2, #0
 80114fa:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80114fe:	bfa4      	itt	ge
 8011500:	2200      	movge	r2, #0
 8011502:	ea01 030c 	andge.w	r3, r1, ip
 8011506:	4693      	mov	fp, r2
 8011508:	469c      	mov	ip, r3
 801150a:	ec4c bb10 	vmov	d0, fp, ip
 801150e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8011512:	2933      	cmp	r1, #51	; 0x33
 8011514:	dd0d      	ble.n	8011532 <trunc+0x5a>
 8011516:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801151a:	d1f6      	bne.n	801150a <trunc+0x32>
 801151c:	4663      	mov	r3, ip
 801151e:	ee10 2a10 	vmov	r2, s0
 8011522:	ee10 0a10 	vmov	r0, s0
 8011526:	4621      	mov	r1, r4
 8011528:	f7ee fed0 	bl	80002cc <__adddf3>
 801152c:	4683      	mov	fp, r0
 801152e:	468c      	mov	ip, r1
 8011530:	e7eb      	b.n	801150a <trunc+0x32>
 8011532:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8011536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801153a:	40c3      	lsrs	r3, r0
 801153c:	ea2b 0603 	bic.w	r6, fp, r3
 8011540:	46b3      	mov	fp, r6
 8011542:	46a4      	mov	ip, r4
 8011544:	e7e1      	b.n	801150a <trunc+0x32>
 8011546:	bf00      	nop
 8011548:	fff00000 	.word	0xfff00000
 801154c:	00000000 	.word	0x00000000

08011550 <nan>:
 8011550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011558 <nan+0x8>
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	00000000 	.word	0x00000000
 801155c:	7ff80000 	.word	0x7ff80000

08011560 <_init>:
 8011560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011562:	bf00      	nop
 8011564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011566:	bc08      	pop	{r3}
 8011568:	469e      	mov	lr, r3
 801156a:	4770      	bx	lr

0801156c <_fini>:
 801156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156e:	bf00      	nop
 8011570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011572:	bc08      	pop	{r3}
 8011574:	469e      	mov	lr, r3
 8011576:	4770      	bx	lr
