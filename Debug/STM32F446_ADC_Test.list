
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a544  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab5c  0800ab5c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab5c  0800ab5c  0001ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab64  0800ab64  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab64  0800ab64  0001ab64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800ab6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b78  20000098  0800ac04  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c10  0800ac04  00025c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150e9  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032ac  00000000  00000000  000351f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f10  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002667d  00000000  00000000  0003a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193db  00000000  00000000  00060d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e29f7  00000000  00000000  0007a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf4  00000000  00000000  0015cb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a6fc 	.word	0x0800a6fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800a6fc 	.word	0x0800a6fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <calc_process_dma_buffer>:
 * Process the DMA buffer
 * parameter second_half: > 0 to process 2nd half of buffer, 0 = 1st half of buffer
 * parameter adc_num: 0 = ADC1, 1 = ADC2 (use ADC1_IDX or ADC2_IDX)
 * returns: -1 on failure, 0 if OK
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8000f24:	b4b0      	push	{r4, r5, r7}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d002      	beq.n	8000f48 <calc_process_dma_buffer+0x24>
		return -1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	e16c      	b.n	8001222 <calc_process_dma_buffer+0x2fe>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first entry in DMA buffer
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	raw_buf_second = raw_buf_first + 1; // destination index for second entry in DMA buffer
 8000f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f56:	3301      	adds	r3, #1
 8000f58:	f887 3020 	strb.w	r3, [r7, #32]
	// first or second half of DMA buffer?
	if (second_half) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <calc_process_dma_buffer+0x46>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 8000f62:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8000f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f68:	e001      	b.n	8000f6e <calc_process_dma_buffer+0x4a>
	} else {
		dma_buf_start = 0;	// first half
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8000f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f70:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 8000f74:	83fb      	strh	r3, [r7, #30]

	adc_raw_meta[raw_buf_first].min = adc_dma_buf[adc_num][0];
 8000f76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f7a:	49ac      	ldr	r1, [pc, #688]	; (800122c <calc_process_dma_buffer+0x308>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000f82:	fb00 f303 	mul.w	r3, r0, r3
 8000f86:	440b      	add	r3, r1
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	49a9      	ldr	r1, [pc, #676]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	4602      	mov	r2, r0
 8000f98:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].max = adc_dma_buf[adc_num][0];
 8000f9a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000f9e:	49a3      	ldr	r1, [pc, #652]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fa6:	fb00 f303 	mul.w	r3, r0, r3
 8000faa:	440b      	add	r3, r1
 8000fac:	8818      	ldrh	r0, [r3, #0]
 8000fae:	49a0      	ldr	r1, [pc, #640]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	3302      	adds	r3, #2
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].min = adc_dma_buf[adc_num][1];
 8000fc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fc4:	4999      	ldr	r1, [pc, #612]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000fcc:	fb00 f303 	mul.w	r3, r0, r3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	8818      	ldrh	r0, [r3, #0]
 8000fd6:	4996      	ldr	r1, [pc, #600]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].max = adc_dma_buf[adc_num][1];
 8000fe6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <calc_process_dma_buffer+0x308>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 50d2 	mov.w	r0, #6720	; 0x1a40
 8000ff2:	fb00 f303 	mul.w	r3, r0, r3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	8818      	ldrh	r0, [r3, #0]
 8000ffc:	498c      	ldr	r1, [pc, #560]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3302      	adds	r3, #2
 800100a:	4602      	mov	r2, r0
 800100c:	801a      	strh	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross1 = -1;
 800100e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001012:	4987      	ldr	r1, [pc, #540]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3304      	adds	r3, #4
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_first].zero_cross2 = -1;
 8001026:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800102a:	4981      	ldr	r1, [pc, #516]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3308      	adds	r3, #8
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross1 = -1;
 800103e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001042:	497b      	ldr	r1, [pc, #492]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3304      	adds	r3, #4
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	adc_raw_meta[raw_buf_second].zero_cross2 = -1;
 8001056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800105a:	4975      	ldr	r1, [pc, #468]	; (8001230 <calc_process_dma_buffer+0x30c>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	3308      	adds	r3, #8
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800106c:	601a      	str	r2, [r3, #0]
	// split DMA buffer and copy into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001072:	e0d0      	b.n	8001216 <calc_process_dma_buffer+0x2f2>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001074:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001076:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800107a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800107c:	4c6b      	ldr	r4, [pc, #428]	; (800122c <calc_process_dma_buffer+0x308>)
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001084:	fb05 f000 	mul.w	r0, r5, r0
 8001088:	4401      	add	r1, r0
 800108a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800108e:	4969      	ldr	r1, [pc, #420]	; (8001234 <calc_process_dma_buffer+0x310>)
 8001090:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001094:	fb00 f202 	mul.w	r2, r0, r2
 8001098:	4413      	add	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 80010a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010a2:	1c59      	adds	r1, r3, #1
 80010a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	8478      	strh	r0, [r7, #34]	; 0x22
 80010ae:	461d      	mov	r5, r3
 80010b0:	485e      	ldr	r0, [pc, #376]	; (800122c <calc_process_dma_buffer+0x308>)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80010b8:	fb04 f303 	mul.w	r3, r4, r3
 80010bc:	440b      	add	r3, r1
 80010be:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80010c2:	495c      	ldr	r1, [pc, #368]	; (8001234 <calc_process_dma_buffer+0x310>)
 80010c4:	f44f 7352 	mov.w	r3, #840	; 0x348
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	442b      	add	r3, r5
 80010ce:	4602      	mov	r2, r0
 80010d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_meta[raw_buf_first].min = MIN(adc_raw_meta[raw_buf_first].min, adc_dma_buf[adc_num][i]);
 80010d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010d8:	4955      	ldr	r1, [pc, #340]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	83bb      	strh	r3, [r7, #28]
 80010e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ea:	4950      	ldr	r1, [pc, #320]	; (800122c <calc_process_dma_buffer+0x308>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80010f2:	fb00 f202 	mul.w	r2, r0, r2
 80010f6:	4413      	add	r3, r2
 80010f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010fc:	837b      	strh	r3, [r7, #26]
 80010fe:	8b7a      	ldrh	r2, [r7, #26]
 8001100:	8bbb      	ldrh	r3, [r7, #28]
 8001102:	4293      	cmp	r3, r2
 8001104:	bf28      	it	cs
 8001106:	4613      	movcs	r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800110e:	b298      	uxth	r0, r3
 8001110:	4947      	ldr	r1, [pc, #284]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	4602      	mov	r2, r0
 800111e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_first].max = MAX(adc_raw_meta[raw_buf_first].max, adc_dma_buf[adc_num][i]);
 8001120:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	440b      	add	r3, r1
 8001130:	3302      	adds	r3, #2
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	833b      	strh	r3, [r7, #24]
 8001136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001138:	493c      	ldr	r1, [pc, #240]	; (800122c <calc_process_dma_buffer+0x308>)
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001140:	fb00 f202 	mul.w	r2, r0, r2
 8001144:	4413      	add	r3, r2
 8001146:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114a:	82fb      	strh	r3, [r7, #22]
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	8b3b      	ldrh	r3, [r7, #24]
 8001150:	4293      	cmp	r3, r2
 8001152:	bf38      	it	cc
 8001154:	4613      	movcc	r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800115c:	b298      	uxth	r0, r3
 800115e:	4934      	ldr	r1, [pc, #208]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	3302      	adds	r3, #2
 800116c:	4602      	mov	r2, r0
 800116e:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].min = MIN(adc_raw_meta[raw_buf_second].min, adc_dma_buf[adc_num][i+1]);
 8001170:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001174:	492e      	ldr	r1, [pc, #184]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	82bb      	strh	r3, [r7, #20]
 8001184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001186:	3301      	adds	r3, #1
 8001188:	4928      	ldr	r1, [pc, #160]	; (800122c <calc_process_dma_buffer+0x308>)
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8001190:	fb00 f202 	mul.w	r2, r0, r2
 8001194:	4413      	add	r3, r2
 8001196:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800119a:	827b      	strh	r3, [r7, #18]
 800119c:	8a7a      	ldrh	r2, [r7, #18]
 800119e:	8abb      	ldrh	r3, [r7, #20]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf28      	it	cs
 80011a4:	4613      	movcs	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ac:	b298      	uxth	r0, r3
 80011ae:	4920      	ldr	r1, [pc, #128]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	4602      	mov	r2, r0
 80011bc:	801a      	strh	r2, [r3, #0]
		adc_raw_meta[raw_buf_second].max = MAX(adc_raw_meta[raw_buf_second].max, adc_dma_buf[adc_num][i+1]);
 80011be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <calc_process_dma_buffer+0x30c>)
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3302      	adds	r3, #2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	823b      	strh	r3, [r7, #16]
 80011d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011d6:	3301      	adds	r3, #1
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <calc_process_dma_buffer+0x308>)
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 80011e0:	fb00 f202 	mul.w	r2, r0, r2
 80011e4:	4413      	add	r3, r2
 80011e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011ea:	81fb      	strh	r3, [r7, #14]
 80011ec:	89fa      	ldrh	r2, [r7, #14]
 80011ee:	8a3b      	ldrh	r3, [r7, #16]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf38      	it	cc
 80011f4:	4613      	movcc	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	490c      	ldr	r1, [pc, #48]	; (8001230 <calc_process_dma_buffer+0x30c>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	3302      	adds	r3, #2
 800120c:	4602      	mov	r2, r0
 800120e:	801a      	strh	r2, [r3, #0]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001210:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001212:	3302      	adds	r3, #2
 8001214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001216:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001218:	8bfb      	ldrh	r3, [r7, #30]
 800121a:	429a      	cmp	r2, r3
 800121c:	f67f af2a 	bls.w	8001074 <calc_process_dma_buffer+0x150>
	}
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bcb0      	pop	{r4, r5, r7}
 800122a:	4770      	bx	lr
 800122c:	200003ac 	.word	0x200003ac
 8001230:	200000b4 	.word	0x200000b4
 8001234:	2000382c 	.word	0x2000382c

08001238 <calc_show_buffer>:

void calc_show_buffer(uint8_t buf_num) {
 8001238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800123c:	b08a      	sub	sp, #40	; 0x28
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t address = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint64_t squared_acc = 0;
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t rms_value, adc_raw;
	uint8_t gt_zero_count = 0, lt_zero_count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	74fb      	strb	r3, [r7, #19]
 800125c:	2300      	movs	r3, #0
 800125e:	74bb      	strb	r3, [r7, #18]
	//uint16_t adc_raw_min = adc_raw_buf[buf_num][0];
	//uint16_t adc_raw_max = adc_raw_min;
	if (buf_num > 3) { return; }
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b03      	cmp	r3, #3
 8001264:	f200 809a 	bhi.w	800139c <calc_show_buffer+0x164>
	term_print("Buffer %d\r\n", buf_num);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4619      	mov	r1, r3
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <calc_show_buffer+0x170>)
 800126e:	f001 fc5d 	bl	8002b2c <term_print>
	term_print("%3d: ", 0);
 8001272:	2100      	movs	r1, #0
 8001274:	484d      	ldr	r0, [pc, #308]	; (80013ac <calc_show_buffer+0x174>)
 8001276:	f001 fc59 	bl	8002b2c <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e044      	b.n	800130a <calc_show_buffer+0xd2>
		if (count >= 20) {
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	2b13      	cmp	r3, #19
 8001284:	dd06      	ble.n	8001294 <calc_show_buffer+0x5c>
			count =0;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
			term_print("\r\n%3d: ", address);
 800128a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800128c:	4619      	mov	r1, r3
 800128e:	4848      	ldr	r0, [pc, #288]	; (80013b0 <calc_show_buffer+0x178>)
 8001290:	f001 fc4c 	bl	8002b2c <term_print>
		}
		adc_raw = adc_raw_buf[buf_num][i];
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4947      	ldr	r1, [pc, #284]	; (80013b4 <calc_show_buffer+0x17c>)
 8001298:	f44f 7252 	mov.w	r2, #840	; 0x348
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012a8:	81fb      	strh	r3, [r7, #14]
		term_print("%04u ", adc_raw);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <calc_show_buffer+0x180>)
 80012b0:	f001 fc3c 	bl	8002b2c <term_print>

		squared_acc += adc_raw_buf[buf_num][i] * adc_raw_buf[buf_num][i];
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	493f      	ldr	r1, [pc, #252]	; (80013b4 <calc_show_buffer+0x17c>)
 80012b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012c8:	4618      	mov	r0, r3
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4939      	ldr	r1, [pc, #228]	; (80013b4 <calc_show_buffer+0x17c>)
 80012ce:	f44f 7252 	mov.w	r2, #840	; 0x348
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	fb00 f303 	mul.w	r3, r0, r3
 80012e2:	17da      	asrs	r2, r3, #31
 80012e4:	461c      	mov	r4, r3
 80012e6:	4615      	mov	r5, r2
 80012e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ec:	eb12 0804 	adds.w	r8, r2, r4
 80012f0:	eb43 0905 	adc.w	r9, r3, r5
 80012f4:	e9c7 8906 	strd	r8, r9, [r7, #24]
		count++; address++;
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	3301      	adds	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001300:	3301      	adds	r3, #1
 8001302:	847b      	strh	r3, [r7, #34]	; 0x22
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001310:	d3b6      	bcc.n	8001280 <calc_show_buffer+0x48>
	}
	rms_value = (uint16_t) sqrt((squared_acc / ADC_NUM_DATA));
 8001312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001316:	f44f 7252 	mov.w	r2, #840	; 0x348
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f7ff fc83 	bl	8000c28 <__aeabi_uldivmod>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff f94f 	bl	80005cc <__aeabi_ul2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b10 	vmov	d0, r2, r3
 8001336:	f009 f859 	bl	800a3ec <sqrt>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc51 	bl	8000be8 <__aeabi_d2uiz>
 8001346:	4603      	mov	r3, r0
 8001348:	823b      	strh	r3, [r7, #16]
	term_print("\r\nMin: %dmV Max: %dmV ", calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].min), calc_adc_raw_to_mv_int(adc_raw_meta[buf_num].max) );
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	491b      	ldr	r1, [pc, #108]	; (80013bc <calc_show_buffer+0x184>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f86a 	bl	8001434 <calc_adc_raw_to_mv_int>
 8001360:	4604      	mov	r4, r0
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4915      	ldr	r1, [pc, #84]	; (80013bc <calc_show_buffer+0x184>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3302      	adds	r3, #2
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f85d 	bl	8001434 <calc_adc_raw_to_mv_int>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4621      	mov	r1, r4
 8001380:	480f      	ldr	r0, [pc, #60]	; (80013c0 <calc_show_buffer+0x188>)
 8001382:	f001 fbd3 	bl	8002b2c <term_print>
	term_print("RMS: %dmV [%u]\r\n", calc_adc_raw_to_mv_int(rms_value), rms_value);
 8001386:	8a3b      	ldrh	r3, [r7, #16]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 f853 	bl	8001434 <calc_adc_raw_to_mv_int>
 800138e:	4601      	mov	r1, r0
 8001390:	8a3b      	ldrh	r3, [r7, #16]
 8001392:	461a      	mov	r2, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <calc_show_buffer+0x18c>)
 8001396:	f001 fbc9 	bl	8002b2c <term_print>
 800139a:	e000      	b.n	800139e <calc_show_buffer+0x166>
	if (buf_num > 3) { return; }
 800139c:	bf00      	nop

}
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013a6:	bf00      	nop
 80013a8:	0800a714 	.word	0x0800a714
 80013ac:	0800a720 	.word	0x0800a720
 80013b0:	0800a728 	.word	0x0800a728
 80013b4:	2000382c 	.word	0x2000382c
 80013b8:	0800a730 	.word	0x0800a730
 80013bc:	200000b4 	.word	0x200000b4
 80013c0:	0800a738 	.word	0x0800a738
 80013c4:	0800a750 	.word	0x0800a750

080013c8 <calc_csv_buffer>:

void calc_csv_buffer(uint8_t buf_num) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (buf_num > 3) { return; }
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d821      	bhi.n	800141c <calc_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4619      	mov	r1, r3
 80013dc:	4811      	ldr	r0, [pc, #68]	; (8001424 <calc_csv_buffer+0x5c>)
 80013de:	f001 fba5 	bl	8002b2c <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e011      	b.n	800140c <calc_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <calc_csv_buffer+0x60>)
 80013ec:	f44f 7252 	mov.w	r2, #840	; 0x348
 80013f0:	fb03 f202 	mul.w	r2, r3, r2
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013fc:	461a      	mov	r2, r3
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <calc_csv_buffer+0x64>)
 8001402:	f001 fb93 	bl	8002b2c <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8001412:	d3e9      	bcc.n	80013e8 <calc_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <calc_csv_buffer+0x68>)
 8001416:	f001 fb89 	bl	8002b2c <term_print>
 800141a:	e000      	b.n	800141e <calc_csv_buffer+0x56>
	if (buf_num > 3) { return; }
 800141c:	bf00      	nop
}
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800a714 	.word	0x0800a714
 8001428:	2000382c 	.word	0x2000382c
 800142c:	0800a764 	.word	0x0800a764
 8001430:	0800a76c 	.word	0x0800a76c

08001434 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(uint16_t adc_raw) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f817 	bl	8001474 <calc_adc_raw_to_mv_float>
 8001446:	ee10 3a10 	vmov	r3, s0
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f89c 	bl	8000588 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f009 f8ce 	bl	800a5f8 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb98 	bl	8000b98 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <calc_adc_raw_to_mv_float>:

float calc_adc_raw_to_mv_float(uint16_t adc_raw) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001488:	eddf 6a07 	vldr	s13, [pc, #28]	; 80014a8 <calc_adc_raw_to_mv_float+0x34>
 800148c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001490:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014ac <calc_adc_raw_to_mv_float+0x38>
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	457ff000 	.word	0x457ff000
 80014ac:	454e4000 	.word	0x454e4000

080014b0 <cmd_error>:
extern uint8_t led_cmd;
extern uint8_t tft_display;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <cmd_error+0x18>)
 80014bc:	f001 fb36 	bl	8002b2c <term_print>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800a774 	.word	0x0800a774

080014cc <cmd_t>:


int cmd_t(uint8_t* cmd_str) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b74      	cmp	r3, #116	; 0x74
 80014dc:	d014      	beq.n	8001508 <cmd_t+0x3c>
 80014de:	2b74      	cmp	r3, #116	; 0x74
 80014e0:	dc17      	bgt.n	8001512 <cmd_t+0x46>
 80014e2:	2b54      	cmp	r3, #84	; 0x54
 80014e4:	d010      	beq.n	8001508 <cmd_t+0x3c>
 80014e6:	2b54      	cmp	r3, #84	; 0x54
 80014e8:	dc13      	bgt.n	8001512 <cmd_t+0x46>
 80014ea:	2b30      	cmp	r3, #48	; 0x30
 80014ec:	d002      	beq.n	80014f4 <cmd_t+0x28>
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	d005      	beq.n	80014fe <cmd_t+0x32>
 80014f2:	e00e      	b.n	8001512 <cmd_t+0x46>
	case '0':
		tft_display = 1;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <cmd_t+0x58>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e00b      	b.n	8001516 <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <cmd_t+0x58>)
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
		return 0;
 8001504:	2300      	movs	r3, #0
 8001506:	e006      	b.n	8001516 <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <cmd_t+0x58>)
 800150a:	2209      	movs	r2, #9
 800150c:	701a      	strb	r2, [r3, #0]
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e001      	b.n	8001516 <cmd_t+0x4a>
	}
	return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	2000039a 	.word	0x2000039a

08001528 <cmd_help>:


int cmd_help(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <cmd_help+0x34>)
 800152e:	f001 fafd 	bl	8002b2c <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <cmd_help+0x38>)
 8001534:	f001 fafa 	bl	8002b2c <term_print>
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8001538:	480a      	ldr	r0, [pc, #40]	; (8001564 <cmd_help+0x3c>)
 800153a:	f001 faf7 	bl	8002b2c <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 800153e:	480a      	ldr	r0, [pc, #40]	; (8001568 <cmd_help+0x40>)
 8001540:	f001 faf4 	bl	8002b2c <term_print>
	term_print("R: Restart ADC conversion\r\n");
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <cmd_help+0x44>)
 8001546:	f001 faf1 	bl	8002b2c <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <cmd_help+0x48>)
 800154c:	f001 faee 	bl	8002b2c <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <cmd_help+0x4c>)
 8001552:	f001 faeb 	bl	8002b2c <term_print>
	return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0800a78c 	.word	0x0800a78c
 8001560:	0800a7a0 	.word	0x0800a7a0
 8001564:	0800a7d8 	.word	0x0800a7d8
 8001568:	0800a80c 	.word	0x0800a80c
 800156c:	0800a84c 	.word	0x0800a84c
 8001570:	0800a868 	.word	0x0800a868
 8001574:	0800a89c 	.word	0x0800a89c

08001578 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001584:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b3f      	subs	r3, #63	; 0x3f
 800158c:	2b35      	cmp	r3, #53	; 0x35
 800158e:	f200 80a5 	bhi.w	80016dc <cmd_process+0x164>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <cmd_process+0x20>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080016d7 	.word	0x080016d7
 800159c:	080016dd 	.word	0x080016dd
 80015a0:	080016dd 	.word	0x080016dd
 80015a4:	080016dd 	.word	0x080016dd
 80015a8:	08001671 	.word	0x08001671
 80015ac:	08001685 	.word	0x08001685
 80015b0:	080016dd 	.word	0x080016dd
 80015b4:	080016dd 	.word	0x080016dd
 80015b8:	080016dd 	.word	0x080016dd
 80015bc:	080016d7 	.word	0x080016d7
 80015c0:	080016dd 	.word	0x080016dd
 80015c4:	080016dd 	.word	0x080016dd
 80015c8:	080016dd 	.word	0x080016dd
 80015cc:	08001699 	.word	0x08001699
 80015d0:	080016dd 	.word	0x080016dd
 80015d4:	080016dd 	.word	0x080016dd
 80015d8:	080016dd 	.word	0x080016dd
 80015dc:	080016dd 	.word	0x080016dd
 80015e0:	080016dd 	.word	0x080016dd
 80015e4:	080016ad 	.word	0x080016ad
 80015e8:	080016b9 	.word	0x080016b9
 80015ec:	080016cd 	.word	0x080016cd
 80015f0:	080016dd 	.word	0x080016dd
 80015f4:	080016dd 	.word	0x080016dd
 80015f8:	080016dd 	.word	0x080016dd
 80015fc:	080016dd 	.word	0x080016dd
 8001600:	080016dd 	.word	0x080016dd
 8001604:	080016dd 	.word	0x080016dd
 8001608:	080016dd 	.word	0x080016dd
 800160c:	080016dd 	.word	0x080016dd
 8001610:	080016dd 	.word	0x080016dd
 8001614:	080016dd 	.word	0x080016dd
 8001618:	080016dd 	.word	0x080016dd
 800161c:	080016dd 	.word	0x080016dd
 8001620:	080016dd 	.word	0x080016dd
 8001624:	080016dd 	.word	0x080016dd
 8001628:	08001671 	.word	0x08001671
 800162c:	08001685 	.word	0x08001685
 8001630:	080016dd 	.word	0x080016dd
 8001634:	080016dd 	.word	0x080016dd
 8001638:	080016dd 	.word	0x080016dd
 800163c:	080016d7 	.word	0x080016d7
 8001640:	080016dd 	.word	0x080016dd
 8001644:	080016dd 	.word	0x080016dd
 8001648:	080016dd 	.word	0x080016dd
 800164c:	08001699 	.word	0x08001699
 8001650:	080016dd 	.word	0x080016dd
 8001654:	080016dd 	.word	0x080016dd
 8001658:	080016dd 	.word	0x080016dd
 800165c:	080016dd 	.word	0x080016dd
 8001660:	080016dd 	.word	0x080016dd
 8001664:	080016ad 	.word	0x080016ad
 8001668:	080016b9 	.word	0x080016b9
 800166c:	080016cd 	.word	0x080016cd
	case 'C':
	case 'c':
		csv_buffer = cmd_str[1] - 0x30;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b30      	subs	r3, #48	; 0x30
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <cmd_process+0x170>)
 800167c:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
		break;
 8001682:	e02b      	b.n	80016dc <cmd_process+0x164>
	case 'D':
	case 'd':
		cmd_display_buffer = cmd_str[1] - 0x30;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3b30      	subs	r3, #48	; 0x30
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <cmd_process+0x174>)
 8001690:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
		break;
 8001696:	e021      	b.n	80016dc <cmd_process+0x164>
	case 'L':
	case 'l':
		led_cmd = cmd_str[1] - 0x30 + 1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3b2f      	subs	r3, #47	; 0x2f
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <cmd_process+0x178>)
 80016a4:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
		break;
 80016aa:	e017      	b.n	80016dc <cmd_process+0x164>
	case 'R':
	case 'r':
		adc_restart = 1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <cmd_process+0x17c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
		break;
 80016b6:	e011      	b.n	80016dc <cmd_process+0x164>
	case 'S':
	case 's':
		show_buffer = cmd_str[1] - 0x30;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <cmd_process+0x180>)
 80016c4:	701a      	strb	r2, [r3, #0]
		retval = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
		break;
 80016ca:	e007      	b.n	80016dc <cmd_process+0x164>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fefd 	bl	80014cc <cmd_t>
 80016d2:	60f8      	str	r0, [r7, #12]
		break;
 80016d4:	e002      	b.n	80016dc <cmd_process+0x164>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80016d6:	f7ff ff27 	bl	8001528 <cmd_help>
 80016da:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000398 	.word	0x20000398
 80016ec:	20000397 	.word	0x20000397
 80016f0:	20000399 	.word	0x20000399
 80016f4:	20000395 	.word	0x20000395
 80016f8:	20000396 	.word	0x20000396

080016fc <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fd83 	bl	8000210 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <CMD_Handler+0x3c>)
 8001710:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <CMD_Handler+0x3c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fec8 	bl	80014b0 <cmd_error>
		return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001724:	e003      	b.n	800172e <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff26 	bl	8001578 <cmd_process>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200000e4 	.word	0x200000e4

0800173c <display_show_curve>:
#define ADC_MAX 4095

extern uint16_t adc_raw_buf[][ADC_NUM_DATA];		// buffer for 4 channels of raw ADC data
extern struct rawBufMeta adc_raw_meta[];

void display_show_curve(uint8_t buf_num) {
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b08f      	sub	sp, #60	; 0x3c
 8001740:	af02      	add	r7, sp, #8
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	if ( (buf_num >= ADC_NUM*ADC_NUM_CHANNELS) || (buf_num < 0) ) return;	// buffer range check
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b03      	cmp	r3, #3
 800174a:	f200 80d3 	bhi.w	80018f4 <display_show_curve+0x1b8>
	Displ_BackLight('1');
 800174e:	2031      	movs	r0, #49	; 0x31
 8001750:	f002 fc3c 	bl	8003fcc <Displ_BackLight>
	Displ_CLS(BLACK);
 8001754:	2000      	movs	r0, #0
 8001756:	f001 fddb 	bl	8003310 <Displ_CLS>
	float fScale = (float)DISPLAY_Y / (float)adc_raw_meta[buf_num].max;
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	4967      	ldr	r1, [pc, #412]	; (80018fc <display_show_curve+0x1c0>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3302      	adds	r3, #2
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001774:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001900 <display_show_curve+0x1c4>
 8001778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177c:	edc7 7a06 	vstr	s15, [r7, #24]
	// set multiplier and divider to ensure the function can handle a wide range of values
	int scale_mul = 1, scale_div = 1;
 8001780:	2301      	movs	r3, #1
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
	if (fScale < 1) {
 8001788:	edd7 7a06 	vldr	s15, [r7, #24]
 800178c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	d51f      	bpl.n	80017da <display_show_curve+0x9e>
		scale_div = trunc(1/fScale)+1;
 800179a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a6:	ee16 0a90 	vmov	r0, s13
 80017aa:	f7fe feed 	bl	8000588 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	ec43 2b10 	vmov	d0, r2, r3
 80017b6:	f008 ff67 	bl	800a688 <trunc>
 80017ba:	ec51 0b10 	vmov	r0, r1, d0
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b50      	ldr	r3, [pc, #320]	; (8001904 <display_show_curve+0x1c8>)
 80017c4:	f7fe fd82 	bl	80002cc <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f9e2 	bl	8000b98 <__aeabi_d2iz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	e010      	b.n	80017fc <display_show_curve+0xc0>
	} else {
		scale_mul = trunc(fScale);
 80017da:	69b8      	ldr	r0, [r7, #24]
 80017dc:	f7fe fed4 	bl	8000588 <__aeabi_f2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	ec43 2b10 	vmov	d0, r2, r3
 80017e8:	f008 ff4e 	bl	800a688 <trunc>
 80017ec:	ec53 2b10 	vmov	r2, r3, d0
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f9d0 	bl	8000b98 <__aeabi_d2iz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	int y_offset = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
	int value = 0, pos_y;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
	int adc_index = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
	int max_x = ADC_NUM_DATA / 2;
 8001808:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800180c:	60fb      	str	r3, [r7, #12]
	int pos_y_prev = (((adc_raw_buf[buf_num][0] + adc_raw_buf[buf_num][1]) / 2) * scale_mul)/scale_div + y_offset ;
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <display_show_curve+0x1cc>)
 8001812:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a39      	ldr	r2, [pc, #228]	; (8001908 <display_show_curve+0x1cc>)
 8001824:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3302      	adds	r3, #2
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	4403      	add	r3, r0
 8001834:	0fda      	lsrs	r2, r3, #31
 8001836:	4413      	add	r3, r2
 8001838:	105b      	asrs	r3, r3, #1
 800183a:	461a      	mov	r2, r3
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	fb03 f202 	mul.w	r2, r3, r2
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	fb92 f3f3 	sdiv	r3, r2, r3
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4413      	add	r3, r2
 800184c:	623b      	str	r3, [r7, #32]
	for (int pos_x=1; pos_x < max_x; pos_x++) {
 800184e:	2301      	movs	r3, #1
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e04a      	b.n	80018ea <display_show_curve+0x1ae>
		value = (adc_raw_buf[buf_num][adc_index] + adc_raw_buf[buf_num][adc_index-1] + adc_raw_buf[buf_num][adc_index+1]) / 3;
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	492c      	ldr	r1, [pc, #176]	; (8001908 <display_show_curve+0x1cc>)
 8001858:	f44f 7252 	mov.w	r2, #840	; 0x348
 800185c:	fb03 f202 	mul.w	r2, r3, r2
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	4413      	add	r3, r2
 8001864:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001868:	461c      	mov	r4, r3
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3b01      	subs	r3, #1
 8001870:	4925      	ldr	r1, [pc, #148]	; (8001908 <display_show_curve+0x1cc>)
 8001872:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001876:	fb00 f202 	mul.w	r2, r0, r2
 800187a:	4413      	add	r3, r2
 800187c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001880:	4423      	add	r3, r4
 8001882:	79f9      	ldrb	r1, [r7, #7]
 8001884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001886:	3201      	adds	r2, #1
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <display_show_curve+0x1cc>)
 800188a:	f44f 7452 	mov.w	r4, #840	; 0x348
 800188e:	fb04 f101 	mul.w	r1, r4, r1
 8001892:	440a      	add	r2, r1
 8001894:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001898:	4413      	add	r3, r2
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <display_show_curve+0x1d0>)
 800189c:	fb82 1203 	smull	r1, r2, r2, r3
 80018a0:	17db      	asrs	r3, r3, #31
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	613b      	str	r3, [r7, #16]
		pos_y = (value * scale_mul)/scale_div + y_offset;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018aa:	fb03 f202 	mul.w	r2, r3, r2
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4413      	add	r3, r2
 80018b8:	60bb      	str	r3, [r7, #8]
		adc_index+=2;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3302      	adds	r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
		Displ_Line(pos_x - 1, pos_y_prev, pos_x, pos_y, GREEN);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b218      	sxth	r0, r3
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	b219      	sxth	r1, r3
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 80018da:	9400      	str	r4, [sp, #0]
 80018dc:	f001 ff01 	bl	80036e2 <Displ_Line>
		pos_y_prev = pos_y;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	623b      	str	r3, [r7, #32]
	for (int pos_x=1; pos_x < max_x; pos_x++) {
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbb0      	blt.n	8001854 <display_show_curve+0x118>
 80018f2:	e000      	b.n	80018f6 <display_show_curve+0x1ba>
	if ( (buf_num >= ADC_NUM*ADC_NUM_CHANNELS) || (buf_num < 0) ) return;	// buffer range check
 80018f4:	bf00      	nop
	}



}
 80018f6:	3734      	adds	r7, #52	; 0x34
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	200000b4 	.word	0x200000b4
 8001900:	43a00000 	.word	0x43a00000
 8001904:	3ff00000 	.word	0x3ff00000
 8001908:	2000382c 	.word	0x2000382c
 800190c:	55555556 	.word	0x55555556

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001916:	f003 f879 	bl	8004a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191a:	f000 f9c3 	bl	8001ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191e:	f000 fbdd 	bl	80020dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001922:	f000 fb9d 	bl	8002060 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001926:	f000 fb71 	bl	800200c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800192a:	f000 fb23 	bl	8001f74 <MX_TIM2_Init>
  MX_ADC1_Init();
 800192e:	f000 fa2b 	bl	8001d88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001932:	f000 fa89 	bl	8001e48 <MX_ADC2_Init>
  MX_SPI2_Init();
 8001936:	f000 fae7 	bl	8001f08 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  // TFT Display
  Displ_BackLight('1');
 800193a:	2031      	movs	r0, #49	; 0x31
 800193c:	f002 fb46 	bl	8003fcc <Displ_BackLight>
  Displ_Init(Displ_Orientat_90);		// initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8001940:	2001      	movs	r0, #1
 8001942:	f001 fa77 	bl	8002e34 <Displ_Init>
  //term_print("Displ_Init - done\r\n");
  Displ_CLS(BLACK);			// after initialization (above) and before turning on backlight (below), you can draw the initial display appearance.
 8001946:	2000      	movs	r0, #0
 8001948:	f001 fce2 	bl	8003310 <Displ_CLS>
  //term_print("Displ_CLS - done\r\n");

  Displ_Line(0, 160, 479, 160, BLUE);
 800194c:	231f      	movs	r3, #31
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	23a0      	movs	r3, #160	; 0xa0
 8001952:	f240 12df 	movw	r2, #479	; 0x1df
 8001956:	21a0      	movs	r1, #160	; 0xa0
 8001958:	2000      	movs	r0, #0
 800195a:	f001 fec2 	bl	80036e2 <Displ_Line>
  Displ_Line(0, 140, 240, 140, RED);
 800195e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	238c      	movs	r3, #140	; 0x8c
 8001966:	22f0      	movs	r2, #240	; 0xf0
 8001968:	218c      	movs	r1, #140	; 0x8c
 800196a:	2000      	movs	r0, #0
 800196c:	f001 feb9 	bl	80036e2 <Displ_Line>


  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8001970:	2201      	movs	r2, #1
 8001972:	4961      	ldr	r1, [pc, #388]	; (8001af8 <main+0x1e8>)
 8001974:	4861      	ldr	r0, [pc, #388]	; (8001afc <main+0x1ec>)
 8001976:	f006 fc78 	bl	800826a <HAL_UART_Receive_IT>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <main+0x74>
    Error_Handler();
 8001980:	f000 fd4c 	bl	800241c <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001984:	485e      	ldr	r0, [pc, #376]	; (8001b00 <main+0x1f0>)
 8001986:	f005 ff55 	bl	8007834 <HAL_TIM_Base_Start_IT>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <main+0x84>
     Error_Handler();
 8001990:	f000 fd44 	bl	800241c <Error_Handler>
  }

  // Start ADC1 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001994:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001998:	495a      	ldr	r1, [pc, #360]	; (8001b04 <main+0x1f4>)
 800199a:	485b      	ldr	r0, [pc, #364]	; (8001b08 <main+0x1f8>)
 800199c:	f003 f910 	bl	8004bc0 <HAL_ADC_Start_DMA>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <main+0xa0>
	  term_print("Error starting ADC1 DMA\r\n");
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <main+0x1fc>)
 80019a8:	f001 f8c0 	bl	8002b2c <term_print>
  	  Error_Handler();
 80019ac:	f000 fd36 	bl	800241c <Error_Handler>
  }
  //Start ADC2 - keeps running via TIM2
  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80019b0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80019b4:	4956      	ldr	r1, [pc, #344]	; (8001b10 <main+0x200>)
 80019b6:	4857      	ldr	r0, [pc, #348]	; (8001b14 <main+0x204>)
 80019b8:	f003 f902 	bl	8004bc0 <HAL_ADC_Start_DMA>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <main+0xbc>
	  term_print("Error starting ADC2 DMA\r\n");
 80019c2:	4855      	ldr	r0, [pc, #340]	; (8001b18 <main+0x208>)
 80019c4:	f001 f8b2 	bl	8002b2c <term_print>
   	  Error_Handler();
 80019c8:	f000 fd28 	bl	800241c <Error_Handler>
  }

  // Startup success message
   if (HAL_UART_Transmit(&huart2, startup_msg, sizeof(startup_msg), 1000) != HAL_OK) {
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	2212      	movs	r2, #18
 80019d2:	4952      	ldr	r1, [pc, #328]	; (8001b1c <main+0x20c>)
 80019d4:	4849      	ldr	r0, [pc, #292]	; (8001afc <main+0x1ec>)
 80019d6:	f006 fbb6 	bl	8008146 <HAL_UART_Transmit>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <main+0xd4>
    Error_Handler();
 80019e0:	f000 fd1c 	bl	800241c <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Handle UART communication
	  if (rx_cmd_ready) {
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <main+0x210>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <main+0xee>
		  CMD_Handler((uint8_t*)rx_buff);
 80019ec:	484d      	ldr	r0, [pc, #308]	; (8001b24 <main+0x214>)
 80019ee:	f7ff fe85 	bl	80016fc <CMD_Handler>
		  rx_count = 0;
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <main+0x218>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 80019f8:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <main+0x210>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	  }

	  if (adc_restart) {
 80019fe:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <main+0x21c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01a      	beq.n	8001a3c <main+0x12c>
		  adc_restart = 0;
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <main+0x21c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start_IT (&hadc1);
		  if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001a0c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001a10:	493c      	ldr	r1, [pc, #240]	; (8001b04 <main+0x1f4>)
 8001a12:	483d      	ldr	r0, [pc, #244]	; (8001b08 <main+0x1f8>)
 8001a14:	f003 f8d4 	bl	8004bc0 <HAL_ADC_Start_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <main+0x114>
			term_print("Error re-starting ADC1 DMA\r\n");
 8001a1e:	4844      	ldr	r0, [pc, #272]	; (8001b30 <main+0x220>)
 8001a20:	f001 f884 	bl	8002b2c <term_print>
		  }
		  if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8001a24:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001a28:	4939      	ldr	r1, [pc, #228]	; (8001b10 <main+0x200>)
 8001a2a:	483a      	ldr	r0, [pc, #232]	; (8001b14 <main+0x204>)
 8001a2c:	f003 f8c8 	bl	8004bc0 <HAL_ADC_Start_DMA>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <main+0x12c>
			  term_print("Error re-starting ADC2 DMA\r\n");
 8001a36:	483f      	ldr	r0, [pc, #252]	; (8001b34 <main+0x224>)
 8001a38:	f001 f878 	bl	8002b2c <term_print>
		  }
	  }

	  if (show_buffer) {
 8001a3c:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <main+0x228>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <main+0x148>
		  calc_show_buffer(show_buffer-1);
 8001a44:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <main+0x228>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fbf3 	bl	8001238 <calc_show_buffer>
		  show_buffer = 0;
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <main+0x228>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
	  }

	  if (cmd_display_buffer) {
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <main+0x22c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <main+0x164>
		  display_show_curve(cmd_display_buffer-1);
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <main+0x22c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe67 	bl	800173c <display_show_curve>
	  	  cmd_display_buffer = 0;
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <main+0x22c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	  }

	  if (csv_buffer) {
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <main+0x230>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <main+0x180>
	  	  calc_csv_buffer(csv_buffer-1);
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <main+0x230>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc9f 	bl	80013c8 <calc_csv_buffer>
	  	  csv_buffer = 0;
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <main+0x230>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
	  }

	  if (tft_display) {
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <main+0x234>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <main+0x1ca>
		  if (tft_display == 9) {
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <main+0x234>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d10e      	bne.n	8001abe <main+0x1ae>
			  term_print("Running TFT performance test ...\r\n");
 8001aa0:	4829      	ldr	r0, [pc, #164]	; (8001b48 <main+0x238>)
 8001aa2:	f001 f843 	bl	8002b2c <term_print>
			  Displ_BackLight('1');
 8001aa6:	2031      	movs	r0, #49	; 0x31
 8001aa8:	f002 fa90 	bl	8003fcc <Displ_BackLight>
			  //Displ_PerfTest();
			  Displ_TestAll();
 8001aac:	f002 ff58 	bl	8004960 <Displ_TestAll>
			  Displ_BackLight('0');
 8001ab0:	2030      	movs	r0, #48	; 0x30
 8001ab2:	f002 fa8b 	bl	8003fcc <Displ_BackLight>
			  term_print("....completed\r\n");
 8001ab6:	4825      	ldr	r0, [pc, #148]	; (8001b4c <main+0x23c>)
 8001ab8:	f001 f838 	bl	8002b2c <term_print>
 8001abc:	e00a      	b.n	8001ad4 <main+0x1c4>
		  } else {
			  if (tft_display == 1) {
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <main+0x234>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d103      	bne.n	8001ace <main+0x1be>
				  Displ_BackLight('0');
 8001ac6:	2030      	movs	r0, #48	; 0x30
 8001ac8:	f002 fa80 	bl	8003fcc <Displ_BackLight>
 8001acc:	e002      	b.n	8001ad4 <main+0x1c4>
			  } else {
				  Displ_BackLight('1');
 8001ace:	2031      	movs	r0, #49	; 0x31
 8001ad0:	f002 fa7c 	bl	8003fcc <Displ_BackLight>
			  }
		  }
		  tft_display = 0;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <main+0x234>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
	  }

	  if (led_cmd) {
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <main+0x240>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d042      	beq.n	8001b68 <main+0x258>
		  if (led_cmd > 1) {
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <main+0x240>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d936      	bls.n	8001b58 <main+0x248>
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	4819      	ldr	r0, [pc, #100]	; (8001b54 <main+0x244>)
 8001af0:	f004 fae6 	bl	80060c0 <HAL_GPIO_WritePin>
 8001af4:	e035      	b.n	8001b62 <main+0x252>
 8001af6:	bf00      	nop
 8001af8:	2000037e 	.word	0x2000037e
 8001afc:	20000338 	.word	0x20000338
 8001b00:	200002f0 	.word	0x200002f0
 8001b04:	200003ac 	.word	0x200003ac
 8001b08:	200000e8 	.word	0x200000e8
 8001b0c:	0800a8b8 	.word	0x0800a8b8
 8001b10:	20001dec 	.word	0x20001dec
 8001b14:	20000130 	.word	0x20000130
 8001b18:	0800a8d4 	.word	0x0800a8d4
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000394 	.word	0x20000394
 8001b24:	20000380 	.word	0x20000380
 8001b28:	2000037c 	.word	0x2000037c
 8001b2c:	20000395 	.word	0x20000395
 8001b30:	0800a8f0 	.word	0x0800a8f0
 8001b34:	0800a910 	.word	0x0800a910
 8001b38:	20000396 	.word	0x20000396
 8001b3c:	20000397 	.word	0x20000397
 8001b40:	20000398 	.word	0x20000398
 8001b44:	2000039a 	.word	0x2000039a
 8001b48:	0800a930 	.word	0x0800a930
 8001b4c:	0800a954 	.word	0x0800a954
 8001b50:	20000399 	.word	0x20000399
 8001b54:	40020000 	.word	0x40020000
		  } else {
			  HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4846      	ldr	r0, [pc, #280]	; (8001c78 <main+0x368>)
 8001b5e:	f004 faaf 	bl	80060c0 <HAL_GPIO_WritePin>
		  }
		  led_cmd = 0;
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <main+0x36c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]

	  //HAL_Delay(800);

	  // Check if we have missed processing DMA data sets
	  // This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
	  if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8001b68:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <main+0x370>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	dc0b      	bgt.n	8001b88 <main+0x278>
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <main+0x374>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	dc07      	bgt.n	8001b88 <main+0x278>
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <main+0x378>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	dc03      	bgt.n	8001b88 <main+0x278>
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <main+0x37c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	dd28      	ble.n	8001bda <main+0x2ca>
		  term_print("Processing missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
 8001b88:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <main+0x370>)
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <main+0x374>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <main+0x378>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <main+0x37c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	483c      	ldr	r0, [pc, #240]	; (8001c90 <main+0x380>)
 8001b9e:	f000 ffc5 	bl	8002b2c <term_print>
		  if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <main+0x370>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	dd02      	ble.n	8001bb0 <main+0x2a0>
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <main+0x370>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
		  if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8001bb0:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <main+0x374>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	dd02      	ble.n	8001bbe <main+0x2ae>
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <main+0x374>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <main+0x378>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	dd02      	ble.n	8001bcc <main+0x2bc>
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <main+0x378>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
		  if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <main+0x37c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	dd02      	ble.n	8001bda <main+0x2ca>
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <main+0x37c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
	  }

	  // Process DMA buffers
	  if (adc1_dma_l_count > 0) {
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <main+0x370>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	dd0e      	ble.n	8001c00 <main+0x2f0>
		  if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8001be2:	2100      	movs	r1, #0
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff f99d 	bl	8000f24 <calc_process_dma_buffer>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <main+0x2e6>
			  term_print("Processing ADC1 DMA 1st half failed\r\n");
 8001bf0:	4828      	ldr	r0, [pc, #160]	; (8001c94 <main+0x384>)
 8001bf2:	f000 ff9b 	bl	8002b2c <term_print>
		  }
		  adc1_dma_l_count--;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <main+0x370>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <main+0x370>)
 8001bfe:	6013      	str	r3, [r2, #0]
	  }
	  if (adc1_dma_h_count > 0) {
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <main+0x374>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dd0e      	ble.n	8001c26 <main+0x316>
	  	  if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff f98a 	bl	8000f24 <calc_process_dma_buffer>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <main+0x30c>
	  		term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8001c16:	4820      	ldr	r0, [pc, #128]	; (8001c98 <main+0x388>)
 8001c18:	f000 ff88 	bl	8002b2c <term_print>
	  	  }
	  	  adc1_dma_h_count--;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <main+0x374>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <main+0x374>)
 8001c24:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_l_count > 0) {
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <main+0x378>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	dd0e      	ble.n	8001c4c <main+0x33c>
	  	  if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff f977 	bl	8000f24 <calc_process_dma_buffer>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <main+0x332>
	  		term_print("Processing ADC2 DMA 1st half failed\r\n");
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <main+0x38c>)
 8001c3e:	f000 ff75 	bl	8002b2c <term_print>
	  	  }
	  	  adc2_dma_l_count--;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <main+0x378>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <main+0x378>)
 8001c4a:	6013      	str	r3, [r2, #0]
	  }
	  if (adc2_dma_h_count > 0) {
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <main+0x37c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f77f aec7 	ble.w	80019e4 <main+0xd4>
	  	  if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8001c56:	2101      	movs	r1, #1
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff f963 	bl	8000f24 <calc_process_dma_buffer>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <main+0x35a>
	  		term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <main+0x390>)
 8001c66:	f000 ff61 	bl	8002b2c <term_print>
	  	  }
	   	  adc2_dma_h_count--;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <main+0x37c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <main+0x37c>)
 8001c72:	6013      	str	r3, [r2, #0]
	  if (rx_cmd_ready) {
 8001c74:	e6b6      	b.n	80019e4 <main+0xd4>
 8001c76:	bf00      	nop
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	20000399 	.word	0x20000399
 8001c80:	2000039c 	.word	0x2000039c
 8001c84:	200003a0 	.word	0x200003a0
 8001c88:	200003a4 	.word	0x200003a4
 8001c8c:	200003a8 	.word	0x200003a8
 8001c90:	0800a964 	.word	0x0800a964
 8001c94:	0800a990 	.word	0x0800a990
 8001c98:	0800a9b8 	.word	0x0800a9b8
 8001c9c:	0800a9e0 	.word	0x0800a9e0
 8001ca0:	0800aa08 	.word	0x0800aa08

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	2234      	movs	r2, #52	; 0x34
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f007 fb80 	bl	80093b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <SystemClock_Config+0xe0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <SystemClock_Config+0xe0>)
 8001cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <SystemClock_Config+0xe0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d04:	2301      	movs	r3, #1
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d14:	2308      	movs	r3, #8
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d18:	23b4      	movs	r3, #180	; 0xb4
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fdb9 	bl	80068a4 <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d38:	f000 fb70 	bl	800241c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d3c:	f004 fa18 	bl	8006170 <HAL_PWREx_EnableOverDrive>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d46:	f000 fb69 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	2105      	movs	r1, #5
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fa51 	bl	8006210 <HAL_RCC_ClockConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d74:	f000 fb52 	bl	800241c <Error_Handler>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3750      	adds	r7, #80	; 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d9a:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001d9c:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <MX_ADC1_Init+0xbc>)
 8001d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001da2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dcc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dec:	4814      	ldr	r0, [pc, #80]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001dee:	f002 fea3 	bl	8004b38 <HAL_ADC_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001df8:	f000 fb10 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001e04:	2301      	movs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001e0e:	f002 ffe7 	bl	8004de0 <HAL_ADC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001e18:	f000 fb00 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_ADC1_Init+0xb8>)
 8001e2a:	f002 ffd9 	bl	8004de0 <HAL_ADC_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001e34:	f000 faf2 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200000e8 	.word	0x200000e8
 8001e44:	40012000 	.word	0x40012000

08001e48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <MX_ADC2_Init+0xbc>)
 8001e5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e8c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001eac:	4814      	ldr	r0, [pc, #80]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001eae:	f002 fe43 	bl	8004b38 <HAL_ADC_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8001eb8:	f000 fab0 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001ece:	f002 ff87 	bl	8004de0 <HAL_ADC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8001ed8:	f000 faa0 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001edc:	230b      	movs	r3, #11
 8001ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_ADC2_Init+0xb8>)
 8001eea:	f002 ff79 	bl	8004de0 <HAL_ADC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001ef4:	f000 fa92 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000130 	.word	0x20000130
 8001f04:	40012100 	.word	0x40012100

08001f08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <MX_SPI2_Init+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f54:	220a      	movs	r2, #10
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_SPI2_Init+0x64>)
 8001f5a:	f004 ff41 	bl	8006de0 <HAL_SPI_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f64:	f000 fa5a 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000238 	.word	0x20000238
 8001f70:	40003800 	.word	0x40003800

08001f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_TIM2_Init+0x94>)
 8001f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <MX_TIM2_Init+0x94>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fa6:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8001faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fba:	f005 fbeb 	bl	8007794 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fc4:	f000 fa2a 	bl	800241c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <MX_TIM2_Init+0x94>)
 8001fd6:	f005 fda5 	bl	8007b24 <HAL_TIM_ConfigClockSource>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fe0:	f000 fa1c 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_TIM2_Init+0x94>)
 8001ff2:	f005 ffcb 	bl	8007f8c <HAL_TIMEx_MasterConfigSynchronization>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ffc:	f000 fa0e 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200002f0 	.word	0x200002f0

0800200c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_USART2_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART2_UART_Init+0x4c>)
 8002044:	f006 f832 	bl	80080ac <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f000 f9e5 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000338 	.word	0x20000338
 800205c:	40004400 	.word	0x40004400

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <MX_DMA_Init+0x78>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <MX_DMA_Init+0x78>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_DMA_Init+0x78>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_DMA_Init+0x78>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <MX_DMA_Init+0x78>)
 800208c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_DMA_Init+0x78>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	200f      	movs	r0, #15
 80020a4:	f003 fa27 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020a8:	200f      	movs	r0, #15
 80020aa:	f003 fa40 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	2038      	movs	r0, #56	; 0x38
 80020b4:	f003 fa1f 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020b8:	2038      	movs	r0, #56	; 0x38
 80020ba:	f003 fa38 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	203a      	movs	r0, #58	; 0x3a
 80020c4:	f003 fa17 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80020c8:	203a      	movs	r0, #58	; 0x3a
 80020ca:	f003 fa30 	bl	800552e <HAL_NVIC_EnableIRQ>

}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <MX_GPIO_Init+0x178>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <MX_GPIO_Init+0x178>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <MX_GPIO_Init+0x178>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b50      	ldr	r3, [pc, #320]	; (8002254 <MX_GPIO_Init+0x178>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <MX_GPIO_Init+0x178>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <MX_GPIO_Init+0x178>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <MX_GPIO_Init+0x178>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a48      	ldr	r2, [pc, #288]	; (8002254 <MX_GPIO_Init+0x178>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <MX_GPIO_Init+0x178>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b42      	ldr	r3, [pc, #264]	; (8002254 <MX_GPIO_Init+0x178>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a41      	ldr	r2, [pc, #260]	; (8002254 <MX_GPIO_Init+0x178>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <MX_GPIO_Init+0x178>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
 8002168:	483b      	ldr	r0, [pc, #236]	; (8002258 <MX_GPIO_Init+0x17c>)
 800216a:	f003 ffa9 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	483a      	ldr	r0, [pc, #232]	; (800225c <MX_GPIO_Init+0x180>)
 8002174:	f003 ffa4 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8002178:	2201      	movs	r2, #1
 800217a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217e:	4836      	ldr	r0, [pc, #216]	; (8002258 <MX_GPIO_Init+0x17c>)
 8002180:	f003 ff9e 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	4835      	ldr	r0, [pc, #212]	; (8002260 <MX_GPIO_Init+0x184>)
 800218a:	f003 ff99 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800218e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	482d      	ldr	r0, [pc, #180]	; (800225c <MX_GPIO_Init+0x180>)
 80021a6:	f003 fddf 	bl	8005d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin;
 80021aa:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4825      	ldr	r0, [pc, #148]	; (8002258 <MX_GPIO_Init+0x17c>)
 80021c4:	f003 fdd0 	bl	8005d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	481e      	ldr	r0, [pc, #120]	; (8002258 <MX_GPIO_Init+0x17c>)
 80021e0:	f003 fdc2 	bl	8005d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4818      	ldr	r0, [pc, #96]	; (800225c <MX_GPIO_Init+0x180>)
 80021fc:	f003 fdb4 	bl	8005d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	480f      	ldr	r0, [pc, #60]	; (8002258 <MX_GPIO_Init+0x17c>)
 800221a:	f003 fda5 	bl	8005d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	480a      	ldr	r0, [pc, #40]	; (8002260 <MX_GPIO_Init+0x184>)
 8002236:	f003 fd97 	bl	8005d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2028      	movs	r0, #40	; 0x28
 8002240:	f003 f959 	bl	80054f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002244:	2028      	movs	r0, #40	; 0x28
 8002246:	f003 f972 	bl	800552e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	; 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020800 	.word	0x40020800
 8002260:	40020400 	.word	0x40020400

08002264 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <HAL_ADC_ConvCpltCallback+0x34>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_ADC_ConvCpltCallback+0x38>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_ADC_ConvCpltCallback+0x38>)
 800227c:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 800227e:	e004      	b.n	800228a <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002288:	6013      	str	r3, [r2, #0]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200000e8 	.word	0x200000e8
 800229c:	200003a0 	.word	0x200003a0
 80022a0:	200003a8 	.word	0x200003a8

080022a4 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80022bc:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80022be:	e004      	b.n	80022ca <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200000e8 	.word	0x200000e8
 80022dc:	2000039c 	.word	0x2000039c
 80022e0:	200003a4 	.word	0x200003a4

080022e4 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a22      	ldr	r2, [pc, #136]	; (8002378 <HAL_ADC_ErrorCallback+0x94>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e001      	b.n	80022fe <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	2b04      	cmp	r3, #4
 8002304:	d82c      	bhi.n	8002360 <HAL_ADC_ErrorCallback+0x7c>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_ADC_ErrorCallback+0x28>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	08002321 	.word	0x08002321
 8002310:	08002331 	.word	0x08002331
 8002314:	08002341 	.word	0x08002341
 8002318:	08002361 	.word	0x08002361
 800231c:	08002351 	.word	0x08002351
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	461a      	mov	r2, r3
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	4814      	ldr	r0, [pc, #80]	; (800237c <HAL_ADC_ErrorCallback+0x98>)
 800232a:	f000 fbff 	bl	8002b2c <term_print>
		break;
 800232e:	e01e      	b.n	800236e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	461a      	mov	r2, r3
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4811      	ldr	r0, [pc, #68]	; (8002380 <HAL_ADC_ErrorCallback+0x9c>)
 800233a:	f000 fbf7 	bl	8002b2c <term_print>
		break;
 800233e:	e016      	b.n	800236e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	461a      	mov	r2, r3
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	480e      	ldr	r0, [pc, #56]	; (8002384 <HAL_ADC_ErrorCallback+0xa0>)
 800234a:	f000 fbef 	bl	8002b2c <term_print>
		break;
 800234e:	e00e      	b.n	800236e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	461a      	mov	r2, r3
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	480b      	ldr	r0, [pc, #44]	; (8002388 <HAL_ADC_ErrorCallback+0xa4>)
 800235a:	f000 fbe7 	bl	8002b2c <term_print>
		break;
 800235e:	e006      	b.n	800236e <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	4619      	mov	r1, r3
 8002366:	4809      	ldr	r0, [pc, #36]	; (800238c <HAL_ADC_ErrorCallback+0xa8>)
 8002368:	f000 fbe0 	bl	8002b2c <term_print>
	}
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200000e8 	.word	0x200000e8
 800237c:	0800aa30 	.word	0x0800aa30
 8002380:	0800aa4c 	.word	0x0800aa4c
 8002384:	0800aa70 	.word	0x0800aa70
 8002388:	0800aa90 	.word	0x0800aa90
 800238c:	0800aaac 	.word	0x0800aaac

08002390 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b13      	cmp	r3, #19
 800239e:	d902      	bls.n	80023a6 <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80023a6:	2201      	movs	r2, #1
 80023a8:	4918      	ldr	r1, [pc, #96]	; (800240c <HAL_UART_RxCpltCallback+0x7c>)
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <HAL_UART_RxCpltCallback+0x80>)
 80023ac:	f005 ff5d 	bl	800826a <HAL_UART_Receive_IT>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d124      	bne.n	8002400 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_UART_RxCpltCallback+0x7c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	d00f      	beq.n	80023de <HAL_UART_RxCpltCallback+0x4e>
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_UART_RxCpltCallback+0x7c>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b0d      	cmp	r3, #13
 80023c4:	d00b      	beq.n	80023de <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	b291      	uxth	r1, r2
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023d0:	8011      	strh	r1, [r2, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_UART_RxCpltCallback+0x7c>)
 80023d6:	7819      	ldrb	r1, [r3, #0]
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_UART_RxCpltCallback+0x84>)
 80023da:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 80023dc:	e010      	b.n	8002400 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 80023e6:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_UART_RxCpltCallback+0x88>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	b291      	uxth	r1, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_UART_RxCpltCallback+0x78>)
 80023f6:	8011      	strh	r1, [r2, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_UART_RxCpltCallback+0x84>)
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	2000037c 	.word	0x2000037c
 800240c:	2000037e 	.word	0x2000037e
 8002410:	20000338 	.word	0x20000338
 8002414:	20000380 	.word	0x20000380
 8002418:	20000394 	.word	0x20000394

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <Error_Handler+0x10>)
 8002422:	f006 ffb7 	bl	8009394 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002426:	b672      	cpsid	i
}
 8002428:	bf00      	nop
    __disable_irq();
    while (1)
 800242a:	e7fe      	b.n	800242a <Error_Handler+0xe>
 800242c:	0800aacc 	.word	0x0800aacc

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_MspInit+0x4c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_MspInit+0x4c>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_MspInit+0x4c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_MspInit+0x4c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a08      	ldr	r2, [pc, #32]	; (800247c <HAL_MspInit+0x4c>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_MspInit+0x4c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800246e:	2007      	movs	r0, #7
 8002470:	f003 f836 	bl	80054e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	; 0x38
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a79      	ldr	r2, [pc, #484]	; (8002684 <HAL_ADC_MspInit+0x204>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d173      	bne.n	800258a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	4b78      	ldr	r3, [pc, #480]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b75      	ldr	r3, [pc, #468]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	4b71      	ldr	r3, [pc, #452]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a70      	ldr	r2, [pc, #448]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b6e      	ldr	r3, [pc, #440]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024f6:	2301      	movs	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fa:	2303      	movs	r3, #3
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	4619      	mov	r1, r3
 8002508:	4860      	ldr	r0, [pc, #384]	; (800268c <HAL_ADC_MspInit+0x20c>)
 800250a:	f003 fc2d 	bl	8005d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800250e:	2301      	movs	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002512:	2303      	movs	r3, #3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251e:	4619      	mov	r1, r3
 8002520:	485b      	ldr	r0, [pc, #364]	; (8002690 <HAL_ADC_MspInit+0x210>)
 8002522:	f003 fc21 	bl	8005d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002526:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002528:	4a5b      	ldr	r2, [pc, #364]	; (8002698 <HAL_ADC_MspInit+0x218>)
 800252a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_ADC_MspInit+0x214>)
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002532:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002538:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_ADC_MspInit+0x214>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253e:	4b55      	ldr	r3, [pc, #340]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002546:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002560:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002564:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002566:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800256c:	4849      	ldr	r0, [pc, #292]	; (8002694 <HAL_ADC_MspInit+0x214>)
 800256e:	f002 fff9 	bl	8005564 <HAL_DMA_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002578:	f7ff ff50 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a45      	ldr	r2, [pc, #276]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
 8002582:	4a44      	ldr	r2, [pc, #272]	; (8002694 <HAL_ADC_MspInit+0x214>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002588:	e078      	b.n	800267c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a43      	ldr	r2, [pc, #268]	; (800269c <HAL_ADC_MspInit+0x21c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d173      	bne.n	800267c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_ADC_MspInit+0x208>)
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <HAL_ADC_MspInit+0x208>)
 800259e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a2:	6453      	str	r3, [r2, #68]	; 0x44
 80025a4:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4a33      	ldr	r2, [pc, #204]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6313      	str	r3, [r2, #48]	; 0x30
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6313      	str	r3, [r2, #48]	; 0x30
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_ADC_MspInit+0x208>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025e8:	2302      	movs	r3, #2
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ec:	2303      	movs	r3, #3
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f8:	4619      	mov	r1, r3
 80025fa:	4824      	ldr	r0, [pc, #144]	; (800268c <HAL_ADC_MspInit+0x20c>)
 80025fc:	f003 fbb4 	bl	8005d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002600:	2302      	movs	r3, #2
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002604:	2303      	movs	r3, #3
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	4619      	mov	r1, r3
 8002612:	481f      	ldr	r0, [pc, #124]	; (8002690 <HAL_ADC_MspInit+0x210>)
 8002614:	f003 fba8 	bl	8005d68 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_ADC_MspInit+0x224>)
 800261c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002624:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 800263c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002640:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002648:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 800264c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002650:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002654:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002658:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002660:	480f      	ldr	r0, [pc, #60]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002662:	f002 ff7f 	bl	8005564 <HAL_DMA_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 800266c:	f7ff fed6 	bl	800241c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_ADC_MspInit+0x220>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800267c:	bf00      	nop
 800267e:	3738      	adds	r7, #56	; 0x38
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012000 	.word	0x40012000
 8002688:	40023800 	.word	0x40023800
 800268c:	40020800 	.word	0x40020800
 8002690:	40020000 	.word	0x40020000
 8002694:	20000178 	.word	0x20000178
 8002698:	40026410 	.word	0x40026410
 800269c:	40012100 	.word	0x40012100
 80026a0:	200001d8 	.word	0x200001d8
 80026a4:	40026440 	.word	0x40026440

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a43      	ldr	r2, [pc, #268]	; (80027d4 <HAL_SPI_MspInit+0x12c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d17f      	bne.n	80027ca <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a3a      	ldr	r2, [pc, #232]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_SPI_MspInit+0x130>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800271e:	230c      	movs	r3, #12
 8002720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800272e:	2305      	movs	r3, #5
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <HAL_SPI_MspInit+0x134>)
 800273a:	f003 fb15 	bl	8005d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 800273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002750:	2305      	movs	r3, #5
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4821      	ldr	r0, [pc, #132]	; (80027e0 <HAL_SPI_MspInit+0x138>)
 800275c:	f003 fb04 	bl	8005d68 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_SPI_MspInit+0x140>)
 8002764:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002768:	2200      	movs	r2, #0
 800276a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002774:	2200      	movs	r2, #0
 8002776:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 800277a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002780:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800279e:	4811      	ldr	r0, [pc, #68]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 80027a0:	f002 fee0 	bl	8005564 <HAL_DMA_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80027aa:	f7ff fe37 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 80027b2:	649a      	str	r2, [r3, #72]	; 0x48
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_SPI_MspInit+0x13c>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2024      	movs	r0, #36	; 0x24
 80027c0:	f002 fe99 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80027c4:	2024      	movs	r0, #36	; 0x24
 80027c6:	f002 feb2 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40003800 	.word	0x40003800
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020400 	.word	0x40020400
 80027e4:	20000290 	.word	0x20000290
 80027e8:	40026070 	.word	0x40026070

080027ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d115      	bne.n	800282a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_TIM_Base_MspInit+0x48>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	201c      	movs	r0, #28
 8002820:	f002 fe69 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002824:	201c      	movs	r0, #28
 8002826:	f002 fe82 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_UART_MspInit+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d133      	bne.n	80028c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_UART_MspInit+0x98>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_UART_MspInit+0x98>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002892:	230c      	movs	r3, #12
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028a2:	2307      	movs	r3, #7
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4809      	ldr	r0, [pc, #36]	; (80028d4 <HAL_UART_MspInit+0x9c>)
 80028ae:	f003 fa5b 	bl	8005d68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2026      	movs	r0, #38	; 0x26
 80028b8:	f002 fe1d 	bl	80054f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028bc:	2026      	movs	r0, #38	; 0x26
 80028be:	f002 fe36 	bl	800552e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40004400 	.word	0x40004400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <NMI_Handler+0x4>

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f002 f8c4 	bl	8004ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <DMA1_Stream4_IRQHandler+0x10>)
 8002932:	f002 ffaf 	bl	8005894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000290 	.word	0x20000290

08002940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <TIM2_IRQHandler+0x18>)
 8002946:	f004 ffe5 	bl	8007914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800294a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800294e:	4803      	ldr	r0, [pc, #12]	; (800295c <TIM2_IRQHandler+0x1c>)
 8002950:	f003 fbcf 	bl	80060f2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200002f0 	.word	0x200002f0
 800295c:	40020000 	.word	0x40020000

08002960 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <SPI2_IRQHandler+0x10>)
 8002966:	f004 fcb7 	bl	80072d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000238 	.word	0x20000238

08002974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <USART2_IRQHandler+0x10>)
 800297a:	f005 fca7 	bl	80082cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000338 	.word	0x20000338

08002988 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800298c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002990:	f003 fbca 	bl	8006128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DMA2_Stream0_IRQHandler+0x10>)
 800299e:	f002 ff79 	bl	8005894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000178 	.word	0x20000178

080029ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <DMA2_Stream2_IRQHandler+0x10>)
 80029b2:	f002 ff6f 	bl	8005894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200001d8 	.word	0x200001d8

080029c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e00a      	b.n	80029e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029d2:	f3af 8000 	nop.w
 80029d6:	4601      	mov	r1, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60ba      	str	r2, [r7, #8]
 80029de:	b2ca      	uxtb	r2, r1
 80029e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3301      	adds	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	dbf0      	blt.n	80029d2 <_read+0x12>
  }

  return len;
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e009      	b.n	8002a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dbf1      	blt.n	8002a0c <_write+0x12>
  }
  return len;
 8002a28:	687b      	ldr	r3, [r7, #4]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <_close>:

int _close(int file)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_isatty>:

int _isatty(int file)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <_sbrk+0x5c>)
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <_sbrk+0x60>)
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <_sbrk+0x64>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <_sbrk+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d207      	bcs.n	8002adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002acc:	f006 fc7c 	bl	80093c8 <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ada:	e009      	b.n	8002af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <_sbrk+0x64>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <_sbrk+0x64>)
 8002aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aee:	68fb      	ldr	r3, [r7, #12]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	20020000 	.word	0x20020000
 8002afc:	00000400 	.word	0x00000400
 8002b00:	2000526c 	.word	0x2000526c
 8002b04:	20005c10 	.word	0x20005c10

08002b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <SystemInit+0x20>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <SystemInit+0x20>)
 8002b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8002b2c:	b40f      	push	{r0, r1, r2, r3}
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	480a      	ldr	r0, [pc, #40]	; (8002b6c <term_print+0x40>)
 8002b42:	f006 fc19 	bl	8009378 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8002b46:	4809      	ldr	r0, [pc, #36]	; (8002b6c <term_print+0x40>)
 8002b48:	f7fd fb62 	bl	8000210 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b54:	4905      	ldr	r1, [pc, #20]	; (8002b6c <term_print+0x40>)
 8002b56:	4806      	ldr	r0, [pc, #24]	; (8002b70 <term_print+0x44>)
 8002b58:	f005 faf5 	bl	8008146 <HAL_UART_Transmit>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b68:	b004      	add	sp, #16
 8002b6a:	4770      	bx	lr
 8002b6c:	20005270 	.word	0x20005270
 8002b70:	20000338 	.word	0x20000338

08002b74 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <Displ_Select+0x44>)
 8002b7c:	f003 fa88 	bl	8006090 <HAL_GPIO_ReadPin>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8002b86:	2201      	movs	r2, #1
 8002b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <Displ_Select+0x48>)
 8002b8e:	f003 fa97 	bl	80060c0 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <Displ_Select+0x4c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <Displ_Select+0x4c>)
 8002b98:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <Displ_Select+0x4c>)
 8002ba2:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <Displ_Select+0x4c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <Displ_Select+0x44>)
 8002bae:	f003 fa87 	bl	80060c0 <HAL_GPIO_WritePin>
		}
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40020800 	.word	0x40020800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40003800 	.word	0x40003800

08002bc4 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6039      	str	r1, [r7, #0]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	80bb      	strh	r3, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8002bdc:	bf00      	nop
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <Displ_Transmit+0x100>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0fa      	beq.n	8002bde <Displ_Transmit+0x1a>

	Displ_Select();
 8002be8:	f7ff ffc4 	bl	8002b74 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	4835      	ldr	r0, [pc, #212]	; (8002cc8 <Displ_Transmit+0x104>)
 8002bf4:	f003 fa64 	bl	80060c0 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8002bf8:	79bb      	ldrb	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d043      	beq.n	8002c86 <Displ_Transmit+0xc2>
			*data32=__REV16(*data32);
		}
#else
//if display color format is RGB666: convert RGB565 received by TouchGFX and swap bytes

		uint8_t *buf8Pos=dispBuffer1; 							//using a local pointer
 8002bfe:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <Displ_Transmit+0x108>)
 8002c00:	617b      	str	r3, [r7, #20]

		uint16_t *limit=(uint16_t*)(data+dataSize);
 8002c02:	88bb      	ldrh	r3, [r7, #4]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e020      	b.n	8002c52 <Displ_Transmit+0x8e>

			*(buf8Pos++)=((*data16 & 0xF800)>>8);  // R color
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	121b      	asrs	r3, r3, #8
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	6179      	str	r1, [r7, #20]
 8002c1e:	f022 0207 	bic.w	r2, r2, #7
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x07E0)>>3);  // G color
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	10db      	asrs	r3, r3, #3
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1c59      	adds	r1, r3, #1
 8002c32:	6179      	str	r1, [r7, #20]
 8002c34:	f022 0203 	bic.w	r2, r2, #3
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]
			*(buf8Pos++)=((*data16 & 0x001F)<<3);  // B color
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	00d9      	lsls	r1, r3, #3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	617a      	str	r2, [r7, #20]
 8002c48:	b2ca      	uxtb	r2, r1
 8002c4a:	701a      	strb	r2, [r3, #0]
		for (uint16_t *data16=(uint16_t*)data; (data16<limit) & ((buf8Pos-dispBuffer1)<(SIZEBUF-3)); data16++) {
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	3302      	adds	r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	bf34      	ite	cc
 8002c5a:	2301      	movcc	r3, #1
 8002c5c:	2300      	movcs	r3, #0
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <Displ_Transmit+0x108>)
 8002c64:	1a5b      	subs	r3, r3, r1
 8002c66:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002c6a:	bfd4      	ite	le
 8002c6c:	2301      	movle	r3, #1
 8002c6e:	2300      	movgt	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4013      	ands	r3, r2
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ca      	bne.n	8002c10 <Displ_Transmit+0x4c>
		}

		data=dispBuffer1; 				//data (pointer to data to transfer via SPI) has to point to converted buffer
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <Displ_Transmit+0x108>)
 8002c7c:	603b      	str	r3, [r7, #0]
		dataSize=(buf8Pos-dispBuffer1);	//and dataSize has to contain the converted buffer size
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <Displ_Transmit+0x108>)
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	80bb      	strh	r3, [r7, #4]
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8002c86:	88bb      	ldrh	r3, [r7, #4]
 8002c88:	2b13      	cmp	r3, #19
 8002c8a:	d80d      	bhi.n	8002ca8 <Displ_Transmit+0xe4>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <Displ_Transmit+0x100>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8002c92:	88ba      	ldrh	r2, [r7, #4]
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	480d      	ldr	r0, [pc, #52]	; (8002cd0 <Displ_Transmit+0x10c>)
 8002c9c:	f004 f929 	bl	8006ef2 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <Displ_Transmit+0x100>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8002ca6:	e008      	b.n	8002cba <Displ_Transmit+0xf6>
			Displ_SpiAvailable=0;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <Displ_Transmit+0x100>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8002cae:	88bb      	ldrh	r3, [r7, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	4806      	ldr	r0, [pc, #24]	; (8002cd0 <Displ_Transmit+0x10c>)
 8002cb6:	f004 fa59 	bl	800716c <HAL_SPI_Transmit_DMA>
	}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000018 	.word	0x20000018
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	200052b8 	.word	0x200052b8
 8002cd0:	20000238 	.word	0x20000238

08002cd4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8002cde:	1df9      	adds	r1, r7, #7
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f7ff ff6d 	bl	8002bc4 <Displ_Transmit>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f7ff ff58 	bl	8002bc4 <Displ_Transmit>
 8002d14:	e000      	b.n	8002d18 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8002d16:	bf00      	nop
}
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	Displ_Select();
 8002d24:	f7ff ff26 	bl	8002b74 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	; 0x40
 8002d2c:	4819      	ldr	r0, [pc, #100]	; (8002d94 <ILI9XXX_Init+0x74>)
 8002d2e:	f003 f9c7 	bl	80060c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f001 fedc 	bl	8004af0 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	4815      	ldr	r0, [pc, #84]	; (8002d94 <ILI9XXX_Init+0x74>)
 8002d3e:	f003 f9bf 	bl	80060c0 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8002d42:	20a5      	movs	r0, #165	; 0xa5
 8002d44:	f001 fed4 	bl	8004af0 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8002d48:	203a      	movs	r0, #58	; 0x3a
 8002d4a:	f7ff ffc3 	bl	8002cd4 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2101      	movs	r1, #1
 8002d52:	4811      	ldr	r0, [pc, #68]	; (8002d98 <ILI9XXX_Init+0x78>)
 8002d54:	f7ff ffcd 	bl	8002cf2 <Displ_WriteData>
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002d58:	20b0      	movs	r0, #176	; 0xb0
 8002d5a:	f7ff ffbb 	bl	8002cd4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2101      	movs	r1, #1
 8002d62:	480e      	ldr	r0, [pc, #56]	; (8002d9c <ILI9XXX_Init+0x7c>)
 8002d64:	f7ff ffc5 	bl	8002cf2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8002d68:	20b0      	movs	r0, #176	; 0xb0
 8002d6a:	f7ff ffb3 	bl	8002cd4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2101      	movs	r1, #1
 8002d72:	480a      	ldr	r0, [pc, #40]	; (8002d9c <ILI9XXX_Init+0x7c>)
 8002d74:	f7ff ffbd 	bl	8002cf2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8002d78:	2011      	movs	r0, #17
 8002d7a:	f7ff ffab 	bl	8002cd4 <Displ_WriteCommand>
	HAL_Delay(120);
 8002d7e:	2078      	movs	r0, #120	; 0x78
 8002d80:	f001 feb6 	bl	8004af0 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8002d84:	2029      	movs	r0, #41	; 0x29
 8002d86:	f7ff ffa5 	bl	8002cd4 <Displ_WriteCommand>
	HAL_Delay(5);
 8002d8a:	2005      	movs	r0, #5
 8002d8c:	f001 feb0 	bl	8004af0 <HAL_Delay>

}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40020400 	.word	0x40020400
 8002d98:	0800ab00 	.word	0x0800ab00
 8002d9c:	0800ab04 	.word	0x0800ab04

08002da0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	80fb      	strh	r3, [r7, #6]
 8002db2:	4603      	mov	r3, r0
 8002db4:	80bb      	strh	r3, [r7, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	807b      	strh	r3, [r7, #2]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	061a      	lsls	r2, r3, #24
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	0a12      	lsrs	r2, r2, #8
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <Displ_SetAddressWindow+0x90>)
 8002dde:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8002de0:	202a      	movs	r0, #42	; 0x2a
 8002de2:	f7ff ff77 	bl	8002cd4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2104      	movs	r1, #4
 8002dea:	4811      	ldr	r0, [pc, #68]	; (8002e30 <Displ_SetAddressWindow+0x90>)
 8002dec:	f7ff ff81 	bl	8002cf2 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8002df0:	883b      	ldrh	r3, [r7, #0]
 8002df2:	061a      	lsls	r2, r3, #24
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	88bb      	ldrh	r3, [r7, #4]
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	88ba      	ldrh	r2, [r7, #4]
 8002e08:	0a12      	lsrs	r2, r2, #8
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <Displ_SetAddressWindow+0x90>)
 8002e10:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8002e12:	202b      	movs	r0, #43	; 0x2b
 8002e14:	f7ff ff5e 	bl	8002cd4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <Displ_SetAddressWindow+0x90>)
 8002e1e:	f7ff ff68 	bl	8002cf2 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8002e22:	202c      	movs	r0, #44	; 0x2c
 8002e24:	f7ff ff56 	bl	8002cd4 <Displ_WriteCommand>
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	20005ab8 	.word	0x20005ab8

08002e34 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <Displ_Init+0x34>)
 8002e44:	f003 f93c 	bl	80060c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4e:	4807      	ldr	r0, [pc, #28]	; (8002e6c <Displ_Init+0x38>)
 8002e50:	f003 f936 	bl	80060c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8002e54:	f7ff ff64 	bl	8002d20 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f808 	bl	8002e70 <Displ_Orientation>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020000 	.word	0x40020000

08002e70 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d83b      	bhi.n	8002ef8 <Displ_Orientation+0x88>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <Displ_Orientation+0x18>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002eb1 	.word	0x08002eb1
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002ee1 	.word	0x08002ee1
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <Displ_Orientation+0xa8>)
 8002e9a:	2288      	movs	r2, #136	; 0x88
 8002e9c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <Displ_Orientation+0xac>)
 8002ea0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ea4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <Displ_Orientation+0xb0>)
 8002ea8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eac:	801a      	strh	r2, [r3, #0]
			break;
 8002eae:	e023      	b.n	8002ef8 <Displ_Orientation+0x88>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <Displ_Orientation+0xa8>)
 8002eb2:	22e8      	movs	r2, #232	; 0xe8
 8002eb4:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <Displ_Orientation+0xac>)
 8002eb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ebc:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <Displ_Orientation+0xb0>)
 8002ec0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ec4:	801a      	strh	r2, [r3, #0]
			break;
 8002ec6:	e017      	b.n	8002ef8 <Displ_Orientation+0x88>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <Displ_Orientation+0xa8>)
 8002eca:	2248      	movs	r2, #72	; 0x48
 8002ecc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <Displ_Orientation+0xac>)
 8002ed0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ed4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <Displ_Orientation+0xb0>)
 8002ed8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002edc:	801a      	strh	r2, [r3, #0]
			break;
 8002ede:	e00b      	b.n	8002ef8 <Displ_Orientation+0x88>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <Displ_Orientation+0xa8>)
 8002ee2:	2228      	movs	r2, #40	; 0x28
 8002ee4:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <Displ_Orientation+0xac>)
 8002ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002eec:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <Displ_Orientation+0xb0>)
 8002ef0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ef4:	801a      	strh	r2, [r3, #0]
			break;
 8002ef6:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8002ef8:	2036      	movs	r0, #54	; 0x36
 8002efa:	f7ff feeb 	bl	8002cd4 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2101      	movs	r1, #1
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <Displ_Orientation+0xa8>)
 8002f04:	f7ff fef5 	bl	8002cf2 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <Displ_Orientation+0xb4>)
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	7013      	strb	r3, [r2, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20005abc 	.word	0x20005abc
 8002f1c:	200052b4 	.word	0x200052b4
 8002f20:	200052b2 	.word	0x200052b2
 8002f24:	200052b0 	.word	0x200052b0

08002f28 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <HAL_SPI_ErrorCallback+0x24>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d102      	bne.n	8002f40 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_SPI_ErrorCallback+0x28>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40003800 	.word	0x40003800
 8002f50:	20000018 	.word	0x20000018

08002f54 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_SPI_TxCpltCallback+0x24>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_SPI_TxCpltCallback+0x28>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40003800 	.word	0x40003800
 8002f7c:	20000018 	.word	0x20000018

08002f80 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b08b      	sub	sp, #44	; 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	80fb      	strh	r3, [r7, #6]
 8002f92:	4603      	mov	r3, r0
 8002f94:	80bb      	strh	r3, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	4a59      	ldr	r2, [pc, #356]	; (8003108 <Displ_FillArea+0x188>)
 8002fa2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	f280 80aa 	bge.w	8003100 <Displ_FillArea+0x180>
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <Displ_FillArea+0x18c>)
 8002fb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	f280 80a3 	bge.w	8003100 <Displ_FillArea+0x180>
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 809f 	beq.w	8003100 <Displ_FillArea+0x180>
 8002fc2:	883b      	ldrh	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809b 	beq.w	8003100 <Displ_FillArea+0x180>

	x1=x + w - 1;
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <Displ_FillArea+0x188>)
 8002fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d903      	bls.n	8002fea <Displ_FillArea+0x6a>
		x1=_width;
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <Displ_FillArea+0x188>)
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8002fea:	88ba      	ldrh	r2, [r7, #4]
 8002fec:	883b      	ldrh	r3, [r7, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <Displ_FillArea+0x18c>)
 8002ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d903      	bls.n	800300a <Displ_FillArea+0x8a>
		y1=_height;
 8003002:	4b42      	ldr	r3, [pc, #264]	; (800310c <Displ_FillArea+0x18c>)
 8003004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003008:	61fb      	str	r3, [r7, #28]

#endif
#ifdef Z_RGB666 // setting up dispBuffer in RGB666 format
	uint32_t datasize;

	uint8_t Rbyte=(color & 0xF800)>>8;
 800300a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800300c:	121b      	asrs	r3, r3, #8
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f023 0307 	bic.w	r3, r3, #7
 8003014:	75fb      	strb	r3, [r7, #23]
	uint8_t Gbyte=(color & 0x07E0)>>3;
 8003016:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003018:	10db      	asrs	r3, r3, #3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f023 0303 	bic.w	r3, r3, #3
 8003020:	75bb      	strb	r3, [r7, #22]
	uint8_t Bbyte=(color & 0x001F)<<3;
 8003022:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	757b      	strb	r3, [r7, #21]

	area=(((y1-y+1)*(x1-x+1))*3); 		// area to fill in bytes (3 bytes per pixel)
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	3301      	adds	r3, #1
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	1a8a      	subs	r2, r1, r2
 8003036:	3201      	adds	r2, #1
 8003038:	fb03 f202 	mul.w	r2, r3, r2
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
	uint8_t *buf8Pos=dispBuffer; 		//using a local pointer: changing values next
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <Displ_FillArea+0x190>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]

	datasize = (area<(SIZEBUF-3) ? area : (SIZEBUF-3));  //as buf8Pos receives 3 bytes each cycle we must be sure that SIZEBUF will be not overridden in the next loop
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8003050:	4293      	cmp	r3, r2
 8003052:	bf28      	it	cs
 8003054:	4613      	movcs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

	k=0;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
	while ((buf8Pos-dispBuffer)<=datasize){
 800305c:	e00e      	b.n	800307c <Displ_FillArea+0xfc>
		*(buf8Pos++)=Rbyte;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	61ba      	str	r2, [r7, #24]
 8003064:	7dfa      	ldrb	r2, [r7, #23]
 8003066:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Gbyte;
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	61ba      	str	r2, [r7, #24]
 800306e:	7dba      	ldrb	r2, [r7, #22]
 8003070:	701a      	strb	r2, [r3, #0]
		*(buf8Pos++)=Bbyte;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	61ba      	str	r2, [r7, #24]
 8003078:	7d7a      	ldrb	r2, [r7, #21]
 800307a:	701a      	strb	r2, [r3, #0]
	while ((buf8Pos-dispBuffer)<=datasize){
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <Displ_FillArea+0x190>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	461a      	mov	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4293      	cmp	r3, r2
 800308a:	d2e8      	bcs.n	800305e <Displ_FillArea+0xde>
	}
	datasize=(buf8Pos-dispBuffer);
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <Displ_FillArea+0x190>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	60fb      	str	r3, [r7, #12]
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	b29a      	uxth	r2, r3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	b29b      	uxth	r3, r3
 800309e:	88b9      	ldrh	r1, [r7, #4]
 80030a0:	88f8      	ldrh	r0, [r7, #6]
 80030a2:	f7ff fe7d 	bl	8002da0 <Displ_SetAddressWindow>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
#endif
#ifdef Z_RGB666 // transferring RGB666 format dispBuffer
	times=(area/datasize);  					//how many times buffer must be sent via SPI.
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	60bb      	str	r3, [r7, #8]
	for  (k=0;k<times;k++) {
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	e009      	b.n	80030ca <Displ_FillArea+0x14a>
		Displ_WriteData(dispBuffer,datasize,0);
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <Displ_FillArea+0x190>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fe17 	bl	8002cf2 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	3301      	adds	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d3f1      	bcc.n	80030b6 <Displ_FillArea+0x136>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <Displ_FillArea+0x190>)
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7ff fe04 	bl	8002cf2 <Displ_WriteData>
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <Displ_FillArea+0x190>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <Displ_FillArea+0x194>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d101      	bne.n	80030f8 <Displ_FillArea+0x178>
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <Displ_FillArea+0x198>)
 80030f6:	e000      	b.n	80030fa <Displ_FillArea+0x17a>
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <Displ_FillArea+0x194>)
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <Displ_FillArea+0x190>)
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e000      	b.n	8003102 <Displ_FillArea+0x182>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8003100:	bf00      	nop

}
 8003102:	372c      	adds	r7, #44	; 0x2c
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}
 8003108:	200052b2 	.word	0x200052b2
 800310c:	200052b4 	.word	0x200052b4
 8003110:	2000001c 	.word	0x2000001c
 8003114:	200052b8 	.word	0x200052b8
 8003118:	200056b8 	.word	0x200056b8

0800311c <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af02      	add	r7, sp, #8
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
 8003126:	460b      	mov	r3, r1
 8003128:	80bb      	strh	r3, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <Displ_Pixel+0x44>)
 8003132:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003136:	4293      	cmp	r3, r2
 8003138:	da0e      	bge.n	8003158 <Displ_Pixel+0x3c>
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <Displ_Pixel+0x48>)
 800313e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003142:	4293      	cmp	r3, r2
 8003144:	da08      	bge.n	8003158 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8003146:	88b9      	ldrh	r1, [r7, #4]
 8003148:	88f8      	ldrh	r0, [r7, #6]
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2301      	movs	r3, #1
 8003150:	2201      	movs	r2, #1
 8003152:	f7ff ff15 	bl	8002f80 <Displ_FillArea>
 8003156:	e000      	b.n	800315a <Displ_Pixel+0x3e>
        return;
 8003158:	bf00      	nop

}
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200052b2 	.word	0x200052b2
 8003164:	200052b4 	.word	0x200052b4

08003168 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	4604      	mov	r4, r0
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4623      	mov	r3, r4
 8003178:	80fb      	strh	r3, [r7, #6]
 800317a:	4603      	mov	r3, r0
 800317c:	80bb      	strh	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	807b      	strh	r3, [r7, #2]
 8003182:	4613      	mov	r3, r2
 8003184:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	f1c3 0301 	rsb	r3, r3, #1
 800318c:	b29b      	uxth	r3, r3
 800318e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003194:	887b      	ldrh	r3, [r7, #2]
 8003196:	461a      	mov	r2, r3
 8003198:	03d2      	lsls	r2, r2, #15
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 80031aa:	88f8      	ldrh	r0, [r7, #6]
 80031ac:	88ba      	ldrh	r2, [r7, #4]
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	4413      	add	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	883a      	ldrh	r2, [r7, #0]
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7ff ffb0 	bl	800311c <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80031bc:	88f8      	ldrh	r0, [r7, #6]
 80031be:	88ba      	ldrh	r2, [r7, #4]
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	883a      	ldrh	r2, [r7, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7ff ffa7 	bl	800311c <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	4413      	add	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	88b9      	ldrh	r1, [r7, #4]
 80031d8:	883a      	ldrh	r2, [r7, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff ff9e 	bl	800311c <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	88b9      	ldrh	r1, [r7, #4]
 80031ea:	883a      	ldrh	r2, [r7, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff95 	bl	800311c <Displ_Pixel>

    while (x<y) {
 80031f2:	e081      	b.n	80032f8 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80031f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0e      	blt.n	800321a <Displ_drawCircle+0xb2>
            y--;
 80031fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29b      	uxth	r3, r3
 8003206:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8003208:	8a7b      	ldrh	r3, [r7, #18]
 800320a:	3302      	adds	r3, #2
 800320c:	b29b      	uxth	r3, r3
 800320e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8003210:	8afa      	ldrh	r2, [r7, #22]
 8003212:	8a7b      	ldrh	r3, [r7, #18]
 8003214:	4413      	add	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800321a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800321e:	b29b      	uxth	r3, r3
 8003220:	3301      	adds	r3, #1
 8003222:	b29b      	uxth	r3, r3
 8003224:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8003226:	8abb      	ldrh	r3, [r7, #20]
 8003228:	3302      	adds	r3, #2
 800322a:	b29b      	uxth	r3, r3
 800322c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800322e:	8afa      	ldrh	r2, [r7, #22]
 8003230:	8abb      	ldrh	r3, [r7, #20]
 8003232:	4413      	add	r3, r2
 8003234:	b29b      	uxth	r3, r3
 8003236:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	8a3b      	ldrh	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	b298      	uxth	r0, r3
 8003240:	88ba      	ldrh	r2, [r7, #4]
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	4413      	add	r3, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	883a      	ldrh	r2, [r7, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	f7ff ff66 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	8a3b      	ldrh	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	b298      	uxth	r0, r3
 8003258:	88ba      	ldrh	r2, [r7, #4]
 800325a:	89fb      	ldrh	r3, [r7, #14]
 800325c:	4413      	add	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	883a      	ldrh	r2, [r7, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	f7ff ff5a 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	8a3b      	ldrh	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	b298      	uxth	r0, r3
 8003270:	88ba      	ldrh	r2, [r7, #4]
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	883a      	ldrh	r2, [r7, #0]
 800327a:	4619      	mov	r1, r3
 800327c:	f7ff ff4e 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	8a3b      	ldrh	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	b298      	uxth	r0, r3
 8003288:	88ba      	ldrh	r2, [r7, #4]
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	b29b      	uxth	r3, r3
 8003290:	883a      	ldrh	r2, [r7, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	f7ff ff42 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	4413      	add	r3, r2
 800329e:	b298      	uxth	r0, r3
 80032a0:	88ba      	ldrh	r2, [r7, #4]
 80032a2:	8a3b      	ldrh	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	883a      	ldrh	r2, [r7, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7ff ff36 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	b298      	uxth	r0, r3
 80032b8:	88ba      	ldrh	r2, [r7, #4]
 80032ba:	8a3b      	ldrh	r3, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	883a      	ldrh	r2, [r7, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7ff ff2a 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	89fb      	ldrh	r3, [r7, #14]
 80032cc:	4413      	add	r3, r2
 80032ce:	b298      	uxth	r0, r3
 80032d0:	88ba      	ldrh	r2, [r7, #4]
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	883a      	ldrh	r2, [r7, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	f7ff ff1e 	bl	800311c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	89fb      	ldrh	r3, [r7, #14]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b298      	uxth	r0, r3
 80032e8:	88ba      	ldrh	r2, [r7, #4]
 80032ea:	8a3b      	ldrh	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	883a      	ldrh	r2, [r7, #0]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7ff ff12 	bl	800311c <Displ_Pixel>
    while (x<y) {
 80032f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80032fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003300:	429a      	cmp	r2, r3
 8003302:	f6ff af77 	blt.w	80031f4 <Displ_drawCircle+0x8c>
    }
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd90      	pop	{r4, r7, pc}

08003310 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af02      	add	r7, sp, #8
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <Displ_CLS+0x30>)
 800331c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <Displ_CLS+0x34>)
 8003324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003328:	b299      	uxth	r1, r3
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	2100      	movs	r1, #0
 8003332:	2000      	movs	r0, #0
 8003334:	f7ff fe24 	bl	8002f80 <Displ_FillArea>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200052b2 	.word	0x200052b2
 8003344:	200052b4 	.word	0x200052b4

08003348 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	4604      	mov	r4, r0
 8003350:	4608      	mov	r0, r1
 8003352:	4611      	mov	r1, r2
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	80fb      	strh	r3, [r7, #6]
 800335a:	4603      	mov	r3, r0
 800335c:	80bb      	strh	r3, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	807b      	strh	r3, [r7, #2]
 8003362:	4613      	mov	r3, r2
 8003364:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	f1c3 0301 	rsb	r3, r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8003370:	2301      	movs	r3, #1
 8003372:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	461a      	mov	r2, r3
 8003378:	03d2      	lsls	r2, r2, #15
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800338a:	e095      	b.n	80034b8 <drawCircleHelper+0x170>
        if (f >= 0) {
 800338c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0e      	blt.n	80033b2 <drawCircleHelper+0x6a>
            y--;
 8003394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80033a0:	8a7b      	ldrh	r3, [r7, #18]
 80033a2:	3302      	adds	r3, #2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80033a8:	8afa      	ldrh	r2, [r7, #22]
 80033aa:	8a7b      	ldrh	r3, [r7, #18]
 80033ac:	4413      	add	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80033b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80033be:	8abb      	ldrh	r3, [r7, #20]
 80033c0:	3302      	adds	r3, #2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80033c6:	8afa      	ldrh	r2, [r7, #22]
 80033c8:	8abb      	ldrh	r3, [r7, #20]
 80033ca:	4413      	add	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80033d0:	787b      	ldrb	r3, [r7, #1]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	8a3b      	ldrh	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	b298      	uxth	r0, r3
 80033e2:	88ba      	ldrh	r2, [r7, #4]
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	4413      	add	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7ff fe95 	bl	800311c <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	89fb      	ldrh	r3, [r7, #14]
 80033f6:	4413      	add	r3, r2
 80033f8:	b298      	uxth	r0, r3
 80033fa:	88ba      	ldrh	r2, [r7, #4]
 80033fc:	8a3b      	ldrh	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003404:	4619      	mov	r1, r3
 8003406:	f7ff fe89 	bl	800311c <Displ_Pixel>
        }
        if (cornername & 0x2) {
 800340a:	787b      	ldrb	r3, [r7, #1]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d017      	beq.n	8003444 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	8a3b      	ldrh	r3, [r7, #16]
 8003418:	4413      	add	r3, r2
 800341a:	b298      	uxth	r0, r3
 800341c:	88ba      	ldrh	r2, [r7, #4]
 800341e:	89fb      	ldrh	r3, [r7, #14]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003426:	4619      	mov	r1, r3
 8003428:	f7ff fe78 	bl	800311c <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	4413      	add	r3, r2
 8003432:	b298      	uxth	r0, r3
 8003434:	88ba      	ldrh	r2, [r7, #4]
 8003436:	8a3b      	ldrh	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800343e:	4619      	mov	r1, r3
 8003440:	f7ff fe6c 	bl	800311c <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	b298      	uxth	r0, r3
 8003456:	88ba      	ldrh	r2, [r7, #4]
 8003458:	8a3b      	ldrh	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003460:	4619      	mov	r1, r3
 8003462:	f7ff fe5b 	bl	800311c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	8a3b      	ldrh	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b298      	uxth	r0, r3
 800346e:	88ba      	ldrh	r2, [r7, #4]
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	4413      	add	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003478:	4619      	mov	r1, r3
 800347a:	f7ff fe4f 	bl	800311c <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800347e:	787b      	ldrb	r3, [r7, #1]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d017      	beq.n	80034b8 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	89fb      	ldrh	r3, [r7, #14]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b298      	uxth	r0, r3
 8003490:	88ba      	ldrh	r2, [r7, #4]
 8003492:	8a3b      	ldrh	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	b29b      	uxth	r3, r3
 8003498:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800349a:	4619      	mov	r1, r3
 800349c:	f7ff fe3e 	bl	800311c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	8a3b      	ldrh	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	b298      	uxth	r0, r3
 80034a8:	88ba      	ldrh	r2, [r7, #4]
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7ff fe32 	bl	800311c <Displ_Pixel>
    while (x<y) {
 80034b8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80034bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f6ff af63 	blt.w	800338c <drawCircleHelper+0x44>
        }
    }
}
 80034c6:	bf00      	nop
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}

080034d0 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	4604      	mov	r4, r0
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	80fb      	strh	r3, [r7, #6]
 80034e2:	4603      	mov	r3, r0
 80034e4:	80bb      	strh	r3, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	807b      	strh	r3, [r7, #2]
 80034ea:	4613      	mov	r3, r2
 80034ec:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	f1c3 0301 	rsb	r3, r3, #1
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80034f8:	2301      	movs	r3, #1
 80034fa:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80034fc:	887b      	ldrh	r3, [r7, #2]
 80034fe:	461a      	mov	r2, r3
 8003500:	03d2      	lsls	r2, r2, #15
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8003512:	e0a7      	b.n	8003664 <fillCircleHelper+0x194>
    if (f >= 0) {
 8003514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0e      	blt.n	800353a <fillCircleHelper+0x6a>
      y--;
 800351c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8003528:	8a7b      	ldrh	r3, [r7, #18]
 800352a:	3302      	adds	r3, #2
 800352c:	b29b      	uxth	r3, r3
 800352e:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8003530:	8afa      	ldrh	r2, [r7, #22]
 8003532:	8a7b      	ldrh	r3, [r7, #18]
 8003534:	4413      	add	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800353a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800353e:	b29b      	uxth	r3, r3
 8003540:	3301      	adds	r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8003546:	8abb      	ldrh	r3, [r7, #20]
 8003548:	3302      	adds	r3, #2
 800354a:	b29b      	uxth	r3, r3
 800354c:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800354e:	8afa      	ldrh	r2, [r7, #22]
 8003550:	8abb      	ldrh	r3, [r7, #20]
 8003552:	4413      	add	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03d      	beq.n	80035de <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	8a3b      	ldrh	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	b218      	sxth	r0, r3
 800356c:	88ba      	ldrh	r2, [r7, #4]
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	b219      	sxth	r1, r3
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	8a3b      	ldrh	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	b21c      	sxth	r4, r3
 8003580:	88ba      	ldrh	r2, [r7, #4]
 8003582:	89fb      	ldrh	r3, [r7, #14]
 8003584:	4413      	add	r3, r2
 8003586:	b29a      	uxth	r2, r3
 8003588:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800358a:	4413      	add	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	3301      	adds	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	b21a      	sxth	r2, r3
 8003594:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	4622      	mov	r2, r4
 800359c:	f000 f8a1 	bl	80036e2 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	4413      	add	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	b218      	sxth	r0, r3
 80035aa:	88ba      	ldrh	r2, [r7, #4]
 80035ac:	8a3b      	ldrh	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b219      	sxth	r1, r3
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	4413      	add	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	b21c      	sxth	r4, r3
 80035be:	88ba      	ldrh	r2, [r7, #4]
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80035c8:	4413      	add	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	4622      	mov	r2, r4
 80035da:	f000 f882 	bl	80036e2 <Displ_Line>
    }
    if (cornername & 0x2) {
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03d      	beq.n	8003664 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	8a3b      	ldrh	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b218      	sxth	r0, r3
 80035f2:	88ba      	ldrh	r2, [r7, #4]
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b219      	sxth	r1, r3
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	8a3b      	ldrh	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	b29b      	uxth	r3, r3
 8003604:	b21c      	sxth	r4, r3
 8003606:	88ba      	ldrh	r2, [r7, #4]
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	4413      	add	r3, r2
 800360c:	b29a      	uxth	r2, r3
 800360e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003610:	4413      	add	r3, r2
 8003612:	b29b      	uxth	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	b21a      	sxth	r2, r3
 800361a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4613      	mov	r3, r2
 8003620:	4622      	mov	r2, r4
 8003622:	f000 f85e 	bl	80036e2 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	b218      	sxth	r0, r3
 8003630:	88ba      	ldrh	r2, [r7, #4]
 8003632:	8a3b      	ldrh	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	b219      	sxth	r1, r3
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	b29b      	uxth	r3, r3
 8003642:	b21c      	sxth	r4, r3
 8003644:	88ba      	ldrh	r2, [r7, #4]
 8003646:	8a3b      	ldrh	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	b29a      	uxth	r2, r3
 800364c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800364e:	4413      	add	r3, r2
 8003650:	b29b      	uxth	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	4622      	mov	r2, r4
 8003660:	f000 f83f 	bl	80036e2 <Displ_Line>
  while (x<y) {
 8003664:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800366c:	429a      	cmp	r2, r3
 800366e:	f6ff af51 	blt.w	8003514 <fillCircleHelper+0x44>
    }
  }
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af02      	add	r7, sp, #8
 8003682:	4604      	mov	r4, r0
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4623      	mov	r3, r4
 800368c:	80fb      	strh	r3, [r7, #6]
 800368e:	4603      	mov	r3, r0
 8003690:	80bb      	strh	r3, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	807b      	strh	r3, [r7, #2]
 8003696:	4613      	mov	r3, r2
 8003698:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 800369a:	88ba      	ldrh	r2, [r7, #4]
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b219      	sxth	r1, r3
 80036a4:	88ba      	ldrh	r2, [r7, #4]
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	4413      	add	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b21c      	sxth	r4, r3
 80036ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4623      	mov	r3, r4
 80036bc:	f000 f811 	bl	80036e2 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80036c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80036c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80036c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80036cc:	883b      	ldrh	r3, [r7, #0]
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2300      	movs	r3, #0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2303      	movs	r3, #3
 80036d6:	f7ff fefb 	bl	80034d0 <fillCircleHelper>
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80036e2:	b590      	push	{r4, r7, lr}
 80036e4:	b08b      	sub	sp, #44	; 0x2c
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	4604      	mov	r4, r0
 80036ea:	4608      	mov	r0, r1
 80036ec:	4611      	mov	r1, r2
 80036ee:	461a      	mov	r2, r3
 80036f0:	4623      	mov	r3, r4
 80036f2:	80fb      	strh	r3, [r7, #6]
 80036f4:	4603      	mov	r3, r0
 80036f6:	80bb      	strh	r3, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
 80036fc:	4613      	mov	r3, r2
 80036fe:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8003700:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003708:	429a      	cmp	r2, r3
 800370a:	d123      	bne.n	8003754 <Displ_Line+0x72>
    	if (y1>y0){
 800370c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003710:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	dd0e      	ble.n	8003736 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8003718:	88f8      	ldrh	r0, [r7, #6]
 800371a:	88b9      	ldrh	r1, [r7, #4]
 800371c:	883a      	ldrh	r2, [r7, #0]
 800371e:	88bb      	ldrh	r3, [r7, #4]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	2201      	movs	r2, #1
 8003730:	f7ff fc26 	bl	8002f80 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8003734:	e103      	b.n	800393e <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8003736:	88f8      	ldrh	r0, [r7, #6]
 8003738:	8839      	ldrh	r1, [r7, #0]
 800373a:	88ba      	ldrh	r2, [r7, #4]
 800373c:	883b      	ldrh	r3, [r7, #0]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	3301      	adds	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	2201      	movs	r2, #1
 800374e:	f7ff fc17 	bl	8002f80 <Displ_FillArea>
    	return;
 8003752:	e0f4      	b.n	800393e <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8003754:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003758:	f9b7 3000 	ldrsh.w	r3, [r7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d121      	bne.n	80037a4 <Displ_Line+0xc2>
    	if (x1>x0)
 8003760:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003768:	429a      	cmp	r2, r3
 800376a:	dd0d      	ble.n	8003788 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800376c:	88f8      	ldrh	r0, [r7, #6]
 800376e:	88b9      	ldrh	r1, [r7, #4]
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b29b      	uxth	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2301      	movs	r3, #1
 8003782:	f7ff fbfd 	bl	8002f80 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8003786:	e0da      	b.n	800393e <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8003788:	8878      	ldrh	r0, [r7, #2]
 800378a:	8839      	ldrh	r1, [r7, #0]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2301      	movs	r3, #1
 800379e:	f7ff fbef 	bl	8002f80 <Displ_FillArea>
    	return;
 80037a2:	e0cc      	b.n	800393e <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 80037a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80037a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dd05      	ble.n	80037bc <Displ_Line+0xda>
 80037b0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80037b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037b8:	1ad2      	subs	r2, r2, r3
 80037ba:	e004      	b.n	80037c6 <Displ_Line+0xe4>
 80037bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80037c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80037ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ce:	4299      	cmp	r1, r3
 80037d0:	dd05      	ble.n	80037de <Displ_Line+0xfc>
 80037d2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80037d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037da:	1acb      	subs	r3, r1, r3
 80037dc:	e004      	b.n	80037e8 <Displ_Line+0x106>
 80037de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80037e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037e6:	1acb      	subs	r3, r1, r3
 80037e8:	429a      	cmp	r2, r3
 80037ea:	bfcc      	ite	gt
 80037ec:	2301      	movgt	r3, #1
 80037ee:	2300      	movle	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80037f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	827b      	strh	r3, [r7, #18]
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	80fb      	strh	r3, [r7, #6]
 8003804:	8a7b      	ldrh	r3, [r7, #18]
 8003806:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	823b      	strh	r3, [r7, #16]
 800380c:	883b      	ldrh	r3, [r7, #0]
 800380e:	807b      	strh	r3, [r7, #2]
 8003810:	8a3b      	ldrh	r3, [r7, #16]
 8003812:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8003814:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800381c:	429a      	cmp	r2, r3
 800381e:	dd0b      	ble.n	8003838 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	81fb      	strh	r3, [r7, #14]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	80fb      	strh	r3, [r7, #6]
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800382c:	88bb      	ldrh	r3, [r7, #4]
 800382e:	81bb      	strh	r3, [r7, #12]
 8003830:	883b      	ldrh	r3, [r7, #0]
 8003832:	80bb      	strh	r3, [r7, #4]
 8003834:	89bb      	ldrh	r3, [r7, #12]
 8003836:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8003842:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003846:	105b      	asrs	r3, r3, #1
 8003848:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 800384a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800384e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003852:	429a      	cmp	r2, r3
 8003854:	da07      	bge.n	8003866 <Displ_Line+0x184>
        dy = y1-y0;
 8003856:	883a      	ldrh	r2, [r7, #0]
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	b29b      	uxth	r3, r3
 800385e:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8003860:	2301      	movs	r3, #1
 8003862:	837b      	strh	r3, [r7, #26]
 8003864:	e007      	b.n	8003876 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8003866:	88ba      	ldrh	r2, [r7, #4]
 8003868:	883b      	ldrh	r3, [r7, #0]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	b29b      	uxth	r3, r3
 800386e:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8003870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003874:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8003876:	2300      	movs	r3, #0
 8003878:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	83bb      	strh	r3, [r7, #28]
 800387e:	e03a      	b.n	80038f6 <Displ_Line+0x214>
    	l++;
 8003880:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003884:	b29b      	uxth	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800388c:	8b3a      	ldrh	r2, [r7, #24]
 800388e:	8afb      	ldrh	r3, [r7, #22]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8003896:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	da25      	bge.n	80038ea <Displ_Line+0x208>
        	if (steep) {
 800389e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 80038a6:	88b8      	ldrh	r0, [r7, #4]
 80038a8:	88f9      	ldrh	r1, [r7, #6]
 80038aa:	8bfa      	ldrh	r2, [r7, #30]
 80038ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	2201      	movs	r2, #1
 80038b4:	f7ff fb64 	bl	8002f80 <Displ_FillArea>
 80038b8:	e007      	b.n	80038ca <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80038ba:	88f8      	ldrh	r0, [r7, #6]
 80038bc:	88b9      	ldrh	r1, [r7, #4]
 80038be:	8bfa      	ldrh	r2, [r7, #30]
 80038c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	f7ff fb5b 	bl	8002f80 <Displ_FillArea>
            }
            y0 += ystep;
 80038ca:	88ba      	ldrh	r2, [r7, #4]
 80038cc:	8b7b      	ldrh	r3, [r7, #26]
 80038ce:	4413      	add	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	80bb      	strh	r3, [r7, #4]
            l=0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80038d8:	8bbb      	ldrh	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80038e0:	8b3a      	ldrh	r2, [r7, #24]
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	4413      	add	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80038ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	83bb      	strh	r3, [r7, #28]
 80038f6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80038fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038fe:	429a      	cmp	r2, r3
 8003900:	ddbe      	ble.n	8003880 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8003902:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d019      	beq.n	800393e <Displ_Line+0x25c>
    	if (steep) {
 800390a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8003912:	88b8      	ldrh	r0, [r7, #4]
 8003914:	88f9      	ldrh	r1, [r7, #6]
 8003916:	8bfb      	ldrh	r3, [r7, #30]
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	2201      	movs	r2, #1
 8003924:	f7ff fb2c 	bl	8002f80 <Displ_FillArea>
 8003928:	e009      	b.n	800393e <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 800392a:	88f8      	ldrh	r0, [r7, #6]
 800392c:	88b9      	ldrh	r1, [r7, #4]
 800392e:	8bfb      	ldrh	r3, [r7, #30]
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2301      	movs	r3, #1
 800393a:	f7ff fb21 	bl	8002f80 <Displ_FillArea>
    	}
    }
}
 800393e:	3724      	adds	r7, #36	; 0x24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}

08003944 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8003944:	b590      	push	{r4, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af02      	add	r7, sp, #8
 800394a:	4604      	mov	r4, r0
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	80fb      	strh	r3, [r7, #6]
 8003956:	4603      	mov	r3, r0
 8003958:	80bb      	strh	r3, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	807b      	strh	r3, [r7, #2]
 800395e:	4613      	mov	r3, r2
 8003960:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	88b9      	ldrh	r1, [r7, #4]
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	8b3c      	ldrh	r4, [r7, #24]
 800396a:	8bbb      	ldrh	r3, [r7, #28]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	4623      	mov	r3, r4
 8003970:	f7ff fb06 	bl	8002f80 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8003974:	88f8      	ldrh	r0, [r7, #6]
 8003976:	88ba      	ldrh	r2, [r7, #4]
 8003978:	883b      	ldrh	r3, [r7, #0]
 800397a:	4413      	add	r3, r2
 800397c:	b29a      	uxth	r2, r3
 800397e:	8b3b      	ldrh	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b299      	uxth	r1, r3
 8003984:	887a      	ldrh	r2, [r7, #2]
 8003986:	8b3c      	ldrh	r4, [r7, #24]
 8003988:	8bbb      	ldrh	r3, [r7, #28]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4623      	mov	r3, r4
 800398e:	f7ff faf7 	bl	8002f80 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8003992:	88f8      	ldrh	r0, [r7, #6]
 8003994:	88b9      	ldrh	r1, [r7, #4]
 8003996:	8b3a      	ldrh	r2, [r7, #24]
 8003998:	883c      	ldrh	r4, [r7, #0]
 800399a:	8bbb      	ldrh	r3, [r7, #28]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	4623      	mov	r3, r4
 80039a0:	f7ff faee 	bl	8002f80 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	4413      	add	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	8b3b      	ldrh	r3, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	b298      	uxth	r0, r3
 80039b2:	88b9      	ldrh	r1, [r7, #4]
 80039b4:	8b3a      	ldrh	r2, [r7, #24]
 80039b6:	883c      	ldrh	r4, [r7, #0]
 80039b8:	8bbb      	ldrh	r3, [r7, #28]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4623      	mov	r3, r4
 80039be:	f7ff fadf 	bl	8002f80 <Displ_FillArea>
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}

080039ca <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80039ca:	b590      	push	{r4, r7, lr}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af02      	add	r7, sp, #8
 80039d0:	4604      	mov	r4, r0
 80039d2:	4608      	mov	r0, r1
 80039d4:	4611      	mov	r1, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	80fb      	strh	r3, [r7, #6]
 80039dc:	4603      	mov	r3, r0
 80039de:	80bb      	strh	r3, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80039e8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80039ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80039f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80039f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039f8:	8c3b      	ldrh	r3, [r7, #32]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4623      	mov	r3, r4
 80039fe:	f7ff fe70 	bl	80036e2 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8003a02:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8003a06:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a0a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003a0e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8003a12:	8c3b      	ldrh	r3, [r7, #32]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	4623      	mov	r3, r4
 8003a18:	f7ff fe63 	bl	80036e2 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8003a1c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a24:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8003a28:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003a2c:	8c3b      	ldrh	r3, [r7, #32]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	4623      	mov	r3, r4
 8003a32:	f7ff fe56 	bl	80036e2 <Displ_Line>
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd90      	pop	{r4, r7, pc}

08003a3e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003a3e:	b590      	push	{r4, r7, lr}
 8003a40:	b091      	sub	sp, #68	; 0x44
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	4604      	mov	r4, r0
 8003a46:	4608      	mov	r0, r1
 8003a48:	4611      	mov	r1, r2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4623      	mov	r3, r4
 8003a4e:	80fb      	strh	r3, [r7, #6]
 8003a50:	4603      	mov	r3, r0
 8003a52:	80bb      	strh	r3, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8003a5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	dd0b      	ble.n	8003a80 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003a68:	88bb      	ldrh	r3, [r7, #4]
 8003a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a6c:	883b      	ldrh	r3, [r7, #0]
 8003a6e:	80bb      	strh	r3, [r7, #4]
 8003a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a72:	803b      	strh	r3, [r7, #0]
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	80fb      	strh	r3, [r7, #6]
 8003a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a7e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8003a80:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003a84:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	dd0f      	ble.n	8003aac <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003a8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003a90:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a92:	883b      	ldrh	r3, [r7, #0]
 8003a94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a9a:	803b      	strh	r3, [r7, #0]
 8003a9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003aa0:	843b      	strh	r3, [r7, #32]
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003aa8:	8c3b      	ldrh	r3, [r7, #32]
 8003aaa:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8003aac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003ab0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dd0b      	ble.n	8003ad0 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8003ab8:	88bb      	ldrh	r3, [r7, #4]
 8003aba:	83fb      	strh	r3, [r7, #30]
 8003abc:	883b      	ldrh	r3, [r7, #0]
 8003abe:	80bb      	strh	r3, [r7, #4]
 8003ac0:	8bfb      	ldrh	r3, [r7, #30]
 8003ac2:	803b      	strh	r3, [r7, #0]
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	83bb      	strh	r3, [r7, #28]
 8003ac8:	887b      	ldrh	r3, [r7, #2]
 8003aca:	80fb      	strh	r3, [r7, #6]
 8003acc:	8bbb      	ldrh	r3, [r7, #28]
 8003ace:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8003ad0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003ad4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d136      	bne.n	8003b4a <Displ_fillTriangle+0x10c>
        a = b = x0;
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ae0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ae2:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8003ae4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003ae8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003aec:	429a      	cmp	r2, r3
 8003aee:	da02      	bge.n	8003af6 <Displ_fillTriangle+0xb8>
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003af4:	e007      	b.n	8003b06 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8003af6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003afa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003afe:	429a      	cmp	r2, r3
 8003b00:	dd01      	ble.n	8003b06 <Displ_fillTriangle+0xc8>
 8003b02:	887b      	ldrh	r3, [r7, #2]
 8003b04:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8003b06:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003b0a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	da03      	bge.n	8003b1a <Displ_fillTriangle+0xdc>
 8003b12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b16:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b18:	e008      	b.n	8003b2c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8003b1a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8003b1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003b22:	429a      	cmp	r2, r3
 8003b24:	dd02      	ble.n	8003b2c <Displ_fillTriangle+0xee>
 8003b26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003b2a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8003b2c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003b30:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003b34:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003b38:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003b3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4623      	mov	r3, r4
 8003b44:	f7ff fdcd 	bl	80036e2 <Displ_Line>
        return;
 8003b48:	e0d2      	b.n	8003cf0 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8003b54:	883a      	ldrh	r2, [r7, #0]
 8003b56:	88bb      	ldrh	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8003b5e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8003b6a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003b6e:	88bb      	ldrh	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8003b76:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8003b82:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003b86:	883b      	ldrh	r3, [r7, #0]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003b96:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003b9a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d102      	bne.n	8003ba8 <Displ_fillTriangle+0x16a>
 8003ba2:	883b      	ldrh	r3, [r7, #0]
 8003ba4:	863b      	strh	r3, [r7, #48]	; 0x30
 8003ba6:	e003      	b.n	8003bb0 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8003ba8:	883b      	ldrh	r3, [r7, #0]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	867b      	strh	r3, [r7, #50]	; 0x32
 8003bb4:	e03d      	b.n	8003c32 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8003bb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003bca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8003bde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	4413      	add	r3, r2
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003be8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bee:	4413      	add	r3, r2
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003bf2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003bf6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dd05      	ble.n	8003c0a <Displ_fillTriangle+0x1cc>
 8003bfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c00:	81bb      	strh	r3, [r7, #12]
 8003c02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c06:	89bb      	ldrh	r3, [r7, #12]
 8003c08:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003c0a:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8003c0e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003c12:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003c16:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003c1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4623      	mov	r3, r4
 8003c22:	f7ff fd5e 	bl	80036e2 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8003c26:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	867b      	strh	r3, [r7, #50]	; 0x32
 8003c32:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003c36:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	ddbb      	ble.n	8003bb6 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003c3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c42:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003c46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c4a:	1a8a      	subs	r2, r1, r2
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c56:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003c5a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003c5e:	1a8a      	subs	r2, r1, r2
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003c66:	e03d      	b.n	8003ce4 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8003c68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	4413      	add	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8003c7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8003c90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c96:	4413      	add	r3, r2
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003c9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003ca4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003ca8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dd05      	ble.n	8003cbc <Displ_fillTriangle+0x27e>
 8003cb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb2:	81fb      	strh	r3, [r7, #14]
 8003cb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003cb6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8003cbc:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8003cc0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003cc4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8003cc8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8003ccc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	f7ff fd05 	bl	80036e2 <Displ_Line>
    for(; y<=y2; y++) {
 8003cd8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ce4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8003ce8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	ddbb      	ble.n	8003c68 <Displ_fillTriangle+0x22a>
    }
}
 8003cf0:	373c      	adds	r7, #60	; 0x3c
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}

08003cf6 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	461a      	mov	r2, r3
 8003d04:	4623      	mov	r3, r4
 8003d06:	80fb      	strh	r3, [r7, #6]
 8003d08:	4603      	mov	r3, r0
 8003d0a:	80bb      	strh	r3, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
 8003d10:	4613      	mov	r3, r2
 8003d12:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8003d14:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bfa8      	it	ge
 8003d20:	4613      	movge	r3, r2
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	0fda      	lsrs	r2, r3, #31
 8003d26:	4413      	add	r3, r2
 8003d28:	105b      	asrs	r3, r3, #1
 8003d2a:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8003d2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003d30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dd01      	ble.n	8003d3c <Displ_drawRoundRect+0x46>
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	8c3b      	ldrh	r3, [r7, #32]
 8003d40:	4413      	add	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	b218      	sxth	r0, r3
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	8c3b      	ldrh	r3, [r7, #32]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003d5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4623      	mov	r3, r4
 8003d68:	f7ff fcbb 	bl	80036e2 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	8c3b      	ldrh	r3, [r7, #32]
 8003d70:	4413      	add	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b218      	sxth	r0, r3
 8003d76:	88ba      	ldrh	r2, [r7, #4]
 8003d78:	883b      	ldrh	r3, [r7, #0]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	b219      	sxth	r1, r3
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	4413      	add	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	8c3b      	ldrh	r3, [r7, #32]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	b21c      	sxth	r4, r3
 8003d98:	88ba      	ldrh	r2, [r7, #4]
 8003d9a:	883b      	ldrh	r3, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	4622      	mov	r2, r4
 8003dae:	f7ff fc98 	bl	80036e2 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8003db2:	88ba      	ldrh	r2, [r7, #4]
 8003db4:	8c3b      	ldrh	r3, [r7, #32]
 8003db6:	4413      	add	r3, r2
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b219      	sxth	r1, r3
 8003dbc:	88ba      	ldrh	r2, [r7, #4]
 8003dbe:	883b      	ldrh	r3, [r7, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	8c3b      	ldrh	r3, [r7, #32]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b21c      	sxth	r4, r3
 8003dd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003dd4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4623      	mov	r3, r4
 8003dde:	f7ff fc80 	bl	80036e2 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	4413      	add	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	b218      	sxth	r0, r3
 8003df0:	88ba      	ldrh	r2, [r7, #4]
 8003df2:	8c3b      	ldrh	r3, [r7, #32]
 8003df4:	4413      	add	r3, r2
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	b219      	sxth	r1, r3
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4413      	add	r3, r2
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b21c      	sxth	r4, r3
 8003e08:	88ba      	ldrh	r2, [r7, #4]
 8003e0a:	883b      	ldrh	r3, [r7, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	8c3b      	ldrh	r3, [r7, #32]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b21a      	sxth	r2, r3
 8003e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	4622      	mov	r2, r4
 8003e24:	f7ff fc5d 	bl	80036e2 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	8c3b      	ldrh	r3, [r7, #32]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	b218      	sxth	r0, r3
 8003e32:	88ba      	ldrh	r2, [r7, #4]
 8003e34:	8c3b      	ldrh	r3, [r7, #32]
 8003e36:	4413      	add	r3, r2
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b219      	sxth	r1, r3
 8003e3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2301      	movs	r3, #1
 8003e46:	f7ff fa7f 	bl	8003348 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8c3b      	ldrh	r3, [r7, #32]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b218      	sxth	r0, r3
 8003e5e:	88ba      	ldrh	r2, [r7, #4]
 8003e60:	8c3b      	ldrh	r3, [r7, #32]
 8003e62:	4413      	add	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b219      	sxth	r1, r3
 8003e68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2302      	movs	r3, #2
 8003e72:	f7ff fa69 	bl	8003348 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	8c3b      	ldrh	r3, [r7, #32]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b218      	sxth	r0, r3
 8003e8a:	88ba      	ldrh	r2, [r7, #4]
 8003e8c:	883b      	ldrh	r3, [r7, #0]
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	8c3b      	ldrh	r3, [r7, #32]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	b219      	sxth	r1, r3
 8003e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	f7ff fa4e 	bl	8003348 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	8c3b      	ldrh	r3, [r7, #32]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	b218      	sxth	r0, r3
 8003eb6:	88ba      	ldrh	r2, [r7, #4]
 8003eb8:	883b      	ldrh	r3, [r7, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	8c3b      	ldrh	r3, [r7, #32]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	b219      	sxth	r1, r3
 8003eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	f7ff fa38 	bl	8003348 <drawCircleHelper>
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}

08003ee0 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	4611      	mov	r1, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	4623      	mov	r3, r4
 8003ef0:	80fb      	strh	r3, [r7, #6]
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80bb      	strh	r3, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	807b      	strh	r3, [r7, #2]
 8003efa:	4613      	mov	r3, r2
 8003efc:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8003efe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003f02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f06:	4293      	cmp	r3, r2
 8003f08:	bfa8      	it	ge
 8003f0a:	4613      	movge	r3, r2
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	0fda      	lsrs	r2, r3, #31
 8003f10:	4413      	add	r3, r2
 8003f12:	105b      	asrs	r3, r3, #1
 8003f14:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8003f16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	dd01      	ble.n	8003f26 <Displ_fillRoundRect+0x46>
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	8c3b      	ldrh	r3, [r7, #32]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	b298      	uxth	r0, r3
 8003f2e:	88b9      	ldrh	r1, [r7, #4]
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	8c3b      	ldrh	r3, [r7, #32]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	883c      	ldrh	r4, [r7, #0]
 8003f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4623      	mov	r3, r4
 8003f44:	f7ff f81c 	bl	8002f80 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	887b      	ldrh	r3, [r7, #2]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	8c3b      	ldrh	r3, [r7, #32]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	b218      	sxth	r0, r3
 8003f5c:	88ba      	ldrh	r2, [r7, #4]
 8003f5e:	8c3b      	ldrh	r3, [r7, #32]
 8003f60:	4413      	add	r3, r2
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	b219      	sxth	r1, r3
 8003f66:	883a      	ldrh	r2, [r7, #0]
 8003f68:	8c3b      	ldrh	r3, [r7, #32]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	b21b      	sxth	r3, r3
 8003f78:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003f7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f7e:	9201      	str	r2, [sp, #4]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2301      	movs	r3, #1
 8003f84:	4622      	mov	r2, r4
 8003f86:	f7ff faa3 	bl	80034d0 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	8c3b      	ldrh	r3, [r7, #32]
 8003f8e:	4413      	add	r3, r2
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b218      	sxth	r0, r3
 8003f94:	88ba      	ldrh	r2, [r7, #4]
 8003f96:	8c3b      	ldrh	r3, [r7, #32]
 8003f98:	4413      	add	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b219      	sxth	r1, r3
 8003f9e:	883a      	ldrh	r2, [r7, #0]
 8003fa0:	8c3b      	ldrh	r3, [r7, #32]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b21b      	sxth	r3, r3
 8003fb0:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8003fb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb6:	9201      	str	r2, [sp, #4]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	2302      	movs	r3, #2
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	f7ff fa87 	bl	80034d0 <fillCircleHelper>
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
	...

08003fcc <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	2b51      	cmp	r3, #81	; 0x51
 8003fda:	d00a      	beq.n	8003ff2 <Displ_BackLight+0x26>
 8003fdc:	2b51      	cmp	r3, #81	; 0x51
 8003fde:	dc16      	bgt.n	800400e <Displ_BackLight+0x42>
 8003fe0:	2b46      	cmp	r3, #70	; 0x46
 8003fe2:	d008      	beq.n	8003ff6 <Displ_BackLight+0x2a>
 8003fe4:	2b46      	cmp	r3, #70	; 0x46
 8003fe6:	dc12      	bgt.n	800400e <Displ_BackLight+0x42>
 8003fe8:	2b30      	cmp	r3, #48	; 0x30
 8003fea:	d00a      	beq.n	8004002 <Displ_BackLight+0x36>
 8003fec:	2b31      	cmp	r3, #49	; 0x31
 8003fee:	d002      	beq.n	8003ff6 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8003ff0:	e00d      	b.n	800400e <Displ_BackLight+0x42>
		__NOP();
 8003ff2:	bf00      	nop
		break;
 8003ff4:	e00c      	b.n	8004010 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	480a      	ldr	r0, [pc, #40]	; (8004024 <Displ_BackLight+0x58>)
 8003ffc:	f002 f860 	bl	80060c0 <HAL_GPIO_WritePin>
		break;
 8004000:	e006      	b.n	8004010 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8004002:	2200      	movs	r2, #0
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	4807      	ldr	r0, [pc, #28]	; (8004024 <Displ_BackLight+0x58>)
 8004008:	f002 f85a 	bl	80060c0 <HAL_GPIO_WritePin>
		break;
 800400c:	e000      	b.n	8004010 <Displ_BackLight+0x44>
		break;
 800400e:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8004010:	2140      	movs	r1, #64	; 0x40
 8004012:	4804      	ldr	r0, [pc, #16]	; (8004024 <Displ_BackLight+0x58>)
 8004014:	f002 f83c 	bl	8006090 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40020000 	.word	0x40020000

08004028 <testLines>:




void testLines(uint16_t color)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b08b      	sub	sp, #44	; 0x2c
 800402c:	af02      	add	r7, sp, #8
 800402e:	4603      	mov	r3, r0
 8004030:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8004032:	4b7c      	ldr	r3, [pc, #496]	; (8004224 <testLines+0x1fc>)
 8004034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004038:	617b      	str	r3, [r7, #20]
                  h = _height;
 800403a:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <testLines+0x200>)
 800403c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004040:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff f964 	bl	8003310 <Displ_CLS>

    x1 = y1 = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	3b01      	subs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e00f      	b.n	800407c <testLines+0x54>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	b218      	sxth	r0, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	b219      	sxth	r1, r3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	b21a      	sxth	r2, r3
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	b21c      	sxth	r4, r3
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4623      	mov	r3, r4
 8004072:	f7ff fb36 	bl	80036e2 <Displ_Line>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3306      	adds	r3, #6
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	429a      	cmp	r2, r3
 8004082:	dbeb      	blt.n	800405c <testLines+0x34>
    x2    = w - 1;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3b01      	subs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e00f      	b.n	80040b0 <testLines+0x88>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	b218      	sxth	r0, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	b219      	sxth	r1, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	b21a      	sxth	r2, r3
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	b21c      	sxth	r4, r3
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4623      	mov	r3, r4
 80040a6:	f7ff fb1c 	bl	80036e2 <Displ_Line>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3306      	adds	r3, #6
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dbeb      	blt.n	8004090 <testLines+0x68>

    Displ_CLS(BLACK);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7ff f929 	bl	8003310 <Displ_CLS>

    x1    = w - 1;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e00f      	b.n	80040f4 <testLines+0xcc>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	b218      	sxth	r0, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	b219      	sxth	r1, r3
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	b21a      	sxth	r2, r3
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	b21c      	sxth	r4, r3
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4623      	mov	r3, r4
 80040ea:	f7ff fafa 	bl	80036e2 <Displ_Line>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3306      	adds	r3, #6
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dbeb      	blt.n	80040d4 <testLines+0xac>
    x2    = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e00f      	b.n	8004126 <testLines+0xfe>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	b218      	sxth	r0, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	b219      	sxth	r1, r3
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	b21a      	sxth	r2, r3
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	b21c      	sxth	r4, r3
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4623      	mov	r3, r4
 800411c:	f7ff fae1 	bl	80036e2 <Displ_Line>
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	3306      	adds	r3, #6
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	429a      	cmp	r2, r3
 800412c:	dbeb      	blt.n	8004106 <testLines+0xde>

    Displ_CLS(BLACK);
 800412e:	2000      	movs	r0, #0
 8004130:	f7ff f8ee 	bl	8003310 <Displ_CLS>

    x1    = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3b01      	subs	r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e00f      	b.n	8004168 <testLines+0x140>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	b218      	sxth	r0, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	b219      	sxth	r1, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	b21a      	sxth	r2, r3
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	b21c      	sxth	r4, r3
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4623      	mov	r3, r4
 800415e:	f7ff fac0 	bl	80036e2 <Displ_Line>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3306      	adds	r3, #6
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	429a      	cmp	r2, r3
 800416e:	dbeb      	blt.n	8004148 <testLines+0x120>
    x2    = w - 1;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3b01      	subs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e00f      	b.n	800419c <testLines+0x174>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	b218      	sxth	r0, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	b219      	sxth	r1, r3
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	b21a      	sxth	r2, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	b21c      	sxth	r4, r3
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4623      	mov	r3, r4
 8004192:	f7ff faa6 	bl	80036e2 <Displ_Line>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3306      	adds	r3, #6
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	dbeb      	blt.n	800417c <testLines+0x154>

    Displ_CLS(BLACK);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7ff f8b3 	bl	8003310 <Displ_CLS>

    x1    = w - 1;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e00f      	b.n	80041e0 <testLines+0x1b8>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	b218      	sxth	r0, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	b219      	sxth	r1, r3
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	b21a      	sxth	r2, r3
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	b21c      	sxth	r4, r3
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4623      	mov	r3, r4
 80041d6:	f7ff fa84 	bl	80036e2 <Displ_Line>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3306      	adds	r3, #6
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	dbeb      	blt.n	80041c0 <testLines+0x198>
    x2    = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e00f      	b.n	8004212 <testLines+0x1ea>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	b218      	sxth	r0, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	b219      	sxth	r1, r3
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	b21c      	sxth	r4, r3
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4623      	mov	r3, r4
 8004208:	f7ff fa6b 	bl	80036e2 <Displ_Line>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	3306      	adds	r3, #6
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	429a      	cmp	r2, r3
 8004218:	dbeb      	blt.n	80041f2 <testLines+0x1ca>

}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	3724      	adds	r7, #36	; 0x24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd90      	pop	{r4, r7, pc}
 8004224:	200052b2 	.word	0x200052b2
 8004228:	200052b4 	.word	0x200052b4

0800422c <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	4603      	mov	r3, r0
 8004234:	460a      	mov	r2, r1
 8004236:	80fb      	strh	r3, [r7, #6]
 8004238:	4613      	mov	r3, r2
 800423a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <testFastLines+0x94>)
 800423e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <testFastLines+0x98>)
 8004246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800424c:	2000      	movs	r0, #0
 800424e:	f7ff f85f 	bl	8003310 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	e011      	b.n	800427c <testFastLines+0x50>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	b219      	sxth	r1, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	b21a      	sxth	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	b218      	sxth	r0, r3
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4603      	mov	r3, r0
 8004270:	2000      	movs	r0, #0
 8004272:	f7ff fa36 	bl	80036e2 <Displ_Line>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	3305      	adds	r3, #5
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbe9      	blt.n	8004258 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e011      	b.n	80042ae <testFastLines+0x82>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	b218      	sxth	r0, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	b21a      	sxth	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	b219      	sxth	r1, r3
 800429c:	88bb      	ldrh	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	460b      	mov	r3, r1
 80042a2:	2100      	movs	r1, #0
 80042a4:	f7ff fa1d 	bl	80036e2 <Displ_Line>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	3305      	adds	r3, #5
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	dbe9      	blt.n	800428a <testFastLines+0x5e>
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200052b2 	.word	0x200052b2
 80042c4:	200052b4 	.word	0x200052b4

080042c8 <testRects>:




void testRects(uint16_t color)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	4603      	mov	r3, r0
 80042d0:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 80042d2:	4b25      	ldr	r3, [pc, #148]	; (8004368 <testRects+0xa0>)
 80042d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d8:	0fda      	lsrs	r2, r3, #31
 80042da:	4413      	add	r3, r2
 80042dc:	105b      	asrs	r3, r3, #1
 80042de:	b21b      	sxth	r3, r3
 80042e0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <testRects+0xa4>)
 80042e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e8:	0fda      	lsrs	r2, r3, #31
 80042ea:	4413      	add	r3, r2
 80042ec:	105b      	asrs	r3, r3, #1
 80042ee:	b21b      	sxth	r3, r3
 80042f0:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f7ff f80c 	bl	8003310 <Displ_CLS>
	n     = min(_width, _height);
 80042f8:	4b1c      	ldr	r3, [pc, #112]	; (800436c <testRects+0xa4>)
 80042fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <testRects+0xa0>)
 8004300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004304:	4293      	cmp	r3, r2
 8004306:	bfa8      	it	ge
 8004308:	4613      	movge	r3, r2
 800430a:	b21b      	sxth	r3, r3
 800430c:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 800430e:	2302      	movs	r3, #2
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e020      	b.n	8004356 <testRects+0x8e>
		i2 = i / 2;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	0fda      	lsrs	r2, r3, #31
 8004318:	4413      	add	r3, r2
 800431a:	105b      	asrs	r3, r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	b29b      	uxth	r3, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	b29b      	uxth	r3, r3
 800432a:	b218      	sxth	r0, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b29b      	uxth	r3, r3
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	b219      	sxth	r1, r3
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	b21a      	sxth	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b21c      	sxth	r4, r3
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2301      	movs	r3, #1
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4623      	mov	r3, r4
 800434c:	f7ff fafa 	bl	8003944 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3306      	adds	r3, #6
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	429a      	cmp	r2, r3
 800435c:	dbda      	blt.n	8004314 <testRects+0x4c>
	}
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3724      	adds	r7, #36	; 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	200052b2 	.word	0x200052b2
 800436c:	200052b4 	.word	0x200052b4

08004370 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08b      	sub	sp, #44	; 0x2c
 8004374:	af02      	add	r7, sp, #8
 8004376:	4603      	mov	r3, r0
 8004378:	460a      	mov	r2, r1
 800437a:	80fb      	strh	r3, [r7, #6]
 800437c:	4613      	mov	r3, r2
 800437e:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8004380:	4b30      	ldr	r3, [pc, #192]	; (8004444 <testFilledRects+0xd4>)
 8004382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004386:	0fda      	lsrs	r2, r3, #31
 8004388:	4413      	add	r3, r2
 800438a:	105b      	asrs	r3, r3, #1
 800438c:	b21b      	sxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8004392:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <testFilledRects+0xd8>)
 8004394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004398:	0fda      	lsrs	r2, r3, #31
 800439a:	4413      	add	r3, r2
 800439c:	105b      	asrs	r3, r3, #1
 800439e:	b21b      	sxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80043a4:	2000      	movs	r0, #0
 80043a6:	f7fe ffb3 	bl	8003310 <Displ_CLS>
	n = min(_width, _height);
 80043aa:	4b27      	ldr	r3, [pc, #156]	; (8004448 <testFilledRects+0xd8>)
 80043ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80043b0:	4b24      	ldr	r3, [pc, #144]	; (8004444 <testFilledRects+0xd4>)
 80043b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	bfa8      	it	ge
 80043ba:	4613      	movge	r3, r2
 80043bc:	b21b      	sxth	r3, r3
 80043be:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e035      	b.n	8004432 <testFilledRects+0xc2>
		i2    = i / 2;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	0fda      	lsrs	r2, r3, #31
 80043ca:	4413      	add	r3, r2
 80043cc:	105b      	asrs	r3, r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	b298      	uxth	r0, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b299      	uxth	r1, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	b29c      	uxth	r4, r3
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4623      	mov	r3, r4
 80043f6:	f7fe fdc3 	bl	8002f80 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	b29b      	uxth	r3, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	b218      	sxth	r0, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	b29b      	uxth	r3, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	b219      	sxth	r1, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	b21a      	sxth	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	b21c      	sxth	r4, r3
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	2301      	movs	r3, #1
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4623      	mov	r3, r4
 8004428:	f7ff fa8c 	bl	8003944 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	3b06      	subs	r3, #6
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dcc6      	bgt.n	80043c6 <testFilledRects+0x56>
	}
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	bf00      	nop
 8004444:	200052b2 	.word	0x200052b2
 8004448:	200052b4 	.word	0x200052b4

0800444c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	460a      	mov	r2, r1
 8004456:	71fb      	strb	r3, [r7, #7]
 8004458:	4613      	mov	r3, r2
 800445a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <testFilledCircles+0x74>)
 800445e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <testFilledCircles+0x78>)
 8004466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fe ff4c 	bl	8003310 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e017      	b.n	80044ae <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e00c      	b.n	800449e <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	b218      	sxth	r0, r3
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	b219      	sxth	r1, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	b21a      	sxth	r2, r3
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	f7ff f8f3 	bl	800367c <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	dbee      	blt.n	8004484 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	dbe3      	blt.n	800447e <testFilledCircles+0x32>
        }
    }
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200052b2 	.word	0x200052b2
 80044c4:	200052b4 	.word	0x200052b4

080044c8 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	460a      	mov	r2, r1
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	4613      	mov	r3, r2
 80044d6:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <testCircles+0x7c>)
 80044e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e4:	461a      	mov	r2, r3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4413      	add	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <testCircles+0x80>)
 80044ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	e017      	b.n	8004530 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	e00c      	b.n	8004520 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	b218      	sxth	r0, r3
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	b219      	sxth	r1, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	b21a      	sxth	r2, r3
 8004512:	88bb      	ldrh	r3, [r7, #4]
 8004514:	f7fe fe28 	bl	8003168 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	dbee      	blt.n	8004506 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4413      	add	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	dbe3      	blt.n	8004500 <testCircles+0x38>
        }
    }
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200052b2 	.word	0x200052b2
 8004548:	200052b4 	.word	0x200052b4

0800454c <testTriangles>:




void testTriangles()
{
 800454c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <testTriangles+0xc0>)
 8004554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004558:	0fda      	lsrs	r2, r3, #31
 800455a:	4413      	add	r3, r2
 800455c:	105b      	asrs	r3, r3, #1
 800455e:	b21b      	sxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <testTriangles+0xc4>)
 8004566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800456a:	0fda      	lsrs	r2, r3, #31
 800456c:	4413      	add	r3, r2
 800456e:	105b      	asrs	r3, r3, #1
 8004570:	b21b      	sxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8004576:	2000      	movs	r0, #0
 8004578:	f7fe feca 	bl	8003310 <Displ_CLS>
    n     = min(cx, cy);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfa8      	it	ge
 8004584:	4613      	movge	r3, r2
 8004586:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e035      	b.n	80045fa <testTriangles+0xae>
    	Displ_drawTriangle(
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	b29b      	uxth	r3, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 800459e:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80045ac:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80045ba:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80045c8:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	b291      	uxth	r1, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	b292      	uxth	r2, r2
 80045d2:	440a      	add	r2, r1
 80045d4:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 80045d6:	b212      	sxth	r2, r2
            color565(0, 0, i));
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	10c9      	asrs	r1, r1, #3
 80045dc:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 80045de:	f001 011f 	and.w	r1, r1, #31
 80045e2:	b289      	uxth	r1, r1
 80045e4:	9102      	str	r1, [sp, #8]
 80045e6:	9201      	str	r2, [sp, #4]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4633      	mov	r3, r6
 80045ec:	462a      	mov	r2, r5
 80045ee:	4621      	mov	r1, r4
 80045f0:	f7ff f9eb 	bl	80039ca <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3305      	adds	r3, #5
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	dbc5      	blt.n	800458e <testTriangles+0x42>
    }
}
 8004602:	bf00      	nop
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460c:	200052b2 	.word	0x200052b2
 8004610:	200052b4 	.word	0x200052b4

08004614 <testFilledTriangles>:





void testFilledTriangles() {
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 800461a:	4b53      	ldr	r3, [pc, #332]	; (8004768 <testFilledTriangles+0x154>)
 800461c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004620:	0fda      	lsrs	r2, r3, #31
 8004622:	4413      	add	r3, r2
 8004624:	105b      	asrs	r3, r3, #1
 8004626:	b21b      	sxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 800462c:	4b4f      	ldr	r3, [pc, #316]	; (800476c <testFilledTriangles+0x158>)
 800462e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004632:	0fda      	lsrs	r2, r3, #31
 8004634:	4413      	add	r3, r2
 8004636:	105b      	asrs	r3, r3, #1
 8004638:	b21b      	sxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800463e:	2000      	movs	r0, #0
 8004640:	f7fe fe66 	bl	8003310 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4293      	cmp	r3, r2
 800464a:	bfa8      	it	ge
 800464c:	4613      	movge	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e080      	b.n	8004754 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	b21c      	sxth	r4, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	b29b      	uxth	r3, r3
 8004662:	b21d      	sxth	r5, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	b29b      	uxth	r3, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	b21e      	sxth	r6, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4413      	add	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	fa0f fc83 	sxth.w	ip, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	b29b      	uxth	r3, r3
 800468a:	4413      	add	r3, r2
 800468c:	b29b      	uxth	r3, r3
 800468e:	b21b      	sxth	r3, r3
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	b291      	uxth	r1, r2
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	b292      	uxth	r2, r2
 8004698:	440a      	add	r2, r1
 800469a:	b292      	uxth	r2, r2
 800469c:	b212      	sxth	r2, r2
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	00c9      	lsls	r1, r1, #3
 80046a2:	b209      	sxth	r1, r1
 80046a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80046a8:	b208      	sxth	r0, r1
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	10c9      	asrs	r1, r1, #3
 80046ae:	b209      	sxth	r1, r1
 80046b0:	f001 011f 	and.w	r1, r1, #31
 80046b4:	b209      	sxth	r1, r1
 80046b6:	4301      	orrs	r1, r0
 80046b8:	b209      	sxth	r1, r1
 80046ba:	b289      	uxth	r1, r1
 80046bc:	9102      	str	r1, [sp, #8]
 80046be:	9201      	str	r2, [sp, #4]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	4663      	mov	r3, ip
 80046c4:	4632      	mov	r2, r6
 80046c6:	4629      	mov	r1, r5
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff f9b8 	bl	8003a3e <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	b21c      	sxth	r4, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b21d      	sxth	r5, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	b21e      	sxth	r6, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4413      	add	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	fa0f fc83 	sxth.w	ip, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4413      	add	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	b21a      	sxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	b299      	uxth	r1, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	b29b      	uxth	r3, r3
 8004714:	440b      	add	r3, r1
 8004716:	b29b      	uxth	r3, r3
 8004718:	b219      	sxth	r1, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	b21b      	sxth	r3, r3
 8004720:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004724:	f023 0307 	bic.w	r3, r3, #7
 8004728:	b218      	sxth	r0, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	b21b      	sxth	r3, r3
 8004730:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004734:	b21b      	sxth	r3, r3
 8004736:	4303      	orrs	r3, r0
 8004738:	b21b      	sxth	r3, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	9302      	str	r3, [sp, #8]
 800473e:	9101      	str	r1, [sp, #4]
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	4663      	mov	r3, ip
 8004744:	4632      	mov	r2, r6
 8004746:	4629      	mov	r1, r5
 8004748:	4620      	mov	r0, r4
 800474a:	f7ff f93e 	bl	80039ca <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b05      	subs	r3, #5
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b0a      	cmp	r3, #10
 8004758:	f73f af7b 	bgt.w	8004652 <testFilledTriangles+0x3e>
    }
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	bf00      	nop
 8004768:	200052b2 	.word	0x200052b2
 800476c:	200052b4 	.word	0x200052b4

08004770 <testRoundRects>:





void testRoundRects() {
 8004770:	b5b0      	push	{r4, r5, r7, lr}
 8004772:	b08a      	sub	sp, #40	; 0x28
 8004774:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8004776:	4b33      	ldr	r3, [pc, #204]	; (8004844 <testRoundRects+0xd4>)
 8004778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477c:	0fda      	lsrs	r2, r3, #31
 800477e:	4413      	add	r3, r2
 8004780:	105b      	asrs	r3, r3, #1
 8004782:	b21b      	sxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8004788:	4b2f      	ldr	r3, [pc, #188]	; (8004848 <testRoundRects+0xd8>)
 800478a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800478e:	0fda      	lsrs	r2, r3, #31
 8004790:	4413      	add	r3, r2
 8004792:	105b      	asrs	r3, r3, #1
 8004794:	b21b      	sxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 800479a:	2000      	movs	r0, #0
 800479c:	f7fe fdb8 	bl	8003310 <Displ_CLS>
    w     = min(_width, _height);
 80047a0:	4b29      	ldr	r3, [pc, #164]	; (8004848 <testRoundRects+0xd8>)
 80047a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80047a6:	4b27      	ldr	r3, [pc, #156]	; (8004844 <testRoundRects+0xd4>)
 80047a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bfa8      	it	ge
 80047b0:	4613      	movge	r3, r2
 80047b2:	b21b      	sxth	r3, r3
 80047b4:	60fb      	str	r3, [r7, #12]
    red = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 80047ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80047c4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e031      	b.n	8004830 <testRoundRects+0xc0>
        i2 = i / 2;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	0fda      	lsrs	r2, r3, #31
 80047d0:	4413      	add	r3, r2
 80047d2:	105b      	asrs	r3, r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
        red += step;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4413      	add	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b218      	sxth	r0, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	b219      	sxth	r1, r3
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	b21c      	sxth	r4, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	b21d      	sxth	r5, r3
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	da00      	bge.n	800480a <testRoundRects+0x9a>
 8004808:	3307      	adds	r3, #7
 800480a:	10db      	asrs	r3, r3, #3
 800480c:	b21a      	sxth	r2, r3
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	b29b      	uxth	r3, r3
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	9200      	str	r2, [sp, #0]
 8004822:	462b      	mov	r3, r5
 8004824:	4622      	mov	r2, r4
 8004826:	f7ff fa66 	bl	8003cf6 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3306      	adds	r3, #6
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	dbc9      	blt.n	80047cc <testRoundRects+0x5c>
    }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	bf00      	nop
 8004844:	200052b2 	.word	0x200052b2
 8004848:	200052b4 	.word	0x200052b4

0800484c <testFilledRoundRects>:





void testFilledRoundRects() {
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <testFilledRoundRects+0xe0>)
 8004854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004858:	0fda      	lsrs	r2, r3, #31
 800485a:	4413      	add	r3, r2
 800485c:	105b      	asrs	r3, r3, #1
 800485e:	b21b      	sxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8004864:	4b32      	ldr	r3, [pc, #200]	; (8004930 <testFilledRoundRects+0xe4>)
 8004866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800486a:	0fda      	lsrs	r2, r3, #31
 800486c:	4413      	add	r3, r2
 800486e:	105b      	asrs	r3, r3, #1
 8004870:	b21b      	sxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8004876:	2000      	movs	r0, #0
 8004878:	f7fe fd4a 	bl	8003310 <Displ_CLS>
    green = 256;
 800487c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004880:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <testFilledRoundRects+0xe4>)
 8004884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <testFilledRoundRects+0xe0>)
 800488a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800488e:	4293      	cmp	r3, r2
 8004890:	bfa8      	it	ge
 8004892:	4613      	movge	r3, r2
 8004894:	b21b      	sxth	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800489c:	fb93 f3f2 	sdiv	r3, r3, r2
 80048a0:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <testFilledRoundRects+0xe4>)
 80048a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80048a8:	4b20      	ldr	r3, [pc, #128]	; (800492c <testFilledRoundRects+0xe0>)
 80048aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bfa8      	it	ge
 80048b2:	4613      	movge	r3, r2
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	e02f      	b.n	800491a <testFilledRoundRects+0xce>
        i2 = i / 2;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0fda      	lsrs	r2, r3, #31
 80048be:	4413      	add	r3, r2
 80048c0:	105b      	asrs	r3, r3, #1
 80048c2:	603b      	str	r3, [r7, #0]
        green -= step;
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b218      	sxth	r0, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b219      	sxth	r1, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	b21c      	sxth	r4, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	b21d      	sxth	r5, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da00      	bge.n	80048f8 <testFilledRoundRects+0xac>
 80048f6:	3307      	adds	r3, #7
 80048f8:	10db      	asrs	r3, r3, #3
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	00d2      	lsls	r2, r2, #3
 8004900:	b292      	uxth	r2, r2
 8004902:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8004906:	b292      	uxth	r2, r2
 8004908:	9201      	str	r2, [sp, #4]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462b      	mov	r3, r5
 800490e:	4622      	mov	r2, r4
 8004910:	f7ff fae6 	bl	8003ee0 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3b06      	subs	r3, #6
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b14      	cmp	r3, #20
 800491e:	dccc      	bgt.n	80048ba <testFilledRoundRects+0x6e>
    }
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bdb0      	pop	{r4, r5, r7, pc}
 800492a:	bf00      	nop
 800492c:	200052b2 	.word	0x200052b2
 8004930:	200052b4 	.word	0x200052b4

08004934 <testFillScreen>:




void testFillScreen()
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8004938:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800493c:	f7fe fce8 	bl	8003310 <Displ_CLS>
	Displ_CLS(GREEN);
 8004940:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004944:	f7fe fce4 	bl	8003310 <Displ_CLS>
	Displ_CLS(BLUE);
 8004948:	201f      	movs	r0, #31
 800494a:	f7fe fce1 	bl	8003310 <Displ_CLS>
	Displ_CLS(YELLOW);
 800494e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004952:	f7fe fcdd 	bl	8003310 <Displ_CLS>
	Displ_CLS(BLACK);
 8004956:	2000      	movs	r0, #0
 8004958:	f7fe fcda 	bl	8003310 <Displ_CLS>
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}

08004960 <Displ_TestAll>:





void Displ_TestAll (){
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
	testFillScreen();
 8004964:	f7ff ffe6 	bl	8004934 <testFillScreen>
	testLines(CYAN);
 8004968:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800496c:	f7ff fb5c 	bl	8004028 <testLines>
	testFastLines(RED, BLUE);
 8004970:	211f      	movs	r1, #31
 8004972:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004976:	f7ff fc59 	bl	800422c <testFastLines>
	testRects(GREEN);
 800497a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800497e:	f7ff fca3 	bl	80042c8 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8004982:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8004986:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800498a:	f7ff fcf1 	bl	8004370 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 800498e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8004992:	200a      	movs	r0, #10
 8004994:	f7ff fd5a 	bl	800444c <testFilledCircles>
	testCircles(10, WHITE);
 8004998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800499c:	200a      	movs	r0, #10
 800499e:	f7ff fd93 	bl	80044c8 <testCircles>
	testTriangles();
 80049a2:	f7ff fdd3 	bl	800454c <testTriangles>
	testFilledTriangles();
 80049a6:	f7ff fe35 	bl	8004614 <testFilledTriangles>
	testRoundRects();
 80049aa:	f7ff fee1 	bl	8004770 <testRoundRects>
	testFilledRoundRects();
 80049ae:	f7ff ff4d 	bl	800484c <testFilledRoundRects>
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049bc:	480d      	ldr	r0, [pc, #52]	; (80049f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049be:	490e      	ldr	r1, [pc, #56]	; (80049f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049c0:	4a0e      	ldr	r2, [pc, #56]	; (80049fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049c4:	e002      	b.n	80049cc <LoopCopyDataInit>

080049c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ca:	3304      	adds	r3, #4

080049cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049d0:	d3f9      	bcc.n	80049c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049d2:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049d4:	4c0b      	ldr	r4, [pc, #44]	; (8004a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049d8:	e001      	b.n	80049de <LoopFillZerobss>

080049da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049dc:	3204      	adds	r2, #4

080049de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049e0:	d3fb      	bcc.n	80049da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049e2:	f7fe f891 	bl	8002b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049e6:	f004 fcf5 	bl	80093d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049ea:	f7fc ff91 	bl	8001910 <main>
  bx  lr    
 80049ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80049fc:	0800ab6c 	.word	0x0800ab6c
  ldr r2, =_sbss
 8004a00:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004a04:	20005c10 	.word	0x20005c10

08004a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a08:	e7fe      	b.n	8004a08 <ADC_IRQHandler>
	...

08004a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_Init+0x40>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <HAL_Init+0x40>)
 8004a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_Init+0x40>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_Init+0x40>)
 8004a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_Init+0x40>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <HAL_Init+0x40>)
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a34:	2003      	movs	r0, #3
 8004a36:	f000 fd53 	bl	80054e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f000 f808 	bl	8004a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a40:	f7fd fcf6 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00

08004a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_InitTick+0x54>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_InitTick+0x58>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fd6b 	bl	800554a <HAL_SYSTICK_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00e      	b.n	8004a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0f      	cmp	r3, #15
 8004a82:	d80a      	bhi.n	8004a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a84:	2200      	movs	r2, #0
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a8c:	f000 fd33 	bl	80054f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a90:	4a06      	ldr	r2, [pc, #24]	; (8004aac <HAL_InitTick+0x5c>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000014 	.word	0x20000014
 8004aa8:	20000024 	.word	0x20000024
 8004aac:	20000020 	.word	0x20000020

08004ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_IncTick+0x20>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_IncTick+0x24>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <HAL_IncTick+0x24>)
 8004ac2:	6013      	str	r3, [r2, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000024 	.word	0x20000024
 8004ad4:	20005ac0 	.word	0x20005ac0

08004ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return uwTick;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_GetTick+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20005ac0 	.word	0x20005ac0

08004af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff ffee 	bl	8004ad8 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b08:	d005      	beq.n	8004b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_Delay+0x44>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b16:	bf00      	nop
 8004b18:	f7ff ffde 	bl	8004ad8 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d8f7      	bhi.n	8004b18 <HAL_Delay+0x28>
  {
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000024 	.word	0x20000024

08004b38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e033      	b.n	8004bb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fd fc92 	bl	8002480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b7e:	f023 0302 	bic.w	r3, r3, #2
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa5a 	bl	8005044 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	f043 0201 	orr.w	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ba6:	e001      	b.n	8004bac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_Start_DMA+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0e9      	b.n	8004db2 <HAL_ADC_Start_DMA+0x1f2>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d018      	beq.n	8004c26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c04:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_ADC_Start_DMA+0x1fc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6d      	ldr	r2, [pc, #436]	; (8004dc0 <HAL_ADC_Start_DMA+0x200>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0c9a      	lsrs	r2, r3, #18
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c18:	e002      	b.n	8004c20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f9      	bne.n	8004c1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c34:	d107      	bne.n	8004c46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 80a1 	bne.w	8004d98 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c94:	d106      	bne.n	8004ca4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f023 0206 	bic.w	r2, r3, #6
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ca2:	e002      	b.n	8004caa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cb2:	4b44      	ldr	r3, [pc, #272]	; (8004dc4 <HAL_ADC_Start_DMA+0x204>)
 8004cb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	4a43      	ldr	r2, [pc, #268]	; (8004dc8 <HAL_ADC_Start_DMA+0x208>)
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	4a42      	ldr	r2, [pc, #264]	; (8004dcc <HAL_ADC_Start_DMA+0x20c>)
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	4a41      	ldr	r2, [pc, #260]	; (8004dd0 <HAL_ADC_Start_DMA+0x210>)
 8004ccc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ce6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	334c      	adds	r3, #76	; 0x4c
 8004d02:	4619      	mov	r1, r3
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f000 fcda 	bl	80056c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d12a      	bne.n	8004d6e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <HAL_ADC_Start_DMA+0x214>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d015      	beq.n	8004d4e <HAL_ADC_Start_DMA+0x18e>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2c      	ldr	r2, [pc, #176]	; (8004dd8 <HAL_ADC_Start_DMA+0x218>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d105      	bne.n	8004d38 <HAL_ADC_Start_DMA+0x178>
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_ADC_Start_DMA+0x204>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a27      	ldr	r2, [pc, #156]	; (8004ddc <HAL_ADC_Start_DMA+0x21c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d136      	bne.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_ADC_Start_DMA+0x204>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d130      	bne.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d129      	bne.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	e020      	b.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_ADC_Start_DMA+0x214>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d11b      	bne.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d114      	bne.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	e00b      	b.n	8004db0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f043 0210 	orr.w	r2, r3, #16
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000014 	.word	0x20000014
 8004dc0:	431bde83 	.word	0x431bde83
 8004dc4:	40012300 	.word	0x40012300
 8004dc8:	0800523d 	.word	0x0800523d
 8004dcc:	080052f7 	.word	0x080052f7
 8004dd0:	08005313 	.word	0x08005313
 8004dd4:	40012000 	.word	0x40012000
 8004dd8:	40012100 	.word	0x40012100
 8004ddc:	40012200 	.word	0x40012200

08004de0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x1c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e113      	b.n	8005024 <HAL_ADC_ConfigChannel+0x244>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d925      	bls.n	8004e58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4413      	add	r3, r2
 8004e20:	3b1e      	subs	r3, #30
 8004e22:	2207      	movs	r2, #7
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	400a      	ands	r2, r1
 8004e30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68d9      	ldr	r1, [r3, #12]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4618      	mov	r0, r3
 8004e44:	4603      	mov	r3, r0
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4403      	add	r3, r0
 8004e4a:	3b1e      	subs	r3, #30
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	e022      	b.n	8004e9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6919      	ldr	r1, [r3, #16]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	400a      	ands	r2, r1
 8004e7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6919      	ldr	r1, [r3, #16]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4403      	add	r3, r0
 8004e94:	409a      	lsls	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d824      	bhi.n	8004ef0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3b05      	subs	r3, #5
 8004eb8:	221f      	movs	r2, #31
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	3b05      	subs	r3, #5
 8004ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	635a      	str	r2, [r3, #52]	; 0x34
 8004eee:	e04c      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	d824      	bhi.n	8004f42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	3b23      	subs	r3, #35	; 0x23
 8004f0a:	221f      	movs	r2, #31
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	43da      	mvns	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	400a      	ands	r2, r1
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4618      	mov	r0, r3
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	3b23      	subs	r3, #35	; 0x23
 8004f34:	fa00 f203 	lsl.w	r2, r0, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f40:	e023      	b.n	8004f8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	3b41      	subs	r3, #65	; 0x41
 8004f54:	221f      	movs	r2, #31
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	400a      	ands	r2, r1
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4618      	mov	r0, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3b41      	subs	r3, #65	; 0x41
 8004f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f8a:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_ADC_ConfigChannel+0x250>)
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a28      	ldr	r2, [pc, #160]	; (8005034 <HAL_ADC_ConfigChannel+0x254>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10f      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x1d8>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b12      	cmp	r3, #18
 8004f9e:	d10b      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_ADC_ConfigChannel+0x254>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d12b      	bne.n	800501a <HAL_ADC_ConfigChannel+0x23a>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <HAL_ADC_ConfigChannel+0x258>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <HAL_ADC_ConfigChannel+0x1f4>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b11      	cmp	r3, #17
 8004fd2:	d122      	bne.n	800501a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a11      	ldr	r2, [pc, #68]	; (8005038 <HAL_ADC_ConfigChannel+0x258>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d111      	bne.n	800501a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <HAL_ADC_ConfigChannel+0x25c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a11      	ldr	r2, [pc, #68]	; (8005040 <HAL_ADC_ConfigChannel+0x260>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	0c9a      	lsrs	r2, r3, #18
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800500c:	e002      	b.n	8005014 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3b01      	subs	r3, #1
 8005012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f9      	bne.n	800500e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012300 	.word	0x40012300
 8005034:	40012000 	.word	0x40012000
 8005038:	10000012 	.word	0x10000012
 800503c:	20000014 	.word	0x20000014
 8005040:	431bde83 	.word	0x431bde83

08005044 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800504c:	4b79      	ldr	r3, [pc, #484]	; (8005234 <ADC_Init+0x1f0>)
 800504e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	021a      	lsls	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800509c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	4a58      	ldr	r2, [pc, #352]	; (8005238 <ADC_Init+0x1f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d022      	beq.n	8005122 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6899      	ldr	r1, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800510c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	e00f      	b.n	8005142 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005140:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0202 	bic.w	r2, r2, #2
 8005150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	7e1b      	ldrb	r3, [r3, #24]
 800515c:	005a      	lsls	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800517e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800518e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	3b01      	subs	r3, #1
 800519c:	035a      	lsls	r2, r3, #13
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	e007      	b.n	80051b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	051a      	lsls	r2, r3, #20
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6899      	ldr	r1, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051fa:	025a      	lsls	r2, r3, #9
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6899      	ldr	r1, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	029a      	lsls	r2, r3, #10
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012300 	.word	0x40012300
 8005238:	0f000001 	.word	0x0f000001

0800523c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005252:	2b00      	cmp	r3, #0
 8005254:	d13c      	bne.n	80052d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d12b      	bne.n	80052c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005274:	2b00      	cmp	r3, #0
 8005276:	d127      	bne.n	80052c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005290:	2b00      	cmp	r3, #0
 8005292:	d119      	bne.n	80052c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0220 	bic.w	r2, r2, #32
 80052a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	f043 0201 	orr.w	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7fc ffcb 	bl	8002264 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052ce:	e00e      	b.n	80052ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7fd f801 	bl	80022e4 <HAL_ADC_ErrorCallback>
}
 80052e2:	e004      	b.n	80052ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7fc ffcd 	bl	80022a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7fc ffd6 	bl	80022e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <__NVIC_SetPriorityGrouping+0x44>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800535c:	4013      	ands	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800536c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005372:	4a04      	ldr	r2, [pc, #16]	; (8005384 <__NVIC_SetPriorityGrouping+0x44>)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	60d3      	str	r3, [r2, #12]
}
 8005378:	bf00      	nop
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <__NVIC_GetPriorityGrouping+0x18>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	0a1b      	lsrs	r3, r3, #8
 8005392:	f003 0307 	and.w	r3, r3, #7
}
 8005396:	4618      	mov	r0, r3
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	db0b      	blt.n	80053ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	f003 021f 	and.w	r2, r3, #31
 80053bc:	4907      	ldr	r1, [pc, #28]	; (80053dc <__NVIC_EnableIRQ+0x38>)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	095b      	lsrs	r3, r3, #5
 80053c4:	2001      	movs	r0, #1
 80053c6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e100 	.word	0xe000e100

080053e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	6039      	str	r1, [r7, #0]
 80053ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db0a      	blt.n	800540a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <__NVIC_SetPriority+0x4c>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	440b      	add	r3, r1
 8005404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005408:	e00a      	b.n	8005420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	4908      	ldr	r1, [pc, #32]	; (8005430 <__NVIC_SetPriority+0x50>)
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	3b04      	subs	r3, #4
 8005418:	0112      	lsls	r2, r2, #4
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	440b      	add	r3, r1
 800541e:	761a      	strb	r2, [r3, #24]
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	e000e100 	.word	0xe000e100
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f1c3 0307 	rsb	r3, r3, #7
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf28      	it	cs
 8005452:	2304      	movcs	r3, #4
 8005454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3304      	adds	r3, #4
 800545a:	2b06      	cmp	r3, #6
 800545c:	d902      	bls.n	8005464 <NVIC_EncodePriority+0x30>
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	3b03      	subs	r3, #3
 8005462:	e000      	b.n	8005466 <NVIC_EncodePriority+0x32>
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	fa02 f303 	lsl.w	r3, r2, r3
 8005472:	43da      	mvns	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	401a      	ands	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800547c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	43d9      	mvns	r1, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	4313      	orrs	r3, r2
         );
}
 800548e:	4618      	mov	r0, r3
 8005490:	3724      	adds	r7, #36	; 0x24
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054ac:	d301      	bcc.n	80054b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054ae:	2301      	movs	r3, #1
 80054b0:	e00f      	b.n	80054d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <SysTick_Config+0x40>)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ba:	210f      	movs	r1, #15
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c0:	f7ff ff8e 	bl	80053e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <SysTick_Config+0x40>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <SysTick_Config+0x40>)
 80054cc:	2207      	movs	r2, #7
 80054ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	e000e010 	.word	0xe000e010

080054e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ff29 	bl	8005340 <__NVIC_SetPriorityGrouping>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	4603      	mov	r3, r0
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005508:	f7ff ff3e 	bl	8005388 <__NVIC_GetPriorityGrouping>
 800550c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	6978      	ldr	r0, [r7, #20]
 8005514:	f7ff ff8e 	bl	8005434 <NVIC_EncodePriority>
 8005518:	4602      	mov	r2, r0
 800551a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff5d 	bl	80053e0 <__NVIC_SetPriority>
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff ff31 	bl	80053a4 <__NVIC_EnableIRQ>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffa2 	bl	800549c <SysTick_Config>
 8005558:	4603      	mov	r3, r0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7ff fab2 	bl	8004ad8 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e099      	b.n	80056b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055a0:	e00f      	b.n	80055c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055a2:	f7ff fa99 	bl	8004ad8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	d908      	bls.n	80055c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2203      	movs	r2, #3
 80055ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e078      	b.n	80056b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e8      	bne.n	80055a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4b38      	ldr	r3, [pc, #224]	; (80056bc <HAL_DMA_Init+0x158>)
 80055dc:	4013      	ands	r3, r2
 80055de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	2b04      	cmp	r3, #4
 800561a:	d107      	bne.n	800562c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	4313      	orrs	r3, r2
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b04      	cmp	r3, #4
 8005654:	d117      	bne.n	8005686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00e      	beq.n	8005686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fb01 	bl	8005c70 <DMA_CheckFifoParam>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005682:	2301      	movs	r3, #1
 8005684:	e016      	b.n	80056b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fab8 	bl	8005c04 <DMA_CalcBaseAndBitshift>
 8005694:	4603      	mov	r3, r0
 8005696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	223f      	movs	r2, #63	; 0x3f
 800569e:	409a      	lsls	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	f010803f 	.word	0xf010803f

080056c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Start_IT+0x26>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e040      	b.n	8005768 <HAL_DMA_Start_IT+0xa8>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d12f      	bne.n	800575a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fa4a 	bl	8005ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	223f      	movs	r2, #63	; 0x3f
 800571a:	409a      	lsls	r2, r3
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0216 	orr.w	r2, r2, #22
 800572e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0208 	orr.w	r2, r2, #8
 8005746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e005      	b.n	8005766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005766:	7dfb      	ldrb	r3, [r7, #23]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800577e:	f7ff f9ab 	bl	8004ad8 <HAL_GetTick>
 8005782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d008      	beq.n	80057a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2280      	movs	r2, #128	; 0x80
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e052      	b.n	8005848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0216 	bic.w	r2, r2, #22
 80057b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <HAL_DMA_Abort+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0208 	bic.w	r2, r2, #8
 80057e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057f2:	e013      	b.n	800581c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057f4:	f7ff f970 	bl	8004ad8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d90c      	bls.n	800581c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2203      	movs	r2, #3
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e015      	b.n	8005848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e4      	bne.n	80057f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	223f      	movs	r2, #63	; 0x3f
 8005830:	409a      	lsls	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d004      	beq.n	800586e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00c      	b.n	8005888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2205      	movs	r2, #5
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058a0:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <HAL_DMA_IRQHandler+0x248>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a8e      	ldr	r2, [pc, #568]	; (8005ae0 <HAL_DMA_IRQHandler+0x24c>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	2208      	movs	r2, #8
 80058c0:	409a      	lsls	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01a      	beq.n	8005900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d013      	beq.n	8005900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ec:	2208      	movs	r2, #8
 80058ee:	409a      	lsls	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	f043 0201 	orr.w	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	2201      	movs	r2, #1
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d012      	beq.n	8005936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005922:	2201      	movs	r2, #1
 8005924:	409a      	lsls	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592e:	f043 0202 	orr.w	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593a:	2204      	movs	r2, #4
 800593c:	409a      	lsls	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4013      	ands	r3, r2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d012      	beq.n	800596c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	2204      	movs	r2, #4
 800595a:	409a      	lsls	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f043 0204 	orr.w	r2, r3, #4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	2210      	movs	r2, #16
 8005972:	409a      	lsls	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d043      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d03c      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	2210      	movs	r2, #16
 8005990:	409a      	lsls	r2, r3
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d018      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d024      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
 80059c2:	e01f      	b.n	8005a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3
 80059d4:	e016      	b.n	8005a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0208 	bic.w	r2, r2, #8
 80059f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	2220      	movs	r2, #32
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 808f 	beq.w	8005b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8087 	beq.w	8005b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b05      	cmp	r3, #5
 8005a3c:	d136      	bne.n	8005aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0216 	bic.w	r2, r2, #22
 8005a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <HAL_DMA_IRQHandler+0x1da>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0208 	bic.w	r2, r2, #8
 8005a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	223f      	movs	r2, #63	; 0x3f
 8005a84:	409a      	lsls	r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d07e      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
        }
        return;
 8005aaa:	e079      	b.n	8005ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01d      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d031      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	4798      	blx	r3
 8005ad8:	e02c      	b.n	8005b34 <HAL_DMA_IRQHandler+0x2a0>
 8005ada:	bf00      	nop
 8005adc:	20000014 	.word	0x20000014
 8005ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d023      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
 8005af4:	e01e      	b.n	8005b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10f      	bne.n	8005b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0210 	bic.w	r2, r2, #16
 8005b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d032      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d022      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2205      	movs	r2, #5
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d307      	bcc.n	8005b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f2      	bne.n	8005b60 <HAL_DMA_IRQHandler+0x2cc>
 8005b7a:	e000      	b.n	8005b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
 8005b9e:	e000      	b.n	8005ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ba0:	bf00      	nop
    }
  }
}
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d108      	bne.n	8005be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005be6:	e007      	b.n	8005bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	60da      	str	r2, [r3, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	3b10      	subs	r3, #16
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <DMA_CalcBaseAndBitshift+0x64>)
 8005c16:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1a:	091b      	lsrs	r3, r3, #4
 8005c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <DMA_CalcBaseAndBitshift+0x68>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b03      	cmp	r3, #3
 8005c30:	d909      	bls.n	8005c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	1d1a      	adds	r2, r3, #4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	659a      	str	r2, [r3, #88]	; 0x58
 8005c44:	e007      	b.n	8005c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	aaaaaaab 	.word	0xaaaaaaab
 8005c6c:	0800ab20 	.word	0x0800ab20

08005c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11f      	bne.n	8005cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d856      	bhi.n	8005d3e <DMA_CheckFifoParam+0xce>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <DMA_CheckFifoParam+0x28>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cbb 	.word	0x08005cbb
 8005ca0:	08005ca9 	.word	0x08005ca9
 8005ca4:	08005d3f 	.word	0x08005d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d046      	beq.n	8005d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb8:	e043      	b.n	8005d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cc2:	d140      	bne.n	8005d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc8:	e03d      	b.n	8005d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	d121      	bne.n	8005d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d837      	bhi.n	8005d4a <DMA_CheckFifoParam+0xda>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <DMA_CheckFifoParam+0x70>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005cf7 	.word	0x08005cf7
 8005ce8:	08005cf1 	.word	0x08005cf1
 8005cec:	08005d09 	.word	0x08005d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf4:	e030      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d025      	beq.n	8005d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d06:	e022      	b.n	8005d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d10:	d11f      	bne.n	8005d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d16:	e01c      	b.n	8005d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d903      	bls.n	8005d26 <DMA_CheckFifoParam+0xb6>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d003      	beq.n	8005d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d24:	e018      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
      break;
 8005d2a:	e015      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e00b      	b.n	8005d56 <DMA_CheckFifoParam+0xe6>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e00a      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;
 8005d42:	bf00      	nop
 8005d44:	e008      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;
 8005d46:	bf00      	nop
 8005d48:	e006      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e004      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <DMA_CheckFifoParam+0xe8>
      break;
 8005d56:	bf00      	nop
    }
  } 
  
  return status; 
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop

08005d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b089      	sub	sp, #36	; 0x24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e165      	b.n	8006050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d84:	2201      	movs	r2, #1
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	f040 8154 	bne.w	800604a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d005      	beq.n	8005dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d130      	bne.n	8005e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005df0:	2201      	movs	r2, #1
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 0201 	and.w	r2, r3, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d017      	beq.n	8005e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	2203      	movs	r2, #3
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d123      	bne.n	8005eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	08da      	lsrs	r2, r3, #3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3208      	adds	r2, #8
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	220f      	movs	r2, #15
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	08da      	lsrs	r2, r3, #3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3208      	adds	r2, #8
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0203 	and.w	r2, r3, #3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80ae 	beq.w	800604a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	4b5d      	ldr	r3, [pc, #372]	; (8006068 <HAL_GPIO_Init+0x300>)
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	4a5c      	ldr	r2, [pc, #368]	; (8006068 <HAL_GPIO_Init+0x300>)
 8005ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005efc:	6453      	str	r3, [r2, #68]	; 0x44
 8005efe:	4b5a      	ldr	r3, [pc, #360]	; (8006068 <HAL_GPIO_Init+0x300>)
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f0a:	4a58      	ldr	r2, [pc, #352]	; (800606c <HAL_GPIO_Init+0x304>)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	3302      	adds	r3, #2
 8005f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	220f      	movs	r2, #15
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a4f      	ldr	r2, [pc, #316]	; (8006070 <HAL_GPIO_Init+0x308>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d025      	beq.n	8005f82 <HAL_GPIO_Init+0x21a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a4e      	ldr	r2, [pc, #312]	; (8006074 <HAL_GPIO_Init+0x30c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <HAL_GPIO_Init+0x216>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a4d      	ldr	r2, [pc, #308]	; (8006078 <HAL_GPIO_Init+0x310>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d019      	beq.n	8005f7a <HAL_GPIO_Init+0x212>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a4c      	ldr	r2, [pc, #304]	; (800607c <HAL_GPIO_Init+0x314>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_GPIO_Init+0x20e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a4b      	ldr	r2, [pc, #300]	; (8006080 <HAL_GPIO_Init+0x318>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00d      	beq.n	8005f72 <HAL_GPIO_Init+0x20a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a4a      	ldr	r2, [pc, #296]	; (8006084 <HAL_GPIO_Init+0x31c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <HAL_GPIO_Init+0x206>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a49      	ldr	r2, [pc, #292]	; (8006088 <HAL_GPIO_Init+0x320>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d101      	bne.n	8005f6a <HAL_GPIO_Init+0x202>
 8005f66:	2306      	movs	r3, #6
 8005f68:	e00c      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	e00a      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f6e:	2305      	movs	r3, #5
 8005f70:	e008      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f72:	2304      	movs	r3, #4
 8005f74:	e006      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f76:	2303      	movs	r3, #3
 8005f78:	e004      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e002      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_GPIO_Init+0x21c>
 8005f82:	2300      	movs	r3, #0
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	f002 0203 	and.w	r2, r2, #3
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	4093      	lsls	r3, r2
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f94:	4935      	ldr	r1, [pc, #212]	; (800606c <HAL_GPIO_Init+0x304>)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fa2:	4b3a      	ldr	r3, [pc, #232]	; (800608c <HAL_GPIO_Init+0x324>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fc6:	4a31      	ldr	r2, [pc, #196]	; (800608c <HAL_GPIO_Init+0x324>)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fcc:	4b2f      	ldr	r3, [pc, #188]	; (800608c <HAL_GPIO_Init+0x324>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_GPIO_Init+0x324>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_GPIO_Init+0x324>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_GPIO_Init+0x324>)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_GPIO_Init+0x324>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006044:	4a11      	ldr	r2, [pc, #68]	; (800608c <HAL_GPIO_Init+0x324>)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3301      	adds	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	f67f ae96 	bls.w	8005d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	3724      	adds	r7, #36	; 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800
 800606c:	40013800 	.word	0x40013800
 8006070:	40020000 	.word	0x40020000
 8006074:	40020400 	.word	0x40020400
 8006078:	40020800 	.word	0x40020800
 800607c:	40020c00 	.word	0x40020c00
 8006080:	40021000 	.word	0x40021000
 8006084:	40021400 	.word	0x40021400
 8006088:	40021800 	.word	0x40021800
 800608c:	40013c00 	.word	0x40013c00

08006090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e001      	b.n	80060b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
 80060cc:	4613      	mov	r3, r2
 80060ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060dc:	e003      	b.n	80060e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060de:	887b      	ldrh	r3, [r7, #2]
 80060e0:	041a      	lsls	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	619a      	str	r2, [r3, #24]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4013      	ands	r3, r2
 800610a:	041a      	lsls	r2, r3, #16
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	43d9      	mvns	r1, r3
 8006110:	887b      	ldrh	r3, [r7, #2]
 8006112:	400b      	ands	r3, r1
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]
}
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800613e:	4a05      	ldr	r2, [pc, #20]	; (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f806 	bl	8006158 <HAL_GPIO_EXTI_Callback>
  }
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40013c00 	.word	0x40013c00

08006158 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <HAL_PWREx_EnableOverDrive+0x90>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <HAL_PWREx_EnableOverDrive+0x90>)
 8006184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006188:	6413      	str	r3, [r2, #64]	; 0x40
 800618a:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <HAL_PWREx_EnableOverDrive+0x90>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <HAL_PWREx_EnableOverDrive+0x94>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800619c:	f7fe fc9c 	bl	8004ad8 <HAL_GetTick>
 80061a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061a2:	e009      	b.n	80061b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061a4:	f7fe fc98 	bl	8004ad8 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b2:	d901      	bls.n	80061b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e01f      	b.n	80061f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <HAL_PWREx_EnableOverDrive+0x98>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	d1ee      	bne.n	80061a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061cc:	f7fe fc84 	bl	8004ad8 <HAL_GetTick>
 80061d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061d2:	e009      	b.n	80061e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061d4:	f7fe fc80 	bl	8004ad8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e2:	d901      	bls.n	80061e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e007      	b.n	80061f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061e8:	4b07      	ldr	r3, [pc, #28]	; (8006208 <HAL_PWREx_EnableOverDrive+0x98>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f4:	d1ee      	bne.n	80061d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40023800 	.word	0x40023800
 8006204:	420e0040 	.word	0x420e0040
 8006208:	40007000 	.word	0x40007000
 800620c:	420e0044 	.word	0x420e0044

08006210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e0cc      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006224:	4b68      	ldr	r3, [pc, #416]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d90c      	bls.n	800624c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b65      	ldr	r3, [pc, #404]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0b8      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800626e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	494d      	ldr	r1, [pc, #308]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	4313      	orrs	r3, r2
 8006298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d044      	beq.n	8006330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d119      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d003      	beq.n	80062ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d107      	bne.n	80062de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	4b3f      	ldr	r3, [pc, #252]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d109      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e06f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062de:	4b3b      	ldr	r3, [pc, #236]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e067      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ee:	4b37      	ldr	r3, [pc, #220]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4934      	ldr	r1, [pc, #208]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006300:	f7fe fbea 	bl	8004ad8 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	e00a      	b.n	800631e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006308:	f7fe fbe6 	bl	8004ad8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e04f      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631e:	4b2b      	ldr	r3, [pc, #172]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 020c 	and.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d1eb      	bne.n	8006308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006330:	4b25      	ldr	r3, [pc, #148]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d20c      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b22      	ldr	r3, [pc, #136]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e032      	b.n	80063be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4916      	ldr	r1, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006396:	f000 f855 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 800639a:	4602      	mov	r2, r0
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1c0>)
 80063a8:	5ccb      	ldrb	r3, [r1, r3]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1c8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fb4a 	bl	8004a50 <HAL_InitTick>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40023c00 	.word	0x40023c00
 80063cc:	40023800 	.word	0x40023800
 80063d0:	0800ab08 	.word	0x0800ab08
 80063d4:	20000014 	.word	0x20000014
 80063d8:	20000020 	.word	0x20000020

080063dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063e2:	681b      	ldr	r3, [r3, #0]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000014 	.word	0x20000014

080063f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063f8:	f7ff fff0 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	0a9b      	lsrs	r3, r3, #10
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	4903      	ldr	r1, [pc, #12]	; (8006418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40023800 	.word	0x40023800
 8006418:	0800ab18 	.word	0x0800ab18

0800641c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006420:	f7ff ffdc 	bl	80063dc <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	0b5b      	lsrs	r3, r3, #13
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4903      	ldr	r1, [pc, #12]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40023800 	.word	0x40023800
 8006440:	0800ab18 	.word	0x0800ab18

08006444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006448:	b0ae      	sub	sp, #184	; 0xb8
 800644a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800646a:	4bcb      	ldr	r3, [pc, #812]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
 8006472:	2b0c      	cmp	r3, #12
 8006474:	f200 8206 	bhi.w	8006884 <HAL_RCC_GetSysClockFreq+0x440>
 8006478:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <HAL_RCC_GetSysClockFreq+0x3c>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	080064b5 	.word	0x080064b5
 8006484:	08006885 	.word	0x08006885
 8006488:	08006885 	.word	0x08006885
 800648c:	08006885 	.word	0x08006885
 8006490:	080064bd 	.word	0x080064bd
 8006494:	08006885 	.word	0x08006885
 8006498:	08006885 	.word	0x08006885
 800649c:	08006885 	.word	0x08006885
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	08006885 	.word	0x08006885
 80064a8:	08006885 	.word	0x08006885
 80064ac:	08006885 	.word	0x08006885
 80064b0:	080066b5 	.word	0x080066b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064b4:	4bb9      	ldr	r3, [pc, #740]	; (800679c <HAL_RCC_GetSysClockFreq+0x358>)
 80064b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80064ba:	e1e7      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064bc:	4bb8      	ldr	r3, [pc, #736]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80064be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80064c2:	e1e3      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c4:	4bb4      	ldr	r3, [pc, #720]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064d0:	4bb1      	ldr	r3, [pc, #708]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d071      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064dc:	4bae      	ldr	r3, [pc, #696]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	099b      	lsrs	r3, r3, #6
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80064ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006502:	4622      	mov	r2, r4
 8006504:	462b      	mov	r3, r5
 8006506:	f04f 0000 	mov.w	r0, #0
 800650a:	f04f 0100 	mov.w	r1, #0
 800650e:	0159      	lsls	r1, r3, #5
 8006510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006514:	0150      	lsls	r0, r2, #5
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4621      	mov	r1, r4
 800651c:	1a51      	subs	r1, r2, r1
 800651e:	6439      	str	r1, [r7, #64]	; 0x40
 8006520:	4629      	mov	r1, r5
 8006522:	eb63 0301 	sbc.w	r3, r3, r1
 8006526:	647b      	str	r3, [r7, #68]	; 0x44
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006534:	4649      	mov	r1, r9
 8006536:	018b      	lsls	r3, r1, #6
 8006538:	4641      	mov	r1, r8
 800653a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800653e:	4641      	mov	r1, r8
 8006540:	018a      	lsls	r2, r1, #6
 8006542:	4641      	mov	r1, r8
 8006544:	1a51      	subs	r1, r2, r1
 8006546:	63b9      	str	r1, [r7, #56]	; 0x38
 8006548:	4649      	mov	r1, r9
 800654a:	eb63 0301 	sbc.w	r3, r3, r1
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800655c:	4649      	mov	r1, r9
 800655e:	00cb      	lsls	r3, r1, #3
 8006560:	4641      	mov	r1, r8
 8006562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006566:	4641      	mov	r1, r8
 8006568:	00ca      	lsls	r2, r1, #3
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	4603      	mov	r3, r0
 8006570:	4622      	mov	r2, r4
 8006572:	189b      	adds	r3, r3, r2
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
 8006576:	462b      	mov	r3, r5
 8006578:	460a      	mov	r2, r1
 800657a:	eb42 0303 	adc.w	r3, r2, r3
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800658c:	4629      	mov	r1, r5
 800658e:	024b      	lsls	r3, r1, #9
 8006590:	4621      	mov	r1, r4
 8006592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006596:	4621      	mov	r1, r4
 8006598:	024a      	lsls	r2, r1, #9
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80065b0:	f7fa fb3a 	bl	8000c28 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4613      	mov	r3, r2
 80065ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065be:	e067      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c0:	4b75      	ldr	r3, [pc, #468]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	099b      	lsrs	r3, r3, #6
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80065d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80065d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065da:	2300      	movs	r3, #0
 80065dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f04f 0000 	mov.w	r0, #0
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	0159      	lsls	r1, r3, #5
 80065f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065f4:	0150      	lsls	r0, r2, #5
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4621      	mov	r1, r4
 80065fc:	1a51      	subs	r1, r2, r1
 80065fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8006600:	4629      	mov	r1, r5
 8006602:	eb63 0301 	sbc.w	r3, r3, r1
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006614:	4649      	mov	r1, r9
 8006616:	018b      	lsls	r3, r1, #6
 8006618:	4641      	mov	r1, r8
 800661a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800661e:	4641      	mov	r1, r8
 8006620:	018a      	lsls	r2, r1, #6
 8006622:	4641      	mov	r1, r8
 8006624:	ebb2 0a01 	subs.w	sl, r2, r1
 8006628:	4649      	mov	r1, r9
 800662a:	eb63 0b01 	sbc.w	fp, r3, r1
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800663a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800663e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006642:	4692      	mov	sl, r2
 8006644:	469b      	mov	fp, r3
 8006646:	4623      	mov	r3, r4
 8006648:	eb1a 0303 	adds.w	r3, sl, r3
 800664c:	623b      	str	r3, [r7, #32]
 800664e:	462b      	mov	r3, r5
 8006650:	eb4b 0303 	adc.w	r3, fp, r3
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006662:	4629      	mov	r1, r5
 8006664:	028b      	lsls	r3, r1, #10
 8006666:	4621      	mov	r1, r4
 8006668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800666c:	4621      	mov	r1, r4
 800666e:	028a      	lsls	r2, r1, #10
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006678:	2200      	movs	r2, #0
 800667a:	673b      	str	r3, [r7, #112]	; 0x70
 800667c:	677a      	str	r2, [r7, #116]	; 0x74
 800667e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006682:	f7fa fad1 	bl	8000c28 <__aeabi_uldivmod>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4613      	mov	r3, r2
 800668c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006690:	4b41      	ldr	r3, [pc, #260]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	0c1b      	lsrs	r3, r3, #16
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	3301      	adds	r3, #1
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80066a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80066b2:	e0eb      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066b4:	4b38      	ldr	r3, [pc, #224]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066c0:	4b35      	ldr	r3, [pc, #212]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d06b      	beq.n	80067a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066cc:	4b32      	ldr	r3, [pc, #200]	; (8006798 <HAL_RCC_GetSysClockFreq+0x354>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	099b      	lsrs	r3, r3, #6
 80066d2:	2200      	movs	r2, #0
 80066d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066de:	663b      	str	r3, [r7, #96]	; 0x60
 80066e0:	2300      	movs	r3, #0
 80066e2:	667b      	str	r3, [r7, #100]	; 0x64
 80066e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80066e8:	4622      	mov	r2, r4
 80066ea:	462b      	mov	r3, r5
 80066ec:	f04f 0000 	mov.w	r0, #0
 80066f0:	f04f 0100 	mov.w	r1, #0
 80066f4:	0159      	lsls	r1, r3, #5
 80066f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066fa:	0150      	lsls	r0, r2, #5
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4621      	mov	r1, r4
 8006702:	1a51      	subs	r1, r2, r1
 8006704:	61b9      	str	r1, [r7, #24]
 8006706:	4629      	mov	r1, r5
 8006708:	eb63 0301 	sbc.w	r3, r3, r1
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800671a:	4659      	mov	r1, fp
 800671c:	018b      	lsls	r3, r1, #6
 800671e:	4651      	mov	r1, sl
 8006720:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006724:	4651      	mov	r1, sl
 8006726:	018a      	lsls	r2, r1, #6
 8006728:	4651      	mov	r1, sl
 800672a:	ebb2 0801 	subs.w	r8, r2, r1
 800672e:	4659      	mov	r1, fp
 8006730:	eb63 0901 	sbc.w	r9, r3, r1
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006740:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006744:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006748:	4690      	mov	r8, r2
 800674a:	4699      	mov	r9, r3
 800674c:	4623      	mov	r3, r4
 800674e:	eb18 0303 	adds.w	r3, r8, r3
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	462b      	mov	r3, r5
 8006756:	eb49 0303 	adc.w	r3, r9, r3
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006768:	4629      	mov	r1, r5
 800676a:	024b      	lsls	r3, r1, #9
 800676c:	4621      	mov	r1, r4
 800676e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006772:	4621      	mov	r1, r4
 8006774:	024a      	lsls	r2, r1, #9
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800677e:	2200      	movs	r2, #0
 8006780:	65bb      	str	r3, [r7, #88]	; 0x58
 8006782:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006784:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006788:	f7fa fa4e 	bl	8000c28 <__aeabi_uldivmod>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4613      	mov	r3, r2
 8006792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006796:	e065      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x420>
 8006798:	40023800 	.word	0x40023800
 800679c:	00f42400 	.word	0x00f42400
 80067a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a4:	4b3d      	ldr	r3, [pc, #244]	; (800689c <HAL_RCC_GetSysClockFreq+0x458>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	2200      	movs	r2, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	4611      	mov	r1, r2
 80067b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067b4:	653b      	str	r3, [r7, #80]	; 0x50
 80067b6:	2300      	movs	r3, #0
 80067b8:	657b      	str	r3, [r7, #84]	; 0x54
 80067ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	0159      	lsls	r1, r3, #5
 80067cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d0:	0150      	lsls	r0, r2, #5
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4641      	mov	r1, r8
 80067d8:	1a51      	subs	r1, r2, r1
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	4649      	mov	r1, r9
 80067de:	eb63 0301 	sbc.w	r3, r3, r1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80067f0:	4659      	mov	r1, fp
 80067f2:	018b      	lsls	r3, r1, #6
 80067f4:	4651      	mov	r1, sl
 80067f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067fa:	4651      	mov	r1, sl
 80067fc:	018a      	lsls	r2, r1, #6
 80067fe:	4651      	mov	r1, sl
 8006800:	1a54      	subs	r4, r2, r1
 8006802:	4659      	mov	r1, fp
 8006804:	eb63 0501 	sbc.w	r5, r3, r1
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	00eb      	lsls	r3, r5, #3
 8006812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006816:	00e2      	lsls	r2, r4, #3
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	4643      	mov	r3, r8
 800681e:	18e3      	adds	r3, r4, r3
 8006820:	603b      	str	r3, [r7, #0]
 8006822:	464b      	mov	r3, r9
 8006824:	eb45 0303 	adc.w	r3, r5, r3
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006836:	4629      	mov	r1, r5
 8006838:	028b      	lsls	r3, r1, #10
 800683a:	4621      	mov	r1, r4
 800683c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006840:	4621      	mov	r1, r4
 8006842:	028a      	lsls	r2, r1, #10
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684c:	2200      	movs	r2, #0
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006850:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006852:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006856:	f7fa f9e7 	bl	8000c28 <__aeabi_uldivmod>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4613      	mov	r3, r2
 8006860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006864:	4b0d      	ldr	r3, [pc, #52]	; (800689c <HAL_RCC_GetSysClockFreq+0x458>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	0f1b      	lsrs	r3, r3, #28
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006882:	e003      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800688a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800688c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006890:	4618      	mov	r0, r3
 8006892:	37b8      	adds	r7, #184	; 0xb8
 8006894:	46bd      	mov	sp, r7
 8006896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800
 80068a0:	00f42400 	.word	0x00f42400

080068a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e28d      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8083 	beq.w	80069ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068c4:	4b94      	ldr	r3, [pc, #592]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 030c 	and.w	r3, r3, #12
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d019      	beq.n	8006904 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068d0:	4b91      	ldr	r3, [pc, #580]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d106      	bne.n	80068ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068dc:	4b8e      	ldr	r3, [pc, #568]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068e8:	d00c      	beq.n	8006904 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ea:	4b8b      	ldr	r3, [pc, #556]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80068f2:	2b0c      	cmp	r3, #12
 80068f4:	d112      	bne.n	800691c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068f6:	4b88      	ldr	r3, [pc, #544]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006902:	d10b      	bne.n	800691c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006904:	4b84      	ldr	r3, [pc, #528]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d05b      	beq.n	80069c8 <HAL_RCC_OscConfig+0x124>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d157      	bne.n	80069c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e25a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d106      	bne.n	8006934 <HAL_RCC_OscConfig+0x90>
 8006926:	4b7c      	ldr	r3, [pc, #496]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7b      	ldr	r2, [pc, #492]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e01d      	b.n	8006970 <HAL_RCC_OscConfig+0xcc>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0xb4>
 800693e:	4b76      	ldr	r3, [pc, #472]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a75      	ldr	r2, [pc, #468]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b73      	ldr	r3, [pc, #460]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a72      	ldr	r2, [pc, #456]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xcc>
 8006958:	4b6f      	ldr	r3, [pc, #444]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a6e      	ldr	r2, [pc, #440]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6b      	ldr	r2, [pc, #428]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 800696a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fe f8ae 	bl	8004ad8 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006980:	f7fe f8aa 	bl	8004ad8 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e21f      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006992:	4b61      	ldr	r3, [pc, #388]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0xdc>
 800699e:	e014      	b.n	80069ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fe f89a 	bl	8004ad8 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fe f896 	bl	8004ad8 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e20b      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ba:	4b57      	ldr	r3, [pc, #348]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x104>
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d06f      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069d6:	4b50      	ldr	r3, [pc, #320]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d017      	beq.n	8006a12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069e2:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d105      	bne.n	80069fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fa:	4b47      	ldr	r3, [pc, #284]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006a02:	2b0c      	cmp	r3, #12
 8006a04:	d11c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a06:	4b44      	ldr	r3, [pc, #272]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d116      	bne.n	8006a40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a12:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCC_OscConfig+0x186>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d001      	beq.n	8006a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e1d3      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4937      	ldr	r1, [pc, #220]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3e:	e03a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a48:	4b34      	ldr	r3, [pc, #208]	; (8006b1c <HAL_RCC_OscConfig+0x278>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fe f843 	bl	8004ad8 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fe f83f 	bl	8004ad8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e1b4      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4925      	ldr	r1, [pc, #148]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
 8006a88:	e015      	b.n	8006ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8a:	4b24      	ldr	r3, [pc, #144]	; (8006b1c <HAL_RCC_OscConfig+0x278>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fe f822 	bl	8004ad8 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a98:	f7fe f81e 	bl	8004ad8 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e193      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d036      	beq.n	8006b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <HAL_RCC_OscConfig+0x27c>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad0:	f7fe f802 	bl	8004ad8 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ad8:	f7fd fffe 	bl	8004ad8 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e173      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_OscConfig+0x274>)
 8006aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x234>
 8006af6:	e01b      	b.n	8006b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <HAL_RCC_OscConfig+0x27c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afe:	f7fd ffeb 	bl	8004ad8 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b04:	e00e      	b.n	8006b24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b06:	f7fd ffe7 	bl	8004ad8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d907      	bls.n	8006b24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e15c      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	42470000 	.word	0x42470000
 8006b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b24:	4b8a      	ldr	r3, [pc, #552]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1ea      	bne.n	8006b06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8097 	beq.w	8006c6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b42:	4b83      	ldr	r3, [pc, #524]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	4b7f      	ldr	r3, [pc, #508]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	4a7e      	ldr	r2, [pc, #504]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b5e:	4b7c      	ldr	r3, [pc, #496]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6e:	4b79      	ldr	r3, [pc, #484]	; (8006d54 <HAL_RCC_OscConfig+0x4b0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d118      	bne.n	8006bac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <HAL_RCC_OscConfig+0x4b0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a75      	ldr	r2, [pc, #468]	; (8006d54 <HAL_RCC_OscConfig+0x4b0>)
 8006b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b86:	f7fd ffa7 	bl	8004ad8 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8e:	f7fd ffa3 	bl	8004ad8 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e118      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	; (8006d54 <HAL_RCC_OscConfig+0x4b0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x31e>
 8006bb4:	4b66      	ldr	r3, [pc, #408]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	4a65      	ldr	r2, [pc, #404]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc0:	e01c      	b.n	8006bfc <HAL_RCC_OscConfig+0x358>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x340>
 8006bca:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bce:	4a60      	ldr	r2, [pc, #384]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bd0:	f043 0304 	orr.w	r3, r3, #4
 8006bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd6:	4b5e      	ldr	r3, [pc, #376]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	4a5d      	ldr	r2, [pc, #372]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	6713      	str	r3, [r2, #112]	; 0x70
 8006be2:	e00b      	b.n	8006bfc <HAL_RCC_OscConfig+0x358>
 8006be4:	4b5a      	ldr	r3, [pc, #360]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	4a59      	ldr	r2, [pc, #356]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf0:	4b57      	ldr	r3, [pc, #348]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf4:	4a56      	ldr	r2, [pc, #344]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006bf6:	f023 0304 	bic.w	r3, r3, #4
 8006bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c04:	f7fd ff68 	bl	8004ad8 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c0c:	f7fd ff64 	bl	8004ad8 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e0d7      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c22:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ee      	beq.n	8006c0c <HAL_RCC_OscConfig+0x368>
 8006c2e:	e014      	b.n	8006c5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c30:	f7fd ff52 	bl	8004ad8 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c36:	e00a      	b.n	8006c4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c38:	f7fd ff4e 	bl	8004ad8 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e0c1      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c4e:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1ee      	bne.n	8006c38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d105      	bne.n	8006c6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c60:	4b3b      	ldr	r3, [pc, #236]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	4a3a      	ldr	r2, [pc, #232]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80ad 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c76:	4b36      	ldr	r3, [pc, #216]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d060      	beq.n	8006d44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d145      	bne.n	8006d16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b33      	ldr	r3, [pc, #204]	; (8006d58 <HAL_RCC_OscConfig+0x4b4>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fd ff22 	bl	8004ad8 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fd ff1e 	bl	8004ad8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e093      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b29      	ldr	r3, [pc, #164]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69da      	ldr	r2, [r3, #28]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	071b      	lsls	r3, r3, #28
 8006ce2:	491b      	ldr	r1, [pc, #108]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce8:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCC_OscConfig+0x4b4>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cee:	f7fd fef3 	bl	8004ad8 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf4:	e008      	b.n	8006d08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf6:	f7fd feef 	bl	8004ad8 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e064      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0f0      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x452>
 8006d14:	e05c      	b.n	8006dd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCC_OscConfig+0x4b4>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1c:	f7fd fedc 	bl	8004ad8 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d24:	f7fd fed8 	bl	8004ad8 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e04d      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_RCC_OscConfig+0x4ac>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1f0      	bne.n	8006d24 <HAL_RCC_OscConfig+0x480>
 8006d42:	e045      	b.n	8006dd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e040      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <HAL_RCC_OscConfig+0x538>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d030      	beq.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d129      	bne.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d122      	bne.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d119      	bne.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d10f      	bne.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d107      	bne.n	8006dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d001      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023800 	.word	0x40023800

08006de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e07b      	b.n	8006eea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d108      	bne.n	8006e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e02:	d009      	beq.n	8006e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
 8006e0a:	e005      	b.n	8006e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fb fc38 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	ea42 0103 	orr.w	r1, r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	f003 0104 	and.w	r1, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0210 	and.w	r2, r3, #16
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b088      	sub	sp, #32
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_SPI_Transmit+0x22>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e126      	b.n	8007162 <HAL_SPI_Transmit+0x270>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f1c:	f7fd fddc 	bl	8004ad8 <HAL_GetTick>
 8006f20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d002      	beq.n	8006f38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
 8006f34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f36:	e10b      	b.n	8007150 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_SPI_Transmit+0x52>
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f48:	e102      	b.n	8007150 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f90:	d10f      	bne.n	8006fb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b40      	cmp	r3, #64	; 0x40
 8006fbe:	d007      	beq.n	8006fd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd8:	d14b      	bne.n	8007072 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SPI_Transmit+0xf6>
 8006fe2:	8afb      	ldrh	r3, [r7, #22]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d13e      	bne.n	8007066 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800700c:	e02b      	b.n	8007066 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b02      	cmp	r3, #2
 800701a:	d112      	bne.n	8007042 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	1c9a      	adds	r2, r3, #2
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007040:	e011      	b.n	8007066 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007042:	f7fd fd49 	bl	8004ad8 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d803      	bhi.n	800705a <HAL_SPI_Transmit+0x168>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007058:	d102      	bne.n	8007060 <HAL_SPI_Transmit+0x16e>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007064:	e074      	b.n	8007150 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1ce      	bne.n	800700e <HAL_SPI_Transmit+0x11c>
 8007070:	e04c      	b.n	800710c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_SPI_Transmit+0x18e>
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d140      	bne.n	8007102 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070a6:	e02c      	b.n	8007102 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d113      	bne.n	80070de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	86da      	strh	r2, [r3, #54]	; 0x36
 80070dc:	e011      	b.n	8007102 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070de:	f7fd fcfb 	bl	8004ad8 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d803      	bhi.n	80070f6 <HAL_SPI_Transmit+0x204>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_Transmit+0x20a>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007100:	e026      	b.n	8007150 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1cd      	bne.n	80070a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fafd 	bl	8007710 <SPI_EndRxTxTransaction>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800712a:	2300      	movs	r3, #0
 800712c:	613b      	str	r3, [r7, #16]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	613b      	str	r3, [r7, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	613b      	str	r3, [r7, #16]
 800713e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	77fb      	strb	r3, [r7, #31]
 800714c:	e000      	b.n	8007150 <HAL_SPI_Transmit+0x25e>
  }

error:
 800714e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007160:	7ffb      	ldrb	r3, [r7, #31]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_SPI_Transmit_DMA+0x20>
 8007188:	2302      	movs	r3, #2
 800718a:	e09b      	b.n	80072c4 <HAL_SPI_Transmit_DMA+0x158>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
 80071a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071a4:	e089      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Transmit_DMA+0x46>
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071b6:	e080      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2203      	movs	r2, #3
 80071bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071fe:	d10f      	bne.n	8007220 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800721e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007224:	4a29      	ldr	r2, [pc, #164]	; (80072cc <HAL_SPI_Transmit_DMA+0x160>)
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722c:	4a28      	ldr	r2, [pc, #160]	; (80072d0 <HAL_SPI_Transmit_DMA+0x164>)
 800722e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007234:	4a27      	ldr	r2, [pc, #156]	; (80072d4 <HAL_SPI_Transmit_DMA+0x168>)
 8007236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800723c:	2200      	movs	r2, #0
 800723e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	4619      	mov	r1, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	330c      	adds	r3, #12
 8007250:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007256:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007258:	f7fe fa32 	bl	80056c0 <HAL_DMA_Start_IT>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f043 0210 	orr.w	r2, r3, #16
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800727a:	e01e      	b.n	80072ba <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d007      	beq.n	800729a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007298:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0220 	orr.w	r2, r2, #32
 80072a8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0202 	orr.w	r2, r2, #2
 80072b8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	0800757d 	.word	0x0800757d
 80072d0:	080074d5 	.word	0x080074d5
 80072d4:	08007599 	.word	0x08007599

080072d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10e      	bne.n	8007318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007300:	2b00      	cmp	r3, #0
 8007302:	d009      	beq.n	8007318 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
    return;
 8007316:	e0ce      	b.n	80074b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <HAL_SPI_IRQHandler+0x5e>
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
    return;
 8007334:	e0bf      	b.n	80074b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <HAL_SPI_IRQHandler+0x7e>
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80b0 	beq.w	80074b6 <HAL_SPI_IRQHandler+0x1de>
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80aa 	beq.w	80074b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d023      	beq.n	80073b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b03      	cmp	r3, #3
 8007376:	d011      	beq.n	800739c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737c:	f043 0204 	orr.w	r2, r3, #4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e00b      	b.n	80073b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
        return;
 80073b2:	e080      	b.n	80074b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d014      	beq.n	80073e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00c      	beq.n	800740c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	f043 0208 	orr.w	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007410:	2b00      	cmp	r3, #0
 8007412:	d04f      	beq.n	80074b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007422:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <HAL_SPI_IRQHandler+0x168>
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d034      	beq.n	80074aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0203 	bic.w	r2, r2, #3
 800744e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d011      	beq.n	800747c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745c:	4a17      	ldr	r2, [pc, #92]	; (80074bc <HAL_SPI_IRQHandler+0x1e4>)
 800745e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe f9f3 	bl	8005850 <HAL_DMA_Abort_IT>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007480:	2b00      	cmp	r3, #0
 8007482:	d016      	beq.n	80074b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	4a0c      	ldr	r2, [pc, #48]	; (80074bc <HAL_SPI_IRQHandler+0x1e4>)
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe f9dd 	bl	8005850 <HAL_DMA_Abort_IT>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80074a8:	e003      	b.n	80074b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fb fd3c 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074b0:	e000      	b.n	80074b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80074b2:	bf00      	nop
    return;
 80074b4:	bf00      	nop
  }
}
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	080075d9 	.word	0x080075d9

080074c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e2:	f7fd faf9 	bl	8004ad8 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f6:	d03b      	beq.n	8007570 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0220 	bic.w	r2, r2, #32
 8007506:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0202 	bic.w	r2, r2, #2
 8007516:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	2164      	movs	r1, #100	; 0x64
 800751c:	6978      	ldr	r0, [r7, #20]
 800751e:	f000 f8f7 	bl	8007710 <SPI_EndRxTxTransaction>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752c:	f043 0220 	orr.w	r2, r3, #32
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2200      	movs	r2, #0
 8007556:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	f7fb fcdd 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800756e:	e002      	b.n	8007576 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007570:	6978      	ldr	r0, [r7, #20]
 8007572:	f7fb fcef 	bl	8002f54 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff ff98 	bl	80074c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0203 	bic.w	r2, r2, #3
 80075b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f043 0210 	orr.w	r2, r3, #16
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7fb fcac 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7fb fc98 	bl	8002f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007610:	f7fd fa62 	bl	8004ad8 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4413      	add	r3, r2
 800761e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007620:	f7fd fa5a 	bl	8004ad8 <HAL_GetTick>
 8007624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	015b      	lsls	r3, r3, #5
 800762c:	0d1b      	lsrs	r3, r3, #20
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	fb02 f303 	mul.w	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007636:	e054      	b.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800763e:	d050      	beq.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007640:	f7fd fa4a 	bl	8004ad8 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	429a      	cmp	r2, r3
 800764e:	d902      	bls.n	8007656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d13d      	bne.n	80076d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800766e:	d111      	bne.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007678:	d004      	beq.n	8007684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007682:	d107      	bne.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769c:	d10f      	bne.n	80076be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e017      	b.n	8007702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3b01      	subs	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4013      	ands	r3, r2
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	bf0c      	ite	eq
 80076f2:	2301      	moveq	r3, #1
 80076f4:	2300      	movne	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	79fb      	ldrb	r3, [r7, #7]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d19b      	bne.n	8007638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000014 	.word	0x20000014

08007710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800771c:	4b1b      	ldr	r3, [pc, #108]	; (800778c <SPI_EndRxTxTransaction+0x7c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <SPI_EndRxTxTransaction+0x80>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	0d5b      	lsrs	r3, r3, #21
 8007728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800772c:	fb02 f303 	mul.w	r3, r2, r3
 8007730:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773a:	d112      	bne.n	8007762 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff ff5a 	bl	8007600 <SPI_WaitFlagStateUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d016      	beq.n	8007780 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007756:	f043 0220 	orr.w	r2, r3, #32
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e00f      	b.n	8007782 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3b01      	subs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007778:	2b80      	cmp	r3, #128	; 0x80
 800777a:	d0f2      	beq.n	8007762 <SPI_EndRxTxTransaction+0x52>
 800777c:	e000      	b.n	8007780 <SPI_EndRxTxTransaction+0x70>
        break;
 800777e:	bf00      	nop
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000014 	.word	0x20000014
 8007790:	165e9f81 	.word	0x165e9f81

08007794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e041      	b.n	800782a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fb f816 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 faa0 	bl	8007d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	d001      	beq.n	800784c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e04e      	b.n	80078ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d01d      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	; (80078fc <HAL_TIM_Base_Start_IT+0xc8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <HAL_TIM_Base_Start_IT+0xcc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1c      	ldr	r2, [pc, #112]	; (8007904 <HAL_TIM_Base_Start_IT+0xd0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <HAL_TIM_Base_Start_IT+0xd4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a19      	ldr	r2, [pc, #100]	; (800790c <HAL_TIM_Base_Start_IT+0xd8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_TIM_Base_Start_IT+0x80>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a18      	ldr	r2, [pc, #96]	; (8007910 <HAL_TIM_Base_Start_IT+0xdc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d111      	bne.n	80078d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b06      	cmp	r3, #6
 80078c4:	d010      	beq.n	80078e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0201 	orr.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d6:	e007      	b.n	80078e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40010400 	.word	0x40010400
 800790c:	40014000 	.word	0x40014000
 8007910:	40001800 	.word	0x40001800

08007914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d122      	bne.n	8007970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b02      	cmp	r3, #2
 8007936:	d11b      	bne.n	8007970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0202 	mvn.w	r2, #2
 8007940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f9bf 	bl	8007cda <HAL_TIM_IC_CaptureCallback>
 800795c:	e005      	b.n	800796a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9b1 	bl	8007cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9c2 	bl	8007cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b04      	cmp	r3, #4
 800797c:	d122      	bne.n	80079c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b04      	cmp	r3, #4
 800798a:	d11b      	bne.n	80079c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0204 	mvn.w	r2, #4
 8007994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f995 	bl	8007cda <HAL_TIM_IC_CaptureCallback>
 80079b0:	e005      	b.n	80079be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f987 	bl	8007cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f998 	bl	8007cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b08      	cmp	r3, #8
 80079d0:	d122      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0308 	and.w	r3, r3, #8
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d11b      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0208 	mvn.w	r2, #8
 80079e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2204      	movs	r2, #4
 80079ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f96b 	bl	8007cda <HAL_TIM_IC_CaptureCallback>
 8007a04:	e005      	b.n	8007a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f95d 	bl	8007cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f96e 	bl	8007cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d122      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d11b      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0210 	mvn.w	r2, #16
 8007a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2208      	movs	r2, #8
 8007a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f941 	bl	8007cda <HAL_TIM_IC_CaptureCallback>
 8007a58:	e005      	b.n	8007a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f933 	bl	8007cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f944 	bl	8007cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d10e      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0201 	mvn.w	r2, #1
 8007a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f90d 	bl	8007cb2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa2:	2b80      	cmp	r3, #128	; 0x80
 8007aa4:	d10e      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d107      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 faea 	bl	8008098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d10e      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f909 	bl	8007d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0220 	mvn.w	r2, #32
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fab4 	bl	8008084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_TIM_ConfigClockSource+0x1c>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e0b4      	b.n	8007caa <HAL_TIM_ConfigClockSource+0x186>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b78:	d03e      	beq.n	8007bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7e:	f200 8087 	bhi.w	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	f000 8086 	beq.w	8007c96 <HAL_TIM_ConfigClockSource+0x172>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8e:	d87f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b70      	cmp	r3, #112	; 0x70
 8007b92:	d01a      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0xa6>
 8007b94:	2b70      	cmp	r3, #112	; 0x70
 8007b96:	d87b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b60      	cmp	r3, #96	; 0x60
 8007b9a:	d050      	beq.n	8007c3e <HAL_TIM_ConfigClockSource+0x11a>
 8007b9c:	2b60      	cmp	r3, #96	; 0x60
 8007b9e:	d877      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b50      	cmp	r3, #80	; 0x50
 8007ba2:	d03c      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0xfa>
 8007ba4:	2b50      	cmp	r3, #80	; 0x50
 8007ba6:	d873      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b40      	cmp	r3, #64	; 0x40
 8007baa:	d058      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0x13a>
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d86f      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d064      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bb4:	2b30      	cmp	r3, #48	; 0x30
 8007bb6:	d86b      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d060      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d867      	bhi.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05c      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d05a      	beq.n	8007c7e <HAL_TIM_ConfigClockSource+0x15a>
 8007bc8:	e062      	b.n	8007c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6899      	ldr	r1, [r3, #8]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f000 f9b7 	bl	8007f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	609a      	str	r2, [r3, #8]
      break;
 8007bf6:	e04f      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f000 f9a0 	bl	8007f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689a      	ldr	r2, [r3, #8]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1a:	609a      	str	r2, [r3, #8]
      break;
 8007c1c:	e03c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6859      	ldr	r1, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f000 f914 	bl	8007e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2150      	movs	r1, #80	; 0x50
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f96d 	bl	8007f16 <TIM_ITRx_SetConfig>
      break;
 8007c3c:	e02c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6818      	ldr	r0, [r3, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f000 f933 	bl	8007eb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2160      	movs	r1, #96	; 0x60
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f95d 	bl	8007f16 <TIM_ITRx_SetConfig>
      break;
 8007c5c:	e01c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6859      	ldr	r1, [r3, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f000 f8f4 	bl	8007e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f94d 	bl	8007f16 <TIM_ITRx_SetConfig>
      break;
 8007c7c:	e00c      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 f944 	bl	8007f16 <TIM_ITRx_SetConfig>
      break;
 8007c8e:	e003      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	73fb      	strb	r3, [r7, #15]
      break;
 8007c94:	e000      	b.n	8007c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a40      	ldr	r2, [pc, #256]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d36:	d00f      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3d      	ldr	r2, [pc, #244]	; (8007e30 <TIM_Base_SetConfig+0x118>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00b      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a3c      	ldr	r2, [pc, #240]	; (8007e34 <TIM_Base_SetConfig+0x11c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d007      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a3b      	ldr	r2, [pc, #236]	; (8007e38 <TIM_Base_SetConfig+0x120>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a3a      	ldr	r2, [pc, #232]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d108      	bne.n	8007d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2f      	ldr	r2, [pc, #188]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d027      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	; (8007e30 <TIM_Base_SetConfig+0x118>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d023      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <TIM_Base_SetConfig+0x11c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01f      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <TIM_Base_SetConfig+0x120>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d017      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a28      	ldr	r2, [pc, #160]	; (8007e40 <TIM_Base_SetConfig+0x128>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a27      	ldr	r2, [pc, #156]	; (8007e44 <TIM_Base_SetConfig+0x12c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a26      	ldr	r2, [pc, #152]	; (8007e48 <TIM_Base_SetConfig+0x130>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <TIM_Base_SetConfig+0x134>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a24      	ldr	r2, [pc, #144]	; (8007e50 <TIM_Base_SetConfig+0x138>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <TIM_Base_SetConfig+0x13c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d108      	bne.n	8007ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_Base_SetConfig+0xf8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d103      	bne.n	8007e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	615a      	str	r2, [r3, #20]
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800
 8007e4c:	40001800 	.word	0x40001800
 8007e50:	40001c00 	.word	0x40001c00
 8007e54:	40002000 	.word	0x40002000

08007e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f023 0201 	bic.w	r2, r3, #1
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f023 030a 	bic.w	r3, r3, #10
 8007e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b087      	sub	sp, #28
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	f023 0210 	bic.w	r2, r3, #16
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	031b      	lsls	r3, r3, #12
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f043 0307 	orr.w	r3, r3, #7
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	609a      	str	r2, [r3, #8]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	021a      	lsls	r2, r3, #8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	609a      	str	r2, [r3, #8]
}
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e05a      	b.n	800805a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a21      	ldr	r2, [pc, #132]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d022      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff0:	d01d      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d018      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a18      	ldr	r2, [pc, #96]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a17      	ldr	r2, [pc, #92]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d10c      	bne.n	8008048 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4313      	orrs	r3, r2
 800803e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40001800 	.word	0x40001800

08008084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e03f      	b.n	800813e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fa fbb0 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2224      	movs	r2, #36	; 0x24
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fddf 	bl	8008cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691a      	ldr	r2, [r3, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	695a      	ldr	r2, [r3, #20]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b08a      	sub	sp, #40	; 0x28
 800814a:	af02      	add	r7, sp, #8
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	4613      	mov	r3, r2
 8008154:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b20      	cmp	r3, #32
 8008164:	d17c      	bne.n	8008260 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <HAL_UART_Transmit+0x2c>
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e075      	b.n	8008262 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_UART_Transmit+0x3e>
 8008180:	2302      	movs	r3, #2
 8008182:	e06e      	b.n	8008262 <HAL_UART_Transmit+0x11c>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2221      	movs	r2, #33	; 0x21
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800819a:	f7fc fc9d 	bl	8004ad8 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	88fa      	ldrh	r2, [r7, #6]
 80081aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b4:	d108      	bne.n	80081c8 <HAL_UART_Transmit+0x82>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d104      	bne.n	80081c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	e003      	b.n	80081d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081d8:	e02a      	b.n	8008230 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2200      	movs	r2, #0
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fb1f 	bl	8008828 <UART_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e036      	b.n	8008262 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	3302      	adds	r3, #2
 800820e:	61bb      	str	r3, [r7, #24]
 8008210:	e007      	b.n	8008222 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1cf      	bne.n	80081da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2200      	movs	r2, #0
 8008242:	2140      	movs	r1, #64	; 0x40
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 faef 	bl	8008828 <UART_WaitOnFlagUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e006      	b.n	8008262 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008260:	2302      	movs	r3, #2
  }
}
 8008262:	4618      	mov	r0, r3
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	60f8      	str	r0, [r7, #12]
 8008272:	60b9      	str	r1, [r7, #8]
 8008274:	4613      	mov	r3, r2
 8008276:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b20      	cmp	r3, #32
 8008282:	d11d      	bne.n	80082c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <HAL_UART_Receive_IT+0x26>
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e016      	b.n	80082c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Receive_IT+0x38>
 800829e:	2302      	movs	r3, #2
 80082a0:	e00f      	b.n	80082c2 <HAL_UART_Receive_IT+0x58>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	461a      	mov	r2, r3
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 fb24 	bl	8008904 <UART_Start_Receive_IT>
 80082bc:	4603      	mov	r3, r0
 80082be:	e000      	b.n	80082c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
  }
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b0ba      	sub	sp, #232	; 0xe8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800830a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10f      	bne.n	8008332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <HAL_UART_IRQHandler+0x66>
 800831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc07 	bl	8008b3e <UART_Receive_IT>
      return;
 8008330:	e256      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 80de 	beq.w	80084f8 <HAL_UART_IRQHandler+0x22c>
 800833c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800834c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80d1 	beq.w	80084f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <HAL_UART_IRQHandler+0xae>
 8008362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008372:	f043 0201 	orr.w	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <HAL_UART_IRQHandler+0xd2>
 8008386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008396:	f043 0202 	orr.w	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <HAL_UART_IRQHandler+0xf6>
 80083aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f043 0204 	orr.w	r2, r3, #4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d011      	beq.n	80083f2 <HAL_UART_IRQHandler+0x126>
 80083ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f043 0208 	orr.w	r2, r3, #8
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 81ed 	beq.w	80087d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_UART_IRQHandler+0x14e>
 8008408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fb92 	bl	8008b3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	bf0c      	ite	eq
 8008428:	2301      	moveq	r3, #1
 800842a:	2300      	movne	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <HAL_UART_IRQHandler+0x17a>
 800843e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d04f      	beq.n	80084e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa9a 	bl	8008980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d141      	bne.n	80084de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008486:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800848a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800849e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1d9      	bne.n	800845a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d013      	beq.n	80084d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	4a7d      	ldr	r2, [pc, #500]	; (80086a8 <HAL_UART_IRQHandler+0x3dc>)
 80084b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd f9c8 	bl	8005850 <HAL_DMA_Abort_IT>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e00e      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f990 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e00a      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f98c 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	e006      	b.n	80084f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f988 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084f2:	e170      	b.n	80087d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	bf00      	nop
    return;
 80084f6:	e16e      	b.n	80087d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 814a 	bne.w	8008796 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8143 	beq.w	8008796 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 813c 	beq.w	8008796 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800851e:	2300      	movs	r3, #0
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	f040 80b4 	bne.w	80086ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8140 	beq.w	80087da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800855e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008562:	429a      	cmp	r2, r3
 8008564:	f080 8139 	bcs.w	80087da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800856e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	f000 8088 	beq.w	800868e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1d9      	bne.n	800857e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3314      	adds	r3, #20
 80085d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3314      	adds	r3, #20
 80085ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e1      	bne.n	80085ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3314      	adds	r3, #20
 800860c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3314      	adds	r3, #20
 8008626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800862a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800862c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008630:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e3      	bne.n	8008606 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800865c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865e:	f023 0310 	bic.w	r3, r3, #16
 8008662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	330c      	adds	r3, #12
 800866c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008670:	65ba      	str	r2, [r7, #88]	; 0x58
 8008672:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e3      	bne.n	800864c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd f871 	bl	8005770 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008696:	b29b      	uxth	r3, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	b29b      	uxth	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8b6 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086a4:	e099      	b.n	80087da <HAL_UART_IRQHandler+0x50e>
 80086a6:	bf00      	nop
 80086a8:	08008a47 	.word	0x08008a47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 808b 	beq.w	80087de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8086 	beq.w	80087de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	330c      	adds	r3, #12
 80086d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	330c      	adds	r3, #12
 80086f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086f6:	647a      	str	r2, [r7, #68]	; 0x44
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e3      	bne.n	80086d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	623b      	str	r3, [r7, #32]
   return(result);
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3314      	adds	r3, #20
 800872a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800872e:	633a      	str	r2, [r7, #48]	; 0x30
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e3      	bne.n	800870a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	330c      	adds	r3, #12
 8008770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008774:	61fa      	str	r2, [r7, #28]
 8008776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	617b      	str	r3, [r7, #20]
   return(result);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e3      	bne.n	8008750 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f83e 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008794:	e023      	b.n	80087de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_UART_IRQHandler+0x4ea>
 80087a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f95d 	bl	8008a6e <UART_Transmit_IT>
    return;
 80087b4:	e014      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <HAL_UART_IRQHandler+0x514>
 80087c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f99d 	bl	8008b0e <UART_EndTransmit_IT>
    return;
 80087d4:	e004      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
    return;
 80087d6:	bf00      	nop
 80087d8:	e002      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
      return;
 80087da:	bf00      	nop
 80087dc:	e000      	b.n	80087e0 <HAL_UART_IRQHandler+0x514>
      return;
 80087de:	bf00      	nop
  }
}
 80087e0:	37e8      	adds	r7, #232	; 0xe8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b090      	sub	sp, #64	; 0x40
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008838:	e050      	b.n	80088dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008840:	d04c      	beq.n	80088dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <UART_WaitOnFlagUntilTimeout+0x30>
 8008848:	f7fc f946 	bl	8004ad8 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008854:	429a      	cmp	r2, r3
 8008856:	d241      	bcs.n	80088dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008878:	637a      	str	r2, [r7, #52]	; 0x34
 800887a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800887e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008880:	e841 2300 	strex	r3, r2, [r1]
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e5      	bne.n	8008858 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3314      	adds	r3, #20
 8008892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f023 0301 	bic.w	r3, r3, #1
 80088a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3314      	adds	r3, #20
 80088aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ac:	623a      	str	r2, [r7, #32]
 80088ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	6a3a      	ldr	r2, [r7, #32]
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e5      	bne.n	800888c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e00f      	b.n	80088fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	4013      	ands	r3, r2
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	bf0c      	ite	eq
 80088ec:	2301      	moveq	r3, #1
 80088ee:	2300      	movne	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	461a      	mov	r2, r3
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d09f      	beq.n	800883a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3740      	adds	r7, #64	; 0x40
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	88fa      	ldrh	r2, [r7, #6]
 800891c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2222      	movs	r2, #34	; 0x22
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d007      	beq.n	8008952 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008950:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695a      	ldr	r2, [r3, #20]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0201 	orr.w	r2, r2, #1
 8008960:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0220 	orr.w	r2, r2, #32
 8008970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b095      	sub	sp, #84	; 0x54
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	330c      	adds	r3, #12
 800898e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089a8:	643a      	str	r2, [r7, #64]	; 0x40
 80089aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3314      	adds	r3, #20
 80089c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3314      	adds	r3, #20
 80089da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e5      	bne.n	80089bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d119      	bne.n	8008a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f023 0310 	bic.w	r3, r3, #16
 8008a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	330c      	adds	r3, #12
 8008a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a18:	61ba      	str	r2, [r7, #24]
 8008a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6979      	ldr	r1, [r7, #20]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	613b      	str	r3, [r7, #16]
   return(result);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e5      	bne.n	80089f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a3a:	bf00      	nop
 8008a3c:	3754      	adds	r7, #84	; 0x54
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff fecb 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b085      	sub	sp, #20
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b21      	cmp	r3, #33	; 0x21
 8008a80:	d13e      	bne.n	8008b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	d114      	bne.n	8008ab6 <UART_Transmit_IT+0x48>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d110      	bne.n	8008ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	1c9a      	adds	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	621a      	str	r2, [r3, #32]
 8008ab4:	e008      	b.n	8008ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	1c59      	adds	r1, r3, #1
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	6211      	str	r1, [r2, #32]
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10f      	bne.n	8008afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	e000      	b.n	8008b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b00:	2302      	movs	r3, #2
  }
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff fe5a 	bl	80087e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b08c      	sub	sp, #48	; 0x30
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b22      	cmp	r3, #34	; 0x22
 8008b50:	f040 80ab 	bne.w	8008caa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	d117      	bne.n	8008b8e <UART_Receive_IT+0x50>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d113      	bne.n	8008b8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	1c9a      	adds	r2, r3, #2
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b8c:	e026      	b.n	8008bdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba0:	d007      	beq.n	8008bb2 <UART_Receive_IT+0x74>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <UART_Receive_IT+0x82>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e008      	b.n	8008bd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bcc:	b2da      	uxtb	r2, r3
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	4619      	mov	r1, r3
 8008bea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d15a      	bne.n	8008ca6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0220 	bic.w	r2, r2, #32
 8008bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695a      	ldr	r2, [r3, #20]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0201 	bic.w	r2, r2, #1
 8008c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d135      	bne.n	8008c9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	613b      	str	r3, [r7, #16]
   return(result);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f023 0310 	bic.w	r3, r3, #16
 8008c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	330c      	adds	r3, #12
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	623a      	str	r2, [r7, #32]
 8008c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	69f9      	ldr	r1, [r7, #28]
 8008c5c:	6a3a      	ldr	r2, [r7, #32]
 8008c5e:	e841 2300 	strex	r3, r2, [r1]
 8008c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1e5      	bne.n	8008c36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b10      	cmp	r3, #16
 8008c76:	d10a      	bne.n	8008c8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff fdbb 	bl	8008810 <HAL_UARTEx_RxEventCallback>
 8008c9a:	e002      	b.n	8008ca2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7f9 fb77 	bl	8002390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e002      	b.n	8008cac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e000      	b.n	8008cac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008caa:	2302      	movs	r3, #2
  }
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3730      	adds	r7, #48	; 0x30
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb8:	b0c0      	sub	sp, #256	; 0x100
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	68d9      	ldr	r1, [r3, #12]
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	ea40 0301 	orr.w	r3, r0, r1
 8008cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d0c:	f021 010c 	bic.w	r1, r1, #12
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d1a:	430b      	orrs	r3, r1
 8008d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2e:	6999      	ldr	r1, [r3, #24]
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	ea40 0301 	orr.w	r3, r0, r1
 8008d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b8f      	ldr	r3, [pc, #572]	; (8008f80 <UART_SetConfig+0x2cc>)
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d005      	beq.n	8008d54 <UART_SetConfig+0xa0>
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4b8d      	ldr	r3, [pc, #564]	; (8008f84 <UART_SetConfig+0x2d0>)
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d104      	bne.n	8008d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d54:	f7fd fb62 	bl	800641c <HAL_RCC_GetPCLK2Freq>
 8008d58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d5c:	e003      	b.n	8008d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d5e:	f7fd fb49 	bl	80063f4 <HAL_RCC_GetPCLK1Freq>
 8008d62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d70:	f040 810c 	bne.w	8008f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	1891      	adds	r1, r2, r2
 8008d8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d8e:	415b      	adcs	r3, r3
 8008d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d96:	4621      	mov	r1, r4
 8008d98:	eb12 0801 	adds.w	r8, r2, r1
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	eb43 0901 	adc.w	r9, r3, r1
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	f04f 0300 	mov.w	r3, #0
 8008daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008db6:	4690      	mov	r8, r2
 8008db8:	4699      	mov	r9, r3
 8008dba:	4623      	mov	r3, r4
 8008dbc:	eb18 0303 	adds.w	r3, r8, r3
 8008dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	eb49 0303 	adc.w	r3, r9, r3
 8008dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008de2:	460b      	mov	r3, r1
 8008de4:	18db      	adds	r3, r3, r3
 8008de6:	653b      	str	r3, [r7, #80]	; 0x50
 8008de8:	4613      	mov	r3, r2
 8008dea:	eb42 0303 	adc.w	r3, r2, r3
 8008dee:	657b      	str	r3, [r7, #84]	; 0x54
 8008df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008df8:	f7f7 ff16 	bl	8000c28 <__aeabi_uldivmod>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4b61      	ldr	r3, [pc, #388]	; (8008f88 <UART_SetConfig+0x2d4>)
 8008e02:	fba3 2302 	umull	r2, r3, r3, r2
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	011c      	lsls	r4, r3, #4
 8008e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	464b      	mov	r3, r9
 8008e20:	1891      	adds	r1, r2, r2
 8008e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e24:	415b      	adcs	r3, r3
 8008e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8008e32:	4649      	mov	r1, r9
 8008e34:	eb43 0b01 	adc.w	fp, r3, r1
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e4c:	4692      	mov	sl, r2
 8008e4e:	469b      	mov	fp, r3
 8008e50:	4643      	mov	r3, r8
 8008e52:	eb1a 0303 	adds.w	r3, sl, r3
 8008e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8008e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	18db      	adds	r3, r3, r3
 8008e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e7e:	4613      	mov	r3, r2
 8008e80:	eb42 0303 	adc.w	r3, r2, r3
 8008e84:	647b      	str	r3, [r7, #68]	; 0x44
 8008e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e8e:	f7f7 fecb 	bl	8000c28 <__aeabi_uldivmod>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4611      	mov	r1, r2
 8008e98:	4b3b      	ldr	r3, [pc, #236]	; (8008f88 <UART_SetConfig+0x2d4>)
 8008e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	2264      	movs	r2, #100	; 0x64
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
 8008ea6:	1acb      	subs	r3, r1, r3
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008eae:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <UART_SetConfig+0x2d4>)
 8008eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb4:	095b      	lsrs	r3, r3, #5
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ebc:	441c      	add	r4, r3
 8008ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	1891      	adds	r1, r2, r2
 8008ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ed8:	415b      	adcs	r3, r3
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	1851      	adds	r1, r2, r1
 8008ee4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	414b      	adcs	r3, r1
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ef8:	4659      	mov	r1, fp
 8008efa:	00cb      	lsls	r3, r1, #3
 8008efc:	4651      	mov	r1, sl
 8008efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f02:	4651      	mov	r1, sl
 8008f04:	00ca      	lsls	r2, r1, #3
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f14:	464b      	mov	r3, r9
 8008f16:	460a      	mov	r2, r1
 8008f18:	eb42 0303 	adc.w	r3, r2, r3
 8008f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f34:	460b      	mov	r3, r1
 8008f36:	18db      	adds	r3, r3, r3
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	eb42 0303 	adc.w	r3, r2, r3
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f4a:	f7f7 fe6d 	bl	8000c28 <__aeabi_uldivmod>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <UART_SetConfig+0x2d4>)
 8008f54:	fba3 1302 	umull	r1, r3, r3, r2
 8008f58:	095b      	lsrs	r3, r3, #5
 8008f5a:	2164      	movs	r1, #100	; 0x64
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	3332      	adds	r3, #50	; 0x32
 8008f66:	4a08      	ldr	r2, [pc, #32]	; (8008f88 <UART_SetConfig+0x2d4>)
 8008f68:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6c:	095b      	lsrs	r3, r3, #5
 8008f6e:	f003 0207 	and.w	r2, r3, #7
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4422      	add	r2, r4
 8008f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f7c:	e106      	b.n	800918c <UART_SetConfig+0x4d8>
 8008f7e:	bf00      	nop
 8008f80:	40011000 	.word	0x40011000
 8008f84:	40011400 	.word	0x40011400
 8008f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	1891      	adds	r1, r2, r2
 8008fa4:	6239      	str	r1, [r7, #32]
 8008fa6:	415b      	adcs	r3, r3
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8008faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fae:	4641      	mov	r1, r8
 8008fb0:	1854      	adds	r4, r2, r1
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	eb43 0501 	adc.w	r5, r3, r1
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	00eb      	lsls	r3, r5, #3
 8008fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fc6:	00e2      	lsls	r2, r4, #3
 8008fc8:	4614      	mov	r4, r2
 8008fca:	461d      	mov	r5, r3
 8008fcc:	4643      	mov	r3, r8
 8008fce:	18e3      	adds	r3, r4, r3
 8008fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	eb45 0303 	adc.w	r3, r5, r3
 8008fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	f04f 0300 	mov.w	r3, #0
 8008ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	008b      	lsls	r3, r1, #2
 8008ffe:	4621      	mov	r1, r4
 8009000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009004:	4621      	mov	r1, r4
 8009006:	008a      	lsls	r2, r1, #2
 8009008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800900c:	f7f7 fe0c 	bl	8000c28 <__aeabi_uldivmod>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4b60      	ldr	r3, [pc, #384]	; (8009198 <UART_SetConfig+0x4e4>)
 8009016:	fba3 2302 	umull	r2, r3, r3, r2
 800901a:	095b      	lsrs	r3, r3, #5
 800901c:	011c      	lsls	r4, r3, #4
 800901e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009022:	2200      	movs	r2, #0
 8009024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800902c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009030:	4642      	mov	r2, r8
 8009032:	464b      	mov	r3, r9
 8009034:	1891      	adds	r1, r2, r2
 8009036:	61b9      	str	r1, [r7, #24]
 8009038:	415b      	adcs	r3, r3
 800903a:	61fb      	str	r3, [r7, #28]
 800903c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009040:	4641      	mov	r1, r8
 8009042:	1851      	adds	r1, r2, r1
 8009044:	6139      	str	r1, [r7, #16]
 8009046:	4649      	mov	r1, r9
 8009048:	414b      	adcs	r3, r1
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	f04f 0200 	mov.w	r2, #0
 8009050:	f04f 0300 	mov.w	r3, #0
 8009054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009058:	4659      	mov	r1, fp
 800905a:	00cb      	lsls	r3, r1, #3
 800905c:	4651      	mov	r1, sl
 800905e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009062:	4651      	mov	r1, sl
 8009064:	00ca      	lsls	r2, r1, #3
 8009066:	4610      	mov	r0, r2
 8009068:	4619      	mov	r1, r3
 800906a:	4603      	mov	r3, r0
 800906c:	4642      	mov	r2, r8
 800906e:	189b      	adds	r3, r3, r2
 8009070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009074:	464b      	mov	r3, r9
 8009076:	460a      	mov	r2, r1
 8009078:	eb42 0303 	adc.w	r3, r2, r3
 800907c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	67bb      	str	r3, [r7, #120]	; 0x78
 800908a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800908c:	f04f 0200 	mov.w	r2, #0
 8009090:	f04f 0300 	mov.w	r3, #0
 8009094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009098:	4649      	mov	r1, r9
 800909a:	008b      	lsls	r3, r1, #2
 800909c:	4641      	mov	r1, r8
 800909e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090a2:	4641      	mov	r1, r8
 80090a4:	008a      	lsls	r2, r1, #2
 80090a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80090aa:	f7f7 fdbd 	bl	8000c28 <__aeabi_uldivmod>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4611      	mov	r1, r2
 80090b4:	4b38      	ldr	r3, [pc, #224]	; (8009198 <UART_SetConfig+0x4e4>)
 80090b6:	fba3 2301 	umull	r2, r3, r3, r1
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2264      	movs	r2, #100	; 0x64
 80090be:	fb02 f303 	mul.w	r3, r2, r3
 80090c2:	1acb      	subs	r3, r1, r3
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	3332      	adds	r3, #50	; 0x32
 80090c8:	4a33      	ldr	r2, [pc, #204]	; (8009198 <UART_SetConfig+0x4e4>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090d4:	441c      	add	r4, r3
 80090d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090da:	2200      	movs	r2, #0
 80090dc:	673b      	str	r3, [r7, #112]	; 0x70
 80090de:	677a      	str	r2, [r7, #116]	; 0x74
 80090e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090e4:	4642      	mov	r2, r8
 80090e6:	464b      	mov	r3, r9
 80090e8:	1891      	adds	r1, r2, r2
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	415b      	adcs	r3, r3
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090f4:	4641      	mov	r1, r8
 80090f6:	1851      	adds	r1, r2, r1
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	4649      	mov	r1, r9
 80090fc:	414b      	adcs	r3, r1
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800910c:	4659      	mov	r1, fp
 800910e:	00cb      	lsls	r3, r1, #3
 8009110:	4651      	mov	r1, sl
 8009112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009116:	4651      	mov	r1, sl
 8009118:	00ca      	lsls	r2, r1, #3
 800911a:	4610      	mov	r0, r2
 800911c:	4619      	mov	r1, r3
 800911e:	4603      	mov	r3, r0
 8009120:	4642      	mov	r2, r8
 8009122:	189b      	adds	r3, r3, r2
 8009124:	66bb      	str	r3, [r7, #104]	; 0x68
 8009126:	464b      	mov	r3, r9
 8009128:	460a      	mov	r2, r1
 800912a:	eb42 0303 	adc.w	r3, r2, r3
 800912e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	663b      	str	r3, [r7, #96]	; 0x60
 800913a:	667a      	str	r2, [r7, #100]	; 0x64
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009148:	4649      	mov	r1, r9
 800914a:	008b      	lsls	r3, r1, #2
 800914c:	4641      	mov	r1, r8
 800914e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009152:	4641      	mov	r1, r8
 8009154:	008a      	lsls	r2, r1, #2
 8009156:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800915a:	f7f7 fd65 	bl	8000c28 <__aeabi_uldivmod>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <UART_SetConfig+0x4e4>)
 8009164:	fba3 1302 	umull	r1, r3, r3, r2
 8009168:	095b      	lsrs	r3, r3, #5
 800916a:	2164      	movs	r1, #100	; 0x64
 800916c:	fb01 f303 	mul.w	r3, r1, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	3332      	adds	r3, #50	; 0x32
 8009176:	4a08      	ldr	r2, [pc, #32]	; (8009198 <UART_SetConfig+0x4e4>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	f003 020f 	and.w	r2, r3, #15
 8009182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4422      	add	r2, r4
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bf00      	nop
 800918e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009192:	46bd      	mov	sp, r7
 8009194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009198:	51eb851f 	.word	0x51eb851f

0800919c <std>:
 800919c:	2300      	movs	r3, #0
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	e9c0 3300 	strd	r3, r3, [r0]
 80091a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091aa:	6083      	str	r3, [r0, #8]
 80091ac:	8181      	strh	r1, [r0, #12]
 80091ae:	6643      	str	r3, [r0, #100]	; 0x64
 80091b0:	81c2      	strh	r2, [r0, #14]
 80091b2:	6183      	str	r3, [r0, #24]
 80091b4:	4619      	mov	r1, r3
 80091b6:	2208      	movs	r2, #8
 80091b8:	305c      	adds	r0, #92	; 0x5c
 80091ba:	f000 f8fd 	bl	80093b8 <memset>
 80091be:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <std+0x58>)
 80091c0:	6263      	str	r3, [r4, #36]	; 0x24
 80091c2:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <std+0x5c>)
 80091c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <std+0x60>)
 80091c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ca:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <std+0x64>)
 80091cc:	6323      	str	r3, [r4, #48]	; 0x30
 80091ce:	4b0d      	ldr	r3, [pc, #52]	; (8009204 <std+0x68>)
 80091d0:	6224      	str	r4, [r4, #32]
 80091d2:	429c      	cmp	r4, r3
 80091d4:	d006      	beq.n	80091e4 <std+0x48>
 80091d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80091da:	4294      	cmp	r4, r2
 80091dc:	d002      	beq.n	80091e4 <std+0x48>
 80091de:	33d0      	adds	r3, #208	; 0xd0
 80091e0:	429c      	cmp	r4, r3
 80091e2:	d105      	bne.n	80091f0 <std+0x54>
 80091e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ec:	f000 b916 	b.w	800941c <__retarget_lock_init_recursive>
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	bf00      	nop
 80091f4:	08009f31 	.word	0x08009f31
 80091f8:	08009f53 	.word	0x08009f53
 80091fc:	08009f8b 	.word	0x08009f8b
 8009200:	08009faf 	.word	0x08009faf
 8009204:	20005ac4 	.word	0x20005ac4

08009208 <stdio_exit_handler>:
 8009208:	4a02      	ldr	r2, [pc, #8]	; (8009214 <stdio_exit_handler+0xc>)
 800920a:	4903      	ldr	r1, [pc, #12]	; (8009218 <stdio_exit_handler+0x10>)
 800920c:	4803      	ldr	r0, [pc, #12]	; (800921c <stdio_exit_handler+0x14>)
 800920e:	f000 b869 	b.w	80092e4 <_fwalk_sglue>
 8009212:	bf00      	nop
 8009214:	20000028 	.word	0x20000028
 8009218:	08009ec9 	.word	0x08009ec9
 800921c:	20000034 	.word	0x20000034

08009220 <cleanup_stdio>:
 8009220:	6841      	ldr	r1, [r0, #4]
 8009222:	4b0c      	ldr	r3, [pc, #48]	; (8009254 <cleanup_stdio+0x34>)
 8009224:	4299      	cmp	r1, r3
 8009226:	b510      	push	{r4, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	d001      	beq.n	8009230 <cleanup_stdio+0x10>
 800922c:	f000 fe4c 	bl	8009ec8 <_fflush_r>
 8009230:	68a1      	ldr	r1, [r4, #8]
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <cleanup_stdio+0x38>)
 8009234:	4299      	cmp	r1, r3
 8009236:	d002      	beq.n	800923e <cleanup_stdio+0x1e>
 8009238:	4620      	mov	r0, r4
 800923a:	f000 fe45 	bl	8009ec8 <_fflush_r>
 800923e:	68e1      	ldr	r1, [r4, #12]
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <cleanup_stdio+0x3c>)
 8009242:	4299      	cmp	r1, r3
 8009244:	d004      	beq.n	8009250 <cleanup_stdio+0x30>
 8009246:	4620      	mov	r0, r4
 8009248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924c:	f000 be3c 	b.w	8009ec8 <_fflush_r>
 8009250:	bd10      	pop	{r4, pc}
 8009252:	bf00      	nop
 8009254:	20005ac4 	.word	0x20005ac4
 8009258:	20005b2c 	.word	0x20005b2c
 800925c:	20005b94 	.word	0x20005b94

08009260 <global_stdio_init.part.0>:
 8009260:	b510      	push	{r4, lr}
 8009262:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <global_stdio_init.part.0+0x30>)
 8009264:	4c0b      	ldr	r4, [pc, #44]	; (8009294 <global_stdio_init.part.0+0x34>)
 8009266:	4a0c      	ldr	r2, [pc, #48]	; (8009298 <global_stdio_init.part.0+0x38>)
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	4620      	mov	r0, r4
 800926c:	2200      	movs	r2, #0
 800926e:	2104      	movs	r1, #4
 8009270:	f7ff ff94 	bl	800919c <std>
 8009274:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009278:	2201      	movs	r2, #1
 800927a:	2109      	movs	r1, #9
 800927c:	f7ff ff8e 	bl	800919c <std>
 8009280:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009284:	2202      	movs	r2, #2
 8009286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928a:	2112      	movs	r1, #18
 800928c:	f7ff bf86 	b.w	800919c <std>
 8009290:	20005bfc 	.word	0x20005bfc
 8009294:	20005ac4 	.word	0x20005ac4
 8009298:	08009209 	.word	0x08009209

0800929c <__sfp_lock_acquire>:
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <__sfp_lock_acquire+0x8>)
 800929e:	f000 b8be 	b.w	800941e <__retarget_lock_acquire_recursive>
 80092a2:	bf00      	nop
 80092a4:	20005c01 	.word	0x20005c01

080092a8 <__sfp_lock_release>:
 80092a8:	4801      	ldr	r0, [pc, #4]	; (80092b0 <__sfp_lock_release+0x8>)
 80092aa:	f000 b8b9 	b.w	8009420 <__retarget_lock_release_recursive>
 80092ae:	bf00      	nop
 80092b0:	20005c01 	.word	0x20005c01

080092b4 <__sinit>:
 80092b4:	b510      	push	{r4, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	f7ff fff0 	bl	800929c <__sfp_lock_acquire>
 80092bc:	6a23      	ldr	r3, [r4, #32]
 80092be:	b11b      	cbz	r3, 80092c8 <__sinit+0x14>
 80092c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c4:	f7ff bff0 	b.w	80092a8 <__sfp_lock_release>
 80092c8:	4b04      	ldr	r3, [pc, #16]	; (80092dc <__sinit+0x28>)
 80092ca:	6223      	str	r3, [r4, #32]
 80092cc:	4b04      	ldr	r3, [pc, #16]	; (80092e0 <__sinit+0x2c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1f5      	bne.n	80092c0 <__sinit+0xc>
 80092d4:	f7ff ffc4 	bl	8009260 <global_stdio_init.part.0>
 80092d8:	e7f2      	b.n	80092c0 <__sinit+0xc>
 80092da:	bf00      	nop
 80092dc:	08009221 	.word	0x08009221
 80092e0:	20005bfc 	.word	0x20005bfc

080092e4 <_fwalk_sglue>:
 80092e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e8:	4607      	mov	r7, r0
 80092ea:	4688      	mov	r8, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	2600      	movs	r6, #0
 80092f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092f4:	f1b9 0901 	subs.w	r9, r9, #1
 80092f8:	d505      	bpl.n	8009306 <_fwalk_sglue+0x22>
 80092fa:	6824      	ldr	r4, [r4, #0]
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	d1f7      	bne.n	80092f0 <_fwalk_sglue+0xc>
 8009300:	4630      	mov	r0, r6
 8009302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d907      	bls.n	800931c <_fwalk_sglue+0x38>
 800930c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009310:	3301      	adds	r3, #1
 8009312:	d003      	beq.n	800931c <_fwalk_sglue+0x38>
 8009314:	4629      	mov	r1, r5
 8009316:	4638      	mov	r0, r7
 8009318:	47c0      	blx	r8
 800931a:	4306      	orrs	r6, r0
 800931c:	3568      	adds	r5, #104	; 0x68
 800931e:	e7e9      	b.n	80092f4 <_fwalk_sglue+0x10>

08009320 <_vsniprintf_r>:
 8009320:	b530      	push	{r4, r5, lr}
 8009322:	4614      	mov	r4, r2
 8009324:	2c00      	cmp	r4, #0
 8009326:	b09b      	sub	sp, #108	; 0x6c
 8009328:	4605      	mov	r5, r0
 800932a:	461a      	mov	r2, r3
 800932c:	da05      	bge.n	800933a <_vsniprintf_r+0x1a>
 800932e:	238b      	movs	r3, #139	; 0x8b
 8009330:	6003      	str	r3, [r0, #0]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009336:	b01b      	add	sp, #108	; 0x6c
 8009338:	bd30      	pop	{r4, r5, pc}
 800933a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800933e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009342:	bf14      	ite	ne
 8009344:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009348:	4623      	moveq	r3, r4
 800934a:	9302      	str	r3, [sp, #8]
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009352:	9100      	str	r1, [sp, #0]
 8009354:	9104      	str	r1, [sp, #16]
 8009356:	f8ad 300e 	strh.w	r3, [sp, #14]
 800935a:	4669      	mov	r1, sp
 800935c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800935e:	f000 f8bb 	bl	80094d8 <_svfiprintf_r>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	bfbc      	itt	lt
 8009366:	238b      	movlt	r3, #139	; 0x8b
 8009368:	602b      	strlt	r3, [r5, #0]
 800936a:	2c00      	cmp	r4, #0
 800936c:	d0e3      	beq.n	8009336 <_vsniprintf_r+0x16>
 800936e:	9b00      	ldr	r3, [sp, #0]
 8009370:	2200      	movs	r2, #0
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e7df      	b.n	8009336 <_vsniprintf_r+0x16>
	...

08009378 <vsniprintf>:
 8009378:	b507      	push	{r0, r1, r2, lr}
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4613      	mov	r3, r2
 800937e:	460a      	mov	r2, r1
 8009380:	4601      	mov	r1, r0
 8009382:	4803      	ldr	r0, [pc, #12]	; (8009390 <vsniprintf+0x18>)
 8009384:	6800      	ldr	r0, [r0, #0]
 8009386:	f7ff ffcb 	bl	8009320 <_vsniprintf_r>
 800938a:	b003      	add	sp, #12
 800938c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009390:	20000080 	.word	0x20000080

08009394 <iprintf>:
 8009394:	b40f      	push	{r0, r1, r2, r3}
 8009396:	b507      	push	{r0, r1, r2, lr}
 8009398:	4906      	ldr	r1, [pc, #24]	; (80093b4 <iprintf+0x20>)
 800939a:	ab04      	add	r3, sp, #16
 800939c:	6808      	ldr	r0, [r1, #0]
 800939e:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a2:	6881      	ldr	r1, [r0, #8]
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	f000 f9bf 	bl	8009728 <_vfiprintf_r>
 80093aa:	b003      	add	sp, #12
 80093ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b0:	b004      	add	sp, #16
 80093b2:	4770      	bx	lr
 80093b4:	20000080 	.word	0x20000080

080093b8 <memset>:
 80093b8:	4402      	add	r2, r0
 80093ba:	4603      	mov	r3, r0
 80093bc:	4293      	cmp	r3, r2
 80093be:	d100      	bne.n	80093c2 <memset+0xa>
 80093c0:	4770      	bx	lr
 80093c2:	f803 1b01 	strb.w	r1, [r3], #1
 80093c6:	e7f9      	b.n	80093bc <memset+0x4>

080093c8 <__errno>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <__errno+0x8>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20000080 	.word	0x20000080

080093d4 <__libc_init_array>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4d0d      	ldr	r5, [pc, #52]	; (800940c <__libc_init_array+0x38>)
 80093d8:	4c0d      	ldr	r4, [pc, #52]	; (8009410 <__libc_init_array+0x3c>)
 80093da:	1b64      	subs	r4, r4, r5
 80093dc:	10a4      	asrs	r4, r4, #2
 80093de:	2600      	movs	r6, #0
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	d109      	bne.n	80093f8 <__libc_init_array+0x24>
 80093e4:	4d0b      	ldr	r5, [pc, #44]	; (8009414 <__libc_init_array+0x40>)
 80093e6:	4c0c      	ldr	r4, [pc, #48]	; (8009418 <__libc_init_array+0x44>)
 80093e8:	f001 f988 	bl	800a6fc <_init>
 80093ec:	1b64      	subs	r4, r4, r5
 80093ee:	10a4      	asrs	r4, r4, #2
 80093f0:	2600      	movs	r6, #0
 80093f2:	42a6      	cmp	r6, r4
 80093f4:	d105      	bne.n	8009402 <__libc_init_array+0x2e>
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fc:	4798      	blx	r3
 80093fe:	3601      	adds	r6, #1
 8009400:	e7ee      	b.n	80093e0 <__libc_init_array+0xc>
 8009402:	f855 3b04 	ldr.w	r3, [r5], #4
 8009406:	4798      	blx	r3
 8009408:	3601      	adds	r6, #1
 800940a:	e7f2      	b.n	80093f2 <__libc_init_array+0x1e>
 800940c:	0800ab64 	.word	0x0800ab64
 8009410:	0800ab64 	.word	0x0800ab64
 8009414:	0800ab64 	.word	0x0800ab64
 8009418:	0800ab68 	.word	0x0800ab68

0800941c <__retarget_lock_init_recursive>:
 800941c:	4770      	bx	lr

0800941e <__retarget_lock_acquire_recursive>:
 800941e:	4770      	bx	lr

08009420 <__retarget_lock_release_recursive>:
 8009420:	4770      	bx	lr

08009422 <__ssputs_r>:
 8009422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009426:	688e      	ldr	r6, [r1, #8]
 8009428:	461f      	mov	r7, r3
 800942a:	42be      	cmp	r6, r7
 800942c:	680b      	ldr	r3, [r1, #0]
 800942e:	4682      	mov	sl, r0
 8009430:	460c      	mov	r4, r1
 8009432:	4690      	mov	r8, r2
 8009434:	d82c      	bhi.n	8009490 <__ssputs_r+0x6e>
 8009436:	898a      	ldrh	r2, [r1, #12]
 8009438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800943c:	d026      	beq.n	800948c <__ssputs_r+0x6a>
 800943e:	6965      	ldr	r5, [r4, #20]
 8009440:	6909      	ldr	r1, [r1, #16]
 8009442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009446:	eba3 0901 	sub.w	r9, r3, r1
 800944a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800944e:	1c7b      	adds	r3, r7, #1
 8009450:	444b      	add	r3, r9
 8009452:	106d      	asrs	r5, r5, #1
 8009454:	429d      	cmp	r5, r3
 8009456:	bf38      	it	cc
 8009458:	461d      	movcc	r5, r3
 800945a:	0553      	lsls	r3, r2, #21
 800945c:	d527      	bpl.n	80094ae <__ssputs_r+0x8c>
 800945e:	4629      	mov	r1, r5
 8009460:	f000 fa9c 	bl	800999c <_malloc_r>
 8009464:	4606      	mov	r6, r0
 8009466:	b360      	cbz	r0, 80094c2 <__ssputs_r+0xa0>
 8009468:	6921      	ldr	r1, [r4, #16]
 800946a:	464a      	mov	r2, r9
 800946c:	f000 ff5c 	bl	800a328 <memcpy>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	6126      	str	r6, [r4, #16]
 800947e:	6165      	str	r5, [r4, #20]
 8009480:	444e      	add	r6, r9
 8009482:	eba5 0509 	sub.w	r5, r5, r9
 8009486:	6026      	str	r6, [r4, #0]
 8009488:	60a5      	str	r5, [r4, #8]
 800948a:	463e      	mov	r6, r7
 800948c:	42be      	cmp	r6, r7
 800948e:	d900      	bls.n	8009492 <__ssputs_r+0x70>
 8009490:	463e      	mov	r6, r7
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	4632      	mov	r2, r6
 8009496:	4641      	mov	r1, r8
 8009498:	f000 feb4 	bl	800a204 <memmove>
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	1b9b      	subs	r3, r3, r6
 80094a0:	60a3      	str	r3, [r4, #8]
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	4433      	add	r3, r6
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	2000      	movs	r0, #0
 80094aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ae:	462a      	mov	r2, r5
 80094b0:	f000 fd81 	bl	8009fb6 <_realloc_r>
 80094b4:	4606      	mov	r6, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1e0      	bne.n	800947c <__ssputs_r+0x5a>
 80094ba:	6921      	ldr	r1, [r4, #16]
 80094bc:	4650      	mov	r0, sl
 80094be:	f000 ff41 	bl	800a344 <_free_r>
 80094c2:	230c      	movs	r3, #12
 80094c4:	f8ca 3000 	str.w	r3, [sl]
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094d4:	e7e9      	b.n	80094aa <__ssputs_r+0x88>
	...

080094d8 <_svfiprintf_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	4698      	mov	r8, r3
 80094de:	898b      	ldrh	r3, [r1, #12]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	b09d      	sub	sp, #116	; 0x74
 80094e4:	4607      	mov	r7, r0
 80094e6:	460d      	mov	r5, r1
 80094e8:	4614      	mov	r4, r2
 80094ea:	d50e      	bpl.n	800950a <_svfiprintf_r+0x32>
 80094ec:	690b      	ldr	r3, [r1, #16]
 80094ee:	b963      	cbnz	r3, 800950a <_svfiprintf_r+0x32>
 80094f0:	2140      	movs	r1, #64	; 0x40
 80094f2:	f000 fa53 	bl	800999c <_malloc_r>
 80094f6:	6028      	str	r0, [r5, #0]
 80094f8:	6128      	str	r0, [r5, #16]
 80094fa:	b920      	cbnz	r0, 8009506 <_svfiprintf_r+0x2e>
 80094fc:	230c      	movs	r3, #12
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009504:	e0d0      	b.n	80096a8 <_svfiprintf_r+0x1d0>
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	616b      	str	r3, [r5, #20]
 800950a:	2300      	movs	r3, #0
 800950c:	9309      	str	r3, [sp, #36]	; 0x24
 800950e:	2320      	movs	r3, #32
 8009510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009514:	f8cd 800c 	str.w	r8, [sp, #12]
 8009518:	2330      	movs	r3, #48	; 0x30
 800951a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096c0 <_svfiprintf_r+0x1e8>
 800951e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009522:	f04f 0901 	mov.w	r9, #1
 8009526:	4623      	mov	r3, r4
 8009528:	469a      	mov	sl, r3
 800952a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800952e:	b10a      	cbz	r2, 8009534 <_svfiprintf_r+0x5c>
 8009530:	2a25      	cmp	r2, #37	; 0x25
 8009532:	d1f9      	bne.n	8009528 <_svfiprintf_r+0x50>
 8009534:	ebba 0b04 	subs.w	fp, sl, r4
 8009538:	d00b      	beq.n	8009552 <_svfiprintf_r+0x7a>
 800953a:	465b      	mov	r3, fp
 800953c:	4622      	mov	r2, r4
 800953e:	4629      	mov	r1, r5
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff ff6e 	bl	8009422 <__ssputs_r>
 8009546:	3001      	adds	r0, #1
 8009548:	f000 80a9 	beq.w	800969e <_svfiprintf_r+0x1c6>
 800954c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800954e:	445a      	add	r2, fp
 8009550:	9209      	str	r2, [sp, #36]	; 0x24
 8009552:	f89a 3000 	ldrb.w	r3, [sl]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80a1 	beq.w	800969e <_svfiprintf_r+0x1c6>
 800955c:	2300      	movs	r3, #0
 800955e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009566:	f10a 0a01 	add.w	sl, sl, #1
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	9307      	str	r3, [sp, #28]
 800956e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009572:	931a      	str	r3, [sp, #104]	; 0x68
 8009574:	4654      	mov	r4, sl
 8009576:	2205      	movs	r2, #5
 8009578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957c:	4850      	ldr	r0, [pc, #320]	; (80096c0 <_svfiprintf_r+0x1e8>)
 800957e:	f7f6 fe4f 	bl	8000220 <memchr>
 8009582:	9a04      	ldr	r2, [sp, #16]
 8009584:	b9d8      	cbnz	r0, 80095be <_svfiprintf_r+0xe6>
 8009586:	06d0      	lsls	r0, r2, #27
 8009588:	bf44      	itt	mi
 800958a:	2320      	movmi	r3, #32
 800958c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009590:	0711      	lsls	r1, r2, #28
 8009592:	bf44      	itt	mi
 8009594:	232b      	movmi	r3, #43	; 0x2b
 8009596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959a:	f89a 3000 	ldrb.w	r3, [sl]
 800959e:	2b2a      	cmp	r3, #42	; 0x2a
 80095a0:	d015      	beq.n	80095ce <_svfiprintf_r+0xf6>
 80095a2:	9a07      	ldr	r2, [sp, #28]
 80095a4:	4654      	mov	r4, sl
 80095a6:	2000      	movs	r0, #0
 80095a8:	f04f 0c0a 	mov.w	ip, #10
 80095ac:	4621      	mov	r1, r4
 80095ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b2:	3b30      	subs	r3, #48	; 0x30
 80095b4:	2b09      	cmp	r3, #9
 80095b6:	d94d      	bls.n	8009654 <_svfiprintf_r+0x17c>
 80095b8:	b1b0      	cbz	r0, 80095e8 <_svfiprintf_r+0x110>
 80095ba:	9207      	str	r2, [sp, #28]
 80095bc:	e014      	b.n	80095e8 <_svfiprintf_r+0x110>
 80095be:	eba0 0308 	sub.w	r3, r0, r8
 80095c2:	fa09 f303 	lsl.w	r3, r9, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	9304      	str	r3, [sp, #16]
 80095ca:	46a2      	mov	sl, r4
 80095cc:	e7d2      	b.n	8009574 <_svfiprintf_r+0x9c>
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	1d19      	adds	r1, r3, #4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	9103      	str	r1, [sp, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfbb      	ittet	lt
 80095da:	425b      	neglt	r3, r3
 80095dc:	f042 0202 	orrlt.w	r2, r2, #2
 80095e0:	9307      	strge	r3, [sp, #28]
 80095e2:	9307      	strlt	r3, [sp, #28]
 80095e4:	bfb8      	it	lt
 80095e6:	9204      	strlt	r2, [sp, #16]
 80095e8:	7823      	ldrb	r3, [r4, #0]
 80095ea:	2b2e      	cmp	r3, #46	; 0x2e
 80095ec:	d10c      	bne.n	8009608 <_svfiprintf_r+0x130>
 80095ee:	7863      	ldrb	r3, [r4, #1]
 80095f0:	2b2a      	cmp	r3, #42	; 0x2a
 80095f2:	d134      	bne.n	800965e <_svfiprintf_r+0x186>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	9203      	str	r2, [sp, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	bfb8      	it	lt
 8009600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009604:	3402      	adds	r4, #2
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096d0 <_svfiprintf_r+0x1f8>
 800960c:	7821      	ldrb	r1, [r4, #0]
 800960e:	2203      	movs	r2, #3
 8009610:	4650      	mov	r0, sl
 8009612:	f7f6 fe05 	bl	8000220 <memchr>
 8009616:	b138      	cbz	r0, 8009628 <_svfiprintf_r+0x150>
 8009618:	9b04      	ldr	r3, [sp, #16]
 800961a:	eba0 000a 	sub.w	r0, r0, sl
 800961e:	2240      	movs	r2, #64	; 0x40
 8009620:	4082      	lsls	r2, r0
 8009622:	4313      	orrs	r3, r2
 8009624:	3401      	adds	r4, #1
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	4825      	ldr	r0, [pc, #148]	; (80096c4 <_svfiprintf_r+0x1ec>)
 800962e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009632:	2206      	movs	r2, #6
 8009634:	f7f6 fdf4 	bl	8000220 <memchr>
 8009638:	2800      	cmp	r0, #0
 800963a:	d038      	beq.n	80096ae <_svfiprintf_r+0x1d6>
 800963c:	4b22      	ldr	r3, [pc, #136]	; (80096c8 <_svfiprintf_r+0x1f0>)
 800963e:	bb1b      	cbnz	r3, 8009688 <_svfiprintf_r+0x1b0>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	3307      	adds	r3, #7
 8009644:	f023 0307 	bic.w	r3, r3, #7
 8009648:	3308      	adds	r3, #8
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964e:	4433      	add	r3, r6
 8009650:	9309      	str	r3, [sp, #36]	; 0x24
 8009652:	e768      	b.n	8009526 <_svfiprintf_r+0x4e>
 8009654:	fb0c 3202 	mla	r2, ip, r2, r3
 8009658:	460c      	mov	r4, r1
 800965a:	2001      	movs	r0, #1
 800965c:	e7a6      	b.n	80095ac <_svfiprintf_r+0xd4>
 800965e:	2300      	movs	r3, #0
 8009660:	3401      	adds	r4, #1
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	4619      	mov	r1, r3
 8009666:	f04f 0c0a 	mov.w	ip, #10
 800966a:	4620      	mov	r0, r4
 800966c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009670:	3a30      	subs	r2, #48	; 0x30
 8009672:	2a09      	cmp	r2, #9
 8009674:	d903      	bls.n	800967e <_svfiprintf_r+0x1a6>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c6      	beq.n	8009608 <_svfiprintf_r+0x130>
 800967a:	9105      	str	r1, [sp, #20]
 800967c:	e7c4      	b.n	8009608 <_svfiprintf_r+0x130>
 800967e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009682:	4604      	mov	r4, r0
 8009684:	2301      	movs	r3, #1
 8009686:	e7f0      	b.n	800966a <_svfiprintf_r+0x192>
 8009688:	ab03      	add	r3, sp, #12
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	462a      	mov	r2, r5
 800968e:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <_svfiprintf_r+0x1f4>)
 8009690:	a904      	add	r1, sp, #16
 8009692:	4638      	mov	r0, r7
 8009694:	f3af 8000 	nop.w
 8009698:	1c42      	adds	r2, r0, #1
 800969a:	4606      	mov	r6, r0
 800969c:	d1d6      	bne.n	800964c <_svfiprintf_r+0x174>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	065b      	lsls	r3, r3, #25
 80096a2:	f53f af2d 	bmi.w	8009500 <_svfiprintf_r+0x28>
 80096a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a8:	b01d      	add	sp, #116	; 0x74
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	462a      	mov	r2, r5
 80096b4:	4b05      	ldr	r3, [pc, #20]	; (80096cc <_svfiprintf_r+0x1f4>)
 80096b6:	a904      	add	r1, sp, #16
 80096b8:	4638      	mov	r0, r7
 80096ba:	f000 fa5d 	bl	8009b78 <_printf_i>
 80096be:	e7eb      	b.n	8009698 <_svfiprintf_r+0x1c0>
 80096c0:	0800ab28 	.word	0x0800ab28
 80096c4:	0800ab32 	.word	0x0800ab32
 80096c8:	00000000 	.word	0x00000000
 80096cc:	08009423 	.word	0x08009423
 80096d0:	0800ab2e 	.word	0x0800ab2e

080096d4 <__sfputc_r>:
 80096d4:	6893      	ldr	r3, [r2, #8]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	b410      	push	{r4}
 80096dc:	6093      	str	r3, [r2, #8]
 80096de:	da08      	bge.n	80096f2 <__sfputc_r+0x1e>
 80096e0:	6994      	ldr	r4, [r2, #24]
 80096e2:	42a3      	cmp	r3, r4
 80096e4:	db01      	blt.n	80096ea <__sfputc_r+0x16>
 80096e6:	290a      	cmp	r1, #10
 80096e8:	d103      	bne.n	80096f2 <__sfputc_r+0x1e>
 80096ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ee:	f000 bc91 	b.w	800a014 <__swbuf_r>
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	1c58      	adds	r0, r3, #1
 80096f6:	6010      	str	r0, [r2, #0]
 80096f8:	7019      	strb	r1, [r3, #0]
 80096fa:	4608      	mov	r0, r1
 80096fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009700:	4770      	bx	lr

08009702 <__sfputs_r>:
 8009702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009704:	4606      	mov	r6, r0
 8009706:	460f      	mov	r7, r1
 8009708:	4614      	mov	r4, r2
 800970a:	18d5      	adds	r5, r2, r3
 800970c:	42ac      	cmp	r4, r5
 800970e:	d101      	bne.n	8009714 <__sfputs_r+0x12>
 8009710:	2000      	movs	r0, #0
 8009712:	e007      	b.n	8009724 <__sfputs_r+0x22>
 8009714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009718:	463a      	mov	r2, r7
 800971a:	4630      	mov	r0, r6
 800971c:	f7ff ffda 	bl	80096d4 <__sfputc_r>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d1f3      	bne.n	800970c <__sfputs_r+0xa>
 8009724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009728 <_vfiprintf_r>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	460d      	mov	r5, r1
 800972e:	b09d      	sub	sp, #116	; 0x74
 8009730:	4614      	mov	r4, r2
 8009732:	4698      	mov	r8, r3
 8009734:	4606      	mov	r6, r0
 8009736:	b118      	cbz	r0, 8009740 <_vfiprintf_r+0x18>
 8009738:	6a03      	ldr	r3, [r0, #32]
 800973a:	b90b      	cbnz	r3, 8009740 <_vfiprintf_r+0x18>
 800973c:	f7ff fdba 	bl	80092b4 <__sinit>
 8009740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	d405      	bmi.n	8009752 <_vfiprintf_r+0x2a>
 8009746:	89ab      	ldrh	r3, [r5, #12]
 8009748:	059a      	lsls	r2, r3, #22
 800974a:	d402      	bmi.n	8009752 <_vfiprintf_r+0x2a>
 800974c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800974e:	f7ff fe66 	bl	800941e <__retarget_lock_acquire_recursive>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	071b      	lsls	r3, r3, #28
 8009756:	d501      	bpl.n	800975c <_vfiprintf_r+0x34>
 8009758:	692b      	ldr	r3, [r5, #16]
 800975a:	b99b      	cbnz	r3, 8009784 <_vfiprintf_r+0x5c>
 800975c:	4629      	mov	r1, r5
 800975e:	4630      	mov	r0, r6
 8009760:	f000 fc96 	bl	800a090 <__swsetup_r>
 8009764:	b170      	cbz	r0, 8009784 <_vfiprintf_r+0x5c>
 8009766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009768:	07dc      	lsls	r4, r3, #31
 800976a:	d504      	bpl.n	8009776 <_vfiprintf_r+0x4e>
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009770:	b01d      	add	sp, #116	; 0x74
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	0598      	lsls	r0, r3, #22
 800977a:	d4f7      	bmi.n	800976c <_vfiprintf_r+0x44>
 800977c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800977e:	f7ff fe4f 	bl	8009420 <__retarget_lock_release_recursive>
 8009782:	e7f3      	b.n	800976c <_vfiprintf_r+0x44>
 8009784:	2300      	movs	r3, #0
 8009786:	9309      	str	r3, [sp, #36]	; 0x24
 8009788:	2320      	movs	r3, #32
 800978a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800978e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009792:	2330      	movs	r3, #48	; 0x30
 8009794:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009948 <_vfiprintf_r+0x220>
 8009798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800979c:	f04f 0901 	mov.w	r9, #1
 80097a0:	4623      	mov	r3, r4
 80097a2:	469a      	mov	sl, r3
 80097a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a8:	b10a      	cbz	r2, 80097ae <_vfiprintf_r+0x86>
 80097aa:	2a25      	cmp	r2, #37	; 0x25
 80097ac:	d1f9      	bne.n	80097a2 <_vfiprintf_r+0x7a>
 80097ae:	ebba 0b04 	subs.w	fp, sl, r4
 80097b2:	d00b      	beq.n	80097cc <_vfiprintf_r+0xa4>
 80097b4:	465b      	mov	r3, fp
 80097b6:	4622      	mov	r2, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ffa1 	bl	8009702 <__sfputs_r>
 80097c0:	3001      	adds	r0, #1
 80097c2:	f000 80a9 	beq.w	8009918 <_vfiprintf_r+0x1f0>
 80097c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097c8:	445a      	add	r2, fp
 80097ca:	9209      	str	r2, [sp, #36]	; 0x24
 80097cc:	f89a 3000 	ldrb.w	r3, [sl]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 80a1 	beq.w	8009918 <_vfiprintf_r+0x1f0>
 80097d6:	2300      	movs	r3, #0
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e0:	f10a 0a01 	add.w	sl, sl, #1
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ec:	931a      	str	r3, [sp, #104]	; 0x68
 80097ee:	4654      	mov	r4, sl
 80097f0:	2205      	movs	r2, #5
 80097f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f6:	4854      	ldr	r0, [pc, #336]	; (8009948 <_vfiprintf_r+0x220>)
 80097f8:	f7f6 fd12 	bl	8000220 <memchr>
 80097fc:	9a04      	ldr	r2, [sp, #16]
 80097fe:	b9d8      	cbnz	r0, 8009838 <_vfiprintf_r+0x110>
 8009800:	06d1      	lsls	r1, r2, #27
 8009802:	bf44      	itt	mi
 8009804:	2320      	movmi	r3, #32
 8009806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800980a:	0713      	lsls	r3, r2, #28
 800980c:	bf44      	itt	mi
 800980e:	232b      	movmi	r3, #43	; 0x2b
 8009810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009814:	f89a 3000 	ldrb.w	r3, [sl]
 8009818:	2b2a      	cmp	r3, #42	; 0x2a
 800981a:	d015      	beq.n	8009848 <_vfiprintf_r+0x120>
 800981c:	9a07      	ldr	r2, [sp, #28]
 800981e:	4654      	mov	r4, sl
 8009820:	2000      	movs	r0, #0
 8009822:	f04f 0c0a 	mov.w	ip, #10
 8009826:	4621      	mov	r1, r4
 8009828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800982c:	3b30      	subs	r3, #48	; 0x30
 800982e:	2b09      	cmp	r3, #9
 8009830:	d94d      	bls.n	80098ce <_vfiprintf_r+0x1a6>
 8009832:	b1b0      	cbz	r0, 8009862 <_vfiprintf_r+0x13a>
 8009834:	9207      	str	r2, [sp, #28]
 8009836:	e014      	b.n	8009862 <_vfiprintf_r+0x13a>
 8009838:	eba0 0308 	sub.w	r3, r0, r8
 800983c:	fa09 f303 	lsl.w	r3, r9, r3
 8009840:	4313      	orrs	r3, r2
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	46a2      	mov	sl, r4
 8009846:	e7d2      	b.n	80097ee <_vfiprintf_r+0xc6>
 8009848:	9b03      	ldr	r3, [sp, #12]
 800984a:	1d19      	adds	r1, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	9103      	str	r1, [sp, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	bfbb      	ittet	lt
 8009854:	425b      	neglt	r3, r3
 8009856:	f042 0202 	orrlt.w	r2, r2, #2
 800985a:	9307      	strge	r3, [sp, #28]
 800985c:	9307      	strlt	r3, [sp, #28]
 800985e:	bfb8      	it	lt
 8009860:	9204      	strlt	r2, [sp, #16]
 8009862:	7823      	ldrb	r3, [r4, #0]
 8009864:	2b2e      	cmp	r3, #46	; 0x2e
 8009866:	d10c      	bne.n	8009882 <_vfiprintf_r+0x15a>
 8009868:	7863      	ldrb	r3, [r4, #1]
 800986a:	2b2a      	cmp	r3, #42	; 0x2a
 800986c:	d134      	bne.n	80098d8 <_vfiprintf_r+0x1b0>
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	1d1a      	adds	r2, r3, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	9203      	str	r2, [sp, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfb8      	it	lt
 800987a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800987e:	3402      	adds	r4, #2
 8009880:	9305      	str	r3, [sp, #20]
 8009882:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009958 <_vfiprintf_r+0x230>
 8009886:	7821      	ldrb	r1, [r4, #0]
 8009888:	2203      	movs	r2, #3
 800988a:	4650      	mov	r0, sl
 800988c:	f7f6 fcc8 	bl	8000220 <memchr>
 8009890:	b138      	cbz	r0, 80098a2 <_vfiprintf_r+0x17a>
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	eba0 000a 	sub.w	r0, r0, sl
 8009898:	2240      	movs	r2, #64	; 0x40
 800989a:	4082      	lsls	r2, r0
 800989c:	4313      	orrs	r3, r2
 800989e:	3401      	adds	r4, #1
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a6:	4829      	ldr	r0, [pc, #164]	; (800994c <_vfiprintf_r+0x224>)
 80098a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098ac:	2206      	movs	r2, #6
 80098ae:	f7f6 fcb7 	bl	8000220 <memchr>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d03f      	beq.n	8009936 <_vfiprintf_r+0x20e>
 80098b6:	4b26      	ldr	r3, [pc, #152]	; (8009950 <_vfiprintf_r+0x228>)
 80098b8:	bb1b      	cbnz	r3, 8009902 <_vfiprintf_r+0x1da>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	3307      	adds	r3, #7
 80098be:	f023 0307 	bic.w	r3, r3, #7
 80098c2:	3308      	adds	r3, #8
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	443b      	add	r3, r7
 80098ca:	9309      	str	r3, [sp, #36]	; 0x24
 80098cc:	e768      	b.n	80097a0 <_vfiprintf_r+0x78>
 80098ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d2:	460c      	mov	r4, r1
 80098d4:	2001      	movs	r0, #1
 80098d6:	e7a6      	b.n	8009826 <_vfiprintf_r+0xfe>
 80098d8:	2300      	movs	r3, #0
 80098da:	3401      	adds	r4, #1
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	4619      	mov	r1, r3
 80098e0:	f04f 0c0a 	mov.w	ip, #10
 80098e4:	4620      	mov	r0, r4
 80098e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ea:	3a30      	subs	r2, #48	; 0x30
 80098ec:	2a09      	cmp	r2, #9
 80098ee:	d903      	bls.n	80098f8 <_vfiprintf_r+0x1d0>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0c6      	beq.n	8009882 <_vfiprintf_r+0x15a>
 80098f4:	9105      	str	r1, [sp, #20]
 80098f6:	e7c4      	b.n	8009882 <_vfiprintf_r+0x15a>
 80098f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098fc:	4604      	mov	r4, r0
 80098fe:	2301      	movs	r3, #1
 8009900:	e7f0      	b.n	80098e4 <_vfiprintf_r+0x1bc>
 8009902:	ab03      	add	r3, sp, #12
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	462a      	mov	r2, r5
 8009908:	4b12      	ldr	r3, [pc, #72]	; (8009954 <_vfiprintf_r+0x22c>)
 800990a:	a904      	add	r1, sp, #16
 800990c:	4630      	mov	r0, r6
 800990e:	f3af 8000 	nop.w
 8009912:	4607      	mov	r7, r0
 8009914:	1c78      	adds	r0, r7, #1
 8009916:	d1d6      	bne.n	80098c6 <_vfiprintf_r+0x19e>
 8009918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800991a:	07d9      	lsls	r1, r3, #31
 800991c:	d405      	bmi.n	800992a <_vfiprintf_r+0x202>
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d402      	bmi.n	800992a <_vfiprintf_r+0x202>
 8009924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009926:	f7ff fd7b 	bl	8009420 <__retarget_lock_release_recursive>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	065b      	lsls	r3, r3, #25
 800992e:	f53f af1d 	bmi.w	800976c <_vfiprintf_r+0x44>
 8009932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009934:	e71c      	b.n	8009770 <_vfiprintf_r+0x48>
 8009936:	ab03      	add	r3, sp, #12
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	462a      	mov	r2, r5
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <_vfiprintf_r+0x22c>)
 800993e:	a904      	add	r1, sp, #16
 8009940:	4630      	mov	r0, r6
 8009942:	f000 f919 	bl	8009b78 <_printf_i>
 8009946:	e7e4      	b.n	8009912 <_vfiprintf_r+0x1ea>
 8009948:	0800ab28 	.word	0x0800ab28
 800994c:	0800ab32 	.word	0x0800ab32
 8009950:	00000000 	.word	0x00000000
 8009954:	08009703 	.word	0x08009703
 8009958:	0800ab2e 	.word	0x0800ab2e

0800995c <sbrk_aligned>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4e0e      	ldr	r6, [pc, #56]	; (8009998 <sbrk_aligned+0x3c>)
 8009960:	460c      	mov	r4, r1
 8009962:	6831      	ldr	r1, [r6, #0]
 8009964:	4605      	mov	r5, r0
 8009966:	b911      	cbnz	r1, 800996e <sbrk_aligned+0x12>
 8009968:	f000 fcbc 	bl	800a2e4 <_sbrk_r>
 800996c:	6030      	str	r0, [r6, #0]
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 fcb7 	bl	800a2e4 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d00a      	beq.n	8009990 <sbrk_aligned+0x34>
 800997a:	1cc4      	adds	r4, r0, #3
 800997c:	f024 0403 	bic.w	r4, r4, #3
 8009980:	42a0      	cmp	r0, r4
 8009982:	d007      	beq.n	8009994 <sbrk_aligned+0x38>
 8009984:	1a21      	subs	r1, r4, r0
 8009986:	4628      	mov	r0, r5
 8009988:	f000 fcac 	bl	800a2e4 <_sbrk_r>
 800998c:	3001      	adds	r0, #1
 800998e:	d101      	bne.n	8009994 <sbrk_aligned+0x38>
 8009990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009994:	4620      	mov	r0, r4
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	20005c08 	.word	0x20005c08

0800999c <_malloc_r>:
 800999c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a0:	1ccd      	adds	r5, r1, #3
 80099a2:	f025 0503 	bic.w	r5, r5, #3
 80099a6:	3508      	adds	r5, #8
 80099a8:	2d0c      	cmp	r5, #12
 80099aa:	bf38      	it	cc
 80099ac:	250c      	movcc	r5, #12
 80099ae:	2d00      	cmp	r5, #0
 80099b0:	4607      	mov	r7, r0
 80099b2:	db01      	blt.n	80099b8 <_malloc_r+0x1c>
 80099b4:	42a9      	cmp	r1, r5
 80099b6:	d905      	bls.n	80099c4 <_malloc_r+0x28>
 80099b8:	230c      	movs	r3, #12
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	2600      	movs	r6, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a98 <_malloc_r+0xfc>
 80099c8:	f000 faa6 	bl	8009f18 <__malloc_lock>
 80099cc:	f8d8 3000 	ldr.w	r3, [r8]
 80099d0:	461c      	mov	r4, r3
 80099d2:	bb5c      	cbnz	r4, 8009a2c <_malloc_r+0x90>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4638      	mov	r0, r7
 80099d8:	f7ff ffc0 	bl	800995c <sbrk_aligned>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	4604      	mov	r4, r0
 80099e0:	d155      	bne.n	8009a8e <_malloc_r+0xf2>
 80099e2:	f8d8 4000 	ldr.w	r4, [r8]
 80099e6:	4626      	mov	r6, r4
 80099e8:	2e00      	cmp	r6, #0
 80099ea:	d145      	bne.n	8009a78 <_malloc_r+0xdc>
 80099ec:	2c00      	cmp	r4, #0
 80099ee:	d048      	beq.n	8009a82 <_malloc_r+0xe6>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	4631      	mov	r1, r6
 80099f4:	4638      	mov	r0, r7
 80099f6:	eb04 0903 	add.w	r9, r4, r3
 80099fa:	f000 fc73 	bl	800a2e4 <_sbrk_r>
 80099fe:	4581      	cmp	r9, r0
 8009a00:	d13f      	bne.n	8009a82 <_malloc_r+0xe6>
 8009a02:	6821      	ldr	r1, [r4, #0]
 8009a04:	1a6d      	subs	r5, r5, r1
 8009a06:	4629      	mov	r1, r5
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff ffa7 	bl	800995c <sbrk_aligned>
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d037      	beq.n	8009a82 <_malloc_r+0xe6>
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	442b      	add	r3, r5
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	f8d8 3000 	ldr.w	r3, [r8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d038      	beq.n	8009a92 <_malloc_r+0xf6>
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	42a2      	cmp	r2, r4
 8009a24:	d12b      	bne.n	8009a7e <_malloc_r+0xe2>
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
 8009a2a:	e00f      	b.n	8009a4c <_malloc_r+0xb0>
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	1b52      	subs	r2, r2, r5
 8009a30:	d41f      	bmi.n	8009a72 <_malloc_r+0xd6>
 8009a32:	2a0b      	cmp	r2, #11
 8009a34:	d917      	bls.n	8009a66 <_malloc_r+0xca>
 8009a36:	1961      	adds	r1, r4, r5
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	6025      	str	r5, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	6059      	strne	r1, [r3, #4]
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	bf08      	it	eq
 8009a44:	f8c8 1000 	streq.w	r1, [r8]
 8009a48:	5162      	str	r2, [r4, r5]
 8009a4a:	604b      	str	r3, [r1, #4]
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f104 060b 	add.w	r6, r4, #11
 8009a52:	f000 fa67 	bl	8009f24 <__malloc_unlock>
 8009a56:	f026 0607 	bic.w	r6, r6, #7
 8009a5a:	1d23      	adds	r3, r4, #4
 8009a5c:	1af2      	subs	r2, r6, r3
 8009a5e:	d0ae      	beq.n	80099be <_malloc_r+0x22>
 8009a60:	1b9b      	subs	r3, r3, r6
 8009a62:	50a3      	str	r3, [r4, r2]
 8009a64:	e7ab      	b.n	80099be <_malloc_r+0x22>
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	6862      	ldr	r2, [r4, #4]
 8009a6a:	d1dd      	bne.n	8009a28 <_malloc_r+0x8c>
 8009a6c:	f8c8 2000 	str.w	r2, [r8]
 8009a70:	e7ec      	b.n	8009a4c <_malloc_r+0xb0>
 8009a72:	4623      	mov	r3, r4
 8009a74:	6864      	ldr	r4, [r4, #4]
 8009a76:	e7ac      	b.n	80099d2 <_malloc_r+0x36>
 8009a78:	4634      	mov	r4, r6
 8009a7a:	6876      	ldr	r6, [r6, #4]
 8009a7c:	e7b4      	b.n	80099e8 <_malloc_r+0x4c>
 8009a7e:	4613      	mov	r3, r2
 8009a80:	e7cc      	b.n	8009a1c <_malloc_r+0x80>
 8009a82:	230c      	movs	r3, #12
 8009a84:	603b      	str	r3, [r7, #0]
 8009a86:	4638      	mov	r0, r7
 8009a88:	f000 fa4c 	bl	8009f24 <__malloc_unlock>
 8009a8c:	e797      	b.n	80099be <_malloc_r+0x22>
 8009a8e:	6025      	str	r5, [r4, #0]
 8009a90:	e7dc      	b.n	8009a4c <_malloc_r+0xb0>
 8009a92:	605b      	str	r3, [r3, #4]
 8009a94:	deff      	udf	#255	; 0xff
 8009a96:	bf00      	nop
 8009a98:	20005c04 	.word	0x20005c04

08009a9c <_printf_common>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	4699      	mov	r9, r3
 8009aa4:	688a      	ldr	r2, [r1, #8]
 8009aa6:	690b      	ldr	r3, [r1, #16]
 8009aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	bfb8      	it	lt
 8009ab0:	4613      	movlt	r3, r2
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ab8:	4607      	mov	r7, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b10a      	cbz	r2, 8009ac2 <_printf_common+0x26>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	6033      	str	r3, [r6, #0]
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	0699      	lsls	r1, r3, #26
 8009ac6:	bf42      	ittt	mi
 8009ac8:	6833      	ldrmi	r3, [r6, #0]
 8009aca:	3302      	addmi	r3, #2
 8009acc:	6033      	strmi	r3, [r6, #0]
 8009ace:	6825      	ldr	r5, [r4, #0]
 8009ad0:	f015 0506 	ands.w	r5, r5, #6
 8009ad4:	d106      	bne.n	8009ae4 <_printf_common+0x48>
 8009ad6:	f104 0a19 	add.w	sl, r4, #25
 8009ada:	68e3      	ldr	r3, [r4, #12]
 8009adc:	6832      	ldr	r2, [r6, #0]
 8009ade:	1a9b      	subs	r3, r3, r2
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc26      	bgt.n	8009b32 <_printf_common+0x96>
 8009ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ae8:	1e13      	subs	r3, r2, #0
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	bf18      	it	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	0692      	lsls	r2, r2, #26
 8009af2:	d42b      	bmi.n	8009b4c <_printf_common+0xb0>
 8009af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009af8:	4649      	mov	r1, r9
 8009afa:	4638      	mov	r0, r7
 8009afc:	47c0      	blx	r8
 8009afe:	3001      	adds	r0, #1
 8009b00:	d01e      	beq.n	8009b40 <_printf_common+0xa4>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	6922      	ldr	r2, [r4, #16]
 8009b06:	f003 0306 	and.w	r3, r3, #6
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	bf02      	ittt	eq
 8009b0e:	68e5      	ldreq	r5, [r4, #12]
 8009b10:	6833      	ldreq	r3, [r6, #0]
 8009b12:	1aed      	subeq	r5, r5, r3
 8009b14:	68a3      	ldr	r3, [r4, #8]
 8009b16:	bf0c      	ite	eq
 8009b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b1c:	2500      	movne	r5, #0
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	bfc4      	itt	gt
 8009b22:	1a9b      	subgt	r3, r3, r2
 8009b24:	18ed      	addgt	r5, r5, r3
 8009b26:	2600      	movs	r6, #0
 8009b28:	341a      	adds	r4, #26
 8009b2a:	42b5      	cmp	r5, r6
 8009b2c:	d11a      	bne.n	8009b64 <_printf_common+0xc8>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	e008      	b.n	8009b44 <_printf_common+0xa8>
 8009b32:	2301      	movs	r3, #1
 8009b34:	4652      	mov	r2, sl
 8009b36:	4649      	mov	r1, r9
 8009b38:	4638      	mov	r0, r7
 8009b3a:	47c0      	blx	r8
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d103      	bne.n	8009b48 <_printf_common+0xac>
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b48:	3501      	adds	r5, #1
 8009b4a:	e7c6      	b.n	8009ada <_printf_common+0x3e>
 8009b4c:	18e1      	adds	r1, r4, r3
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	2030      	movs	r0, #48	; 0x30
 8009b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b56:	4422      	add	r2, r4
 8009b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b60:	3302      	adds	r3, #2
 8009b62:	e7c7      	b.n	8009af4 <_printf_common+0x58>
 8009b64:	2301      	movs	r3, #1
 8009b66:	4622      	mov	r2, r4
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	47c0      	blx	r8
 8009b6e:	3001      	adds	r0, #1
 8009b70:	d0e6      	beq.n	8009b40 <_printf_common+0xa4>
 8009b72:	3601      	adds	r6, #1
 8009b74:	e7d9      	b.n	8009b2a <_printf_common+0x8e>
	...

08009b78 <_printf_i>:
 8009b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7c:	7e0f      	ldrb	r7, [r1, #24]
 8009b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b80:	2f78      	cmp	r7, #120	; 0x78
 8009b82:	4691      	mov	r9, r2
 8009b84:	4680      	mov	r8, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	469a      	mov	sl, r3
 8009b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b8e:	d807      	bhi.n	8009ba0 <_printf_i+0x28>
 8009b90:	2f62      	cmp	r7, #98	; 0x62
 8009b92:	d80a      	bhi.n	8009baa <_printf_i+0x32>
 8009b94:	2f00      	cmp	r7, #0
 8009b96:	f000 80d4 	beq.w	8009d42 <_printf_i+0x1ca>
 8009b9a:	2f58      	cmp	r7, #88	; 0x58
 8009b9c:	f000 80c0 	beq.w	8009d20 <_printf_i+0x1a8>
 8009ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ba8:	e03a      	b.n	8009c20 <_printf_i+0xa8>
 8009baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bae:	2b15      	cmp	r3, #21
 8009bb0:	d8f6      	bhi.n	8009ba0 <_printf_i+0x28>
 8009bb2:	a101      	add	r1, pc, #4	; (adr r1, 8009bb8 <_printf_i+0x40>)
 8009bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bb8:	08009c11 	.word	0x08009c11
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009ba1 	.word	0x08009ba1
 8009bc4:	08009ba1 	.word	0x08009ba1
 8009bc8:	08009ba1 	.word	0x08009ba1
 8009bcc:	08009ba1 	.word	0x08009ba1
 8009bd0:	08009c25 	.word	0x08009c25
 8009bd4:	08009ba1 	.word	0x08009ba1
 8009bd8:	08009ba1 	.word	0x08009ba1
 8009bdc:	08009ba1 	.word	0x08009ba1
 8009be0:	08009ba1 	.word	0x08009ba1
 8009be4:	08009d29 	.word	0x08009d29
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009ce3 	.word	0x08009ce3
 8009bf0:	08009ba1 	.word	0x08009ba1
 8009bf4:	08009ba1 	.word	0x08009ba1
 8009bf8:	08009d4b 	.word	0x08009d4b
 8009bfc:	08009ba1 	.word	0x08009ba1
 8009c00:	08009c51 	.word	0x08009c51
 8009c04:	08009ba1 	.word	0x08009ba1
 8009c08:	08009ba1 	.word	0x08009ba1
 8009c0c:	08009ceb 	.word	0x08009ceb
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	1d1a      	adds	r2, r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	602a      	str	r2, [r5, #0]
 8009c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c20:	2301      	movs	r3, #1
 8009c22:	e09f      	b.n	8009d64 <_printf_i+0x1ec>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	682b      	ldr	r3, [r5, #0]
 8009c28:	0607      	lsls	r7, r0, #24
 8009c2a:	f103 0104 	add.w	r1, r3, #4
 8009c2e:	6029      	str	r1, [r5, #0]
 8009c30:	d501      	bpl.n	8009c36 <_printf_i+0xbe>
 8009c32:	681e      	ldr	r6, [r3, #0]
 8009c34:	e003      	b.n	8009c3e <_printf_i+0xc6>
 8009c36:	0646      	lsls	r6, r0, #25
 8009c38:	d5fb      	bpl.n	8009c32 <_printf_i+0xba>
 8009c3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c3e:	2e00      	cmp	r6, #0
 8009c40:	da03      	bge.n	8009c4a <_printf_i+0xd2>
 8009c42:	232d      	movs	r3, #45	; 0x2d
 8009c44:	4276      	negs	r6, r6
 8009c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c4a:	485a      	ldr	r0, [pc, #360]	; (8009db4 <_printf_i+0x23c>)
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	e012      	b.n	8009c76 <_printf_i+0xfe>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	6820      	ldr	r0, [r4, #0]
 8009c54:	1d19      	adds	r1, r3, #4
 8009c56:	6029      	str	r1, [r5, #0]
 8009c58:	0605      	lsls	r5, r0, #24
 8009c5a:	d501      	bpl.n	8009c60 <_printf_i+0xe8>
 8009c5c:	681e      	ldr	r6, [r3, #0]
 8009c5e:	e002      	b.n	8009c66 <_printf_i+0xee>
 8009c60:	0641      	lsls	r1, r0, #25
 8009c62:	d5fb      	bpl.n	8009c5c <_printf_i+0xe4>
 8009c64:	881e      	ldrh	r6, [r3, #0]
 8009c66:	4853      	ldr	r0, [pc, #332]	; (8009db4 <_printf_i+0x23c>)
 8009c68:	2f6f      	cmp	r7, #111	; 0x6f
 8009c6a:	bf0c      	ite	eq
 8009c6c:	2308      	moveq	r3, #8
 8009c6e:	230a      	movne	r3, #10
 8009c70:	2100      	movs	r1, #0
 8009c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c76:	6865      	ldr	r5, [r4, #4]
 8009c78:	60a5      	str	r5, [r4, #8]
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	bfa2      	ittt	ge
 8009c7e:	6821      	ldrge	r1, [r4, #0]
 8009c80:	f021 0104 	bicge.w	r1, r1, #4
 8009c84:	6021      	strge	r1, [r4, #0]
 8009c86:	b90e      	cbnz	r6, 8009c8c <_printf_i+0x114>
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	d04b      	beq.n	8009d24 <_printf_i+0x1ac>
 8009c8c:	4615      	mov	r5, r2
 8009c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c92:	fb03 6711 	mls	r7, r3, r1, r6
 8009c96:	5dc7      	ldrb	r7, [r0, r7]
 8009c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c9c:	4637      	mov	r7, r6
 8009c9e:	42bb      	cmp	r3, r7
 8009ca0:	460e      	mov	r6, r1
 8009ca2:	d9f4      	bls.n	8009c8e <_printf_i+0x116>
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d10b      	bne.n	8009cc0 <_printf_i+0x148>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	07de      	lsls	r6, r3, #31
 8009cac:	d508      	bpl.n	8009cc0 <_printf_i+0x148>
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	6861      	ldr	r1, [r4, #4]
 8009cb2:	4299      	cmp	r1, r3
 8009cb4:	bfde      	ittt	le
 8009cb6:	2330      	movle	r3, #48	; 0x30
 8009cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cc0:	1b52      	subs	r2, r2, r5
 8009cc2:	6122      	str	r2, [r4, #16]
 8009cc4:	f8cd a000 	str.w	sl, [sp]
 8009cc8:	464b      	mov	r3, r9
 8009cca:	aa03      	add	r2, sp, #12
 8009ccc:	4621      	mov	r1, r4
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7ff fee4 	bl	8009a9c <_printf_common>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d14a      	bne.n	8009d6e <_printf_i+0x1f6>
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cdc:	b004      	add	sp, #16
 8009cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	f043 0320 	orr.w	r3, r3, #32
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	4833      	ldr	r0, [pc, #204]	; (8009db8 <_printf_i+0x240>)
 8009cec:	2778      	movs	r7, #120	; 0x78
 8009cee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	6829      	ldr	r1, [r5, #0]
 8009cf6:	061f      	lsls	r7, r3, #24
 8009cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cfc:	d402      	bmi.n	8009d04 <_printf_i+0x18c>
 8009cfe:	065f      	lsls	r7, r3, #25
 8009d00:	bf48      	it	mi
 8009d02:	b2b6      	uxthmi	r6, r6
 8009d04:	07df      	lsls	r7, r3, #31
 8009d06:	bf48      	it	mi
 8009d08:	f043 0320 	orrmi.w	r3, r3, #32
 8009d0c:	6029      	str	r1, [r5, #0]
 8009d0e:	bf48      	it	mi
 8009d10:	6023      	strmi	r3, [r4, #0]
 8009d12:	b91e      	cbnz	r6, 8009d1c <_printf_i+0x1a4>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f023 0320 	bic.w	r3, r3, #32
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	e7a7      	b.n	8009c70 <_printf_i+0xf8>
 8009d20:	4824      	ldr	r0, [pc, #144]	; (8009db4 <_printf_i+0x23c>)
 8009d22:	e7e4      	b.n	8009cee <_printf_i+0x176>
 8009d24:	4615      	mov	r5, r2
 8009d26:	e7bd      	b.n	8009ca4 <_printf_i+0x12c>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	6826      	ldr	r6, [r4, #0]
 8009d2c:	6961      	ldr	r1, [r4, #20]
 8009d2e:	1d18      	adds	r0, r3, #4
 8009d30:	6028      	str	r0, [r5, #0]
 8009d32:	0635      	lsls	r5, r6, #24
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	d501      	bpl.n	8009d3c <_printf_i+0x1c4>
 8009d38:	6019      	str	r1, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <_printf_i+0x1ca>
 8009d3c:	0670      	lsls	r0, r6, #25
 8009d3e:	d5fb      	bpl.n	8009d38 <_printf_i+0x1c0>
 8009d40:	8019      	strh	r1, [r3, #0]
 8009d42:	2300      	movs	r3, #0
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	4615      	mov	r5, r2
 8009d48:	e7bc      	b.n	8009cc4 <_printf_i+0x14c>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	1d1a      	adds	r2, r3, #4
 8009d4e:	602a      	str	r2, [r5, #0]
 8009d50:	681d      	ldr	r5, [r3, #0]
 8009d52:	6862      	ldr	r2, [r4, #4]
 8009d54:	2100      	movs	r1, #0
 8009d56:	4628      	mov	r0, r5
 8009d58:	f7f6 fa62 	bl	8000220 <memchr>
 8009d5c:	b108      	cbz	r0, 8009d62 <_printf_i+0x1ea>
 8009d5e:	1b40      	subs	r0, r0, r5
 8009d60:	6060      	str	r0, [r4, #4]
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	6123      	str	r3, [r4, #16]
 8009d66:	2300      	movs	r3, #0
 8009d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d6c:	e7aa      	b.n	8009cc4 <_printf_i+0x14c>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0ad      	beq.n	8009cd8 <_printf_i+0x160>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	079b      	lsls	r3, r3, #30
 8009d80:	d413      	bmi.n	8009daa <_printf_i+0x232>
 8009d82:	68e0      	ldr	r0, [r4, #12]
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	4298      	cmp	r0, r3
 8009d88:	bfb8      	it	lt
 8009d8a:	4618      	movlt	r0, r3
 8009d8c:	e7a6      	b.n	8009cdc <_printf_i+0x164>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4632      	mov	r2, r6
 8009d92:	4649      	mov	r1, r9
 8009d94:	4640      	mov	r0, r8
 8009d96:	47d0      	blx	sl
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d09d      	beq.n	8009cd8 <_printf_i+0x160>
 8009d9c:	3501      	adds	r5, #1
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	9903      	ldr	r1, [sp, #12]
 8009da2:	1a5b      	subs	r3, r3, r1
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	dcf2      	bgt.n	8009d8e <_printf_i+0x216>
 8009da8:	e7eb      	b.n	8009d82 <_printf_i+0x20a>
 8009daa:	2500      	movs	r5, #0
 8009dac:	f104 0619 	add.w	r6, r4, #25
 8009db0:	e7f5      	b.n	8009d9e <_printf_i+0x226>
 8009db2:	bf00      	nop
 8009db4:	0800ab39 	.word	0x0800ab39
 8009db8:	0800ab4a 	.word	0x0800ab4a

08009dbc <__sflush_r>:
 8009dbc:	898a      	ldrh	r2, [r1, #12]
 8009dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	0710      	lsls	r0, r2, #28
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	d458      	bmi.n	8009e7c <__sflush_r+0xc0>
 8009dca:	684b      	ldr	r3, [r1, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dc05      	bgt.n	8009ddc <__sflush_r+0x20>
 8009dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dc02      	bgt.n	8009ddc <__sflush_r+0x20>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d0f9      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de8:	682f      	ldr	r7, [r5, #0]
 8009dea:	6a21      	ldr	r1, [r4, #32]
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	d032      	beq.n	8009e56 <__sflush_r+0x9a>
 8009df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	075a      	lsls	r2, r3, #29
 8009df6:	d505      	bpl.n	8009e04 <__sflush_r+0x48>
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	1ac0      	subs	r0, r0, r3
 8009dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dfe:	b10b      	cbz	r3, 8009e04 <__sflush_r+0x48>
 8009e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e02:	1ac0      	subs	r0, r0, r3
 8009e04:	2300      	movs	r3, #0
 8009e06:	4602      	mov	r2, r0
 8009e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0a:	6a21      	ldr	r1, [r4, #32]
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b0      	blx	r6
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	d106      	bne.n	8009e24 <__sflush_r+0x68>
 8009e16:	6829      	ldr	r1, [r5, #0]
 8009e18:	291d      	cmp	r1, #29
 8009e1a:	d82b      	bhi.n	8009e74 <__sflush_r+0xb8>
 8009e1c:	4a29      	ldr	r2, [pc, #164]	; (8009ec4 <__sflush_r+0x108>)
 8009e1e:	410a      	asrs	r2, r1
 8009e20:	07d6      	lsls	r6, r2, #31
 8009e22:	d427      	bmi.n	8009e74 <__sflush_r+0xb8>
 8009e24:	2200      	movs	r2, #0
 8009e26:	6062      	str	r2, [r4, #4]
 8009e28:	04d9      	lsls	r1, r3, #19
 8009e2a:	6922      	ldr	r2, [r4, #16]
 8009e2c:	6022      	str	r2, [r4, #0]
 8009e2e:	d504      	bpl.n	8009e3a <__sflush_r+0x7e>
 8009e30:	1c42      	adds	r2, r0, #1
 8009e32:	d101      	bne.n	8009e38 <__sflush_r+0x7c>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b903      	cbnz	r3, 8009e3a <__sflush_r+0x7e>
 8009e38:	6560      	str	r0, [r4, #84]	; 0x54
 8009e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3c:	602f      	str	r7, [r5, #0]
 8009e3e:	2900      	cmp	r1, #0
 8009e40:	d0c9      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e46:	4299      	cmp	r1, r3
 8009e48:	d002      	beq.n	8009e50 <__sflush_r+0x94>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f000 fa7a 	bl	800a344 <_free_r>
 8009e50:	2000      	movs	r0, #0
 8009e52:	6360      	str	r0, [r4, #52]	; 0x34
 8009e54:	e7c0      	b.n	8009dd8 <__sflush_r+0x1c>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b0      	blx	r6
 8009e5c:	1c41      	adds	r1, r0, #1
 8009e5e:	d1c8      	bne.n	8009df2 <__sflush_r+0x36>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0c5      	beq.n	8009df2 <__sflush_r+0x36>
 8009e66:	2b1d      	cmp	r3, #29
 8009e68:	d001      	beq.n	8009e6e <__sflush_r+0xb2>
 8009e6a:	2b16      	cmp	r3, #22
 8009e6c:	d101      	bne.n	8009e72 <__sflush_r+0xb6>
 8009e6e:	602f      	str	r7, [r5, #0]
 8009e70:	e7b1      	b.n	8009dd6 <__sflush_r+0x1a>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	e7ad      	b.n	8009dd8 <__sflush_r+0x1c>
 8009e7c:	690f      	ldr	r7, [r1, #16]
 8009e7e:	2f00      	cmp	r7, #0
 8009e80:	d0a9      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009e82:	0793      	lsls	r3, r2, #30
 8009e84:	680e      	ldr	r6, [r1, #0]
 8009e86:	bf08      	it	eq
 8009e88:	694b      	ldreq	r3, [r1, #20]
 8009e8a:	600f      	str	r7, [r1, #0]
 8009e8c:	bf18      	it	ne
 8009e8e:	2300      	movne	r3, #0
 8009e90:	eba6 0807 	sub.w	r8, r6, r7
 8009e94:	608b      	str	r3, [r1, #8]
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	dd9c      	ble.n	8009dd6 <__sflush_r+0x1a>
 8009e9c:	6a21      	ldr	r1, [r4, #32]
 8009e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ea0:	4643      	mov	r3, r8
 8009ea2:	463a      	mov	r2, r7
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b0      	blx	r6
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dc06      	bgt.n	8009eba <__sflush_r+0xfe>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eb8:	e78e      	b.n	8009dd8 <__sflush_r+0x1c>
 8009eba:	4407      	add	r7, r0
 8009ebc:	eba8 0800 	sub.w	r8, r8, r0
 8009ec0:	e7e9      	b.n	8009e96 <__sflush_r+0xda>
 8009ec2:	bf00      	nop
 8009ec4:	dfbffffe 	.word	0xdfbffffe

08009ec8 <_fflush_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	690b      	ldr	r3, [r1, #16]
 8009ecc:	4605      	mov	r5, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	b913      	cbnz	r3, 8009ed8 <_fflush_r+0x10>
 8009ed2:	2500      	movs	r5, #0
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	b118      	cbz	r0, 8009ee2 <_fflush_r+0x1a>
 8009eda:	6a03      	ldr	r3, [r0, #32]
 8009edc:	b90b      	cbnz	r3, 8009ee2 <_fflush_r+0x1a>
 8009ede:	f7ff f9e9 	bl	80092b4 <__sinit>
 8009ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0f3      	beq.n	8009ed2 <_fflush_r+0xa>
 8009eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eec:	07d0      	lsls	r0, r2, #31
 8009eee:	d404      	bmi.n	8009efa <_fflush_r+0x32>
 8009ef0:	0599      	lsls	r1, r3, #22
 8009ef2:	d402      	bmi.n	8009efa <_fflush_r+0x32>
 8009ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ef6:	f7ff fa92 	bl	800941e <__retarget_lock_acquire_recursive>
 8009efa:	4628      	mov	r0, r5
 8009efc:	4621      	mov	r1, r4
 8009efe:	f7ff ff5d 	bl	8009dbc <__sflush_r>
 8009f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f04:	07da      	lsls	r2, r3, #31
 8009f06:	4605      	mov	r5, r0
 8009f08:	d4e4      	bmi.n	8009ed4 <_fflush_r+0xc>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	059b      	lsls	r3, r3, #22
 8009f0e:	d4e1      	bmi.n	8009ed4 <_fflush_r+0xc>
 8009f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f12:	f7ff fa85 	bl	8009420 <__retarget_lock_release_recursive>
 8009f16:	e7dd      	b.n	8009ed4 <_fflush_r+0xc>

08009f18 <__malloc_lock>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__malloc_lock+0x8>)
 8009f1a:	f7ff ba80 	b.w	800941e <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	20005c00 	.word	0x20005c00

08009f24 <__malloc_unlock>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__malloc_unlock+0x8>)
 8009f26:	f7ff ba7b 	b.w	8009420 <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	20005c00 	.word	0x20005c00

08009f30 <__sread>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	f000 f9c2 	bl	800a2c0 <_read_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	bfab      	itete	ge
 8009f40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f42:	89a3      	ldrhlt	r3, [r4, #12]
 8009f44:	181b      	addge	r3, r3, r0
 8009f46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f4a:	bfac      	ite	ge
 8009f4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f4e:	81a3      	strhlt	r3, [r4, #12]
 8009f50:	bd10      	pop	{r4, pc}

08009f52 <__swrite>:
 8009f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	461f      	mov	r7, r3
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	05db      	lsls	r3, r3, #23
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4616      	mov	r6, r2
 8009f62:	d505      	bpl.n	8009f70 <__swrite+0x1e>
 8009f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f000 f996 	bl	800a29c <_lseek_r>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f86:	f000 b9bd 	b.w	800a304 <_write_r>

08009f8a <__sseek>:
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f92:	f000 f983 	bl	800a29c <_lseek_r>
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	bf15      	itete	ne
 8009f9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009fa6:	81a3      	strheq	r3, [r4, #12]
 8009fa8:	bf18      	it	ne
 8009faa:	81a3      	strhne	r3, [r4, #12]
 8009fac:	bd10      	pop	{r4, pc}

08009fae <__sclose>:
 8009fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb2:	f000 b941 	b.w	800a238 <_close_r>

08009fb6 <_realloc_r>:
 8009fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fba:	4680      	mov	r8, r0
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	b921      	cbnz	r1, 8009fcc <_realloc_r+0x16>
 8009fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	f7ff bce8 	b.w	800999c <_malloc_r>
 8009fcc:	b92a      	cbnz	r2, 8009fda <_realloc_r+0x24>
 8009fce:	f000 f9b9 	bl	800a344 <_free_r>
 8009fd2:	4625      	mov	r5, r4
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fda:	f000 f9ff 	bl	800a3dc <_malloc_usable_size_r>
 8009fde:	4284      	cmp	r4, r0
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	d802      	bhi.n	8009fea <_realloc_r+0x34>
 8009fe4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fe8:	d812      	bhi.n	800a010 <_realloc_r+0x5a>
 8009fea:	4621      	mov	r1, r4
 8009fec:	4640      	mov	r0, r8
 8009fee:	f7ff fcd5 	bl	800999c <_malloc_r>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d0ed      	beq.n	8009fd4 <_realloc_r+0x1e>
 8009ff8:	42bc      	cmp	r4, r7
 8009ffa:	4622      	mov	r2, r4
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	bf28      	it	cs
 800a000:	463a      	movcs	r2, r7
 800a002:	f000 f991 	bl	800a328 <memcpy>
 800a006:	4631      	mov	r1, r6
 800a008:	4640      	mov	r0, r8
 800a00a:	f000 f99b 	bl	800a344 <_free_r>
 800a00e:	e7e1      	b.n	8009fd4 <_realloc_r+0x1e>
 800a010:	4635      	mov	r5, r6
 800a012:	e7df      	b.n	8009fd4 <_realloc_r+0x1e>

0800a014 <__swbuf_r>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	460e      	mov	r6, r1
 800a018:	4614      	mov	r4, r2
 800a01a:	4605      	mov	r5, r0
 800a01c:	b118      	cbz	r0, 800a026 <__swbuf_r+0x12>
 800a01e:	6a03      	ldr	r3, [r0, #32]
 800a020:	b90b      	cbnz	r3, 800a026 <__swbuf_r+0x12>
 800a022:	f7ff f947 	bl	80092b4 <__sinit>
 800a026:	69a3      	ldr	r3, [r4, #24]
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	071a      	lsls	r2, r3, #28
 800a02e:	d525      	bpl.n	800a07c <__swbuf_r+0x68>
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	b31b      	cbz	r3, 800a07c <__swbuf_r+0x68>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	6922      	ldr	r2, [r4, #16]
 800a038:	1a98      	subs	r0, r3, r2
 800a03a:	6963      	ldr	r3, [r4, #20]
 800a03c:	b2f6      	uxtb	r6, r6
 800a03e:	4283      	cmp	r3, r0
 800a040:	4637      	mov	r7, r6
 800a042:	dc04      	bgt.n	800a04e <__swbuf_r+0x3a>
 800a044:	4621      	mov	r1, r4
 800a046:	4628      	mov	r0, r5
 800a048:	f7ff ff3e 	bl	8009ec8 <_fflush_r>
 800a04c:	b9e0      	cbnz	r0, 800a088 <__swbuf_r+0x74>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	3b01      	subs	r3, #1
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6022      	str	r2, [r4, #0]
 800a05a:	701e      	strb	r6, [r3, #0]
 800a05c:	6962      	ldr	r2, [r4, #20]
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	429a      	cmp	r2, r3
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x5a>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d506      	bpl.n	800a078 <__swbuf_r+0x64>
 800a06a:	2e0a      	cmp	r6, #10
 800a06c:	d104      	bne.n	800a078 <__swbuf_r+0x64>
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff ff29 	bl	8009ec8 <_fflush_r>
 800a076:	b938      	cbnz	r0, 800a088 <__swbuf_r+0x74>
 800a078:	4638      	mov	r0, r7
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07c:	4621      	mov	r1, r4
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 f806 	bl	800a090 <__swsetup_r>
 800a084:	2800      	cmp	r0, #0
 800a086:	d0d5      	beq.n	800a034 <__swbuf_r+0x20>
 800a088:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a08c:	e7f4      	b.n	800a078 <__swbuf_r+0x64>
	...

0800a090 <__swsetup_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <__swsetup_r+0xac>)
 800a094:	4605      	mov	r5, r0
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	460c      	mov	r4, r1
 800a09a:	b118      	cbz	r0, 800a0a4 <__swsetup_r+0x14>
 800a09c:	6a03      	ldr	r3, [r0, #32]
 800a09e:	b90b      	cbnz	r3, 800a0a4 <__swsetup_r+0x14>
 800a0a0:	f7ff f908 	bl	80092b4 <__sinit>
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0aa:	0718      	lsls	r0, r3, #28
 800a0ac:	d422      	bmi.n	800a0f4 <__swsetup_r+0x64>
 800a0ae:	06d9      	lsls	r1, r3, #27
 800a0b0:	d407      	bmi.n	800a0c2 <__swsetup_r+0x32>
 800a0b2:	2309      	movs	r3, #9
 800a0b4:	602b      	str	r3, [r5, #0]
 800a0b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0c0:	e034      	b.n	800a12c <__swsetup_r+0x9c>
 800a0c2:	0758      	lsls	r0, r3, #29
 800a0c4:	d512      	bpl.n	800a0ec <__swsetup_r+0x5c>
 800a0c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c8:	b141      	cbz	r1, 800a0dc <__swsetup_r+0x4c>
 800a0ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	d002      	beq.n	800a0d8 <__swsetup_r+0x48>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f936 	bl	800a344 <_free_r>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	6363      	str	r3, [r4, #52]	; 0x34
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	f043 0308 	orr.w	r3, r3, #8
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b94b      	cbnz	r3, 800a10c <__swsetup_r+0x7c>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a102:	d003      	beq.n	800a10c <__swsetup_r+0x7c>
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f840 	bl	800a18c <__smakebuf_r>
 800a10c:	89a0      	ldrh	r0, [r4, #12]
 800a10e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a112:	f010 0301 	ands.w	r3, r0, #1
 800a116:	d00a      	beq.n	800a12e <__swsetup_r+0x9e>
 800a118:	2300      	movs	r3, #0
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	6963      	ldr	r3, [r4, #20]
 800a11e:	425b      	negs	r3, r3
 800a120:	61a3      	str	r3, [r4, #24]
 800a122:	6923      	ldr	r3, [r4, #16]
 800a124:	b943      	cbnz	r3, 800a138 <__swsetup_r+0xa8>
 800a126:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a12a:	d1c4      	bne.n	800a0b6 <__swsetup_r+0x26>
 800a12c:	bd38      	pop	{r3, r4, r5, pc}
 800a12e:	0781      	lsls	r1, r0, #30
 800a130:	bf58      	it	pl
 800a132:	6963      	ldrpl	r3, [r4, #20]
 800a134:	60a3      	str	r3, [r4, #8]
 800a136:	e7f4      	b.n	800a122 <__swsetup_r+0x92>
 800a138:	2000      	movs	r0, #0
 800a13a:	e7f7      	b.n	800a12c <__swsetup_r+0x9c>
 800a13c:	20000080 	.word	0x20000080

0800a140 <__swhatbuf_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	460c      	mov	r4, r1
 800a144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a148:	2900      	cmp	r1, #0
 800a14a:	b096      	sub	sp, #88	; 0x58
 800a14c:	4615      	mov	r5, r2
 800a14e:	461e      	mov	r6, r3
 800a150:	da0d      	bge.n	800a16e <__swhatbuf_r+0x2e>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a158:	f04f 0100 	mov.w	r1, #0
 800a15c:	bf0c      	ite	eq
 800a15e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a162:	2340      	movne	r3, #64	; 0x40
 800a164:	2000      	movs	r0, #0
 800a166:	6031      	str	r1, [r6, #0]
 800a168:	602b      	str	r3, [r5, #0]
 800a16a:	b016      	add	sp, #88	; 0x58
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	466a      	mov	r2, sp
 800a170:	f000 f872 	bl	800a258 <_fstat_r>
 800a174:	2800      	cmp	r0, #0
 800a176:	dbec      	blt.n	800a152 <__swhatbuf_r+0x12>
 800a178:	9901      	ldr	r1, [sp, #4]
 800a17a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a17e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a182:	4259      	negs	r1, r3
 800a184:	4159      	adcs	r1, r3
 800a186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a18a:	e7eb      	b.n	800a164 <__swhatbuf_r+0x24>

0800a18c <__smakebuf_r>:
 800a18c:	898b      	ldrh	r3, [r1, #12]
 800a18e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a190:	079d      	lsls	r5, r3, #30
 800a192:	4606      	mov	r6, r0
 800a194:	460c      	mov	r4, r1
 800a196:	d507      	bpl.n	800a1a8 <__smakebuf_r+0x1c>
 800a198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	6163      	str	r3, [r4, #20]
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	ab01      	add	r3, sp, #4
 800a1aa:	466a      	mov	r2, sp
 800a1ac:	f7ff ffc8 	bl	800a140 <__swhatbuf_r>
 800a1b0:	9900      	ldr	r1, [sp, #0]
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7ff fbf1 	bl	800999c <_malloc_r>
 800a1ba:	b948      	cbnz	r0, 800a1d0 <__smakebuf_r+0x44>
 800a1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c0:	059a      	lsls	r2, r3, #22
 800a1c2:	d4ef      	bmi.n	800a1a4 <__smakebuf_r+0x18>
 800a1c4:	f023 0303 	bic.w	r3, r3, #3
 800a1c8:	f043 0302 	orr.w	r3, r3, #2
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	e7e3      	b.n	800a198 <__smakebuf_r+0xc>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	6020      	str	r0, [r4, #0]
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	9b00      	ldr	r3, [sp, #0]
 800a1dc:	6163      	str	r3, [r4, #20]
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	6120      	str	r0, [r4, #16]
 800a1e2:	b15b      	cbz	r3, 800a1fc <__smakebuf_r+0x70>
 800a1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	f000 f847 	bl	800a27c <_isatty_r>
 800a1ee:	b128      	cbz	r0, 800a1fc <__smakebuf_r+0x70>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f023 0303 	bic.w	r3, r3, #3
 800a1f6:	f043 0301 	orr.w	r3, r3, #1
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	89a3      	ldrh	r3, [r4, #12]
 800a1fe:	431d      	orrs	r5, r3
 800a200:	81a5      	strh	r5, [r4, #12]
 800a202:	e7cf      	b.n	800a1a4 <__smakebuf_r+0x18>

0800a204 <memmove>:
 800a204:	4288      	cmp	r0, r1
 800a206:	b510      	push	{r4, lr}
 800a208:	eb01 0402 	add.w	r4, r1, r2
 800a20c:	d902      	bls.n	800a214 <memmove+0x10>
 800a20e:	4284      	cmp	r4, r0
 800a210:	4623      	mov	r3, r4
 800a212:	d807      	bhi.n	800a224 <memmove+0x20>
 800a214:	1e43      	subs	r3, r0, #1
 800a216:	42a1      	cmp	r1, r4
 800a218:	d008      	beq.n	800a22c <memmove+0x28>
 800a21a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a222:	e7f8      	b.n	800a216 <memmove+0x12>
 800a224:	4402      	add	r2, r0
 800a226:	4601      	mov	r1, r0
 800a228:	428a      	cmp	r2, r1
 800a22a:	d100      	bne.n	800a22e <memmove+0x2a>
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a236:	e7f7      	b.n	800a228 <memmove+0x24>

0800a238 <_close_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	; (800a254 <_close_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f8 fbf5 	bl	8002a32 <_close>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_close_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_close_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	20005c0c 	.word	0x20005c0c

0800a258 <_fstat_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_fstat_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f8 fbf0 	bl	8002a4a <_fstat>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_fstat_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_fstat_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	20005c0c 	.word	0x20005c0c

0800a27c <_isatty_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d06      	ldr	r5, [pc, #24]	; (800a298 <_isatty_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7f8 fbef 	bl	8002a6a <_isatty>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_isatty_r+0x1a>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_isatty_r+0x1a>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20005c0c 	.word	0x20005c0c

0800a29c <_lseek_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	; (800a2bc <_lseek_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f8 fbe8 	bl	8002a80 <_lseek>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_lseek_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_lseek_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20005c0c 	.word	0x20005c0c

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f8 fb76 	bl	80029c0 <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20005c0c 	.word	0x20005c0c

0800a2e4 <_sbrk_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d06      	ldr	r5, [pc, #24]	; (800a300 <_sbrk_r+0x1c>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f8 fbd4 	bl	8002a9c <_sbrk>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_sbrk_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_sbrk_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	20005c0c 	.word	0x20005c0c

0800a304 <_write_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_write_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f8 fb71 	bl	80029fa <_write>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_write_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_write_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20005c0c 	.word	0x20005c0c

0800a328 <memcpy>:
 800a328:	440a      	add	r2, r1
 800a32a:	4291      	cmp	r1, r2
 800a32c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a330:	d100      	bne.n	800a334 <memcpy+0xc>
 800a332:	4770      	bx	lr
 800a334:	b510      	push	{r4, lr}
 800a336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a33e:	4291      	cmp	r1, r2
 800a340:	d1f9      	bne.n	800a336 <memcpy+0xe>
 800a342:	bd10      	pop	{r4, pc}

0800a344 <_free_r>:
 800a344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a346:	2900      	cmp	r1, #0
 800a348:	d044      	beq.n	800a3d4 <_free_r+0x90>
 800a34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34e:	9001      	str	r0, [sp, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	f1a1 0404 	sub.w	r4, r1, #4
 800a356:	bfb8      	it	lt
 800a358:	18e4      	addlt	r4, r4, r3
 800a35a:	f7ff fddd 	bl	8009f18 <__malloc_lock>
 800a35e:	4a1e      	ldr	r2, [pc, #120]	; (800a3d8 <_free_r+0x94>)
 800a360:	9801      	ldr	r0, [sp, #4]
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	b933      	cbnz	r3, 800a374 <_free_r+0x30>
 800a366:	6063      	str	r3, [r4, #4]
 800a368:	6014      	str	r4, [r2, #0]
 800a36a:	b003      	add	sp, #12
 800a36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a370:	f7ff bdd8 	b.w	8009f24 <__malloc_unlock>
 800a374:	42a3      	cmp	r3, r4
 800a376:	d908      	bls.n	800a38a <_free_r+0x46>
 800a378:	6825      	ldr	r5, [r4, #0]
 800a37a:	1961      	adds	r1, r4, r5
 800a37c:	428b      	cmp	r3, r1
 800a37e:	bf01      	itttt	eq
 800a380:	6819      	ldreq	r1, [r3, #0]
 800a382:	685b      	ldreq	r3, [r3, #4]
 800a384:	1949      	addeq	r1, r1, r5
 800a386:	6021      	streq	r1, [r4, #0]
 800a388:	e7ed      	b.n	800a366 <_free_r+0x22>
 800a38a:	461a      	mov	r2, r3
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	b10b      	cbz	r3, 800a394 <_free_r+0x50>
 800a390:	42a3      	cmp	r3, r4
 800a392:	d9fa      	bls.n	800a38a <_free_r+0x46>
 800a394:	6811      	ldr	r1, [r2, #0]
 800a396:	1855      	adds	r5, r2, r1
 800a398:	42a5      	cmp	r5, r4
 800a39a:	d10b      	bne.n	800a3b4 <_free_r+0x70>
 800a39c:	6824      	ldr	r4, [r4, #0]
 800a39e:	4421      	add	r1, r4
 800a3a0:	1854      	adds	r4, r2, r1
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	6011      	str	r1, [r2, #0]
 800a3a6:	d1e0      	bne.n	800a36a <_free_r+0x26>
 800a3a8:	681c      	ldr	r4, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	6053      	str	r3, [r2, #4]
 800a3ae:	440c      	add	r4, r1
 800a3b0:	6014      	str	r4, [r2, #0]
 800a3b2:	e7da      	b.n	800a36a <_free_r+0x26>
 800a3b4:	d902      	bls.n	800a3bc <_free_r+0x78>
 800a3b6:	230c      	movs	r3, #12
 800a3b8:	6003      	str	r3, [r0, #0]
 800a3ba:	e7d6      	b.n	800a36a <_free_r+0x26>
 800a3bc:	6825      	ldr	r5, [r4, #0]
 800a3be:	1961      	adds	r1, r4, r5
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	bf04      	itt	eq
 800a3c4:	6819      	ldreq	r1, [r3, #0]
 800a3c6:	685b      	ldreq	r3, [r3, #4]
 800a3c8:	6063      	str	r3, [r4, #4]
 800a3ca:	bf04      	itt	eq
 800a3cc:	1949      	addeq	r1, r1, r5
 800a3ce:	6021      	streq	r1, [r4, #0]
 800a3d0:	6054      	str	r4, [r2, #4]
 800a3d2:	e7ca      	b.n	800a36a <_free_r+0x26>
 800a3d4:	b003      	add	sp, #12
 800a3d6:	bd30      	pop	{r4, r5, pc}
 800a3d8:	20005c04 	.word	0x20005c04

0800a3dc <_malloc_usable_size_r>:
 800a3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e0:	1f18      	subs	r0, r3, #4
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfbc      	itt	lt
 800a3e6:	580b      	ldrlt	r3, [r1, r0]
 800a3e8:	18c0      	addlt	r0, r0, r3
 800a3ea:	4770      	bx	lr

0800a3ec <sqrt>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	ed2d 8b02 	vpush	{d8}
 800a3f2:	ec55 4b10 	vmov	r4, r5, d0
 800a3f6:	f000 f825 	bl	800a444 <__ieee754_sqrt>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	eeb0 8a40 	vmov.f32	s16, s0
 800a406:	eef0 8a60 	vmov.f32	s17, s1
 800a40a:	f7f6 fbaf 	bl	8000b6c <__aeabi_dcmpun>
 800a40e:	b990      	cbnz	r0, 800a436 <sqrt+0x4a>
 800a410:	2200      	movs	r2, #0
 800a412:	2300      	movs	r3, #0
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800a41c:	b158      	cbz	r0, 800a436 <sqrt+0x4a>
 800a41e:	f7fe ffd3 	bl	80093c8 <__errno>
 800a422:	2321      	movs	r3, #33	; 0x21
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	2200      	movs	r2, #0
 800a428:	2300      	movs	r3, #0
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7f6 fa2d 	bl	800088c <__aeabi_ddiv>
 800a432:	ec41 0b18 	vmov	d8, r0, r1
 800a436:	eeb0 0a48 	vmov.f32	s0, s16
 800a43a:	eef0 0a68 	vmov.f32	s1, s17
 800a43e:	ecbd 8b02 	vpop	{d8}
 800a442:	bd38      	pop	{r3, r4, r5, pc}

0800a444 <__ieee754_sqrt>:
 800a444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	ec55 4b10 	vmov	r4, r5, d0
 800a44c:	4e67      	ldr	r6, [pc, #412]	; (800a5ec <__ieee754_sqrt+0x1a8>)
 800a44e:	43ae      	bics	r6, r5
 800a450:	ee10 0a10 	vmov	r0, s0
 800a454:	ee10 2a10 	vmov	r2, s0
 800a458:	4629      	mov	r1, r5
 800a45a:	462b      	mov	r3, r5
 800a45c:	d10d      	bne.n	800a47a <__ieee754_sqrt+0x36>
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4620      	mov	r0, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	f7f5 ff2f 	bl	80002cc <__adddf3>
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	ec45 4b10 	vmov	d0, r4, r5
 800a476:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	dc0b      	bgt.n	800a496 <__ieee754_sqrt+0x52>
 800a47e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a482:	4326      	orrs	r6, r4
 800a484:	d0f5      	beq.n	800a472 <__ieee754_sqrt+0x2e>
 800a486:	b135      	cbz	r5, 800a496 <__ieee754_sqrt+0x52>
 800a488:	f7f5 ff1e 	bl	80002c8 <__aeabi_dsub>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	f7f6 f9fc 	bl	800088c <__aeabi_ddiv>
 800a494:	e7eb      	b.n	800a46e <__ieee754_sqrt+0x2a>
 800a496:	1509      	asrs	r1, r1, #20
 800a498:	f000 808d 	beq.w	800a5b6 <__ieee754_sqrt+0x172>
 800a49c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4a8:	07c9      	lsls	r1, r1, #31
 800a4aa:	bf5c      	itt	pl
 800a4ac:	005b      	lslpl	r3, r3, #1
 800a4ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a4b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4b6:	bf58      	it	pl
 800a4b8:	0052      	lslpl	r2, r2, #1
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a4c0:	1076      	asrs	r6, r6, #1
 800a4c2:	0052      	lsls	r2, r2, #1
 800a4c4:	f04f 0e16 	mov.w	lr, #22
 800a4c8:	46ac      	mov	ip, r5
 800a4ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4ce:	eb0c 0001 	add.w	r0, ip, r1
 800a4d2:	4298      	cmp	r0, r3
 800a4d4:	bfde      	ittt	le
 800a4d6:	1a1b      	suble	r3, r3, r0
 800a4d8:	eb00 0c01 	addle.w	ip, r0, r1
 800a4dc:	186d      	addle	r5, r5, r1
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	f1be 0e01 	subs.w	lr, lr, #1
 800a4e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a4e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a4ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a4f0:	d1ed      	bne.n	800a4ce <__ieee754_sqrt+0x8a>
 800a4f2:	4674      	mov	r4, lr
 800a4f4:	2720      	movs	r7, #32
 800a4f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a4fa:	4563      	cmp	r3, ip
 800a4fc:	eb01 000e 	add.w	r0, r1, lr
 800a500:	dc02      	bgt.n	800a508 <__ieee754_sqrt+0xc4>
 800a502:	d113      	bne.n	800a52c <__ieee754_sqrt+0xe8>
 800a504:	4290      	cmp	r0, r2
 800a506:	d811      	bhi.n	800a52c <__ieee754_sqrt+0xe8>
 800a508:	2800      	cmp	r0, #0
 800a50a:	eb00 0e01 	add.w	lr, r0, r1
 800a50e:	da57      	bge.n	800a5c0 <__ieee754_sqrt+0x17c>
 800a510:	f1be 0f00 	cmp.w	lr, #0
 800a514:	db54      	blt.n	800a5c0 <__ieee754_sqrt+0x17c>
 800a516:	f10c 0801 	add.w	r8, ip, #1
 800a51a:	eba3 030c 	sub.w	r3, r3, ip
 800a51e:	4290      	cmp	r0, r2
 800a520:	bf88      	it	hi
 800a522:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800a526:	1a12      	subs	r2, r2, r0
 800a528:	440c      	add	r4, r1
 800a52a:	46c4      	mov	ip, r8
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	3f01      	subs	r7, #1
 800a530:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a534:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a538:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a53c:	d1dd      	bne.n	800a4fa <__ieee754_sqrt+0xb6>
 800a53e:	4313      	orrs	r3, r2
 800a540:	d01b      	beq.n	800a57a <__ieee754_sqrt+0x136>
 800a542:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a5f0 <__ieee754_sqrt+0x1ac>
 800a546:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a5f4 <__ieee754_sqrt+0x1b0>
 800a54a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a54e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a552:	f7f5 feb9 	bl	80002c8 <__aeabi_dsub>
 800a556:	e9da 8900 	ldrd	r8, r9, [sl]
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f6 fae5 	bl	8000b30 <__aeabi_dcmple>
 800a566:	b140      	cbz	r0, 800a57a <__ieee754_sqrt+0x136>
 800a568:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a56c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a570:	e9db 2300 	ldrd	r2, r3, [fp]
 800a574:	d126      	bne.n	800a5c4 <__ieee754_sqrt+0x180>
 800a576:	3501      	adds	r5, #1
 800a578:	463c      	mov	r4, r7
 800a57a:	106a      	asrs	r2, r5, #1
 800a57c:	0863      	lsrs	r3, r4, #1
 800a57e:	07e9      	lsls	r1, r5, #31
 800a580:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a584:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a588:	bf48      	it	mi
 800a58a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a58e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a592:	461c      	mov	r4, r3
 800a594:	e76d      	b.n	800a472 <__ieee754_sqrt+0x2e>
 800a596:	0ad3      	lsrs	r3, r2, #11
 800a598:	3815      	subs	r0, #21
 800a59a:	0552      	lsls	r2, r2, #21
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0fa      	beq.n	800a596 <__ieee754_sqrt+0x152>
 800a5a0:	02dc      	lsls	r4, r3, #11
 800a5a2:	d50a      	bpl.n	800a5ba <__ieee754_sqrt+0x176>
 800a5a4:	f1c1 0420 	rsb	r4, r1, #32
 800a5a8:	fa22 f404 	lsr.w	r4, r2, r4
 800a5ac:	1e4d      	subs	r5, r1, #1
 800a5ae:	408a      	lsls	r2, r1
 800a5b0:	4323      	orrs	r3, r4
 800a5b2:	1b41      	subs	r1, r0, r5
 800a5b4:	e772      	b.n	800a49c <__ieee754_sqrt+0x58>
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	e7f0      	b.n	800a59c <__ieee754_sqrt+0x158>
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	3101      	adds	r1, #1
 800a5be:	e7ef      	b.n	800a5a0 <__ieee754_sqrt+0x15c>
 800a5c0:	46e0      	mov	r8, ip
 800a5c2:	e7aa      	b.n	800a51a <__ieee754_sqrt+0xd6>
 800a5c4:	f7f5 fe82 	bl	80002cc <__adddf3>
 800a5c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7f6 faa2 	bl	8000b1c <__aeabi_dcmplt>
 800a5d8:	b120      	cbz	r0, 800a5e4 <__ieee754_sqrt+0x1a0>
 800a5da:	1ca0      	adds	r0, r4, #2
 800a5dc:	bf08      	it	eq
 800a5de:	3501      	addeq	r5, #1
 800a5e0:	3402      	adds	r4, #2
 800a5e2:	e7ca      	b.n	800a57a <__ieee754_sqrt+0x136>
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	f024 0401 	bic.w	r4, r4, #1
 800a5ea:	e7c6      	b.n	800a57a <__ieee754_sqrt+0x136>
 800a5ec:	7ff00000 	.word	0x7ff00000
 800a5f0:	20000088 	.word	0x20000088
 800a5f4:	20000090 	.word	0x20000090

0800a5f8 <round>:
 800a5f8:	ec53 2b10 	vmov	r2, r3, d0
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a602:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a606:	2813      	cmp	r0, #19
 800a608:	ee10 5a10 	vmov	r5, s0
 800a60c:	4619      	mov	r1, r3
 800a60e:	dc18      	bgt.n	800a642 <round+0x4a>
 800a610:	2800      	cmp	r0, #0
 800a612:	da09      	bge.n	800a628 <round+0x30>
 800a614:	3001      	adds	r0, #1
 800a616:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a61a:	d103      	bne.n	800a624 <round+0x2c>
 800a61c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a620:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a624:	2300      	movs	r3, #0
 800a626:	e02a      	b.n	800a67e <round+0x86>
 800a628:	4c16      	ldr	r4, [pc, #88]	; (800a684 <round+0x8c>)
 800a62a:	4104      	asrs	r4, r0
 800a62c:	ea03 0604 	and.w	r6, r3, r4
 800a630:	4316      	orrs	r6, r2
 800a632:	d011      	beq.n	800a658 <round+0x60>
 800a634:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a638:	4103      	asrs	r3, r0
 800a63a:	440b      	add	r3, r1
 800a63c:	ea23 0104 	bic.w	r1, r3, r4
 800a640:	e7f0      	b.n	800a624 <round+0x2c>
 800a642:	2833      	cmp	r0, #51	; 0x33
 800a644:	dd0b      	ble.n	800a65e <round+0x66>
 800a646:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a64a:	d105      	bne.n	800a658 <round+0x60>
 800a64c:	ee10 0a10 	vmov	r0, s0
 800a650:	f7f5 fe3c 	bl	80002cc <__adddf3>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	ec43 2b10 	vmov	d0, r2, r3
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
 800a65e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a662:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a666:	40f4      	lsrs	r4, r6
 800a668:	4214      	tst	r4, r2
 800a66a:	d0f5      	beq.n	800a658 <round+0x60>
 800a66c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a670:	2301      	movs	r3, #1
 800a672:	4083      	lsls	r3, r0
 800a674:	195b      	adds	r3, r3, r5
 800a676:	bf28      	it	cs
 800a678:	3101      	addcs	r1, #1
 800a67a:	ea23 0304 	bic.w	r3, r3, r4
 800a67e:	461a      	mov	r2, r3
 800a680:	460b      	mov	r3, r1
 800a682:	e7e9      	b.n	800a658 <round+0x60>
 800a684:	000fffff 	.word	0x000fffff

0800a688 <trunc>:
 800a688:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800a68c:	ec5c bb10 	vmov	fp, ip, d0
 800a690:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800a694:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800a698:	2913      	cmp	r1, #19
 800a69a:	4664      	mov	r4, ip
 800a69c:	dc11      	bgt.n	800a6c2 <trunc+0x3a>
 800a69e:	2900      	cmp	r1, #0
 800a6a0:	bfa7      	ittee	ge
 800a6a2:	4b15      	ldrge	r3, [pc, #84]	; (800a6f8 <trunc+0x70>)
 800a6a4:	fa43 f101 	asrge.w	r1, r3, r1
 800a6a8:	2200      	movlt	r2, #0
 800a6aa:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800a6ae:	bfa4      	itt	ge
 800a6b0:	2200      	movge	r2, #0
 800a6b2:	ea01 030c 	andge.w	r3, r1, ip
 800a6b6:	4693      	mov	fp, r2
 800a6b8:	469c      	mov	ip, r3
 800a6ba:	ec4c bb10 	vmov	d0, fp, ip
 800a6be:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800a6c2:	2933      	cmp	r1, #51	; 0x33
 800a6c4:	dd0d      	ble.n	800a6e2 <trunc+0x5a>
 800a6c6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6ca:	d1f6      	bne.n	800a6ba <trunc+0x32>
 800a6cc:	4663      	mov	r3, ip
 800a6ce:	ee10 2a10 	vmov	r2, s0
 800a6d2:	ee10 0a10 	vmov	r0, s0
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	f7f5 fdf8 	bl	80002cc <__adddf3>
 800a6dc:	4683      	mov	fp, r0
 800a6de:	468c      	mov	ip, r1
 800a6e0:	e7eb      	b.n	800a6ba <trunc+0x32>
 800a6e2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ea:	40c3      	lsrs	r3, r0
 800a6ec:	ea2b 0603 	bic.w	r6, fp, r3
 800a6f0:	46b3      	mov	fp, r6
 800a6f2:	46a4      	mov	ip, r4
 800a6f4:	e7e1      	b.n	800a6ba <trunc+0x32>
 800a6f6:	bf00      	nop
 800a6f8:	fff00000 	.word	0xfff00000

0800a6fc <_init>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr

0800a708 <_fini>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr
