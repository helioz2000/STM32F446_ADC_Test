
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000074  08004cf8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08004cf8  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e81c  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002305  00000000  00000000  0002e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad3  00000000  00000000  000319f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023013  00000000  00000000  000324c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e2b  00000000  00000000  000554d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d281b  00000000  00000000  00066301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004174  00000000  00000000  00138b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b80 	.word	0x08004b80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004b80 	.word	0x08004b80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <cmd_error>:

extern UART_HandleTypeDef huart2;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	printf("Error in command <%s>\r\n", cmd_str);
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <cmd_error+0x18>)
 80005c8:	f003 fc0c 	bl	8003de4 <iprintf>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08004b98 	.word	0x08004b98

080005d8 <cmd_L>:

int cmd_L(uint8_t* cmd_str) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b30      	cmp	r3, #48	; 0x30
 80005e8:	d002      	beq.n	80005f0 <cmd_L+0x18>
 80005ea:	2b31      	cmp	r3, #49	; 0x31
 80005ec:	d005      	beq.n	80005fa <cmd_L+0x22>
 80005ee:	e009      	b.n	8000604 <cmd_L+0x2c>
	case '0':
		printf("-LED OFF-\r\n");
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <cmd_L+0x38>)
 80005f2:	f003 fc5d 	bl	8003eb0 <puts>
		return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e006      	b.n	8000608 <cmd_L+0x30>
		break;
	case '1':
		printf("-LED ON-\r\n");
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <cmd_L+0x3c>)
 80005fc:	f003 fc58 	bl	8003eb0 <puts>
		return 0;
 8000600:	2300      	movs	r3, #0
 8000602:	e001      	b.n	8000608 <cmd_L+0x30>
		break;
	}
	return -1;
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	08004bb0 	.word	0x08004bb0
 8000614:	08004bbc 	.word	0x08004bbc

08000618 <cmd_help>:

int cmd_help(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	printf("\r\nCommand Help:\r\n");
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <cmd_help+0x18>)
 800061e:	f003 fc47 	bl	8003eb0 <puts>
	printf("L[0,1]: LED on / off\r\n");
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <cmd_help+0x1c>)
 8000624:	f003 fc44 	bl	8003eb0 <puts>
	return 0;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08004bc8 	.word	0x08004bc8
 8000634:	08004bdc 	.word	0x08004bdc

08000638 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000644:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b6c      	cmp	r3, #108	; 0x6c
 800064c:	d009      	beq.n	8000662 <cmd_process+0x2a>
 800064e:	2b6c      	cmp	r3, #108	; 0x6c
 8000650:	dc0f      	bgt.n	8000672 <cmd_process+0x3a>
 8000652:	2b68      	cmp	r3, #104	; 0x68
 8000654:	d00a      	beq.n	800066c <cmd_process+0x34>
 8000656:	2b68      	cmp	r3, #104	; 0x68
 8000658:	dc0b      	bgt.n	8000672 <cmd_process+0x3a>
 800065a:	2b48      	cmp	r3, #72	; 0x48
 800065c:	d006      	beq.n	800066c <cmd_process+0x34>
 800065e:	2b4c      	cmp	r3, #76	; 0x4c
 8000660:	d107      	bne.n	8000672 <cmd_process+0x3a>
	case 'L':
	case 'l':
		retval = cmd_L(cmd_str);
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ffb8 	bl	80005d8 <cmd_L>
 8000668:	60f8      	str	r0, [r7, #12]
		break;
 800066a:	e002      	b.n	8000672 <cmd_process+0x3a>
	case 'H':
	case 'h':
		retval = cmd_help();
 800066c:	f7ff ffd4 	bl	8000618 <cmd_help>
 8000670:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	cmd_len = strlen(cmd_str);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff fdc3 	bl	8000210 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <CMD_Handler+0x3c>)
 8000690:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <CMD_Handler+0x3c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d105      	bne.n	80006a6 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff8e 	bl	80005bc <cmd_error>
		return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	e003      	b.n	80006ae <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ffc6 	bl	8000638 <cmd_process>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000090 	.word	0x20000090

080006bc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006c4:	1d39      	adds	r1, r7, #4
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ca:	2201      	movs	r2, #1
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <__io_putchar+0x20>)
 80006ce:	f002 fa9c 	bl	8002c0a <HAL_UART_Transmit>
  return ch;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000dc 	.word	0x200000dc

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fba2 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f836 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f91c 	bl	8000928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f0:	f000 f8f0 	bl	80008d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006f4:	f000 f8a2 	bl	800083c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start UART receive via interrupt
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	4910      	ldr	r1, [pc, #64]	; (800073c <main+0x5c>)
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <main+0x60>)
 80006fe:	f002 fb16 	bl	8002d2e <HAL_UART_Receive_IT>
  // Transmit startup message
  HAL_UART_Transmit(&huart2, StartupMsg, sizeof(StartupMsg), 1000);
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	220a      	movs	r2, #10
 8000708:	490e      	ldr	r1, [pc, #56]	; (8000744 <main+0x64>)
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <main+0x60>)
 800070c:	f002 fa7d 	bl	8002c0a <HAL_UART_Transmit>

  // Start ADC trigger timer
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <main+0x68>)
 8000712:	f001 fdf1 	bl	80022f8 <HAL_TIM_Base_Start_IT>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <main+0x40>
     /* Starting Error */
     Error_Handler();
 800071c:	f000 f9ba 	bl	8000a94 <Error_Handler>
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin (LED2_PORT, LED2_PIN);
	  //HAL_Delay (500);
	  if (rx_cmd_ready) {
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <main+0x6c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0fb      	beq.n	8000720 <main+0x40>
		  CMD_Handler(rx_buff);
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <main+0x70>)
 800072a:	f7ff ffa7 	bl	800067c <CMD_Handler>
		  rx_count = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <main+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <main+0x6c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	  if (rx_cmd_ready) {
 800073a:	e7f1      	b.n	8000720 <main+0x40>
 800073c:	20000122 	.word	0x20000122
 8000740:	200000dc 	.word	0x200000dc
 8000744:	20000000 	.word	0x20000000
 8000748:	20000094 	.word	0x20000094
 800074c:	20000138 	.word	0x20000138
 8000750:	20000124 	.word	0x20000124
 8000754:	20000120 	.word	0x20000120

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2234      	movs	r2, #52	; 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fbaa 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <SystemClock_Config+0xdc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a2b      	ldr	r2, [pc, #172]	; (8000834 <SystemClock_Config+0xdc>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <SystemClock_Config+0xdc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <SystemClock_Config+0xe0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a25      	ldr	r2, [pc, #148]	; (8000838 <SystemClock_Config+0xe0>)
 80007a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <SystemClock_Config+0xe0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007cc:	23b4      	movs	r3, #180	; 0xb4
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fa9b 	bl	8001d1c <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ec:	f000 f952 	bl	8000a94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f0:	f000 fefa 	bl	80015e8 <HAL_PWREx_EnableOverDrive>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fa:	f000 f94b 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f000 ff33 	bl	8001688 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000828:	f000 f934 	bl	8000a94 <Error_Handler>
  }
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	; 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM2_Init+0x94>)
 800085a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM2_Init+0x94>)
 800086e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM2_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM2_Init+0x94>)
 8000882:	f001 fce9 	bl	8002258 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800088c:	f000 f902 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM2_Init+0x94>)
 800089e:	f001 fea3 	bl	80025e8 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 f8f4 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM2_Init+0x94>)
 80008ba:	f002 f8c9 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f8e6 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000094 	.word	0x20000094

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f002 f930 	bl	8002b70 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f8bd 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000dc 	.word	0x200000dc
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_GPIO_Init+0xd4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_GPIO_Init+0xd4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_GPIO_Init+0xd4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_GPIO_Init+0xd4>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0xd8>)
 80009b6:	f000 fde3 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_GPIO_Init+0xdc>)
 80009d2:	f000 fc41 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80009d6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xd8>)
 80009f0:	f000 fc32 	bl	8001258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020800 	.word	0x40020800

08000a08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b13      	cmp	r3, #19
 8000a16:	d902      	bls.n	8000a1e <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, &rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4918      	ldr	r1, [pc, #96]	; (8000a84 <HAL_UART_RxCpltCallback+0x7c>)
 8000a22:	4819      	ldr	r0, [pc, #100]	; (8000a88 <HAL_UART_RxCpltCallback+0x80>)
 8000a24:	f002 f983 	bl	8002d2e <HAL_UART_Receive_IT>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d124      	bne.n	8000a78 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x10) && (rx_byte !=  0x0D) ) {
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_RxCpltCallback+0x7c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b10      	cmp	r3, #16
 8000a34:	d00f      	beq.n	8000a56 <HAL_UART_RxCpltCallback+0x4e>
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <HAL_UART_RxCpltCallback+0x7c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b0d      	cmp	r3, #13
 8000a3c:	d00b      	beq.n	8000a56 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	b291      	uxth	r1, r2
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a48:	8011      	strh	r1, [r2, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_UART_RxCpltCallback+0x7c>)
 8000a4e:	7819      	ldrb	r1, [r3, #0]
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_RxCpltCallback+0x84>)
 8000a52:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8000a54:	e010      	b.n	8000a78 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any preceeding chars gets ignored
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00c      	beq.n	8000a78 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_UART_RxCpltCallback+0x88>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	b291      	uxth	r1, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_UART_RxCpltCallback+0x78>)
 8000a6e:	8011      	strh	r1, [r2, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_UART_RxCpltCallback+0x84>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	5499      	strb	r1, [r3, r2]
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000120 	.word	0x20000120
 8000a84:	20000122 	.word	0x20000122
 8000a88:	200000dc 	.word	0x200000dc
 8000a8c:	20000124 	.word	0x20000124
 8000a90:	20000138 	.word	0x20000138

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <Error_Handler+0x10>)
 8000a9a:	f003 f9a3 	bl	8003de4 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9e:	b672      	cpsid	i
}
 8000aa0:	bf00      	nop
    __disable_irq();
    while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <Error_Handler+0xe>
 8000aa4:	08004bf4 	.word	0x08004bf4

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 fae2 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b08:	d115      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_Base_MspInit+0x48>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f000 facb 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fae4 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_UART_MspInit+0x94>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d133      	bne.n	8000bce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_UART_MspInit+0x98>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_UART_MspInit+0x9c>)
 8000bba:	f000 fb4d 	bl	8001258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2026      	movs	r0, #38	; 0x26
 8000bc4:	f000 fa7f 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc8:	2026      	movs	r0, #38	; 0x26
 8000bca:	f000 fa98 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f94e 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <TIM2_IRQHandler+0x18>)
 8000c3e:	f001 fbcb 	bl	80023d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_9);
 8000c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <TIM2_IRQHandler+0x1c>)
 8000c48:	f000 fcb3 	bl	80015b2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000094 	.word	0x20000094
 8000c54:	40020000 	.word	0x40020000

08000c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USART2_IRQHandler+0x10>)
 8000c5e:	f002 f897 	bl	8002d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000dc 	.word	0x200000dc

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fcfb 	bl	80006bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
  }
  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f003 f8aa 	bl	8003ed0 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	2000013c 	.word	0x2000013c
 8000db0:	20000290 	.word	0x20000290

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ffd7 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f003 f869 	bl	8003edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fc69 	bl	80006e0 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e1c:	08004c84 	.word	0x08004c84
  ldr r2, =_sbss
 8000e20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e24:	20000290 	.word	0x20000290

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f92b 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe22 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f943 	bl	800111a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	f000 f90b 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000000c 	.word	0x2000000c
 8000ec8:	20000014 	.word	0x20000014
 8000ecc:	20000010 	.word	0x20000010

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000014 	.word	0x20000014
 8000ef4:	20000140 	.word	0x20000140

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000140 	.word	0x20000140

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff29 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff3e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff feda 	bl	8000ef8 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d008      	beq.n	8001164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e052      	b.n	800120a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0216 	bic.w	r2, r2, #22
 8001172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <HAL_DMA_Abort+0x62>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0208 	bic.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b4:	e013      	b.n	80011de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b6:	f7ff fe9f 	bl	8000ef8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d90c      	bls.n	80011de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2220      	movs	r2, #32
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e015      	b.n	800120a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	223f      	movs	r2, #63	; 0x3f
 80011f2:	409a      	lsls	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d004      	beq.n	8001230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e00c      	b.n	800124a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2205      	movs	r2, #5
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e165      	b.n	8001540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8154 	bne.w	800153a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80ae 	beq.w	800153a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a5c      	ldr	r2, [pc, #368]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <HAL_GPIO_Init+0x300>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_Init+0x304>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <HAL_GPIO_Init+0x308>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_GPIO_Init+0x30c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x216>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_GPIO_Init+0x310>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x212>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_GPIO_Init+0x314>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4b      	ldr	r2, [pc, #300]	; (8001570 <HAL_GPIO_Init+0x318>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x20a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4a      	ldr	r2, [pc, #296]	; (8001574 <HAL_GPIO_Init+0x31c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x206>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	; (8001578 <HAL_GPIO_Init+0x320>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x202>
 8001456:	2306      	movs	r3, #6
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145a:	2307      	movs	r3, #7
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	; (800155c <HAL_GPIO_Init+0x304>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_GPIO_Init+0x324>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a31      	ldr	r2, [pc, #196]	; (800157c <HAL_GPIO_Init+0x324>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_GPIO_Init+0x324>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_GPIO_Init+0x324>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_GPIO_Init+0x324>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <HAL_GPIO_Init+0x324>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_GPIO_Init+0x324>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_GPIO_Init+0x324>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae96 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_PWREx_EnableOverDrive+0x90>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <HAL_PWREx_EnableOverDrive+0x90>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <HAL_PWREx_EnableOverDrive+0x90>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_PWREx_EnableOverDrive+0x94>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff fc70 	bl	8000ef8 <HAL_GetTick>
 8001618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800161a:	e009      	b.n	8001630 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800161c:	f7ff fc6c 	bl	8000ef8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800162a:	d901      	bls.n	8001630 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e01f      	b.n	8001670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_PWREx_EnableOverDrive+0x98>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d1ee      	bne.n	800161c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff fc58 	bl	8000ef8 <HAL_GetTick>
 8001648:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800164a:	e009      	b.n	8001660 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800164c:	f7ff fc54 	bl	8000ef8 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800165a:	d901      	bls.n	8001660 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e007      	b.n	8001670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_PWREx_EnableOverDrive+0x98>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800166c:	d1ee      	bne.n	800164c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	420e0040 	.word	0x420e0040
 8001680:	40007000 	.word	0x40007000
 8001684:	420e0044 	.word	0x420e0044

08001688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0cc      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b68      	ldr	r3, [pc, #416]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d90c      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d044      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d119      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d003      	beq.n	8001746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001742:	2b03      	cmp	r3, #3
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e06f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e067      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f023 0203 	bic.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4934      	ldr	r1, [pc, #208]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001778:	f7ff fbbe 	bl	8000ef8 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	e00a      	b.n	8001796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff fbba 	bl	8000ef8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e04f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 020c 	and.w	r2, r3, #12
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1eb      	bne.n	8001780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d20c      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f855 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb1e 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023c00 	.word	0x40023c00
 8001844:	40023800 	.word	0x40023800
 8001848:	08004c28 	.word	0x08004c28
 800184c:	2000000c 	.word	0x2000000c
 8001850:	20000010 	.word	0x20000010

08001854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_RCC_GetHCLKFreq+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2000000c 	.word	0x2000000c

0800186c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001870:	f7ff fff0 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	4903      	ldr	r1, [pc, #12]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	08004c38 	.word	0x08004c38

08001894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001898:	f7ff ffdc 	bl	8001854 <HAL_RCC_GetHCLKFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	0b5b      	lsrs	r3, r3, #13
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	4903      	ldr	r1, [pc, #12]	; (80018b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	08004c38 	.word	0x08004c38

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b0ae      	sub	sp, #184	; 0xb8
 80018c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e2:	4bcb      	ldr	r3, [pc, #812]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	f200 8206 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x440>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	08001cfd 	.word	0x08001cfd
 8001900:	08001cfd 	.word	0x08001cfd
 8001904:	08001cfd 	.word	0x08001cfd
 8001908:	08001935 	.word	0x08001935
 800190c:	08001cfd 	.word	0x08001cfd
 8001910:	08001cfd 	.word	0x08001cfd
 8001914:	08001cfd 	.word	0x08001cfd
 8001918:	0800193d 	.word	0x0800193d
 800191c:	08001cfd 	.word	0x08001cfd
 8001920:	08001cfd 	.word	0x08001cfd
 8001924:	08001cfd 	.word	0x08001cfd
 8001928:	08001b2d 	.word	0x08001b2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4bb9      	ldr	r3, [pc, #740]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x358>)
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001932:	e1e7      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001934:	4bb8      	ldr	r3, [pc, #736]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800193a:	e1e3      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4bb4      	ldr	r3, [pc, #720]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001948:	4bb1      	ldr	r3, [pc, #708]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d071      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4bae      	ldr	r3, [pc, #696]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001960:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001964:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6439      	str	r1, [r7, #64]	; 0x40
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80019ac:	4649      	mov	r1, r9
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4641      	mov	r1, r8
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4641      	mov	r1, r8
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4641      	mov	r1, r8
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	63b9      	str	r1, [r7, #56]	; 0x38
 80019c0:	4649      	mov	r1, r9
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019d4:	4649      	mov	r1, r9
 80019d6:	00cb      	lsls	r3, r1, #3
 80019d8:	4641      	mov	r1, r8
 80019da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019de:	4641      	mov	r1, r8
 80019e0:	00ca      	lsls	r2, r1, #3
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	4622      	mov	r2, r4
 80019ea:	189b      	adds	r3, r3, r2
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
 80019ee:	462b      	mov	r3, r5
 80019f0:	460a      	mov	r2, r1
 80019f2:	eb42 0303 	adc.w	r3, r2, r3
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a04:	4629      	mov	r1, r5
 8001a06:	024b      	lsls	r3, r1, #9
 8001a08:	4621      	mov	r1, r4
 8001a0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0e:	4621      	mov	r1, r4
 8001a10:	024a      	lsls	r2, r1, #9
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a28:	f7fe fc4a 	bl	80002c0 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a36:	e067      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a38:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a52:	2300      	movs	r3, #0
 8001a54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	0159      	lsls	r1, r3, #5
 8001a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6c:	0150      	lsls	r0, r2, #5
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4621      	mov	r1, r4
 8001a74:	1a51      	subs	r1, r2, r1
 8001a76:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	018b      	lsls	r3, r1, #6
 8001a90:	4641      	mov	r1, r8
 8001a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a96:	4641      	mov	r1, r8
 8001a98:	018a      	lsls	r2, r1, #6
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ab2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aba:	4692      	mov	sl, r2
 8001abc:	469b      	mov	fp, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ada:	4629      	mov	r1, r5
 8001adc:	028b      	lsls	r3, r1, #10
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	028a      	lsls	r2, r1, #10
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001af0:	2200      	movs	r2, #0
 8001af2:	673b      	str	r3, [r7, #112]	; 0x70
 8001af4:	677a      	str	r2, [r7, #116]	; 0x74
 8001af6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001afa:	f7fe fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4613      	mov	r3, r2
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b08:	4b41      	ldr	r3, [pc, #260]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b2a:	e0eb      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d06b      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b56:	663b      	str	r3, [r7, #96]	; 0x60
 8001b58:	2300      	movs	r3, #0
 8001b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b60:	4622      	mov	r2, r4
 8001b62:	462b      	mov	r3, r5
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	0159      	lsls	r1, r3, #5
 8001b6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b72:	0150      	lsls	r0, r2, #5
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4621      	mov	r1, r4
 8001b7a:	1a51      	subs	r1, r2, r1
 8001b7c:	61b9      	str	r1, [r7, #24]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	eb63 0301 	sbc.w	r3, r3, r1
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b92:	4659      	mov	r1, fp
 8001b94:	018b      	lsls	r3, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9c:	4651      	mov	r1, sl
 8001b9e:	018a      	lsls	r2, r1, #6
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba6:	4659      	mov	r1, fp
 8001ba8:	eb63 0901 	sbc.w	r9, r3, r1
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc0:	4690      	mov	r8, r2
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	4623      	mov	r3, r4
 8001bc6:	eb18 0303 	adds.w	r3, r8, r3
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	462b      	mov	r3, r5
 8001bce:	eb49 0303 	adc.w	r3, r9, r3
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001be0:	4629      	mov	r1, r5
 8001be2:	024b      	lsls	r3, r1, #9
 8001be4:	4621      	mov	r1, r4
 8001be6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bea:	4621      	mov	r1, r4
 8001bec:	024a      	lsls	r2, r1, #9
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bfa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c00:	f7fe fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c0e:	e065      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x420>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	2200      	movs	r2, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	4611      	mov	r1, r2
 8001c28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001c2e:	2300      	movs	r3, #0
 8001c30:	657b      	str	r3, [r7, #84]	; 0x54
 8001c32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c36:	4642      	mov	r2, r8
 8001c38:	464b      	mov	r3, r9
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	0159      	lsls	r1, r3, #5
 8001c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c48:	0150      	lsls	r0, r2, #5
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4641      	mov	r1, r8
 8001c50:	1a51      	subs	r1, r2, r1
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	4649      	mov	r1, r9
 8001c56:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c68:	4659      	mov	r1, fp
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	4651      	mov	r1, sl
 8001c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c72:	4651      	mov	r1, sl
 8001c74:	018a      	lsls	r2, r1, #6
 8001c76:	4651      	mov	r1, sl
 8001c78:	1a54      	subs	r4, r2, r1
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	eb63 0501 	sbc.w	r5, r3, r1
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	00eb      	lsls	r3, r5, #3
 8001c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8e:	00e2      	lsls	r2, r4, #3
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	4643      	mov	r3, r8
 8001c96:	18e3      	adds	r3, r4, r3
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cae:	4629      	mov	r1, r5
 8001cb0:	028b      	lsls	r3, r1, #10
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb8:	4621      	mov	r1, r4
 8001cba:	028a      	lsls	r2, r1, #10
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cc8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cce:	f7fe faf7 	bl	80002c0 <__aeabi_uldivmod>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0f1b      	lsrs	r3, r3, #28
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cfa:	e003      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	37b8      	adds	r7, #184	; 0xb8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	00f42400 	.word	0x00f42400

08001d1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e28d      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8083 	beq.w	8001e42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d3c:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d019      	beq.n	8001d7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d48:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d54:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d60:	d00c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d112      	bne.n	8001d94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6e:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_RCC_OscConfig+0x124>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d157      	bne.n	8001e40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e25a      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x90>
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7b      	ldr	r2, [pc, #492]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xcc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xb4>
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xcc>
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6b      	ldr	r2, [pc, #428]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff f882 	bl	8000ef8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f87e 	bl	8000ef8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e21f      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xdc>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f86e 	bl	8000ef8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff f86a 	bl	8000ef8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e20b      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x104>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06f      	beq.n	8001f2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e4e:	4b50      	ldr	r3, [pc, #320]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d017      	beq.n	8001e8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e5a:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x186>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1d3      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4937      	ldr	r1, [pc, #220]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x278>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f817 	bl	8000ef8 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff f813 	bl	8000ef8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1b4      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4925      	ldr	r1, [pc, #148]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_OscConfig+0x278>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fff6 	bl	8000ef8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f10:	f7fe fff2 	bl	8000ef8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e193      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d036      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d016      	beq.n	8001f70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7fe ffd6 	bl	8000ef8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f50:	f7fe ffd2 	bl	8000ef8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e173      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_RCC_OscConfig+0x274>)
 8001f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x234>
 8001f6e:	e01b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_OscConfig+0x27c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7fe ffbf 	bl	8000ef8 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	e00e      	b.n	8001f9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7fe ffbb 	bl	8000ef8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d907      	bls.n	8001f9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e15c      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42470000 	.word	0x42470000
 8001f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	4b8a      	ldr	r3, [pc, #552]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ea      	bne.n	8001f7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8097 	beq.w	80020e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a7e      	ldr	r2, [pc, #504]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x4b0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b76      	ldr	r3, [pc, #472]	; (80021cc <HAL_RCC_OscConfig+0x4b0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x4b0>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ff7b 	bl	8000ef8 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7fe ff77 	bl	8000ef8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e118      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_RCC_OscConfig+0x4b0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x31e>
 800202c:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
 8002038:	e01c      	b.n	8002074 <HAL_RCC_OscConfig+0x358>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x340>
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	4a60      	ldr	r2, [pc, #384]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	6713      	str	r3, [r2, #112]	; 0x70
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0x358>
 800205c:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a59      	ldr	r2, [pc, #356]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a56      	ldr	r2, [pc, #344]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800206e:	f023 0304 	bic.w	r3, r3, #4
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7fe ff3c 	bl	8000ef8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe ff38 	bl	8000ef8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0d7      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0ee      	beq.n	8002084 <HAL_RCC_OscConfig+0x368>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7fe ff26 	bl	8000ef8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff22 	bl	8000ef8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0c1      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ee      	bne.n	80020b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	4a3a      	ldr	r2, [pc, #232]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80ad 	beq.w	8002248 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d060      	beq.n	80021bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d145      	bne.n	800218e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x4b4>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fef6 	bl	8000ef8 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002110:	f7fe fef2 	bl	8000ef8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e093      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	3b01      	subs	r3, #1
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	061b      	lsls	r3, r3, #24
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x4b4>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fec7 	bl	8000ef8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7fe fec3 	bl	8000ef8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e064      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x452>
 800218c:	e05c      	b.n	8002248 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x4b4>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe feb0 	bl	8000ef8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe feac 	bl	8000ef8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e04d      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x480>
 80021ba:	e045      	b.n	8002248 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e040      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_RCC_OscConfig+0x538>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d030      	beq.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d129      	bne.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d122      	bne.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d119      	bne.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d10f      	bne.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e041      	b.n	80022ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fc3a 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 faa0 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d001      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e04e      	b.n	80023ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a23      	ldr	r2, [pc, #140]	; (80023bc <HAL_TIM_Base_Start_IT+0xc4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233a:	d01d      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_TIM_Base_Start_IT+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x80>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d010      	beq.n	80023ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	e007      	b.n	80023ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40000c00 	.word	0x40000c00
 80023cc:	40010400 	.word	0x40010400
 80023d0:	40014000 	.word	0x40014000
 80023d4:	40001800 	.word	0x40001800

080023d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0202 	mvn.w	r2, #2
 8002404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f9bf 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f9b1 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9c2 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0204 	mvn.w	r2, #4
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f995 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f987 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f998 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b08      	cmp	r3, #8
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0208 	mvn.w	r2, #8
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f96b 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f95d 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f96e 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0210 	mvn.w	r2, #16
 8002500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2208      	movs	r2, #8
 8002506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f941 	bl	800279e <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f933 	bl	800278a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f944 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10e      	bne.n	800255c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0201 	mvn.w	r2, #1
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f90d 	bl	8002776 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b80      	cmp	r3, #128	; 0x80
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d107      	bne.n	8002588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 faea 	bl	8002b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d10e      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d107      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f909 	bl	80027c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0320 	and.w	r3, r3, #32
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d107      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0220 	mvn.w	r2, #32
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fab4 	bl	8002b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIM_ConfigClockSource+0x1c>
 8002600:	2302      	movs	r3, #2
 8002602:	e0b4      	b.n	800276e <HAL_TIM_ConfigClockSource+0x186>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263c:	d03e      	beq.n	80026bc <HAL_TIM_ConfigClockSource+0xd4>
 800263e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002642:	f200 8087 	bhi.w	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264a:	f000 8086 	beq.w	800275a <HAL_TIM_ConfigClockSource+0x172>
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d87f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 8002654:	2b70      	cmp	r3, #112	; 0x70
 8002656:	d01a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0xa6>
 8002658:	2b70      	cmp	r3, #112	; 0x70
 800265a:	d87b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 800265c:	2b60      	cmp	r3, #96	; 0x60
 800265e:	d050      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x11a>
 8002660:	2b60      	cmp	r3, #96	; 0x60
 8002662:	d877      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 8002664:	2b50      	cmp	r3, #80	; 0x50
 8002666:	d03c      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002668:	2b50      	cmp	r3, #80	; 0x50
 800266a:	d873      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d058      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x13a>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d86f      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 8002674:	2b30      	cmp	r3, #48	; 0x30
 8002676:	d064      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15a>
 8002678:	2b30      	cmp	r3, #48	; 0x30
 800267a:	d86b      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 800267c:	2b20      	cmp	r3, #32
 800267e:	d060      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15a>
 8002680:	2b20      	cmp	r3, #32
 8002682:	d867      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15a>
 8002688:	2b10      	cmp	r3, #16
 800268a:	d05a      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x15a>
 800268c:	e062      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f000 f9b7 	bl	8002a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	609a      	str	r2, [r3, #8]
      break;
 80026ba:	e04f      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f000 f9a0 	bl	8002a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026de:	609a      	str	r2, [r3, #8]
      break;
 80026e0:	e03c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f914 	bl	800291c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2150      	movs	r1, #80	; 0x50
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f96d 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002700:	e02c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	461a      	mov	r2, r3
 8002710:	f000 f933 	bl	800297a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2160      	movs	r1, #96	; 0x60
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f95d 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002720:	e01c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	461a      	mov	r2, r3
 8002730:	f000 f8f4 	bl	800291c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f94d 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002740:	e00c      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	4610      	mov	r0, r2
 800274e:	f000 f944 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002752:	e003      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e000      	b.n	800275c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800275a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <TIM_Base_SetConfig+0x114>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <TIM_Base_SetConfig+0x40>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fa:	d00f      	beq.n	800281c <TIM_Base_SetConfig+0x40>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <TIM_Base_SetConfig+0x118>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00b      	beq.n	800281c <TIM_Base_SetConfig+0x40>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <TIM_Base_SetConfig+0x11c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <TIM_Base_SetConfig+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <TIM_Base_SetConfig+0x120>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d003      	beq.n	800281c <TIM_Base_SetConfig+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <TIM_Base_SetConfig+0x124>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a2f      	ldr	r2, [pc, #188]	; (80028f0 <TIM_Base_SetConfig+0x114>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02b      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d027      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <TIM_Base_SetConfig+0x118>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d023      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2b      	ldr	r2, [pc, #172]	; (80028f8 <TIM_Base_SetConfig+0x11c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <TIM_Base_SetConfig+0x120>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01b      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a29      	ldr	r2, [pc, #164]	; (8002900 <TIM_Base_SetConfig+0x124>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d017      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a28      	ldr	r2, [pc, #160]	; (8002904 <TIM_Base_SetConfig+0x128>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <TIM_Base_SetConfig+0x12c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00f      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a26      	ldr	r2, [pc, #152]	; (800290c <TIM_Base_SetConfig+0x130>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a25      	ldr	r2, [pc, #148]	; (8002910 <TIM_Base_SetConfig+0x134>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a24      	ldr	r2, [pc, #144]	; (8002914 <TIM_Base_SetConfig+0x138>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a23      	ldr	r2, [pc, #140]	; (8002918 <TIM_Base_SetConfig+0x13c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <TIM_Base_SetConfig+0x114>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0xf8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <TIM_Base_SetConfig+0x124>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d103      	bne.n	80028dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	615a      	str	r2, [r3, #20]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800
 8002910:	40001800 	.word	0x40001800
 8002914:	40001c00 	.word	0x40001c00
 8002918:	40002000 	.word	0x40002000

0800291c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 030a 	bic.w	r3, r3, #10
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f023 0210 	bic.w	r2, r3, #16
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e05a      	b.n	8002b1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d01d      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d018      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10c      	bne.n	8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40010400 	.word	0x40010400
 8002b40:	40014000 	.word	0x40014000
 8002b44:	40001800 	.word	0x40001800

08002b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e03f      	b.n	8002c02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd ffd4 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fddf 	bl	8003778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b08a      	sub	sp, #40	; 0x28
 8002c0e:	af02      	add	r7, sp, #8
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d17c      	bne.n	8002d24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_UART_Transmit+0x2c>
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e075      	b.n	8002d26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Transmit+0x3e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e06e      	b.n	8002d26 <HAL_UART_Transmit+0x11c>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2221      	movs	r2, #33	; 0x21
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c5e:	f7fe f94b 	bl	8000ef8 <HAL_GetTick>
 8002c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c78:	d108      	bne.n	8002c8c <HAL_UART_Transmit+0x82>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e003      	b.n	8002c94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c9c:	e02a      	b.n	8002cf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fb1f 	bl	80032ec <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e036      	b.n	8002d26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e007      	b.n	8002ce6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1cf      	bne.n	8002c9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2140      	movs	r1, #64	; 0x40
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 faef 	bl	80032ec <UART_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e006      	b.n	8002d26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d11d      	bne.n	8002d84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Receive_IT+0x26>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e016      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Receive_IT+0x38>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00f      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fb24 	bl	80033c8 <UART_Start_Receive_IT>
 8002d80:	4603      	mov	r3, r0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ba      	sub	sp, #232	; 0xe8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_UART_IRQHandler+0x66>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fc07 	bl	8003602 <UART_Receive_IT>
      return;
 8002df4:	e256      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80de 	beq.w	8002fbc <HAL_UART_IRQHandler+0x22c>
 8002e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80d1 	beq.w	8002fbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_UART_IRQHandler+0xae>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_UART_IRQHandler+0xd2>
 8002e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_UART_IRQHandler+0xf6>
 8002e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d011      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x126>
 8002e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0208 	orr.w	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 81ed 	beq.w	800329a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_UART_IRQHandler+0x14e>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fb92 	bl	8003602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_IRQHandler+0x17a>
 8002f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04f      	beq.n	8002faa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa9a 	bl	8003444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d141      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3314      	adds	r3, #20
 8002f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1d9      	bne.n	8002f1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d013      	beq.n	8002f9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_UART_IRQHandler+0x3dc>)
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe f947 	bl	8001212 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	e00e      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f990 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e00a      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f98c 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	e006      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f988 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fb6:	e170      	b.n	800329a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	bf00      	nop
    return;
 8002fba:	e16e      	b.n	800329a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 814a 	bne.w	800325a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8143 	beq.w	800325a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 813c 	beq.w	800325a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	f040 80b4 	bne.w	8003170 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003014:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8140 	beq.w	800329e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003026:	429a      	cmp	r2, r3
 8003028:	f080 8139 	bcs.w	800329e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003032:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	f000 8088 	beq.w	8003152 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800305c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800306e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800307a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1d9      	bne.n	8003042 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800309e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e1      	bne.n	800308e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3314      	adds	r3, #20
 80030ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e3      	bne.n	80030ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003122:	f023 0310 	bic.w	r3, r3, #16
 8003126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003134:	65ba      	str	r2, [r7, #88]	; 0x58
 8003136:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800313a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e3      	bne.n	8003110 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd fff0 	bl	8001132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8b6 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003168:	e099      	b.n	800329e <HAL_UART_IRQHandler+0x50e>
 800316a:	bf00      	nop
 800316c:	0800350b 	.word	0x0800350b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808b 	beq.w	80032a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800318c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8086 	beq.w	80032a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031ba:	647a      	str	r2, [r7, #68]	; 0x44
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	623b      	str	r3, [r7, #32]
   return(result);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031f2:	633a      	str	r2, [r7, #48]	; 0x30
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e3      	bne.n	80031ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60fb      	str	r3, [r7, #12]
   return(result);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e3      	bne.n	8003214 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800324c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f83e 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003258:	e023      	b.n	80032a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x4ea>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f95d 	bl	8003532 <UART_Transmit_IT>
    return;
 8003278:	e014      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x514>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f99d 	bl	80035d2 <UART_EndTransmit_IT>
    return;
 8003298:	e004      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
    return;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
      return;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
      return;
 80032a2:	bf00      	nop
  }
}
 80032a4:	37e8      	adds	r7, #232	; 0xe8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b090      	sub	sp, #64	; 0x40
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fc:	e050      	b.n	80033a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003304:	d04c      	beq.n	80033a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <UART_WaitOnFlagUntilTimeout+0x30>
 800330c:	f7fd fdf4 	bl	8000ef8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003318:	429a      	cmp	r2, r3
 800331a:	d241      	bcs.n	80033a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333c:	637a      	str	r2, [r7, #52]	; 0x34
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	613b      	str	r3, [r7, #16]
   return(result);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003370:	623a      	str	r2, [r7, #32]
 8003372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	69f9      	ldr	r1, [r7, #28]
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	61bb      	str	r3, [r7, #24]
   return(result);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e00f      	b.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4013      	ands	r3, r2
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d09f      	beq.n	80032fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3740      	adds	r7, #64	; 0x40
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	88fa      	ldrh	r2, [r7, #6]
 80033e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2222      	movs	r2, #34	; 0x22
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003414:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0220 	orr.w	r2, r2, #32
 8003434:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b095      	sub	sp, #84	; 0x54
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800346c:	643a      	str	r2, [r7, #64]	; 0x40
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e5      	bne.n	800344c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3314      	adds	r3, #20
 8003486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	64bb      	str	r3, [r7, #72]	; 0x48
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3314      	adds	r3, #20
 800349e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d119      	bne.n	80034f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	330c      	adds	r3, #12
 80034c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 0310 	bic.w	r3, r3, #16
 80034d2:	647b      	str	r3, [r7, #68]	; 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034dc:	61ba      	str	r2, [r7, #24]
 80034de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6979      	ldr	r1, [r7, #20]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	613b      	str	r3, [r7, #16]
   return(result);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e5      	bne.n	80034bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034fe:	bf00      	nop
 8003500:	3754      	adds	r7, #84	; 0x54
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fecb 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b21      	cmp	r3, #33	; 0x21
 8003544:	d13e      	bne.n	80035c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d114      	bne.n	800357a <UART_Transmit_IT+0x48>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d110      	bne.n	800357a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]
 8003578:	e008      	b.n	800358c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	1c59      	adds	r1, r3, #1
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6211      	str	r1, [r2, #32]
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4619      	mov	r1, r3
 800359a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe5a 	bl	80032ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08c      	sub	sp, #48	; 0x30
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b22      	cmp	r3, #34	; 0x22
 8003614:	f040 80ab 	bne.w	800376e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	d117      	bne.n	8003652 <UART_Receive_IT+0x50>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003640:	b29a      	uxth	r2, r3
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	e026      	b.n	80036a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d007      	beq.n	8003676 <UART_Receive_IT+0x74>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <UART_Receive_IT+0x82>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e008      	b.n	8003696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003690:	b2da      	uxtb	r2, r3
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4619      	mov	r1, r3
 80036ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d15a      	bne.n	800376a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0220 	bic.w	r2, r2, #32
 80036c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d135      	bne.n	8003760 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	e853 3f00 	ldrex	r3, [r3]
 8003708:	613b      	str	r3, [r7, #16]
   return(result);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f023 0310 	bic.w	r3, r3, #16
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	330c      	adds	r3, #12
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	623a      	str	r2, [r7, #32]
 800371c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	69f9      	ldr	r1, [r7, #28]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	61bb      	str	r3, [r7, #24]
   return(result);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e5      	bne.n	80036fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d10a      	bne.n	8003752 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fdbb 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
 800375e:	e002      	b.n	8003766 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd f951 	bl	8000a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e002      	b.n	8003770 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3730      	adds	r7, #48	; 0x30
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b0c0      	sub	sp, #256	; 0x100
 800377e:	af00      	add	r7, sp, #0
 8003780:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	68d9      	ldr	r1, [r3, #12]
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	ea40 0301 	orr.w	r3, r0, r1
 80037a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037d0:	f021 010c 	bic.w	r1, r1, #12
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037de:	430b      	orrs	r3, r1
 80037e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	6999      	ldr	r1, [r3, #24]
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	ea40 0301 	orr.w	r3, r0, r1
 80037fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b8f      	ldr	r3, [pc, #572]	; (8003a44 <UART_SetConfig+0x2cc>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d005      	beq.n	8003818 <UART_SetConfig+0xa0>
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <UART_SetConfig+0x2d0>)
 8003814:	429a      	cmp	r2, r3
 8003816:	d104      	bne.n	8003822 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7fe f83c 	bl	8001894 <HAL_RCC_GetPCLK2Freq>
 800381c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003820:	e003      	b.n	800382a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003822:	f7fe f823 	bl	800186c <HAL_RCC_GetPCLK1Freq>
 8003826:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003834:	f040 810c 	bne.w	8003a50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003842:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003846:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800384a:	4622      	mov	r2, r4
 800384c:	462b      	mov	r3, r5
 800384e:	1891      	adds	r1, r2, r2
 8003850:	65b9      	str	r1, [r7, #88]	; 0x58
 8003852:	415b      	adcs	r3, r3
 8003854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003856:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800385a:	4621      	mov	r1, r4
 800385c:	eb12 0801 	adds.w	r8, r2, r1
 8003860:	4629      	mov	r1, r5
 8003862:	eb43 0901 	adc.w	r9, r3, r1
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387a:	4690      	mov	r8, r2
 800387c:	4699      	mov	r9, r3
 800387e:	4623      	mov	r3, r4
 8003880:	eb18 0303 	adds.w	r3, r8, r3
 8003884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003888:	462b      	mov	r3, r5
 800388a:	eb49 0303 	adc.w	r3, r9, r3
 800388e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800389e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038a6:	460b      	mov	r3, r1
 80038a8:	18db      	adds	r3, r3, r3
 80038aa:	653b      	str	r3, [r7, #80]	; 0x50
 80038ac:	4613      	mov	r3, r2
 80038ae:	eb42 0303 	adc.w	r3, r2, r3
 80038b2:	657b      	str	r3, [r7, #84]	; 0x54
 80038b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038bc:	f7fc fd00 	bl	80002c0 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <UART_SetConfig+0x2d4>)
 80038c6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	011c      	lsls	r4, r3, #4
 80038ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038e0:	4642      	mov	r2, r8
 80038e2:	464b      	mov	r3, r9
 80038e4:	1891      	adds	r1, r2, r2
 80038e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038e8:	415b      	adcs	r3, r3
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038f0:	4641      	mov	r1, r8
 80038f2:	eb12 0a01 	adds.w	sl, r2, r1
 80038f6:	4649      	mov	r1, r9
 80038f8:	eb43 0b01 	adc.w	fp, r3, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003908:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800390c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003910:	4692      	mov	sl, r2
 8003912:	469b      	mov	fp, r3
 8003914:	4643      	mov	r3, r8
 8003916:	eb1a 0303 	adds.w	r3, sl, r3
 800391a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800391e:	464b      	mov	r3, r9
 8003920:	eb4b 0303 	adc.w	r3, fp, r3
 8003924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003934:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003938:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800393c:	460b      	mov	r3, r1
 800393e:	18db      	adds	r3, r3, r3
 8003940:	643b      	str	r3, [r7, #64]	; 0x40
 8003942:	4613      	mov	r3, r2
 8003944:	eb42 0303 	adc.w	r3, r2, r3
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
 800394a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800394e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003952:	f7fc fcb5 	bl	80002c0 <__aeabi_uldivmod>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4611      	mov	r1, r2
 800395c:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <UART_SetConfig+0x2d4>)
 800395e:	fba3 2301 	umull	r2, r3, r3, r1
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2264      	movs	r2, #100	; 0x64
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	1acb      	subs	r3, r1, r3
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <UART_SetConfig+0x2d4>)
 8003974:	fba3 2302 	umull	r2, r3, r3, r2
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003980:	441c      	add	r4, r3
 8003982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800398c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003990:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003994:	4642      	mov	r2, r8
 8003996:	464b      	mov	r3, r9
 8003998:	1891      	adds	r1, r2, r2
 800399a:	63b9      	str	r1, [r7, #56]	; 0x38
 800399c:	415b      	adcs	r3, r3
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039a4:	4641      	mov	r1, r8
 80039a6:	1851      	adds	r1, r2, r1
 80039a8:	6339      	str	r1, [r7, #48]	; 0x30
 80039aa:	4649      	mov	r1, r9
 80039ac:	414b      	adcs	r3, r1
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039bc:	4659      	mov	r1, fp
 80039be:	00cb      	lsls	r3, r1, #3
 80039c0:	4651      	mov	r1, sl
 80039c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039c6:	4651      	mov	r1, sl
 80039c8:	00ca      	lsls	r2, r1, #3
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	4642      	mov	r2, r8
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d8:	464b      	mov	r3, r9
 80039da:	460a      	mov	r2, r1
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039f8:	460b      	mov	r3, r1
 80039fa:	18db      	adds	r3, r3, r3
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fe:	4613      	mov	r3, r2
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a0e:	f7fc fc57 	bl	80002c0 <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <UART_SetConfig+0x2d4>)
 8003a18:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <UART_SetConfig+0x2d4>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 0207 	and.w	r2, r3, #7
 8003a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4422      	add	r2, r4
 8003a3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a40:	e106      	b.n	8003c50 <UART_SetConfig+0x4d8>
 8003a42:	bf00      	nop
 8003a44:	40011000 	.word	0x40011000
 8003a48:	40011400 	.word	0x40011400
 8003a4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a62:	4642      	mov	r2, r8
 8003a64:	464b      	mov	r3, r9
 8003a66:	1891      	adds	r1, r2, r2
 8003a68:	6239      	str	r1, [r7, #32]
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a72:	4641      	mov	r1, r8
 8003a74:	1854      	adds	r4, r2, r1
 8003a76:	4649      	mov	r1, r9
 8003a78:	eb43 0501 	adc.w	r5, r3, r1
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	00eb      	lsls	r3, r5, #3
 8003a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8a:	00e2      	lsls	r2, r4, #3
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	461d      	mov	r5, r3
 8003a90:	4643      	mov	r3, r8
 8003a92:	18e3      	adds	r3, r4, r3
 8003a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a98:	464b      	mov	r3, r9
 8003a9a:	eb45 0303 	adc.w	r3, r5, r3
 8003a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003abe:	4629      	mov	r1, r5
 8003ac0:	008b      	lsls	r3, r1, #2
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac8:	4621      	mov	r1, r4
 8003aca:	008a      	lsls	r2, r1, #2
 8003acc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ad0:	f7fc fbf6 	bl	80002c0 <__aeabi_uldivmod>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4b60      	ldr	r3, [pc, #384]	; (8003c5c <UART_SetConfig+0x4e4>)
 8003ada:	fba3 2302 	umull	r2, r3, r3, r2
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	011c      	lsls	r4, r3, #4
 8003ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003af0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003af4:	4642      	mov	r2, r8
 8003af6:	464b      	mov	r3, r9
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	61b9      	str	r1, [r7, #24]
 8003afc:	415b      	adcs	r3, r3
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b04:	4641      	mov	r1, r8
 8003b06:	1851      	adds	r1, r2, r1
 8003b08:	6139      	str	r1, [r7, #16]
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	414b      	adcs	r3, r1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b1c:	4659      	mov	r1, fp
 8003b1e:	00cb      	lsls	r3, r1, #3
 8003b20:	4651      	mov	r1, sl
 8003b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b26:	4651      	mov	r1, sl
 8003b28:	00ca      	lsls	r2, r1, #3
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4642      	mov	r2, r8
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b38:	464b      	mov	r3, r9
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	008b      	lsls	r3, r1, #2
 8003b60:	4641      	mov	r1, r8
 8003b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b66:	4641      	mov	r1, r8
 8003b68:	008a      	lsls	r2, r1, #2
 8003b6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b6e:	f7fc fba7 	bl	80002c0 <__aeabi_uldivmod>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <UART_SetConfig+0x4e4>)
 8003b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2264      	movs	r2, #100	; 0x64
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	1acb      	subs	r3, r1, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a33      	ldr	r2, [pc, #204]	; (8003c5c <UART_SetConfig+0x4e4>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b98:	441c      	add	r4, r3
 8003b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba2:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb8:	4641      	mov	r1, r8
 8003bba:	1851      	adds	r1, r2, r1
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	414b      	adcs	r3, r1
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	00cb      	lsls	r3, r1, #3
 8003bd4:	4651      	mov	r1, sl
 8003bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bda:	4651      	mov	r1, sl
 8003bdc:	00ca      	lsls	r2, r1, #3
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	4642      	mov	r2, r8
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bea:	464b      	mov	r3, r9
 8003bec:	460a      	mov	r2, r1
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bfe:	667a      	str	r2, [r7, #100]	; 0x64
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	4641      	mov	r1, r8
 8003c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c16:	4641      	mov	r1, r8
 8003c18:	008a      	lsls	r2, r1, #2
 8003c1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c1e:	f7fc fb4f 	bl	80002c0 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <UART_SetConfig+0x4e4>)
 8003c28:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	2164      	movs	r1, #100	; 0x64
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	3332      	adds	r3, #50	; 0x32
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <UART_SetConfig+0x4e4>)
 8003c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 020f 	and.w	r2, r3, #15
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4422      	add	r2, r4
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	bf00      	nop
 8003c52:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c56:	46bd      	mov	sp, r7
 8003c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5c:	51eb851f 	.word	0x51eb851f

08003c60 <std>:
 8003c60:	2300      	movs	r3, #0
 8003c62:	b510      	push	{r4, lr}
 8003c64:	4604      	mov	r4, r0
 8003c66:	e9c0 3300 	strd	r3, r3, [r0]
 8003c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c6e:	6083      	str	r3, [r0, #8]
 8003c70:	8181      	strh	r1, [r0, #12]
 8003c72:	6643      	str	r3, [r0, #100]	; 0x64
 8003c74:	81c2      	strh	r2, [r0, #14]
 8003c76:	6183      	str	r3, [r0, #24]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	305c      	adds	r0, #92	; 0x5c
 8003c7e:	f000 f91f 	bl	8003ec0 <memset>
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <std+0x58>)
 8003c84:	6263      	str	r3, [r4, #36]	; 0x24
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <std+0x5c>)
 8003c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <std+0x60>)
 8003c8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <std+0x64>)
 8003c90:	6323      	str	r3, [r4, #48]	; 0x30
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <std+0x68>)
 8003c94:	6224      	str	r4, [r4, #32]
 8003c96:	429c      	cmp	r4, r3
 8003c98:	d006      	beq.n	8003ca8 <std+0x48>
 8003c9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c9e:	4294      	cmp	r4, r2
 8003ca0:	d002      	beq.n	8003ca8 <std+0x48>
 8003ca2:	33d0      	adds	r3, #208	; 0xd0
 8003ca4:	429c      	cmp	r4, r3
 8003ca6:	d105      	bne.n	8003cb4 <std+0x54>
 8003ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb0:	f000 b938 	b.w	8003f24 <__retarget_lock_init_recursive>
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08004785 	.word	0x08004785
 8003cbc:	080047a7 	.word	0x080047a7
 8003cc0:	080047df 	.word	0x080047df
 8003cc4:	08004803 	.word	0x08004803
 8003cc8:	20000144 	.word	0x20000144

08003ccc <stdio_exit_handler>:
 8003ccc:	4a02      	ldr	r2, [pc, #8]	; (8003cd8 <stdio_exit_handler+0xc>)
 8003cce:	4903      	ldr	r1, [pc, #12]	; (8003cdc <stdio_exit_handler+0x10>)
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <stdio_exit_handler+0x14>)
 8003cd2:	f000 b869 	b.w	8003da8 <_fwalk_sglue>
 8003cd6:	bf00      	nop
 8003cd8:	20000018 	.word	0x20000018
 8003cdc:	0800471d 	.word	0x0800471d
 8003ce0:	20000024 	.word	0x20000024

08003ce4 <cleanup_stdio>:
 8003ce4:	6841      	ldr	r1, [r0, #4]
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <cleanup_stdio+0x34>)
 8003ce8:	4299      	cmp	r1, r3
 8003cea:	b510      	push	{r4, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	d001      	beq.n	8003cf4 <cleanup_stdio+0x10>
 8003cf0:	f000 fd14 	bl	800471c <_fflush_r>
 8003cf4:	68a1      	ldr	r1, [r4, #8]
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <cleanup_stdio+0x38>)
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d002      	beq.n	8003d02 <cleanup_stdio+0x1e>
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 fd0d 	bl	800471c <_fflush_r>
 8003d02:	68e1      	ldr	r1, [r4, #12]
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <cleanup_stdio+0x3c>)
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d004      	beq.n	8003d14 <cleanup_stdio+0x30>
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d10:	f000 bd04 	b.w	800471c <_fflush_r>
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	bf00      	nop
 8003d18:	20000144 	.word	0x20000144
 8003d1c:	200001ac 	.word	0x200001ac
 8003d20:	20000214 	.word	0x20000214

08003d24 <global_stdio_init.part.0>:
 8003d24:	b510      	push	{r4, lr}
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <global_stdio_init.part.0+0x30>)
 8003d28:	4c0b      	ldr	r4, [pc, #44]	; (8003d58 <global_stdio_init.part.0+0x34>)
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <global_stdio_init.part.0+0x38>)
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4620      	mov	r0, r4
 8003d30:	2200      	movs	r2, #0
 8003d32:	2104      	movs	r1, #4
 8003d34:	f7ff ff94 	bl	8003c60 <std>
 8003d38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2109      	movs	r1, #9
 8003d40:	f7ff ff8e 	bl	8003c60 <std>
 8003d44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d48:	2202      	movs	r2, #2
 8003d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4e:	2112      	movs	r1, #18
 8003d50:	f7ff bf86 	b.w	8003c60 <std>
 8003d54:	2000027c 	.word	0x2000027c
 8003d58:	20000144 	.word	0x20000144
 8003d5c:	08003ccd 	.word	0x08003ccd

08003d60 <__sfp_lock_acquire>:
 8003d60:	4801      	ldr	r0, [pc, #4]	; (8003d68 <__sfp_lock_acquire+0x8>)
 8003d62:	f000 b8e0 	b.w	8003f26 <__retarget_lock_acquire_recursive>
 8003d66:	bf00      	nop
 8003d68:	20000281 	.word	0x20000281

08003d6c <__sfp_lock_release>:
 8003d6c:	4801      	ldr	r0, [pc, #4]	; (8003d74 <__sfp_lock_release+0x8>)
 8003d6e:	f000 b8db 	b.w	8003f28 <__retarget_lock_release_recursive>
 8003d72:	bf00      	nop
 8003d74:	20000281 	.word	0x20000281

08003d78 <__sinit>:
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	f7ff fff0 	bl	8003d60 <__sfp_lock_acquire>
 8003d80:	6a23      	ldr	r3, [r4, #32]
 8003d82:	b11b      	cbz	r3, 8003d8c <__sinit+0x14>
 8003d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d88:	f7ff bff0 	b.w	8003d6c <__sfp_lock_release>
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <__sinit+0x28>)
 8003d8e:	6223      	str	r3, [r4, #32]
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <__sinit+0x2c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f5      	bne.n	8003d84 <__sinit+0xc>
 8003d98:	f7ff ffc4 	bl	8003d24 <global_stdio_init.part.0>
 8003d9c:	e7f2      	b.n	8003d84 <__sinit+0xc>
 8003d9e:	bf00      	nop
 8003da0:	08003ce5 	.word	0x08003ce5
 8003da4:	2000027c 	.word	0x2000027c

08003da8 <_fwalk_sglue>:
 8003da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dac:	4607      	mov	r7, r0
 8003dae:	4688      	mov	r8, r1
 8003db0:	4614      	mov	r4, r2
 8003db2:	2600      	movs	r6, #0
 8003db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003db8:	f1b9 0901 	subs.w	r9, r9, #1
 8003dbc:	d505      	bpl.n	8003dca <_fwalk_sglue+0x22>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d1f7      	bne.n	8003db4 <_fwalk_sglue+0xc>
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d907      	bls.n	8003de0 <_fwalk_sglue+0x38>
 8003dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d003      	beq.n	8003de0 <_fwalk_sglue+0x38>
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4638      	mov	r0, r7
 8003ddc:	47c0      	blx	r8
 8003dde:	4306      	orrs	r6, r0
 8003de0:	3568      	adds	r5, #104	; 0x68
 8003de2:	e7e9      	b.n	8003db8 <_fwalk_sglue+0x10>

08003de4 <iprintf>:
 8003de4:	b40f      	push	{r0, r1, r2, r3}
 8003de6:	b507      	push	{r0, r1, r2, lr}
 8003de8:	4906      	ldr	r1, [pc, #24]	; (8003e04 <iprintf+0x20>)
 8003dea:	ab04      	add	r3, sp, #16
 8003dec:	6808      	ldr	r0, [r1, #0]
 8003dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df2:	6881      	ldr	r1, [r0, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	f000 f8c1 	bl	8003f7c <_vfiprintf_r>
 8003dfa:	b003      	add	sp, #12
 8003dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e00:	b004      	add	sp, #16
 8003e02:	4770      	bx	lr
 8003e04:	20000070 	.word	0x20000070

08003e08 <_puts_r>:
 8003e08:	6a03      	ldr	r3, [r0, #32]
 8003e0a:	b570      	push	{r4, r5, r6, lr}
 8003e0c:	6884      	ldr	r4, [r0, #8]
 8003e0e:	4605      	mov	r5, r0
 8003e10:	460e      	mov	r6, r1
 8003e12:	b90b      	cbnz	r3, 8003e18 <_puts_r+0x10>
 8003e14:	f7ff ffb0 	bl	8003d78 <__sinit>
 8003e18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1a:	07db      	lsls	r3, r3, #31
 8003e1c:	d405      	bmi.n	8003e2a <_puts_r+0x22>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	0598      	lsls	r0, r3, #22
 8003e22:	d402      	bmi.n	8003e2a <_puts_r+0x22>
 8003e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e26:	f000 f87e 	bl	8003f26 <__retarget_lock_acquire_recursive>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	0719      	lsls	r1, r3, #28
 8003e2e:	d513      	bpl.n	8003e58 <_puts_r+0x50>
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	b18b      	cbz	r3, 8003e58 <_puts_r+0x50>
 8003e34:	3e01      	subs	r6, #1
 8003e36:	68a3      	ldr	r3, [r4, #8]
 8003e38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60a3      	str	r3, [r4, #8]
 8003e40:	b9e9      	cbnz	r1, 8003e7e <_puts_r+0x76>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da2e      	bge.n	8003ea4 <_puts_r+0x9c>
 8003e46:	4622      	mov	r2, r4
 8003e48:	210a      	movs	r1, #10
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f000 fcdd 	bl	800480a <__swbuf_r>
 8003e50:	3001      	adds	r0, #1
 8003e52:	d007      	beq.n	8003e64 <_puts_r+0x5c>
 8003e54:	250a      	movs	r5, #10
 8003e56:	e007      	b.n	8003e68 <_puts_r+0x60>
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f000 fd12 	bl	8004884 <__swsetup_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d0e7      	beq.n	8003e34 <_puts_r+0x2c>
 8003e64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e6a:	07da      	lsls	r2, r3, #31
 8003e6c:	d405      	bmi.n	8003e7a <_puts_r+0x72>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	059b      	lsls	r3, r3, #22
 8003e72:	d402      	bmi.n	8003e7a <_puts_r+0x72>
 8003e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e76:	f000 f857 	bl	8003f28 <__retarget_lock_release_recursive>
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da04      	bge.n	8003e8c <_puts_r+0x84>
 8003e82:	69a2      	ldr	r2, [r4, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	dc06      	bgt.n	8003e96 <_puts_r+0x8e>
 8003e88:	290a      	cmp	r1, #10
 8003e8a:	d004      	beq.n	8003e96 <_puts_r+0x8e>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	6022      	str	r2, [r4, #0]
 8003e92:	7019      	strb	r1, [r3, #0]
 8003e94:	e7cf      	b.n	8003e36 <_puts_r+0x2e>
 8003e96:	4622      	mov	r2, r4
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f000 fcb6 	bl	800480a <__swbuf_r>
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d1c9      	bne.n	8003e36 <_puts_r+0x2e>
 8003ea2:	e7df      	b.n	8003e64 <_puts_r+0x5c>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	250a      	movs	r5, #10
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	6022      	str	r2, [r4, #0]
 8003eac:	701d      	strb	r5, [r3, #0]
 8003eae:	e7db      	b.n	8003e68 <_puts_r+0x60>

08003eb0 <puts>:
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <puts+0xc>)
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f7ff bfa7 	b.w	8003e08 <_puts_r>
 8003eba:	bf00      	nop
 8003ebc:	20000070 	.word	0x20000070

08003ec0 <memset>:
 8003ec0:	4402      	add	r2, r0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <__errno>:
 8003ed0:	4b01      	ldr	r3, [pc, #4]	; (8003ed8 <__errno+0x8>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000070 	.word	0x20000070

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4d0d      	ldr	r5, [pc, #52]	; (8003f14 <__libc_init_array+0x38>)
 8003ee0:	4c0d      	ldr	r4, [pc, #52]	; (8003f18 <__libc_init_array+0x3c>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	4d0b      	ldr	r5, [pc, #44]	; (8003f1c <__libc_init_array+0x40>)
 8003eee:	4c0c      	ldr	r4, [pc, #48]	; (8003f20 <__libc_init_array+0x44>)
 8003ef0:	f000 fe46 	bl	8004b80 <_init>
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	2600      	movs	r6, #0
 8003efa:	42a6      	cmp	r6, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f04:	4798      	blx	r3
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0e:	4798      	blx	r3
 8003f10:	3601      	adds	r6, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	08004c7c 	.word	0x08004c7c
 8003f18:	08004c7c 	.word	0x08004c7c
 8003f1c:	08004c7c 	.word	0x08004c7c
 8003f20:	08004c80 	.word	0x08004c80

08003f24 <__retarget_lock_init_recursive>:
 8003f24:	4770      	bx	lr

08003f26 <__retarget_lock_acquire_recursive>:
 8003f26:	4770      	bx	lr

08003f28 <__retarget_lock_release_recursive>:
 8003f28:	4770      	bx	lr

08003f2a <__sfputc_r>:
 8003f2a:	6893      	ldr	r3, [r2, #8]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	b410      	push	{r4}
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	da08      	bge.n	8003f48 <__sfputc_r+0x1e>
 8003f36:	6994      	ldr	r4, [r2, #24]
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	db01      	blt.n	8003f40 <__sfputc_r+0x16>
 8003f3c:	290a      	cmp	r1, #10
 8003f3e:	d103      	bne.n	8003f48 <__sfputc_r+0x1e>
 8003f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f44:	f000 bc61 	b.w	800480a <__swbuf_r>
 8003f48:	6813      	ldr	r3, [r2, #0]
 8003f4a:	1c58      	adds	r0, r3, #1
 8003f4c:	6010      	str	r0, [r2, #0]
 8003f4e:	7019      	strb	r1, [r3, #0]
 8003f50:	4608      	mov	r0, r1
 8003f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <__sfputs_r>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	460f      	mov	r7, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	18d5      	adds	r5, r2, r3
 8003f62:	42ac      	cmp	r4, r5
 8003f64:	d101      	bne.n	8003f6a <__sfputs_r+0x12>
 8003f66:	2000      	movs	r0, #0
 8003f68:	e007      	b.n	8003f7a <__sfputs_r+0x22>
 8003f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f6e:	463a      	mov	r2, r7
 8003f70:	4630      	mov	r0, r6
 8003f72:	f7ff ffda 	bl	8003f2a <__sfputc_r>
 8003f76:	1c43      	adds	r3, r0, #1
 8003f78:	d1f3      	bne.n	8003f62 <__sfputs_r+0xa>
 8003f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f7c <_vfiprintf_r>:
 8003f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f80:	460d      	mov	r5, r1
 8003f82:	b09d      	sub	sp, #116	; 0x74
 8003f84:	4614      	mov	r4, r2
 8003f86:	4698      	mov	r8, r3
 8003f88:	4606      	mov	r6, r0
 8003f8a:	b118      	cbz	r0, 8003f94 <_vfiprintf_r+0x18>
 8003f8c:	6a03      	ldr	r3, [r0, #32]
 8003f8e:	b90b      	cbnz	r3, 8003f94 <_vfiprintf_r+0x18>
 8003f90:	f7ff fef2 	bl	8003d78 <__sinit>
 8003f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f96:	07d9      	lsls	r1, r3, #31
 8003f98:	d405      	bmi.n	8003fa6 <_vfiprintf_r+0x2a>
 8003f9a:	89ab      	ldrh	r3, [r5, #12]
 8003f9c:	059a      	lsls	r2, r3, #22
 8003f9e:	d402      	bmi.n	8003fa6 <_vfiprintf_r+0x2a>
 8003fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fa2:	f7ff ffc0 	bl	8003f26 <__retarget_lock_acquire_recursive>
 8003fa6:	89ab      	ldrh	r3, [r5, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	d501      	bpl.n	8003fb0 <_vfiprintf_r+0x34>
 8003fac:	692b      	ldr	r3, [r5, #16]
 8003fae:	b99b      	cbnz	r3, 8003fd8 <_vfiprintf_r+0x5c>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f000 fc66 	bl	8004884 <__swsetup_r>
 8003fb8:	b170      	cbz	r0, 8003fd8 <_vfiprintf_r+0x5c>
 8003fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fbc:	07dc      	lsls	r4, r3, #31
 8003fbe:	d504      	bpl.n	8003fca <_vfiprintf_r+0x4e>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc4:	b01d      	add	sp, #116	; 0x74
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	89ab      	ldrh	r3, [r5, #12]
 8003fcc:	0598      	lsls	r0, r3, #22
 8003fce:	d4f7      	bmi.n	8003fc0 <_vfiprintf_r+0x44>
 8003fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fd2:	f7ff ffa9 	bl	8003f28 <__retarget_lock_release_recursive>
 8003fd6:	e7f3      	b.n	8003fc0 <_vfiprintf_r+0x44>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9309      	str	r3, [sp, #36]	; 0x24
 8003fdc:	2320      	movs	r3, #32
 8003fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe6:	2330      	movs	r3, #48	; 0x30
 8003fe8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800419c <_vfiprintf_r+0x220>
 8003fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ff0:	f04f 0901 	mov.w	r9, #1
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	469a      	mov	sl, r3
 8003ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ffc:	b10a      	cbz	r2, 8004002 <_vfiprintf_r+0x86>
 8003ffe:	2a25      	cmp	r2, #37	; 0x25
 8004000:	d1f9      	bne.n	8003ff6 <_vfiprintf_r+0x7a>
 8004002:	ebba 0b04 	subs.w	fp, sl, r4
 8004006:	d00b      	beq.n	8004020 <_vfiprintf_r+0xa4>
 8004008:	465b      	mov	r3, fp
 800400a:	4622      	mov	r2, r4
 800400c:	4629      	mov	r1, r5
 800400e:	4630      	mov	r0, r6
 8004010:	f7ff ffa2 	bl	8003f58 <__sfputs_r>
 8004014:	3001      	adds	r0, #1
 8004016:	f000 80a9 	beq.w	800416c <_vfiprintf_r+0x1f0>
 800401a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800401c:	445a      	add	r2, fp
 800401e:	9209      	str	r2, [sp, #36]	; 0x24
 8004020:	f89a 3000 	ldrb.w	r3, [sl]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a1 	beq.w	800416c <_vfiprintf_r+0x1f0>
 800402a:	2300      	movs	r3, #0
 800402c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004034:	f10a 0a01 	add.w	sl, sl, #1
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	9307      	str	r3, [sp, #28]
 800403c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004040:	931a      	str	r3, [sp, #104]	; 0x68
 8004042:	4654      	mov	r4, sl
 8004044:	2205      	movs	r2, #5
 8004046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800404a:	4854      	ldr	r0, [pc, #336]	; (800419c <_vfiprintf_r+0x220>)
 800404c:	f7fc f8e8 	bl	8000220 <memchr>
 8004050:	9a04      	ldr	r2, [sp, #16]
 8004052:	b9d8      	cbnz	r0, 800408c <_vfiprintf_r+0x110>
 8004054:	06d1      	lsls	r1, r2, #27
 8004056:	bf44      	itt	mi
 8004058:	2320      	movmi	r3, #32
 800405a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800405e:	0713      	lsls	r3, r2, #28
 8004060:	bf44      	itt	mi
 8004062:	232b      	movmi	r3, #43	; 0x2b
 8004064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004068:	f89a 3000 	ldrb.w	r3, [sl]
 800406c:	2b2a      	cmp	r3, #42	; 0x2a
 800406e:	d015      	beq.n	800409c <_vfiprintf_r+0x120>
 8004070:	9a07      	ldr	r2, [sp, #28]
 8004072:	4654      	mov	r4, sl
 8004074:	2000      	movs	r0, #0
 8004076:	f04f 0c0a 	mov.w	ip, #10
 800407a:	4621      	mov	r1, r4
 800407c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004080:	3b30      	subs	r3, #48	; 0x30
 8004082:	2b09      	cmp	r3, #9
 8004084:	d94d      	bls.n	8004122 <_vfiprintf_r+0x1a6>
 8004086:	b1b0      	cbz	r0, 80040b6 <_vfiprintf_r+0x13a>
 8004088:	9207      	str	r2, [sp, #28]
 800408a:	e014      	b.n	80040b6 <_vfiprintf_r+0x13a>
 800408c:	eba0 0308 	sub.w	r3, r0, r8
 8004090:	fa09 f303 	lsl.w	r3, r9, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	9304      	str	r3, [sp, #16]
 8004098:	46a2      	mov	sl, r4
 800409a:	e7d2      	b.n	8004042 <_vfiprintf_r+0xc6>
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	1d19      	adds	r1, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	9103      	str	r1, [sp, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bfbb      	ittet	lt
 80040a8:	425b      	neglt	r3, r3
 80040aa:	f042 0202 	orrlt.w	r2, r2, #2
 80040ae:	9307      	strge	r3, [sp, #28]
 80040b0:	9307      	strlt	r3, [sp, #28]
 80040b2:	bfb8      	it	lt
 80040b4:	9204      	strlt	r2, [sp, #16]
 80040b6:	7823      	ldrb	r3, [r4, #0]
 80040b8:	2b2e      	cmp	r3, #46	; 0x2e
 80040ba:	d10c      	bne.n	80040d6 <_vfiprintf_r+0x15a>
 80040bc:	7863      	ldrb	r3, [r4, #1]
 80040be:	2b2a      	cmp	r3, #42	; 0x2a
 80040c0:	d134      	bne.n	800412c <_vfiprintf_r+0x1b0>
 80040c2:	9b03      	ldr	r3, [sp, #12]
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	9203      	str	r2, [sp, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfb8      	it	lt
 80040ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040d2:	3402      	adds	r4, #2
 80040d4:	9305      	str	r3, [sp, #20]
 80040d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041ac <_vfiprintf_r+0x230>
 80040da:	7821      	ldrb	r1, [r4, #0]
 80040dc:	2203      	movs	r2, #3
 80040de:	4650      	mov	r0, sl
 80040e0:	f7fc f89e 	bl	8000220 <memchr>
 80040e4:	b138      	cbz	r0, 80040f6 <_vfiprintf_r+0x17a>
 80040e6:	9b04      	ldr	r3, [sp, #16]
 80040e8:	eba0 000a 	sub.w	r0, r0, sl
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	4082      	lsls	r2, r0
 80040f0:	4313      	orrs	r3, r2
 80040f2:	3401      	adds	r4, #1
 80040f4:	9304      	str	r3, [sp, #16]
 80040f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040fa:	4829      	ldr	r0, [pc, #164]	; (80041a0 <_vfiprintf_r+0x224>)
 80040fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004100:	2206      	movs	r2, #6
 8004102:	f7fc f88d 	bl	8000220 <memchr>
 8004106:	2800      	cmp	r0, #0
 8004108:	d03f      	beq.n	800418a <_vfiprintf_r+0x20e>
 800410a:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <_vfiprintf_r+0x228>)
 800410c:	bb1b      	cbnz	r3, 8004156 <_vfiprintf_r+0x1da>
 800410e:	9b03      	ldr	r3, [sp, #12]
 8004110:	3307      	adds	r3, #7
 8004112:	f023 0307 	bic.w	r3, r3, #7
 8004116:	3308      	adds	r3, #8
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411c:	443b      	add	r3, r7
 800411e:	9309      	str	r3, [sp, #36]	; 0x24
 8004120:	e768      	b.n	8003ff4 <_vfiprintf_r+0x78>
 8004122:	fb0c 3202 	mla	r2, ip, r2, r3
 8004126:	460c      	mov	r4, r1
 8004128:	2001      	movs	r0, #1
 800412a:	e7a6      	b.n	800407a <_vfiprintf_r+0xfe>
 800412c:	2300      	movs	r3, #0
 800412e:	3401      	adds	r4, #1
 8004130:	9305      	str	r3, [sp, #20]
 8004132:	4619      	mov	r1, r3
 8004134:	f04f 0c0a 	mov.w	ip, #10
 8004138:	4620      	mov	r0, r4
 800413a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800413e:	3a30      	subs	r2, #48	; 0x30
 8004140:	2a09      	cmp	r2, #9
 8004142:	d903      	bls.n	800414c <_vfiprintf_r+0x1d0>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0c6      	beq.n	80040d6 <_vfiprintf_r+0x15a>
 8004148:	9105      	str	r1, [sp, #20]
 800414a:	e7c4      	b.n	80040d6 <_vfiprintf_r+0x15a>
 800414c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004150:	4604      	mov	r4, r0
 8004152:	2301      	movs	r3, #1
 8004154:	e7f0      	b.n	8004138 <_vfiprintf_r+0x1bc>
 8004156:	ab03      	add	r3, sp, #12
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	462a      	mov	r2, r5
 800415c:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <_vfiprintf_r+0x22c>)
 800415e:	a904      	add	r1, sp, #16
 8004160:	4630      	mov	r0, r6
 8004162:	f3af 8000 	nop.w
 8004166:	4607      	mov	r7, r0
 8004168:	1c78      	adds	r0, r7, #1
 800416a:	d1d6      	bne.n	800411a <_vfiprintf_r+0x19e>
 800416c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800416e:	07d9      	lsls	r1, r3, #31
 8004170:	d405      	bmi.n	800417e <_vfiprintf_r+0x202>
 8004172:	89ab      	ldrh	r3, [r5, #12]
 8004174:	059a      	lsls	r2, r3, #22
 8004176:	d402      	bmi.n	800417e <_vfiprintf_r+0x202>
 8004178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800417a:	f7ff fed5 	bl	8003f28 <__retarget_lock_release_recursive>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	065b      	lsls	r3, r3, #25
 8004182:	f53f af1d 	bmi.w	8003fc0 <_vfiprintf_r+0x44>
 8004186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004188:	e71c      	b.n	8003fc4 <_vfiprintf_r+0x48>
 800418a:	ab03      	add	r3, sp, #12
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	462a      	mov	r2, r5
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <_vfiprintf_r+0x22c>)
 8004192:	a904      	add	r1, sp, #16
 8004194:	4630      	mov	r0, r6
 8004196:	f000 f919 	bl	80043cc <_printf_i>
 800419a:	e7e4      	b.n	8004166 <_vfiprintf_r+0x1ea>
 800419c:	08004c40 	.word	0x08004c40
 80041a0:	08004c4a 	.word	0x08004c4a
 80041a4:	00000000 	.word	0x00000000
 80041a8:	08003f59 	.word	0x08003f59
 80041ac:	08004c46 	.word	0x08004c46

080041b0 <sbrk_aligned>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0e      	ldr	r6, [pc, #56]	; (80041ec <sbrk_aligned+0x3c>)
 80041b4:	460c      	mov	r4, r1
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	4605      	mov	r5, r0
 80041ba:	b911      	cbnz	r1, 80041c2 <sbrk_aligned+0x12>
 80041bc:	f000 fc72 	bl	8004aa4 <_sbrk_r>
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fc6d 	bl	8004aa4 <_sbrk_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d00a      	beq.n	80041e4 <sbrk_aligned+0x34>
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d007      	beq.n	80041e8 <sbrk_aligned+0x38>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 fc62 	bl	8004aa4 <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d101      	bne.n	80041e8 <sbrk_aligned+0x38>
 80041e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	20000288 	.word	0x20000288

080041f0 <_malloc_r>:
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	1ccd      	adds	r5, r1, #3
 80041f6:	f025 0503 	bic.w	r5, r5, #3
 80041fa:	3508      	adds	r5, #8
 80041fc:	2d0c      	cmp	r5, #12
 80041fe:	bf38      	it	cc
 8004200:	250c      	movcc	r5, #12
 8004202:	2d00      	cmp	r5, #0
 8004204:	4607      	mov	r7, r0
 8004206:	db01      	blt.n	800420c <_malloc_r+0x1c>
 8004208:	42a9      	cmp	r1, r5
 800420a:	d905      	bls.n	8004218 <_malloc_r+0x28>
 800420c:	230c      	movs	r3, #12
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	2600      	movs	r6, #0
 8004212:	4630      	mov	r0, r6
 8004214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042ec <_malloc_r+0xfc>
 800421c:	f000 faa6 	bl	800476c <__malloc_lock>
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	461c      	mov	r4, r3
 8004226:	bb5c      	cbnz	r4, 8004280 <_malloc_r+0x90>
 8004228:	4629      	mov	r1, r5
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ffc0 	bl	80041b0 <sbrk_aligned>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	4604      	mov	r4, r0
 8004234:	d155      	bne.n	80042e2 <_malloc_r+0xf2>
 8004236:	f8d8 4000 	ldr.w	r4, [r8]
 800423a:	4626      	mov	r6, r4
 800423c:	2e00      	cmp	r6, #0
 800423e:	d145      	bne.n	80042cc <_malloc_r+0xdc>
 8004240:	2c00      	cmp	r4, #0
 8004242:	d048      	beq.n	80042d6 <_malloc_r+0xe6>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	4631      	mov	r1, r6
 8004248:	4638      	mov	r0, r7
 800424a:	eb04 0903 	add.w	r9, r4, r3
 800424e:	f000 fc29 	bl	8004aa4 <_sbrk_r>
 8004252:	4581      	cmp	r9, r0
 8004254:	d13f      	bne.n	80042d6 <_malloc_r+0xe6>
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	1a6d      	subs	r5, r5, r1
 800425a:	4629      	mov	r1, r5
 800425c:	4638      	mov	r0, r7
 800425e:	f7ff ffa7 	bl	80041b0 <sbrk_aligned>
 8004262:	3001      	adds	r0, #1
 8004264:	d037      	beq.n	80042d6 <_malloc_r+0xe6>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	442b      	add	r3, r5
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	f8d8 3000 	ldr.w	r3, [r8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d038      	beq.n	80042e6 <_malloc_r+0xf6>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	42a2      	cmp	r2, r4
 8004278:	d12b      	bne.n	80042d2 <_malloc_r+0xe2>
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e00f      	b.n	80042a0 <_malloc_r+0xb0>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	1b52      	subs	r2, r2, r5
 8004284:	d41f      	bmi.n	80042c6 <_malloc_r+0xd6>
 8004286:	2a0b      	cmp	r2, #11
 8004288:	d917      	bls.n	80042ba <_malloc_r+0xca>
 800428a:	1961      	adds	r1, r4, r5
 800428c:	42a3      	cmp	r3, r4
 800428e:	6025      	str	r5, [r4, #0]
 8004290:	bf18      	it	ne
 8004292:	6059      	strne	r1, [r3, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	bf08      	it	eq
 8004298:	f8c8 1000 	streq.w	r1, [r8]
 800429c:	5162      	str	r2, [r4, r5]
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	4638      	mov	r0, r7
 80042a2:	f104 060b 	add.w	r6, r4, #11
 80042a6:	f000 fa67 	bl	8004778 <__malloc_unlock>
 80042aa:	f026 0607 	bic.w	r6, r6, #7
 80042ae:	1d23      	adds	r3, r4, #4
 80042b0:	1af2      	subs	r2, r6, r3
 80042b2:	d0ae      	beq.n	8004212 <_malloc_r+0x22>
 80042b4:	1b9b      	subs	r3, r3, r6
 80042b6:	50a3      	str	r3, [r4, r2]
 80042b8:	e7ab      	b.n	8004212 <_malloc_r+0x22>
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	6862      	ldr	r2, [r4, #4]
 80042be:	d1dd      	bne.n	800427c <_malloc_r+0x8c>
 80042c0:	f8c8 2000 	str.w	r2, [r8]
 80042c4:	e7ec      	b.n	80042a0 <_malloc_r+0xb0>
 80042c6:	4623      	mov	r3, r4
 80042c8:	6864      	ldr	r4, [r4, #4]
 80042ca:	e7ac      	b.n	8004226 <_malloc_r+0x36>
 80042cc:	4634      	mov	r4, r6
 80042ce:	6876      	ldr	r6, [r6, #4]
 80042d0:	e7b4      	b.n	800423c <_malloc_r+0x4c>
 80042d2:	4613      	mov	r3, r2
 80042d4:	e7cc      	b.n	8004270 <_malloc_r+0x80>
 80042d6:	230c      	movs	r3, #12
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4638      	mov	r0, r7
 80042dc:	f000 fa4c 	bl	8004778 <__malloc_unlock>
 80042e0:	e797      	b.n	8004212 <_malloc_r+0x22>
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	e7dc      	b.n	80042a0 <_malloc_r+0xb0>
 80042e6:	605b      	str	r3, [r3, #4]
 80042e8:	deff      	udf	#255	; 0xff
 80042ea:	bf00      	nop
 80042ec:	20000284 	.word	0x20000284

080042f0 <_printf_common>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	4616      	mov	r6, r2
 80042f6:	4699      	mov	r9, r3
 80042f8:	688a      	ldr	r2, [r1, #8]
 80042fa:	690b      	ldr	r3, [r1, #16]
 80042fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004300:	4293      	cmp	r3, r2
 8004302:	bfb8      	it	lt
 8004304:	4613      	movlt	r3, r2
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800430c:	4607      	mov	r7, r0
 800430e:	460c      	mov	r4, r1
 8004310:	b10a      	cbz	r2, 8004316 <_printf_common+0x26>
 8004312:	3301      	adds	r3, #1
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	0699      	lsls	r1, r3, #26
 800431a:	bf42      	ittt	mi
 800431c:	6833      	ldrmi	r3, [r6, #0]
 800431e:	3302      	addmi	r3, #2
 8004320:	6033      	strmi	r3, [r6, #0]
 8004322:	6825      	ldr	r5, [r4, #0]
 8004324:	f015 0506 	ands.w	r5, r5, #6
 8004328:	d106      	bne.n	8004338 <_printf_common+0x48>
 800432a:	f104 0a19 	add.w	sl, r4, #25
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	6832      	ldr	r2, [r6, #0]
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	42ab      	cmp	r3, r5
 8004336:	dc26      	bgt.n	8004386 <_printf_common+0x96>
 8004338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800433c:	1e13      	subs	r3, r2, #0
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	bf18      	it	ne
 8004342:	2301      	movne	r3, #1
 8004344:	0692      	lsls	r2, r2, #26
 8004346:	d42b      	bmi.n	80043a0 <_printf_common+0xb0>
 8004348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800434c:	4649      	mov	r1, r9
 800434e:	4638      	mov	r0, r7
 8004350:	47c0      	blx	r8
 8004352:	3001      	adds	r0, #1
 8004354:	d01e      	beq.n	8004394 <_printf_common+0xa4>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	2b04      	cmp	r3, #4
 8004360:	bf02      	ittt	eq
 8004362:	68e5      	ldreq	r5, [r4, #12]
 8004364:	6833      	ldreq	r3, [r6, #0]
 8004366:	1aed      	subeq	r5, r5, r3
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	bf0c      	ite	eq
 800436c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004370:	2500      	movne	r5, #0
 8004372:	4293      	cmp	r3, r2
 8004374:	bfc4      	itt	gt
 8004376:	1a9b      	subgt	r3, r3, r2
 8004378:	18ed      	addgt	r5, r5, r3
 800437a:	2600      	movs	r6, #0
 800437c:	341a      	adds	r4, #26
 800437e:	42b5      	cmp	r5, r6
 8004380:	d11a      	bne.n	80043b8 <_printf_common+0xc8>
 8004382:	2000      	movs	r0, #0
 8004384:	e008      	b.n	8004398 <_printf_common+0xa8>
 8004386:	2301      	movs	r3, #1
 8004388:	4652      	mov	r2, sl
 800438a:	4649      	mov	r1, r9
 800438c:	4638      	mov	r0, r7
 800438e:	47c0      	blx	r8
 8004390:	3001      	adds	r0, #1
 8004392:	d103      	bne.n	800439c <_printf_common+0xac>
 8004394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439c:	3501      	adds	r5, #1
 800439e:	e7c6      	b.n	800432e <_printf_common+0x3e>
 80043a0:	18e1      	adds	r1, r4, r3
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	2030      	movs	r0, #48	; 0x30
 80043a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043aa:	4422      	add	r2, r4
 80043ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043b4:	3302      	adds	r3, #2
 80043b6:	e7c7      	b.n	8004348 <_printf_common+0x58>
 80043b8:	2301      	movs	r3, #1
 80043ba:	4622      	mov	r2, r4
 80043bc:	4649      	mov	r1, r9
 80043be:	4638      	mov	r0, r7
 80043c0:	47c0      	blx	r8
 80043c2:	3001      	adds	r0, #1
 80043c4:	d0e6      	beq.n	8004394 <_printf_common+0xa4>
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7d9      	b.n	800437e <_printf_common+0x8e>
	...

080043cc <_printf_i>:
 80043cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	7e0f      	ldrb	r7, [r1, #24]
 80043d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043d4:	2f78      	cmp	r7, #120	; 0x78
 80043d6:	4691      	mov	r9, r2
 80043d8:	4680      	mov	r8, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	469a      	mov	sl, r3
 80043de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043e2:	d807      	bhi.n	80043f4 <_printf_i+0x28>
 80043e4:	2f62      	cmp	r7, #98	; 0x62
 80043e6:	d80a      	bhi.n	80043fe <_printf_i+0x32>
 80043e8:	2f00      	cmp	r7, #0
 80043ea:	f000 80d4 	beq.w	8004596 <_printf_i+0x1ca>
 80043ee:	2f58      	cmp	r7, #88	; 0x58
 80043f0:	f000 80c0 	beq.w	8004574 <_printf_i+0x1a8>
 80043f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043fc:	e03a      	b.n	8004474 <_printf_i+0xa8>
 80043fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004402:	2b15      	cmp	r3, #21
 8004404:	d8f6      	bhi.n	80043f4 <_printf_i+0x28>
 8004406:	a101      	add	r1, pc, #4	; (adr r1, 800440c <_printf_i+0x40>)
 8004408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800440c:	08004465 	.word	0x08004465
 8004410:	08004479 	.word	0x08004479
 8004414:	080043f5 	.word	0x080043f5
 8004418:	080043f5 	.word	0x080043f5
 800441c:	080043f5 	.word	0x080043f5
 8004420:	080043f5 	.word	0x080043f5
 8004424:	08004479 	.word	0x08004479
 8004428:	080043f5 	.word	0x080043f5
 800442c:	080043f5 	.word	0x080043f5
 8004430:	080043f5 	.word	0x080043f5
 8004434:	080043f5 	.word	0x080043f5
 8004438:	0800457d 	.word	0x0800457d
 800443c:	080044a5 	.word	0x080044a5
 8004440:	08004537 	.word	0x08004537
 8004444:	080043f5 	.word	0x080043f5
 8004448:	080043f5 	.word	0x080043f5
 800444c:	0800459f 	.word	0x0800459f
 8004450:	080043f5 	.word	0x080043f5
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080043f5 	.word	0x080043f5
 800445c:	080043f5 	.word	0x080043f5
 8004460:	0800453f 	.word	0x0800453f
 8004464:	682b      	ldr	r3, [r5, #0]
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	602a      	str	r2, [r5, #0]
 800446c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004474:	2301      	movs	r3, #1
 8004476:	e09f      	b.n	80045b8 <_printf_i+0x1ec>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	682b      	ldr	r3, [r5, #0]
 800447c:	0607      	lsls	r7, r0, #24
 800447e:	f103 0104 	add.w	r1, r3, #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0xbe>
 8004486:	681e      	ldr	r6, [r3, #0]
 8004488:	e003      	b.n	8004492 <_printf_i+0xc6>
 800448a:	0646      	lsls	r6, r0, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0xba>
 800448e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004492:	2e00      	cmp	r6, #0
 8004494:	da03      	bge.n	800449e <_printf_i+0xd2>
 8004496:	232d      	movs	r3, #45	; 0x2d
 8004498:	4276      	negs	r6, r6
 800449a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800449e:	485a      	ldr	r0, [pc, #360]	; (8004608 <_printf_i+0x23c>)
 80044a0:	230a      	movs	r3, #10
 80044a2:	e012      	b.n	80044ca <_printf_i+0xfe>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	1d19      	adds	r1, r3, #4
 80044aa:	6029      	str	r1, [r5, #0]
 80044ac:	0605      	lsls	r5, r0, #24
 80044ae:	d501      	bpl.n	80044b4 <_printf_i+0xe8>
 80044b0:	681e      	ldr	r6, [r3, #0]
 80044b2:	e002      	b.n	80044ba <_printf_i+0xee>
 80044b4:	0641      	lsls	r1, r0, #25
 80044b6:	d5fb      	bpl.n	80044b0 <_printf_i+0xe4>
 80044b8:	881e      	ldrh	r6, [r3, #0]
 80044ba:	4853      	ldr	r0, [pc, #332]	; (8004608 <_printf_i+0x23c>)
 80044bc:	2f6f      	cmp	r7, #111	; 0x6f
 80044be:	bf0c      	ite	eq
 80044c0:	2308      	moveq	r3, #8
 80044c2:	230a      	movne	r3, #10
 80044c4:	2100      	movs	r1, #0
 80044c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044ca:	6865      	ldr	r5, [r4, #4]
 80044cc:	60a5      	str	r5, [r4, #8]
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	bfa2      	ittt	ge
 80044d2:	6821      	ldrge	r1, [r4, #0]
 80044d4:	f021 0104 	bicge.w	r1, r1, #4
 80044d8:	6021      	strge	r1, [r4, #0]
 80044da:	b90e      	cbnz	r6, 80044e0 <_printf_i+0x114>
 80044dc:	2d00      	cmp	r5, #0
 80044de:	d04b      	beq.n	8004578 <_printf_i+0x1ac>
 80044e0:	4615      	mov	r5, r2
 80044e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e6:	fb03 6711 	mls	r7, r3, r1, r6
 80044ea:	5dc7      	ldrb	r7, [r0, r7]
 80044ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044f0:	4637      	mov	r7, r6
 80044f2:	42bb      	cmp	r3, r7
 80044f4:	460e      	mov	r6, r1
 80044f6:	d9f4      	bls.n	80044e2 <_printf_i+0x116>
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d10b      	bne.n	8004514 <_printf_i+0x148>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	07de      	lsls	r6, r3, #31
 8004500:	d508      	bpl.n	8004514 <_printf_i+0x148>
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	6861      	ldr	r1, [r4, #4]
 8004506:	4299      	cmp	r1, r3
 8004508:	bfde      	ittt	le
 800450a:	2330      	movle	r3, #48	; 0x30
 800450c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004510:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004514:	1b52      	subs	r2, r2, r5
 8004516:	6122      	str	r2, [r4, #16]
 8004518:	f8cd a000 	str.w	sl, [sp]
 800451c:	464b      	mov	r3, r9
 800451e:	aa03      	add	r2, sp, #12
 8004520:	4621      	mov	r1, r4
 8004522:	4640      	mov	r0, r8
 8004524:	f7ff fee4 	bl	80042f0 <_printf_common>
 8004528:	3001      	adds	r0, #1
 800452a:	d14a      	bne.n	80045c2 <_printf_i+0x1f6>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004530:	b004      	add	sp, #16
 8004532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	f043 0320 	orr.w	r3, r3, #32
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	4833      	ldr	r0, [pc, #204]	; (800460c <_printf_i+0x240>)
 8004540:	2778      	movs	r7, #120	; 0x78
 8004542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	6829      	ldr	r1, [r5, #0]
 800454a:	061f      	lsls	r7, r3, #24
 800454c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004550:	d402      	bmi.n	8004558 <_printf_i+0x18c>
 8004552:	065f      	lsls	r7, r3, #25
 8004554:	bf48      	it	mi
 8004556:	b2b6      	uxthmi	r6, r6
 8004558:	07df      	lsls	r7, r3, #31
 800455a:	bf48      	it	mi
 800455c:	f043 0320 	orrmi.w	r3, r3, #32
 8004560:	6029      	str	r1, [r5, #0]
 8004562:	bf48      	it	mi
 8004564:	6023      	strmi	r3, [r4, #0]
 8004566:	b91e      	cbnz	r6, 8004570 <_printf_i+0x1a4>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	2310      	movs	r3, #16
 8004572:	e7a7      	b.n	80044c4 <_printf_i+0xf8>
 8004574:	4824      	ldr	r0, [pc, #144]	; (8004608 <_printf_i+0x23c>)
 8004576:	e7e4      	b.n	8004542 <_printf_i+0x176>
 8004578:	4615      	mov	r5, r2
 800457a:	e7bd      	b.n	80044f8 <_printf_i+0x12c>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	6826      	ldr	r6, [r4, #0]
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	1d18      	adds	r0, r3, #4
 8004584:	6028      	str	r0, [r5, #0]
 8004586:	0635      	lsls	r5, r6, #24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	d501      	bpl.n	8004590 <_printf_i+0x1c4>
 800458c:	6019      	str	r1, [r3, #0]
 800458e:	e002      	b.n	8004596 <_printf_i+0x1ca>
 8004590:	0670      	lsls	r0, r6, #25
 8004592:	d5fb      	bpl.n	800458c <_printf_i+0x1c0>
 8004594:	8019      	strh	r1, [r3, #0]
 8004596:	2300      	movs	r3, #0
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	4615      	mov	r5, r2
 800459c:	e7bc      	b.n	8004518 <_printf_i+0x14c>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4628      	mov	r0, r5
 80045ac:	f7fb fe38 	bl	8000220 <memchr>
 80045b0:	b108      	cbz	r0, 80045b6 <_printf_i+0x1ea>
 80045b2:	1b40      	subs	r0, r0, r5
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c0:	e7aa      	b.n	8004518 <_printf_i+0x14c>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	462a      	mov	r2, r5
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	47d0      	blx	sl
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ad      	beq.n	800452c <_printf_i+0x160>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d413      	bmi.n	80045fe <_printf_i+0x232>
 80045d6:	68e0      	ldr	r0, [r4, #12]
 80045d8:	9b03      	ldr	r3, [sp, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	bfb8      	it	lt
 80045de:	4618      	movlt	r0, r3
 80045e0:	e7a6      	b.n	8004530 <_printf_i+0x164>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4632      	mov	r2, r6
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d09d      	beq.n	800452c <_printf_i+0x160>
 80045f0:	3501      	adds	r5, #1
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	1a5b      	subs	r3, r3, r1
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	dcf2      	bgt.n	80045e2 <_printf_i+0x216>
 80045fc:	e7eb      	b.n	80045d6 <_printf_i+0x20a>
 80045fe:	2500      	movs	r5, #0
 8004600:	f104 0619 	add.w	r6, r4, #25
 8004604:	e7f5      	b.n	80045f2 <_printf_i+0x226>
 8004606:	bf00      	nop
 8004608:	08004c51 	.word	0x08004c51
 800460c:	08004c62 	.word	0x08004c62

08004610 <__sflush_r>:
 8004610:	898a      	ldrh	r2, [r1, #12]
 8004612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004616:	4605      	mov	r5, r0
 8004618:	0710      	lsls	r0, r2, #28
 800461a:	460c      	mov	r4, r1
 800461c:	d458      	bmi.n	80046d0 <__sflush_r+0xc0>
 800461e:	684b      	ldr	r3, [r1, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dc05      	bgt.n	8004630 <__sflush_r+0x20>
 8004624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	dc02      	bgt.n	8004630 <__sflush_r+0x20>
 800462a:	2000      	movs	r0, #0
 800462c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004632:	2e00      	cmp	r6, #0
 8004634:	d0f9      	beq.n	800462a <__sflush_r+0x1a>
 8004636:	2300      	movs	r3, #0
 8004638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800463c:	682f      	ldr	r7, [r5, #0]
 800463e:	6a21      	ldr	r1, [r4, #32]
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	d032      	beq.n	80046aa <__sflush_r+0x9a>
 8004644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	075a      	lsls	r2, r3, #29
 800464a:	d505      	bpl.n	8004658 <__sflush_r+0x48>
 800464c:	6863      	ldr	r3, [r4, #4]
 800464e:	1ac0      	subs	r0, r0, r3
 8004650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004652:	b10b      	cbz	r3, 8004658 <__sflush_r+0x48>
 8004654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004656:	1ac0      	subs	r0, r0, r3
 8004658:	2300      	movs	r3, #0
 800465a:	4602      	mov	r2, r0
 800465c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800465e:	6a21      	ldr	r1, [r4, #32]
 8004660:	4628      	mov	r0, r5
 8004662:	47b0      	blx	r6
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	d106      	bne.n	8004678 <__sflush_r+0x68>
 800466a:	6829      	ldr	r1, [r5, #0]
 800466c:	291d      	cmp	r1, #29
 800466e:	d82b      	bhi.n	80046c8 <__sflush_r+0xb8>
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <__sflush_r+0x108>)
 8004672:	410a      	asrs	r2, r1
 8004674:	07d6      	lsls	r6, r2, #31
 8004676:	d427      	bmi.n	80046c8 <__sflush_r+0xb8>
 8004678:	2200      	movs	r2, #0
 800467a:	6062      	str	r2, [r4, #4]
 800467c:	04d9      	lsls	r1, r3, #19
 800467e:	6922      	ldr	r2, [r4, #16]
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	d504      	bpl.n	800468e <__sflush_r+0x7e>
 8004684:	1c42      	adds	r2, r0, #1
 8004686:	d101      	bne.n	800468c <__sflush_r+0x7c>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b903      	cbnz	r3, 800468e <__sflush_r+0x7e>
 800468c:	6560      	str	r0, [r4, #84]	; 0x54
 800468e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004690:	602f      	str	r7, [r5, #0]
 8004692:	2900      	cmp	r1, #0
 8004694:	d0c9      	beq.n	800462a <__sflush_r+0x1a>
 8004696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800469a:	4299      	cmp	r1, r3
 800469c:	d002      	beq.n	80046a4 <__sflush_r+0x94>
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 fa22 	bl	8004ae8 <_free_r>
 80046a4:	2000      	movs	r0, #0
 80046a6:	6360      	str	r0, [r4, #52]	; 0x34
 80046a8:	e7c0      	b.n	800462c <__sflush_r+0x1c>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b0      	blx	r6
 80046b0:	1c41      	adds	r1, r0, #1
 80046b2:	d1c8      	bne.n	8004646 <__sflush_r+0x36>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0c5      	beq.n	8004646 <__sflush_r+0x36>
 80046ba:	2b1d      	cmp	r3, #29
 80046bc:	d001      	beq.n	80046c2 <__sflush_r+0xb2>
 80046be:	2b16      	cmp	r3, #22
 80046c0:	d101      	bne.n	80046c6 <__sflush_r+0xb6>
 80046c2:	602f      	str	r7, [r5, #0]
 80046c4:	e7b1      	b.n	800462a <__sflush_r+0x1a>
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	e7ad      	b.n	800462c <__sflush_r+0x1c>
 80046d0:	690f      	ldr	r7, [r1, #16]
 80046d2:	2f00      	cmp	r7, #0
 80046d4:	d0a9      	beq.n	800462a <__sflush_r+0x1a>
 80046d6:	0793      	lsls	r3, r2, #30
 80046d8:	680e      	ldr	r6, [r1, #0]
 80046da:	bf08      	it	eq
 80046dc:	694b      	ldreq	r3, [r1, #20]
 80046de:	600f      	str	r7, [r1, #0]
 80046e0:	bf18      	it	ne
 80046e2:	2300      	movne	r3, #0
 80046e4:	eba6 0807 	sub.w	r8, r6, r7
 80046e8:	608b      	str	r3, [r1, #8]
 80046ea:	f1b8 0f00 	cmp.w	r8, #0
 80046ee:	dd9c      	ble.n	800462a <__sflush_r+0x1a>
 80046f0:	6a21      	ldr	r1, [r4, #32]
 80046f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046f4:	4643      	mov	r3, r8
 80046f6:	463a      	mov	r2, r7
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b0      	blx	r6
 80046fc:	2800      	cmp	r0, #0
 80046fe:	dc06      	bgt.n	800470e <__sflush_r+0xfe>
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800470c:	e78e      	b.n	800462c <__sflush_r+0x1c>
 800470e:	4407      	add	r7, r0
 8004710:	eba8 0800 	sub.w	r8, r8, r0
 8004714:	e7e9      	b.n	80046ea <__sflush_r+0xda>
 8004716:	bf00      	nop
 8004718:	dfbffffe 	.word	0xdfbffffe

0800471c <_fflush_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	690b      	ldr	r3, [r1, #16]
 8004720:	4605      	mov	r5, r0
 8004722:	460c      	mov	r4, r1
 8004724:	b913      	cbnz	r3, 800472c <_fflush_r+0x10>
 8004726:	2500      	movs	r5, #0
 8004728:	4628      	mov	r0, r5
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	b118      	cbz	r0, 8004736 <_fflush_r+0x1a>
 800472e:	6a03      	ldr	r3, [r0, #32]
 8004730:	b90b      	cbnz	r3, 8004736 <_fflush_r+0x1a>
 8004732:	f7ff fb21 	bl	8003d78 <__sinit>
 8004736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f3      	beq.n	8004726 <_fflush_r+0xa>
 800473e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004740:	07d0      	lsls	r0, r2, #31
 8004742:	d404      	bmi.n	800474e <_fflush_r+0x32>
 8004744:	0599      	lsls	r1, r3, #22
 8004746:	d402      	bmi.n	800474e <_fflush_r+0x32>
 8004748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800474a:	f7ff fbec 	bl	8003f26 <__retarget_lock_acquire_recursive>
 800474e:	4628      	mov	r0, r5
 8004750:	4621      	mov	r1, r4
 8004752:	f7ff ff5d 	bl	8004610 <__sflush_r>
 8004756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004758:	07da      	lsls	r2, r3, #31
 800475a:	4605      	mov	r5, r0
 800475c:	d4e4      	bmi.n	8004728 <_fflush_r+0xc>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	059b      	lsls	r3, r3, #22
 8004762:	d4e1      	bmi.n	8004728 <_fflush_r+0xc>
 8004764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004766:	f7ff fbdf 	bl	8003f28 <__retarget_lock_release_recursive>
 800476a:	e7dd      	b.n	8004728 <_fflush_r+0xc>

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f7ff bbda 	b.w	8003f26 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	20000280 	.word	0x20000280

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f7ff bbd5 	b.w	8003f28 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	20000280 	.word	0x20000280

08004784 <__sread>:
 8004784:	b510      	push	{r4, lr}
 8004786:	460c      	mov	r4, r1
 8004788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478c:	f000 f978 	bl	8004a80 <_read_r>
 8004790:	2800      	cmp	r0, #0
 8004792:	bfab      	itete	ge
 8004794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004796:	89a3      	ldrhlt	r3, [r4, #12]
 8004798:	181b      	addge	r3, r3, r0
 800479a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800479e:	bfac      	ite	ge
 80047a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047a2:	81a3      	strhlt	r3, [r4, #12]
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <__swrite>:
 80047a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047aa:	461f      	mov	r7, r3
 80047ac:	898b      	ldrh	r3, [r1, #12]
 80047ae:	05db      	lsls	r3, r3, #23
 80047b0:	4605      	mov	r5, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	4616      	mov	r6, r2
 80047b6:	d505      	bpl.n	80047c4 <__swrite+0x1e>
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	2302      	movs	r3, #2
 80047be:	2200      	movs	r2, #0
 80047c0:	f000 f94c 	bl	8004a5c <_lseek_r>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	4632      	mov	r2, r6
 80047d2:	463b      	mov	r3, r7
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	f000 b973 	b.w	8004ac4 <_write_r>

080047de <__sseek>:
 80047de:	b510      	push	{r4, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e6:	f000 f939 	bl	8004a5c <_lseek_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	bf15      	itete	ne
 80047f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80047f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047fa:	81a3      	strheq	r3, [r4, #12]
 80047fc:	bf18      	it	ne
 80047fe:	81a3      	strhne	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__sclose>:
 8004802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004806:	f000 b8f7 	b.w	80049f8 <_close_r>

0800480a <__swbuf_r>:
 800480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480c:	460e      	mov	r6, r1
 800480e:	4614      	mov	r4, r2
 8004810:	4605      	mov	r5, r0
 8004812:	b118      	cbz	r0, 800481c <__swbuf_r+0x12>
 8004814:	6a03      	ldr	r3, [r0, #32]
 8004816:	b90b      	cbnz	r3, 800481c <__swbuf_r+0x12>
 8004818:	f7ff faae 	bl	8003d78 <__sinit>
 800481c:	69a3      	ldr	r3, [r4, #24]
 800481e:	60a3      	str	r3, [r4, #8]
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	071a      	lsls	r2, r3, #28
 8004824:	d525      	bpl.n	8004872 <__swbuf_r+0x68>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	b31b      	cbz	r3, 8004872 <__swbuf_r+0x68>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	6922      	ldr	r2, [r4, #16]
 800482e:	1a98      	subs	r0, r3, r2
 8004830:	6963      	ldr	r3, [r4, #20]
 8004832:	b2f6      	uxtb	r6, r6
 8004834:	4283      	cmp	r3, r0
 8004836:	4637      	mov	r7, r6
 8004838:	dc04      	bgt.n	8004844 <__swbuf_r+0x3a>
 800483a:	4621      	mov	r1, r4
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff ff6d 	bl	800471c <_fflush_r>
 8004842:	b9e0      	cbnz	r0, 800487e <__swbuf_r+0x74>
 8004844:	68a3      	ldr	r3, [r4, #8]
 8004846:	3b01      	subs	r3, #1
 8004848:	60a3      	str	r3, [r4, #8]
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	6022      	str	r2, [r4, #0]
 8004850:	701e      	strb	r6, [r3, #0]
 8004852:	6962      	ldr	r2, [r4, #20]
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	429a      	cmp	r2, r3
 8004858:	d004      	beq.n	8004864 <__swbuf_r+0x5a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	07db      	lsls	r3, r3, #31
 800485e:	d506      	bpl.n	800486e <__swbuf_r+0x64>
 8004860:	2e0a      	cmp	r6, #10
 8004862:	d104      	bne.n	800486e <__swbuf_r+0x64>
 8004864:	4621      	mov	r1, r4
 8004866:	4628      	mov	r0, r5
 8004868:	f7ff ff58 	bl	800471c <_fflush_r>
 800486c:	b938      	cbnz	r0, 800487e <__swbuf_r+0x74>
 800486e:	4638      	mov	r0, r7
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f000 f805 	bl	8004884 <__swsetup_r>
 800487a:	2800      	cmp	r0, #0
 800487c:	d0d5      	beq.n	800482a <__swbuf_r+0x20>
 800487e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004882:	e7f4      	b.n	800486e <__swbuf_r+0x64>

08004884 <__swsetup_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <__swsetup_r+0xac>)
 8004888:	4605      	mov	r5, r0
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	460c      	mov	r4, r1
 800488e:	b118      	cbz	r0, 8004898 <__swsetup_r+0x14>
 8004890:	6a03      	ldr	r3, [r0, #32]
 8004892:	b90b      	cbnz	r3, 8004898 <__swsetup_r+0x14>
 8004894:	f7ff fa70 	bl	8003d78 <__sinit>
 8004898:	89a3      	ldrh	r3, [r4, #12]
 800489a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800489e:	0718      	lsls	r0, r3, #28
 80048a0:	d422      	bmi.n	80048e8 <__swsetup_r+0x64>
 80048a2:	06d9      	lsls	r1, r3, #27
 80048a4:	d407      	bmi.n	80048b6 <__swsetup_r+0x32>
 80048a6:	2309      	movs	r3, #9
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048b4:	e034      	b.n	8004920 <__swsetup_r+0x9c>
 80048b6:	0758      	lsls	r0, r3, #29
 80048b8:	d512      	bpl.n	80048e0 <__swsetup_r+0x5c>
 80048ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048bc:	b141      	cbz	r1, 80048d0 <__swsetup_r+0x4c>
 80048be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048c2:	4299      	cmp	r1, r3
 80048c4:	d002      	beq.n	80048cc <__swsetup_r+0x48>
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 f90e 	bl	8004ae8 <_free_r>
 80048cc:	2300      	movs	r3, #0
 80048ce:	6363      	str	r3, [r4, #52]	; 0x34
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	2300      	movs	r3, #0
 80048da:	6063      	str	r3, [r4, #4]
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f043 0308 	orr.w	r3, r3, #8
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	b94b      	cbnz	r3, 8004900 <__swsetup_r+0x7c>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f6:	d003      	beq.n	8004900 <__swsetup_r+0x7c>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f840 	bl	8004980 <__smakebuf_r>
 8004900:	89a0      	ldrh	r0, [r4, #12]
 8004902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004906:	f010 0301 	ands.w	r3, r0, #1
 800490a:	d00a      	beq.n	8004922 <__swsetup_r+0x9e>
 800490c:	2300      	movs	r3, #0
 800490e:	60a3      	str	r3, [r4, #8]
 8004910:	6963      	ldr	r3, [r4, #20]
 8004912:	425b      	negs	r3, r3
 8004914:	61a3      	str	r3, [r4, #24]
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	b943      	cbnz	r3, 800492c <__swsetup_r+0xa8>
 800491a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800491e:	d1c4      	bne.n	80048aa <__swsetup_r+0x26>
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	0781      	lsls	r1, r0, #30
 8004924:	bf58      	it	pl
 8004926:	6963      	ldrpl	r3, [r4, #20]
 8004928:	60a3      	str	r3, [r4, #8]
 800492a:	e7f4      	b.n	8004916 <__swsetup_r+0x92>
 800492c:	2000      	movs	r0, #0
 800492e:	e7f7      	b.n	8004920 <__swsetup_r+0x9c>
 8004930:	20000070 	.word	0x20000070

08004934 <__swhatbuf_r>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	460c      	mov	r4, r1
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	2900      	cmp	r1, #0
 800493e:	b096      	sub	sp, #88	; 0x58
 8004940:	4615      	mov	r5, r2
 8004942:	461e      	mov	r6, r3
 8004944:	da0d      	bge.n	8004962 <__swhatbuf_r+0x2e>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f013 0f80 	tst.w	r3, #128	; 0x80
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	bf0c      	ite	eq
 8004952:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004956:	2340      	movne	r3, #64	; 0x40
 8004958:	2000      	movs	r0, #0
 800495a:	6031      	str	r1, [r6, #0]
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	b016      	add	sp, #88	; 0x58
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	466a      	mov	r2, sp
 8004964:	f000 f858 	bl	8004a18 <_fstat_r>
 8004968:	2800      	cmp	r0, #0
 800496a:	dbec      	blt.n	8004946 <__swhatbuf_r+0x12>
 800496c:	9901      	ldr	r1, [sp, #4]
 800496e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004972:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004976:	4259      	negs	r1, r3
 8004978:	4159      	adcs	r1, r3
 800497a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497e:	e7eb      	b.n	8004958 <__swhatbuf_r+0x24>

08004980 <__smakebuf_r>:
 8004980:	898b      	ldrh	r3, [r1, #12]
 8004982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004984:	079d      	lsls	r5, r3, #30
 8004986:	4606      	mov	r6, r0
 8004988:	460c      	mov	r4, r1
 800498a:	d507      	bpl.n	800499c <__smakebuf_r+0x1c>
 800498c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	6123      	str	r3, [r4, #16]
 8004994:	2301      	movs	r3, #1
 8004996:	6163      	str	r3, [r4, #20]
 8004998:	b002      	add	sp, #8
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	ab01      	add	r3, sp, #4
 800499e:	466a      	mov	r2, sp
 80049a0:	f7ff ffc8 	bl	8004934 <__swhatbuf_r>
 80049a4:	9900      	ldr	r1, [sp, #0]
 80049a6:	4605      	mov	r5, r0
 80049a8:	4630      	mov	r0, r6
 80049aa:	f7ff fc21 	bl	80041f0 <_malloc_r>
 80049ae:	b948      	cbnz	r0, 80049c4 <__smakebuf_r+0x44>
 80049b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b4:	059a      	lsls	r2, r3, #22
 80049b6:	d4ef      	bmi.n	8004998 <__smakebuf_r+0x18>
 80049b8:	f023 0303 	bic.w	r3, r3, #3
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	e7e3      	b.n	800498c <__smakebuf_r+0xc>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	6020      	str	r0, [r4, #0]
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	6163      	str	r3, [r4, #20]
 80049d2:	9b01      	ldr	r3, [sp, #4]
 80049d4:	6120      	str	r0, [r4, #16]
 80049d6:	b15b      	cbz	r3, 80049f0 <__smakebuf_r+0x70>
 80049d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049dc:	4630      	mov	r0, r6
 80049de:	f000 f82d 	bl	8004a3c <_isatty_r>
 80049e2:	b128      	cbz	r0, 80049f0 <__smakebuf_r+0x70>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	431d      	orrs	r5, r3
 80049f4:	81a5      	strh	r5, [r4, #12]
 80049f6:	e7cf      	b.n	8004998 <__smakebuf_r+0x18>

080049f8 <_close_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_close_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc f96b 	bl	8000cde <_close>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_close_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_close_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	2000028c 	.word	0x2000028c

08004a18 <_fstat_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d07      	ldr	r5, [pc, #28]	; (8004a38 <_fstat_r+0x20>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	602b      	str	r3, [r5, #0]
 8004a26:	f7fc f966 	bl	8000cf6 <_fstat>
 8004a2a:	1c43      	adds	r3, r0, #1
 8004a2c:	d102      	bne.n	8004a34 <_fstat_r+0x1c>
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	b103      	cbz	r3, 8004a34 <_fstat_r+0x1c>
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	bf00      	nop
 8004a38:	2000028c 	.word	0x2000028c

08004a3c <_isatty_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d06      	ldr	r5, [pc, #24]	; (8004a58 <_isatty_r+0x1c>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	f7fc f965 	bl	8000d16 <_isatty>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_isatty_r+0x1a>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_isatty_r+0x1a>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	2000028c 	.word	0x2000028c

08004a5c <_lseek_r>:
 8004a5c:	b538      	push	{r3, r4, r5, lr}
 8004a5e:	4d07      	ldr	r5, [pc, #28]	; (8004a7c <_lseek_r+0x20>)
 8004a60:	4604      	mov	r4, r0
 8004a62:	4608      	mov	r0, r1
 8004a64:	4611      	mov	r1, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	602a      	str	r2, [r5, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f7fc f95e 	bl	8000d2c <_lseek>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_lseek_r+0x1e>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_lseek_r+0x1e>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	2000028c 	.word	0x2000028c

08004a80 <_read_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d07      	ldr	r5, [pc, #28]	; (8004aa0 <_read_r+0x20>)
 8004a84:	4604      	mov	r4, r0
 8004a86:	4608      	mov	r0, r1
 8004a88:	4611      	mov	r1, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	602a      	str	r2, [r5, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f7fc f8ec 	bl	8000c6c <_read>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_read_r+0x1e>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_read_r+0x1e>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	2000028c 	.word	0x2000028c

08004aa4 <_sbrk_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d06      	ldr	r5, [pc, #24]	; (8004ac0 <_sbrk_r+0x1c>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc f94a 	bl	8000d48 <_sbrk>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_sbrk_r+0x1a>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_sbrk_r+0x1a>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	2000028c 	.word	0x2000028c

08004ac4 <_write_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d07      	ldr	r5, [pc, #28]	; (8004ae4 <_write_r+0x20>)
 8004ac8:	4604      	mov	r4, r0
 8004aca:	4608      	mov	r0, r1
 8004acc:	4611      	mov	r1, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	602a      	str	r2, [r5, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7fc f8e7 	bl	8000ca6 <_write>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d102      	bne.n	8004ae2 <_write_r+0x1e>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	b103      	cbz	r3, 8004ae2 <_write_r+0x1e>
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
 8004ae4:	2000028c 	.word	0x2000028c

08004ae8 <_free_r>:
 8004ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aea:	2900      	cmp	r1, #0
 8004aec:	d044      	beq.n	8004b78 <_free_r+0x90>
 8004aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af2:	9001      	str	r0, [sp, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f1a1 0404 	sub.w	r4, r1, #4
 8004afa:	bfb8      	it	lt
 8004afc:	18e4      	addlt	r4, r4, r3
 8004afe:	f7ff fe35 	bl	800476c <__malloc_lock>
 8004b02:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <_free_r+0x94>)
 8004b04:	9801      	ldr	r0, [sp, #4]
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	b933      	cbnz	r3, 8004b18 <_free_r+0x30>
 8004b0a:	6063      	str	r3, [r4, #4]
 8004b0c:	6014      	str	r4, [r2, #0]
 8004b0e:	b003      	add	sp, #12
 8004b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b14:	f7ff be30 	b.w	8004778 <__malloc_unlock>
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	d908      	bls.n	8004b2e <_free_r+0x46>
 8004b1c:	6825      	ldr	r5, [r4, #0]
 8004b1e:	1961      	adds	r1, r4, r5
 8004b20:	428b      	cmp	r3, r1
 8004b22:	bf01      	itttt	eq
 8004b24:	6819      	ldreq	r1, [r3, #0]
 8004b26:	685b      	ldreq	r3, [r3, #4]
 8004b28:	1949      	addeq	r1, r1, r5
 8004b2a:	6021      	streq	r1, [r4, #0]
 8004b2c:	e7ed      	b.n	8004b0a <_free_r+0x22>
 8004b2e:	461a      	mov	r2, r3
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	b10b      	cbz	r3, 8004b38 <_free_r+0x50>
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d9fa      	bls.n	8004b2e <_free_r+0x46>
 8004b38:	6811      	ldr	r1, [r2, #0]
 8004b3a:	1855      	adds	r5, r2, r1
 8004b3c:	42a5      	cmp	r5, r4
 8004b3e:	d10b      	bne.n	8004b58 <_free_r+0x70>
 8004b40:	6824      	ldr	r4, [r4, #0]
 8004b42:	4421      	add	r1, r4
 8004b44:	1854      	adds	r4, r2, r1
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	6011      	str	r1, [r2, #0]
 8004b4a:	d1e0      	bne.n	8004b0e <_free_r+0x26>
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	6053      	str	r3, [r2, #4]
 8004b52:	440c      	add	r4, r1
 8004b54:	6014      	str	r4, [r2, #0]
 8004b56:	e7da      	b.n	8004b0e <_free_r+0x26>
 8004b58:	d902      	bls.n	8004b60 <_free_r+0x78>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	6003      	str	r3, [r0, #0]
 8004b5e:	e7d6      	b.n	8004b0e <_free_r+0x26>
 8004b60:	6825      	ldr	r5, [r4, #0]
 8004b62:	1961      	adds	r1, r4, r5
 8004b64:	428b      	cmp	r3, r1
 8004b66:	bf04      	itt	eq
 8004b68:	6819      	ldreq	r1, [r3, #0]
 8004b6a:	685b      	ldreq	r3, [r3, #4]
 8004b6c:	6063      	str	r3, [r4, #4]
 8004b6e:	bf04      	itt	eq
 8004b70:	1949      	addeq	r1, r1, r5
 8004b72:	6021      	streq	r1, [r4, #0]
 8004b74:	6054      	str	r4, [r2, #4]
 8004b76:	e7ca      	b.n	8004b0e <_free_r+0x26>
 8004b78:	b003      	add	sp, #12
 8004b7a:	bd30      	pop	{r4, r5, pc}
 8004b7c:	20000284 	.word	0x20000284

08004b80 <_init>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr

08004b8c <_fini>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr
