
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010510  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b60  080106e0  080106e0  000206e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015240  08015240  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08015240  08015240  00025240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015248  08015248  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015248  08015248  00025248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801524c  0801524c  0002524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08015250  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c28  20000220  08015470  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009e48  08015470  00039e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196be  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd5  00000000  00000000  00049951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0004d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001246  00000000  00000000  0004edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027642  00000000  00000000  0004fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f87d  00000000  00000000  00077638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a0e  00000000  00000000  00096eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a3c  00000000  00000000  0017c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00184300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080106c8 	.word	0x080106c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080106c8 	.word	0x080106c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0bc      	b.n	80011c2 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4951      	ldr	r1, [pc, #324]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	494c      	ldr	r1, [pc, #304]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4947      	ldr	r1, [pc, #284]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4942      	ldr	r1, [pc, #264]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	492c      	ldr	r1, [pc, #176]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	82fb      	strh	r3, [r7, #22]
 8001144:	e030      	b.n	80011a8 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001146:	8af9      	ldrh	r1, [r7, #22]
 8001148:	7c7a      	ldrb	r2, [r7, #17]
 800114a:	8a7b      	ldrh	r3, [r7, #18]
 800114c:	4c20      	ldr	r4, [pc, #128]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001154:	fb05 f000 	mul.w	r0, r5, r0
 8001158:	4401      	add	r1, r0
 800115a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800115e:	491d      	ldr	r1, [pc, #116]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	4622      	mov	r2, r4
 800116c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	7c3a      	ldrb	r2, [r7, #16]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	8278      	strh	r0, [r7, #18]
 800117c:	461d      	mov	r5, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001186:	fb04 f303 	mul.w	r3, r4, r3
 800118a:	440b      	add	r3, r1
 800118c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001192:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	442b      	add	r3, r5
 800119c:	4602      	mov	r2, r0
 800119e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3302      	adds	r3, #2
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d9ca      	bls.n	8001146 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f93c 	bl	8001430 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f938 	bl	8001430 <calc_downsample>
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	20002cd4 	.word	0x20002cd4
 80011d4:	20006154 	.word	0x20006154

080011d8 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	f200 8117 	bhi.w	800141c <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0df      	b.n	80013de <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <calc_zero_detector+0x250>)
 8001222:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001226:	fb03 f202 	mul.w	r2, r3, r2
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	f300 80ce 	bgt.w	80013d8 <calc_zero_detector+0x200>
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	497a      	ldr	r1, [pc, #488]	; (8001428 <calc_zero_detector+0x250>)
 8001240:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4293      	cmp	r3, r2
 8001256:	f2c0 80bf 	blt.w	80013d8 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <calc_zero_detector+0x250>)
 800125e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4293      	cmp	r3, r2
 8001274:	da3d      	bge.n	80012f2 <calc_zero_detector+0x11a>
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3b01      	subs	r3, #1
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <calc_zero_detector+0x250>)
 800127e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	db2e      	blt.n	80012f2 <calc_zero_detector+0x11a>
				detected++;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	3301      	adds	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd11      	ble.n	80012c4 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <calc_zero_detector+0x250>)
 80012a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ac:	fb00 f202 	mul.w	r2, r0, r2
 80012b0:	4413      	add	r3, r2
 80012b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	dd02      	ble.n	80012c4 <calc_zero_detector+0xec>
						detected++;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3301      	adds	r3, #1
 80012c2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012cc:	d211      	bcs.n	80012f2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3302      	adds	r3, #2
 80012d4:	4954      	ldr	r1, [pc, #336]	; (8001428 <calc_zero_detector+0x250>)
 80012d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012da:	fb00 f202 	mul.w	r2, r0, r2
 80012de:	4413      	add	r3, r2
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	da02      	bge.n	80012f2 <calc_zero_detector+0x11a>
						detected++;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	3301      	adds	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90f      	bls.n	8001318 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	494c      	ldr	r1, [pc, #304]	; (800142c <calc_zero_detector+0x254>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]
				detected = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 8001316:	e05f      	b.n	80013d8 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4942      	ldr	r1, [pc, #264]	; (8001428 <calc_zero_detector+0x250>)
 8001320:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4413      	add	r3, r2
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	dd4f      	ble.n	80013d8 <calc_zero_detector+0x200>
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	493a      	ldr	r1, [pc, #232]	; (8001428 <calc_zero_detector+0x250>)
 8001340:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	4413      	add	r3, r2
 800134a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc40      	bgt.n	80013d8 <calc_zero_detector+0x200>
				detected++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd11      	ble.n	8001386 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b02      	subs	r3, #2
 8001368:	492f      	ldr	r1, [pc, #188]	; (8001428 <calc_zero_detector+0x250>)
 800136a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136e:	fb00 f202 	mul.w	r2, r0, r2
 8001372:	4413      	add	r3, r2
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4293      	cmp	r3, r2
 800137e:	dc02      	bgt.n	8001386 <calc_zero_detector+0x1ae>
						detected++;
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3302      	adds	r3, #2
 800138a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800138e:	d211      	bcs.n	80013b4 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <calc_zero_detector+0x250>)
 8001398:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800139c:	fb00 f202 	mul.w	r2, r0, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd02      	ble.n	80013b4 <calc_zero_detector+0x1dc>
						detected++;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d90c      	bls.n	80013d4 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <calc_zero_detector+0x254>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3308      	adds	r3, #8
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013e4:	f4ff af1b 	bcc.w	800121e <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <calc_zero_detector+0x254>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	f06f 0208 	mvn.w	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <calc_zero_detector+0x254>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f06f 0208 	mvn.w	r2, #8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e000      	b.n	800141e <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800141c:	bf00      	nop
	}
}
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20007b94 	.word	0x20007b94
 800142c:	2000023c 	.word	0x2000023c

08001430 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800143a:	2300      	movs	r3, #0
 800143c:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80f1 	bhi.w	8001628 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e083      	b.n	8001554 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <calc_downsample+0x200>)
 8001450:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001454:	fb03 f202 	mul.w	r2, r3, r2
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001460:	461c      	mov	r4, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3b01      	subs	r3, #1
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <calc_downsample+0x200>)
 800146a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	4423      	add	r3, r4
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	3201      	adds	r2, #1
 8001480:	486b      	ldr	r0, [pc, #428]	; (8001630 <calc_downsample+0x200>)
 8001482:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001486:	fb04 f101 	mul.w	r1, r4, r1
 800148a:	440a      	add	r2, r1
 800148c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001490:	4413      	add	r3, r2
 8001492:	4a68      	ldr	r2, [pc, #416]	; (8001634 <calc_downsample+0x204>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	b28c      	uxth	r4, r1
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <calc_downsample+0x208>)
 80014a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014a8:	fb00 f202 	mul.w	r2, r0, r2
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <calc_downsample+0x20c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	82bb      	strh	r3, [r7, #20]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	8bfb      	ldrh	r3, [r7, #30]
 80014ca:	495b      	ldr	r1, [pc, #364]	; (8001638 <calc_downsample+0x208>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf28      	it	cs
 80014e4:	4613      	movcs	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <calc_downsample+0x20c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	494f      	ldr	r1, [pc, #316]	; (800163c <calc_downsample+0x20c>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	823b      	strh	r3, [r7, #16]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	4948      	ldr	r1, [pc, #288]	; (8001638 <calc_downsample+0x208>)
 8001516:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800151a:	fb00 f202 	mul.w	r2, r0, r2
 800151e:	4413      	add	r3, r2
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	8a3b      	ldrh	r3, [r7, #16]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf38      	it	cc
 800152e:	4613      	movcc	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	b298      	uxth	r0, r3
 8001536:	4941      	ldr	r1, [pc, #260]	; (800163c <calc_downsample+0x20c>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3302      	adds	r3, #2
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	3301      	adds	r3, #1
 800154c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3302      	adds	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f240 3245 	movw	r2, #837	; 0x345
 800155a:	4293      	cmp	r3, r2
 800155c:	f67f af76 	bls.w	800144c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <calc_downsample+0x200>)
 8001564:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <calc_downsample+0x200>)
 800157a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4403      	add	r3, r0
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	4618      	mov	r0, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	83f9      	strh	r1, [r7, #30]
 800159c:	461c      	mov	r4, r3
 800159e:	b280      	uxth	r0, r0
 80015a0:	4925      	ldr	r1, [pc, #148]	; (8001638 <calc_downsample+0x208>)
 80015a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4423      	add	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015b8:	d20a      	bcs.n	80015d0 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <calc_downsample+0x208>)
 80015c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015c4:	fb00 f202 	mul.w	r2, r0, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <calc_downsample+0x20c>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <calc_downsample+0x20c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <calc_downsample+0x20c>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	18c1      	adds	r1, r0, r3
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <calc_downsample+0x210>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdd9 	bl	80011d8 <calc_zero_detector>
 8001626:	e000      	b.n	800162a <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001628:	bf00      	nop
}
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	20006154 	.word	0x20006154
 8001634:	55555556 	.word	0x55555556
 8001638:	20007b94 	.word	0x20007b94
 800163c:	2000023c 	.word	0x2000023c
 8001640:	cccccccd 	.word	0xcccccccd

08001644 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e039      	b.n	80016c4 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	4a74      	ldr	r2, [pc, #464]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4972      	ldr	r1, [pc, #456]	; (8001828 <calc_filter_measurements+0x1e4>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	4a70      	ldr	r2, [pc, #448]	; (800182c <calc_filter_measurements+0x1e8>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	496e      	ldr	r1, [pc, #440]	; (800182c <calc_filter_measurements+0x1e8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <calc_filter_measurements+0x1ec>)
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4969      	ldr	r1, [pc, #420]	; (8001830 <calc_filter_measurements+0x1ec>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a62      	ldr	r2, [pc, #392]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4960      	ldr	r1, [pc, #384]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	ddc2      	ble.n	8001650 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <calc_filter_measurements+0x1f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a56      	ldr	r2, [pc, #344]	; (8001828 <calc_filter_measurements+0x1e4>)
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <calc_filter_measurements+0x1fc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <calc_filter_measurements+0x1e8>)
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <calc_filter_measurements+0x200>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a54      	ldr	r2, [pc, #336]	; (8001830 <calc_filter_measurements+0x1ec>)
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <calc_filter_measurements+0x204>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <calc_filter_measurements+0x208>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016f0:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <calc_filter_measurements+0x20c>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <calc_filter_measurements+0x210>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <calc_filter_measurements+0x214>)
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <calc_filter_measurements+0x218>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <calc_filter_measurements+0x21c>)
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e048      	b.n	80017b2 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001720:	4a41      	ldr	r2, [pc, #260]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <calc_filter_measurements+0x20c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <calc_filter_measurements+0x20c>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <calc_filter_measurements+0x1e8>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <calc_filter_measurements+0x210>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <calc_filter_measurements+0x210>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <calc_filter_measurements+0x1ec>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <calc_filter_measurements+0x214>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <calc_filter_measurements+0x214>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <calc_filter_measurements+0x218>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <calc_filter_measurements+0x218>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <calc_filter_measurements+0x1f4>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <calc_filter_measurements+0x21c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <calc_filter_measurements+0x21c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	ddb3      	ble.n	8001720 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <calc_filter_measurements+0x20c>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <calc_filter_measurements+0x20c>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <calc_filter_measurements+0x210>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <calc_filter_measurements+0x210>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <calc_filter_measurements+0x214>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <calc_filter_measurements+0x214>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <calc_filter_measurements+0x218>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <calc_filter_measurements+0x218>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <calc_filter_measurements+0x21c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <calc_filter_measurements+0x21c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000290 	.word	0x20000290
 800182c:	200002b8 	.word	0x200002b8
 8001830:	200002e0 	.word	0x200002e0
 8001834:	20000308 	.word	0x20000308
 8001838:	20000330 	.word	0x20000330
 800183c:	20000358 	.word	0x20000358
 8001840:	2000035c 	.word	0x2000035c
 8001844:	20000360 	.word	0x20000360
 8001848:	20000364 	.word	0x20000364
 800184c:	20000368 	.word	0x20000368
 8001850:	200088b4 	.word	0x200088b4
 8001854:	200088b8 	.word	0x200088b8
 8001858:	200088bc 	.word	0x200088bc
 800185c:	200088c0 	.word	0x200088c0
 8001860:	200088c4 	.word	0x200088c4

08001864 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	ed2d 8b02 	vpush	{d8}
 800186c:	b0a8      	sub	sp, #160	; 0xa0
 800186e:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t i1_zero;
	float w=0, va=0;
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80018b2:	4bb3      	ldr	r3, [pc, #716]	; (8001b80 <calc_measurements+0x31c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da05      	bge.n	80018c6 <calc_measurements+0x62>
		meter_readings_invalid = 1;
 80018ba:	4bb2      	ldr	r3, [pc, #712]	; (8001b84 <calc_measurements+0x320>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	e2b0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 80018c6:	4bae      	ldr	r3, [pc, #696]	; (8001b80 <calc_measurements+0x31c>)
 80018c8:	885b      	ldrh	r3, [r3, #2]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4bac      	ldr	r3, [pc, #688]	; (8001b80 <calc_measurements+0x31c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dc05      	bgt.n	80018e6 <calc_measurements+0x82>
		meter_readings_invalid = 1;
 80018da:	4baa      	ldr	r3, [pc, #680]	; (8001b84 <calc_measurements+0x320>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e4:	e2a0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	meter_readings_invalid = 0;		// readings are valid
 80018e6:	4aa7      	ldr	r2, [pc, #668]	; (8001b84 <calc_measurements+0x320>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	7013      	strb	r3, [r2, #0]

	v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 80018ec:	4ba4      	ldr	r3, [pc, #656]	; (8001b80 <calc_measurements+0x31c>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <calc_measurements+0x31c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	0fd3      	lsrs	r3, r2, #31
 80018fa:	4413      	add	r3, r2
 80018fc:	105b      	asrs	r3, r3, #1
 80018fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 8001902:	4b9f      	ldr	r3, [pc, #636]	; (8001b80 <calc_measurements+0x31c>)
 8001904:	8adb      	ldrh	r3, [r3, #22]
 8001906:	461a      	mov	r2, r3
 8001908:	4b9d      	ldr	r3, [pc, #628]	; (8001b80 <calc_measurements+0x31c>)
 800190a:	8a9b      	ldrh	r3, [r3, #20]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	0fd3      	lsrs	r3, r2, #31
 8001910:	4413      	add	r3, r2
 8001912:	105b      	asrs	r3, r3, #1
 8001914:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	// Calculate values using the positive half of the sine wave

	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <calc_measurements+0x31c>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <calc_measurements+0x31c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	f280 8091 	bge.w	8001a48 <calc_measurements+0x1e4>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001926:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <calc_measurements+0x31c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800192e:	e083      	b.n	8001a38 <calc_measurements+0x1d4>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001930:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <calc_measurements+0x324>)
 8001932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001936:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800193a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001946:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800194a:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	17da      	asrs	r2, r3, #31
 8001954:	461c      	mov	r4, r3
 8001956:	4615      	mov	r5, r2
 8001958:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800195c:	eb12 0a04 	adds.w	sl, r2, r4
 8001960:	eb43 0b05 	adc.w	fp, r3, r5
 8001964:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <calc_measurements+0x324>)
 800196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001972:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001976:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001982:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001986:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	4698      	mov	r8, r3
 8001992:	4691      	mov	r9, r2
 8001994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001998:	eb12 0108 	adds.w	r1, r2, r8
 800199c:	6239      	str	r1, [r7, #32]
 800199e:	eb43 0309 	adc.w	r3, r3, r9
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 80019ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 80019b6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fa88 	bl	8001ed0 <calc_adc_raw_to_V>
 80019c0:	eeb0 8a40 	vmov.f32	s16, s0
 80019c4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa9f 	bl	8001f0c <calc_adc_raw_to_A>
 80019ce:	eef0 7a40 	vmov.f32	s15, s0
 80019d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019d6:	ee17 0a90 	vmov	r0, s15
 80019da:	f7fe fdd5 	bl	8000588 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80019e6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0a      	blt.n	8001a04 <calc_measurements+0x1a0>
				i1_va_acc += va_instant;
 80019ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80019f6:	f7fe fc69 	bl	80002cc <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a02:	e014      	b.n	8001a2e <calc_measurements+0x1ca>
			} else {
				i1_w_acc += abs(va_instant);
 8001a04:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a08:	f7ff f8c6 	bl	8000b98 <__aeabi_d2iz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fda5 	bl	8000564 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a22:	f7fe fc53 	bl	80002cc <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a32:	3301      	adds	r3, #1
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <calc_measurements+0x31c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f6ff af75 	blt.w	8001930 <calc_measurements+0xcc>
 8001a46:	e134      	b.n	8001cb2 <calc_measurements+0x44e>
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <calc_measurements+0x31c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a50:	e08b      	b.n	8001b6a <calc_measurements+0x306>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001a52:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <calc_measurements+0x324>)
 8001a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001a68:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a6c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	17da      	asrs	r2, r3, #31
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
 8001a78:	657a      	str	r2, [r7, #84]	; 0x54
 8001a7a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a82:	4621      	mov	r1, r4
 8001a84:	1851      	adds	r1, r2, r1
 8001a86:	61b9      	str	r1, [r7, #24]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	414b      	adcs	r3, r1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a92:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001a96:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <calc_measurements+0x324>)
 8001a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001aa0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aa4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001ab0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001ab4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	17da      	asrs	r2, r3, #31
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ac2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001aca:	4621      	mov	r1, r4
 8001acc:	1851      	adds	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	414b      	adcs	r3, r1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ada:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001ade:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001ae8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f9ef 	bl	8001ed0 <calc_adc_raw_to_V>
 8001af2:	eeb0 8a40 	vmov.f32	s16, s0
 8001af6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fa06 	bl	8001f0c <calc_adc_raw_to_A>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001b18:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <calc_measurements+0x2d2>
				i1_va_acc += va_instant;
 8001b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b24:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b28:	f7fe fbd0 	bl	80002cc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b34:	e014      	b.n	8001b60 <calc_measurements+0x2fc>
			} else {
				i1_w_acc += abs(va_instant);
 8001b36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b3a:	f7ff f82d 	bl	8000b98 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bfb8      	it	lt
 8001b44:	425b      	neglt	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd0c 	bl	8000564 <__aeabi_i2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b54:	f7fe fbba 	bl	80002cc <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	3301      	adds	r3, #1
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b72:	f4ff af6e 	bcc.w	8001a52 <calc_measurements+0x1ee>
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	2314      	movs	r3, #20
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b7c:	e092      	b.n	8001ca4 <calc_measurements+0x440>
 8001b7e:	bf00      	nop
 8001b80:	2000023c 	.word	0x2000023c
 8001b84:	2000028c 	.word	0x2000028c
 8001b88:	20007b94 	.word	0x20007b94
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b8c:	4aaa      	ldr	r2, [pc, #680]	; (8001e38 <calc_measurements+0x5d4>)
 8001b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b96:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001ba2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001ba6:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8001bb4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001bb8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	1851      	adds	r1, r2, r1
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	414b      	adcs	r3, r1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bcc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bd0:	4a99      	ldr	r2, [pc, #612]	; (8001e38 <calc_measurements+0x5d4>)
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001bda:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bde:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001bea:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001bee:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	17da      	asrs	r2, r3, #31
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c00:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c04:	4621      	mov	r1, r4
 8001c06:	1851      	adds	r1, r2, r1
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	414b      	adcs	r3, r1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c14:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001c18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c22:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f952 	bl	8001ed0 <calc_adc_raw_to_V>
 8001c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8001c30:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f969 	bl	8001f0c <calc_adc_raw_to_A>
 8001c3a:	eef0 7a40 	vmov.f32	s15, s0
 8001c3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fc9f 	bl	8000588 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001c52:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0a      	blt.n	8001c70 <calc_measurements+0x40c>
				i1_va_acc += va_instant;
 8001c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c62:	f7fe fb33 	bl	80002cc <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c6e:	e014      	b.n	8001c9a <calc_measurements+0x436>
			} else {
				i1_w_acc += abs(va_instant);
 8001c70:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c74:	f7fe ff90 	bl	8000b98 <__aeabi_d2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bfb8      	it	lt
 8001c7e:	425b      	neglt	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc6f 	bl	8000564 <__aeabi_i2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c8e:	f7fe fb1d 	bl	80002cc <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <calc_measurements+0x5d8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f6ff af6d 	blt.w	8001b8c <calc_measurements+0x328>
			}
		}
	}

	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001cb2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cba:	637a      	str	r2, [r7, #52]	; 0x34
 8001cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cc4:	f7fe ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fc84 	bl	80005dc <__aeabi_l2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b10 	vmov	d0, r2, r3
 8001cdc:	f00e fb58 	bl	8010390 <sqrt>
 8001ce0:	ec53 2b10 	vmov	r2, r3, d0
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe ff56 	bl	8000b98 <__aeabi_d2iz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8ed 	bl	8001ed0 <calc_adc_raw_to_V>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <calc_measurements+0x5dc>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
	i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001d00:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d04:	2200      	movs	r2, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d0e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d12:	f7fe ffb9 	bl	8000c88 <__aeabi_ldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fc5d 	bl	80005dc <__aeabi_l2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f00e fb31 	bl	8010390 <sqrt>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff2f 	bl	8000b98 <__aeabi_d2iz>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f8e4 	bl	8001f0c <calc_adc_raw_to_A>
 8001d44:	eef0 7a40 	vmov.f32	s15, s0
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <calc_measurements+0x5e0>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d5a:	f7fe fefd 	bl	8000b58 <__aeabi_dcmpgt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <calc_measurements+0x526>
 8001d64:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbfb 	bl	8000564 <__aeabi_i2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d76:	f7fe fd89 	bl	800088c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff31 	bl	8000be8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d96:	f7fe fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <calc_measurements+0x562>
 8001da0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbdd 	bl	8000564 <__aeabi_i2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001db2:	f7fe fd6b 	bl	800088c <__aeabi_ddiv>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff13 	bl	8000be8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
	va1_measured = v_measured * i1_measured;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <calc_measurements+0x5dc>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <calc_measurements+0x5e0>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <calc_measurements+0x5e4>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001ddc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd09      	ble.n	8001dfe <calc_measurements+0x59a>
		w1_measured = va - w;
 8001dea:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001dee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <calc_measurements+0x5e8>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
 8001dfc:	e003      	b.n	8001e06 <calc_measurements+0x5a2>
	} else {
		w1_measured = va1_measured;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <calc_measurements+0x5e4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <calc_measurements+0x5e8>)
 8001e04:	6013      	str	r3, [r2, #0]
	}
	pf1_measured = w1_measured / va1_measured;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <calc_measurements+0x5e8>)
 8001e08:	edd3 6a00 	vldr	s13, [r3]
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <calc_measurements+0x5e4>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <calc_measurements+0x5ec>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <calc_measurements+0x5d8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	731a      	strb	r2, [r3, #12]

	// add measurements to filter
	calc_filter_measurements();
 8001e22:	f7ff fc0f 	bl	8001644 <calc_filter_measurements>

	return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	37a0      	adds	r7, #160	; 0xa0
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	ecbd 8b02 	vpop	{d8}
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	20007b94 	.word	0x20007b94
 8001e3c:	2000023c 	.word	0x2000023c
 8001e40:	20000358 	.word	0x20000358
 8001e44:	2000035c 	.word	0x2000035c
 8001e48:	20000360 	.word	0x20000360
 8001e4c:	20000364 	.word	0x20000364
 8001e50:	20000368 	.word	0x20000368

08001e54 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f816 	bl	8001e94 <calc_adc_raw_to_mv_float>
 8001e68:	ee10 3a10 	vmov	r3, s0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b10 	vmov	d0, r2, r3
 8001e7a:	f00e fb99 	bl	80105b0 <round>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe87 	bl	8000b98 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eaa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ec8 <calc_adc_raw_to_mv_float+0x34>
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ecc <calc_adc_raw_to_mv_float+0x38>
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001eba:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	457ff000 	.word	0x457ff000
 8001ecc:	454e4000 	.word	0x454e4000

08001ed0 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f04 <calc_adc_raw_to_V+0x34>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f08 <calc_adc_raw_to_V+0x38>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	457ff000 	.word	0x457ff000
 8001f08:	44480000 	.word	0x44480000

08001f0c <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f40 <calc_adc_raw_to_A+0x34>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f44 <calc_adc_raw_to_A+0x38>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	457ff000 	.word	0x457ff000
 8001f44:	43480000 	.word	0x43480000

08001f48 <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <cmd_error+0x18>)
 8001f54:	f002 fe26 	bl	8004ba4 <term_print>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	080106e0 	.word	0x080106e0

08001f64 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b74      	cmp	r3, #116	; 0x74
 8001f74:	d014      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f76:	2b74      	cmp	r3, #116	; 0x74
 8001f78:	dc17      	bgt.n	8001faa <cmd_t+0x46>
 8001f7a:	2b54      	cmp	r3, #84	; 0x54
 8001f7c:	d010      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f7e:	2b54      	cmp	r3, #84	; 0x54
 8001f80:	dc13      	bgt.n	8001faa <cmd_t+0x46>
 8001f82:	2b30      	cmp	r3, #48	; 0x30
 8001f84:	d002      	beq.n	8001f8c <cmd_t+0x28>
 8001f86:	2b31      	cmp	r3, #49	; 0x31
 8001f88:	d005      	beq.n	8001f96 <cmd_t+0x32>
 8001f8a:	e00e      	b.n	8001faa <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <cmd_t+0x58>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00b      	b.n	8001fae <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <cmd_t+0x58>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e006      	b.n	8001fae <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <cmd_t+0x58>)
 8001fa2:	2209      	movs	r2, #9
 8001fa4:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e001      	b.n	8001fae <cmd_t+0x4a>
	}
	return -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20002cbc 	.word	0x20002cbc

08001fc0 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <cmd_p+0x38>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00b f840 	bl	800d058 <siscanf>
 8001fd8:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <cmd_p+0x26>
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	e004      	b.n	8001ff0 <cmd_p+0x30>
	new_time_period = value;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <cmd_p+0x3c>)
 8001fec:	801a      	strh	r2, [r3, #0]
	return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	080106f8 	.word	0x080106f8
 8001ffc:	20002cbe 	.word	0x20002cbe

08002000 <cmd_led>:

int cmd_led(int cmd) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	dd05      	ble.n	800201a <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <cmd_led+0x30>)
 8002014:	f006 fb96 	bl	8008744 <HAL_GPIO_WritePin>
 8002018:	e004      	b.n	8002024 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2120      	movs	r1, #32
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_led+0x30>)
 8002020:	f006 fb90 	bl	8008744 <HAL_GPIO_WritePin>
	}
	return(0);
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020000 	.word	0x40020000

08002034 <cmd_help>:


int cmd_help(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002038:	4813      	ldr	r0, [pc, #76]	; (8002088 <cmd_help+0x54>)
 800203a:	f002 fdb3 	bl	8004ba4 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <cmd_help+0x58>)
 8002040:	f002 fdb0 	bl	8004ba4 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <cmd_help+0x5c>)
 8002046:	f002 fdad 	bl	8004ba4 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 800204a:	4812      	ldr	r0, [pc, #72]	; (8002094 <cmd_help+0x60>)
 800204c:	f002 fdaa 	bl	8004ba4 <term_print>
#endif
	term_print("E: Toggle ESP mode\r\n");
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <cmd_help+0x64>)
 8002052:	f002 fda7 	bl	8004ba4 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <cmd_help+0x68>)
 8002058:	f002 fda4 	bl	8004ba4 <term_print>
	term_print("M show measurements using all channels");
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <cmd_help+0x6c>)
 800205e:	f002 fda1 	bl	8004ba4 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <cmd_help+0x70>)
 8002064:	f002 fd9e 	bl	8004ba4 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <cmd_help+0x74>)
 800206a:	f002 fd9b 	bl	8004ba4 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <cmd_help+0x78>)
 8002070:	f002 fd98 	bl	8004ba4 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002074:	480e      	ldr	r0, [pc, #56]	; (80020b0 <cmd_help+0x7c>)
 8002076:	f002 fd95 	bl	8004ba4 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <cmd_help+0x80>)
 800207c:	f002 fd92 	bl	8004ba4 <term_print>
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	080106fc 	.word	0x080106fc
 800208c:	08010710 	.word	0x08010710
 8002090:	08010748 	.word	0x08010748
 8002094:	0801077c 	.word	0x0801077c
 8002098:	080107a8 	.word	0x080107a8
 800209c:	080107c0 	.word	0x080107c0
 80020a0:	080107dc 	.word	0x080107dc
 80020a4:	08010804 	.word	0x08010804
 80020a8:	0801084c 	.word	0x0801084c
 80020ac:	08010880 	.word	0x08010880
 80020b0:	0801089c 	.word	0x0801089c
 80020b4:	080108dc 	.word	0x080108dc

080020b8 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c4:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3b3f      	subs	r3, #63	; 0x3f
 80020cc:	2b35      	cmp	r3, #53	; 0x35
 80020ce:	f200 80d8 	bhi.w	8002282 <cmd_process+0x1ca>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <cmd_process+0x20>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	0800227d 	.word	0x0800227d
 80020dc:	08002283 	.word	0x08002283
 80020e0:	08002283 	.word	0x08002283
 80020e4:	08002283 	.word	0x08002283
 80020e8:	080021b1 	.word	0x080021b1
 80020ec:	080021c7 	.word	0x080021c7
 80020f0:	080021ef 	.word	0x080021ef
 80020f4:	08002283 	.word	0x08002283
 80020f8:	08002283 	.word	0x08002283
 80020fc:	0800227d 	.word	0x0800227d
 8002100:	08002283 	.word	0x08002283
 8002104:	08002283 	.word	0x08002283
 8002108:	08002283 	.word	0x08002283
 800210c:	0800220d 	.word	0x0800220d
 8002110:	0800221f 	.word	0x0800221f
 8002114:	08002283 	.word	0x08002283
 8002118:	08002283 	.word	0x08002283
 800211c:	08002247 	.word	0x08002247
 8002120:	08002283 	.word	0x08002283
 8002124:	08002251 	.word	0x08002251
 8002128:	0800225d 	.word	0x0800225d
 800212c:	08002273 	.word	0x08002273
 8002130:	08002283 	.word	0x08002283
 8002134:	08002283 	.word	0x08002283
 8002138:	08002283 	.word	0x08002283
 800213c:	08002283 	.word	0x08002283
 8002140:	08002283 	.word	0x08002283
 8002144:	08002283 	.word	0x08002283
 8002148:	08002283 	.word	0x08002283
 800214c:	08002283 	.word	0x08002283
 8002150:	08002283 	.word	0x08002283
 8002154:	08002283 	.word	0x08002283
 8002158:	08002283 	.word	0x08002283
 800215c:	08002283 	.word	0x08002283
 8002160:	08002283 	.word	0x08002283
 8002164:	08002283 	.word	0x08002283
 8002168:	080021b1 	.word	0x080021b1
 800216c:	080021c7 	.word	0x080021c7
 8002170:	080021ef 	.word	0x080021ef
 8002174:	08002283 	.word	0x08002283
 8002178:	08002283 	.word	0x08002283
 800217c:	0800227d 	.word	0x0800227d
 8002180:	08002283 	.word	0x08002283
 8002184:	08002283 	.word	0x08002283
 8002188:	08002283 	.word	0x08002283
 800218c:	0800220d 	.word	0x0800220d
 8002190:	0800221f 	.word	0x0800221f
 8002194:	08002283 	.word	0x08002283
 8002198:	08002283 	.word	0x08002283
 800219c:	08002247 	.word	0x08002247
 80021a0:	08002283 	.word	0x08002283
 80021a4:	08002251 	.word	0x08002251
 80021a8:	0800225d 	.word	0x0800225d
 80021ac:	08002273 	.word	0x08002273
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3b31      	subs	r3, #49	; 0x31
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fece 	bl	8004f5c <term_csv_buffer>
		retval = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
		break;
 80021c4:	e05d      	b.n	8002282 <cmd_process+0x1ca>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe f872 	bl	80002b0 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d908      	bls.n	80021e4 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b31      	subs	r3, #49	; 0x31
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 f86f 	bl	80032c0 <display_show_curve>
 80021e2:	e001      	b.n	80021e8 <cmd_process+0x130>
		} else {
			display_show_curves();
 80021e4:	f001 f838 	bl	8003258 <display_show_curves>
		}
		retval = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
		break;
 80021ec:	e049      	b.n	8002282 <cmd_process+0x1ca>
#endif
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <cmd_process+0x1d4>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <cmd_process+0x146>
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <cmd_process+0x1d4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 80021fc:	e041      	b.n	8002282 <cmd_process+0x1ca>
			esp_mode = 1;
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <cmd_process+0x1d4>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002204:	4822      	ldr	r0, [pc, #136]	; (8002290 <cmd_process+0x1d8>)
 8002206:	f002 fccd 	bl	8004ba4 <term_print>
		break;
 800220a:	e03a      	b.n	8002282 <cmd_process+0x1ca>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3b2f      	subs	r3, #47	; 0x2f
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fef3 	bl	8002000 <cmd_led>
 800221a:	60f8      	str	r0, [r7, #12]
		break;
 800221c:	e031      	b.n	8002282 <cmd_process+0x1ca>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f846 	bl	80002b0 <strlen>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d908      	bls.n	800223c <cmd_process+0x184>
		    term_show_channel(cmd_str[1] - 0x31);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3301      	adds	r3, #1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3b31      	subs	r3, #49	; 0x31
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fda7 	bl	8004d88 <term_show_channel>
 800223a:	e001      	b.n	8002240 <cmd_process+0x188>
		} else {
			term_show_measurements();
 800223c:	f002 fd30 	bl	8004ca0 <term_show_measurements>
		}
		retval = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
		break;
 8002244:	e01d      	b.n	8002282 <cmd_process+0x1ca>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff feba 	bl	8001fc0 <cmd_p>
 800224c:	60f8      	str	r0, [r7, #12]
		break;
 800224e:	e018      	b.n	8002282 <cmd_process+0x1ca>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <cmd_process+0x1dc>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
		break;
 800225a:	e012      	b.n	8002282 <cmd_process+0x1ca>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3301      	adds	r3, #1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	3b31      	subs	r3, #49	; 0x31
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fcc2 	bl	8004bf0 <term_show_buffer>
		retval = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
		break;
 8002270:	e007      	b.n	8002282 <cmd_process+0x1ca>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe76 	bl	8001f64 <cmd_t>
 8002278:	60f8      	str	r0, [r7, #12]
		break;
 800227a:	e002      	b.n	8002282 <cmd_process+0x1ca>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 800227c:	f7ff feda 	bl	8002034 <cmd_help>
 8002280:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20002cbd 	.word	0x20002cbd
 8002290:	08010910 	.word	0x08010910
 8002294:	20002cbb 	.word	0x20002cbb

08002298 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe f805 	bl	80002b0 <strlen>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <CMD_Handler+0x3c>)
 80022ac:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <CMD_Handler+0x3c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe46 	bl	8001f48 <cmd_error>
		return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c0:	e003      	b.n	80022ca <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fef8 	bl	80020b8 <cmd_process>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000036c 	.word	0x2000036c

080022d8 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80022dc:	2302      	movs	r3, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 ffa2 	bl	8005228 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80022e4:	2302      	movs	r3, #2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d002      	beq.n	80022f0 <display_init+0x18>
 80022ea:	2302      	movs	r3, #2
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d107      	bne.n	8002300 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <display_init+0x3c>)
 80022f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022f6:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <display_init+0x40>)
 80022fa:	22f0      	movs	r2, #240	; 0xf0
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <display_init+0x40>)
 8002302:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002306:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <display_init+0x3c>)
 800230a:	22f0      	movs	r2, #240	; 0xf0
 800230c:	801a      	strh	r2, [r3, #0]
	}
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20001fe2 	.word	0x20001fe2
 8002318:	20001fe4 	.word	0x20001fe4

0800231c <display_splash_screen>:

void display_splash_screen() {
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	b087      	sub	sp, #28
 8002320:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002322:	2000      	movs	r0, #0
 8002324:	f003 f9d6 	bl	80056d4 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002328:	2302      	movs	r3, #2
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <display_splash_screen+0xe4>)
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <display_splash_screen+0xe8>)
 8002334:	2120      	movs	r1, #32
 8002336:	4834      	ldr	r0, [pc, #208]	; (8002408 <display_splash_screen+0xec>)
 8002338:	f00a fe3a 	bl	800cfb0 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <display_splash_screen+0xf0>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	461c      	mov	r4, r3
 8002342:	4831      	ldr	r0, [pc, #196]	; (8002408 <display_splash_screen+0xec>)
 8002344:	f7fd ffb4 	bl	80002b0 <strlen>
 8002348:	4603      	mov	r3, r0
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <display_splash_screen+0xf4>)
 800234c:	8892      	ldrh	r2, [r2, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	1ae3      	subs	r3, r4, r3
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	b29c      	uxth	r4, r3
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <display_splash_screen+0xf8>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <display_splash_screen+0xf4>)
 8002360:	88db      	ldrh	r3, [r3, #6]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	0fda      	lsrs	r2, r3, #31
 8002366:	4413      	add	r3, r2
 8002368:	105b      	asrs	r3, r3, #1
 800236a:	b29d      	uxth	r5, r3
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <display_splash_screen+0xf4>)
 800236e:	2200      	movs	r2, #0
 8002370:	9204      	str	r2, [sp, #16]
 8002372:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002376:	9203      	str	r2, [sp, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	466e      	mov	r6, sp
 800237e:	1d1a      	adds	r2, r3, #4
 8002380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002384:	e886 0003 	stmia.w	r6, {r0, r1}
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <display_splash_screen+0xec>)
 800238c:	4629      	mov	r1, r5
 800238e:	4620      	mov	r0, r4
 8002390:	f004 f912 	bl	80065b8 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <display_splash_screen+0xf0>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	461c      	mov	r4, r3
 800239a:	481f      	ldr	r0, [pc, #124]	; (8002418 <display_splash_screen+0xfc>)
 800239c:	f7fd ff88 	bl	80002b0 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <display_splash_screen+0x100>)
 80023a4:	8892      	ldrh	r2, [r2, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	1ae3      	subs	r3, r4, r3
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	b29c      	uxth	r4, r3
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <display_splash_screen+0xf8>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <display_splash_screen+0xf4>)
 80023b8:	88db      	ldrh	r3, [r3, #6]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	0fda      	lsrs	r2, r3, #31
 80023be:	4413      	add	r3, r2
 80023c0:	105b      	asrs	r3, r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3319      	adds	r3, #25
 80023c6:	b29d      	uxth	r5, r3
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <display_splash_screen+0x100>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	9204      	str	r2, [sp, #16]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	9203      	str	r2, [sp, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	9202      	str	r2, [sp, #8]
 80023d8:	466e      	mov	r6, sp
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <display_splash_screen+0xfc>)
 80023e8:	4629      	mov	r1, r5
 80023ea:	4620      	mov	r0, r4
 80023ec:	f004 f8e4 	bl	80065b8 <Displ_WString>

	Displ_BackLight('1');
 80023f0:	2031      	movs	r0, #49	; 0x31
 80023f2:	f004 f921 	bl	8006638 <Displ_BackLight>
}
 80023f6:	bf00      	nop
 80023f8:	3704      	adds	r7, #4
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fe:	bf00      	nop
 8002400:	08014e60 	.word	0x08014e60
 8002404:	08010938 	.word	0x08010938
 8002408:	20001fc0 	.word	0x20001fc0
 800240c:	20001fe2 	.word	0x20001fe2
 8002410:	20000018 	.word	0x20000018
 8002414:	20001fe4 	.word	0x20001fe4
 8002418:	08014e64 	.word	0x08014e64
 800241c:	2000000c 	.word	0x2000000c

08002420 <display_screen1>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// main screen
void display_screen1() {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <display_screen1+0x220>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8122 	bne.w	8002674 <display_screen1+0x254>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <display_screen1+0x224>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8a7 	bl	8000588 <__aeabi_f2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	e9cd 2300 	strd	r2, r3, [sp]
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <display_screen1+0x228>)
 8002444:	2120      	movs	r1, #32
 8002446:	4881      	ldr	r0, [pc, #516]	; (800264c <display_screen1+0x22c>)
 8002448:	f00a fdb2 	bl	800cfb0 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800244c:	4b80      	ldr	r3, [pc, #512]	; (8002650 <display_screen1+0x230>)
 800244e:	2200      	movs	r2, #0
 8002450:	9204      	str	r2, [sp, #16]
 8002452:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002456:	9203      	str	r2, [sp, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	9202      	str	r2, [sp, #8]
 800245c:	466c      	mov	r4, sp
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002464:	e884 0003 	stmia.w	r4, {r0, r1}
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <display_screen1+0x22c>)
 800246c:	2107      	movs	r1, #7
 800246e:	2009      	movs	r0, #9
 8002470:	f004 f8a2 	bl	80065b8 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 8002474:	4b77      	ldr	r3, [pc, #476]	; (8002654 <display_screen1+0x234>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f885 	bl	8000588 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	e9cd 2300 	strd	r2, r3, [sp]
 8002486:	4a74      	ldr	r2, [pc, #464]	; (8002658 <display_screen1+0x238>)
 8002488:	2120      	movs	r1, #32
 800248a:	4870      	ldr	r0, [pc, #448]	; (800264c <display_screen1+0x22c>)
 800248c:	f00a fd90 	bl	800cfb0 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <display_screen1+0x230>)
 8002492:	2200      	movs	r2, #0
 8002494:	9204      	str	r2, [sp, #16]
 8002496:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800249a:	9203      	str	r2, [sp, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	466c      	mov	r4, sp
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <display_screen1+0x22c>)
 80024b0:	2107      	movs	r1, #7
 80024b2:	2078      	movs	r0, #120	; 0x78
 80024b4:	f004 f880 	bl	80065b8 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <display_screen1+0x23c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f863 	bl	8000588 <__aeabi_f2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	e9cd 2300 	strd	r2, r3, [sp]
 80024ca:	4a65      	ldr	r2, [pc, #404]	; (8002660 <display_screen1+0x240>)
 80024cc:	2120      	movs	r1, #32
 80024ce:	485f      	ldr	r0, [pc, #380]	; (800264c <display_screen1+0x22c>)
 80024d0:	f00a fd6e 	bl	800cfb0 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80024d4:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <display_screen1+0x230>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	9204      	str	r2, [sp, #16]
 80024da:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024de:	9203      	str	r2, [sp, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	9202      	str	r2, [sp, #8]
 80024e4:	466c      	mov	r4, sp
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <display_screen1+0x22c>)
 80024f4:	2130      	movs	r1, #48	; 0x30
 80024f6:	2009      	movs	r0, #9
 80024f8:	f004 f85e 	bl	80065b8 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <display_screen1+0x244>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f841 	bl	8000588 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9cd 2300 	strd	r2, r3, [sp]
 800250e:	4a54      	ldr	r2, [pc, #336]	; (8002660 <display_screen1+0x240>)
 8002510:	2120      	movs	r1, #32
 8002512:	484e      	ldr	r0, [pc, #312]	; (800264c <display_screen1+0x22c>)
 8002514:	f00a fd4c 	bl	800cfb0 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <display_screen1+0x230>)
 800251a:	2200      	movs	r2, #0
 800251c:	9204      	str	r2, [sp, #16]
 800251e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002522:	9203      	str	r2, [sp, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	466c      	mov	r4, sp
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002530:	e884 0003 	stmia.w	r4, {r0, r1}
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a45      	ldr	r2, [pc, #276]	; (800264c <display_screen1+0x22c>)
 8002538:	2159      	movs	r1, #89	; 0x59
 800253a:	2009      	movs	r0, #9
 800253c:	f004 f83c 	bl	80065b8 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf1) );
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <display_screen1+0x248>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eef0 7ae7 	vabs.f32	s15, s15
 800254a:	ee17 0a90 	vmov	r0, s15
 800254e:	f7fe f81b 	bl	8000588 <__aeabi_f2d>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	e9cd 2300 	strd	r2, r3, [sp]
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <display_screen1+0x24c>)
 800255c:	2120      	movs	r1, #32
 800255e:	483b      	ldr	r0, [pc, #236]	; (800264c <display_screen1+0x22c>)
 8002560:	f00a fd26 	bl	800cfb0 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 8002564:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <display_screen1+0x230>)
 8002566:	2200      	movs	r2, #0
 8002568:	9204      	str	r2, [sp, #16]
 800256a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256e:	9203      	str	r2, [sp, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	466c      	mov	r4, sp
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <display_screen1+0x22c>)
 8002584:	2182      	movs	r1, #130	; 0x82
 8002586:	2009      	movs	r0, #9
 8002588:	f004 f816 	bl	80065b8 <Displ_WString>
		// Angle
		if (metervalue_pf1 < 0) {
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <display_screen1+0x248>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d51b      	bpl.n	80025d4 <display_screen1+0x1b4>
			snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <display_screen1+0x248>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fff1 	bl	8000588 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	ec43 2b10 	vmov	d0, r2, r3
 80025ae:	f00d fc5b 	bl	800fe68 <acos>
 80025b2:	ec51 0b10 	vmov	r0, r1, d0
 80025b6:	a320      	add	r3, pc, #128	; (adr r3, 8002638 <display_screen1+0x218>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fe f83c 	bl	8000638 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	e9cd 2300 	strd	r2, r3, [sp]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <display_screen1+0x250>)
 80025ca:	2120      	movs	r1, #32
 80025cc:	481f      	ldr	r0, [pc, #124]	; (800264c <display_screen1+0x22c>)
 80025ce:	f00a fcef 	bl	800cfb0 <sniprintf>
 80025d2:	e01a      	b.n	800260a <display_screen1+0x1ea>
		} else {
			snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <display_screen1+0x248>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffd5 	bl	8000588 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b10 	vmov	d0, r2, r3
 80025e6:	f00d fc3f 	bl	800fe68 <acos>
 80025ea:	ec51 0b10 	vmov	r0, r1, d0
 80025ee:	a312      	add	r3, pc, #72	; (adr r3, 8002638 <display_screen1+0x218>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f820 	bl	8000638 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <display_screen1+0x238>)
 8002602:	2120      	movs	r1, #32
 8002604:	4811      	ldr	r0, [pc, #68]	; (800264c <display_screen1+0x22c>)
 8002606:	f00a fcd3 	bl	800cfb0 <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <display_screen1+0x230>)
 800260c:	2200      	movs	r2, #0
 800260e:	9204      	str	r2, [sp, #16]
 8002610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002614:	9203      	str	r2, [sp, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	9202      	str	r2, [sp, #8]
 800261a:	466c      	mov	r4, sp
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002622:	e884 0003 	stmia.w	r4, {r0, r1}
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a08      	ldr	r2, [pc, #32]	; (800264c <display_screen1+0x22c>)
 800262a:	2182      	movs	r1, #130	; 0x82
 800262c:	208a      	movs	r0, #138	; 0x8a
 800262e:	f003 ffc3 	bl	80065b8 <Displ_WString>
 8002632:	e097      	b.n	8002764 <display_screen1+0x344>
 8002634:	f3af 8000 	nop.w
 8002638:	1af05a77 	.word	0x1af05a77
 800263c:	404ca5dc 	.word	0x404ca5dc
 8002640:	2000028c 	.word	0x2000028c
 8002644:	200088b4 	.word	0x200088b4
 8002648:	08010954 	.word	0x08010954
 800264c:	20001fc0 	.word	0x20001fc0
 8002650:	20000024 	.word	0x20000024
 8002654:	200088b8 	.word	0x200088b8
 8002658:	0801095c 	.word	0x0801095c
 800265c:	200088bc 	.word	0x200088bc
 8002660:	08010964 	.word	0x08010964
 8002664:	200088c0 	.word	0x200088c0
 8002668:	200088c4 	.word	0x200088c4
 800266c:	0801096c 	.word	0x0801096c
 8002670:	08010974 	.word	0x08010974
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 8002674:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <display_screen1+0x350>)
 8002676:	2200      	movs	r2, #0
 8002678:	9204      	str	r2, [sp, #16]
 800267a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800267e:	9203      	str	r2, [sp, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	9202      	str	r2, [sp, #8]
 8002684:	466c      	mov	r4, sp
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <display_screen1+0x354>)
 8002694:	2107      	movs	r1, #7
 8002696:	2009      	movs	r0, #9
 8002698:	f003 ff8e 	bl	80065b8 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <display_screen1+0x350>)
 800269e:	2200      	movs	r2, #0
 80026a0:	9204      	str	r2, [sp, #16]
 80026a2:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80026a6:	9203      	str	r2, [sp, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	9202      	str	r2, [sp, #8]
 80026ac:	466c      	mov	r4, sp
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <display_screen1+0x358>)
 80026bc:	2107      	movs	r1, #7
 80026be:	2078      	movs	r0, #120	; 0x78
 80026c0:	f003 ff7a 	bl	80065b8 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <display_screen1+0x350>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	9204      	str	r2, [sp, #16]
 80026ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026ce:	9203      	str	r2, [sp, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	466c      	mov	r4, sp
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <display_screen1+0x35c>)
 80026e4:	2130      	movs	r1, #48	; 0x30
 80026e6:	2009      	movs	r0, #9
 80026e8:	f003 ff66 	bl	80065b8 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <display_screen1+0x350>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	9204      	str	r2, [sp, #16]
 80026f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026f6:	9203      	str	r2, [sp, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	9202      	str	r2, [sp, #8]
 80026fc:	466c      	mov	r4, sp
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002704:	e884 0003 	stmia.w	r4, {r0, r1}
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <display_screen1+0x35c>)
 800270c:	2159      	movs	r1, #89	; 0x59
 800270e:	2009      	movs	r0, #9
 8002710:	f003 ff52 	bl	80065b8 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <display_screen1+0x350>)
 8002716:	2200      	movs	r2, #0
 8002718:	9204      	str	r2, [sp, #16]
 800271a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271e:	9203      	str	r2, [sp, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	9202      	str	r2, [sp, #8]
 8002724:	466c      	mov	r4, sp
 8002726:	1d1a      	adds	r2, r3, #4
 8002728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <display_screen1+0x360>)
 8002734:	2182      	movs	r1, #130	; 0x82
 8002736:	2009      	movs	r0, #9
 8002738:	f003 ff3e 	bl	80065b8 <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <display_screen1+0x350>)
 800273e:	2200      	movs	r2, #0
 8002740:	9204      	str	r2, [sp, #16]
 8002742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002746:	9203      	str	r2, [sp, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	466c      	mov	r4, sp
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002754:	e884 0003 	stmia.w	r4, {r0, r1}
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <display_screen1+0x358>)
 800275c:	2182      	movs	r1, #130	; 0x82
 800275e:	208a      	movs	r0, #138	; 0x8a
 8002760:	f003 ff2a 	bl	80065b8 <Displ_WString>
		}
	display_show_curves();
 8002764:	f000 fd78 	bl	8003258 <display_show_curves>
}
 8002768:	bf00      	nop
 800276a:	3704      	adds	r7, #4
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	20000024 	.word	0x20000024
 8002774:	0801097c 	.word	0x0801097c
 8002778:	08010980 	.word	0x08010980
 800277c:	08010988 	.word	0x08010988
 8002780:	08010990 	.word	0x08010990

08002784 <display_screen2>:

void display_screen2() {
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af06      	add	r7, sp, #24
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <display_update_meter+0x7c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	79fa      	ldrb	r2, [r7, #7]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d023      	beq.n	80027f0 <display_update_meter+0x5c>
		switch(screen) {
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <display_update_meter+0x20>
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <display_update_meter+0x26>
 80027b2:	e01a      	b.n	80027ea <display_update_meter+0x56>
		case 1:
			display_meter_mask();
 80027b4:	f000 f83e 	bl	8002834 <display_meter_mask>
			break;
 80027b8:	e017      	b.n	80027ea <display_update_meter+0x56>
		case 2:
			Displ_CLS(BLACK);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f002 ff8a 	bl	80056d4 <Displ_CLS>
			Displ_WString(20, 20, "Screen 2" , Font24, 1, WHITE, BLACK);
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <display_update_meter+0x80>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	9204      	str	r2, [sp, #16]
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	9203      	str	r2, [sp, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	9202      	str	r2, [sp, #8]
 80027d0:	466c      	mov	r4, sp
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <display_update_meter+0x84>)
 80027e0:	2114      	movs	r1, #20
 80027e2:	2014      	movs	r0, #20
 80027e4:	f003 fee8 	bl	80065b8 <Displ_WString>
			break;
 80027e8:	bf00      	nop

		}
		last_screen = screen;
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <display_update_meter+0x7c>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <display_update_meter+0x68>
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <display_update_meter+0x6e>
		break;
	case 2:
		display_screen2();
		break;
	}
}
 80027fa:	e005      	b.n	8002808 <display_update_meter+0x74>
		display_screen1();
 80027fc:	f7ff fe10 	bl	8002420 <display_screen1>
		break;
 8002800:	e002      	b.n	8002808 <display_update_meter+0x74>
		display_screen2();
 8002802:	f7ff ffbf 	bl	8002784 <display_screen2>
		break;
 8002806:	bf00      	nop
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	20001fe0 	.word	0x20001fe0
 8002814:	20000018 	.word	0x20000018
 8002818:	08010998 	.word	0x08010998

0800281c <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
	last_screen = 0;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <display_update_mask+0x14>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20001fe0 	.word	0x20001fe0

08002834 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b08b      	sub	sp, #44	; 0x2c
 8002838:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 800283e:	2328      	movs	r3, #40	; 0x28
 8002840:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8002842:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002846:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8002848:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800284c:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 800284e:	2300      	movs	r3, #0
 8002850:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4618      	mov	r0, r3
 8002856:	f002 ff3d 	bl	80056d4 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800285a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800285e:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <display_meter_mask+0x2c0>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	2000      	movs	r0, #0
 8002874:	f003 f917 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002878:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800287c:	89fa      	ldrh	r2, [r7, #14]
 800287e:	89bb      	ldrh	r3, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	b21a      	sxth	r2, r3
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	2200      	movs	r2, #0
 800288e:	2000      	movs	r0, #0
 8002890:	f003 f909 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002894:	89fa      	ldrh	r2, [r7, #14]
 8002896:	89bb      	ldrh	r3, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	b219      	sxth	r1, r3
 800289e:	4b95      	ldr	r3, [pc, #596]	; (8002af4 <display_meter_mask+0x2c0>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b218      	sxth	r0, r3
 80028a8:	89fa      	ldrh	r2, [r7, #14]
 80028aa:	89bb      	ldrh	r3, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	4602      	mov	r2, r0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f003 f8f3 	bl	8005aa6 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 80028c0:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <display_meter_mask+0x2c0>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b218      	sxth	r0, r3
 80028ca:	89fa      	ldrh	r2, [r7, #14]
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b219      	sxth	r1, r3
 80028d4:	4b87      	ldr	r3, [pc, #540]	; (8002af4 <display_meter_mask+0x2c0>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b21a      	sxth	r2, r3
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f003 f8df 	bl	8005aa6 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	3309      	adds	r3, #9
 80028ec:	b29c      	uxth	r4, r3
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <display_meter_mask+0x2c4>)
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	9204      	str	r2, [sp, #16]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	9203      	str	r2, [sp, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	466d      	mov	r5, sp
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002904:	e885 0003 	stmia.w	r5, {r0, r1}
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2256      	movs	r2, #86	; 0x56
 800290c:	4621      	mov	r1, r4
 800290e:	204b      	movs	r0, #75	; 0x4b
 8002910:	f003 fbd4 	bl	80060bc <Displ_WChar>
	font_col = ORANGE;
 8002914:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002918:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <display_meter_mask+0x2c0>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	3b1e      	subs	r3, #30
 8002920:	b29c      	uxth	r4, r3
 8002922:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <display_meter_mask+0x2c4>)
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	9204      	str	r2, [sp, #16]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	9203      	str	r2, [sp, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	9202      	str	r2, [sp, #8]
 8002930:	466d      	mov	r5, sp
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2241      	movs	r2, #65	; 0x41
 8002940:	2109      	movs	r1, #9
 8002942:	4620      	mov	r0, r4
 8002944:	f003 fbba 	bl	80060bc <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002948:	89ba      	ldrh	r2, [r7, #12]
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	4413      	add	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002954:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800295e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002962:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <display_meter_mask+0x2c0>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	b21a      	sxth	r2, r3
 800296c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	4603      	mov	r3, r0
 8002976:	2000      	movs	r0, #0
 8002978:	f003 f895 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800297c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002980:	89fa      	ldrh	r2, [r7, #14]
 8002982:	89bb      	ldrh	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	b21a      	sxth	r2, r3
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	2000      	movs	r0, #0
 8002994:	f003 f887 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002998:	89fa      	ldrh	r2, [r7, #14]
 800299a:	89bb      	ldrh	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b219      	sxth	r1, r3
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <display_meter_mask+0x2c0>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b218      	sxth	r0, r3
 80029ac:	89fa      	ldrh	r2, [r7, #14]
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	4602      	mov	r2, r0
 80029be:	2000      	movs	r0, #0
 80029c0:	f003 f871 	bl	8005aa6 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <display_meter_mask+0x2c0>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b218      	sxth	r0, r3
 80029ce:	89fa      	ldrh	r2, [r7, #14]
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b219      	sxth	r1, r3
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <display_meter_mask+0x2c0>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80029e6:	897b      	ldrh	r3, [r7, #10]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4623      	mov	r3, r4
 80029ec:	f003 f85b 	bl	8005aa6 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <display_meter_mask+0x2c0>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3b50      	subs	r3, #80	; 0x50
 80029f6:	b29c      	uxth	r4, r3
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	3309      	adds	r3, #9
 80029fc:	b29d      	uxth	r5, r3
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <display_meter_mask+0x2c4>)
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	9204      	str	r2, [sp, #16]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	9203      	str	r2, [sp, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	9202      	str	r2, [sp, #8]
 8002a0c:	466e      	mov	r6, sp
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a14:	e886 0003 	stmia.w	r6, {r0, r1}
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a38      	ldr	r2, [pc, #224]	; (8002afc <display_meter_mask+0x2c8>)
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f003 fdca 	bl	80065b8 <Displ_WString>
	// W
	ypos += box_height+1;
 8002a24:	89ba      	ldrh	r2, [r7, #12]
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002a30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002a3a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a3e:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <display_meter_mask+0x2c0>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	2000      	movs	r0, #0
 8002a54:	f003 f827 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002a58:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a5c:	89fa      	ldrh	r2, [r7, #14]
 8002a5e:	89bb      	ldrh	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f003 f819 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a74:	89fa      	ldrh	r2, [r7, #14]
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b219      	sxth	r1, r3
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <display_meter_mask+0x2c0>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b218      	sxth	r0, r3
 8002a88:	89fa      	ldrh	r2, [r7, #14]
 8002a8a:	89bb      	ldrh	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	4602      	mov	r2, r0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f003 f803 	bl	8005aa6 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <display_meter_mask+0x2c0>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b218      	sxth	r0, r3
 8002aaa:	89fa      	ldrh	r2, [r7, #14]
 8002aac:	89bb      	ldrh	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b219      	sxth	r1, r3
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <display_meter_mask+0x2c0>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f002 ffed 	bl	8005aa6 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <display_meter_mask+0x2c0>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	3b50      	subs	r3, #80	; 0x50
 8002ad2:	b29c      	uxth	r4, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	3309      	adds	r3, #9
 8002ad8:	b29d      	uxth	r5, r3
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <display_meter_mask+0x2c4>)
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	9204      	str	r2, [sp, #16]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	9203      	str	r2, [sp, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	466e      	mov	r6, sp
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af0:	e006      	b.n	8002b00 <display_meter_mask+0x2cc>
 8002af2:	bf00      	nop
 8002af4:	20001fe2 	.word	0x20001fe2
 8002af8:	20000018 	.word	0x20000018
 8002afc:	080109a4 	.word	0x080109a4
 8002b00:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2257      	movs	r2, #87	; 0x57
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f003 fad6 	bl	80060bc <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002b10:	89ba      	ldrh	r2, [r7, #12]
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	4413      	add	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002b26:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <display_meter_mask+0x478>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f002 ffb1 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002b44:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b48:	89fa      	ldrh	r2, [r7, #14]
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f002 ffa3 	bl	8005aa6 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b60:	89fa      	ldrh	r2, [r7, #14]
 8002b62:	89bb      	ldrh	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b219      	sxth	r1, r3
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <display_meter_mask+0x478>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b218      	sxth	r0, r3
 8002b74:	89fa      	ldrh	r2, [r7, #14]
 8002b76:	89bb      	ldrh	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	4602      	mov	r2, r0
 8002b86:	2000      	movs	r0, #0
 8002b88:	f002 ff8d 	bl	8005aa6 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002b8c:	4b47      	ldr	r3, [pc, #284]	; (8002cac <display_meter_mask+0x478>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b218      	sxth	r0, r3
 8002b96:	89fa      	ldrh	r2, [r7, #14]
 8002b98:	89bb      	ldrh	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b219      	sxth	r1, r3
 8002ba0:	4b42      	ldr	r3, [pc, #264]	; (8002cac <display_meter_mask+0x478>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	f002 ff77 	bl	8005aa6 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	3309      	adds	r3, #9
 8002bbc:	b29c      	uxth	r4, r3
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <display_meter_mask+0x47c>)
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	9204      	str	r2, [sp, #16]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	9202      	str	r2, [sp, #8]
 8002bcc:	466d      	mov	r5, sp
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <display_meter_mask+0x480>)
 8002bdc:	4621      	mov	r1, r4
 8002bde:	205f      	movs	r0, #95	; 0x5f
 8002be0:	f003 fcea 	bl	80065b8 <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <display_meter_mask+0x478>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	3b16      	subs	r3, #22
 8002bea:	b29c      	uxth	r4, r3
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <display_meter_mask+0x484>)
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	9204      	str	r2, [sp, #16]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	9203      	str	r2, [sp, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2260      	movs	r2, #96	; 0x60
 8002c0a:	2182      	movs	r1, #130	; 0x82
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f003 fa55 	bl	80060bc <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002c12:	89ba      	ldrh	r2, [r7, #12]
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	4413      	add	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002c1e:	231f      	movs	r3, #31
 8002c20:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <display_meter_mask+0x488>)
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <display_meter_mask+0x48c>)
 8002c38:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <display_meter_mask+0x48c>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	4413      	add	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <display_meter_mask+0x490>)
 8002c50:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002c52:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <display_meter_mask+0x478>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b218      	sxth	r0, r3
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <display_meter_mask+0x488>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21c      	sxth	r4, r3
 8002c68:	2302      	movs	r3, #2
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	897a      	ldrh	r2, [r7, #10]
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4623      	mov	r3, r4
 8002c74:	4602      	mov	r2, r0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f003 f846 	bl	8005d08 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <display_meter_mask+0x494>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b218      	sxth	r0, r3
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <display_meter_mask+0x490>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b219      	sxth	r1, r3
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <display_meter_mask+0x494>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	33d2      	adds	r3, #210	; 0xd2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <display_meter_mask+0x490>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002c9c:	9400      	str	r4, [sp, #0]
 8002c9e:	f002 ff02 	bl	8005aa6 <Displ_Line>
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20001fe2 	.word	0x20001fe2
 8002cb0:	20000018 	.word	0x20000018
 8002cb4:	080109a8 	.word	0x080109a8
 8002cb8:	20000024 	.word	0x20000024
 8002cbc:	20001fe4 	.word	0x20001fe4
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	200006b8 	.word	0x200006b8
 8002cc8:	2000000a 	.word	0x2000000a

08002ccc <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cdc:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <display_align_curves+0xfc>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da20      	bge.n	8002d28 <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	e016      	b.n	8002d1a <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <display_align_curves+0x100>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002cf4:	4a36      	ldr	r2, [pc, #216]	; (8002dd0 <display_align_curves+0x104>)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002cfc:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <display_align_curves+0x100>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <display_align_curves+0x104>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d20:	d3e4      	bcc.n	8002cec <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002d22:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d26:	e049      	b.n	8002dbc <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <display_align_curves+0xfc>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	e019      	b.n	8002d64 <display_align_curves+0x98>
		dest_idx++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d36:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <display_align_curves+0x100>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <display_align_curves+0x104>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <display_align_curves+0x100>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d4e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <display_align_curves+0x104>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d6a:	d3e1      	bcc.n	8002d30 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002d6c:	2314      	movs	r3, #20
 8002d6e:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e019      	b.n	8002daa <display_align_curves+0xde>
		dest_idx++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <display_align_curves+0x100>)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <display_align_curves+0x104>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <display_align_curves+0x100>)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <display_align_curves+0x104>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <display_align_curves+0xfc>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dbe0      	blt.n	8002d76 <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	2000023c 	.word	0x2000023c
 8002dcc:	20007b94 	.word	0x20007b94
 8002dd0:	200006bc 	.word	0x200006bc

08002dd4 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af06      	add	r7, sp, #24
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
 8002dde:	460b      	mov	r3, r1
 8002de0:	717b      	strb	r3, [r7, #5]
 8002de2:	4613      	mov	r3, r2
 8002de4:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8002de6:	797b      	ldrb	r3, [r7, #5]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <draw_curve+0x20>
 8002dec:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <draw_curve+0x1b0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <draw_curve+0x1b4>)
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <draw_curve+0x1b8>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b02      	subs	r3, #2
 8002e02:	b299      	uxth	r1, r3
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <draw_curve+0x1bc>)
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	2302      	movs	r3, #2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <draw_curve+0x1b8>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2000      	movs	r0, #0
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f002 faa6 	bl	800536c <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <draw_curve+0x1b0>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8002e28:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <draw_curve+0x1c0>)
 8002e2a:	889a      	ldrh	r2, [r3, #4]
 8002e2c:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <draw_curve+0x1c4>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	b29c      	uxth	r4, r3
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <draw_curve+0x1c8>)
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <draw_curve+0x1c0>)
 8002e3a:	88db      	ldrh	r3, [r3, #6]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29d      	uxth	r5, r3
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <draw_curve+0x1c0>)
 8002e46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e4a:	9204      	str	r2, [sp, #16]
 8002e4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	9202      	str	r2, [sp, #8]
 8002e56:	466e      	mov	r6, sp
 8002e58:	1d1a      	adds	r2, r3, #4
 8002e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e5e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <draw_curve+0x1cc>)
 8002e66:	4629      	mov	r1, r5
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f003 fba5 	bl	80065b8 <Displ_WString>
		return;
 8002e6e:	e086      	b.n	8002f7e <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8002e70:	793b      	ldrb	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04c      	beq.n	8002f10 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <draw_curve+0x1c4>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b218      	sxth	r0, r3
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <draw_curve+0x1c8>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b219      	sxth	r1, r3
 8002e82:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <draw_curve+0x1c4>)
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <draw_curve+0x1d0>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <draw_curve+0x1c8>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e9a:	9400      	str	r4, [sp, #0]
 8002e9c:	f002 fe03 	bl	8005aa6 <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_len; x++) {
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e02d      	b.n	8002f02 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <draw_curve+0x1c4>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b218      	sxth	r0, r3
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <draw_curve+0x1c8>)
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	4939      	ldr	r1, [pc, #228]	; (8002fa8 <draw_curve+0x1d4>)
 8002ec2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b219      	sxth	r1, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <draw_curve+0x1c4>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b21c      	sxth	r4, r3
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <draw_curve+0x1c8>)
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	4d31      	ldr	r5, [pc, #196]	; (8002fa8 <draw_curve+0x1d4>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	f002 fdd5 	bl	8005aa6 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <draw_curve+0x1d0>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	dbcb      	blt.n	8002ea6 <draw_curve+0xd2>
 8002f0e:	e036      	b.n	8002f7e <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_len; x++) {
 8002f10:	2301      	movs	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	e02d      	b.n	8002f72 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <draw_curve+0x1c4>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b218      	sxth	r0, r3
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <draw_curve+0x1c8>)
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	491d      	ldr	r1, [pc, #116]	; (8002fa8 <draw_curve+0x1d4>)
 8002f32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b219      	sxth	r1, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <draw_curve+0x1c4>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b21c      	sxth	r4, r3
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <draw_curve+0x1c8>)
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	4d15      	ldr	r5, [pc, #84]	; (8002fa8 <draw_curve+0x1d4>)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	4622      	mov	r2, r4
 8002f68:	f002 fd9d 	bl	8005aa6 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <draw_curve+0x1d0>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	dbcb      	blt.n	8002f16 <draw_curve+0x142>
		}
	}
}
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f84:	2000028c 	.word	0x2000028c
 8002f88:	20001fe4 	.word	0x20001fe4
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	20001fe2 	.word	0x20001fe2
 8002f94:	20000018 	.word	0x20000018
 8002f98:	2000000a 	.word	0x2000000a
 8002f9c:	200006b8 	.word	0x200006b8
 8002fa0:	080109ac 	.word	0x080109ac
 8002fa4:	20001fbc 	.word	0x20001fbc
 8002fa8:	20000370 	.word	0x20000370

08002fac <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum) {
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b093      	sub	sp, #76	; 0x4c
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
	int value;
	int scale_factor = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
	int src_idx = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
	int zero_value = ADC_FS_RAW / 2;	// zero should be half way if DC-Bias is accurate
 8002fbe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
	//	zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
	}

	//term_print("zero_value = %d\r\n", zero_value);

	float fScale = (float)curve_y_size / (float)sample_buf_meta[bufnum].max;
 8002fc4:	4b9e      	ldr	r3, [pc, #632]	; (8003240 <make_curve+0x294>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	499c      	ldr	r1, [pc, #624]	; (8003244 <make_curve+0x298>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3302      	adds	r3, #2
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (fScale < 1) {
 8002ff2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d51f      	bpl.n	8003044 <make_curve+0x98>
		scale_factor = trunc(1/fScale)+1; // divisor
 8003004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003008:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800300c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003010:	ee16 0a90 	vmov	r0, s13
 8003014:	f7fd fab8 	bl	8000588 <__aeabi_f2d>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	ec43 2b10 	vmov	d0, r2, r3
 8003020:	f00d fb0e 	bl	8010640 <trunc>
 8003024:	ec51 0b10 	vmov	r0, r1, d0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <make_curve+0x29c>)
 800302e:	f7fd f94d 	bl	80002cc <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f7fd fdad 	bl	8000b98 <__aeabi_d2iz>
 800303e:	4603      	mov	r3, r0
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
 8003042:	e010      	b.n	8003066 <make_curve+0xba>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8003044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003046:	f7fd fa9f 	bl	8000588 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	ec43 2b10 	vmov	d0, r2, r3
 8003052:	f00d faf5 	bl	8010640 <trunc>
 8003056:	ec53 2b10 	vmov	r2, r3, d0
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fd9b 	bl	8000b98 <__aeabi_d2iz>
 8003062:	4603      	mov	r3, r0
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;		// half the data points to fit screen size
 8003066:	f7ff fe31 	bl	8002ccc <display_align_curves>
 800306a:	4603      	mov	r3, r0
 800306c:	0fda      	lsrs	r2, r3, #31
 800306e:	4413      	add	r3, r2
 8003070:	105b      	asrs	r3, r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b75      	ldr	r3, [pc, #468]	; (800324c <make_curve+0x2a0>)
 8003076:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <make_curve+0x294>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	f1c3 0301 	rsb	r3, r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800308a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800308e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d567      	bpl.n	8003168 <make_curve+0x1bc>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	496d      	ldr	r1, [pc, #436]	; (8003250 <make_curve+0x2a4>)
 800309c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80030a0:	fb03 f202 	mul.w	r2, r3, r2
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	4413      	add	r3, r2
 80030a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030ac:	461c      	mov	r4, r3
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	3301      	adds	r3, #1
 80030b4:	4966      	ldr	r1, [pc, #408]	; (8003250 <make_curve+0x2a4>)
 80030b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030ba:	fb00 f202 	mul.w	r2, r0, r2
 80030be:	4413      	add	r3, r2
 80030c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030c4:	4423      	add	r3, r4
 80030c6:	0fda      	lsrs	r2, r3, #31
 80030c8:	4413      	add	r3, r2
 80030ca:	105b      	asrs	r3, r3, #1
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 80030ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfb8      	it	lt
 80030e8:	4613      	movlt	r3, r2
 80030ea:	4a5a      	ldr	r2, [pc, #360]	; (8003254 <make_curve+0x2a8>)
 80030ec:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80030ee:	2301      	movs	r3, #1
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f2:	e032      	b.n	800315a <make_curve+0x1ae>
			src_idx+=2;
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	3302      	adds	r3, #2
 80030f8:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4954      	ldr	r1, [pc, #336]	; (8003250 <make_curve+0x2a4>)
 80030fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003102:	fb03 f202 	mul.w	r2, r3, r2
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	4413      	add	r3, r2
 800310a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800310e:	461c      	mov	r4, r3
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003114:	3301      	adds	r3, #1
 8003116:	494e      	ldr	r1, [pc, #312]	; (8003250 <make_curve+0x2a4>)
 8003118:	f44f 7048 	mov.w	r0, #800	; 0x320
 800311c:	fb00 f202 	mul.w	r2, r0, r2
 8003120:	4413      	add	r3, r2
 8003122:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003126:	4423      	add	r3, r4
 8003128:	0fda      	lsrs	r2, r3, #31
 800312a:	4413      	add	r3, r2
 800312c:	105b      	asrs	r3, r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	1ad2      	subs	r2, r2, r3
 8003136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003138:	fb92 f3f3 	sdiv	r3, r2, r3
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	bfb8      	it	lt
 800314a:	461a      	movlt	r2, r3
 800314c:	4941      	ldr	r1, [pc, #260]	; (8003254 <make_curve+0x2a8>)
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	3301      	adds	r3, #1
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <make_curve+0x2a0>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	4293      	cmp	r3, r2
 8003164:	dbc6      	blt.n	80030f4 <make_curve+0x148>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 8003166:	e066      	b.n	8003236 <make_curve+0x28a>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4939      	ldr	r1, [pc, #228]	; (8003250 <make_curve+0x2a4>)
 800316c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003170:	fb03 f202 	mul.w	r2, r3, r2
 8003174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003176:	4413      	add	r3, r2
 8003178:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800317c:	461c      	mov	r4, r3
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003182:	3301      	adds	r3, #1
 8003184:	4932      	ldr	r1, [pc, #200]	; (8003250 <make_curve+0x2a4>)
 8003186:	f44f 7048 	mov.w	r0, #800	; 0x320
 800318a:	fb00 f202 	mul.w	r2, r0, r2
 800318e:	4413      	add	r3, r2
 8003190:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003194:	4423      	add	r3, r4
 8003196:	0fda      	lsrs	r2, r3, #31
 8003198:	4413      	add	r3, r2
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800319e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bfb8      	it	lt
 80031b8:	4613      	movlt	r3, r2
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <make_curve+0x2a8>)
 80031bc:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80031be:	2301      	movs	r3, #1
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c2:	e032      	b.n	800322a <make_curve+0x27e>
			src_idx+=2;
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	3302      	adds	r3, #2
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4920      	ldr	r1, [pc, #128]	; (8003250 <make_curve+0x2a4>)
 80031ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031d2:	fb03 f202 	mul.w	r2, r3, r2
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	4413      	add	r3, r2
 80031da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031de:	461c      	mov	r4, r3
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	3301      	adds	r3, #1
 80031e6:	491a      	ldr	r1, [pc, #104]	; (8003250 <make_curve+0x2a4>)
 80031e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031ec:	fb00 f202 	mul.w	r2, r0, r2
 80031f0:	4413      	add	r3, r2
 80031f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031f6:	4423      	add	r3, r4
 80031f8:	0fda      	lsrs	r2, r3, #31
 80031fa:	4413      	add	r3, r2
 80031fc:	105b      	asrs	r3, r3, #1
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	429a      	cmp	r2, r3
 8003218:	bfb8      	it	lt
 800321a:	461a      	movlt	r2, r3
 800321c:	490d      	ldr	r1, [pc, #52]	; (8003254 <make_curve+0x2a8>)
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	3301      	adds	r3, #1
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <make_curve+0x2a0>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	4293      	cmp	r3, r2
 8003234:	dbc6      	blt.n	80031c4 <make_curve+0x218>
}
 8003236:	bf00      	nop
 8003238:	374c      	adds	r7, #76	; 0x4c
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	20000008 	.word	0x20000008
 8003244:	2000023c 	.word	0x2000023c
 8003248:	3ff00000 	.word	0x3ff00000
 800324c:	20001fbc 	.word	0x20001fbc
 8003250:	200006bc 	.word	0x200006bc
 8003254:	20000370 	.word	0x20000370

08003258 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	uint8_t dont_clear = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	e01e      	b.n	80032a6 <display_show_curves+0x4e>
		make_curve(i);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe9d 	bl	8002fac <make_curve>
		draw_curve(channel_colour[i], dont_clear, (sample_buf_meta[i].zero_cross_pos >= 0));
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <display_show_curves+0x60>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800327a:	4910      	ldr	r1, [pc, #64]	; (80032bc <display_show_curves+0x64>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3304      	adds	r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	43db      	mvns	r3, r3
 800328e:	0fdb      	lsrs	r3, r3, #31
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff fd9c 	bl	8002dd4 <draw_curve>
		dont_clear = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	dddd      	ble.n	8003268 <display_show_curves+0x10>
	}
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000
 80032bc:	2000023c 	.word	0x2000023c

080032c0 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d81a      	bhi.n	8003306 <display_show_curve+0x46>

	make_curve(bufnum);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe6a 	bl	8002fac <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <display_show_curve+0x50>)
 80032dc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80032e0:	79fa      	ldrb	r2, [r7, #7]
 80032e2:	490c      	ldr	r1, [pc, #48]	; (8003314 <display_show_curve+0x54>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	330c      	adds	r3, #12
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	2100      	movs	r1, #0
 8003300:	f7ff fd68 	bl	8002dd4 <draw_curve>
 8003304:	e000      	b.n	8003308 <display_show_curve+0x48>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8003306:	bf00      	nop

}
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000
 8003314:	2000023c 	.word	0x2000023c

08003318 <ee24_isConnected>:

uint8_t ee24_lock = 0;

//################################################################################################################
bool ee24_isConnected(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)!=HAL_OK)
 800331c:	2364      	movs	r3, #100	; 0x64
 800331e:	2202      	movs	r2, #2
 8003320:	210a      	movs	r1, #10
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <ee24_isConnected+0x20>)
 8003324:	f005 fd32 	bl	8008d8c <HAL_I2C_IsDeviceReady>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <ee24_isConnected+0x1a>
    return false;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <ee24_isConnected+0x1c>

  return true;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20002138 	.word	0x20002138

0800333c <ee24_read_byte>:
  }
}

//################################################################################################################
bool ee24_read_byte(uint8_t address, uint8_t *data)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af02      	add	r7, sp, #8
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if (ee24_lock == 1)
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <ee24_read_byte+0x50>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <ee24_read_byte+0x18>
    return false;
 8003350:	2300      	movs	r3, #0
 8003352:	e016      	b.n	8003382 <ee24_read_byte+0x46>
  ee24_lock = 1;
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <ee24_read_byte+0x50>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]

  if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1) != HAL_OK) {
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	b29a      	uxth	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	210a      	movs	r1, #10
 800336a:	4809      	ldr	r0, [pc, #36]	; (8003390 <ee24_read_byte+0x54>)
 800336c:	f005 fb7a 	bl	8008a64 <HAL_I2C_Mem_Read_DMA>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <ee24_read_byte+0x44>
	  ee24_lock = 0;
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <ee24_read_byte+0x50>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
	  return false;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <ee24_read_byte+0x46>
  }
  return true;
 8003380:	2301      	movs	r3, #1

}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20001fe6 	.word	0x20001fe6
 8003390:	20002138 	.word	0x20002138

08003394 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003398:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800339c:	490d      	ldr	r1, [pc, #52]	; (80033d4 <start_adcs+0x40>)
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <start_adcs+0x44>)
 80033a0:	f003 ff44 	bl	800722c <HAL_ADC_Start_DMA>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 80033aa:	480c      	ldr	r0, [pc, #48]	; (80033dc <start_adcs+0x48>)
 80033ac:	f001 fbfa 	bl	8004ba4 <term_print>
  	  Error_Handler();
 80033b0:	f000 ffb6 	bl	8004320 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80033b4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80033b8:	4909      	ldr	r1, [pc, #36]	; (80033e0 <start_adcs+0x4c>)
 80033ba:	480a      	ldr	r0, [pc, #40]	; (80033e4 <start_adcs+0x50>)
 80033bc:	f003 ff36 	bl	800722c <HAL_ADC_Start_DMA>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <start_adcs+0x54>)
 80033c8:	f001 fbec 	bl	8004ba4 <term_print>
 	  Error_Handler();
 80033cc:	f000 ffa8 	bl	8004320 <Error_Handler>
	}
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20002cd4 	.word	0x20002cd4
 80033d8:	20001fe8 	.word	0x20001fe8
 80033dc:	080109b8 	.word	0x080109b8
 80033e0:	20004714 	.word	0x20004714
 80033e4:	20002030 	.word	0x20002030
 80033e8:	080109d4 	.word	0x080109d4

080033ec <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	460a      	mov	r2, r1
 80033f6:	80fb      	strh	r3, [r7, #6]
 80033f8:	4613      	mov	r3, r2
 80033fa:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003402:	4293      	cmp	r3, r2
 8003404:	d803      	bhi.n	800340e <adjust_TIM2_period+0x22>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800340c:	d205      	bcs.n	800341a <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	4619      	mov	r1, r3
 8003412:	4808      	ldr	r0, [pc, #32]	; (8003434 <adjust_TIM2_period+0x48>)
 8003414:	f001 fbc6 	bl	8004ba4 <term_print>
		return;
 8003418:	e008      	b.n	800342c <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 800341a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	4619      	mov	r1, r3
 8003426:	4804      	ldr	r0, [pc, #16]	; (8003438 <adjust_TIM2_period+0x4c>)
 8003428:	f001 fbbc 	bl	8004ba4 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	080109f0 	.word	0x080109f0
 8003438:	08010a10 	.word	0x08010a10

0800343c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003442:	f003 fe19 	bl	8007078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003446:	f000 fad3 	bl	80039f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800344a:	f000 fd45 	bl	8003ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 800344e:	f000 fd05 	bl	8003e5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003452:	f000 fcaf 	bl	8003db4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003456:	f000 fc61 	bl	8003d1c <MX_TIM2_Init>
  MX_ADC1_Init();
 800345a:	f000 fb3b 	bl	8003ad4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800345e:	f000 fb99 	bl	8003b94 <MX_ADC2_Init>
  MX_SPI2_Init();
 8003462:	f000 fc25 	bl	8003cb0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8003466:	f000 fccf 	bl	8003e08 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800346a:	f000 fbf3 	bl	8003c54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 800346e:	f7fe ff33 	bl	80022d8 <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 8003472:	2201      	movs	r2, #1
 8003474:	4995      	ldr	r1, [pc, #596]	; (80036cc <main+0x290>)
 8003476:	4896      	ldr	r0, [pc, #600]	; (80036d0 <main+0x294>)
 8003478:	f008 f99b 	bl	800b7b2 <HAL_UART_Receive_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <main+0x4a>
    Error_Handler();
 8003482:	f000 ff4d 	bl	8004320 <Error_Handler>
  }

  // Start ESP UART receive via interrupt
  if (HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) != HAL_OK) {
 8003486:	2201      	movs	r2, #1
 8003488:	4992      	ldr	r1, [pc, #584]	; (80036d4 <main+0x298>)
 800348a:	4893      	ldr	r0, [pc, #588]	; (80036d8 <main+0x29c>)
 800348c:	f008 f991 	bl	800b7b2 <HAL_UART_Receive_IT>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <main+0x5e>
      Error_Handler();
 8003496:	f000 ff43 	bl	8004320 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800349a:	4890      	ldr	r0, [pc, #576]	; (80036dc <main+0x2a0>)
 800349c:	f007 fc6e 	bl	800ad7c <HAL_TIM_Base_Start_IT>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <main+0x6e>
     Error_Handler();
 80034a6:	f000 ff3b 	bl	8004320 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 80034aa:	f7ff ff73 	bl	8003394 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 80034ae:	f7fe ff35 	bl	800231c <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 80034b2:	f003 fe47 	bl	8007144 <HAL_GetTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80034bc:	4a88      	ldr	r2, [pc, #544]	; (80036e0 <main+0x2a4>)
 80034be:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 80034c0:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <main+0x2a8>)
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2302      	movs	r3, #2
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <main+0x2ac>)
 80034cc:	4987      	ldr	r1, [pc, #540]	; (80036ec <main+0x2b0>)
 80034ce:	4888      	ldr	r0, [pc, #544]	; (80036f0 <main+0x2b4>)
 80034d0:	f009 fda2 	bl	800d018 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80034d4:	4886      	ldr	r0, [pc, #536]	; (80036f0 <main+0x2b4>)
 80034d6:	f7fc feeb 	bl	80002b0 <strlen>
 80034da:	4603      	mov	r3, r0
 80034dc:	b29a      	uxth	r2, r3
 80034de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e2:	4983      	ldr	r1, [pc, #524]	; (80036f0 <main+0x2b4>)
 80034e4:	487a      	ldr	r0, [pc, #488]	; (80036d0 <main+0x294>)
 80034e6:	f008 f8d2 	bl	800b68e <HAL_UART_Transmit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <main+0xb8>
	  Error_Handler();
 80034f0:	f000 ff16 	bl	8004320 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 80034f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	4619      	mov	r1, r3
 80034fc:	487d      	ldr	r0, [pc, #500]	; (80036f4 <main+0x2b8>)
 80034fe:	f001 fb51 	bl	8004ba4 <term_print>

  // Enable ESP 01
  HAL_GPIO_WritePin (ESP01_EN_GPIO_Port, ESP01_EN_Pin, GPIO_PIN_SET);
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	487b      	ldr	r0, [pc, #492]	; (80036f8 <main+0x2bc>)
 800350a:	f005 f91b 	bl	8008744 <HAL_GPIO_WritePin>
  // Perform reset
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_RESET);
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	487a      	ldr	r0, [pc, #488]	; (80036fc <main+0x2c0>)
 8003514:	f005 f916 	bl	8008744 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	f003 fe1f 	bl	800715c <HAL_Delay>
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_SET);
 800351e:	2201      	movs	r2, #1
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	4876      	ldr	r0, [pc, #472]	; (80036fc <main+0x2c0>)
 8003524:	f005 f90e 	bl	8008744 <HAL_GPIO_WritePin>
  }*/


  // eeprom example code

  if (!ee24_isConnected()) {
 8003528:	f7ff fef6 	bl	8003318 <ee24_isConnected>
 800352c:	4603      	mov	r3, r0
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <main+0x104>
	  term_print("Error: EEPROM not found\r\n");
 8003538:	4871      	ldr	r0, [pc, #452]	; (8003700 <main+0x2c4>)
 800353a:	f001 fb33 	bl	8004ba4 <term_print>
 800353e:	e003      	b.n	8003548 <main+0x10c>
  } else {
	  ee24_read_byte(0x00, (uint8_t *) eeprom_buf);
 8003540:	4970      	ldr	r1, [pc, #448]	; (8003704 <main+0x2c8>)
 8003542:	2000      	movs	r0, #0
 8003544:	f7ff fefa 	bl	800333c <ee24_read_byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8003548:	f003 fdfc 	bl	8007144 <HAL_GetTick>
 800354c:	4603      	mov	r3, r0
 800354e:	3364      	adds	r3, #100	; 0x64
 8003550:	4a6d      	ldr	r2, [pc, #436]	; (8003708 <main+0x2cc>)
 8003552:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 8003554:	f003 fdf6 	bl	8007144 <HAL_GetTick>
 8003558:	4603      	mov	r3, r0
 800355a:	33c8      	adds	r3, #200	; 0xc8
 800355c:	4a6b      	ldr	r2, [pc, #428]	; (800370c <main+0x2d0>)
 800355e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 8003560:	f003 fdf0 	bl	8007144 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
 8003566:	4a6a      	ldr	r2, [pc, #424]	; (8003710 <main+0x2d4>)
 8003568:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 800356a:	4b69      	ldr	r3, [pc, #420]	; (8003710 <main+0x2d4>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b69      	ldr	r3, [pc, #420]	; (8003714 <main+0x2d8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d21b      	bcs.n	80035ae <main+0x172>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8003576:	4b66      	ldr	r3, [pc, #408]	; (8003710 <main+0x2d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3364      	adds	r3, #100	; 0x64
 800357c:	4a62      	ldr	r2, [pc, #392]	; (8003708 <main+0x2cc>)
 800357e:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 8003580:	4b65      	ldr	r3, [pc, #404]	; (8003718 <main+0x2dc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <main+0x15c>
 8003588:	4b61      	ldr	r3, [pc, #388]	; (8003710 <main+0x2d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003590:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003594:	4a60      	ldr	r2, [pc, #384]	; (8003718 <main+0x2dc>)
 8003596:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8003598:	4b5d      	ldr	r3, [pc, #372]	; (8003710 <main+0x2d4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80035a0:	4a5e      	ldr	r2, [pc, #376]	; (800371c <main+0x2e0>)
 80035a2:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <main+0x2d4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	33c8      	adds	r3, #200	; 0xc8
 80035aa:	4a58      	ldr	r2, [pc, #352]	; (800370c <main+0x2d0>)
 80035ac:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80035ae:	4b58      	ldr	r3, [pc, #352]	; (8003710 <main+0x2d4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a58      	ldr	r2, [pc, #352]	; (8003714 <main+0x2d8>)
 80035b4:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80035b6:	4b56      	ldr	r3, [pc, #344]	; (8003710 <main+0x2d4>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <main+0x2d0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d316      	bcc.n	80035f0 <main+0x1b4>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80035c2:	4b52      	ldr	r3, [pc, #328]	; (800370c <main+0x2d0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	33c8      	adds	r3, #200	; 0xc8
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <main+0x2d0>)
 80035ca:	6013      	str	r3, [r2, #0]
		calc_measurements();
 80035cc:	f7fe f94a 	bl	8001864 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	4849      	ldr	r0, [pc, #292]	; (80036f8 <main+0x2bc>)
 80035d4:	f005 f89e 	bl	8008714 <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <main+0x1b4>
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <main+0x2e4>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <main+0x1b4>
			display_update_meter(display_screen);
 80035e6:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <main+0x2e4>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f8d2 	bl	8002794 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 80035f0:	4b47      	ldr	r3, [pc, #284]	; (8003710 <main+0x2d4>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b44      	ldr	r3, [pc, #272]	; (8003708 <main+0x2cc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f0c0 814b 	bcc.w	8003894 <main+0x458>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <main+0x2d4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3364      	adds	r3, #100	; 0x64
 8003604:	4a40      	ldr	r2, [pc, #256]	; (8003708 <main+0x2cc>)
 8003606:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <main+0x2a4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <main+0x1fc>
			if (now_ticks >= display_splash_ticks) {
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <main+0x2d4>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <main+0x2a4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d30d      	bcc.n	8003638 <main+0x1fc>
				display_splash_ticks = 0;
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <main+0x2a4>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8003622:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <main+0x2e4>)
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <main+0x2d4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003630:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003634:	4a38      	ldr	r2, [pc, #224]	; (8003718 <main+0x2dc>)
 8003636:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <main+0x2e8>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d032      	beq.n	80036a8 <main+0x26c>
			if (esp_mode) {
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <main+0x2ec>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <main+0x25a>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <main+0x2f0>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b7e      	cmp	r3, #126	; 0x7e
 8003652:	d106      	bne.n	8003662 <main+0x226>
					esp_mode = 0;
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <main+0x2ec>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 800365a:	4835      	ldr	r0, [pc, #212]	; (8003730 <main+0x2f4>)
 800365c:	f001 faa2 	bl	8004ba4 <term_print>
 8003660:	e01c      	b.n	800369c <main+0x260>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 8003662:	4a32      	ldr	r2, [pc, #200]	; (800372c <main+0x2f0>)
 8003664:	4933      	ldr	r1, [pc, #204]	; (8003734 <main+0x2f8>)
 8003666:	4822      	ldr	r0, [pc, #136]	; (80036f0 <main+0x2b4>)
 8003668:	f009 fcd6 	bl	800d018 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 800366c:	4820      	ldr	r0, [pc, #128]	; (80036f0 <main+0x2b4>)
 800366e:	f7fc fe1f 	bl	80002b0 <strlen>
 8003672:	4603      	mov	r3, r0
 8003674:	b29a      	uxth	r2, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	491d      	ldr	r1, [pc, #116]	; (80036f0 <main+0x2b4>)
 800367c:	4816      	ldr	r0, [pc, #88]	; (80036d8 <main+0x29c>)
 800367e:	f008 f806 	bl	800b68e <HAL_UART_Transmit>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <main+0x250>
						Error_Handler();
 8003688:	f000 fe4a 	bl	8004320 <Error_Handler>
					}
					term_print("%s", msg_buf);
 800368c:	4918      	ldr	r1, [pc, #96]	; (80036f0 <main+0x2b4>)
 800368e:	482a      	ldr	r0, [pc, #168]	; (8003738 <main+0x2fc>)
 8003690:	f001 fa88 	bl	8004ba4 <term_print>
 8003694:	e002      	b.n	800369c <main+0x260>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 8003696:	4825      	ldr	r0, [pc, #148]	; (800372c <main+0x2f0>)
 8003698:	f7fe fdfe 	bl	8002298 <CMD_Handler>
			}
			cli_rx_count = 0;
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <main+0x300>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <main+0x2e8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
		}

		// Handle ESP UART communication
		if (esp_rx_count > 0) {
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <main+0x304>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d06f      	beq.n	8003792 <main+0x356>
			if (esp_rx_count_last != esp_rx_count) { // has the rx count changed since last iteration?
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <main+0x308>)
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <main+0x304>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	429a      	cmp	r2, r3
 80036be:	d043      	beq.n	8003748 <main+0x30c>
				esp_rx_count_last = esp_rx_count;		// update last count
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <main+0x304>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <main+0x308>)
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e062      	b.n	8003792 <main+0x356>
 80036cc:	20002816 	.word	0x20002816
 80036d0:	2000228c 	.word	0x2000228c
 80036d4:	200028a0 	.word	0x200028a0
 80036d8:	200022d0 	.word	0x200022d0
 80036dc:	20002244 	.word	0x20002244
 80036e0:	200088cc 	.word	0x200088cc
 80036e4:	08014e64 	.word	0x08014e64
 80036e8:	08014e60 	.word	0x08014e60
 80036ec:	08010a20 	.word	0x08010a20
 80036f0:	20002314 	.word	0x20002314
 80036f4:	08010a34 	.word	0x08010a34
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	08010a44 	.word	0x08010a44
 8003704:	20002ca8 	.word	0x20002ca8
 8003708:	200088e0 	.word	0x200088e0
 800370c:	200088dc 	.word	0x200088dc
 8003710:	200088d4 	.word	0x200088d4
 8003714:	200088d8 	.word	0x200088d8
 8003718:	200088c8 	.word	0x200088c8
 800371c:	200088d0 	.word	0x200088d0
 8003720:	20002cc0 	.word	0x20002cc0
 8003724:	20002898 	.word	0x20002898
 8003728:	20002cbd 	.word	0x20002cbd
 800372c:	20002818 	.word	0x20002818
 8003730:	08010a60 	.word	0x08010a60
 8003734:	08010a7c 	.word	0x08010a7c
 8003738:	08010a84 	.word	0x08010a84
 800373c:	20002814 	.word	0x20002814
 8003740:	2000289a 	.word	0x2000289a
 8003744:	2000289c 	.word	0x2000289c

			} else {	// count hasn't changed since last iteration receive must be complete
				sprintf(prt_buf, "\r\nrx:%d error:%d\r\n", esp_rx_count, esp_rx_error_count);
 8003748:	4b8f      	ldr	r3, [pc, #572]	; (8003988 <main+0x54c>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <main+0x550>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	498e      	ldr	r1, [pc, #568]	; (8003990 <main+0x554>)
 8003758:	488e      	ldr	r0, [pc, #568]	; (8003994 <main+0x558>)
 800375a:	f009 fc5d 	bl	800d018 <siprintf>
				term_print(prt_buf);
 800375e:	488d      	ldr	r0, [pc, #564]	; (8003994 <main+0x558>)
 8003760:	f001 fa20 	bl	8004ba4 <term_print>
				snprintf(prt_buf, esp_rx_count, "%s", esp_rx_buff );
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <main+0x54c>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	4619      	mov	r1, r3
 800376c:	4b8a      	ldr	r3, [pc, #552]	; (8003998 <main+0x55c>)
 800376e:	4a8b      	ldr	r2, [pc, #556]	; (800399c <main+0x560>)
 8003770:	4888      	ldr	r0, [pc, #544]	; (8003994 <main+0x558>)
 8003772:	f009 fc1d 	bl	800cfb0 <sniprintf>
				term_print(prt_buf);
 8003776:	4887      	ldr	r0, [pc, #540]	; (8003994 <main+0x558>)
 8003778:	f001 fa14 	bl	8004ba4 <term_print>
				esp_rx_count = 0;
 800377c:	4b82      	ldr	r3, [pc, #520]	; (8003988 <main+0x54c>)
 800377e:	2200      	movs	r2, #0
 8003780:	801a      	strh	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
 8003782:	4b81      	ldr	r3, [pc, #516]	; (8003988 <main+0x54c>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	b29a      	uxth	r2, r3
 8003788:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <main+0x564>)
 800378a:	801a      	strh	r2, [r3, #0]
				esp_rx_reply_ready = 0;
 800378c:	4b85      	ldr	r3, [pc, #532]	; (80039a4 <main+0x568>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
			//term_print("\r\n");
			esp_rx_count = 0;
		}
		*/

		if (adc_restart) {
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <main+0x56c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <main+0x368>
		  adc_restart = 0;
 800379a:	4b83      	ldr	r3, [pc, #524]	; (80039a8 <main+0x56c>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 80037a0:	f7ff fdf8 	bl	8003394 <start_adcs>
		}

		if (new_time_period) {
 80037a4:	4b81      	ldr	r3, [pc, #516]	; (80039ac <main+0x570>)
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <main+0x382>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 80037ac:	4b7f      	ldr	r3, [pc, #508]	; (80039ac <main+0x570>)
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fe1a 	bl	80033ec <adjust_TIM2_period>
		  new_time_period = 0;
 80037b8:	4b7c      	ldr	r3, [pc, #496]	; (80039ac <main+0x570>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 80037be:	4b7c      	ldr	r3, [pc, #496]	; (80039b0 <main+0x574>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <main+0x3ac>
			display_screen++;
 80037c8:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <main+0x578>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <main+0x578>)
 80037d2:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 80037d4:	4b77      	ldr	r3, [pc, #476]	; (80039b4 <main+0x578>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d902      	bls.n	80037e2 <main+0x3a6>
				display_screen = 1;
 80037dc:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <main+0x578>)
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <main+0x574>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 80037e8:	4b73      	ldr	r3, [pc, #460]	; (80039b8 <main+0x57c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <main+0x3cc>
 80037f0:	4b72      	ldr	r3, [pc, #456]	; (80039bc <main+0x580>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b70      	ldr	r3, [pc, #448]	; (80039b8 <main+0x57c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d305      	bcc.n	8003808 <main+0x3cc>
			Displ_BackLight('0');
 80037fc:	2030      	movs	r0, #48	; 0x30
 80037fe:	f002 ff1b 	bl	8006638 <Displ_BackLight>
	  		display_off_ticks = 0;
 8003802:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <main+0x57c>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 8003808:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <main+0x584>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02b      	beq.n	8003868 <main+0x42c>
			if (tft_display == 9) {
 8003810:	4b6b      	ldr	r3, [pc, #428]	; (80039c0 <main+0x584>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d10e      	bne.n	8003836 <main+0x3fa>
				term_print("Running TFT performance test ...\r\n");
 8003818:	486a      	ldr	r0, [pc, #424]	; (80039c4 <main+0x588>)
 800381a:	f001 f9c3 	bl	8004ba4 <term_print>
				Displ_BackLight('1');
 800381e:	2031      	movs	r0, #49	; 0x31
 8003820:	f002 ff0a 	bl	8006638 <Displ_BackLight>
				Displ_TestAll();
 8003824:	f003 fbd2 	bl	8006fcc <Displ_TestAll>
				Displ_BackLight('0');
 8003828:	2030      	movs	r0, #48	; 0x30
 800382a:	f002 ff05 	bl	8006638 <Displ_BackLight>
				term_print("....completed\r\n");
 800382e:	4866      	ldr	r0, [pc, #408]	; (80039c8 <main+0x58c>)
 8003830:	f001 f9b8 	bl	8004ba4 <term_print>
 8003834:	e015      	b.n	8003862 <main+0x426>
			} else {
				if (tft_display == 1) {
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <main+0x584>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d103      	bne.n	8003846 <main+0x40a>
					Displ_BackLight('0');
 800383e:	2030      	movs	r0, #48	; 0x30
 8003840:	f002 fefa 	bl	8006638 <Displ_BackLight>
 8003844:	e00d      	b.n	8003862 <main+0x426>
				} else {
					Displ_BackLight('1');
 8003846:	2031      	movs	r0, #49	; 0x31
 8003848:	f002 fef6 	bl	8006638 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 800384c:	f003 fc7a 	bl	8007144 <HAL_GetTick>
 8003850:	4603      	mov	r3, r0
 8003852:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003856:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800385a:	4a57      	ldr	r2, [pc, #348]	; (80039b8 <main+0x57c>)
 800385c:	6013      	str	r3, [r2, #0]
					display_update_mask();
 800385e:	f7fe ffdd 	bl	800281c <display_update_mask>
				}
			}
		tft_display = 0;
 8003862:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <main+0x584>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <main+0x590>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <main+0x458>
			display_activate = 0;
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <main+0x590>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8003878:	f7fe ffd0 	bl	800281c <display_update_mask>
			Displ_BackLight('1');
 800387c:	2031      	movs	r0, #49	; 0x31
 800387e:	f002 fedb 	bl	8006638 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003882:	f003 fc5f 	bl	8007144 <HAL_GetTick>
 8003886:	4603      	mov	r3, r0
 8003888:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800388c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003890:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <main+0x57c>)
 8003892:	6013      	str	r3, [r2, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8003894:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <main+0x594>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	dc0b      	bgt.n	80038b4 <main+0x478>
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <main+0x598>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	dc07      	bgt.n	80038b4 <main+0x478>
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <main+0x59c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	dc03      	bgt.n	80038b4 <main+0x478>
 80038ac:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <main+0x5a0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	dd1b      	ble.n	80038ec <main+0x4b0>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <main+0x594>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	dd02      	ble.n	80038c2 <main+0x486>
 80038bc:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <main+0x594>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80038c2:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <main+0x598>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	dd02      	ble.n	80038d0 <main+0x494>
 80038ca:	4b42      	ldr	r3, [pc, #264]	; (80039d4 <main+0x598>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <main+0x59c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	dd02      	ble.n	80038de <main+0x4a2>
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <main+0x59c>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <main+0x5a0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	dd02      	ble.n	80038ec <main+0x4b0>
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <main+0x5a0>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 80038ec:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <main+0x594>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dd0e      	ble.n	8003912 <main+0x4d6>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80038f4:	2100      	movs	r1, #0
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7fd fb94 	bl	8001024 <calc_process_dma_buffer>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <main+0x4cc>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8003902:	4837      	ldr	r0, [pc, #220]	; (80039e0 <main+0x5a4>)
 8003904:	f001 f94e 	bl	8004ba4 <term_print>
			}
			adc1_dma_l_count--;
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <main+0x594>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <main+0x594>)
 8003910:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <main+0x598>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	dd0e      	ble.n	8003938 <main+0x4fc>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 800391a:	2100      	movs	r1, #0
 800391c:	2001      	movs	r0, #1
 800391e:	f7fd fb81 	bl	8001024 <calc_process_dma_buffer>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <main+0x4f2>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8003928:	482e      	ldr	r0, [pc, #184]	; (80039e4 <main+0x5a8>)
 800392a:	f001 f93b 	bl	8004ba4 <term_print>
			}
			adc1_dma_h_count--;
 800392e:	4b29      	ldr	r3, [pc, #164]	; (80039d4 <main+0x598>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <main+0x598>)
 8003936:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <main+0x59c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	dd0e      	ble.n	800395e <main+0x522>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003940:	2101      	movs	r1, #1
 8003942:	2000      	movs	r0, #0
 8003944:	f7fd fb6e 	bl	8001024 <calc_process_dma_buffer>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <main+0x518>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 800394e:	4826      	ldr	r0, [pc, #152]	; (80039e8 <main+0x5ac>)
 8003950:	f001 f928 	bl	8004ba4 <term_print>
			}
			adc2_dma_l_count--;
 8003954:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <main+0x59c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3b01      	subs	r3, #1
 800395a:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <main+0x59c>)
 800395c:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <main+0x5a0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f77f adfc 	ble.w	8003560 <main+0x124>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8003968:	2101      	movs	r1, #1
 800396a:	2001      	movs	r0, #1
 800396c:	f7fd fb5a 	bl	8001024 <calc_process_dma_buffer>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <main+0x540>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8003976:	481d      	ldr	r0, [pc, #116]	; (80039ec <main+0x5b0>)
 8003978:	f001 f914 	bl	8004ba4 <term_print>
			}
			adc2_dma_h_count--;
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <main+0x5a0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3b01      	subs	r3, #1
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <main+0x5a0>)
 8003984:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8003986:	e5eb      	b.n	8003560 <main+0x124>
 8003988:	2000289a 	.word	0x2000289a
 800398c:	2000289e 	.word	0x2000289e
 8003990:	08010a88 	.word	0x08010a88
 8003994:	20002414 	.word	0x20002414
 8003998:	200028a4 	.word	0x200028a4
 800399c:	08010a84 	.word	0x08010a84
 80039a0:	2000289c 	.word	0x2000289c
 80039a4:	20002ca4 	.word	0x20002ca4
 80039a8:	20002cbb 	.word	0x20002cbb
 80039ac:	20002cbe 	.word	0x20002cbe
 80039b0:	20002cba 	.word	0x20002cba
 80039b4:	20002cc0 	.word	0x20002cc0
 80039b8:	200088c8 	.word	0x200088c8
 80039bc:	200088d4 	.word	0x200088d4
 80039c0:	20002cbc 	.word	0x20002cbc
 80039c4:	08010a9c 	.word	0x08010a9c
 80039c8:	08010ac0 	.word	0x08010ac0
 80039cc:	20002cb9 	.word	0x20002cb9
 80039d0:	20002cc4 	.word	0x20002cc4
 80039d4:	20002cc8 	.word	0x20002cc8
 80039d8:	20002ccc 	.word	0x20002ccc
 80039dc:	20002cd0 	.word	0x20002cd0
 80039e0:	08010ad0 	.word	0x08010ad0
 80039e4:	08010af8 	.word	0x08010af8
 80039e8:	08010b20 	.word	0x08010b20
 80039ec:	08010b48 	.word	0x08010b48

080039f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b094      	sub	sp, #80	; 0x50
 80039f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039f6:	f107 031c 	add.w	r3, r7, #28
 80039fa:	2234      	movs	r2, #52	; 0x34
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f009 fcaa 	bl	800d358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <SystemClock_Config+0xdc>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <SystemClock_Config+0xdc>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <SystemClock_Config+0xdc>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a30:	2300      	movs	r3, #0
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <SystemClock_Config+0xe0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <SystemClock_Config+0xe0>)
 8003a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <SystemClock_Config+0xe0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a54:	2310      	movs	r3, #16
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a60:	2308      	movs	r3, #8
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a64:	23b4      	movs	r3, #180	; 0xb4
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a70:	2302      	movs	r3, #2
 8003a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a74:	f107 031c 	add.w	r3, r7, #28
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f006 f9b7 	bl	8009dec <HAL_RCC_OscConfig>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a84:	f000 fc4c 	bl	8004320 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a88:	f005 fe16 	bl	80096b8 <HAL_PWREx_EnableOverDrive>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003a92:	f000 fc45 	bl	8004320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a96:	230f      	movs	r3, #15
 8003a98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	2105      	movs	r1, #5
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f005 fe4f 	bl	8009758 <HAL_RCC_ClockConfig>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003ac0:	f000 fc2e 	bl	8004320 <Error_Handler>
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3750      	adds	r7, #80	; 0x50
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40007000 	.word	0x40007000

08003ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ada:	463b      	mov	r3, r7
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <MX_ADC1_Init+0xbc>)
 8003aea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003aee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003af2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b06:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b18:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b26:	2202      	movs	r2, #2
 8003b28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b38:	4814      	ldr	r0, [pc, #80]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b3a:	f003 fb33 	bl	80071a4 <HAL_ADC_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003b44:	f000 fbec 	bl	8004320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003b50:	2303      	movs	r3, #3
 8003b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b54:	463b      	mov	r3, r7
 8003b56:	4619      	mov	r1, r3
 8003b58:	480c      	ldr	r0, [pc, #48]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b5a:	f003 fc77 	bl	800744c <HAL_ADC_ConfigChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003b64:	f000 fbdc 	bl	8004320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b68:	230a      	movs	r3, #10
 8003b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b70:	463b      	mov	r3, r7
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_ADC1_Init+0xb8>)
 8003b76:	f003 fc69 	bl	800744c <HAL_ADC_ConfigChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003b80:	f000 fbce 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20001fe8 	.word	0x20001fe8
 8003b90:	40012000 	.word	0x40012000

08003b94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003ba6:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003ba8:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <MX_ADC2_Init+0xbc>)
 8003baa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003bb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003bc0:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003bc6:	4b21      	ldr	r3, [pc, #132]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003bce:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003be6:	2202      	movs	r2, #2
 8003be8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003bf8:	4814      	ldr	r0, [pc, #80]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003bfa:	f003 fad3 	bl	80071a4 <HAL_ADC_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003c04:	f000 fb8c 	bl	8004320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003c10:	2303      	movs	r3, #3
 8003c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c14:	463b      	mov	r3, r7
 8003c16:	4619      	mov	r1, r3
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003c1a:	f003 fc17 	bl	800744c <HAL_ADC_ConfigChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003c24:	f000 fb7c 	bl	8004320 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003c28:	230b      	movs	r3, #11
 8003c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c30:	463b      	mov	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <MX_ADC2_Init+0xb8>)
 8003c36:	f003 fc09 	bl	800744c <HAL_ADC_ConfigChannel>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003c40:	f000 fb6e 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20002030 	.word	0x20002030
 8003c50:	40012100 	.word	0x40012100

08003c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <MX_I2C1_Init+0x54>)
 8003c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <MX_I2C1_Init+0x58>)
 8003c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c90:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <MX_I2C1_Init+0x50>)
 8003c92:	f004 fda3 	bl	80087dc <HAL_I2C_Init>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c9c:	f000 fb40 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20002138 	.word	0x20002138
 8003ca8:	40005400 	.word	0x40005400
 8003cac:	00061a80 	.word	0x00061a80

08003cb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <MX_SPI2_Init+0x68>)
 8003cb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003cc2:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cce:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <MX_SPI2_Init+0x64>)
 8003d02:	f006 fb11 	bl	800a328 <HAL_SPI_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d0c:	f000 fb08 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	2000218c 	.word	0x2000218c
 8003d18:	40003800 	.word	0x40003800

08003d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d30:	463b      	mov	r3, r7
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d4e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d60:	4813      	ldr	r0, [pc, #76]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d62:	f006 ffbb 	bl	800acdc <HAL_TIM_Base_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d6c:	f000 fad8 	bl	8004320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	480c      	ldr	r0, [pc, #48]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d7e:	f007 f975 	bl	800b06c <HAL_TIM_ConfigClockSource>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d88:	f000 faca 	bl	8004320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d94:	463b      	mov	r3, r7
 8003d96:	4619      	mov	r1, r3
 8003d98:	4805      	ldr	r0, [pc, #20]	; (8003db0 <MX_TIM2_Init+0x94>)
 8003d9a:	f007 fb9b 	bl	800b4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003da4:	f000 fabc 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003da8:	bf00      	nop
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20002244 	.word	0x20002244

08003db4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <MX_USART2_UART_Init+0x50>)
 8003dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dea:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_USART2_UART_Init+0x4c>)
 8003dec:	f007 fc02 	bl	800b5f4 <HAL_UART_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003df6:	f000 fa93 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000228c 	.word	0x2000228c
 8003e04:	40004400 	.word	0x40004400

08003e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <MX_USART3_UART_Init+0x50>)
 8003e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e2e:	220c      	movs	r2, #12
 8003e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e32:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e3e:	4805      	ldr	r0, [pc, #20]	; (8003e54 <MX_USART3_UART_Init+0x4c>)
 8003e40:	f007 fbd8 	bl	800b5f4 <HAL_UART_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e4a:	f000 fa69 	bl	8004320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200022d0 	.word	0x200022d0
 8003e58:	40004800 	.word	0x40004800

08003e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <MX_DMA_Init+0x78>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	200f      	movs	r0, #15
 8003ea0:	f003 fe5f 	bl	8007b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003ea4:	200f      	movs	r0, #15
 8003ea6:	f003 fe78 	bl	8007b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2100      	movs	r1, #0
 8003eae:	2038      	movs	r0, #56	; 0x38
 8003eb0:	f003 fe57 	bl	8007b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003eb4:	2038      	movs	r0, #56	; 0x38
 8003eb6:	f003 fe70 	bl	8007b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	203a      	movs	r0, #58	; 0x3a
 8003ec0:	f003 fe4f 	bl	8007b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003ec4:	203a      	movs	r0, #58	; 0x3a
 8003ec6:	f003 fe68 	bl	8007b9a <HAL_NVIC_EnableIRQ>

}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800

08003ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ede:	f107 0314 	add.w	r3, r7, #20
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a60      	ldr	r2, [pc, #384]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b5e      	ldr	r3, [pc, #376]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a59      	ldr	r2, [pc, #356]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b57      	ldr	r3, [pc, #348]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b53      	ldr	r3, [pc, #332]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a52      	ldr	r2, [pc, #328]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b50      	ldr	r3, [pc, #320]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	4a4b      	ldr	r2, [pc, #300]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	6313      	str	r3, [r2, #48]	; 0x30
 8003f52:	4b49      	ldr	r3, [pc, #292]	; (8004078 <MX_GPIO_Init+0x1a0>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	607b      	str	r3, [r7, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003f64:	4845      	ldr	r0, [pc, #276]	; (800407c <MX_GPIO_Init+0x1a4>)
 8003f66:	f004 fbed 	bl	8008744 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	4844      	ldr	r0, [pc, #272]	; (8004080 <MX_GPIO_Init+0x1a8>)
 8003f70:	f004 fbe8 	bl	8008744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003f74:	2201      	movs	r2, #1
 8003f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f7a:	4840      	ldr	r0, [pc, #256]	; (800407c <MX_GPIO_Init+0x1a4>)
 8003f7c:	f004 fbe2 	bl	8008744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8003f80:	2200      	movs	r2, #0
 8003f82:	21c0      	movs	r1, #192	; 0xc0
 8003f84:	483f      	ldr	r0, [pc, #252]	; (8004084 <MX_GPIO_Init+0x1ac>)
 8003f86:	f004 fbdd 	bl	8008744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4837      	ldr	r0, [pc, #220]	; (8004080 <MX_GPIO_Init+0x1a8>)
 8003fa2:	f004 fa23 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8003fa6:	f248 4360 	movw	r3, #33888	; 0x8460
 8003faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fac:	2301      	movs	r3, #1
 8003fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	482f      	ldr	r0, [pc, #188]	; (800407c <MX_GPIO_Init+0x1a4>)
 8003fc0:	f004 fa14 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4828      	ldr	r0, [pc, #160]	; (800407c <MX_GPIO_Init+0x1a4>)
 8003fdc:	f004 fa06 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fec:	2303      	movs	r3, #3
 8003fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4822      	ldr	r0, [pc, #136]	; (8004080 <MX_GPIO_Init+0x1a8>)
 8003ff8:	f004 f9f8 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4619      	mov	r1, r3
 8004014:	4819      	ldr	r0, [pc, #100]	; (800407c <MX_GPIO_Init+0x1a4>)
 8004016:	f004 f9e9 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800401a:	2310      	movs	r3, #16
 800401c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800401e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	4619      	mov	r1, r3
 800402e:	4815      	ldr	r0, [pc, #84]	; (8004084 <MX_GPIO_Init+0x1ac>)
 8004030:	f004 f9dc 	bl	80083ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8004034:	23c0      	movs	r3, #192	; 0xc0
 8004036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004038:	2301      	movs	r3, #1
 800403a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4619      	mov	r1, r3
 800404a:	480e      	ldr	r0, [pc, #56]	; (8004084 <MX_GPIO_Init+0x1ac>)
 800404c:	f004 f9ce 	bl	80083ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	200a      	movs	r0, #10
 8004056:	f003 fd84 	bl	8007b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800405a:	200a      	movs	r0, #10
 800405c:	f003 fd9d 	bl	8007b9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	2028      	movs	r0, #40	; 0x28
 8004066:	f003 fd7c 	bl	8007b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800406a:	2028      	movs	r0, #40	; 0x28
 800406c:	f003 fd95 	bl	8007b9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004070:	bf00      	nop
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	40020000 	.word	0x40020000
 8004080:	40020800 	.word	0x40020800
 8004084:	40020400 	.word	0x40020400

08004088 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	ee24_lock = 0;
//	my_printf("HAL_I2C_MemTxCpltCallback");

}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	ee24_lock = 0;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_I2C_MemRxCpltCallback+0x20>)
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
	ee24_read_done = true;
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_I2C_MemRxCpltCallback+0x24>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
//	my_printf("HAL_I2C_MemRxCpltCallback");
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20001fe6 	.word	0x20001fe6
 80040ac:	20002cb8 	.word	0x20002cb8

080040b0 <HAL_GPIO_EXTI_Callback>:

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_EXTI_Callback+0x18>
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d004      	beq.n	80040d0 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 80040c6:	e007      	b.n	80040d8 <HAL_GPIO_EXTI_Callback+0x28>
		display_activate = 1;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
		break;
 80040ce:	e003      	b.n	80040d8 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
		break;
 80040d6:	bf00      	nop
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20002cb9 	.word	0x20002cb9
 80040e8:	20002cba 	.word	0x20002cba

080040ec <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <HAL_ADC_ConvCpltCallback+0x34>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d105      	bne.n	8004108 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_ADC_ConvCpltCallback+0x38>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <HAL_ADC_ConvCpltCallback+0x38>)
 8004104:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8004106:	e004      	b.n	8004112 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_ADC_ConvCpltCallback+0x3c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a06      	ldr	r2, [pc, #24]	; (8004128 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20001fe8 	.word	0x20001fe8
 8004124:	20002cc8 	.word	0x20002cc8
 8004128:	20002cd0 	.word	0x20002cd0

0800412c <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d105      	bne.n	8004148 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004144:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8004146:	e004      	b.n	8004152 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a06      	ldr	r2, [pc, #24]	; (8004168 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8004150:	6013      	str	r3, [r2, #0]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20001fe8 	.word	0x20001fe8
 8004164:	20002cc4 	.word	0x20002cc4
 8004168:	20002ccc 	.word	0x20002ccc

0800416c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <HAL_ADC_ErrorCallback+0x94>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d102      	bne.n	8004182 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 800417c:	2301      	movs	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e001      	b.n	8004186 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8004182:	2302      	movs	r3, #2
 8004184:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	2b04      	cmp	r3, #4
 800418c:	d82c      	bhi.n	80041e8 <HAL_ADC_ErrorCallback+0x7c>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_ADC_ErrorCallback+0x28>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041a9 	.word	0x080041a9
 8004198:	080041b9 	.word	0x080041b9
 800419c:	080041c9 	.word	0x080041c9
 80041a0:	080041e9 	.word	0x080041e9
 80041a4:	080041d9 	.word	0x080041d9
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	461a      	mov	r2, r3
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	4814      	ldr	r0, [pc, #80]	; (8004204 <HAL_ADC_ErrorCallback+0x98>)
 80041b2:	f000 fcf7 	bl	8004ba4 <term_print>
		break;
 80041b6:	e01e      	b.n	80041f6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	461a      	mov	r2, r3
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	4811      	ldr	r0, [pc, #68]	; (8004208 <HAL_ADC_ErrorCallback+0x9c>)
 80041c2:	f000 fcef 	bl	8004ba4 <term_print>
		break;
 80041c6:	e016      	b.n	80041f6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	461a      	mov	r2, r3
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	480e      	ldr	r0, [pc, #56]	; (800420c <HAL_ADC_ErrorCallback+0xa0>)
 80041d2:	f000 fce7 	bl	8004ba4 <term_print>
		break;
 80041d6:	e00e      	b.n	80041f6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	461a      	mov	r2, r3
 80041de:	68f9      	ldr	r1, [r7, #12]
 80041e0:	480b      	ldr	r0, [pc, #44]	; (8004210 <HAL_ADC_ErrorCallback+0xa4>)
 80041e2:	f000 fcdf 	bl	8004ba4 <term_print>
		break;
 80041e6:	e006      	b.n	80041f6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	4619      	mov	r1, r3
 80041ee:	4809      	ldr	r0, [pc, #36]	; (8004214 <HAL_ADC_ErrorCallback+0xa8>)
 80041f0:	f000 fcd8 	bl	8004ba4 <term_print>
	}
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20001fe8 	.word	0x20001fe8
 8004204:	08010b70 	.word	0x08010b70
 8004208:	08010b8c 	.word	0x08010b8c
 800420c:	08010bb0 	.word	0x08010bb0
 8004210:	08010bd0 	.word	0x08010bd0
 8004214:	08010bec 	.word	0x08010bec

08004218 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <HAL_UART_RxCpltCallback+0xdc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d13b      	bne.n	80042a0 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 8004228:	4b33      	ldr	r3, [pc, #204]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b7f      	cmp	r3, #127	; 0x7f
 8004230:	d902      	bls.n	8004238 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 8004232:	4b31      	ldr	r3, [pc, #196]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 8004234:	2200      	movs	r2, #0
 8004236:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8004238:	2201      	movs	r2, #1
 800423a:	4930      	ldr	r1, [pc, #192]	; (80042fc <HAL_UART_RxCpltCallback+0xe4>)
 800423c:	482d      	ldr	r0, [pc, #180]	; (80042f4 <HAL_UART_RxCpltCallback+0xdc>)
 800423e:	f007 fab8 	bl	800b7b2 <HAL_UART_Receive_IT>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d150      	bne.n	80042ea <HAL_UART_RxCpltCallback+0xd2>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 8004248:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <HAL_UART_RxCpltCallback+0xe4>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b0a      	cmp	r3, #10
 8004250:	d012      	beq.n	8004278 <HAL_UART_RxCpltCallback+0x60>
 8004252:	4b2a      	ldr	r3, [pc, #168]	; (80042fc <HAL_UART_RxCpltCallback+0xe4>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b0d      	cmp	r3, #13
 800425a:	d00d      	beq.n	8004278 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 800425c:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	b291      	uxth	r1, r2
 8004266:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 8004268:	8011      	strh	r1, [r2, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_UART_RxCpltCallback+0xe4>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2d9      	uxtb	r1, r3
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_UART_RxCpltCallback+0xe8>)
 8004274:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004276:	e038      	b.n	80042ea <HAL_UART_RxCpltCallback+0xd2>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d033      	beq.n	80042ea <HAL_UART_RxCpltCallback+0xd2>
					cli_rx_cmd_ready = 1;
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_UART_RxCpltCallback+0xec>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	b291      	uxth	r1, r2
 8004292:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_UART_RxCpltCallback+0xe0>)
 8004294:	8011      	strh	r1, [r2, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_UART_RxCpltCallback+0xe8>)
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]
		return;
 800429e:	e024      	b.n	80042ea <HAL_UART_RxCpltCallback+0xd2>
	}

	// ESP response
	if (huart == &ESP_UART) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_UART_RxCpltCallback+0xf0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d121      	bne.n	80042ec <HAL_UART_RxCpltCallback+0xd4>
		esp_rx_reply_ready = 1;
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_UART_RxCpltCallback+0xf4>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
		if ( HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80042ae:	2201      	movs	r2, #1
 80042b0:	4917      	ldr	r1, [pc, #92]	; (8004310 <HAL_UART_RxCpltCallback+0xf8>)
 80042b2:	4815      	ldr	r0, [pc, #84]	; (8004308 <HAL_UART_RxCpltCallback+0xf0>)
 80042b4:	f007 fa7d 	bl	800b7b2 <HAL_UART_Receive_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <HAL_UART_RxCpltCallback+0xc2>
			/*if (esp_rx_count >= sizeof(esp_rx_buff)) { //esp_rx_count++; esp_rx_reply_ready = 1;
			} else
			{*/
			esp_rx_buff[esp_rx_count++] = esp_rx_byte;
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_UART_RxCpltCallback+0xfc>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	b291      	uxth	r1, r2
 80042c8:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_UART_RxCpltCallback+0xfc>)
 80042ca:	8011      	strh	r1, [r2, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_UART_RxCpltCallback+0xf8>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2d9      	uxtb	r1, r3
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_UART_RxCpltCallback+0x100>)
 80042d6:	5499      	strb	r1, [r3, r2]
 80042d8:	e008      	b.n	80042ec <HAL_UART_RxCpltCallback+0xd4>
					esp_rx_buff[esp_rx_count++] = 0;	// end of string
				}
			}*/
			//}
		} else {
			esp_rx_error_count++;
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <HAL_UART_RxCpltCallback+0x104>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3301      	adds	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_UART_RxCpltCallback+0x104>)
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e000      	b.n	80042ec <HAL_UART_RxCpltCallback+0xd4>
		return;
 80042ea:	bf00      	nop
		} // this should never happen
	}
}
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000228c 	.word	0x2000228c
 80042f8:	20002814 	.word	0x20002814
 80042fc:	20002816 	.word	0x20002816
 8004300:	20002818 	.word	0x20002818
 8004304:	20002898 	.word	0x20002898
 8004308:	200022d0 	.word	0x200022d0
 800430c:	20002ca4 	.word	0x20002ca4
 8004310:	200028a0 	.word	0x200028a0
 8004314:	2000289a 	.word	0x2000289a
 8004318:	200028a4 	.word	0x200028a4
 800431c:	2000289e 	.word	0x2000289e

08004320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <Error_Handler+0x10>)
 8004326:	f009 f805 	bl	800d334 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800432a:	b672      	cpsid	i
}
 800432c:	bf00      	nop
    __disable_irq();
    while (1)
 800432e:	e7fe      	b.n	800432e <Error_Handler+0xe>
 8004330:	08010c0c 	.word	0x08010c0c

08004334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_MspInit+0x4c>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a0f      	ldr	r2, [pc, #60]	; (8004380 <HAL_MspInit+0x4c>)
 8004344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_MspInit+0x4c>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_MspInit+0x4c>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_MspInit+0x4c>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	6413      	str	r3, [r2, #64]	; 0x40
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <HAL_MspInit+0x4c>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004372:	2007      	movs	r0, #7
 8004374:	f003 fbea 	bl	8007b4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a79      	ldr	r2, [pc, #484]	; (8004588 <HAL_ADC_MspInit+0x204>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d173      	bne.n	800448e <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	4b78      	ldr	r3, [pc, #480]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a77      	ldr	r2, [pc, #476]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	4b75      	ldr	r3, [pc, #468]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	4b71      	ldr	r3, [pc, #452]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	4a70      	ldr	r2, [pc, #448]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6313      	str	r3, [r2, #48]	; 0x30
 80043d2:	4b6e      	ldr	r3, [pc, #440]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a69      	ldr	r2, [pc, #420]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_ADC_MspInit+0x208>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043fa:	2301      	movs	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043fe:	2303      	movs	r3, #3
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440a:	4619      	mov	r1, r3
 800440c:	4860      	ldr	r0, [pc, #384]	; (8004590 <HAL_ADC_MspInit+0x20c>)
 800440e:	f003 ffed 	bl	80083ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004412:	2301      	movs	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004416:	2303      	movs	r3, #3
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004422:	4619      	mov	r1, r3
 8004424:	485b      	ldr	r0, [pc, #364]	; (8004594 <HAL_ADC_MspInit+0x210>)
 8004426:	f003 ffe1 	bl	80083ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_ADC_MspInit+0x214>)
 800442c:	4a5b      	ldr	r2, [pc, #364]	; (800459c <HAL_ADC_MspInit+0x218>)
 800442e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004432:	2200      	movs	r2, #0
 8004434:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800443c:	4b56      	ldr	r3, [pc, #344]	; (8004598 <HAL_ADC_MspInit+0x214>)
 800443e:	2200      	movs	r2, #0
 8004440:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004442:	4b55      	ldr	r3, [pc, #340]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004448:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800444a:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_ADC_MspInit+0x214>)
 800444c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004450:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004452:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004458:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800445a:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_ADC_MspInit+0x214>)
 800445c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004460:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004462:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004464:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004468:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800446a:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_ADC_MspInit+0x214>)
 800446c:	2200      	movs	r2, #0
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004470:	4849      	ldr	r0, [pc, #292]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004472:	f003 fbad 	bl	8007bd0 <HAL_DMA_Init>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 800447c:	f7ff ff50 	bl	8004320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a45      	ldr	r2, [pc, #276]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
 8004486:	4a44      	ldr	r2, [pc, #272]	; (8004598 <HAL_ADC_MspInit+0x214>)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800448c:	e078      	b.n	8004580 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a43      	ldr	r2, [pc, #268]	; (80045a0 <HAL_ADC_MspInit+0x21c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d173      	bne.n	8004580 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_ADC_MspInit+0x208>)
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	4a3a      	ldr	r2, [pc, #232]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a6:	6453      	str	r3, [r2, #68]	; 0x44
 80044a8:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	4a33      	ldr	r2, [pc, #204]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	6313      	str	r3, [r2, #48]	; 0x30
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a2c      	ldr	r2, [pc, #176]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6313      	str	r3, [r2, #48]	; 0x30
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_ADC_MspInit+0x208>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044ec:	2302      	movs	r3, #2
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044f0:	2303      	movs	r3, #3
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fc:	4619      	mov	r1, r3
 80044fe:	4824      	ldr	r0, [pc, #144]	; (8004590 <HAL_ADC_MspInit+0x20c>)
 8004500:	f003 ff74 	bl	80083ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004504:	2302      	movs	r3, #2
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004508:	2303      	movs	r3, #3
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	481f      	ldr	r0, [pc, #124]	; (8004594 <HAL_ADC_MspInit+0x210>)
 8004518:	f003 ff68 	bl	80083ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800451c:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 800451e:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_ADC_MspInit+0x224>)
 8004520:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004528:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800452a:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800453e:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004544:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004546:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800454c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004554:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004558:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800455c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800455e:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004560:	2200      	movs	r2, #0
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004564:	480f      	ldr	r0, [pc, #60]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004566:	f003 fb33 	bl	8007bd0 <HAL_DMA_Init>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8004570:	f7ff fed6 	bl	8004320 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <HAL_ADC_MspInit+0x220>)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004580:	bf00      	nop
 8004582:	3738      	adds	r7, #56	; 0x38
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40012000 	.word	0x40012000
 800458c:	40023800 	.word	0x40023800
 8004590:	40020800 	.word	0x40020800
 8004594:	40020000 	.word	0x40020000
 8004598:	20002078 	.word	0x20002078
 800459c:	40026410 	.word	0x40026410
 80045a0:	40012100 	.word	0x40012100
 80045a4:	200020d8 	.word	0x200020d8
 80045a8:	40026440 	.word	0x40026440

080045ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_I2C_MspInit+0x84>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12c      	bne.n	8004628 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045f0:	2312      	movs	r3, #18
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045fc:	2304      	movs	r3, #4
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4619      	mov	r1, r3
 8004606:	480c      	ldr	r0, [pc, #48]	; (8004638 <HAL_I2C_MspInit+0x8c>)
 8004608:	f003 fef0 	bl	80083ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_I2C_MspInit+0x88>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_I2C_MspInit+0x88>)
 8004616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461a:	6413      	str	r3, [r2, #64]	; 0x40
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_I2C_MspInit+0x88>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004628:	bf00      	nop
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40005400 	.word	0x40005400
 8004634:	40023800 	.word	0x40023800
 8004638:	40020400 	.word	0x40020400

0800463c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_SPI_MspInit+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d17f      	bne.n	800475e <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b42      	ldr	r3, [pc, #264]	; (800476c <HAL_SPI_MspInit+0x130>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	4a41      	ldr	r2, [pc, #260]	; (800476c <HAL_SPI_MspInit+0x130>)
 8004668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800466c:	6413      	str	r3, [r2, #64]	; 0x40
 800466e:	4b3f      	ldr	r3, [pc, #252]	; (800476c <HAL_SPI_MspInit+0x130>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b3b      	ldr	r3, [pc, #236]	; (800476c <HAL_SPI_MspInit+0x130>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <HAL_SPI_MspInit+0x130>)
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	6313      	str	r3, [r2, #48]	; 0x30
 800468a:	4b38      	ldr	r3, [pc, #224]	; (800476c <HAL_SPI_MspInit+0x130>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	4b34      	ldr	r3, [pc, #208]	; (800476c <HAL_SPI_MspInit+0x130>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	4a33      	ldr	r2, [pc, #204]	; (800476c <HAL_SPI_MspInit+0x130>)
 80046a0:	f043 0302 	orr.w	r3, r3, #2
 80046a4:	6313      	str	r3, [r2, #48]	; 0x30
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_SPI_MspInit+0x130>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80046b2:	230c      	movs	r3, #12
 80046b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046c2:	2305      	movs	r3, #5
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	4828      	ldr	r0, [pc, #160]	; (8004770 <HAL_SPI_MspInit+0x134>)
 80046ce:	f003 fe8d 	bl	80083ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 80046d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d8:	2302      	movs	r3, #2
 80046da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e0:	2303      	movs	r3, #3
 80046e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046e4:	2305      	movs	r3, #5
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	4619      	mov	r1, r3
 80046ee:	4821      	ldr	r0, [pc, #132]	; (8004774 <HAL_SPI_MspInit+0x138>)
 80046f0:	f003 fe7c 	bl	80083ec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80046f4:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 80046f6:	4a21      	ldr	r2, [pc, #132]	; (800477c <HAL_SPI_MspInit+0x140>)
 80046f8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80046fa:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004708:	2200      	movs	r2, #0
 800470a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 800470e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004712:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004716:	2200      	movs	r2, #0
 8004718:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004720:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004728:	2200      	movs	r2, #0
 800472a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800472c:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 800472e:	2200      	movs	r2, #0
 8004730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004734:	f003 fa4c 	bl	8007bd0 <HAL_DMA_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800473e:	f7ff fdef 	bl	8004320 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 8004746:	649a      	str	r2, [r3, #72]	; 0x48
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <HAL_SPI_MspInit+0x13c>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800474e:	2200      	movs	r2, #0
 8004750:	2100      	movs	r1, #0
 8004752:	2024      	movs	r0, #36	; 0x24
 8004754:	f003 fa05 	bl	8007b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004758:	2024      	movs	r0, #36	; 0x24
 800475a:	f003 fa1e 	bl	8007b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800475e:	bf00      	nop
 8004760:	3728      	adds	r7, #40	; 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40003800 	.word	0x40003800
 800476c:	40023800 	.word	0x40023800
 8004770:	40020800 	.word	0x40020800
 8004774:	40020400 	.word	0x40020400
 8004778:	200021e4 	.word	0x200021e4
 800477c:	40026070 	.word	0x40026070

08004780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d115      	bne.n	80047be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_TIM_Base_MspInit+0x48>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_TIM_Base_MspInit+0x48>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <HAL_TIM_Base_MspInit+0x48>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2100      	movs	r1, #0
 80047b2:	201c      	movs	r0, #28
 80047b4:	f003 f9d5 	bl	8007b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047b8:	201c      	movs	r0, #28
 80047ba:	f003 f9ee 	bl	8007b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800

080047cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	; 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d4:	f107 031c 	add.w	r3, r7, #28
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]
 80047e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_UART_MspInit+0x108>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d134      	bne.n	8004858 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a38      	ldr	r2, [pc, #224]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	4b32      	ldr	r3, [pc, #200]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	4a31      	ldr	r2, [pc, #196]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6313      	str	r3, [r2, #48]	; 0x30
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004826:	230c      	movs	r3, #12
 8004828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482a:	2302      	movs	r3, #2
 800482c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004832:	2303      	movs	r3, #3
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004836:	2307      	movs	r3, #7
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4619      	mov	r1, r3
 8004840:	4826      	ldr	r0, [pc, #152]	; (80048dc <HAL_UART_MspInit+0x110>)
 8004842:	f003 fdd3 	bl	80083ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	2026      	movs	r0, #38	; 0x26
 800484c:	f003 f989 	bl	8007b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004850:	2026      	movs	r0, #38	; 0x26
 8004852:	f003 f9a2 	bl	8007b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004856:	e039      	b.n	80048cc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_UART_MspInit+0x114>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d134      	bne.n	80048cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	6413      	str	r3, [r2, #64]	; 0x40
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4a14      	ldr	r2, [pc, #80]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004888:	f043 0304 	orr.w	r3, r3, #4
 800488c:	6313      	str	r3, [r2, #48]	; 0x30
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_UART_MspInit+0x10c>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800489a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800489e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a8:	2303      	movs	r3, #3
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048ac:	2307      	movs	r3, #7
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b0:	f107 031c 	add.w	r3, r7, #28
 80048b4:	4619      	mov	r1, r3
 80048b6:	480b      	ldr	r0, [pc, #44]	; (80048e4 <HAL_UART_MspInit+0x118>)
 80048b8:	f003 fd98 	bl	80083ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2100      	movs	r1, #0
 80048c0:	2027      	movs	r0, #39	; 0x27
 80048c2:	f003 f94e 	bl	8007b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048c6:	2027      	movs	r0, #39	; 0x27
 80048c8:	f003 f967 	bl	8007b9a <HAL_NVIC_EnableIRQ>
}
 80048cc:	bf00      	nop
 80048ce:	3730      	adds	r7, #48	; 0x30
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40004400 	.word	0x40004400
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40020000 	.word	0x40020000
 80048e0:	40004800 	.word	0x40004800
 80048e4:	40020800 	.word	0x40020800

080048e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048ec:	e7fe      	b.n	80048ec <NMI_Handler+0x4>

080048ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ee:	b480      	push	{r7}
 80048f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048f2:	e7fe      	b.n	80048f2 <HardFault_Handler+0x4>

080048f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <MemManage_Handler+0x4>

080048fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <BusFault_Handler+0x4>

08004900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <UsageFault_Handler+0x4>

08004906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004934:	f002 fbf2 	bl	800711c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}

0800493c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8004940:	2010      	movs	r0, #16
 8004942:	f003 ff33 	bl	80087ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004950:	4802      	ldr	r0, [pc, #8]	; (800495c <DMA1_Stream4_IRQHandler+0x10>)
 8004952:	f003 fad5 	bl	8007f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004956:	bf00      	nop
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	200021e4 	.word	0x200021e4

08004960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004964:	4804      	ldr	r0, [pc, #16]	; (8004978 <TIM2_IRQHandler+0x18>)
 8004966:	f006 fa79 	bl	800ae5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800496a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800496e:	4803      	ldr	r0, [pc, #12]	; (800497c <TIM2_IRQHandler+0x1c>)
 8004970:	f003 ff01 	bl	8008776 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20002244 	.word	0x20002244
 800497c:	40020000 	.word	0x40020000

08004980 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004984:	4802      	ldr	r0, [pc, #8]	; (8004990 <SPI2_IRQHandler+0x10>)
 8004986:	f005 ff4b 	bl	800a820 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800498a:	bf00      	nop
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	2000218c 	.word	0x2000218c

08004994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004998:	4802      	ldr	r0, [pc, #8]	; (80049a4 <USART2_IRQHandler+0x10>)
 800499a:	f006 ff3b 	bl	800b814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000228c 	.word	0x2000228c

080049a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <USART3_IRQHandler+0x10>)
 80049ae:	f006 ff31 	bl	800b814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200022d0 	.word	0x200022d0

080049bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80049c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80049c4:	f003 fef2 	bl	80087ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <DMA2_Stream0_IRQHandler+0x10>)
 80049d2:	f003 fa95 	bl	8007f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20002078 	.word	0x20002078

080049e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80049e4:	4802      	ldr	r0, [pc, #8]	; (80049f0 <DMA2_Stream2_IRQHandler+0x10>)
 80049e6:	f003 fa8b 	bl	8007f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049ea:	bf00      	nop
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200020d8 	.word	0x200020d8

080049f4 <_getpid>:
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	2301      	movs	r3, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <_kill>:
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	f008 fcf5 	bl	800d3fc <__errno>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2216      	movs	r2, #22
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_exit>:
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ffe7 	bl	8004a04 <_kill>
 8004a36:	e7fe      	b.n	8004a36 <_exit+0x12>

08004a38 <_read>:
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e00a      	b.n	8004a60 <_read+0x28>
 8004a4a:	f3af 8000 	nop.w
 8004a4e:	4601      	mov	r1, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	60ba      	str	r2, [r7, #8]
 8004a56:	b2ca      	uxtb	r2, r1
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	dbf0      	blt.n	8004a4a <_read+0x12>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_write>:
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e009      	b.n	8004a98 <_write+0x26>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	60ba      	str	r2, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f3af 8000 	nop.w
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	dbf1      	blt.n	8004a84 <_write+0x12>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_close>:
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <_fstat>:
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ad2:	605a      	str	r2, [r3, #4]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_isatty>:
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	2301      	movs	r3, #1
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_lseek>:
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	2300      	movs	r3, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <_sbrk>:
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <_sbrk+0x5c>)
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <_sbrk+0x60>)
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <_sbrk+0x64>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <_sbrk+0x22>
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <_sbrk+0x64>)
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <_sbrk+0x68>)
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d207      	bcs.n	8004b54 <_sbrk+0x40>
 8004b44:	f008 fc5a 	bl	800d3fc <__errno>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	220c      	movs	r2, #12
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b52:	e009      	b.n	8004b68 <_sbrk+0x54>
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <_sbrk+0x64>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <_sbrk+0x64>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <_sbrk+0x64>)
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20020000 	.word	0x20020000
 8004b74:	00000400 	.word	0x00000400
 8004b78:	200088e4 	.word	0x200088e4
 8004b7c:	20009e48 	.word	0x20009e48

08004b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <SystemInit+0x20>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <SystemInit+0x20>)
 8004b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004ba4:	b40f      	push	{r0, r1, r2, r3}
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004bac:	f107 0314 	add.w	r3, r7, #20
 8004bb0:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bba:	480b      	ldr	r0, [pc, #44]	; (8004be8 <term_print+0x44>)
 8004bbc:	f008 fbac 	bl	800d318 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004bc0:	4809      	ldr	r0, [pc, #36]	; (8004be8 <term_print+0x44>)
 8004bc2:	f7fb fb75 	bl	80002b0 <strlen>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bce:	4906      	ldr	r1, [pc, #24]	; (8004be8 <term_print+0x44>)
 8004bd0:	4806      	ldr	r0, [pc, #24]	; (8004bec <term_print+0x48>)
 8004bd2:	f006 fd5c 	bl	800b68e <HAL_UART_Transmit>
 8004bd6:	4603      	mov	r3, r0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be2:	b004      	add	sp, #16
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	200088e8 	.word	0x200088e8
 8004bec:	2000228c 	.word	0x2000228c

08004bf0 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d838      	bhi.n	8004c7a <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	481d      	ldr	r0, [pc, #116]	; (8004c84 <term_show_buffer+0x94>)
 8004c0e:	f7ff ffc9 	bl	8004ba4 <term_print>
	term_print("%3d: ", 0);
 8004c12:	2100      	movs	r1, #0
 8004c14:	481c      	ldr	r0, [pc, #112]	; (8004c88 <term_show_buffer+0x98>)
 8004c16:	f7ff ffc5 	bl	8004ba4 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e020      	b.n	8004c62 <term_show_buffer+0x72>
		if (count >= 20) {
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b13      	cmp	r3, #19
 8004c24:	dd06      	ble.n	8004c34 <term_show_buffer+0x44>
			count =0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004c2a:	8a7b      	ldrh	r3, [r7, #18]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4817      	ldr	r0, [pc, #92]	; (8004c8c <term_show_buffer+0x9c>)
 8004c30:	f7ff ffb8 	bl	8004ba4 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	4916      	ldr	r1, [pc, #88]	; (8004c90 <term_show_buffer+0xa0>)
 8004c38:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004c3c:	fb03 f202 	mul.w	r2, r3, r2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4812      	ldr	r0, [pc, #72]	; (8004c94 <term_show_buffer+0xa4>)
 8004c4c:	f7ff ffaa 	bl	8004ba4 <term_print>
		count++; address++;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	3301      	adds	r3, #1
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	8a7b      	ldrh	r3, [r7, #18]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004c68:	d3da      	bcc.n	8004c20 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004c6a:	480b      	ldr	r0, [pc, #44]	; (8004c98 <term_show_buffer+0xa8>)
 8004c6c:	f7ff ff9a 	bl	8004ba4 <term_print>
	term_show_channel(bufnum);
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f888 	bl	8004d88 <term_show_channel>
 8004c78:	e000      	b.n	8004c7c <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004c7a:	bf00      	nop
}
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	08010c40 	.word	0x08010c40
 8004c88:	08010c4c 	.word	0x08010c4c
 8004c8c:	08010c54 	.word	0x08010c54
 8004c90:	20007b94 	.word	0x20007b94
 8004c94:	08010c5c 	.word	0x08010c5c
 8004c98:	08010c64 	.word	0x08010c64
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <term_show_measurements>:

void term_show_measurements() {
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b08e      	sub	sp, #56	; 0x38
 8004ca6:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004ca8:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <term_show_measurements+0xc8>)
 8004caa:	7b1b      	ldrb	r3, [r3, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d008      	beq.n	8004cc2 <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004cb0:	f7fc fdd8 	bl	8001864 <calc_measurements>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004cba:	482c      	ldr	r0, [pc, #176]	; (8004d6c <term_show_measurements+0xcc>)
 8004cbc:	f7ff ff72 	bl	8004ba4 <term_print>
			return;
 8004cc0:	e047      	b.n	8004d52 <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004cc2:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <term_show_measurements+0xd0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fb fc5e 	bl	8000588 <__aeabi_f2d>
 8004ccc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <term_show_measurements+0xd4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fc57 	bl	8000588 <__aeabi_f2d>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	460d      	mov	r5, r1
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <term_show_measurements+0xd8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb fc50 	bl	8000588 <__aeabi_f2d>
 8004ce8:	4680      	mov	r8, r0
 8004cea:	4689      	mov	r9, r1
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <term_show_measurements+0xdc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fc49 	bl	8000588 <__aeabi_f2d>
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	468b      	mov	fp, r1
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <term_show_measurements+0xe0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb fc42 	bl	8000588 <__aeabi_f2d>
 8004d04:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <term_show_measurements+0xe0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fc3b 	bl	8000588 <__aeabi_f2d>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	ec43 2b10 	vmov	d0, r2, r3
 8004d1a:	f00b f8a5 	bl	800fe68 <acos>
 8004d1e:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004d22:	a30f      	add	r3, pc, #60	; (adr r3, 8004d60 <term_show_measurements+0xc0>)
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f7fb fc86 	bl	8000638 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d34:	ed97 7b00 	vldr	d7, [r7]
 8004d38:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d3c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004d40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004d44:	e9cd 4500 	strd	r4, r5, [sp]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	480d      	ldr	r0, [pc, #52]	; (8004d84 <term_show_measurements+0xe4>)
 8004d4e:	f7ff ff29 	bl	8004ba4 <term_print>
}
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	f3af 8000 	nop.w
 8004d60:	1af05a77 	.word	0x1af05a77
 8004d64:	404ca5dc 	.word	0x404ca5dc
 8004d68:	2000023c 	.word	0x2000023c
 8004d6c:	08010c68 	.word	0x08010c68
 8004d70:	200088b4 	.word	0x200088b4
 8004d74:	200088b8 	.word	0x200088b8
 8004d78:	200088bc 	.word	0x200088bc
 8004d7c:	200088c0 	.word	0x200088c0
 8004d80:	200088c4 	.word	0x200088c4
 8004d84:	08010c7c 	.word	0x08010c7c

08004d88 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	f200 80ce 	bhi.w	8004f36 <term_show_channel+0x1ae>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8004d9a:	79fa      	ldrb	r2, [r7, #7]
 8004d9c:	4968      	ldr	r1, [pc, #416]	; (8004f40 <term_show_channel+0x1b8>)
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	330c      	adds	r3, #12
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d050      	beq.n	8004e52 <term_show_channel+0xca>
		term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min  );
 8004db0:	79fa      	ldrb	r2, [r7, #7]
 8004db2:	4963      	ldr	r1, [pc, #396]	; (8004f40 <term_show_channel+0x1b8>)
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	461c      	mov	r4, r3
 8004dc2:	79fa      	ldrb	r2, [r7, #7]
 8004dc4:	495e      	ldr	r1, [pc, #376]	; (8004f40 <term_show_channel+0x1b8>)
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	461d      	mov	r5, r3
 8004dd6:	79fa      	ldrb	r2, [r7, #7]
 8004dd8:	4959      	ldr	r1, [pc, #356]	; (8004f40 <term_show_channel+0x1b8>)
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3302      	adds	r3, #2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	79fa      	ldrb	r2, [r7, #7]
 8004dec:	4954      	ldr	r1, [pc, #336]	; (8004f40 <term_show_channel+0x1b8>)
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	1ac3      	subs	r3, r0, r3
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4850      	ldr	r0, [pc, #320]	; (8004f44 <term_show_channel+0x1bc>)
 8004e02:	f7ff fecf 	bl	8004ba4 <term_print>
		term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004e06:	79fa      	ldrb	r2, [r7, #7]
 8004e08:	494d      	ldr	r1, [pc, #308]	; (8004f40 <term_show_channel+0x1b8>)
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fd f81b 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	79fa      	ldrb	r2, [r7, #7]
 8004e22:	4947      	ldr	r1, [pc, #284]	; (8004f40 <term_show_channel+0x1b8>)
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3302      	adds	r3, #2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd f80d 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4841      	ldr	r0, [pc, #260]	; (8004f48 <term_show_channel+0x1c0>)
 8004e42:	f7ff feaf 	bl	8004ba4 <term_print>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4840      	ldr	r0, [pc, #256]	; (8004f4c <term_show_channel+0x1c4>)
 8004e4c:	f7ff feaa 	bl	8004ba4 <term_print>
		return;
 8004e50:	e072      	b.n	8004f38 <term_show_channel+0x1b0>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004e52:	79fa      	ldrb	r2, [r7, #7]
 8004e54:	493a      	ldr	r1, [pc, #232]	; (8004f40 <term_show_channel+0x1b8>)
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3302      	adds	r3, #2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	79fa      	ldrb	r2, [r7, #7]
 8004e68:	4935      	ldr	r1, [pc, #212]	; (8004f40 <term_show_channel+0x1b8>)
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	1ac3      	subs	r3, r0, r3
 8004e78:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4834      	ldr	r0, [pc, #208]	; (8004f50 <term_show_channel+0x1c8>)
 8004e80:	f7ff fe90 	bl	8004ba4 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004e84:	79fa      	ldrb	r2, [r7, #7]
 8004e86:	492e      	ldr	r1, [pc, #184]	; (8004f40 <term_show_channel+0x1b8>)
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3310      	adds	r3, #16
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc ffdb 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	b21b      	sxth	r3, r3
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fc ffd5 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004eaa:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	0fda      	lsrs	r2, r3, #31
 8004eb0:	4413      	add	r3, r2
 8004eb2:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc ffcc 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4824      	ldr	r0, [pc, #144]	; (8004f54 <term_show_channel+0x1cc>)
 8004ec4:	f7ff fe6e 	bl	8004ba4 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004ec8:	79fa      	ldrb	r2, [r7, #7]
 8004eca:	491d      	ldr	r1, [pc, #116]	; (8004f40 <term_show_channel+0x1b8>)
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b21b      	sxth	r3, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc ffba 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	79fa      	ldrb	r2, [r7, #7]
 8004ee4:	4916      	ldr	r1, [pc, #88]	; (8004f40 <term_show_channel+0x1b8>)
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b21b      	sxth	r3, r3
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fc ffac 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	4621      	mov	r1, r4
 8004f02:	4811      	ldr	r0, [pc, #68]	; (8004f48 <term_show_channel+0x1c0>)
 8004f04:	f7ff fe4e 	bl	8004ba4 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004f08:	79fa      	ldrb	r2, [r7, #7]
 8004f0a:	490d      	ldr	r1, [pc, #52]	; (8004f40 <term_show_channel+0x1b8>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3304      	adds	r3, #4
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	79fa      	ldrb	r2, [r7, #7]
 8004f1c:	4808      	ldr	r0, [pc, #32]	; (8004f40 <term_show_channel+0x1b8>)
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4403      	add	r3, r0
 8004f28:	3308      	adds	r3, #8
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	480a      	ldr	r0, [pc, #40]	; (8004f58 <term_show_channel+0x1d0>)
 8004f30:	f7ff fe38 	bl	8004ba4 <term_print>
 8004f34:	e000      	b.n	8004f38 <term_show_channel+0x1b0>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004f36:	bf00      	nop
}
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000023c 	.word	0x2000023c
 8004f44:	08010cac 	.word	0x08010cac
 8004f48:	08010cc4 	.word	0x08010cc4
 8004f4c:	08010cdc 	.word	0x08010cdc
 8004f50:	08010cfc 	.word	0x08010cfc
 8004f54:	08010d18 	.word	0x08010d18
 8004f58:	08010d3c 	.word	0x08010d3c

08004f5c <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d821      	bhi.n	8004fb0 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4811      	ldr	r0, [pc, #68]	; (8004fb8 <term_csv_buffer+0x5c>)
 8004f72:	f7ff fe17 	bl	8004ba4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e011      	b.n	8004fa0 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	490f      	ldr	r1, [pc, #60]	; (8004fbc <term_csv_buffer+0x60>)
 8004f80:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004f84:	fb03 f202 	mul.w	r2, r3, r2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68f9      	ldr	r1, [r7, #12]
 8004f94:	480a      	ldr	r0, [pc, #40]	; (8004fc0 <term_csv_buffer+0x64>)
 8004f96:	f7ff fe05 	bl	8004ba4 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004fa6:	d3e9      	bcc.n	8004f7c <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004fa8:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <term_csv_buffer+0x68>)
 8004faa:	f7ff fdfb 	bl	8004ba4 <term_print>
 8004fae:	e000      	b.n	8004fb2 <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004fb0:	bf00      	nop
}
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08010c40 	.word	0x08010c40
 8004fbc:	20006154 	.word	0x20006154
 8004fc0:	08010d5c 	.word	0x08010d5c
 8004fc4:	08010d64 	.word	0x08010d64

08004fc8 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	480f      	ldr	r0, [pc, #60]	; (800500c <Displ_Select+0x44>)
 8004fd0:	f003 fba0 	bl	8008714 <HAL_GPIO_ReadPin>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fe0:	480b      	ldr	r0, [pc, #44]	; (8005010 <Displ_Select+0x48>)
 8004fe2:	f003 fbaf 	bl	8008744 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <Displ_Select+0x4c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	490a      	ldr	r1, [pc, #40]	; (8005014 <Displ_Select+0x4c>)
 8004fec:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <Displ_Select+0x4c>)
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <Displ_Select+0x4c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <Displ_Select+0x44>)
 8005002:	f003 fb9f 	bl	8008744 <HAL_GPIO_WritePin>
		}
	}
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40020800 	.word	0x40020800
 8005010:	40020000 	.word	0x40020000
 8005014:	40003800 	.word	0x40003800

08005018 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6039      	str	r1, [r7, #0]
 8005020:	4611      	mov	r1, r2
 8005022:	461a      	mov	r2, r3
 8005024:	4603      	mov	r3, r0
 8005026:	71fb      	strb	r3, [r7, #7]
 8005028:	460b      	mov	r3, r1
 800502a:	80bb      	strh	r3, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8005030:	bf00      	nop
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <Displ_Transmit+0xa4>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0fa      	beq.n	8005032 <Displ_Transmit+0x1a>

	Displ_Select();
 800503c:	f7ff ffc4 	bl	8004fc8 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	461a      	mov	r2, r3
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	481e      	ldr	r0, [pc, #120]	; (80050c0 <Displ_Transmit+0xa8>)
 8005048:	f003 fb7c 	bl	8008744 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8005052:	88bb      	ldrh	r3, [r7, #4]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4413      	add	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e00b      	b.n	8005078 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	ba5b      	rev16	r3, r3
 800506a:	60bb      	str	r3, [r7, #8]
  return result;
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3304      	adds	r3, #4
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3ef      	bcc.n	8005060 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	2b13      	cmp	r3, #19
 8005084:	d80d      	bhi.n	80050a2 <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <Displ_Transmit+0xa4>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 800508c:	88ba      	ldrh	r2, [r7, #4]
 800508e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	480b      	ldr	r0, [pc, #44]	; (80050c4 <Displ_Transmit+0xac>)
 8005096:	f005 f9d0 	bl	800a43a <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <Displ_Transmit+0xa4>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 80050a0:	e008      	b.n	80050b4 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <Displ_Transmit+0xa4>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 80050a8:	88bb      	ldrh	r3, [r7, #4]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	4805      	ldr	r0, [pc, #20]	; (80050c4 <Displ_Transmit+0xac>)
 80050b0:	f005 fb00 	bl	800a6b4 <HAL_SPI_Transmit_DMA>
	}
 80050b4:	bf00      	nop
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000034 	.word	0x20000034
 80050c0:	40020000 	.word	0x40020000
 80050c4:	2000218c 	.word	0x2000218c

080050c8 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80050d2:	1df9      	adds	r1, r7, #7
 80050d4:	2300      	movs	r3, #0
 80050d6:	2201      	movs	r2, #1
 80050d8:	2000      	movs	r0, #0
 80050da:	f7ff ff9d 	bl	8005018 <Displ_Transmit>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	2001      	movs	r0, #1
 8005104:	f7ff ff88 	bl	8005018 <Displ_Transmit>
 8005108:	e000      	b.n	800510c <Displ_WriteData+0x26>
	if (buff_size==0) return;
 800510a:	bf00      	nop
}
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	Displ_Select();
 8005118:	f7ff ff56 	bl	8004fc8 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 800511c:	2200      	movs	r2, #0
 800511e:	2140      	movs	r1, #64	; 0x40
 8005120:	4819      	ldr	r0, [pc, #100]	; (8005188 <ILI9XXX_Init+0x74>)
 8005122:	f003 fb0f 	bl	8008744 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005126:	2001      	movs	r0, #1
 8005128:	f002 f818 	bl	800715c <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 800512c:	2201      	movs	r2, #1
 800512e:	2140      	movs	r1, #64	; 0x40
 8005130:	4815      	ldr	r0, [pc, #84]	; (8005188 <ILI9XXX_Init+0x74>)
 8005132:	f003 fb07 	bl	8008744 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8005136:	20a5      	movs	r0, #165	; 0xa5
 8005138:	f002 f810 	bl	800715c <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 800513c:	203a      	movs	r0, #58	; 0x3a
 800513e:	f7ff ffc3 	bl	80050c8 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8005142:	2200      	movs	r2, #0
 8005144:	2101      	movs	r1, #1
 8005146:	4811      	ldr	r0, [pc, #68]	; (800518c <ILI9XXX_Init+0x78>)
 8005148:	f7ff ffcd 	bl	80050e6 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800514c:	20b0      	movs	r0, #176	; 0xb0
 800514e:	f7ff ffbb 	bl	80050c8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005152:	2200      	movs	r2, #0
 8005154:	2101      	movs	r1, #1
 8005156:	480e      	ldr	r0, [pc, #56]	; (8005190 <ILI9XXX_Init+0x7c>)
 8005158:	f7ff ffc5 	bl	80050e6 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 800515c:	20b0      	movs	r0, #176	; 0xb0
 800515e:	f7ff ffb3 	bl	80050c8 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005162:	2200      	movs	r2, #0
 8005164:	2101      	movs	r1, #1
 8005166:	480a      	ldr	r0, [pc, #40]	; (8005190 <ILI9XXX_Init+0x7c>)
 8005168:	f7ff ffbd 	bl	80050e6 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 800516c:	2011      	movs	r0, #17
 800516e:	f7ff ffab 	bl	80050c8 <Displ_WriteCommand>
	HAL_Delay(120);
 8005172:	2078      	movs	r0, #120	; 0x78
 8005174:	f001 fff2 	bl	800715c <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8005178:	2029      	movs	r0, #41	; 0x29
 800517a:	f7ff ffa5 	bl	80050c8 <Displ_WriteCommand>
	HAL_Delay(5);
 800517e:	2005      	movs	r0, #5
 8005180:	f001 ffec 	bl	800715c <HAL_Delay>

}
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40020400 	.word	0x40020400
 800518c:	08010d6c 	.word	0x08010d6c
 8005190:	08010d70 	.word	0x08010d70

08005194 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4604      	mov	r4, r0
 800519c:	4608      	mov	r0, r1
 800519e:	4611      	mov	r1, r2
 80051a0:	461a      	mov	r2, r3
 80051a2:	4623      	mov	r3, r4
 80051a4:	80fb      	strh	r3, [r7, #6]
 80051a6:	4603      	mov	r3, r0
 80051a8:	80bb      	strh	r3, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]
 80051ae:	4613      	mov	r3, r2
 80051b0:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	061a      	lsls	r2, r3, #24
 80051b6:	887b      	ldrh	r3, [r7, #2]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051be:	431a      	orrs	r2, r3
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	0a12      	lsrs	r2, r2, #8
 80051cc:	b292      	uxth	r2, r2
 80051ce:	431a      	orrs	r2, r3
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <Displ_SetAddressWindow+0x90>)
 80051d2:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80051d4:	202a      	movs	r0, #42	; 0x2a
 80051d6:	f7ff ff77 	bl	80050c8 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2104      	movs	r1, #4
 80051de:	4811      	ldr	r0, [pc, #68]	; (8005224 <Displ_SetAddressWindow+0x90>)
 80051e0:	f7ff ff81 	bl	80050e6 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80051e4:	883b      	ldrh	r3, [r7, #0]
 80051e6:	061a      	lsls	r2, r3, #24
 80051e8:	883b      	ldrh	r3, [r7, #0]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f0:	431a      	orrs	r2, r3
 80051f2:	88bb      	ldrh	r3, [r7, #4]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	88ba      	ldrh	r2, [r7, #4]
 80051fc:	0a12      	lsrs	r2, r2, #8
 80051fe:	b292      	uxth	r2, r2
 8005200:	431a      	orrs	r2, r3
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <Displ_SetAddressWindow+0x90>)
 8005204:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8005206:	202b      	movs	r0, #43	; 0x2b
 8005208:	f7ff ff5e 	bl	80050c8 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 800520c:	2200      	movs	r2, #0
 800520e:	2104      	movs	r1, #4
 8005210:	4804      	ldr	r0, [pc, #16]	; (8005224 <Displ_SetAddressWindow+0x90>)
 8005212:	f7ff ff68 	bl	80050e6 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8005216:	202c      	movs	r0, #44	; 0x2c
 8005218:	f7ff ff56 	bl	80050c8 <Displ_WriteCommand>
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	20009cf0 	.word	0x20009cf0

08005228 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8005232:	2201      	movs	r2, #1
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <Displ_Init+0x34>)
 8005238:	f003 fa84 	bl	8008744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 800523c:	2201      	movs	r2, #1
 800523e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005242:	4807      	ldr	r0, [pc, #28]	; (8005260 <Displ_Init+0x38>)
 8005244:	f003 fa7e 	bl	8008744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8005248:	f7ff ff64 	bl	8005114 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f808 	bl	8005264 <Displ_Orientation>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40020800 	.word	0x40020800
 8005260:	40020000 	.word	0x40020000

08005264 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d837      	bhi.n	80052e4 <Displ_Orientation+0x80>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <Displ_Orientation+0x18>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	0800528d 	.word	0x0800528d
 8005280:	080052a3 	.word	0x080052a3
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052cf 	.word	0x080052cf
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <Displ_Orientation+0xa0>)
 800528e:	2288      	movs	r2, #136	; 0x88
 8005290:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005292:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <Displ_Orientation+0xa4>)
 8005294:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005298:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <Displ_Orientation+0xa8>)
 800529c:	22f0      	movs	r2, #240	; 0xf0
 800529e:	801a      	strh	r2, [r3, #0]
			break;
 80052a0:	e020      	b.n	80052e4 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <Displ_Orientation+0xa0>)
 80052a4:	22e8      	movs	r2, #232	; 0xe8
 80052a6:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80052a8:	4b17      	ldr	r3, [pc, #92]	; (8005308 <Displ_Orientation+0xa4>)
 80052aa:	22f0      	movs	r2, #240	; 0xf0
 80052ac:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80052ae:	4b17      	ldr	r3, [pc, #92]	; (800530c <Displ_Orientation+0xa8>)
 80052b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052b4:	801a      	strh	r2, [r3, #0]
			break;
 80052b6:	e015      	b.n	80052e4 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 80052b8:	4b12      	ldr	r3, [pc, #72]	; (8005304 <Displ_Orientation+0xa0>)
 80052ba:	2248      	movs	r2, #72	; 0x48
 80052bc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <Displ_Orientation+0xa4>)
 80052c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052c4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <Displ_Orientation+0xa8>)
 80052c8:	22f0      	movs	r2, #240	; 0xf0
 80052ca:	801a      	strh	r2, [r3, #0]
			break;
 80052cc:	e00a      	b.n	80052e4 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80052ce:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <Displ_Orientation+0xa0>)
 80052d0:	2228      	movs	r2, #40	; 0x28
 80052d2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <Displ_Orientation+0xa4>)
 80052d6:	22f0      	movs	r2, #240	; 0xf0
 80052d8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <Displ_Orientation+0xa8>)
 80052dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80052e0:	801a      	strh	r2, [r3, #0]
			break;
 80052e2:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80052e4:	2036      	movs	r0, #54	; 0x36
 80052e6:	f7ff feef 	bl	80050c8 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2101      	movs	r1, #1
 80052ee:	4805      	ldr	r0, [pc, #20]	; (8005304 <Displ_Orientation+0xa0>)
 80052f0:	f7ff fef9 	bl	80050e6 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80052f4:	4a06      	ldr	r2, [pc, #24]	; (8005310 <Displ_Orientation+0xac>)
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	7013      	strb	r3, [r2, #0]
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20009cf4 	.word	0x20009cf4
 8005308:	20008cec 	.word	0x20008cec
 800530c:	20008cea 	.word	0x20008cea
 8005310:	20008ce8 	.word	0x20008ce8

08005314 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a05      	ldr	r2, [pc, #20]	; (8005338 <HAL_SPI_ErrorCallback+0x24>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d102      	bne.n	800532c <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_SPI_ErrorCallback+0x28>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
	}
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40003800 	.word	0x40003800
 800533c:	20000034 	.word	0x20000034

08005340 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a05      	ldr	r2, [pc, #20]	; (8005364 <HAL_SPI_TxCpltCallback+0x24>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d102      	bne.n	8005358 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_SPI_TxCpltCallback+0x28>)
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40003800 	.word	0x40003800
 8005368:	20000034 	.word	0x20000034

0800536c <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b08b      	sub	sp, #44	; 0x2c
 8005370:	af00      	add	r7, sp, #0
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	461a      	mov	r2, r3
 800537a:	4623      	mov	r3, r4
 800537c:	80fb      	strh	r3, [r7, #6]
 800537e:	4603      	mov	r3, r0
 8005380:	80bb      	strh	r3, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	807b      	strh	r3, [r7, #2]
 8005386:	4613      	mov	r3, r2
 8005388:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	4a4f      	ldr	r2, [pc, #316]	; (80054cc <Displ_FillArea+0x160>)
 800538e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005392:	4293      	cmp	r3, r2
 8005394:	f280 8096 	bge.w	80054c4 <Displ_FillArea+0x158>
 8005398:	88bb      	ldrh	r3, [r7, #4]
 800539a:	4a4d      	ldr	r2, [pc, #308]	; (80054d0 <Displ_FillArea+0x164>)
 800539c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	f280 808f 	bge.w	80054c4 <Displ_FillArea+0x158>
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 808b 	beq.w	80054c4 <Displ_FillArea+0x158>
 80053ae:	883b      	ldrh	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8087 	beq.w	80054c4 <Displ_FillArea+0x158>

	x1=x + w - 1;
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	887b      	ldrh	r3, [r7, #2]
 80053ba:	4413      	add	r3, r2
 80053bc:	3b01      	subs	r3, #1
 80053be:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <Displ_FillArea+0x160>)
 80053c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d903      	bls.n	80053d6 <Displ_FillArea+0x6a>
		x1=_width;
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <Displ_FillArea+0x160>)
 80053d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d4:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80053d6:	88ba      	ldrh	r2, [r7, #4]
 80053d8:	883b      	ldrh	r3, [r7, #0]
 80053da:	4413      	add	r3, r2
 80053dc:	3b01      	subs	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80053e0:	4b3b      	ldr	r3, [pc, #236]	; (80054d0 <Displ_FillArea+0x164>)
 80053e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e6:	461a      	mov	r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d903      	bls.n	80053f6 <Displ_FillArea+0x8a>
		y1=_height;
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <Displ_FillArea+0x164>)
 80053f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f4:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80053f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	431a      	orrs	r2, r3
 8005404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 800540c:	88bb      	ldrh	r3, [r7, #4]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	3301      	adds	r3, #1
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	6a39      	ldr	r1, [r7, #32]
 8005418:	1a8a      	subs	r2, r1, r2
 800541a:	3201      	adds	r2, #1
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005422:	4b2c      	ldr	r3, [pc, #176]	; (80054d4 <Displ_FillArea+0x168>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542e:	d204      	bcs.n	800543a <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	085b      	lsrs	r3, r3, #1
 8005434:	3301      	adds	r3, #1
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e002      	b.n	8005440 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 800543a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800543e:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
 8005444:	e007      	b.n	8005456 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	617a      	str	r2, [r7, #20]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3301      	adds	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d3f3      	bcc.n	8005446 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	b29a      	uxth	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	b29b      	uxth	r3, r3
 8005466:	88b9      	ldrh	r1, [r7, #4]
 8005468:	88f8      	ldrh	r0, [r7, #6]
 800546a:	f7ff fe93 	bl	8005194 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	0a9b      	lsrs	r3, r3, #10
 8005472:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
 8005478:	e00a      	b.n	8005490 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <Displ_FillArea+0x168>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fe2e 	bl	80050e6 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3f0      	bcc.n	800547a <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <Displ_FillArea+0x168>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	005a      	lsls	r2, r3, #1
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	02db      	lsls	r3, r3, #11
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7ff fe1c 	bl	80050e6 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <Displ_FillArea+0x168>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <Displ_FillArea+0x16c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d101      	bne.n	80054bc <Displ_FillArea+0x150>
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <Displ_FillArea+0x170>)
 80054ba:	e000      	b.n	80054be <Displ_FillArea+0x152>
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <Displ_FillArea+0x16c>)
 80054be:	4a05      	ldr	r2, [pc, #20]	; (80054d4 <Displ_FillArea+0x168>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e000      	b.n	80054c6 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 80054c4:	bf00      	nop

}
 80054c6:	372c      	adds	r7, #44	; 0x2c
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	20008cea 	.word	0x20008cea
 80054d0:	20008cec 	.word	0x20008cec
 80054d4:	20000038 	.word	0x20000038
 80054d8:	20008cf0 	.word	0x20008cf0
 80054dc:	200094f0 	.word	0x200094f0

080054e0 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
 80054ea:	460b      	mov	r3, r1
 80054ec:	80bb      	strh	r3, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <Displ_Pixel+0x44>)
 80054f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	da0e      	bge.n	800551c <Displ_Pixel+0x3c>
 80054fe:	88bb      	ldrh	r3, [r7, #4]
 8005500:	4a09      	ldr	r2, [pc, #36]	; (8005528 <Displ_Pixel+0x48>)
 8005502:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005506:	4293      	cmp	r3, r2
 8005508:	da08      	bge.n	800551c <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 800550a:	88b9      	ldrh	r1, [r7, #4]
 800550c:	88f8      	ldrh	r0, [r7, #6]
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	2301      	movs	r3, #1
 8005514:	2201      	movs	r2, #1
 8005516:	f7ff ff29 	bl	800536c <Displ_FillArea>
 800551a:	e000      	b.n	800551e <Displ_Pixel+0x3e>
        return;
 800551c:	bf00      	nop

}
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20008cea 	.word	0x20008cea
 8005528:	20008cec 	.word	0x20008cec

0800552c <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	4604      	mov	r4, r0
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4623      	mov	r3, r4
 800553c:	80fb      	strh	r3, [r7, #6]
 800553e:	4603      	mov	r3, r0
 8005540:	80bb      	strh	r3, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	807b      	strh	r3, [r7, #2]
 8005546:	4613      	mov	r3, r2
 8005548:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	f1c3 0301 	rsb	r3, r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005554:	2301      	movs	r3, #1
 8005556:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	461a      	mov	r2, r3
 800555c:	03d2      	lsls	r2, r2, #15
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800556a:	887b      	ldrh	r3, [r7, #2]
 800556c:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 800556e:	88f8      	ldrh	r0, [r7, #6]
 8005570:	88ba      	ldrh	r2, [r7, #4]
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	4413      	add	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	883a      	ldrh	r2, [r7, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	f7ff ffb0 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005580:	88f8      	ldrh	r0, [r7, #6]
 8005582:	88ba      	ldrh	r2, [r7, #4]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	883a      	ldrh	r2, [r7, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	f7ff ffa7 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	4413      	add	r3, r2
 8005598:	b29b      	uxth	r3, r3
 800559a:	88b9      	ldrh	r1, [r7, #4]
 800559c:	883a      	ldrh	r2, [r7, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff ff9e 	bl	80054e0 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	88b9      	ldrh	r1, [r7, #4]
 80055ae:	883a      	ldrh	r2, [r7, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff95 	bl	80054e0 <Displ_Pixel>

    while (x<y) {
 80055b6:	e081      	b.n	80056bc <Displ_drawCircle+0x190>
        if (f >= 0) {
 80055b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	db0e      	blt.n	80055de <Displ_drawCircle+0xb2>
            y--;
 80055c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80055cc:	8a7b      	ldrh	r3, [r7, #18]
 80055ce:	3302      	adds	r3, #2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80055d4:	8afa      	ldrh	r2, [r7, #22]
 80055d6:	8a7b      	ldrh	r3, [r7, #18]
 80055d8:	4413      	add	r3, r2
 80055da:	b29b      	uxth	r3, r3
 80055dc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80055de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80055ea:	8abb      	ldrh	r3, [r7, #20]
 80055ec:	3302      	adds	r3, #2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80055f2:	8afa      	ldrh	r2, [r7, #22]
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	8a3b      	ldrh	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	b298      	uxth	r0, r3
 8005604:	88ba      	ldrh	r2, [r7, #4]
 8005606:	89fb      	ldrh	r3, [r7, #14]
 8005608:	4413      	add	r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	883a      	ldrh	r2, [r7, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	f7ff ff66 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	8a3b      	ldrh	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	b298      	uxth	r0, r3
 800561c:	88ba      	ldrh	r2, [r7, #4]
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	4413      	add	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	883a      	ldrh	r2, [r7, #0]
 8005626:	4619      	mov	r1, r3
 8005628:	f7ff ff5a 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	8a3b      	ldrh	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	b298      	uxth	r0, r3
 8005634:	88ba      	ldrh	r2, [r7, #4]
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	883a      	ldrh	r2, [r7, #0]
 800563e:	4619      	mov	r1, r3
 8005640:	f7ff ff4e 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	8a3b      	ldrh	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	b298      	uxth	r0, r3
 800564c:	88ba      	ldrh	r2, [r7, #4]
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	b29b      	uxth	r3, r3
 8005654:	883a      	ldrh	r2, [r7, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	f7ff ff42 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	4413      	add	r3, r2
 8005662:	b298      	uxth	r0, r3
 8005664:	88ba      	ldrh	r2, [r7, #4]
 8005666:	8a3b      	ldrh	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	883a      	ldrh	r2, [r7, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	f7ff ff36 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	89fb      	ldrh	r3, [r7, #14]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	b298      	uxth	r0, r3
 800567c:	88ba      	ldrh	r2, [r7, #4]
 800567e:	8a3b      	ldrh	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	b29b      	uxth	r3, r3
 8005684:	883a      	ldrh	r2, [r7, #0]
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff ff2a 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	4413      	add	r3, r2
 8005692:	b298      	uxth	r0, r3
 8005694:	88ba      	ldrh	r2, [r7, #4]
 8005696:	8a3b      	ldrh	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	883a      	ldrh	r2, [r7, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	f7ff ff1e 	bl	80054e0 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80056a4:	88fa      	ldrh	r2, [r7, #6]
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	b298      	uxth	r0, r3
 80056ac:	88ba      	ldrh	r2, [r7, #4]
 80056ae:	8a3b      	ldrh	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	883a      	ldrh	r2, [r7, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	f7ff ff12 	bl	80054e0 <Displ_Pixel>
    while (x<y) {
 80056bc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80056c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	f6ff af77 	blt.w	80055b8 <Displ_drawCircle+0x8c>
    }
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af02      	add	r7, sp, #8
 80056da:	4603      	mov	r3, r0
 80056dc:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <Displ_CLS+0x30>)
 80056e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <Displ_CLS+0x34>)
 80056e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ec:	b299      	uxth	r1, r3
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	460b      	mov	r3, r1
 80056f4:	2100      	movs	r1, #0
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff fe38 	bl	800536c <Displ_FillArea>
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20008cea 	.word	0x20008cea
 8005708:	20008cec 	.word	0x20008cec

0800570c <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	461a      	mov	r2, r3
 800571a:	4623      	mov	r3, r4
 800571c:	80fb      	strh	r3, [r7, #6]
 800571e:	4603      	mov	r3, r0
 8005720:	80bb      	strh	r3, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	807b      	strh	r3, [r7, #2]
 8005726:	4613      	mov	r3, r2
 8005728:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 800572a:	887b      	ldrh	r3, [r7, #2]
 800572c:	f1c3 0301 	rsb	r3, r3, #1
 8005730:	b29b      	uxth	r3, r3
 8005732:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005734:	2301      	movs	r3, #1
 8005736:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005738:	887b      	ldrh	r3, [r7, #2]
 800573a:	461a      	mov	r2, r3
 800573c:	03d2      	lsls	r2, r2, #15
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	b29b      	uxth	r3, r3
 8005744:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800574e:	e095      	b.n	800587c <drawCircleHelper+0x170>
        if (f >= 0) {
 8005750:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0e      	blt.n	8005776 <drawCircleHelper+0x6a>
            y--;
 8005758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005764:	8a7b      	ldrh	r3, [r7, #18]
 8005766:	3302      	adds	r3, #2
 8005768:	b29b      	uxth	r3, r3
 800576a:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800576c:	8afa      	ldrh	r2, [r7, #22]
 800576e:	8a7b      	ldrh	r3, [r7, #18]
 8005770:	4413      	add	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005776:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800577a:	b29b      	uxth	r3, r3
 800577c:	3301      	adds	r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005782:	8abb      	ldrh	r3, [r7, #20]
 8005784:	3302      	adds	r3, #2
 8005786:	b29b      	uxth	r3, r3
 8005788:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800578a:	8afa      	ldrh	r2, [r7, #22]
 800578c:	8abb      	ldrh	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	8a3b      	ldrh	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	b298      	uxth	r0, r3
 80057a6:	88ba      	ldrh	r2, [r7, #4]
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	4413      	add	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057b0:	4619      	mov	r1, r3
 80057b2:	f7ff fe95 	bl	80054e0 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80057b6:	88fa      	ldrh	r2, [r7, #6]
 80057b8:	89fb      	ldrh	r3, [r7, #14]
 80057ba:	4413      	add	r3, r2
 80057bc:	b298      	uxth	r0, r3
 80057be:	88ba      	ldrh	r2, [r7, #4]
 80057c0:	8a3b      	ldrh	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057c8:	4619      	mov	r1, r3
 80057ca:	f7ff fe89 	bl	80054e0 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80057ce:	787b      	ldrb	r3, [r7, #1]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d017      	beq.n	8005808 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	8a3b      	ldrh	r3, [r7, #16]
 80057dc:	4413      	add	r3, r2
 80057de:	b298      	uxth	r0, r3
 80057e0:	88ba      	ldrh	r2, [r7, #4]
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80057ea:	4619      	mov	r1, r3
 80057ec:	f7ff fe78 	bl	80054e0 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	89fb      	ldrh	r3, [r7, #14]
 80057f4:	4413      	add	r3, r2
 80057f6:	b298      	uxth	r0, r3
 80057f8:	88ba      	ldrh	r2, [r7, #4]
 80057fa:	8a3b      	ldrh	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005802:	4619      	mov	r1, r3
 8005804:	f7ff fe6c 	bl	80054e0 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8005808:	787b      	ldrb	r3, [r7, #1]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d017      	beq.n	8005842 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	b298      	uxth	r0, r3
 800581a:	88ba      	ldrh	r2, [r7, #4]
 800581c:	8a3b      	ldrh	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005824:	4619      	mov	r1, r3
 8005826:	f7ff fe5b 	bl	80054e0 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	8a3b      	ldrh	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	b298      	uxth	r0, r3
 8005832:	88ba      	ldrh	r2, [r7, #4]
 8005834:	89fb      	ldrh	r3, [r7, #14]
 8005836:	4413      	add	r3, r2
 8005838:	b29b      	uxth	r3, r3
 800583a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800583c:	4619      	mov	r1, r3
 800583e:	f7ff fe4f 	bl	80054e0 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8005842:	787b      	ldrb	r3, [r7, #1]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d017      	beq.n	800587c <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 800584c:	88fa      	ldrh	r2, [r7, #6]
 800584e:	89fb      	ldrh	r3, [r7, #14]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b298      	uxth	r0, r3
 8005854:	88ba      	ldrh	r2, [r7, #4]
 8005856:	8a3b      	ldrh	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	b29b      	uxth	r3, r3
 800585c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800585e:	4619      	mov	r1, r3
 8005860:	f7ff fe3e 	bl	80054e0 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	8a3b      	ldrh	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	b298      	uxth	r0, r3
 800586c:	88ba      	ldrh	r2, [r7, #4]
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005876:	4619      	mov	r1, r3
 8005878:	f7ff fe32 	bl	80054e0 <Displ_Pixel>
    while (x<y) {
 800587c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005884:	429a      	cmp	r2, r3
 8005886:	f6ff af63 	blt.w	8005750 <drawCircleHelper+0x44>
        }
    }
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd90      	pop	{r4, r7, pc}

08005894 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8005894:	b590      	push	{r4, r7, lr}
 8005896:	b089      	sub	sp, #36	; 0x24
 8005898:	af02      	add	r7, sp, #8
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4623      	mov	r3, r4
 80058a4:	80fb      	strh	r3, [r7, #6]
 80058a6:	4603      	mov	r3, r0
 80058a8:	80bb      	strh	r3, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	807b      	strh	r3, [r7, #2]
 80058ae:	4613      	mov	r3, r2
 80058b0:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80058b2:	887b      	ldrh	r3, [r7, #2]
 80058b4:	f1c3 0301 	rsb	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80058bc:	2301      	movs	r3, #1
 80058be:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80058c0:	887b      	ldrh	r3, [r7, #2]
 80058c2:	461a      	mov	r2, r3
 80058c4:	03d2      	lsls	r2, r2, #15
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80058d6:	e0a7      	b.n	8005a28 <fillCircleHelper+0x194>
    if (f >= 0) {
 80058d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db0e      	blt.n	80058fe <fillCircleHelper+0x6a>
      y--;
 80058e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80058ec:	8a7b      	ldrh	r3, [r7, #18]
 80058ee:	3302      	adds	r3, #2
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80058f4:	8afa      	ldrh	r2, [r7, #22]
 80058f6:	8a7b      	ldrh	r3, [r7, #18]
 80058f8:	4413      	add	r3, r2
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80058fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005902:	b29b      	uxth	r3, r3
 8005904:	3301      	adds	r3, #1
 8005906:	b29b      	uxth	r3, r3
 8005908:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800590a:	8abb      	ldrh	r3, [r7, #20]
 800590c:	3302      	adds	r3, #2
 800590e:	b29b      	uxth	r3, r3
 8005910:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8005912:	8afa      	ldrh	r2, [r7, #22]
 8005914:	8abb      	ldrh	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 800591c:	787b      	ldrb	r3, [r7, #1]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03d      	beq.n	80059a2 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	8a3b      	ldrh	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	b218      	sxth	r0, r3
 8005930:	88ba      	ldrh	r2, [r7, #4]
 8005932:	89fb      	ldrh	r3, [r7, #14]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	b219      	sxth	r1, r3
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	8a3b      	ldrh	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	b29b      	uxth	r3, r3
 8005942:	b21c      	sxth	r4, r3
 8005944:	88ba      	ldrh	r2, [r7, #4]
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	4413      	add	r3, r2
 800594a:	b29a      	uxth	r2, r3
 800594c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800594e:	4413      	add	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	3301      	adds	r3, #1
 8005954:	b29b      	uxth	r3, r3
 8005956:	b21a      	sxth	r2, r3
 8005958:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	4622      	mov	r2, r4
 8005960:	f000 f8a1 	bl	8005aa6 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	4413      	add	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	b218      	sxth	r0, r3
 800596e:	88ba      	ldrh	r2, [r7, #4]
 8005970:	8a3b      	ldrh	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	b29b      	uxth	r3, r3
 8005976:	b219      	sxth	r1, r3
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	89fb      	ldrh	r3, [r7, #14]
 800597c:	4413      	add	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	b21c      	sxth	r4, r3
 8005982:	88ba      	ldrh	r2, [r7, #4]
 8005984:	8a3b      	ldrh	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	b29a      	uxth	r2, r3
 800598a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800598c:	4413      	add	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	3301      	adds	r3, #1
 8005992:	b29b      	uxth	r3, r3
 8005994:	b21a      	sxth	r2, r3
 8005996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	4622      	mov	r2, r4
 800599e:	f000 f882 	bl	8005aa6 <Displ_Line>
    }
    if (cornername & 0x2) {
 80059a2:	787b      	ldrb	r3, [r7, #1]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d03d      	beq.n	8005a28 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	8a3b      	ldrh	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	b218      	sxth	r0, r3
 80059b6:	88ba      	ldrh	r2, [r7, #4]
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b219      	sxth	r1, r3
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	8a3b      	ldrh	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	b21c      	sxth	r4, r3
 80059ca:	88ba      	ldrh	r2, [r7, #4]
 80059cc:	89fb      	ldrh	r3, [r7, #14]
 80059ce:	4413      	add	r3, r2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059d4:	4413      	add	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	b21a      	sxth	r2, r3
 80059de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	4622      	mov	r2, r4
 80059e6:	f000 f85e 	bl	8005aa6 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	89fb      	ldrh	r3, [r7, #14]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	b218      	sxth	r0, r3
 80059f4:	88ba      	ldrh	r2, [r7, #4]
 80059f6:	8a3b      	ldrh	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	b219      	sxth	r1, r3
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	89fb      	ldrh	r3, [r7, #14]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	b21c      	sxth	r4, r3
 8005a08:	88ba      	ldrh	r2, [r7, #4]
 8005a0a:	8a3b      	ldrh	r3, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a12:	4413      	add	r3, r2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b21a      	sxth	r2, r3
 8005a1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	4622      	mov	r2, r4
 8005a24:	f000 f83f 	bl	8005aa6 <Displ_Line>
  while (x<y) {
 8005a28:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	f6ff af51 	blt.w	80058d8 <fillCircleHelper+0x44>
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd90      	pop	{r4, r7, pc}

08005a40 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	80fb      	strh	r3, [r7, #6]
 8005a52:	4603      	mov	r3, r0
 8005a54:	80bb      	strh	r3, [r7, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	807b      	strh	r3, [r7, #2]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8005a5e:	88ba      	ldrh	r2, [r7, #4]
 8005a60:	887b      	ldrh	r3, [r7, #2]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	b219      	sxth	r1, r3
 8005a68:	88ba      	ldrh	r2, [r7, #4]
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	b21c      	sxth	r4, r3
 8005a72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a76:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a7a:	883b      	ldrh	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4623      	mov	r3, r4
 8005a80:	f000 f811 	bl	8005aa6 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8005a84:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005a88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005a90:	883b      	ldrh	r3, [r7, #0]
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	2300      	movs	r3, #0
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2303      	movs	r3, #3
 8005a9a:	f7ff fefb 	bl	8005894 <fillCircleHelper>
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}

08005aa6 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005aa6:	b590      	push	{r4, r7, lr}
 8005aa8:	b08b      	sub	sp, #44	; 0x2c
 8005aaa:	af02      	add	r7, sp, #8
 8005aac:	4604      	mov	r4, r0
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	80fb      	strh	r3, [r7, #6]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	80bb      	strh	r3, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	807b      	strh	r3, [r7, #2]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005ac4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d123      	bne.n	8005b18 <Displ_Line+0x72>
    	if (y1>y0){
 8005ad0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ad4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	dd0e      	ble.n	8005afa <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005adc:	88f8      	ldrh	r0, [r7, #6]
 8005ade:	88b9      	ldrh	r1, [r7, #4]
 8005ae0:	883a      	ldrh	r2, [r7, #0]
 8005ae2:	88bb      	ldrh	r3, [r7, #4]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3301      	adds	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	2201      	movs	r2, #1
 8005af4:	f7ff fc3a 	bl	800536c <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005af8:	e103      	b.n	8005d02 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005afa:	88f8      	ldrh	r0, [r7, #6]
 8005afc:	8839      	ldrh	r1, [r7, #0]
 8005afe:	88ba      	ldrh	r2, [r7, #4]
 8005b00:	883b      	ldrh	r3, [r7, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	2201      	movs	r2, #1
 8005b12:	f7ff fc2b 	bl	800536c <Displ_FillArea>
    	return;
 8005b16:	e0f4      	b.n	8005d02 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005b18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005b1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d121      	bne.n	8005b68 <Displ_Line+0xc2>
    	if (x1>x0)
 8005b24:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	dd0d      	ble.n	8005b4c <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005b30:	88f8      	ldrh	r0, [r7, #6]
 8005b32:	88b9      	ldrh	r1, [r7, #4]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	f7ff fc11 	bl	800536c <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8005b4a:	e0da      	b.n	8005d02 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8005b4c:	8878      	ldrh	r0, [r7, #2]
 8005b4e:	8839      	ldrh	r1, [r7, #0]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2301      	movs	r3, #1
 8005b62:	f7ff fc03 	bl	800536c <Displ_FillArea>
    	return;
 8005b66:	e0cc      	b.n	8005d02 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005b68:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	dd05      	ble.n	8005b80 <Displ_Line+0xda>
 8005b74:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	e004      	b.n	8005b8a <Displ_Line+0xe4>
 8005b80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005b84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b92:	4299      	cmp	r1, r3
 8005b94:	dd05      	ble.n	8005ba2 <Displ_Line+0xfc>
 8005b96:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b9e:	1acb      	subs	r3, r1, r3
 8005ba0:	e004      	b.n	8005bac <Displ_Line+0x106>
 8005ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005baa:	1acb      	subs	r3, r1, r3
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bfcc      	ite	gt
 8005bb0:	2301      	movgt	r3, #1
 8005bb2:	2300      	movle	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005bb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	827b      	strh	r3, [r7, #18]
 8005bc4:	88bb      	ldrh	r3, [r7, #4]
 8005bc6:	80fb      	strh	r3, [r7, #6]
 8005bc8:	8a7b      	ldrh	r3, [r7, #18]
 8005bca:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005bcc:	887b      	ldrh	r3, [r7, #2]
 8005bce:	823b      	strh	r3, [r7, #16]
 8005bd0:	883b      	ldrh	r3, [r7, #0]
 8005bd2:	807b      	strh	r3, [r7, #2]
 8005bd4:	8a3b      	ldrh	r3, [r7, #16]
 8005bd6:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005bd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	dd0b      	ble.n	8005bfc <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	81fb      	strh	r3, [r7, #14]
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	80fb      	strh	r3, [r7, #6]
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005bf0:	88bb      	ldrh	r3, [r7, #4]
 8005bf2:	81bb      	strh	r3, [r7, #12]
 8005bf4:	883b      	ldrh	r3, [r7, #0]
 8005bf6:	80bb      	strh	r3, [r7, #4]
 8005bf8:	89bb      	ldrh	r3, [r7, #12]
 8005bfa:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005bfc:	887a      	ldrh	r2, [r7, #2]
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005c06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c0a:	105b      	asrs	r3, r3, #1
 8005c0c:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005c0e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c12:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	da07      	bge.n	8005c2a <Displ_Line+0x184>
        dy = y1-y0;
 8005c1a:	883a      	ldrh	r2, [r7, #0]
 8005c1c:	88bb      	ldrh	r3, [r7, #4]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005c24:	2301      	movs	r3, #1
 8005c26:	837b      	strh	r3, [r7, #26]
 8005c28:	e007      	b.n	8005c3a <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005c2a:	88ba      	ldrh	r2, [r7, #4]
 8005c2c:	883b      	ldrh	r3, [r7, #0]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c38:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	83bb      	strh	r3, [r7, #28]
 8005c42:	e03a      	b.n	8005cba <Displ_Line+0x214>
    	l++;
 8005c44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8005c50:	8b3a      	ldrh	r2, [r7, #24]
 8005c52:	8afb      	ldrh	r3, [r7, #22]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005c5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da25      	bge.n	8005cae <Displ_Line+0x208>
        	if (steep) {
 8005c62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005c6a:	88b8      	ldrh	r0, [r7, #4]
 8005c6c:	88f9      	ldrh	r1, [r7, #6]
 8005c6e:	8bfa      	ldrh	r2, [r7, #30]
 8005c70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	2201      	movs	r2, #1
 8005c78:	f7ff fb78 	bl	800536c <Displ_FillArea>
 8005c7c:	e007      	b.n	8005c8e <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8005c7e:	88f8      	ldrh	r0, [r7, #6]
 8005c80:	88b9      	ldrh	r1, [r7, #4]
 8005c82:	8bfa      	ldrh	r2, [r7, #30]
 8005c84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f7ff fb6f 	bl	800536c <Displ_FillArea>
            }
            y0 += ystep;
 8005c8e:	88ba      	ldrh	r2, [r7, #4]
 8005c90:	8b7b      	ldrh	r3, [r7, #26]
 8005c92:	4413      	add	r3, r2
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005c9c:	8bbb      	ldrh	r3, [r7, #28]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005ca4:	8b3a      	ldrh	r2, [r7, #24]
 8005ca6:	897b      	ldrh	r3, [r7, #10]
 8005ca8:	4413      	add	r3, r2
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005cae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	83bb      	strh	r3, [r7, #28]
 8005cba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	ddbe      	ble.n	8005c44 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005cc6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d019      	beq.n	8005d02 <Displ_Line+0x25c>
    	if (steep) {
 8005cce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00b      	beq.n	8005cee <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8005cd6:	88b8      	ldrh	r0, [r7, #4]
 8005cd8:	88f9      	ldrh	r1, [r7, #6]
 8005cda:	8bfb      	ldrh	r3, [r7, #30]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f7ff fb40 	bl	800536c <Displ_FillArea>
 8005cec:	e009      	b.n	8005d02 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8005cee:	88f8      	ldrh	r0, [r7, #6]
 8005cf0:	88b9      	ldrh	r1, [r7, #4]
 8005cf2:	8bfb      	ldrh	r3, [r7, #30]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f7ff fb35 	bl	800536c <Displ_FillArea>
    	}
    }
}
 8005d02:	3724      	adds	r7, #36	; 0x24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	80fb      	strh	r3, [r7, #6]
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80bb      	strh	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	807b      	strh	r3, [r7, #2]
 8005d22:	4613      	mov	r3, r2
 8005d24:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8005d26:	88f8      	ldrh	r0, [r7, #6]
 8005d28:	88b9      	ldrh	r1, [r7, #4]
 8005d2a:	887a      	ldrh	r2, [r7, #2]
 8005d2c:	8b3c      	ldrh	r4, [r7, #24]
 8005d2e:	8bbb      	ldrh	r3, [r7, #28]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4623      	mov	r3, r4
 8005d34:	f7ff fb1a 	bl	800536c <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8005d38:	88f8      	ldrh	r0, [r7, #6]
 8005d3a:	88ba      	ldrh	r2, [r7, #4]
 8005d3c:	883b      	ldrh	r3, [r7, #0]
 8005d3e:	4413      	add	r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	8b3b      	ldrh	r3, [r7, #24]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	b299      	uxth	r1, r3
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	8b3c      	ldrh	r4, [r7, #24]
 8005d4c:	8bbb      	ldrh	r3, [r7, #28]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4623      	mov	r3, r4
 8005d52:	f7ff fb0b 	bl	800536c <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8005d56:	88f8      	ldrh	r0, [r7, #6]
 8005d58:	88b9      	ldrh	r1, [r7, #4]
 8005d5a:	8b3a      	ldrh	r2, [r7, #24]
 8005d5c:	883c      	ldrh	r4, [r7, #0]
 8005d5e:	8bbb      	ldrh	r3, [r7, #28]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4623      	mov	r3, r4
 8005d64:	f7ff fb02 	bl	800536c <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	8b3b      	ldrh	r3, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	b298      	uxth	r0, r3
 8005d76:	88b9      	ldrh	r1, [r7, #4]
 8005d78:	8b3a      	ldrh	r2, [r7, #24]
 8005d7a:	883c      	ldrh	r4, [r7, #0]
 8005d7c:	8bbb      	ldrh	r3, [r7, #28]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	4623      	mov	r3, r4
 8005d82:	f7ff faf3 	bl	800536c <Displ_FillArea>
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd90      	pop	{r4, r7, pc}

08005d8e <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005d8e:	b590      	push	{r4, r7, lr}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af02      	add	r7, sp, #8
 8005d94:	4604      	mov	r4, r0
 8005d96:	4608      	mov	r0, r1
 8005d98:	4611      	mov	r1, r2
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	80fb      	strh	r3, [r7, #6]
 8005da0:	4603      	mov	r3, r0
 8005da2:	80bb      	strh	r3, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	807b      	strh	r3, [r7, #2]
 8005da8:	4613      	mov	r3, r2
 8005daa:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8005dac:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005db0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005db4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005db8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005dbc:	8c3b      	ldrh	r3, [r7, #32]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4623      	mov	r3, r4
 8005dc2:	f7ff fe70 	bl	8005aa6 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8005dc6:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005dca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005dce:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005dd2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005dd6:	8c3b      	ldrh	r3, [r7, #32]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4623      	mov	r3, r4
 8005ddc:	f7ff fe63 	bl	8005aa6 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8005de0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005de4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005de8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005dec:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005df0:	8c3b      	ldrh	r3, [r7, #32]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4623      	mov	r3, r4
 8005df6:	f7ff fe56 	bl	8005aa6 <Displ_Line>
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd90      	pop	{r4, r7, pc}

08005e02 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005e02:	b590      	push	{r4, r7, lr}
 8005e04:	b091      	sub	sp, #68	; 0x44
 8005e06:	af02      	add	r7, sp, #8
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	80fb      	strh	r3, [r7, #6]
 8005e14:	4603      	mov	r3, r0
 8005e16:	80bb      	strh	r3, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005e20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	dd0b      	ble.n	8005e44 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005e2c:	88bb      	ldrh	r3, [r7, #4]
 8005e2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005e30:	883b      	ldrh	r3, [r7, #0]
 8005e32:	80bb      	strh	r3, [r7, #4]
 8005e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e36:	803b      	strh	r3, [r7, #0]
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	80fb      	strh	r3, [r7, #6]
 8005e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e42:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005e44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	dd0f      	ble.n	8005e70 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005e50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005e54:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e56:	883b      	ldrh	r3, [r7, #0]
 8005e58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e5e:	803b      	strh	r3, [r7, #0]
 8005e60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e64:	843b      	strh	r3, [r7, #32]
 8005e66:	887b      	ldrh	r3, [r7, #2]
 8005e68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e6c:	8c3b      	ldrh	r3, [r7, #32]
 8005e6e:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005e70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e74:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	dd0b      	ble.n	8005e94 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005e7c:	88bb      	ldrh	r3, [r7, #4]
 8005e7e:	83fb      	strh	r3, [r7, #30]
 8005e80:	883b      	ldrh	r3, [r7, #0]
 8005e82:	80bb      	strh	r3, [r7, #4]
 8005e84:	8bfb      	ldrh	r3, [r7, #30]
 8005e86:	803b      	strh	r3, [r7, #0]
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	83bb      	strh	r3, [r7, #28]
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	80fb      	strh	r3, [r7, #6]
 8005e90:	8bbb      	ldrh	r3, [r7, #28]
 8005e92:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005e94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005e98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d136      	bne.n	8005f0e <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ea4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ea6:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005ea8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005eac:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	da02      	bge.n	8005eba <Displ_fillTriangle+0xb8>
 8005eb4:	887b      	ldrh	r3, [r7, #2]
 8005eb6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005eb8:	e007      	b.n	8005eca <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005eba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ebe:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	dd01      	ble.n	8005eca <Displ_fillTriangle+0xc8>
 8005ec6:	887b      	ldrh	r3, [r7, #2]
 8005ec8:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005eca:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005ece:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	da03      	bge.n	8005ede <Displ_fillTriangle+0xdc>
 8005ed6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005eda:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005edc:	e008      	b.n	8005ef0 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005ede:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005ee2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	dd02      	ble.n	8005ef0 <Displ_fillTriangle+0xee>
 8005eea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005eee:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005ef0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005ef4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005ef8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005efc:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005f00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4623      	mov	r3, r4
 8005f08:	f7ff fdcd 	bl	8005aa6 <Displ_Line>
        return;
 8005f0c:	e0d2      	b.n	80060b4 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005f18:	883a      	ldrh	r2, [r7, #0]
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005f22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005f2e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f32:	88bb      	ldrh	r3, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005f3a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005f3e:	887b      	ldrh	r3, [r7, #2]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005f46:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f4a:	883b      	ldrh	r3, [r7, #0]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005f52:	2300      	movs	r3, #0
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005f5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d102      	bne.n	8005f6c <Displ_fillTriangle+0x16a>
 8005f66:	883b      	ldrh	r3, [r7, #0]
 8005f68:	863b      	strh	r3, [r7, #48]	; 0x30
 8005f6a:	e003      	b.n	8005f74 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005f6c:	883b      	ldrh	r3, [r7, #0]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005f74:	88bb      	ldrh	r3, [r7, #4]
 8005f76:	867b      	strh	r3, [r7, #50]	; 0x32
 8005f78:	e03d      	b.n	8005ff6 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005f7a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	4413      	add	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005f8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005fa2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa8:	4413      	add	r3, r2
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005fac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb2:	4413      	add	r3, r2
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005fb6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005fba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	dd05      	ble.n	8005fce <Displ_fillTriangle+0x1cc>
 8005fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fc4:	81bb      	strh	r3, [r7, #12]
 8005fc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fca:	89bb      	ldrh	r3, [r7, #12]
 8005fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005fce:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005fd2:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005fd6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005fda:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005fde:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	4623      	mov	r3, r4
 8005fe6:	f7ff fd5e 	bl	8005aa6 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005fea:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005ff6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005ffa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005ffe:	429a      	cmp	r2, r3
 8006000:	ddbb      	ble.n	8005f7a <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8006002:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006006:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800600a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800600e:	1a8a      	subs	r2, r1, r2
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8006016:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800601a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800601e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006022:	1a8a      	subs	r2, r1, r2
 8006024:	fb02 f303 	mul.w	r3, r2, r3
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 800602a:	e03d      	b.n	80060a8 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 800602c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006032:	fb92 f3f3 	sdiv	r3, r2, r3
 8006036:	b29a      	uxth	r2, r3
 8006038:	887b      	ldrh	r3, [r7, #2]
 800603a:	4413      	add	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006040:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006046:	fb92 f3f3 	sdiv	r3, r2, r3
 800604a:	b29a      	uxth	r2, r3
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	4413      	add	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	4413      	add	r3, r2
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800605e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006064:	4413      	add	r3, r2
 8006066:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006068:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800606c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006070:	429a      	cmp	r2, r3
 8006072:	dd05      	ble.n	8006080 <Displ_fillTriangle+0x27e>
 8006074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006076:	81fb      	strh	r3, [r7, #14]
 8006078:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800607a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800607c:	89fb      	ldrh	r3, [r7, #14]
 800607e:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8006080:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006084:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006088:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800608c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006090:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	4623      	mov	r3, r4
 8006098:	f7ff fd05 	bl	8005aa6 <Displ_Line>
    for(; y<=y2; y++) {
 800609c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3301      	adds	r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	867b      	strh	r3, [r7, #50]	; 0x32
 80060a8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80060ac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	ddbb      	ble.n	800602c <Displ_fillTriangle+0x22a>
    }
}
 80060b4:	373c      	adds	r7, #60	; 0x3c
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd90      	pop	{r4, r7, pc}
	...

080060bc <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80060bc:	b082      	sub	sp, #8
 80060be:	b590      	push	{r4, r7, lr}
 80060c0:	b08f      	sub	sp, #60	; 0x3c
 80060c2:	af02      	add	r7, sp, #8
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	4603      	mov	r3, r0
 80060c8:	80fb      	strh	r3, [r7, #6]
 80060ca:	460b      	mov	r3, r1
 80060cc:	80bb      	strh	r3, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80060d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060d6:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80060d8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d102      	bne.n	80060e6 <Displ_WChar+0x2a>
		wsize<<= 1;
 80060e0:	7efb      	ldrb	r3, [r7, #27]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80060ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ee:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80060f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	3b20      	subs	r3, #32
 80060fe:	4619      	mov	r1, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 800610a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800610e:	2b02      	cmp	r3, #2
 8006110:	d005      	beq.n	800611e <Displ_WChar+0x62>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d107      	bne.n	8006126 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8006116:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800611a:	61fb      	str	r3, [r7, #28]
			break;
 800611c:	e005      	b.n	800612a <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 800611e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006122:	61fb      	str	r3, [r7, #28]
			break;
 8006124:	e001      	b.n	800612a <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 800612a:	4b68      	ldr	r3, [pc, #416]	; (80062cc <Displ_WChar+0x210>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006130:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	b21a      	sxth	r2, r3
 8006138:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b29b      	uxth	r3, r3
 8006140:	b21b      	sxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b21b      	sxth	r3, r3
 8006146:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006148:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	b21a      	sxth	r2, r3
 8006150:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	b29b      	uxth	r3, r3
 8006158:	b21b      	sxth	r3, r3
 800615a:	4313      	orrs	r3, r2
 800615c:	b21b      	sxth	r3, r3
 800615e:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8006160:	2300      	movs	r3, #0
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006164:	e06f      	b.n	8006246 <Displ_WChar+0x18a>
		b=0;
 8006166:	2300      	movs	r3, #0
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 800616a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800616e:	2b02      	cmp	r3, #2
 8006170:	d015      	beq.n	800619e <Displ_WChar+0xe2>
 8006172:	2b03      	cmp	r3, #3
 8006174:	d120      	bne.n	80061b8 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	041a      	lsls	r2, r3, #16
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	3301      	adds	r3, #1
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	440b      	add	r3, r1
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	021b      	lsls	r3, r3, #8
 800618c:	4313      	orrs	r3, r2
 800618e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006190:	3202      	adds	r2, #2
 8006192:	6939      	ldr	r1, [r7, #16]
 8006194:	440a      	add	r2, r1
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800619c:	e011      	b.n	80061c2 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	4413      	add	r3, r2
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061aa:	3201      	adds	r2, #1
 80061ac:	6939      	ldr	r1, [r7, #16]
 80061ae:	440a      	add	r2, r1
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 80061b6:	e004      	b.n	80061c2 <Displ_WChar+0x106>
			default:
				b=pos[i];
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 80061c2:	2300      	movs	r3, #0
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	e032      	b.n	800622e <Displ_WChar+0x172>
			if((b << j) & mask)  {
 80061c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	409a      	lsls	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d014      	beq.n	8006200 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	623a      	str	r2, [r7, #32]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	897a      	ldrh	r2, [r7, #10]
 80061e4:	801a      	strh	r2, [r3, #0]
				if (size==2){
 80061e6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d11c      	bne.n	8006228 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	623a      	str	r2, [r7, #32]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	897a      	ldrh	r2, [r7, #10]
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e013      	b.n	8006228 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	623a      	str	r2, [r7, #32]
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	893a      	ldrh	r2, [r7, #8]
 800620e:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8006210:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006214:	2b02      	cmp	r3, #2
 8006216:	d107      	bne.n	8006228 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	623a      	str	r2, [r7, #32]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	893a      	ldrh	r2, [r7, #8]
 8006226:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006232:	461a      	mov	r2, r3
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	4293      	cmp	r3, r2
 8006238:	d3c6      	bcc.n	80061c8 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 800623a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800623e:	461a      	mov	r2, r3
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	4413      	add	r3, r2
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	429a      	cmp	r2, r3
 800624c:	d38b      	bcc.n	8006166 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006254:	7efb      	ldrb	r3, [r7, #27]
 8006256:	b29a      	uxth	r2, r3
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	4413      	add	r3, r2
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29c      	uxth	r4, r3
 8006262:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006266:	88bb      	ldrh	r3, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	88b9      	ldrh	r1, [r7, #4]
 8006272:	88f8      	ldrh	r0, [r7, #6]
 8006274:	4622      	mov	r2, r4
 8006276:	f7fe ff8d 	bl	8005194 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006280:	d90b      	bls.n	800629a <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8006282:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	f240 33ad 	movw	r3, #941	; 0x3ad
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <Displ_WChar+0x214>)
 8006292:	4910      	ldr	r1, [pc, #64]	; (80062d4 <Displ_WChar+0x218>)
 8006294:	4810      	ldr	r0, [pc, #64]	; (80062d8 <Displ_WChar+0x21c>)
 8006296:	f7fe fc85 	bl	8004ba4 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <Displ_WChar+0x210>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe ff1f 	bl	80050e6 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 80062a8:	4b08      	ldr	r3, [pc, #32]	; (80062cc <Displ_WChar+0x210>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <Displ_WChar+0x220>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <Displ_WChar+0x1fa>
 80062b2:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <Displ_WChar+0x224>)
 80062b4:	e000      	b.n	80062b8 <Displ_WChar+0x1fc>
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <Displ_WChar+0x220>)
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <Displ_WChar+0x210>)
 80062ba:	6013      	str	r3, [r2, #0]

}
 80062bc:	bf00      	nop
 80062be:	3734      	adds	r7, #52	; 0x34
 80062c0:	46bd      	mov	sp, r7
 80062c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80062c6:	b002      	add	sp, #8
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20000038 	.word	0x20000038
 80062d0:	08014ea0 	.word	0x08014ea0
 80062d4:	08010d74 	.word	0x08010d74
 80062d8:	08010d94 	.word	0x08010d94
 80062dc:	20008cf0 	.word	0x20008cf0
 80062e0:	200094f0 	.word	0x200094f0

080062e4 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	4604      	mov	r4, r0
 80062ec:	4608      	mov	r0, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	80fb      	strh	r3, [r7, #6]
 80062f6:	4603      	mov	r3, r0
 80062f8:	80bb      	strh	r3, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	807b      	strh	r3, [r7, #2]
 80062fe:	4613      	mov	r3, r2
 8006300:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006302:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006306:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800630a:	4293      	cmp	r3, r2
 800630c:	bfa8      	it	ge
 800630e:	4613      	movge	r3, r2
 8006310:	b21b      	sxth	r3, r3
 8006312:	0fda      	lsrs	r2, r3, #31
 8006314:	4413      	add	r3, r2
 8006316:	105b      	asrs	r3, r3, #1
 8006318:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 800631a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800631e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006322:	429a      	cmp	r2, r3
 8006324:	dd01      	ble.n	800632a <Displ_drawRoundRect+0x46>
 8006326:	89fb      	ldrh	r3, [r7, #14]
 8006328:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	8c3b      	ldrh	r3, [r7, #32]
 800632e:	4413      	add	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	b218      	sxth	r0, r3
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	4413      	add	r3, r2
 800633a:	b29a      	uxth	r2, r3
 800633c:	8c3b      	ldrh	r3, [r7, #32]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	b21a      	sxth	r2, r3
 8006348:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800634c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4623      	mov	r3, r4
 8006356:	f7ff fba6 	bl	8005aa6 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 800635a:	88fa      	ldrh	r2, [r7, #6]
 800635c:	8c3b      	ldrh	r3, [r7, #32]
 800635e:	4413      	add	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	b218      	sxth	r0, r3
 8006364:	88ba      	ldrh	r2, [r7, #4]
 8006366:	883b      	ldrh	r3, [r7, #0]
 8006368:	4413      	add	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29b      	uxth	r3, r3
 8006370:	b219      	sxth	r1, r3
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	4413      	add	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	8c3b      	ldrh	r3, [r7, #32]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	b21c      	sxth	r4, r3
 8006386:	88ba      	ldrh	r2, [r7, #4]
 8006388:	883b      	ldrh	r3, [r7, #0]
 800638a:	4413      	add	r3, r2
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	b21a      	sxth	r2, r3
 8006394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	4622      	mov	r2, r4
 800639c:	f7ff fb83 	bl	8005aa6 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 80063a0:	88ba      	ldrh	r2, [r7, #4]
 80063a2:	8c3b      	ldrh	r3, [r7, #32]
 80063a4:	4413      	add	r3, r2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	b219      	sxth	r1, r3
 80063aa:	88ba      	ldrh	r2, [r7, #4]
 80063ac:	883b      	ldrh	r3, [r7, #0]
 80063ae:	4413      	add	r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	8c3b      	ldrh	r3, [r7, #32]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	b21c      	sxth	r4, r3
 80063be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80063c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7ff fb6b 	bl	8005aa6 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	887b      	ldrh	r3, [r7, #2]
 80063d4:	4413      	add	r3, r2
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29b      	uxth	r3, r3
 80063dc:	b218      	sxth	r0, r3
 80063de:	88ba      	ldrh	r2, [r7, #4]
 80063e0:	8c3b      	ldrh	r3, [r7, #32]
 80063e2:	4413      	add	r3, r2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	b219      	sxth	r1, r3
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	4413      	add	r3, r2
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	b21c      	sxth	r4, r3
 80063f6:	88ba      	ldrh	r2, [r7, #4]
 80063f8:	883b      	ldrh	r3, [r7, #0]
 80063fa:	4413      	add	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	8c3b      	ldrh	r3, [r7, #32]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	b21a      	sxth	r2, r3
 800640a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4613      	mov	r3, r2
 8006410:	4622      	mov	r2, r4
 8006412:	f7ff fb48 	bl	8005aa6 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	8c3b      	ldrh	r3, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	b29b      	uxth	r3, r3
 800641e:	b218      	sxth	r0, r3
 8006420:	88ba      	ldrh	r2, [r7, #4]
 8006422:	8c3b      	ldrh	r3, [r7, #32]
 8006424:	4413      	add	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	b219      	sxth	r1, r3
 800642a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800642e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2301      	movs	r3, #1
 8006434:	f7ff f96a 	bl	800570c <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	887b      	ldrh	r3, [r7, #2]
 800643c:	4413      	add	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	8c3b      	ldrh	r3, [r7, #32]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	b218      	sxth	r0, r3
 800644c:	88ba      	ldrh	r2, [r7, #4]
 800644e:	8c3b      	ldrh	r3, [r7, #32]
 8006450:	4413      	add	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	b219      	sxth	r1, r3
 8006456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800645a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	2302      	movs	r3, #2
 8006460:	f7ff f954 	bl	800570c <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	4413      	add	r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	8c3b      	ldrh	r3, [r7, #32]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	b218      	sxth	r0, r3
 8006478:	88ba      	ldrh	r2, [r7, #4]
 800647a:	883b      	ldrh	r3, [r7, #0]
 800647c:	4413      	add	r3, r2
 800647e:	b29a      	uxth	r2, r3
 8006480:	8c3b      	ldrh	r3, [r7, #32]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29b      	uxth	r3, r3
 800648a:	b219      	sxth	r1, r3
 800648c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2304      	movs	r3, #4
 8006496:	f7ff f939 	bl	800570c <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	8c3b      	ldrh	r3, [r7, #32]
 800649e:	4413      	add	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	b218      	sxth	r0, r3
 80064a4:	88ba      	ldrh	r2, [r7, #4]
 80064a6:	883b      	ldrh	r3, [r7, #0]
 80064a8:	4413      	add	r3, r2
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	8c3b      	ldrh	r3, [r7, #32]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b219      	sxth	r1, r3
 80064b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80064bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2308      	movs	r3, #8
 80064c2:	f7ff f923 	bl	800570c <drawCircleHelper>
}
 80064c6:	bf00      	nop
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}

080064ce <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80064ce:	b590      	push	{r4, r7, lr}
 80064d0:	b087      	sub	sp, #28
 80064d2:	af02      	add	r7, sp, #8
 80064d4:	4604      	mov	r4, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	461a      	mov	r2, r3
 80064dc:	4623      	mov	r3, r4
 80064de:	80fb      	strh	r3, [r7, #6]
 80064e0:	4603      	mov	r3, r0
 80064e2:	80bb      	strh	r3, [r7, #4]
 80064e4:	460b      	mov	r3, r1
 80064e6:	807b      	strh	r3, [r7, #2]
 80064e8:	4613      	mov	r3, r2
 80064ea:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80064ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 80064f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	bfa8      	it	ge
 80064f8:	4613      	movge	r3, r2
 80064fa:	b21b      	sxth	r3, r3
 80064fc:	0fda      	lsrs	r2, r3, #31
 80064fe:	4413      	add	r3, r2
 8006500:	105b      	asrs	r3, r3, #1
 8006502:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800650c:	429a      	cmp	r2, r3
 800650e:	dd01      	ble.n	8006514 <Displ_fillRoundRect+0x46>
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	8c3b      	ldrh	r3, [r7, #32]
 8006518:	4413      	add	r3, r2
 800651a:	b298      	uxth	r0, r3
 800651c:	88b9      	ldrh	r1, [r7, #4]
 800651e:	887a      	ldrh	r2, [r7, #2]
 8006520:	8c3b      	ldrh	r3, [r7, #32]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	b29a      	uxth	r2, r3
 800652a:	883c      	ldrh	r4, [r7, #0]
 800652c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4623      	mov	r3, r4
 8006532:	f7fe ff1b 	bl	800536c <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8006536:	88fa      	ldrh	r2, [r7, #6]
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	4413      	add	r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	8c3b      	ldrh	r3, [r7, #32]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29b      	uxth	r3, r3
 8006548:	b218      	sxth	r0, r3
 800654a:	88ba      	ldrh	r2, [r7, #4]
 800654c:	8c3b      	ldrh	r3, [r7, #32]
 800654e:	4413      	add	r3, r2
 8006550:	b29b      	uxth	r3, r3
 8006552:	b219      	sxth	r1, r3
 8006554:	883a      	ldrh	r2, [r7, #0]
 8006556:	8c3b      	ldrh	r3, [r7, #32]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	b29b      	uxth	r3, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	b21b      	sxth	r3, r3
 8006566:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800656a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800656c:	9201      	str	r2, [sp, #4]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2301      	movs	r3, #1
 8006572:	4622      	mov	r2, r4
 8006574:	f7ff f98e 	bl	8005894 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	8c3b      	ldrh	r3, [r7, #32]
 800657c:	4413      	add	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	b218      	sxth	r0, r3
 8006582:	88ba      	ldrh	r2, [r7, #4]
 8006584:	8c3b      	ldrh	r3, [r7, #32]
 8006586:	4413      	add	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	b219      	sxth	r1, r3
 800658c:	883a      	ldrh	r2, [r7, #0]
 800658e:	8c3b      	ldrh	r3, [r7, #32]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	b21b      	sxth	r3, r3
 800659e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80065a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a4:	9201      	str	r2, [sp, #4]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2302      	movs	r3, #2
 80065aa:	4622      	mov	r2, r4
 80065ac:	f7ff f972 	bl	8005894 <fillCircleHelper>
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd90      	pop	{r4, r7, pc}

080065b8 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80065b8:	b082      	sub	sp, #8
 80065ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065bc:	b08b      	sub	sp, #44	; 0x2c
 80065be:	af06      	add	r7, sp, #24
 80065c0:	603a      	str	r2, [r7, #0]
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c4:	4603      	mov	r3, r0
 80065c6:	80fb      	strh	r3, [r7, #6]
 80065c8:	460b      	mov	r3, r1
 80065ca:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80065cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065ce:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80065d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d922      	bls.n	800661e <Displ_WString+0x66>
		delta<<=1;
 80065d8:	89fb      	ldrh	r3, [r7, #14]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80065de:	e01e      	b.n	800661e <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781a      	ldrb	r2, [r3, #0]
 80065e4:	88bd      	ldrh	r5, [r7, #4]
 80065e6:	88fc      	ldrh	r4, [r7, #6]
 80065e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80065ec:	9304      	str	r3, [sp, #16]
 80065ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80065f0:	9303      	str	r3, [sp, #12]
 80065f2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	466e      	mov	r6, sp
 80065fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006602:	e886 0003 	stmia.w	r6, {r0, r1}
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	4629      	mov	r1, r5
 800660a:	4620      	mov	r0, r4
 800660c:	f7ff fd56 	bl	80060bc <Displ_WChar>
        x += delta;
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	4413      	add	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
        str++;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1dc      	bne.n	80065e0 <Displ_WString+0x28>
    }
}
 8006626:	bf00      	nop
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006632:	b002      	add	sp, #8
 8006634:	4770      	bx	lr
	...

08006638 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b51      	cmp	r3, #81	; 0x51
 8006646:	d00a      	beq.n	800665e <Displ_BackLight+0x26>
 8006648:	2b51      	cmp	r3, #81	; 0x51
 800664a:	dc16      	bgt.n	800667a <Displ_BackLight+0x42>
 800664c:	2b46      	cmp	r3, #70	; 0x46
 800664e:	d008      	beq.n	8006662 <Displ_BackLight+0x2a>
 8006650:	2b46      	cmp	r3, #70	; 0x46
 8006652:	dc12      	bgt.n	800667a <Displ_BackLight+0x42>
 8006654:	2b30      	cmp	r3, #48	; 0x30
 8006656:	d00a      	beq.n	800666e <Displ_BackLight+0x36>
 8006658:	2b31      	cmp	r3, #49	; 0x31
 800665a:	d002      	beq.n	8006662 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 800665c:	e00d      	b.n	800667a <Displ_BackLight+0x42>
		__NOP();
 800665e:	bf00      	nop
		break;
 8006660:	e00c      	b.n	800667c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8006662:	2201      	movs	r2, #1
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	480a      	ldr	r0, [pc, #40]	; (8006690 <Displ_BackLight+0x58>)
 8006668:	f002 f86c 	bl	8008744 <HAL_GPIO_WritePin>
		break;
 800666c:	e006      	b.n	800667c <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800666e:	2200      	movs	r2, #0
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	4807      	ldr	r0, [pc, #28]	; (8006690 <Displ_BackLight+0x58>)
 8006674:	f002 f866 	bl	8008744 <HAL_GPIO_WritePin>
		break;
 8006678:	e000      	b.n	800667c <Displ_BackLight+0x44>
		break;
 800667a:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 800667c:	2140      	movs	r1, #64	; 0x40
 800667e:	4804      	ldr	r0, [pc, #16]	; (8006690 <Displ_BackLight+0x58>)
 8006680:	f002 f848 	bl	8008714 <HAL_GPIO_ReadPin>
 8006684:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40020000 	.word	0x40020000

08006694 <testLines>:




void testLines(uint16_t color)
{
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b08b      	sub	sp, #44	; 0x2c
 8006698:	af02      	add	r7, sp, #8
 800669a:	4603      	mov	r3, r0
 800669c:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 800669e:	4b7c      	ldr	r3, [pc, #496]	; (8006890 <testLines+0x1fc>)
 80066a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a4:	617b      	str	r3, [r7, #20]
                  h = _height;
 80066a6:	4b7b      	ldr	r3, [pc, #492]	; (8006894 <testLines+0x200>)
 80066a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ac:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80066ae:	2000      	movs	r0, #0
 80066b0:	f7ff f810 	bl	80056d4 <Displ_CLS>

    x1 = y1 = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	3b01      	subs	r3, #1
 80066c0:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e00f      	b.n	80066e8 <testLines+0x54>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	b218      	sxth	r0, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	b219      	sxth	r1, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	b21a      	sxth	r2, r3
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	b21c      	sxth	r4, r3
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	4623      	mov	r3, r4
 80066de:	f7ff f9e2 	bl	8005aa6 <Displ_Line>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3306      	adds	r3, #6
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	dbeb      	blt.n	80066c8 <testLines+0x34>
    x2    = w - 1;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e00f      	b.n	800671c <testLines+0x88>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	b218      	sxth	r0, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	b219      	sxth	r1, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	b21a      	sxth	r2, r3
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	b21c      	sxth	r4, r3
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4623      	mov	r3, r4
 8006712:	f7ff f9c8 	bl	8005aa6 <Displ_Line>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	3306      	adds	r3, #6
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	429a      	cmp	r2, r3
 8006722:	dbeb      	blt.n	80066fc <testLines+0x68>

    Displ_CLS(BLACK);
 8006724:	2000      	movs	r0, #0
 8006726:	f7fe ffd5 	bl	80056d4 <Displ_CLS>

    x1    = w - 1;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	3b01      	subs	r3, #1
 800672e:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3b01      	subs	r3, #1
 8006738:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e00f      	b.n	8006760 <testLines+0xcc>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	b218      	sxth	r0, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	b219      	sxth	r1, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	b21a      	sxth	r2, r3
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	b21c      	sxth	r4, r3
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4623      	mov	r3, r4
 8006756:	f7ff f9a6 	bl	8005aa6 <Displ_Line>
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3306      	adds	r3, #6
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	429a      	cmp	r2, r3
 8006766:	dbeb      	blt.n	8006740 <testLines+0xac>
    x2    = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	e00f      	b.n	8006792 <testLines+0xfe>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	b218      	sxth	r0, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	b219      	sxth	r1, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	b21a      	sxth	r2, r3
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	b21c      	sxth	r4, r3
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4623      	mov	r3, r4
 8006788:	f7ff f98d 	bl	8005aa6 <Displ_Line>
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	3306      	adds	r3, #6
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	dbeb      	blt.n	8006772 <testLines+0xde>

    Displ_CLS(BLACK);
 800679a:	2000      	movs	r0, #0
 800679c:	f7fe ff9a 	bl	80056d4 <Displ_CLS>

    x1    = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80067ae:	2300      	movs	r3, #0
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	e00f      	b.n	80067d4 <testLines+0x140>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	b218      	sxth	r0, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	b219      	sxth	r1, r3
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	b21a      	sxth	r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	b21c      	sxth	r4, r3
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4623      	mov	r3, r4
 80067ca:	f7ff f96c 	bl	8005aa6 <Displ_Line>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3306      	adds	r3, #6
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	429a      	cmp	r2, r3
 80067da:	dbeb      	blt.n	80067b4 <testLines+0x120>
    x2    = w - 1;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3b01      	subs	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e00f      	b.n	8006808 <testLines+0x174>
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	b218      	sxth	r0, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	b219      	sxth	r1, r3
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	b21a      	sxth	r2, r3
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	b21c      	sxth	r4, r3
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4623      	mov	r3, r4
 80067fe:	f7ff f952 	bl	8005aa6 <Displ_Line>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3306      	adds	r3, #6
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	429a      	cmp	r2, r3
 800680e:	dbeb      	blt.n	80067e8 <testLines+0x154>

    Displ_CLS(BLACK);
 8006810:	2000      	movs	r0, #0
 8006812:	f7fe ff5f 	bl	80056d4 <Displ_CLS>

    x1    = w - 1;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3b01      	subs	r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3b01      	subs	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	e00f      	b.n	800684c <testLines+0x1b8>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	b218      	sxth	r0, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	b219      	sxth	r1, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	b21a      	sxth	r2, r3
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	b21c      	sxth	r4, r3
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	4623      	mov	r3, r4
 8006842:	f7ff f930 	bl	8005aa6 <Displ_Line>
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3306      	adds	r3, #6
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	69fa      	ldr	r2, [r7, #28]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	429a      	cmp	r2, r3
 8006852:	dbeb      	blt.n	800682c <testLines+0x198>
    x2    = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e00f      	b.n	800687e <testLines+0x1ea>
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	b218      	sxth	r0, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	b219      	sxth	r1, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	b21a      	sxth	r2, r3
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	b21c      	sxth	r4, r3
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4623      	mov	r3, r4
 8006874:	f7ff f917 	bl	8005aa6 <Displ_Line>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	3306      	adds	r3, #6
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	dbeb      	blt.n	800685e <testLines+0x1ca>

}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	3724      	adds	r7, #36	; 0x24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd90      	pop	{r4, r7, pc}
 8006890:	20008cea 	.word	0x20008cea
 8006894:	20008cec 	.word	0x20008cec

08006898 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	4603      	mov	r3, r0
 80068a0:	460a      	mov	r2, r1
 80068a2:	80fb      	strh	r3, [r7, #6]
 80068a4:	4613      	mov	r3, r2
 80068a6:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80068a8:	4b20      	ldr	r3, [pc, #128]	; (800692c <testFastLines+0x94>)
 80068aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <testFastLines+0x98>)
 80068b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b6:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7fe ff0b 	bl	80056d4 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	e011      	b.n	80068e8 <testFastLines+0x50>
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	b219      	sxth	r1, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	b21a      	sxth	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b218      	sxth	r0, r3
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4603      	mov	r3, r0
 80068dc:	2000      	movs	r0, #0
 80068de:	f7ff f8e2 	bl	8005aa6 <Displ_Line>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3305      	adds	r3, #5
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	dbe9      	blt.n	80068c4 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e011      	b.n	800691a <testFastLines+0x82>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	b218      	sxth	r0, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	b21a      	sxth	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	b219      	sxth	r1, r3
 8006908:	88bb      	ldrh	r3, [r7, #4]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	460b      	mov	r3, r1
 800690e:	2100      	movs	r1, #0
 8006910:	f7ff f8c9 	bl	8005aa6 <Displ_Line>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3305      	adds	r3, #5
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	dbe9      	blt.n	80068f6 <testFastLines+0x5e>
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20008cea 	.word	0x20008cea
 8006930:	20008cec 	.word	0x20008cec

08006934 <testRects>:




void testRects(uint16_t color)
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b08b      	sub	sp, #44	; 0x2c
 8006938:	af02      	add	r7, sp, #8
 800693a:	4603      	mov	r3, r0
 800693c:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 800693e:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <testRects+0xa0>)
 8006940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006944:	0fda      	lsrs	r2, r3, #31
 8006946:	4413      	add	r3, r2
 8006948:	105b      	asrs	r3, r3, #1
 800694a:	b21b      	sxth	r3, r3
 800694c:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 800694e:	4b22      	ldr	r3, [pc, #136]	; (80069d8 <testRects+0xa4>)
 8006950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006954:	0fda      	lsrs	r2, r3, #31
 8006956:	4413      	add	r3, r2
 8006958:	105b      	asrs	r3, r3, #1
 800695a:	b21b      	sxth	r3, r3
 800695c:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800695e:	2000      	movs	r0, #0
 8006960:	f7fe feb8 	bl	80056d4 <Displ_CLS>
	n     = min(_width, _height);
 8006964:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <testRects+0xa4>)
 8006966:	f9b3 2000 	ldrsh.w	r2, [r3]
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <testRects+0xa0>)
 800696c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006970:	4293      	cmp	r3, r2
 8006972:	bfa8      	it	ge
 8006974:	4613      	movge	r3, r2
 8006976:	b21b      	sxth	r3, r3
 8006978:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 800697a:	2302      	movs	r3, #2
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	e020      	b.n	80069c2 <testRects+0x8e>
		i2 = i / 2;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	0fda      	lsrs	r2, r3, #31
 8006984:	4413      	add	r3, r2
 8006986:	105b      	asrs	r3, r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	b29b      	uxth	r3, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	b218      	sxth	r0, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	b219      	sxth	r1, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	b21a      	sxth	r2, r3
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	b21c      	sxth	r4, r3
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	2301      	movs	r3, #1
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4623      	mov	r3, r4
 80069b8:	f7ff f9a6 	bl	8005d08 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3306      	adds	r3, #6
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fa      	ldr	r2, [r7, #28]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	dbda      	blt.n	8006980 <testRects+0x4c>
	}
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	3724      	adds	r7, #36	; 0x24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd90      	pop	{r4, r7, pc}
 80069d4:	20008cea 	.word	0x20008cea
 80069d8:	20008cec 	.word	0x20008cec

080069dc <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 80069dc:	b590      	push	{r4, r7, lr}
 80069de:	b08b      	sub	sp, #44	; 0x2c
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	4603      	mov	r3, r0
 80069e4:	460a      	mov	r2, r1
 80069e6:	80fb      	strh	r3, [r7, #6]
 80069e8:	4613      	mov	r3, r2
 80069ea:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 80069ec:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <testFilledRects+0xd4>)
 80069ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f2:	0fda      	lsrs	r2, r3, #31
 80069f4:	4413      	add	r3, r2
 80069f6:	105b      	asrs	r3, r3, #1
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 80069fe:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <testFilledRects+0xd8>)
 8006a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a04:	0fda      	lsrs	r2, r3, #31
 8006a06:	4413      	add	r3, r2
 8006a08:	105b      	asrs	r3, r3, #1
 8006a0a:	b21b      	sxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006a10:	2000      	movs	r0, #0
 8006a12:	f7fe fe5f 	bl	80056d4 <Displ_CLS>
	n = min(_width, _height);
 8006a16:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <testFilledRects+0xd8>)
 8006a18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a1c:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <testFilledRects+0xd4>)
 8006a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	bfa8      	it	ge
 8006a26:	4613      	movge	r3, r2
 8006a28:	b21b      	sxth	r3, r3
 8006a2a:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	e035      	b.n	8006a9e <testFilledRects+0xc2>
		i2    = i / 2;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	0fda      	lsrs	r2, r3, #31
 8006a36:	4413      	add	r3, r2
 8006a38:	105b      	asrs	r3, r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	b298      	uxth	r0, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	b299      	uxth	r1, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	b29c      	uxth	r4, r3
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4623      	mov	r3, r4
 8006a62:	f7fe fc83 	bl	800536c <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	b218      	sxth	r0, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	b219      	sxth	r1, r3
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	b21a      	sxth	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	b21c      	sxth	r4, r3
 8006a8a:	88bb      	ldrh	r3, [r7, #4]
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	2301      	movs	r3, #1
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4623      	mov	r3, r4
 8006a94:	f7ff f938 	bl	8005d08 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	3b06      	subs	r3, #6
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dcc6      	bgt.n	8006a32 <testFilledRects+0x56>
	}
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3724      	adds	r7, #36	; 0x24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd90      	pop	{r4, r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20008cea 	.word	0x20008cea
 8006ab4:	20008cec 	.word	0x20008cec

08006ab8 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	71fb      	strb	r3, [r7, #7]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8006ac8:	4b18      	ldr	r3, [pc, #96]	; (8006b2c <testFilledCircles+0x74>)
 8006aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <testFilledCircles+0x78>)
 8006ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f7fe fdf8 	bl	80056d4 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	61fb      	str	r3, [r7, #28]
 8006ae8:	e017      	b.n	8006b1a <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e00c      	b.n	8006b0a <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	b218      	sxth	r0, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	b219      	sxth	r1, r3
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	b21a      	sxth	r2, r3
 8006afc:	88bb      	ldrh	r3, [r7, #4]
 8006afe:	f7fe ff9f 	bl	8005a40 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	dbee      	blt.n	8006af0 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	dbe3      	blt.n	8006aea <testFilledCircles+0x32>
        }
    }
}
 8006b22:	bf00      	nop
 8006b24:	bf00      	nop
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20008cea 	.word	0x20008cea
 8006b30:	20008cec 	.word	0x20008cec

08006b34 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	71fb      	strb	r3, [r7, #7]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8006b4a:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <testCircles+0x7c>)
 8006b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b50:	461a      	mov	r2, r3
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	4413      	add	r3, r2
 8006b56:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8006b58:	4b16      	ldr	r3, [pc, #88]	; (8006bb4 <testCircles+0x80>)
 8006b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	4413      	add	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8006b66:	2300      	movs	r3, #0
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	e017      	b.n	8006b9c <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e00c      	b.n	8006b8c <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	b218      	sxth	r0, r3
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	b219      	sxth	r1, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	b21a      	sxth	r2, r3
 8006b7e:	88bb      	ldrh	r3, [r7, #4]
 8006b80:	f7fe fcd4 	bl	800552c <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4413      	add	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	dbee      	blt.n	8006b72 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	dbe3      	blt.n	8006b6c <testCircles+0x38>
        }
    }
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20008cea 	.word	0x20008cea
 8006bb4:	20008cec 	.word	0x20008cec

08006bb8 <testTriangles>:




void testTriangles()
{
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	b089      	sub	sp, #36	; 0x24
 8006bbc:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <testTriangles+0xc0>)
 8006bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bc4:	0fda      	lsrs	r2, r3, #31
 8006bc6:	4413      	add	r3, r2
 8006bc8:	105b      	asrs	r3, r3, #1
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8006bd0:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <testTriangles+0xc4>)
 8006bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd6:	0fda      	lsrs	r2, r3, #31
 8006bd8:	4413      	add	r3, r2
 8006bda:	105b      	asrs	r3, r3, #1
 8006bdc:	b21b      	sxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006be2:	2000      	movs	r0, #0
 8006be4:	f7fe fd76 	bl	80056d4 <Displ_CLS>
    n     = min(cx, cy);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfa8      	it	ge
 8006bf0:	4613      	movge	r3, r2
 8006bf2:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e035      	b.n	8006c66 <testTriangles+0xae>
    	Displ_drawTriangle(
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006c0a:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006c18:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4413      	add	r3, r2
 8006c24:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006c26:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006c34:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	b291      	uxth	r1, r2
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	440a      	add	r2, r1
 8006c40:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8006c42:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	10c9      	asrs	r1, r1, #3
 8006c48:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8006c4a:	f001 011f 	and.w	r1, r1, #31
 8006c4e:	b289      	uxth	r1, r1
 8006c50:	9102      	str	r1, [sp, #8]
 8006c52:	9201      	str	r2, [sp, #4]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	4633      	mov	r3, r6
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	f7ff f897 	bl	8005d8e <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3305      	adds	r3, #5
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	dbc5      	blt.n	8006bfa <testTriangles+0x42>
    }
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c78:	20008cea 	.word	0x20008cea
 8006c7c:	20008cec 	.word	0x20008cec

08006c80 <testFilledTriangles>:





void testFilledTriangles() {
 8006c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8006c86:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <testFilledTriangles+0x154>)
 8006c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c8c:	0fda      	lsrs	r2, r3, #31
 8006c8e:	4413      	add	r3, r2
 8006c90:	105b      	asrs	r3, r3, #1
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8006c98:	4b4f      	ldr	r3, [pc, #316]	; (8006dd8 <testFilledTriangles+0x158>)
 8006c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c9e:	0fda      	lsrs	r2, r3, #31
 8006ca0:	4413      	add	r3, r2
 8006ca2:	105b      	asrs	r3, r3, #1
 8006ca4:	b21b      	sxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006caa:	2000      	movs	r0, #0
 8006cac:	f7fe fd12 	bl	80056d4 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	bfa8      	it	ge
 8006cb8:	4613      	movge	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e080      	b.n	8006dc0 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	b21c      	sxth	r4, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	b21d      	sxth	r5, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	b21e      	sxth	r6, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	fa0f fc83 	sxth.w	ip, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	b21b      	sxth	r3, r3
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	b291      	uxth	r1, r2
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	b292      	uxth	r2, r2
 8006d04:	440a      	add	r2, r1
 8006d06:	b292      	uxth	r2, r2
 8006d08:	b212      	sxth	r2, r2
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	00c9      	lsls	r1, r1, #3
 8006d0e:	b209      	sxth	r1, r1
 8006d10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8006d14:	b208      	sxth	r0, r1
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	10c9      	asrs	r1, r1, #3
 8006d1a:	b209      	sxth	r1, r1
 8006d1c:	f001 011f 	and.w	r1, r1, #31
 8006d20:	b209      	sxth	r1, r1
 8006d22:	4301      	orrs	r1, r0
 8006d24:	b209      	sxth	r1, r1
 8006d26:	b289      	uxth	r1, r1
 8006d28:	9102      	str	r1, [sp, #8]
 8006d2a:	9201      	str	r2, [sp, #4]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4663      	mov	r3, ip
 8006d30:	4632      	mov	r2, r6
 8006d32:	4629      	mov	r1, r5
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff f864 	bl	8005e02 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	b21c      	sxth	r4, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	b21d      	sxth	r5, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	b21e      	sxth	r6, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	fa0f fc83 	sxth.w	ip, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4413      	add	r3, r2
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	b21a      	sxth	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	b299      	uxth	r1, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	440b      	add	r3, r1
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b219      	sxth	r1, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	b21b      	sxth	r3, r3
 8006d8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	b218      	sxth	r0, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006da0:	b21b      	sxth	r3, r3
 8006da2:	4303      	orrs	r3, r0
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	9302      	str	r3, [sp, #8]
 8006daa:	9101      	str	r1, [sp, #4]
 8006dac:	9200      	str	r2, [sp, #0]
 8006dae:	4663      	mov	r3, ip
 8006db0:	4632      	mov	r2, r6
 8006db2:	4629      	mov	r1, r5
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7fe ffea 	bl	8005d8e <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b05      	subs	r3, #5
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b0a      	cmp	r3, #10
 8006dc4:	f73f af7b 	bgt.w	8006cbe <testFilledTriangles+0x3e>
    }
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20008cea 	.word	0x20008cea
 8006dd8:	20008cec 	.word	0x20008cec

08006ddc <testRoundRects>:





void testRoundRects() {
 8006ddc:	b5b0      	push	{r4, r5, r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8006de2:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <testRoundRects+0xd4>)
 8006de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006de8:	0fda      	lsrs	r2, r3, #31
 8006dea:	4413      	add	r3, r2
 8006dec:	105b      	asrs	r3, r3, #1
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8006df4:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <testRoundRects+0xd8>)
 8006df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dfa:	0fda      	lsrs	r2, r3, #31
 8006dfc:	4413      	add	r3, r2
 8006dfe:	105b      	asrs	r3, r3, #1
 8006e00:	b21b      	sxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7fe fc64 	bl	80056d4 <Displ_CLS>
    w     = min(_width, _height);
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <testRoundRects+0xd8>)
 8006e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e12:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <testRoundRects+0xd4>)
 8006e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	bfa8      	it	ge
 8006e1c:	4613      	movge	r3, r2
 8006e1e:	b21b      	sxth	r3, r3
 8006e20:	60fb      	str	r3, [r7, #12]
    red = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8006e26:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e30:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e031      	b.n	8006e9c <testRoundRects+0xc0>
        i2 = i / 2;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	0fda      	lsrs	r2, r3, #31
 8006e3c:	4413      	add	r3, r2
 8006e3e:	105b      	asrs	r3, r3, #1
 8006e40:	607b      	str	r3, [r7, #4]
        red += step;
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4413      	add	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	b218      	sxth	r0, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b219      	sxth	r1, r3
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	b21c      	sxth	r4, r3
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	b21d      	sxth	r5, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da00      	bge.n	8006e76 <testRoundRects+0x9a>
 8006e74:	3307      	adds	r3, #7
 8006e76:	10db      	asrs	r3, r3, #3
 8006e78:	b21a      	sxth	r2, r3
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e84:	f023 0307 	bic.w	r3, r3, #7
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	9200      	str	r2, [sp, #0]
 8006e8e:	462b      	mov	r3, r5
 8006e90:	4622      	mov	r2, r4
 8006e92:	f7ff fa27 	bl	80062e4 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3306      	adds	r3, #6
 8006e9a:	61fb      	str	r3, [r7, #28]
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	dbc9      	blt.n	8006e38 <testRoundRects+0x5c>
    }
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdb0      	pop	{r4, r5, r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20008cea 	.word	0x20008cea
 8006eb4:	20008cec 	.word	0x20008cec

08006eb8 <testFilledRoundRects>:





void testFilledRoundRects() {
 8006eb8:	b5b0      	push	{r4, r5, r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8006ebe:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <testFilledRoundRects+0xe0>)
 8006ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ec4:	0fda      	lsrs	r2, r3, #31
 8006ec6:	4413      	add	r3, r2
 8006ec8:	105b      	asrs	r3, r3, #1
 8006eca:	b21b      	sxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8006ed0:	4b32      	ldr	r3, [pc, #200]	; (8006f9c <testFilledRoundRects+0xe4>)
 8006ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed6:	0fda      	lsrs	r2, r3, #31
 8006ed8:	4413      	add	r3, r2
 8006eda:	105b      	asrs	r3, r3, #1
 8006edc:	b21b      	sxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f7fe fbf6 	bl	80056d4 <Displ_CLS>
    green = 256;
 8006ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eec:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8006eee:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <testFilledRoundRects+0xe4>)
 8006ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ef4:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <testFilledRoundRects+0xe0>)
 8006ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006efa:	4293      	cmp	r3, r2
 8006efc:	bfa8      	it	ge
 8006efe:	4613      	movge	r3, r2
 8006f00:	b21b      	sxth	r3, r3
 8006f02:	461a      	mov	r2, r3
 8006f04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f0c:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006f0e:	4b23      	ldr	r3, [pc, #140]	; (8006f9c <testFilledRoundRects+0xe4>)
 8006f10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006f14:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <testFilledRoundRects+0xe0>)
 8006f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	bfa8      	it	ge
 8006f1e:	4613      	movge	r3, r2
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e02f      	b.n	8006f86 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	0fda      	lsrs	r2, r3, #31
 8006f2a:	4413      	add	r3, r2
 8006f2c:	105b      	asrs	r3, r3, #1
 8006f2e:	603b      	str	r3, [r7, #0]
        green -= step;
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	b218      	sxth	r0, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	b219      	sxth	r1, r3
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	b21c      	sxth	r4, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	b21d      	sxth	r5, r3
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da00      	bge.n	8006f64 <testFilledRoundRects+0xac>
 8006f62:	3307      	adds	r3, #7
 8006f64:	10db      	asrs	r3, r3, #3
 8006f66:	b21b      	sxth	r3, r3
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	00d2      	lsls	r2, r2, #3
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8006f72:	b292      	uxth	r2, r2
 8006f74:	9201      	str	r2, [sp, #4]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	462b      	mov	r3, r5
 8006f7a:	4622      	mov	r2, r4
 8006f7c:	f7ff faa7 	bl	80064ce <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	3b06      	subs	r3, #6
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b14      	cmp	r3, #20
 8006f8a:	dccc      	bgt.n	8006f26 <testFilledRoundRects+0x6e>
    }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdb0      	pop	{r4, r5, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20008cea 	.word	0x20008cea
 8006f9c:	20008cec 	.word	0x20008cec

08006fa0 <testFillScreen>:




void testFillScreen()
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8006fa4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006fa8:	f7fe fb94 	bl	80056d4 <Displ_CLS>
	Displ_CLS(GREEN);
 8006fac:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006fb0:	f7fe fb90 	bl	80056d4 <Displ_CLS>
	Displ_CLS(BLUE);
 8006fb4:	201f      	movs	r0, #31
 8006fb6:	f7fe fb8d 	bl	80056d4 <Displ_CLS>
	Displ_CLS(YELLOW);
 8006fba:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006fbe:	f7fe fb89 	bl	80056d4 <Displ_CLS>
	Displ_CLS(BLACK);
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	f7fe fb86 	bl	80056d4 <Displ_CLS>
}
 8006fc8:	bf00      	nop
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <Displ_TestAll>:





void Displ_TestAll (){
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
	testFillScreen();
 8006fd0:	f7ff ffe6 	bl	8006fa0 <testFillScreen>
	testLines(CYAN);
 8006fd4:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8006fd8:	f7ff fb5c 	bl	8006694 <testLines>
	testFastLines(RED, BLUE);
 8006fdc:	211f      	movs	r1, #31
 8006fde:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006fe2:	f7ff fc59 	bl	8006898 <testFastLines>
	testRects(GREEN);
 8006fe6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006fea:	f7ff fca3 	bl	8006934 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8006fee:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006ff2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006ff6:	f7ff fcf1 	bl	80069dc <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8006ffa:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006ffe:	200a      	movs	r0, #10
 8007000:	f7ff fd5a 	bl	8006ab8 <testFilledCircles>
	testCircles(10, WHITE);
 8007004:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007008:	200a      	movs	r0, #10
 800700a:	f7ff fd93 	bl	8006b34 <testCircles>
	testTriangles();
 800700e:	f7ff fdd3 	bl	8006bb8 <testTriangles>
	testFilledTriangles();
 8007012:	f7ff fe35 	bl	8006c80 <testFilledTriangles>
	testRoundRects();
 8007016:	f7ff fee1 	bl	8006ddc <testRoundRects>
	testFilledRoundRects();
 800701a:	f7ff ff4d 	bl	8006eb8 <testFilledRoundRects>
}
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <Reset_Handler>:
 8007024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800705c <LoopFillZerobss+0x12>
 8007028:	480d      	ldr	r0, [pc, #52]	; (8007060 <LoopFillZerobss+0x16>)
 800702a:	490e      	ldr	r1, [pc, #56]	; (8007064 <LoopFillZerobss+0x1a>)
 800702c:	4a0e      	ldr	r2, [pc, #56]	; (8007068 <LoopFillZerobss+0x1e>)
 800702e:	2300      	movs	r3, #0
 8007030:	e002      	b.n	8007038 <LoopCopyDataInit>

08007032 <CopyDataInit>:
 8007032:	58d4      	ldr	r4, [r2, r3]
 8007034:	50c4      	str	r4, [r0, r3]
 8007036:	3304      	adds	r3, #4

08007038 <LoopCopyDataInit>:
 8007038:	18c4      	adds	r4, r0, r3
 800703a:	428c      	cmp	r4, r1
 800703c:	d3f9      	bcc.n	8007032 <CopyDataInit>
 800703e:	4a0b      	ldr	r2, [pc, #44]	; (800706c <LoopFillZerobss+0x22>)
 8007040:	4c0b      	ldr	r4, [pc, #44]	; (8007070 <LoopFillZerobss+0x26>)
 8007042:	2300      	movs	r3, #0
 8007044:	e001      	b.n	800704a <LoopFillZerobss>

08007046 <FillZerobss>:
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	3204      	adds	r2, #4

0800704a <LoopFillZerobss>:
 800704a:	42a2      	cmp	r2, r4
 800704c:	d3fb      	bcc.n	8007046 <FillZerobss>
 800704e:	f7fd fd97 	bl	8004b80 <SystemInit>
 8007052:	f006 f9d9 	bl	800d408 <__libc_init_array>
 8007056:	f7fc f9f1 	bl	800343c <main>
 800705a:	4770      	bx	lr
 800705c:	20020000 	.word	0x20020000
 8007060:	20000000 	.word	0x20000000
 8007064:	20000220 	.word	0x20000220
 8007068:	08015250 	.word	0x08015250
 800706c:	20000220 	.word	0x20000220
 8007070:	20009e48 	.word	0x20009e48

08007074 <ADC_IRQHandler>:
 8007074:	e7fe      	b.n	8007074 <ADC_IRQHandler>
	...

08007078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <HAL_Init+0x40>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0d      	ldr	r2, [pc, #52]	; (80070b8 <HAL_Init+0x40>)
 8007082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <HAL_Init+0x40>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_Init+0x40>)
 800708e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <HAL_Init+0x40>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a07      	ldr	r2, [pc, #28]	; (80070b8 <HAL_Init+0x40>)
 800709a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800709e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070a0:	2003      	movs	r0, #3
 80070a2:	f000 fd53 	bl	8007b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070a6:	2000      	movs	r0, #0
 80070a8:	f000 f808 	bl	80070bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070ac:	f7fd f942 	bl	8004334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023c00 	.word	0x40023c00

080070bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070c4:	4b12      	ldr	r3, [pc, #72]	; (8007110 <HAL_InitTick+0x54>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_InitTick+0x58>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fd6b 	bl	8007bb6 <HAL_SYSTICK_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e00e      	b.n	8007108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b0f      	cmp	r3, #15
 80070ee:	d80a      	bhi.n	8007106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f0:	2200      	movs	r2, #0
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f8:	f000 fd33 	bl	8007b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070fc:	4a06      	ldr	r2, [pc, #24]	; (8007118 <HAL_InitTick+0x5c>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000030 	.word	0x20000030
 8007114:	20000040 	.word	0x20000040
 8007118:	2000003c 	.word	0x2000003c

0800711c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_IncTick+0x20>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <HAL_IncTick+0x24>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4413      	add	r3, r2
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_IncTick+0x24>)
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000040 	.word	0x20000040
 8007140:	20009cf8 	.word	0x20009cf8

08007144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return uwTick;
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <HAL_GetTick+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20009cf8 	.word	0x20009cf8

0800715c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007164:	f7ff ffee 	bl	8007144 <HAL_GetTick>
 8007168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007174:	d005      	beq.n	8007182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <HAL_Delay+0x44>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007182:	bf00      	nop
 8007184:	f7ff ffde 	bl	8007144 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	429a      	cmp	r2, r3
 8007192:	d8f7      	bhi.n	8007184 <HAL_Delay+0x28>
  {
  }
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000040 	.word	0x20000040

080071a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e033      	b.n	8007222 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fd f8de 	bl	8004384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071ea:	f023 0302 	bic.w	r3, r3, #2
 80071ee:	f043 0202 	orr.w	r2, r3, #2
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa5a 	bl	80076b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	f043 0201 	orr.w	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
 8007212:	e001      	b.n	8007218 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_ADC_Start_DMA+0x1e>
 8007246:	2302      	movs	r3, #2
 8007248:	e0e9      	b.n	800741e <HAL_ADC_Start_DMA+0x1f2>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	d018      	beq.n	8007292 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007270:	4b6d      	ldr	r3, [pc, #436]	; (8007428 <HAL_ADC_Start_DMA+0x1fc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6d      	ldr	r2, [pc, #436]	; (800742c <HAL_ADC_Start_DMA+0x200>)
 8007276:	fba2 2303 	umull	r2, r3, r2, r3
 800727a:	0c9a      	lsrs	r2, r3, #18
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007284:	e002      	b.n	800728c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3b01      	subs	r3, #1
 800728a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f9      	bne.n	8007286 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a0:	d107      	bne.n	80072b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f040 80a1 	bne.w	8007404 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d106      	bne.n	8007310 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	f023 0206 	bic.w	r2, r3, #6
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	645a      	str	r2, [r3, #68]	; 0x44
 800730e:	e002      	b.n	8007316 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800731e:	4b44      	ldr	r3, [pc, #272]	; (8007430 <HAL_ADC_Start_DMA+0x204>)
 8007320:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	4a43      	ldr	r2, [pc, #268]	; (8007434 <HAL_ADC_Start_DMA+0x208>)
 8007328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	4a42      	ldr	r2, [pc, #264]	; (8007438 <HAL_ADC_Start_DMA+0x20c>)
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	4a41      	ldr	r2, [pc, #260]	; (800743c <HAL_ADC_Start_DMA+0x210>)
 8007338:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007342:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007352:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007362:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	334c      	adds	r3, #76	; 0x4c
 800736e:	4619      	mov	r1, r3
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f000 fcda 	bl	8007d2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	2b00      	cmp	r3, #0
 8007382:	d12a      	bne.n	80073da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <HAL_ADC_Start_DMA+0x214>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d015      	beq.n	80073ba <HAL_ADC_Start_DMA+0x18e>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2c      	ldr	r2, [pc, #176]	; (8007444 <HAL_ADC_Start_DMA+0x218>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d105      	bne.n	80073a4 <HAL_ADC_Start_DMA+0x178>
 8007398:	4b25      	ldr	r3, [pc, #148]	; (8007430 <HAL_ADC_Start_DMA+0x204>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a27      	ldr	r2, [pc, #156]	; (8007448 <HAL_ADC_Start_DMA+0x21c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d136      	bne.n	800741c <HAL_ADC_Start_DMA+0x1f0>
 80073ae:	4b20      	ldr	r3, [pc, #128]	; (8007430 <HAL_ADC_Start_DMA+0x204>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d130      	bne.n	800741c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d129      	bne.n	800741c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	e020      	b.n	800741c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a18      	ldr	r2, [pc, #96]	; (8007440 <HAL_ADC_Start_DMA+0x214>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d11b      	bne.n	800741c <HAL_ADC_Start_DMA+0x1f0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d114      	bne.n	800741c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007400:	609a      	str	r2, [r3, #8]
 8007402:	e00b      	b.n	800741c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	f043 0210 	orr.w	r2, r3, #16
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007414:	f043 0201 	orr.w	r2, r3, #1
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000030 	.word	0x20000030
 800742c:	431bde83 	.word	0x431bde83
 8007430:	40012300 	.word	0x40012300
 8007434:	080078a9 	.word	0x080078a9
 8007438:	08007963 	.word	0x08007963
 800743c:	0800797f 	.word	0x0800797f
 8007440:	40012000 	.word	0x40012000
 8007444:	40012100 	.word	0x40012100
 8007448:	40012200 	.word	0x40012200

0800744c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_ADC_ConfigChannel+0x1c>
 8007464:	2302      	movs	r3, #2
 8007466:	e113      	b.n	8007690 <HAL_ADC_ConfigChannel+0x244>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d925      	bls.n	80074c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68d9      	ldr	r1, [r3, #12]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	3b1e      	subs	r3, #30
 800748e:	2207      	movs	r2, #7
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	43da      	mvns	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	400a      	ands	r2, r1
 800749c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68d9      	ldr	r1, [r3, #12]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	4618      	mov	r0, r3
 80074b0:	4603      	mov	r3, r0
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	4403      	add	r3, r0
 80074b6:	3b1e      	subs	r3, #30
 80074b8:	409a      	lsls	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	60da      	str	r2, [r3, #12]
 80074c2:	e022      	b.n	800750a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6919      	ldr	r1, [r3, #16]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	4613      	mov	r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4413      	add	r3, r2
 80074d8:	2207      	movs	r2, #7
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43da      	mvns	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	400a      	ands	r2, r1
 80074e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6919      	ldr	r1, [r3, #16]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	4618      	mov	r0, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4403      	add	r3, r0
 8007500:	409a      	lsls	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b06      	cmp	r3, #6
 8007510:	d824      	bhi.n	800755c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	3b05      	subs	r3, #5
 8007524:	221f      	movs	r2, #31
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	43da      	mvns	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	400a      	ands	r2, r1
 8007532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	4618      	mov	r0, r3
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	3b05      	subs	r3, #5
 800754e:	fa00 f203 	lsl.w	r2, r0, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	635a      	str	r2, [r3, #52]	; 0x34
 800755a:	e04c      	b.n	80075f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b0c      	cmp	r3, #12
 8007562:	d824      	bhi.n	80075ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	3b23      	subs	r3, #35	; 0x23
 8007576:	221f      	movs	r2, #31
 8007578:	fa02 f303 	lsl.w	r3, r2, r3
 800757c:	43da      	mvns	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	400a      	ands	r2, r1
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	4618      	mov	r0, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	3b23      	subs	r3, #35	; 0x23
 80075a0:	fa00 f203 	lsl.w	r2, r0, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
 80075ac:	e023      	b.n	80075f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	3b41      	subs	r3, #65	; 0x41
 80075c0:	221f      	movs	r2, #31
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43da      	mvns	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	400a      	ands	r2, r1
 80075ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4618      	mov	r0, r3
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	3b41      	subs	r3, #65	; 0x41
 80075ea:	fa00 f203 	lsl.w	r2, r0, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075f6:	4b29      	ldr	r3, [pc, #164]	; (800769c <HAL_ADC_ConfigChannel+0x250>)
 80075f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <HAL_ADC_ConfigChannel+0x254>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10f      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x1d8>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b12      	cmp	r3, #18
 800760a:	d10b      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <HAL_ADC_ConfigChannel+0x254>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d12b      	bne.n	8007686 <HAL_ADC_ConfigChannel+0x23a>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <HAL_ADC_ConfigChannel+0x258>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <HAL_ADC_ConfigChannel+0x1f4>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b11      	cmp	r3, #17
 800763e:	d122      	bne.n	8007686 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <HAL_ADC_ConfigChannel+0x258>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d111      	bne.n	8007686 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <HAL_ADC_ConfigChannel+0x25c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a11      	ldr	r2, [pc, #68]	; (80076ac <HAL_ADC_ConfigChannel+0x260>)
 8007668:	fba2 2303 	umull	r2, r3, r2, r3
 800766c:	0c9a      	lsrs	r2, r3, #18
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007678:	e002      	b.n	8007680 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3b01      	subs	r3, #1
 800767e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f9      	bne.n	800767a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	40012300 	.word	0x40012300
 80076a0:	40012000 	.word	0x40012000
 80076a4:	10000012 	.word	0x10000012
 80076a8:	20000030 	.word	0x20000030
 80076ac:	431bde83 	.word	0x431bde83

080076b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076b8:	4b79      	ldr	r3, [pc, #484]	; (80078a0 <ADC_Init+0x1f0>)
 80076ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6859      	ldr	r1, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	021a      	lsls	r2, r3, #8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6899      	ldr	r1, [r3, #8]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	4a58      	ldr	r2, [pc, #352]	; (80078a4 <ADC_Init+0x1f4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d022      	beq.n	800778e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007756:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6899      	ldr	r1, [r3, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6899      	ldr	r1, [r3, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	e00f      	b.n	80077ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800779c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0202 	bic.w	r2, r2, #2
 80077bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6899      	ldr	r1, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7e1b      	ldrb	r3, [r3, #24]
 80077c8:	005a      	lsls	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80077fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	3b01      	subs	r3, #1
 8007808:	035a      	lsls	r2, r3, #13
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e007      	b.n	8007824 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007822:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	3b01      	subs	r3, #1
 8007840:	051a      	lsls	r2, r3, #20
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007858:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6899      	ldr	r1, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007866:	025a      	lsls	r2, r3, #9
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6899      	ldr	r1, [r3, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	029a      	lsls	r2, r3, #10
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40012300 	.word	0x40012300
 80078a4:	0f000001 	.word	0x0f000001

080078a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d13c      	bne.n	800793c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d12b      	bne.n	8007934 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d127      	bne.n	8007934 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d119      	bne.n	8007934 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0220 	bic.w	r2, r2, #32
 800790e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	f043 0201 	orr.w	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7fc fbd9 	bl	80040ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800793a:	e00e      	b.n	800795a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7fc fc0f 	bl	800416c <HAL_ADC_ErrorCallback>
}
 800794e:	e004      	b.n	800795a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7fc fbdb 	bl	800412c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f043 0204 	orr.w	r2, r3, #4
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7fc fbe4 	bl	800416c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <__NVIC_SetPriorityGrouping+0x44>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079c8:	4013      	ands	r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079de:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <__NVIC_SetPriorityGrouping+0x44>)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	60d3      	str	r3, [r2, #12]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	e000ed00 	.word	0xe000ed00

080079f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079f8:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <__NVIC_GetPriorityGrouping+0x18>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	f003 0307 	and.w	r3, r3, #7
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	e000ed00 	.word	0xe000ed00

08007a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	db0b      	blt.n	8007a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	f003 021f 	and.w	r2, r3, #31
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <__NVIC_EnableIRQ+0x38>)
 8007a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	2001      	movs	r0, #1
 8007a32:	fa00 f202 	lsl.w	r2, r0, r2
 8007a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	e000e100 	.word	0xe000e100

08007a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	db0a      	blt.n	8007a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	490c      	ldr	r1, [pc, #48]	; (8007a98 <__NVIC_SetPriority+0x4c>)
 8007a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a6a:	0112      	lsls	r2, r2, #4
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	440b      	add	r3, r1
 8007a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a74:	e00a      	b.n	8007a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	4908      	ldr	r1, [pc, #32]	; (8007a9c <__NVIC_SetPriority+0x50>)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	3b04      	subs	r3, #4
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	440b      	add	r3, r1
 8007a8a:	761a      	strb	r2, [r3, #24]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	e000e100 	.word	0xe000e100
 8007a9c:	e000ed00 	.word	0xe000ed00

08007aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b089      	sub	sp, #36	; 0x24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f1c3 0307 	rsb	r3, r3, #7
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	bf28      	it	cs
 8007abe:	2304      	movcs	r3, #4
 8007ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2b06      	cmp	r3, #6
 8007ac8:	d902      	bls.n	8007ad0 <NVIC_EncodePriority+0x30>
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3b03      	subs	r3, #3
 8007ace:	e000      	b.n	8007ad2 <NVIC_EncodePriority+0x32>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	43da      	mvns	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	fa01 f303 	lsl.w	r3, r1, r3
 8007af2:	43d9      	mvns	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007af8:	4313      	orrs	r3, r2
         );
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3724      	adds	r7, #36	; 0x24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b18:	d301      	bcc.n	8007b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e00f      	b.n	8007b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b1e:	4a0a      	ldr	r2, [pc, #40]	; (8007b48 <SysTick_Config+0x40>)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b26:	210f      	movs	r1, #15
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b2c:	f7ff ff8e 	bl	8007a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <SysTick_Config+0x40>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b36:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <SysTick_Config+0x40>)
 8007b38:	2207      	movs	r2, #7
 8007b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	e000e010 	.word	0xe000e010

08007b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff29 	bl	80079ac <__NVIC_SetPriorityGrouping>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b086      	sub	sp, #24
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	4603      	mov	r3, r0
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b74:	f7ff ff3e 	bl	80079f4 <__NVIC_GetPriorityGrouping>
 8007b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	6978      	ldr	r0, [r7, #20]
 8007b80:	f7ff ff8e 	bl	8007aa0 <NVIC_EncodePriority>
 8007b84:	4602      	mov	r2, r0
 8007b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff ff5d 	bl	8007a4c <__NVIC_SetPriority>
}
 8007b92:	bf00      	nop
 8007b94:	3718      	adds	r7, #24
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff ff31 	bl	8007a10 <__NVIC_EnableIRQ>
}
 8007bae:	bf00      	nop
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ffa2 	bl	8007b08 <SysTick_Config>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007bdc:	f7ff fab2 	bl	8007144 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e099      	b.n	8007d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c0c:	e00f      	b.n	8007c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c0e:	f7ff fa99 	bl	8007144 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	d908      	bls.n	8007c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2203      	movs	r2, #3
 8007c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e078      	b.n	8007d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e8      	bne.n	8007c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	4b38      	ldr	r3, [pc, #224]	; (8007d28 <HAL_DMA_Init+0x158>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d107      	bne.n	8007c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c90:	4313      	orrs	r3, r2
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0307 	bic.w	r3, r3, #7
 8007cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d117      	bne.n	8007cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00e      	beq.n	8007cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fb0d 	bl	80082f4 <DMA_CheckFifoParam>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2240      	movs	r2, #64	; 0x40
 8007ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e016      	b.n	8007d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fac4 	bl	8008288 <DMA_CalcBaseAndBitshift>
 8007d00:	4603      	mov	r3, r0
 8007d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d08:	223f      	movs	r2, #63	; 0x3f
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	f010803f 	.word	0xf010803f

08007d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <HAL_DMA_Start_IT+0x26>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e040      	b.n	8007dd4 <HAL_DMA_Start_IT+0xa8>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d12f      	bne.n	8007dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fa56 	bl	800822c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d84:	223f      	movs	r2, #63	; 0x3f
 8007d86:	409a      	lsls	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0216 	orr.w	r2, r2, #22
 8007d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0208 	orr.w	r2, r2, #8
 8007db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0201 	orr.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e005      	b.n	8007dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007dea:	f7ff f9ab 	bl	8007144 <HAL_GetTick>
 8007dee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d008      	beq.n	8007e0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e052      	b.n	8007eb4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0216 	bic.w	r2, r2, #22
 8007e1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d103      	bne.n	8007e3e <HAL_DMA_Abort+0x62>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0208 	bic.w	r2, r2, #8
 8007e4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0201 	bic.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e5e:	e013      	b.n	8007e88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e60:	f7ff f970 	bl	8007144 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d90c      	bls.n	8007e88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2203      	movs	r2, #3
 8007e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e015      	b.n	8007eb4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e4      	bne.n	8007e60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	223f      	movs	r2, #63	; 0x3f
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d004      	beq.n	8007eda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2280      	movs	r2, #128	; 0x80
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e00c      	b.n	8007ef4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2205      	movs	r2, #5
 8007ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f0c:	4b8e      	ldr	r3, [pc, #568]	; (8008148 <HAL_DMA_IRQHandler+0x248>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a8e      	ldr	r2, [pc, #568]	; (800814c <HAL_DMA_IRQHandler+0x24c>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	0a9b      	lsrs	r3, r3, #10
 8007f18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4013      	ands	r3, r2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01a      	beq.n	8007f6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d013      	beq.n	8007f6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0204 	bic.w	r2, r2, #4
 8007f52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f58:	2208      	movs	r2, #8
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f64:	f043 0201 	orr.w	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f70:	2201      	movs	r2, #1
 8007f72:	409a      	lsls	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00b      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8e:	2201      	movs	r2, #1
 8007f90:	409a      	lsls	r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9a:	f043 0202 	orr.w	r2, r3, #2
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	f043 0204 	orr.w	r2, r3, #4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fdc:	2210      	movs	r2, #16
 8007fde:	409a      	lsls	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d043      	beq.n	8008070 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d03c      	beq.n	8008070 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffa:	2210      	movs	r2, #16
 8007ffc:	409a      	lsls	r2, r3
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d018      	beq.n	8008042 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d108      	bne.n	8008030 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d024      	beq.n	8008070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
 800802e:	e01f      	b.n	8008070 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
 8008040:	e016      	b.n	8008070 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d107      	bne.n	8008060 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0208 	bic.w	r2, r2, #8
 800805e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008074:	2220      	movs	r2, #32
 8008076:	409a      	lsls	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 808f 	beq.w	80081a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8087 	beq.w	80081a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	2220      	movs	r2, #32
 8008098:	409a      	lsls	r2, r3
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	d136      	bne.n	8008118 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0216 	bic.w	r2, r2, #22
 80080b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <HAL_DMA_IRQHandler+0x1da>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0208 	bic.w	r2, r2, #8
 80080e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ee:	223f      	movs	r2, #63	; 0x3f
 80080f0:	409a      	lsls	r2, r3
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810a:	2b00      	cmp	r3, #0
 800810c:	d07e      	beq.n	800820c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
        }
        return;
 8008116:	e079      	b.n	800820c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01d      	beq.n	8008162 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008138:	2b00      	cmp	r3, #0
 800813a:	d031      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
 8008144:	e02c      	b.n	80081a0 <HAL_DMA_IRQHandler+0x2a0>
 8008146:	bf00      	nop
 8008148:	20000030 	.word	0x20000030
 800814c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
 8008160:	e01e      	b.n	80081a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10f      	bne.n	8008190 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0210 	bic.w	r2, r2, #16
 800817e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d032      	beq.n	800820e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d022      	beq.n	80081fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2205      	movs	r2, #5
 80081b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0201 	bic.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60bb      	str	r3, [r7, #8]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d307      	bcc.n	80081e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1f2      	bne.n	80081cc <HAL_DMA_IRQHandler+0x2cc>
 80081e6:	e000      	b.n	80081ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80081e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	e000      	b.n	800820e <HAL_DMA_IRQHandler+0x30e>
        return;
 800820c:	bf00      	nop
    }
  }
}
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2b40      	cmp	r3, #64	; 0x40
 8008258:	d108      	bne.n	800826c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800826a:	e007      	b.n	800827c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	60da      	str	r2, [r3, #12]
}
 800827c:	bf00      	nop
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3b10      	subs	r3, #16
 8008298:	4a14      	ldr	r2, [pc, #80]	; (80082ec <DMA_CalcBaseAndBitshift+0x64>)
 800829a:	fba2 2303 	umull	r2, r3, r2, r3
 800829e:	091b      	lsrs	r3, r3, #4
 80082a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80082a2:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <DMA_CalcBaseAndBitshift+0x68>)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d909      	bls.n	80082ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082be:	f023 0303 	bic.w	r3, r3, #3
 80082c2:	1d1a      	adds	r2, r3, #4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	659a      	str	r2, [r3, #88]	; 0x58
 80082c8:	e007      	b.n	80082da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	aaaaaaab 	.word	0xaaaaaaab
 80082f0:	08014eac 	.word	0x08014eac

080082f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d11f      	bne.n	800834e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d856      	bhi.n	80083c2 <DMA_CheckFifoParam+0xce>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <DMA_CheckFifoParam+0x28>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	0800832d 	.word	0x0800832d
 8008320:	0800833f 	.word	0x0800833f
 8008324:	0800832d 	.word	0x0800832d
 8008328:	080083c3 	.word	0x080083c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d046      	beq.n	80083c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800833c:	e043      	b.n	80083c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008346:	d140      	bne.n	80083ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800834c:	e03d      	b.n	80083ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008356:	d121      	bne.n	800839c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d837      	bhi.n	80083ce <DMA_CheckFifoParam+0xda>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <DMA_CheckFifoParam+0x70>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	08008375 	.word	0x08008375
 8008368:	0800837b 	.word	0x0800837b
 800836c:	08008375 	.word	0x08008375
 8008370:	0800838d 	.word	0x0800838d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
      break;
 8008378:	e030      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d025      	beq.n	80083d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800838a:	e022      	b.n	80083d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008394:	d11f      	bne.n	80083d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800839a:	e01c      	b.n	80083d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d903      	bls.n	80083aa <DMA_CheckFifoParam+0xb6>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d003      	beq.n	80083b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80083a8:	e018      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	73fb      	strb	r3, [r7, #15]
      break;
 80083ae:	e015      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	e00b      	b.n	80083da <DMA_CheckFifoParam+0xe6>
      break;
 80083c2:	bf00      	nop
 80083c4:	e00a      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;
 80083c6:	bf00      	nop
 80083c8:	e008      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;
 80083ca:	bf00      	nop
 80083cc:	e006      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;
 80083ce:	bf00      	nop
 80083d0:	e004      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;
 80083d2:	bf00      	nop
 80083d4:	e002      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;   
 80083d6:	bf00      	nop
 80083d8:	e000      	b.n	80083dc <DMA_CheckFifoParam+0xe8>
      break;
 80083da:	bf00      	nop
    }
  } 
  
  return status; 
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b089      	sub	sp, #36	; 0x24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e165      	b.n	80086d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008408:	2201      	movs	r2, #1
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	fa02 f303 	lsl.w	r3, r2, r3
 8008410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4013      	ands	r3, r2
 800841a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	429a      	cmp	r2, r3
 8008422:	f040 8154 	bne.w	80086ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b01      	cmp	r3, #1
 8008430:	d005      	beq.n	800843e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800843a:	2b02      	cmp	r3, #2
 800843c:	d130      	bne.n	80084a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	2203      	movs	r2, #3
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	43db      	mvns	r3, r3
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	4013      	ands	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	fa02 f303 	lsl.w	r3, r2, r3
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	4313      	orrs	r3, r2
 8008466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008474:	2201      	movs	r2, #1
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	fa02 f303 	lsl.w	r3, r2, r3
 800847c:	43db      	mvns	r3, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4013      	ands	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	091b      	lsrs	r3, r3, #4
 800848a:	f003 0201 	and.w	r2, r3, #1
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	4313      	orrs	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d017      	beq.n	80084dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	2203      	movs	r2, #3
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	43db      	mvns	r3, r3
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	4013      	ands	r3, r2
 80084c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d123      	bne.n	8008530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	08da      	lsrs	r2, r3, #3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3208      	adds	r2, #8
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	220f      	movs	r2, #15
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	43db      	mvns	r3, r3
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	4013      	ands	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	fa02 f303 	lsl.w	r3, r2, r3
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	4313      	orrs	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	08da      	lsrs	r2, r3, #3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3208      	adds	r2, #8
 800852a:	69b9      	ldr	r1, [r7, #24]
 800852c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	2203      	movs	r2, #3
 800853c:	fa02 f303 	lsl.w	r3, r2, r3
 8008540:	43db      	mvns	r3, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4013      	ands	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f003 0203 	and.w	r2, r3, #3
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	4313      	orrs	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80ae 	beq.w	80086ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	4b5d      	ldr	r3, [pc, #372]	; (80086ec <HAL_GPIO_Init+0x300>)
 8008578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857a:	4a5c      	ldr	r2, [pc, #368]	; (80086ec <HAL_GPIO_Init+0x300>)
 800857c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008580:	6453      	str	r3, [r2, #68]	; 0x44
 8008582:	4b5a      	ldr	r3, [pc, #360]	; (80086ec <HAL_GPIO_Init+0x300>)
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800858e:	4a58      	ldr	r2, [pc, #352]	; (80086f0 <HAL_GPIO_Init+0x304>)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	089b      	lsrs	r3, r3, #2
 8008594:	3302      	adds	r3, #2
 8008596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	220f      	movs	r2, #15
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	43db      	mvns	r3, r3
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4013      	ands	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a4f      	ldr	r2, [pc, #316]	; (80086f4 <HAL_GPIO_Init+0x308>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d025      	beq.n	8008606 <HAL_GPIO_Init+0x21a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a4e      	ldr	r2, [pc, #312]	; (80086f8 <HAL_GPIO_Init+0x30c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d01f      	beq.n	8008602 <HAL_GPIO_Init+0x216>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a4d      	ldr	r2, [pc, #308]	; (80086fc <HAL_GPIO_Init+0x310>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d019      	beq.n	80085fe <HAL_GPIO_Init+0x212>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a4c      	ldr	r2, [pc, #304]	; (8008700 <HAL_GPIO_Init+0x314>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <HAL_GPIO_Init+0x20e>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a4b      	ldr	r2, [pc, #300]	; (8008704 <HAL_GPIO_Init+0x318>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00d      	beq.n	80085f6 <HAL_GPIO_Init+0x20a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a4a      	ldr	r2, [pc, #296]	; (8008708 <HAL_GPIO_Init+0x31c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <HAL_GPIO_Init+0x206>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a49      	ldr	r2, [pc, #292]	; (800870c <HAL_GPIO_Init+0x320>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <HAL_GPIO_Init+0x202>
 80085ea:	2306      	movs	r3, #6
 80085ec:	e00c      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 80085ee:	2307      	movs	r3, #7
 80085f0:	e00a      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 80085f2:	2305      	movs	r3, #5
 80085f4:	e008      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 80085f6:	2304      	movs	r3, #4
 80085f8:	e006      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 80085fa:	2303      	movs	r3, #3
 80085fc:	e004      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 80085fe:	2302      	movs	r3, #2
 8008600:	e002      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <HAL_GPIO_Init+0x21c>
 8008606:	2300      	movs	r3, #0
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	f002 0203 	and.w	r2, r2, #3
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	4093      	lsls	r3, r2
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008618:	4935      	ldr	r1, [pc, #212]	; (80086f0 <HAL_GPIO_Init+0x304>)
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	089b      	lsrs	r3, r3, #2
 800861e:	3302      	adds	r3, #2
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008626:	4b3a      	ldr	r3, [pc, #232]	; (8008710 <HAL_GPIO_Init+0x324>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	43db      	mvns	r3, r3
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	4013      	ands	r3, r2
 8008634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800864a:	4a31      	ldr	r2, [pc, #196]	; (8008710 <HAL_GPIO_Init+0x324>)
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008650:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <HAL_GPIO_Init+0x324>)
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	43db      	mvns	r3, r3
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	4013      	ands	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008674:	4a26      	ldr	r2, [pc, #152]	; (8008710 <HAL_GPIO_Init+0x324>)
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800867a:	4b25      	ldr	r3, [pc, #148]	; (8008710 <HAL_GPIO_Init+0x324>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	43db      	mvns	r3, r3
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	4013      	ands	r3, r2
 8008688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800869e:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <HAL_GPIO_Init+0x324>)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <HAL_GPIO_Init+0x324>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	43db      	mvns	r3, r3
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	4013      	ands	r3, r2
 80086b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d003      	beq.n	80086c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086c8:	4a11      	ldr	r2, [pc, #68]	; (8008710 <HAL_GPIO_Init+0x324>)
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	3301      	adds	r3, #1
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b0f      	cmp	r3, #15
 80086d8:	f67f ae96 	bls.w	8008408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3724      	adds	r7, #36	; 0x24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40023800 	.word	0x40023800
 80086f0:	40013800 	.word	0x40013800
 80086f4:	40020000 	.word	0x40020000
 80086f8:	40020400 	.word	0x40020400
 80086fc:	40020800 	.word	0x40020800
 8008700:	40020c00 	.word	0x40020c00
 8008704:	40021000 	.word	0x40021000
 8008708:	40021400 	.word	0x40021400
 800870c:	40021800 	.word	0x40021800
 8008710:	40013c00 	.word	0x40013c00

08008714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	887b      	ldrh	r3, [r7, #2]
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e001      	b.n	8008736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	807b      	strh	r3, [r7, #2]
 8008750:	4613      	mov	r3, r2
 8008752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008754:	787b      	ldrb	r3, [r7, #1]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800875a:	887a      	ldrh	r2, [r7, #2]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008760:	e003      	b.n	800876a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008762:	887b      	ldrh	r3, [r7, #2]
 8008764:	041a      	lsls	r2, r3, #16
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	619a      	str	r2, [r3, #24]
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008788:	887a      	ldrh	r2, [r7, #2]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4013      	ands	r3, r2
 800878e:	041a      	lsls	r2, r3, #16
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	43d9      	mvns	r1, r3
 8008794:	887b      	ldrh	r3, [r7, #2]
 8008796:	400b      	ands	r3, r1
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	619a      	str	r2, [r3, #24]
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
	...

080087ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80087b6:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d006      	beq.n	80087d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80087c2:	4a05      	ldr	r2, [pc, #20]	; (80087d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fb fc70 	bl	80040b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	40013c00 	.word	0x40013c00

080087dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e12b      	b.n	8008a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fb fed2 	bl	80045ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2224      	movs	r2, #36	; 0x24
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0201 	bic.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800882e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800883e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008840:	f001 f87c 	bl	800993c <HAL_RCC_GetPCLK1Freq>
 8008844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	4a81      	ldr	r2, [pc, #516]	; (8008a50 <HAL_I2C_Init+0x274>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d807      	bhi.n	8008860 <HAL_I2C_Init+0x84>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a80      	ldr	r2, [pc, #512]	; (8008a54 <HAL_I2C_Init+0x278>)
 8008854:	4293      	cmp	r3, r2
 8008856:	bf94      	ite	ls
 8008858:	2301      	movls	r3, #1
 800885a:	2300      	movhi	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	e006      	b.n	800886e <HAL_I2C_Init+0x92>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a7d      	ldr	r2, [pc, #500]	; (8008a58 <HAL_I2C_Init+0x27c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	bf94      	ite	ls
 8008868:	2301      	movls	r3, #1
 800886a:	2300      	movhi	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e0e7      	b.n	8008a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a78      	ldr	r2, [pc, #480]	; (8008a5c <HAL_I2C_Init+0x280>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	0c9b      	lsrs	r3, r3, #18
 8008880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4a6a      	ldr	r2, [pc, #424]	; (8008a50 <HAL_I2C_Init+0x274>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d802      	bhi.n	80088b0 <HAL_I2C_Init+0xd4>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3301      	adds	r3, #1
 80088ae:	e009      	b.n	80088c4 <HAL_I2C_Init+0xe8>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
 80088ba:	4a69      	ldr	r2, [pc, #420]	; (8008a60 <HAL_I2C_Init+0x284>)
 80088bc:	fba2 2303 	umull	r2, r3, r2, r3
 80088c0:	099b      	lsrs	r3, r3, #6
 80088c2:	3301      	adds	r3, #1
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	6812      	ldr	r2, [r2, #0]
 80088c8:	430b      	orrs	r3, r1
 80088ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80088d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	495c      	ldr	r1, [pc, #368]	; (8008a50 <HAL_I2C_Init+0x274>)
 80088e0:	428b      	cmp	r3, r1
 80088e2:	d819      	bhi.n	8008918 <HAL_I2C_Init+0x13c>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	1e59      	subs	r1, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80088f2:	1c59      	adds	r1, r3, #1
 80088f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088f8:	400b      	ands	r3, r1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_I2C_Init+0x138>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1e59      	subs	r1, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	fbb1 f3f3 	udiv	r3, r1, r3
 800890c:	3301      	adds	r3, #1
 800890e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008912:	e051      	b.n	80089b8 <HAL_I2C_Init+0x1dc>
 8008914:	2304      	movs	r3, #4
 8008916:	e04f      	b.n	80089b8 <HAL_I2C_Init+0x1dc>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d111      	bne.n	8008944 <HAL_I2C_Init+0x168>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	1e58      	subs	r0, r3, #1
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6859      	ldr	r1, [r3, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	440b      	add	r3, r1
 800892e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008932:	3301      	adds	r3, #1
 8008934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008938:	2b00      	cmp	r3, #0
 800893a:	bf0c      	ite	eq
 800893c:	2301      	moveq	r3, #1
 800893e:	2300      	movne	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e012      	b.n	800896a <HAL_I2C_Init+0x18e>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	1e58      	subs	r0, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6859      	ldr	r1, [r3, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	440b      	add	r3, r1
 8008952:	0099      	lsls	r1, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	fbb0 f3f3 	udiv	r3, r0, r3
 800895a:	3301      	adds	r3, #1
 800895c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008960:	2b00      	cmp	r3, #0
 8008962:	bf0c      	ite	eq
 8008964:	2301      	moveq	r3, #1
 8008966:	2300      	movne	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_I2C_Init+0x196>
 800896e:	2301      	movs	r3, #1
 8008970:	e022      	b.n	80089b8 <HAL_I2C_Init+0x1dc>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10e      	bne.n	8008998 <HAL_I2C_Init+0x1bc>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1e58      	subs	r0, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6859      	ldr	r1, [r3, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	440b      	add	r3, r1
 8008988:	fbb0 f3f3 	udiv	r3, r0, r3
 800898c:	3301      	adds	r3, #1
 800898e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008996:	e00f      	b.n	80089b8 <HAL_I2C_Init+0x1dc>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1e58      	subs	r0, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6859      	ldr	r1, [r3, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	0099      	lsls	r1, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ae:	3301      	adds	r3, #1
 80089b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	6809      	ldr	r1, [r1, #0]
 80089bc:	4313      	orrs	r3, r2
 80089be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	69da      	ldr	r2, [r3, #28]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80089e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6911      	ldr	r1, [r2, #16]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68d2      	ldr	r2, [r2, #12]
 80089f2:	4311      	orrs	r1, r2
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695a      	ldr	r2, [r3, #20]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	430a      	orrs	r2, r1
 8008a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	000186a0 	.word	0x000186a0
 8008a54:	001e847f 	.word	0x001e847f
 8008a58:	003d08ff 	.word	0x003d08ff
 8008a5c:	431bde83 	.word	0x431bde83
 8008a60:	10624dd3 	.word	0x10624dd3

08008a64 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	461a      	mov	r2, r3
 8008a72:	4603      	mov	r3, r0
 8008a74:	817b      	strh	r3, [r7, #10]
 8008a76:	460b      	mov	r3, r1
 8008a78:	813b      	strh	r3, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a7e:	f7fe fb61 	bl	8007144 <HAL_GetTick>
 8008a82:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	f040 8176 	bne.w	8008d82 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a96:	4b95      	ldr	r3, [pc, #596]	; (8008cec <HAL_I2C_Mem_Read_DMA+0x288>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	08db      	lsrs	r3, r3, #3
 8008a9c:	4a94      	ldr	r2, [pc, #592]	; (8008cf0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8008a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa2:	0a1a      	lsrs	r2, r3, #8
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009a      	lsls	r2, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d116      	bne.n	8008aea <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e14c      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d0db      	beq.n	8008ab0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_I2C_Mem_Read_DMA+0xa2>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e13e      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d007      	beq.n	8008b2c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0201 	orr.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2222      	movs	r2, #34	; 0x22
 8008b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2240      	movs	r2, #64	; 0x40
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4a62      	ldr	r2, [pc, #392]	; (8008cf4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8008b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008b6e:	897a      	ldrh	r2, [r7, #10]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8008b74:	893a      	ldrh	r2, [r7, #8]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80cc 	beq.w	8008d28 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d02d      	beq.n	8008bf4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	4a56      	ldr	r2, [pc, #344]	; (8008cf8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8008b9e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	4a55      	ldr	r2, [pc, #340]	; (8008cfc <HAL_I2C_Mem_Read_DMA+0x298>)
 8008ba6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	2200      	movs	r2, #0
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3310      	adds	r3, #16
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	f7ff f8a5 	bl	8007d2c <HAL_DMA_Start_IT>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 8087 	bne.w	8008d00 <HAL_I2C_Mem_Read_DMA+0x29c>
 8008bf2:	e013      	b.n	8008c1c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e0b3      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008c1c:	88f8      	ldrh	r0, [r7, #6]
 8008c1e:	893a      	ldrh	r2, [r7, #8]
 8008c20:	8979      	ldrh	r1, [r7, #10]
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	2323      	movs	r3, #35	; 0x23
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 fa03 	bl	8009038 <I2C_RequestMemoryRead>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d023      	beq.n	8008c80 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff f93d 	bl	8007ebc <HAL_DMA_Abort_IT>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0201 	bic.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e081      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d108      	bne.n	8008c9a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e007      	b.n	8008caa <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ca8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008caa:	2300      	movs	r3, #0
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	61bb      	str	r3, [r7, #24]
 8008cbe:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cd6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	e049      	b.n	8008d7e <HAL_I2C_Mem_Read_DMA+0x31a>
 8008cea:	bf00      	nop
 8008cec:	20000030 	.word	0x20000030
 8008cf0:	14f8b589 	.word	0x14f8b589
 8008cf4:	ffff0000 	.word	0xffff0000
 8008cf8:	08009209 	.word	0x08009209
 8008cfc:	080093b3 	.word	0x080093b3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d14:	f043 0210 	orr.w	r2, r3, #16
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e02d      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008d28:	88f8      	ldrh	r0, [r7, #6]
 8008d2a:	893a      	ldrh	r2, [r7, #8]
 8008d2c:	8979      	ldrh	r1, [r7, #10]
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	2323      	movs	r3, #35	; 0x23
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4603      	mov	r3, r0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 f97d 	bl	8009038 <I2C_RequestMemoryRead>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e01d      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d6c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8008d82:	2302      	movs	r3, #2
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3728      	adds	r7, #40	; 0x28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08a      	sub	sp, #40	; 0x28
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008d9c:	f7fe f9d2 	bl	8007144 <HAL_GetTick>
 8008da0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	f040 8111 	bne.w	8008fd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	2319      	movs	r3, #25
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4988      	ldr	r1, [pc, #544]	; (8008fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fb34 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e104      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d101      	bne.n	8008ddc <HAL_I2C_IsDeviceReady+0x50>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e0fd      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d007      	beq.n	8008e02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f042 0201 	orr.w	r2, r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2224      	movs	r2, #36	; 0x24
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a70      	ldr	r2, [pc, #448]	; (8008fe4 <HAL_I2C_IsDeviceReady+0x258>)
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 faf2 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5c:	d103      	bne.n	8008e66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e0b6      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e6a:	897b      	ldrh	r3, [r7, #10]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008e7a:	f7fe f963 	bl	8007144 <HAL_GetTick>
 8008e7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2301      	moveq	r3, #1
 8008e90:	2300      	movne	r3, #0
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	bf0c      	ite	eq
 8008ea6:	2301      	moveq	r3, #1
 8008ea8:	2300      	movne	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008eae:	e025      	b.n	8008efc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008eb0:	f7fe f948 	bl	8007144 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d302      	bcc.n	8008ec6 <HAL_I2C_IsDeviceReady+0x13a>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d103      	bne.n	8008ece <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	22a0      	movs	r2, #160	; 0xa0
 8008eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	bf0c      	ite	eq
 8008edc:	2301      	moveq	r3, #1
 8008ede:	2300      	movne	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2301      	moveq	r3, #1
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2ba0      	cmp	r3, #160	; 0xa0
 8008f06:	d005      	beq.n	8008f14 <HAL_I2C_IsDeviceReady+0x188>
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <HAL_I2C_IsDeviceReady+0x188>
 8008f0e:	7dbb      	ldrb	r3, [r7, #22]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0cd      	beq.n	8008eb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d129      	bne.n	8008f7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	613b      	str	r3, [r7, #16]
 8008f4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	2319      	movs	r3, #25
 8008f56:	2201      	movs	r2, #1
 8008f58:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fa66 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e036      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e02c      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2319      	movs	r3, #25
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	490f      	ldr	r1, [pc, #60]	; (8008fe0 <HAL_I2C_IsDeviceReady+0x254>)
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fa42 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e012      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	f4ff af32 	bcc.w	8008e26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008fd6:	2302      	movs	r3, #2
  }
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	00100002 	.word	0x00100002
 8008fe4:	ffff0000 	.word	0xffff0000

08008fe8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	817b      	strh	r3, [r7, #10]
 800904a:	460b      	mov	r3, r1
 800904c:	813b      	strh	r3, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	2200      	movs	r2, #0
 800907a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 f9d4 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009098:	d103      	bne.n	80090a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e0aa      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090a6:	897b      	ldrh	r3, [r7, #10]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	4952      	ldr	r1, [pc, #328]	; (8009204 <I2C_RequestMemoryRead+0x1cc>)
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fa0c 	bl	80094da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e097      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e4:	6a39      	ldr	r1, [r7, #32]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fa76 	bl	80095d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d107      	bne.n	800910a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e076      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d105      	bne.n	8009120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	611a      	str	r2, [r3, #16]
 800911e:	e021      	b.n	8009164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009120:	893b      	ldrh	r3, [r7, #8]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	b2da      	uxtb	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800912e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009130:	6a39      	ldr	r1, [r7, #32]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fa50 	bl	80095d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00d      	beq.n	800915a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b04      	cmp	r3, #4
 8009144:	d107      	bne.n	8009156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e050      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	b2da      	uxtb	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	6a39      	ldr	r1, [r7, #32]
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fa35 	bl	80095d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00d      	beq.n	8009190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	2b04      	cmp	r3, #4
 800917a:	d107      	bne.n	800918c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e035      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800919e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f93d 	bl	800942c <I2C_WaitOnFlagUntilTimeout>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00d      	beq.n	80091d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c6:	d103      	bne.n	80091d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e013      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80091d4:	897b      	ldrh	r3, [r7, #10]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	4906      	ldr	r1, [pc, #24]	; (8009204 <I2C_RequestMemoryRead+0x1cc>)
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 f975 	bl	80094da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	00010002 	.word	0x00010002

08009208 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009224:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800923a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009248:	2200      	movs	r2, #0
 800924a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	2200      	movs	r2, #0
 800925a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800925c:	7cfb      	ldrb	r3, [r7, #19]
 800925e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009262:	2b21      	cmp	r3, #33	; 0x21
 8009264:	d007      	beq.n	8009276 <I2C_DMAXferCplt+0x6e>
 8009266:	7cfb      	ldrb	r3, [r7, #19]
 8009268:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800926c:	2b22      	cmp	r3, #34	; 0x22
 800926e:	d131      	bne.n	80092d4 <I2C_DMAXferCplt+0xcc>
 8009270:	7cbb      	ldrb	r3, [r7, #18]
 8009272:	2b20      	cmp	r3, #32
 8009274:	d12e      	bne.n	80092d4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009284:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2200      	movs	r2, #0
 800928a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800928c:	7cfb      	ldrb	r3, [r7, #19]
 800928e:	2b29      	cmp	r3, #41	; 0x29
 8009290:	d10a      	bne.n	80092a8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2221      	movs	r2, #33	; 0x21
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2228      	movs	r2, #40	; 0x28
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80092a0:	6978      	ldr	r0, [r7, #20]
 80092a2:	f7ff feab 	bl	8008ffc <HAL_I2C_SlaveTxCpltCallback>
 80092a6:	e00c      	b.n	80092c2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80092a8:	7cfb      	ldrb	r3, [r7, #19]
 80092aa:	2b2a      	cmp	r3, #42	; 0x2a
 80092ac:	d109      	bne.n	80092c2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2222      	movs	r2, #34	; 0x22
 80092b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2228      	movs	r2, #40	; 0x28
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80092bc:	6978      	ldr	r0, [r7, #20]
 80092be:	f7ff fea7 	bl	8009010 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80092d0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80092d2:	e06a      	b.n	80093aa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d064      	beq.n	80093aa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d107      	bne.n	80092fa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009308:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009310:	d009      	beq.n	8009326 <I2C_DMAXferCplt+0x11e>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b08      	cmp	r3, #8
 8009316:	d006      	beq.n	8009326 <I2C_DMAXferCplt+0x11e>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800931e:	d002      	beq.n	8009326 <I2C_DMAXferCplt+0x11e>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b20      	cmp	r3, #32
 8009324:	d107      	bne.n	8009336 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009334:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009344:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009354:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2200      	movs	r2, #0
 800935a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009364:	6978      	ldr	r0, [r7, #20]
 8009366:	f7ff fe5d 	bl	8009024 <HAL_I2C_ErrorCallback>
}
 800936a:	e01e      	b.n	80093aa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d10a      	bne.n	8009396 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2200      	movs	r2, #0
 800938c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800938e:	6978      	ldr	r0, [r7, #20]
 8009390:	f7fa fe7a 	bl	8004088 <HAL_I2C_MemRxCpltCallback>
}
 8009394:	e009      	b.n	80093aa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2212      	movs	r2, #18
 80093a2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f7ff fe1f 	bl	8008fe8 <HAL_I2C_MasterRxCpltCallback>
}
 80093aa:	bf00      	nop
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093cc:	2200      	movs	r2, #0
 80093ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	2200      	movs	r2, #0
 80093de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fe ff17 	bl	8008214 <HAL_DMA_GetError>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d01b      	beq.n	8009424 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2220      	movs	r2, #32
 8009406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	f043 0210 	orr.w	r2, r3, #16
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fe00 	bl	8009024 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	4613      	mov	r3, r2
 800943a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800943c:	e025      	b.n	800948a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009444:	d021      	beq.n	800948a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009446:	f7fd fe7d 	bl	8007144 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	429a      	cmp	r2, r3
 8009454:	d302      	bcc.n	800945c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d116      	bne.n	800948a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	f043 0220 	orr.w	r2, r3, #32
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e023      	b.n	80094d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b01      	cmp	r3, #1
 8009492:	d10d      	bne.n	80094b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	43da      	mvns	r2, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	4013      	ands	r3, r2
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf0c      	ite	eq
 80094a6:	2301      	moveq	r3, #1
 80094a8:	2300      	movne	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	e00c      	b.n	80094ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	43da      	mvns	r2, r3
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4013      	ands	r3, r2
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf0c      	ite	eq
 80094c2:	2301      	moveq	r3, #1
 80094c4:	2300      	movne	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	461a      	mov	r2, r3
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d0b6      	beq.n	800943e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094e8:	e051      	b.n	800958e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f8:	d123      	bne.n	8009542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2220      	movs	r2, #32
 800951e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	f043 0204 	orr.w	r2, r3, #4
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e046      	b.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009548:	d021      	beq.n	800958e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954a:	f7fd fdfb 	bl	8007144 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d116      	bne.n	800958e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	f043 0220 	orr.w	r2, r3, #32
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e020      	b.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	0c1b      	lsrs	r3, r3, #16
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b01      	cmp	r3, #1
 8009596:	d10c      	bne.n	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	43da      	mvns	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	4013      	ands	r3, r2
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	bf14      	ite	ne
 80095aa:	2301      	movne	r3, #1
 80095ac:	2300      	moveq	r3, #0
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	e00b      	b.n	80095ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	43da      	mvns	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4013      	ands	r3, r2
 80095be:	b29b      	uxth	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bf14      	ite	ne
 80095c4:	2301      	movne	r3, #1
 80095c6:	2300      	moveq	r3, #0
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d18d      	bne.n	80094ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095e4:	e02d      	b.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f837 	bl	800965a <I2C_IsAcknowledgeFailed>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e02d      	b.n	8009652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095fc:	d021      	beq.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fe:	f7fd fda1 	bl	8007144 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	429a      	cmp	r2, r3
 800960c:	d302      	bcc.n	8009614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d116      	bne.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	f043 0220 	orr.w	r2, r3, #32
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e007      	b.n	8009652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964c:	2b80      	cmp	r3, #128	; 0x80
 800964e:	d1ca      	bne.n	80095e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800966c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009670:	d11b      	bne.n	80096aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800967a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009696:	f043 0204 	orr.w	r2, r3, #4
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80096c2:	2300      	movs	r3, #0
 80096c4:	603b      	str	r3, [r7, #0]
 80096c6:	4b20      	ldr	r3, [pc, #128]	; (8009748 <HAL_PWREx_EnableOverDrive+0x90>)
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_PWREx_EnableOverDrive+0x90>)
 80096cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d0:	6413      	str	r3, [r2, #64]	; 0x40
 80096d2:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <HAL_PWREx_EnableOverDrive+0x90>)
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80096de:	4b1b      	ldr	r3, [pc, #108]	; (800974c <HAL_PWREx_EnableOverDrive+0x94>)
 80096e0:	2201      	movs	r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096e4:	f7fd fd2e 	bl	8007144 <HAL_GetTick>
 80096e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80096ea:	e009      	b.n	8009700 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80096ec:	f7fd fd2a 	bl	8007144 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096fa:	d901      	bls.n	8009700 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e01f      	b.n	8009740 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009700:	4b13      	ldr	r3, [pc, #76]	; (8009750 <HAL_PWREx_EnableOverDrive+0x98>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970c:	d1ee      	bne.n	80096ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800970e:	4b11      	ldr	r3, [pc, #68]	; (8009754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009710:	2201      	movs	r2, #1
 8009712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009714:	f7fd fd16 	bl	8007144 <HAL_GetTick>
 8009718:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800971a:	e009      	b.n	8009730 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800971c:	f7fd fd12 	bl	8007144 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800972a:	d901      	bls.n	8009730 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e007      	b.n	8009740 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <HAL_PWREx_EnableOverDrive+0x98>)
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800973c:	d1ee      	bne.n	800971c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	40023800 	.word	0x40023800
 800974c:	420e0040 	.word	0x420e0040
 8009750:	40007000 	.word	0x40007000
 8009754:	420e0044 	.word	0x420e0044

08009758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e0cc      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800976c:	4b68      	ldr	r3, [pc, #416]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 030f 	and.w	r3, r3, #15
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d90c      	bls.n	8009794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800977a:	4b65      	ldr	r3, [pc, #404]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009782:	4b63      	ldr	r3, [pc, #396]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d001      	beq.n	8009794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e0b8      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d020      	beq.n	80097e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097ac:	4b59      	ldr	r3, [pc, #356]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	4a58      	ldr	r2, [pc, #352]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80097b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0308 	and.w	r3, r3, #8
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097c4:	4b53      	ldr	r3, [pc, #332]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	4a52      	ldr	r2, [pc, #328]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097d0:	4b50      	ldr	r3, [pc, #320]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	494d      	ldr	r1, [pc, #308]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d044      	beq.n	8009878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d107      	bne.n	8009806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097f6:	4b47      	ldr	r3, [pc, #284]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d119      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e07f      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d003      	beq.n	8009816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009812:	2b03      	cmp	r3, #3
 8009814:	d107      	bne.n	8009826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009816:	4b3f      	ldr	r3, [pc, #252]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e06f      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009826:	4b3b      	ldr	r3, [pc, #236]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e067      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009836:	4b37      	ldr	r3, [pc, #220]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f023 0203 	bic.w	r2, r3, #3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	4934      	ldr	r1, [pc, #208]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 8009844:	4313      	orrs	r3, r2
 8009846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009848:	f7fd fc7c 	bl	8007144 <HAL_GetTick>
 800984c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800984e:	e00a      	b.n	8009866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009850:	f7fd fc78 	bl	8007144 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	f241 3288 	movw	r2, #5000	; 0x1388
 800985e:	4293      	cmp	r3, r2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e04f      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009866:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 020c 	and.w	r2, r3, #12
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	429a      	cmp	r2, r3
 8009876:	d1eb      	bne.n	8009850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009878:	4b25      	ldr	r3, [pc, #148]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d20c      	bcs.n	80098a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009886:	4b22      	ldr	r3, [pc, #136]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800988e:	4b20      	ldr	r3, [pc, #128]	; (8009910 <HAL_RCC_ClockConfig+0x1b8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d001      	beq.n	80098a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e032      	b.n	8009906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d008      	beq.n	80098be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098ac:	4b19      	ldr	r3, [pc, #100]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4916      	ldr	r1, [pc, #88]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0308 	and.w	r3, r3, #8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d009      	beq.n	80098de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	490e      	ldr	r1, [pc, #56]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098de:	f000 f855 	bl	800998c <HAL_RCC_GetSysClockFreq>
 80098e2:	4602      	mov	r2, r0
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCC_ClockConfig+0x1bc>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	091b      	lsrs	r3, r3, #4
 80098ea:	f003 030f 	and.w	r3, r3, #15
 80098ee:	490a      	ldr	r1, [pc, #40]	; (8009918 <HAL_RCC_ClockConfig+0x1c0>)
 80098f0:	5ccb      	ldrb	r3, [r1, r3]
 80098f2:	fa22 f303 	lsr.w	r3, r2, r3
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <HAL_RCC_ClockConfig+0x1c4>)
 80098f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_RCC_ClockConfig+0x1c8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fd fbdc 	bl	80070bc <HAL_InitTick>

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40023c00 	.word	0x40023c00
 8009914:	40023800 	.word	0x40023800
 8009918:	08014e88 	.word	0x08014e88
 800991c:	20000030 	.word	0x20000030
 8009920:	2000003c 	.word	0x2000003c

08009924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009928:	4b03      	ldr	r3, [pc, #12]	; (8009938 <HAL_RCC_GetHCLKFreq+0x14>)
 800992a:	681b      	ldr	r3, [r3, #0]
}
 800992c:	4618      	mov	r0, r3
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	20000030 	.word	0x20000030

0800993c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009940:	f7ff fff0 	bl	8009924 <HAL_RCC_GetHCLKFreq>
 8009944:	4602      	mov	r2, r0
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	0a9b      	lsrs	r3, r3, #10
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	4903      	ldr	r1, [pc, #12]	; (8009960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009952:	5ccb      	ldrb	r3, [r1, r3]
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009958:	4618      	mov	r0, r3
 800995a:	bd80      	pop	{r7, pc}
 800995c:	40023800 	.word	0x40023800
 8009960:	08014e98 	.word	0x08014e98

08009964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009968:	f7ff ffdc 	bl	8009924 <HAL_RCC_GetHCLKFreq>
 800996c:	4602      	mov	r2, r0
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	0b5b      	lsrs	r3, r3, #13
 8009974:	f003 0307 	and.w	r3, r3, #7
 8009978:	4903      	ldr	r1, [pc, #12]	; (8009988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800997a:	5ccb      	ldrb	r3, [r1, r3]
 800997c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009980:	4618      	mov	r0, r3
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40023800 	.word	0x40023800
 8009988:	08014e98 	.word	0x08014e98

0800998c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800998c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009990:	b0ae      	sub	sp, #184	; 0xb8
 8009992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099b2:	4bcb      	ldr	r3, [pc, #812]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 030c 	and.w	r3, r3, #12
 80099ba:	2b0c      	cmp	r3, #12
 80099bc:	f200 8206 	bhi.w	8009dcc <HAL_RCC_GetSysClockFreq+0x440>
 80099c0:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	080099fd 	.word	0x080099fd
 80099cc:	08009dcd 	.word	0x08009dcd
 80099d0:	08009dcd 	.word	0x08009dcd
 80099d4:	08009dcd 	.word	0x08009dcd
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	08009dcd 	.word	0x08009dcd
 80099e0:	08009dcd 	.word	0x08009dcd
 80099e4:	08009dcd 	.word	0x08009dcd
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009dcd 	.word	0x08009dcd
 80099f0:	08009dcd 	.word	0x08009dcd
 80099f4:	08009dcd 	.word	0x08009dcd
 80099f8:	08009bfd 	.word	0x08009bfd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80099fc:	4bb9      	ldr	r3, [pc, #740]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x358>)
 80099fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009a02:	e1e7      	b.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009a04:	4bb8      	ldr	r3, [pc, #736]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009a0a:	e1e3      	b.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a0c:	4bb4      	ldr	r3, [pc, #720]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a18:	4bb1      	ldr	r3, [pc, #708]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d071      	beq.n	8009b08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a24:	4bae      	ldr	r3, [pc, #696]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	099b      	lsrs	r3, r3, #6
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	462b      	mov	r3, r5
 8009a4e:	f04f 0000 	mov.w	r0, #0
 8009a52:	f04f 0100 	mov.w	r1, #0
 8009a56:	0159      	lsls	r1, r3, #5
 8009a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a5c:	0150      	lsls	r0, r2, #5
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4621      	mov	r1, r4
 8009a64:	1a51      	subs	r1, r2, r1
 8009a66:	6439      	str	r1, [r7, #64]	; 0x40
 8009a68:	4629      	mov	r1, r5
 8009a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	f04f 0300 	mov.w	r3, #0
 8009a78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	018b      	lsls	r3, r1, #6
 8009a80:	4641      	mov	r1, r8
 8009a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a86:	4641      	mov	r1, r8
 8009a88:	018a      	lsls	r2, r1, #6
 8009a8a:	4641      	mov	r1, r8
 8009a8c:	1a51      	subs	r1, r2, r1
 8009a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a90:	4649      	mov	r1, r9
 8009a92:	eb63 0301 	sbc.w	r3, r3, r1
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	00cb      	lsls	r3, r1, #3
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aae:	4641      	mov	r1, r8
 8009ab0:	00ca      	lsls	r2, r1, #3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4622      	mov	r2, r4
 8009aba:	189b      	adds	r3, r3, r2
 8009abc:	633b      	str	r3, [r7, #48]	; 0x30
 8009abe:	462b      	mov	r3, r5
 8009ac0:	460a      	mov	r2, r1
 8009ac2:	eb42 0303 	adc.w	r3, r2, r3
 8009ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac8:	f04f 0200 	mov.w	r2, #0
 8009acc:	f04f 0300 	mov.w	r3, #0
 8009ad0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	024b      	lsls	r3, r1, #9
 8009ad8:	4621      	mov	r1, r4
 8009ada:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ade:	4621      	mov	r1, r4
 8009ae0:	024a      	lsls	r2, r1, #9
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009af0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009af4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009af8:	f7f7 f916 	bl	8000d28 <__aeabi_uldivmod>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4613      	mov	r3, r2
 8009b02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b06:	e067      	b.n	8009bd8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b08:	4b75      	ldr	r3, [pc, #468]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	099b      	lsrs	r3, r3, #6
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b22:	2300      	movs	r3, #0
 8009b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	f04f 0000 	mov.w	r0, #0
 8009b32:	f04f 0100 	mov.w	r1, #0
 8009b36:	0159      	lsls	r1, r3, #5
 8009b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b3c:	0150      	lsls	r0, r2, #5
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4621      	mov	r1, r4
 8009b44:	1a51      	subs	r1, r2, r1
 8009b46:	62b9      	str	r1, [r7, #40]	; 0x28
 8009b48:	4629      	mov	r1, r5
 8009b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b50:	f04f 0200 	mov.w	r2, #0
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	018b      	lsls	r3, r1, #6
 8009b60:	4641      	mov	r1, r8
 8009b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009b66:	4641      	mov	r1, r8
 8009b68:	018a      	lsls	r2, r1, #6
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8009b70:	4649      	mov	r1, r9
 8009b72:	eb63 0b01 	sbc.w	fp, r3, r1
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	f04f 0300 	mov.w	r3, #0
 8009b7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b8a:	4692      	mov	sl, r2
 8009b8c:	469b      	mov	fp, r3
 8009b8e:	4623      	mov	r3, r4
 8009b90:	eb1a 0303 	adds.w	r3, sl, r3
 8009b94:	623b      	str	r3, [r7, #32]
 8009b96:	462b      	mov	r3, r5
 8009b98:	eb4b 0303 	adc.w	r3, fp, r3
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009baa:	4629      	mov	r1, r5
 8009bac:	028b      	lsls	r3, r1, #10
 8009bae:	4621      	mov	r1, r4
 8009bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	028a      	lsls	r2, r1, #10
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	673b      	str	r3, [r7, #112]	; 0x70
 8009bc4:	677a      	str	r2, [r7, #116]	; 0x74
 8009bc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009bca:	f7f7 f8ad 	bl	8000d28 <__aeabi_uldivmod>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bd8:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	3301      	adds	r3, #1
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8009bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009bfa:	e0eb      	b.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bfc:	4b38      	ldr	r3, [pc, #224]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c08:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d06b      	beq.n	8009cec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c14:	4b32      	ldr	r3, [pc, #200]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	099b      	lsrs	r3, r3, #6
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	663b      	str	r3, [r7, #96]	; 0x60
 8009c28:	2300      	movs	r3, #0
 8009c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8009c2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f04f 0000 	mov.w	r0, #0
 8009c38:	f04f 0100 	mov.w	r1, #0
 8009c3c:	0159      	lsls	r1, r3, #5
 8009c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c42:	0150      	lsls	r0, r2, #5
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4621      	mov	r1, r4
 8009c4a:	1a51      	subs	r1, r2, r1
 8009c4c:	61b9      	str	r1, [r7, #24]
 8009c4e:	4629      	mov	r1, r5
 8009c50:	eb63 0301 	sbc.w	r3, r3, r1
 8009c54:	61fb      	str	r3, [r7, #28]
 8009c56:	f04f 0200 	mov.w	r2, #0
 8009c5a:	f04f 0300 	mov.w	r3, #0
 8009c5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009c62:	4659      	mov	r1, fp
 8009c64:	018b      	lsls	r3, r1, #6
 8009c66:	4651      	mov	r1, sl
 8009c68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c6c:	4651      	mov	r1, sl
 8009c6e:	018a      	lsls	r2, r1, #6
 8009c70:	4651      	mov	r1, sl
 8009c72:	ebb2 0801 	subs.w	r8, r2, r1
 8009c76:	4659      	mov	r1, fp
 8009c78:	eb63 0901 	sbc.w	r9, r3, r1
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c90:	4690      	mov	r8, r2
 8009c92:	4699      	mov	r9, r3
 8009c94:	4623      	mov	r3, r4
 8009c96:	eb18 0303 	adds.w	r3, r8, r3
 8009c9a:	613b      	str	r3, [r7, #16]
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	eb49 0303 	adc.w	r3, r9, r3
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	024b      	lsls	r3, r1, #9
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009cba:	4621      	mov	r1, r4
 8009cbc:	024a      	lsls	r2, r1, #9
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009ccc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cd0:	f7f7 f82a 	bl	8000d28 <__aeabi_uldivmod>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4613      	mov	r3, r2
 8009cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cde:	e065      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x420>
 8009ce0:	40023800 	.word	0x40023800
 8009ce4:	00f42400 	.word	0x00f42400
 8009ce8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cec:	4b3d      	ldr	r3, [pc, #244]	; (8009de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	099b      	lsrs	r3, r3, #6
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009cfc:	653b      	str	r3, [r7, #80]	; 0x50
 8009cfe:	2300      	movs	r3, #0
 8009d00:	657b      	str	r3, [r7, #84]	; 0x54
 8009d02:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8009d06:	4642      	mov	r2, r8
 8009d08:	464b      	mov	r3, r9
 8009d0a:	f04f 0000 	mov.w	r0, #0
 8009d0e:	f04f 0100 	mov.w	r1, #0
 8009d12:	0159      	lsls	r1, r3, #5
 8009d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d18:	0150      	lsls	r0, r2, #5
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4641      	mov	r1, r8
 8009d20:	1a51      	subs	r1, r2, r1
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	4649      	mov	r1, r9
 8009d26:	eb63 0301 	sbc.w	r3, r3, r1
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	f04f 0200 	mov.w	r2, #0
 8009d30:	f04f 0300 	mov.w	r3, #0
 8009d34:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009d38:	4659      	mov	r1, fp
 8009d3a:	018b      	lsls	r3, r1, #6
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d42:	4651      	mov	r1, sl
 8009d44:	018a      	lsls	r2, r1, #6
 8009d46:	4651      	mov	r1, sl
 8009d48:	1a54      	subs	r4, r2, r1
 8009d4a:	4659      	mov	r1, fp
 8009d4c:	eb63 0501 	sbc.w	r5, r3, r1
 8009d50:	f04f 0200 	mov.w	r2, #0
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	00eb      	lsls	r3, r5, #3
 8009d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d5e:	00e2      	lsls	r2, r4, #3
 8009d60:	4614      	mov	r4, r2
 8009d62:	461d      	mov	r5, r3
 8009d64:	4643      	mov	r3, r8
 8009d66:	18e3      	adds	r3, r4, r3
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	eb45 0303 	adc.w	r3, r5, r3
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d7e:	4629      	mov	r1, r5
 8009d80:	028b      	lsls	r3, r1, #10
 8009d82:	4621      	mov	r1, r4
 8009d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d88:	4621      	mov	r1, r4
 8009d8a:	028a      	lsls	r2, r1, #10
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4619      	mov	r1, r3
 8009d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d94:	2200      	movs	r2, #0
 8009d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d98:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d9e:	f7f6 ffc3 	bl	8000d28 <__aeabi_uldivmod>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4613      	mov	r3, r2
 8009da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <HAL_RCC_GetSysClockFreq+0x458>)
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	0f1b      	lsrs	r3, r3, #28
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8009dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009dbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009dca:	e003      	b.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8009dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009dd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	37b8      	adds	r7, #184	; 0xb8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009de2:	bf00      	nop
 8009de4:	40023800 	.word	0x40023800
 8009de8:	00f42400 	.word	0x00f42400

08009dec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e28d      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8083 	beq.w	8009f12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e0c:	4b94      	ldr	r3, [pc, #592]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f003 030c 	and.w	r3, r3, #12
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	d019      	beq.n	8009e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e18:	4b91      	ldr	r3, [pc, #580]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d106      	bne.n	8009e32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e24:	4b8e      	ldr	r3, [pc, #568]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e30:	d00c      	beq.n	8009e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e32:	4b8b      	ldr	r3, [pc, #556]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e3a:	2b0c      	cmp	r3, #12
 8009e3c:	d112      	bne.n	8009e64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e3e:	4b88      	ldr	r3, [pc, #544]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e4a:	d10b      	bne.n	8009e64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e4c:	4b84      	ldr	r3, [pc, #528]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d05b      	beq.n	8009f10 <HAL_RCC_OscConfig+0x124>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d157      	bne.n	8009f10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e25a      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6c:	d106      	bne.n	8009e7c <HAL_RCC_OscConfig+0x90>
 8009e6e:	4b7c      	ldr	r3, [pc, #496]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a7b      	ldr	r2, [pc, #492]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e01d      	b.n	8009eb8 <HAL_RCC_OscConfig+0xcc>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e84:	d10c      	bne.n	8009ea0 <HAL_RCC_OscConfig+0xb4>
 8009e86:	4b76      	ldr	r3, [pc, #472]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a75      	ldr	r2, [pc, #468]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	4b73      	ldr	r3, [pc, #460]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a72      	ldr	r2, [pc, #456]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	e00b      	b.n	8009eb8 <HAL_RCC_OscConfig+0xcc>
 8009ea0:	4b6f      	ldr	r3, [pc, #444]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a6e      	ldr	r2, [pc, #440]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	4b6c      	ldr	r3, [pc, #432]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a6b      	ldr	r2, [pc, #428]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d013      	beq.n	8009ee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec0:	f7fd f940 	bl	8007144 <HAL_GetTick>
 8009ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ec8:	f7fd f93c 	bl	8007144 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b64      	cmp	r3, #100	; 0x64
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e21f      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eda:	4b61      	ldr	r3, [pc, #388]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0f0      	beq.n	8009ec8 <HAL_RCC_OscConfig+0xdc>
 8009ee6:	e014      	b.n	8009f12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ee8:	f7fd f92c 	bl	8007144 <HAL_GetTick>
 8009eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eee:	e008      	b.n	8009f02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ef0:	f7fd f928 	bl	8007144 <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	2b64      	cmp	r3, #100	; 0x64
 8009efc:	d901      	bls.n	8009f02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e20b      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f02:	4b57      	ldr	r3, [pc, #348]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1f0      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x104>
 8009f0e:	e000      	b.n	8009f12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d06f      	beq.n	8009ffe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f1e:	4b50      	ldr	r3, [pc, #320]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f003 030c 	and.w	r3, r3, #12
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d017      	beq.n	8009f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f2a:	4b4d      	ldr	r3, [pc, #308]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f32:	2b08      	cmp	r3, #8
 8009f34:	d105      	bne.n	8009f42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f36:	4b4a      	ldr	r3, [pc, #296]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f42:	4b47      	ldr	r3, [pc, #284]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f4a:	2b0c      	cmp	r3, #12
 8009f4c:	d11c      	bne.n	8009f88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f4e:	4b44      	ldr	r3, [pc, #272]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d116      	bne.n	8009f88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f5a:	4b41      	ldr	r3, [pc, #260]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <HAL_RCC_OscConfig+0x186>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d001      	beq.n	8009f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e1d3      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f72:	4b3b      	ldr	r3, [pc, #236]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	4937      	ldr	r1, [pc, #220]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f86:	e03a      	b.n	8009ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d020      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f90:	4b34      	ldr	r3, [pc, #208]	; (800a064 <HAL_RCC_OscConfig+0x278>)
 8009f92:	2201      	movs	r2, #1
 8009f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f96:	f7fd f8d5 	bl	8007144 <HAL_GetTick>
 8009f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f9c:	e008      	b.n	8009fb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f9e:	f7fd f8d1 	bl	8007144 <HAL_GetTick>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d901      	bls.n	8009fb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e1b4      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0f0      	beq.n	8009f9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fbc:	4b28      	ldr	r3, [pc, #160]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	4925      	ldr	r1, [pc, #148]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	600b      	str	r3, [r1, #0]
 8009fd0:	e015      	b.n	8009ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fd2:	4b24      	ldr	r3, [pc, #144]	; (800a064 <HAL_RCC_OscConfig+0x278>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd8:	f7fd f8b4 	bl	8007144 <HAL_GetTick>
 8009fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fde:	e008      	b.n	8009ff2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fe0:	f7fd f8b0 	bl	8007144 <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d901      	bls.n	8009ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e193      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f0      	bne.n	8009fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d036      	beq.n	800a078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d016      	beq.n	800a040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a012:	4b15      	ldr	r3, [pc, #84]	; (800a068 <HAL_RCC_OscConfig+0x27c>)
 800a014:	2201      	movs	r2, #1
 800a016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a018:	f7fd f894 	bl	8007144 <HAL_GetTick>
 800a01c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a01e:	e008      	b.n	800a032 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a020:	f7fd f890 	bl	8007144 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e173      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a032:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <HAL_RCC_OscConfig+0x274>)
 800a034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0f0      	beq.n	800a020 <HAL_RCC_OscConfig+0x234>
 800a03e:	e01b      	b.n	800a078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <HAL_RCC_OscConfig+0x27c>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a046:	f7fd f87d 	bl	8007144 <HAL_GetTick>
 800a04a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a04c:	e00e      	b.n	800a06c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a04e:	f7fd f879 	bl	8007144 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d907      	bls.n	800a06c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e15c      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
 800a060:	40023800 	.word	0x40023800
 800a064:	42470000 	.word	0x42470000
 800a068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a06c:	4b8a      	ldr	r3, [pc, #552]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1ea      	bne.n	800a04e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8097 	beq.w	800a1b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a086:	2300      	movs	r3, #0
 800a088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a08a:	4b83      	ldr	r3, [pc, #524]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10f      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a096:	2300      	movs	r3, #0
 800a098:	60bb      	str	r3, [r7, #8]
 800a09a:	4b7f      	ldr	r3, [pc, #508]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	4a7e      	ldr	r2, [pc, #504]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0a6:	4b7c      	ldr	r3, [pc, #496]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ae:	60bb      	str	r3, [r7, #8]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0b6:	4b79      	ldr	r3, [pc, #484]	; (800a29c <HAL_RCC_OscConfig+0x4b0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d118      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a0c2:	4b76      	ldr	r3, [pc, #472]	; (800a29c <HAL_RCC_OscConfig+0x4b0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a75      	ldr	r2, [pc, #468]	; (800a29c <HAL_RCC_OscConfig+0x4b0>)
 800a0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0ce:	f7fd f839 	bl	8007144 <HAL_GetTick>
 800a0d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0d4:	e008      	b.n	800a0e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0d6:	f7fd f835 	bl	8007144 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d901      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e118      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0e8:	4b6c      	ldr	r3, [pc, #432]	; (800a29c <HAL_RCC_OscConfig+0x4b0>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0f0      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d106      	bne.n	800a10a <HAL_RCC_OscConfig+0x31e>
 800a0fc:	4b66      	ldr	r3, [pc, #408]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a100:	4a65      	ldr	r2, [pc, #404]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	6713      	str	r3, [r2, #112]	; 0x70
 800a108:	e01c      	b.n	800a144 <HAL_RCC_OscConfig+0x358>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0x340>
 800a112:	4b61      	ldr	r3, [pc, #388]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a116:	4a60      	ldr	r2, [pc, #384]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a118:	f043 0304 	orr.w	r3, r3, #4
 800a11c:	6713      	str	r3, [r2, #112]	; 0x70
 800a11e:	4b5e      	ldr	r3, [pc, #376]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	4a5d      	ldr	r2, [pc, #372]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a124:	f043 0301 	orr.w	r3, r3, #1
 800a128:	6713      	str	r3, [r2, #112]	; 0x70
 800a12a:	e00b      	b.n	800a144 <HAL_RCC_OscConfig+0x358>
 800a12c:	4b5a      	ldr	r3, [pc, #360]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	4a59      	ldr	r2, [pc, #356]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a132:	f023 0301 	bic.w	r3, r3, #1
 800a136:	6713      	str	r3, [r2, #112]	; 0x70
 800a138:	4b57      	ldr	r3, [pc, #348]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	4a56      	ldr	r2, [pc, #344]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a13e:	f023 0304 	bic.w	r3, r3, #4
 800a142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d015      	beq.n	800a178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a14c:	f7fc fffa 	bl	8007144 <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a152:	e00a      	b.n	800a16a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a154:	f7fc fff6 	bl	8007144 <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a162:	4293      	cmp	r3, r2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e0d7      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a16a:	4b4b      	ldr	r3, [pc, #300]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0ee      	beq.n	800a154 <HAL_RCC_OscConfig+0x368>
 800a176:	e014      	b.n	800a1a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a178:	f7fc ffe4 	bl	8007144 <HAL_GetTick>
 800a17c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a17e:	e00a      	b.n	800a196 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a180:	f7fc ffe0 	bl	8007144 <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18e:	4293      	cmp	r3, r2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e0c1      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a196:	4b40      	ldr	r3, [pc, #256]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	f003 0302 	and.w	r3, r3, #2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1ee      	bne.n	800a180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d105      	bne.n	800a1b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1a8:	4b3b      	ldr	r3, [pc, #236]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	4a3a      	ldr	r2, [pc, #232]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a1ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80ad 	beq.w	800a318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1be:	4b36      	ldr	r3, [pc, #216]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f003 030c 	and.w	r3, r3, #12
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d060      	beq.n	800a28c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d145      	bne.n	800a25e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d2:	4b33      	ldr	r3, [pc, #204]	; (800a2a0 <HAL_RCC_OscConfig+0x4b4>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d8:	f7fc ffb4 	bl	8007144 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1e0:	f7fc ffb0 	bl	8007144 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e093      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1f2:	4b29      	ldr	r3, [pc, #164]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f0      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	69da      	ldr	r2, [r3, #28]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20c:	019b      	lsls	r3, r3, #6
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	3b01      	subs	r3, #1
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	061b      	lsls	r3, r3, #24
 800a222:	431a      	orrs	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a228:	071b      	lsls	r3, r3, #28
 800a22a:	491b      	ldr	r1, [pc, #108]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a230:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <HAL_RCC_OscConfig+0x4b4>)
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a236:	f7fc ff85 	bl	8007144 <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a23e:	f7fc ff81 	bl	8007144 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e064      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a250:	4b11      	ldr	r3, [pc, #68]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <HAL_RCC_OscConfig+0x452>
 800a25c:	e05c      	b.n	800a318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25e:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <HAL_RCC_OscConfig+0x4b4>)
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a264:	f7fc ff6e 	bl	8007144 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a26c:	f7fc ff6a 	bl	8007144 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e04d      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a27e:	4b06      	ldr	r3, [pc, #24]	; (800a298 <HAL_RCC_OscConfig+0x4ac>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f0      	bne.n	800a26c <HAL_RCC_OscConfig+0x480>
 800a28a:	e045      	b.n	800a318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d107      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e040      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
 800a298:	40023800 	.word	0x40023800
 800a29c:	40007000 	.word	0x40007000
 800a2a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a2a4:	4b1f      	ldr	r3, [pc, #124]	; (800a324 <HAL_RCC_OscConfig+0x538>)
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d030      	beq.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d129      	bne.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d122      	bne.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d119      	bne.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ea:	085b      	lsrs	r3, r3, #1
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d10f      	bne.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a300:	429a      	cmp	r2, r3
 800a302:	d107      	bne.n	800a314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a310:	429a      	cmp	r2, r3
 800a312:	d001      	beq.n	800a318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e000      	b.n	800a31a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40023800 	.word	0x40023800

0800a328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e07b      	b.n	800a432 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d108      	bne.n	800a354 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a34a:	d009      	beq.n	800a360 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	61da      	str	r2, [r3, #28]
 800a352:	e005      	b.n	800a360 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fa f95e 	bl	800463c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a396:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e4:	ea42 0103 	orr.w	r1, r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	0c1b      	lsrs	r3, r3, #16
 800a3fe:	f003 0104 	and.w	r1, r3, #4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	f003 0210 	and.w	r2, r3, #16
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69da      	ldr	r2, [r3, #28]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a420:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b088      	sub	sp, #32
 800a43e:	af00      	add	r7, sp, #0
 800a440:	60f8      	str	r0, [r7, #12]
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	603b      	str	r3, [r7, #0]
 800a446:	4613      	mov	r3, r2
 800a448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a454:	2b01      	cmp	r3, #1
 800a456:	d101      	bne.n	800a45c <HAL_SPI_Transmit+0x22>
 800a458:	2302      	movs	r3, #2
 800a45a:	e126      	b.n	800a6aa <HAL_SPI_Transmit+0x270>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a464:	f7fc fe6e 	bl	8007144 <HAL_GetTick>
 800a468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b01      	cmp	r3, #1
 800a478:	d002      	beq.n	800a480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a47a:	2302      	movs	r3, #2
 800a47c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a47e:	e10b      	b.n	800a698 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <HAL_SPI_Transmit+0x52>
 800a486:	88fb      	ldrh	r3, [r7, #6]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a490:	e102      	b.n	800a698 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2203      	movs	r2, #3
 800a496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	88fa      	ldrh	r2, [r7, #6]
 800a4aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d8:	d10f      	bne.n	800a4fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a504:	2b40      	cmp	r3, #64	; 0x40
 800a506:	d007      	beq.n	800a518 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a520:	d14b      	bne.n	800a5ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <HAL_SPI_Transmit+0xf6>
 800a52a:	8afb      	ldrh	r3, [r7, #22]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d13e      	bne.n	800a5ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a534:	881a      	ldrh	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a540:	1c9a      	adds	r2, r3, #2
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a554:	e02b      	b.n	800a5ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b02      	cmp	r3, #2
 800a562:	d112      	bne.n	800a58a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a568:	881a      	ldrh	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	1c9a      	adds	r2, r3, #2
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	86da      	strh	r2, [r3, #54]	; 0x36
 800a588:	e011      	b.n	800a5ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a58a:	f7fc fddb 	bl	8007144 <HAL_GetTick>
 800a58e:	4602      	mov	r2, r0
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d803      	bhi.n	800a5a2 <HAL_SPI_Transmit+0x168>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a0:	d102      	bne.n	800a5a8 <HAL_SPI_Transmit+0x16e>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a5ac:	e074      	b.n	800a698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1ce      	bne.n	800a556 <HAL_SPI_Transmit+0x11c>
 800a5b8:	e04c      	b.n	800a654 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <HAL_SPI_Transmit+0x18e>
 800a5c2:	8afb      	ldrh	r3, [r7, #22]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d140      	bne.n	800a64a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	330c      	adds	r3, #12
 800a5d2:	7812      	ldrb	r2, [r2, #0]
 800a5d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a5ee:	e02c      	b.n	800a64a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d113      	bne.n	800a626 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	330c      	adds	r3, #12
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	86da      	strh	r2, [r3, #54]	; 0x36
 800a624:	e011      	b.n	800a64a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a626:	f7fc fd8d 	bl	8007144 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d803      	bhi.n	800a63e <HAL_SPI_Transmit+0x204>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a63c:	d102      	bne.n	800a644 <HAL_SPI_Transmit+0x20a>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a648:	e026      	b.n	800a698 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a64e:	b29b      	uxth	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1cd      	bne.n	800a5f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fafd 	bl	800ac58 <SPI_EndRxTxTransaction>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a672:	2300      	movs	r3, #0
 800a674:	613b      	str	r3, [r7, #16]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	613b      	str	r3, [r7, #16]
 800a686:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	77fb      	strb	r3, [r7, #31]
 800a694:	e000      	b.n	800a698 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a696:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a6a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_SPI_Transmit_DMA+0x20>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e09b      	b.n	800a80c <HAL_SPI_Transmit_DMA+0x158>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d002      	beq.n	800a6ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6ec:	e089      	b.n	800a802 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d002      	beq.n	800a6fa <HAL_SPI_Transmit_DMA+0x46>
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a6fe:	e080      	b.n	800a802 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2203      	movs	r2, #3
 800a704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a746:	d10f      	bne.n	800a768 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a756:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a766:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	4a29      	ldr	r2, [pc, #164]	; (800a814 <HAL_SPI_Transmit_DMA+0x160>)
 800a76e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a774:	4a28      	ldr	r2, [pc, #160]	; (800a818 <HAL_SPI_Transmit_DMA+0x164>)
 800a776:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a77c:	4a27      	ldr	r2, [pc, #156]	; (800a81c <HAL_SPI_Transmit_DMA+0x168>)
 800a77e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a784:	2200      	movs	r2, #0
 800a786:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a790:	4619      	mov	r1, r3
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	330c      	adds	r3, #12
 800a798:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a79e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a7a0:	f7fd fac4 	bl	8007d2c <HAL_DMA_Start_IT>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00c      	beq.n	800a7c4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ae:	f043 0210 	orr.w	r2, r3, #16
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a7c2:	e01e      	b.n	800a802 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d007      	beq.n	800a7e2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f042 0220 	orr.w	r2, r2, #32
 800a7f0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0202 	orr.w	r2, r2, #2
 800a800:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	0800aac5 	.word	0x0800aac5
 800a818:	0800aa1d 	.word	0x0800aa1d
 800a81c:	0800aae1 	.word	0x0800aae1

0800a820 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10e      	bne.n	800a860 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d009      	beq.n	800a860 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d004      	beq.n	800a860 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
    return;
 800a85e:	e0ce      	b.n	800a9fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <HAL_SPI_IRQHandler+0x5e>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
    return;
 800a87c:	e0bf      	b.n	800a9fe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	f003 0320 	and.w	r3, r3, #32
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <HAL_SPI_IRQHandler+0x7e>
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 80b0 	beq.w	800a9fe <HAL_SPI_IRQHandler+0x1de>
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80aa 	beq.w	800a9fe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d023      	beq.n	800a8fc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b03      	cmp	r3, #3
 800a8be:	d011      	beq.n	800a8e4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c4:	f043 0204 	orr.w	r2, r3, #4
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	e00b      	b.n	800a8fc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	613b      	str	r3, [r7, #16]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	613b      	str	r3, [r7, #16]
 800a8f8:	693b      	ldr	r3, [r7, #16]
        return;
 800a8fa:	e080      	b.n	800a9fe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d014      	beq.n	800a930 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90a:	f043 0201 	orr.w	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00c      	beq.n	800a954 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93e:	f043 0208 	orr.w	r2, r3, #8
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a946:	2300      	movs	r3, #0
 800a948:	60bb      	str	r3, [r7, #8]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	60bb      	str	r3, [r7, #8]
 800a952:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d04f      	beq.n	800a9fc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a96a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <HAL_SPI_IRQHandler+0x168>
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d034      	beq.n	800a9f2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0203 	bic.w	r2, r2, #3
 800a996:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d011      	beq.n	800a9c4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a4:	4a17      	ldr	r2, [pc, #92]	; (800aa04 <HAL_SPI_IRQHandler+0x1e4>)
 800a9a6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fd fa85 	bl	8007ebc <HAL_DMA_Abort_IT>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d016      	beq.n	800a9fa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d0:	4a0c      	ldr	r2, [pc, #48]	; (800aa04 <HAL_SPI_IRQHandler+0x1e4>)
 800a9d2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fd fa6f 	bl	8007ebc <HAL_DMA_Abort_IT>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a9f0:	e003      	b.n	800a9fa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7fa fc8e 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a9f8:	e000      	b.n	800a9fc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a9fa:	bf00      	nop
    return;
 800a9fc:	bf00      	nop
  }
}
 800a9fe:	3720      	adds	r7, #32
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	0800ab21 	.word	0x0800ab21

0800aa08 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa2a:	f7fc fb8b 	bl	8007144 <HAL_GetTick>
 800aa2e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa3e:	d03b      	beq.n	800aab8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f022 0220 	bic.w	r2, r2, #32
 800aa4e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 0202 	bic.w	r2, r2, #2
 800aa5e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	2164      	movs	r1, #100	; 0x64
 800aa64:	6978      	ldr	r0, [r7, #20]
 800aa66:	f000 f8f7 	bl	800ac58 <SPI_EndRxTxTransaction>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa74:	f043 0220 	orr.w	r2, r3, #32
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aab0:	6978      	ldr	r0, [r7, #20]
 800aab2:	f7fa fc2f 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aab6:	e002      	b.n	800aabe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800aab8:	6978      	ldr	r0, [r7, #20]
 800aaba:	f7fa fc41 	bl	8005340 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff ff98 	bl	800aa08 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0203 	bic.w	r2, r2, #3
 800aafc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab02:	f043 0210 	orr.w	r2, r3, #16
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f7fa fbfe 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab18:	bf00      	nop
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f7fa fbea 	bl	8005314 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab40:	bf00      	nop
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	4613      	mov	r3, r2
 800ab56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab58:	f7fc faf4 	bl	8007144 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab68:	f7fc faec 	bl	8007144 <HAL_GetTick>
 800ab6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab6e:	4b39      	ldr	r3, [pc, #228]	; (800ac54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	015b      	lsls	r3, r3, #5
 800ab74:	0d1b      	lsrs	r3, r3, #20
 800ab76:	69fa      	ldr	r2, [r7, #28]
 800ab78:	fb02 f303 	mul.w	r3, r2, r3
 800ab7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab7e:	e054      	b.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab86:	d050      	beq.n	800ac2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab88:	f7fc fadc 	bl	8007144 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	69fa      	ldr	r2, [r7, #28]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d902      	bls.n	800ab9e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d13d      	bne.n	800ac1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800abac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abb6:	d111      	bne.n	800abdc <SPI_WaitFlagStateUntilTimeout+0x94>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc0:	d004      	beq.n	800abcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abca:	d107      	bne.n	800abdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe4:	d10f      	bne.n	800ac06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e017      	b.n	800ac4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	4013      	ands	r3, r2
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	bf0c      	ite	eq
 800ac3a:	2301      	moveq	r3, #1
 800ac3c:	2300      	movne	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d19b      	bne.n	800ab80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20000030 	.word	0x20000030

0800ac58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac64:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <SPI_EndRxTxTransaction+0x7c>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a1b      	ldr	r2, [pc, #108]	; (800acd8 <SPI_EndRxTxTransaction+0x80>)
 800ac6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6e:	0d5b      	lsrs	r3, r3, #21
 800ac70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac74:	fb02 f303 	mul.w	r3, r2, r3
 800ac78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac82:	d112      	bne.n	800acaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2180      	movs	r1, #128	; 0x80
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7ff ff5a 	bl	800ab48 <SPI_WaitFlagStateUntilTimeout>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d016      	beq.n	800acc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac9e:	f043 0220 	orr.w	r2, r3, #32
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e00f      	b.n	800acca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00a      	beq.n	800acc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d0f2      	beq.n	800acaa <SPI_EndRxTxTransaction+0x52>
 800acc4:	e000      	b.n	800acc8 <SPI_EndRxTxTransaction+0x70>
        break;
 800acc6:	bf00      	nop
  }

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000030 	.word	0x20000030
 800acd8:	165e9f81 	.word	0x165e9f81

0800acdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e041      	b.n	800ad72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7f9 fd3c 	bl	8004780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f000 faa0 	bl	800b260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
	...

0800ad7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d001      	beq.n	800ad94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e04e      	b.n	800ae32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a23      	ldr	r2, [pc, #140]	; (800ae40 <HAL_TIM_Base_Start_IT+0xc4>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d022      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adbe:	d01d      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1f      	ldr	r2, [pc, #124]	; (800ae44 <HAL_TIM_Base_Start_IT+0xc8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d018      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a1e      	ldr	r2, [pc, #120]	; (800ae48 <HAL_TIM_Base_Start_IT+0xcc>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d013      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1c      	ldr	r2, [pc, #112]	; (800ae4c <HAL_TIM_Base_Start_IT+0xd0>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d00e      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a1b      	ldr	r2, [pc, #108]	; (800ae50 <HAL_TIM_Base_Start_IT+0xd4>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d009      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a19      	ldr	r2, [pc, #100]	; (800ae54 <HAL_TIM_Base_Start_IT+0xd8>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d004      	beq.n	800adfc <HAL_TIM_Base_Start_IT+0x80>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <HAL_TIM_Base_Start_IT+0xdc>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d111      	bne.n	800ae20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b06      	cmp	r3, #6
 800ae0c:	d010      	beq.n	800ae30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0201 	orr.w	r2, r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae1e:	e007      	b.n	800ae30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0201 	orr.w	r2, r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	40010000 	.word	0x40010000
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	40000c00 	.word	0x40000c00
 800ae50:	40010400 	.word	0x40010400
 800ae54:	40014000 	.word	0x40014000
 800ae58:	40001800 	.word	0x40001800

0800ae5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d122      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d11b      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f06f 0202 	mvn.w	r2, #2
 800ae88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9bf 	bl	800b222 <HAL_TIM_IC_CaptureCallback>
 800aea4:	e005      	b.n	800aeb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9b1 	bl	800b20e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9c2 	bl	800b236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d122      	bne.n	800af0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f003 0304 	and.w	r3, r3, #4
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d11b      	bne.n	800af0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0204 	mvn.w	r2, #4
 800aedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2202      	movs	r2, #2
 800aee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f995 	bl	800b222 <HAL_TIM_IC_CaptureCallback>
 800aef8:	e005      	b.n	800af06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f987 	bl	800b20e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f998 	bl	800b236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0308 	and.w	r3, r3, #8
 800af16:	2b08      	cmp	r3, #8
 800af18:	d122      	bne.n	800af60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b08      	cmp	r3, #8
 800af26:	d11b      	bne.n	800af60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0208 	mvn.w	r2, #8
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f96b 	bl	800b222 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f95d 	bl	800b20e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f96e 	bl	800b236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d122      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0310 	and.w	r3, r3, #16
 800af78:	2b10      	cmp	r3, #16
 800af7a:	d11b      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0210 	mvn.w	r2, #16
 800af84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2208      	movs	r2, #8
 800af8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f941 	bl	800b222 <HAL_TIM_IC_CaptureCallback>
 800afa0:	e005      	b.n	800afae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f933 	bl	800b20e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f944 	bl	800b236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d10e      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d107      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0201 	mvn.w	r2, #1
 800afd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f90d 	bl	800b1fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afea:	2b80      	cmp	r3, #128	; 0x80
 800afec:	d10e      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff8:	2b80      	cmp	r3, #128	; 0x80
 800affa:	d107      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 faea 	bl	800b5e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b016:	2b40      	cmp	r3, #64	; 0x40
 800b018:	d10e      	bne.n	800b038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b024:	2b40      	cmp	r3, #64	; 0x40
 800b026:	d107      	bne.n	800b038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f909 	bl	800b24a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b20      	cmp	r3, #32
 800b044:	d10e      	bne.n	800b064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 0320 	and.w	r3, r3, #32
 800b050:	2b20      	cmp	r3, #32
 800b052:	d107      	bne.n	800b064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f06f 0220 	mvn.w	r2, #32
 800b05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fab4 	bl	800b5cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_TIM_ConfigClockSource+0x1c>
 800b084:	2302      	movs	r3, #2
 800b086:	e0b4      	b.n	800b1f2 <HAL_TIM_ConfigClockSource+0x186>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0c0:	d03e      	beq.n	800b140 <HAL_TIM_ConfigClockSource+0xd4>
 800b0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0c6:	f200 8087 	bhi.w	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ce:	f000 8086 	beq.w	800b1de <HAL_TIM_ConfigClockSource+0x172>
 800b0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0d6:	d87f      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0d8:	2b70      	cmp	r3, #112	; 0x70
 800b0da:	d01a      	beq.n	800b112 <HAL_TIM_ConfigClockSource+0xa6>
 800b0dc:	2b70      	cmp	r3, #112	; 0x70
 800b0de:	d87b      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0e0:	2b60      	cmp	r3, #96	; 0x60
 800b0e2:	d050      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0x11a>
 800b0e4:	2b60      	cmp	r3, #96	; 0x60
 800b0e6:	d877      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0e8:	2b50      	cmp	r3, #80	; 0x50
 800b0ea:	d03c      	beq.n	800b166 <HAL_TIM_ConfigClockSource+0xfa>
 800b0ec:	2b50      	cmp	r3, #80	; 0x50
 800b0ee:	d873      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f0:	2b40      	cmp	r3, #64	; 0x40
 800b0f2:	d058      	beq.n	800b1a6 <HAL_TIM_ConfigClockSource+0x13a>
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d86f      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b0f8:	2b30      	cmp	r3, #48	; 0x30
 800b0fa:	d064      	beq.n	800b1c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b0fc:	2b30      	cmp	r3, #48	; 0x30
 800b0fe:	d86b      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b100:	2b20      	cmp	r3, #32
 800b102:	d060      	beq.n	800b1c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b104:	2b20      	cmp	r3, #32
 800b106:	d867      	bhi.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d05c      	beq.n	800b1c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b10c:	2b10      	cmp	r3, #16
 800b10e:	d05a      	beq.n	800b1c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b110:	e062      	b.n	800b1d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	6899      	ldr	r1, [r3, #8]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f000 f9b7 	bl	800b494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	609a      	str	r2, [r3, #8]
      break;
 800b13e:	e04f      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	6899      	ldr	r1, [r3, #8]
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f000 f9a0 	bl	800b494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b162:	609a      	str	r2, [r3, #8]
      break;
 800b164:	e03c      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6859      	ldr	r1, [r3, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	461a      	mov	r2, r3
 800b174:	f000 f914 	bl	800b3a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2150      	movs	r1, #80	; 0x50
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f96d 	bl	800b45e <TIM_ITRx_SetConfig>
      break;
 800b184:	e02c      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	6859      	ldr	r1, [r3, #4]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	461a      	mov	r2, r3
 800b194:	f000 f933 	bl	800b3fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2160      	movs	r1, #96	; 0x60
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 f95d 	bl	800b45e <TIM_ITRx_SetConfig>
      break;
 800b1a4:	e01c      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	6859      	ldr	r1, [r3, #4]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	f000 f8f4 	bl	800b3a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2140      	movs	r1, #64	; 0x40
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f94d 	bl	800b45e <TIM_ITRx_SetConfig>
      break;
 800b1c4:	e00c      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	f000 f944 	bl	800b45e <TIM_ITRx_SetConfig>
      break;
 800b1d6:	e003      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	73fb      	strb	r3, [r7, #15]
      break;
 800b1dc:	e000      	b.n	800b1e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a40      	ldr	r2, [pc, #256]	; (800b374 <TIM_Base_SetConfig+0x114>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d013      	beq.n	800b2a0 <TIM_Base_SetConfig+0x40>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27e:	d00f      	beq.n	800b2a0 <TIM_Base_SetConfig+0x40>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a3d      	ldr	r2, [pc, #244]	; (800b378 <TIM_Base_SetConfig+0x118>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d00b      	beq.n	800b2a0 <TIM_Base_SetConfig+0x40>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a3c      	ldr	r2, [pc, #240]	; (800b37c <TIM_Base_SetConfig+0x11c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d007      	beq.n	800b2a0 <TIM_Base_SetConfig+0x40>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a3b      	ldr	r2, [pc, #236]	; (800b380 <TIM_Base_SetConfig+0x120>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d003      	beq.n	800b2a0 <TIM_Base_SetConfig+0x40>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a3a      	ldr	r2, [pc, #232]	; (800b384 <TIM_Base_SetConfig+0x124>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d108      	bne.n	800b2b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a2f      	ldr	r2, [pc, #188]	; (800b374 <TIM_Base_SetConfig+0x114>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d02b      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c0:	d027      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a2c      	ldr	r2, [pc, #176]	; (800b378 <TIM_Base_SetConfig+0x118>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d023      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a2b      	ldr	r2, [pc, #172]	; (800b37c <TIM_Base_SetConfig+0x11c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d01f      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a2a      	ldr	r2, [pc, #168]	; (800b380 <TIM_Base_SetConfig+0x120>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d01b      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a29      	ldr	r2, [pc, #164]	; (800b384 <TIM_Base_SetConfig+0x124>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d017      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a28      	ldr	r2, [pc, #160]	; (800b388 <TIM_Base_SetConfig+0x128>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d013      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a27      	ldr	r2, [pc, #156]	; (800b38c <TIM_Base_SetConfig+0x12c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d00f      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a26      	ldr	r2, [pc, #152]	; (800b390 <TIM_Base_SetConfig+0x130>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00b      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a25      	ldr	r2, [pc, #148]	; (800b394 <TIM_Base_SetConfig+0x134>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d007      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a24      	ldr	r2, [pc, #144]	; (800b398 <TIM_Base_SetConfig+0x138>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d003      	beq.n	800b312 <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a23      	ldr	r2, [pc, #140]	; (800b39c <TIM_Base_SetConfig+0x13c>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d108      	bne.n	800b324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <TIM_Base_SetConfig+0x114>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d003      	beq.n	800b358 <TIM_Base_SetConfig+0xf8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a0c      	ldr	r2, [pc, #48]	; (800b384 <TIM_Base_SetConfig+0x124>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d103      	bne.n	800b360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	691a      	ldr	r2, [r3, #16]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	615a      	str	r2, [r3, #20]
}
 800b366:	bf00      	nop
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	40010000 	.word	0x40010000
 800b378:	40000400 	.word	0x40000400
 800b37c:	40000800 	.word	0x40000800
 800b380:	40000c00 	.word	0x40000c00
 800b384:	40010400 	.word	0x40010400
 800b388:	40014000 	.word	0x40014000
 800b38c:	40014400 	.word	0x40014400
 800b390:	40014800 	.word	0x40014800
 800b394:	40001800 	.word	0x40001800
 800b398:	40001c00 	.word	0x40001c00
 800b39c:	40002000 	.word	0x40002000

0800b3a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	f023 0201 	bic.w	r2, r3, #1
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b3ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f023 030a 	bic.w	r3, r3, #10
 800b3dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	621a      	str	r2, [r3, #32]
}
 800b3f2:	bf00      	nop
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b087      	sub	sp, #28
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	f023 0210 	bic.w	r2, r3, #16
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	699b      	ldr	r3, [r3, #24]
 800b41a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	031b      	lsls	r3, r3, #12
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	4313      	orrs	r3, r2
 800b432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b43a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	011b      	lsls	r3, r3, #4
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	621a      	str	r2, [r3, #32]
}
 800b452:	bf00      	nop
 800b454:	371c      	adds	r7, #28
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	f043 0307 	orr.w	r3, r3, #7
 800b480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	609a      	str	r2, [r3, #8]
}
 800b488:	bf00      	nop
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	021a      	lsls	r2, r3, #8
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	609a      	str	r2, [r3, #8]
}
 800b4c8:	bf00      	nop
 800b4ca:	371c      	adds	r7, #28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e05a      	b.n	800b5a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a21      	ldr	r2, [pc, #132]	; (800b5b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d022      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b538:	d01d      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a1d      	ldr	r2, [pc, #116]	; (800b5b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d018      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a1b      	ldr	r2, [pc, #108]	; (800b5b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d013      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a1a      	ldr	r2, [pc, #104]	; (800b5bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d00e      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a18      	ldr	r2, [pc, #96]	; (800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d009      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a17      	ldr	r2, [pc, #92]	; (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d004      	beq.n	800b576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a15      	ldr	r2, [pc, #84]	; (800b5c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d10c      	bne.n	800b590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b57c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	4313      	orrs	r3, r2
 800b586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	40010000 	.word	0x40010000
 800b5b4:	40000400 	.word	0x40000400
 800b5b8:	40000800 	.word	0x40000800
 800b5bc:	40000c00 	.word	0x40000c00
 800b5c0:	40010400 	.word	0x40010400
 800b5c4:	40014000 	.word	0x40014000
 800b5c8:	40001800 	.word	0x40001800

0800b5cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e03f      	b.n	800b686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7f9 f8d6 	bl	80047cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2224      	movs	r2, #36	; 0x24
 800b624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fddf 	bl	800c1fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	691a      	ldr	r2, [r3, #16]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b64c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	695a      	ldr	r2, [r3, #20]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b65c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68da      	ldr	r2, [r3, #12]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b66c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2220      	movs	r2, #32
 800b680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b08a      	sub	sp, #40	; 0x28
 800b692:	af02      	add	r7, sp, #8
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	603b      	str	r3, [r7, #0]
 800b69a:	4613      	mov	r3, r2
 800b69c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d17c      	bne.n	800b7a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <HAL_UART_Transmit+0x2c>
 800b6b4:	88fb      	ldrh	r3, [r7, #6]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e075      	b.n	800b7aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d101      	bne.n	800b6cc <HAL_UART_Transmit+0x3e>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	e06e      	b.n	800b7aa <HAL_UART_Transmit+0x11c>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2221      	movs	r2, #33	; 0x21
 800b6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6e2:	f7fb fd2f 	bl	8007144 <HAL_GetTick>
 800b6e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	88fa      	ldrh	r2, [r7, #6]
 800b6f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fc:	d108      	bne.n	800b710 <HAL_UART_Transmit+0x82>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d104      	bne.n	800b710 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	e003      	b.n	800b718 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b720:	e02a      	b.n	800b778 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	2200      	movs	r2, #0
 800b72a:	2180      	movs	r1, #128	; 0x80
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 fb1f 	bl	800bd70 <UART_WaitOnFlagUntilTimeout>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e036      	b.n	800b7aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10b      	bne.n	800b75a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	881b      	ldrh	r3, [r3, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b750:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	3302      	adds	r3, #2
 800b756:	61bb      	str	r3, [r7, #24]
 800b758:	e007      	b.n	800b76a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	781a      	ldrb	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	3301      	adds	r3, #1
 800b768:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b76e:	b29b      	uxth	r3, r3
 800b770:	3b01      	subs	r3, #1
 800b772:	b29a      	uxth	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1cf      	bne.n	800b722 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2200      	movs	r2, #0
 800b78a:	2140      	movs	r1, #64	; 0x40
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 faef 	bl	800bd70 <UART_WaitOnFlagUntilTimeout>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d001      	beq.n	800b79c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e006      	b.n	800b7aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e000      	b.n	800b7aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b7a8:	2302      	movs	r3, #2
  }
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	d11d      	bne.n	800b808 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d002      	beq.n	800b7d8 <HAL_UART_Receive_IT+0x26>
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d101      	bne.n	800b7dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e016      	b.n	800b80a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d101      	bne.n	800b7ea <HAL_UART_Receive_IT+0x38>
 800b7e6:	2302      	movs	r3, #2
 800b7e8:	e00f      	b.n	800b80a <HAL_UART_Receive_IT+0x58>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7f8:	88fb      	ldrh	r3, [r7, #6]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	68b9      	ldr	r1, [r7, #8]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 fb24 	bl	800be4c <UART_Start_Receive_IT>
 800b804:	4603      	mov	r3, r0
 800b806:	e000      	b.n	800b80a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b808:	2302      	movs	r3, #2
  }
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b0ba      	sub	sp, #232	; 0xe8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10f      	bne.n	800b87a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b85e:	f003 0320 	and.w	r3, r3, #32
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <HAL_UART_IRQHandler+0x66>
 800b866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b86a:	f003 0320 	and.w	r3, r3, #32
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fc07 	bl	800c086 <UART_Receive_IT>
      return;
 800b878:	e256      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b87a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 80de 	beq.w	800ba40 <HAL_UART_IRQHandler+0x22c>
 800b884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d106      	bne.n	800b89e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b894:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 80d1 	beq.w	800ba40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xae>
 800b8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d005      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	f043 0201 	orr.w	r2, r3, #1
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c6:	f003 0304 	and.w	r3, r3, #4
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xd2>
 800b8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f043 0202 	orr.w	r2, r3, #2
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 0302 	and.w	r3, r3, #2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00b      	beq.n	800b90a <HAL_UART_IRQHandler+0xf6>
 800b8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b902:	f043 0204 	orr.w	r2, r3, #4
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b90e:	f003 0308 	and.w	r3, r3, #8
 800b912:	2b00      	cmp	r3, #0
 800b914:	d011      	beq.n	800b93a <HAL_UART_IRQHandler+0x126>
 800b916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d105      	bne.n	800b92e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f043 0208 	orr.w	r2, r3, #8
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 81ed 	beq.w	800bd1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b948:	f003 0320 	and.w	r3, r3, #32
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d008      	beq.n	800b962 <HAL_UART_IRQHandler+0x14e>
 800b950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fb92 	bl	800c086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96c:	2b40      	cmp	r3, #64	; 0x40
 800b96e:	bf0c      	ite	eq
 800b970:	2301      	moveq	r3, #1
 800b972:	2300      	movne	r3, #0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97e:	f003 0308 	and.w	r3, r3, #8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <HAL_UART_IRQHandler+0x17a>
 800b986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d04f      	beq.n	800ba2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa9a 	bl	800bec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99e:	2b40      	cmp	r3, #64	; 0x40
 800b9a0:	d141      	bne.n	800ba26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3314      	adds	r3, #20
 800b9a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9de:	e841 2300 	strex	r3, r2, [r1]
 800b9e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1d9      	bne.n	800b9a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d013      	beq.n	800ba1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fa:	4a7d      	ldr	r2, [pc, #500]	; (800bbf0 <HAL_UART_IRQHandler+0x3dc>)
 800b9fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fc fa5a 	bl	8007ebc <HAL_DMA_Abort_IT>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d016      	beq.n	800ba3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba1c:	e00e      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f990 	bl	800bd44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba24:	e00a      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f98c 	bl	800bd44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba2c:	e006      	b.n	800ba3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f988 	bl	800bd44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ba3a:	e170      	b.n	800bd1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3c:	bf00      	nop
    return;
 800ba3e:	e16e      	b.n	800bd1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	f040 814a 	bne.w	800bcde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4e:	f003 0310 	and.w	r3, r3, #16
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 8143 	beq.w	800bcde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5c:	f003 0310 	and.w	r3, r3, #16
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 813c 	beq.w	800bcde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba66:	2300      	movs	r3, #0
 800ba68:	60bb      	str	r3, [r7, #8]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60bb      	str	r3, [r7, #8]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	60bb      	str	r3, [r7, #8]
 800ba7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba86:	2b40      	cmp	r3, #64	; 0x40
 800ba88:	f040 80b4 	bne.w	800bbf4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 8140 	beq.w	800bd22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800baaa:	429a      	cmp	r2, r3
 800baac:	f080 8139 	bcs.w	800bd22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bab6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bac2:	f000 8088 	beq.w	800bbd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	330c      	adds	r3, #12
 800bacc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800badc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800baf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800baf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bafe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1d9      	bne.n	800bac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3314      	adds	r3, #20
 800bb18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3314      	adds	r3, #20
 800bb32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb42:	e841 2300 	strex	r3, r2, [r1]
 800bb46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e1      	bne.n	800bb12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3314      	adds	r3, #20
 800bb54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3314      	adds	r3, #20
 800bb6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb72:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb7a:	e841 2300 	strex	r3, r2, [r1]
 800bb7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e3      	bne.n	800bb4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	330c      	adds	r3, #12
 800bb9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb9e:	e853 3f00 	ldrex	r3, [r3]
 800bba2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba6:	f023 0310 	bic.w	r3, r3, #16
 800bbaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bbb8:	65ba      	str	r2, [r7, #88]	; 0x58
 800bbba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbc0:	e841 2300 	strex	r3, r2, [r1]
 800bbc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1e3      	bne.n	800bb94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7fc f903 	bl	8007ddc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f8b6 	bl	800bd58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbec:	e099      	b.n	800bd22 <HAL_UART_IRQHandler+0x50e>
 800bbee:	bf00      	nop
 800bbf0:	0800bf8f 	.word	0x0800bf8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 808b 	beq.w	800bd26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bc10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8086 	beq.w	800bd26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	330c      	adds	r3, #12
 800bc20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	e853 3f00 	ldrex	r3, [r3]
 800bc28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	330c      	adds	r3, #12
 800bc3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc3e:	647a      	str	r2, [r7, #68]	; 0x44
 800bc40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1e3      	bne.n	800bc1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3314      	adds	r3, #20
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5c:	e853 3f00 	ldrex	r3, [r3]
 800bc60:	623b      	str	r3, [r7, #32]
   return(result);
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	f023 0301 	bic.w	r3, r3, #1
 800bc68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3314      	adds	r3, #20
 800bc72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc76:	633a      	str	r2, [r7, #48]	; 0x30
 800bc78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc7e:	e841 2300 	strex	r3, r2, [r1]
 800bc82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e3      	bne.n	800bc52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	330c      	adds	r3, #12
 800bc9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f023 0310 	bic.w	r3, r3, #16
 800bcae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	330c      	adds	r3, #12
 800bcb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bcbc:	61fa      	str	r2, [r7, #28]
 800bcbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	69b9      	ldr	r1, [r7, #24]
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e3      	bne.n	800bc98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f83e 	bl	800bd58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bcdc:	e023      	b.n	800bd26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d009      	beq.n	800bcfe <HAL_UART_IRQHandler+0x4ea>
 800bcea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f95d 	bl	800bfb6 <UART_Transmit_IT>
    return;
 800bcfc:	e014      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00e      	beq.n	800bd28 <HAL_UART_IRQHandler+0x514>
 800bd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d008      	beq.n	800bd28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f99d 	bl	800c056 <UART_EndTransmit_IT>
    return;
 800bd1c:	e004      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
    return;
 800bd1e:	bf00      	nop
 800bd20:	e002      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
      return;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <HAL_UART_IRQHandler+0x514>
      return;
 800bd26:	bf00      	nop
  }
}
 800bd28:	37e8      	adds	r7, #232	; 0xe8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop

0800bd30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b090      	sub	sp, #64	; 0x40
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	603b      	str	r3, [r7, #0]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd80:	e050      	b.n	800be24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd88:	d04c      	beq.n	800be24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d007      	beq.n	800bda0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd90:	f7fb f9d8 	bl	8007144 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d241      	bcs.n	800be24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	330c      	adds	r3, #12
 800bda6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	330c      	adds	r3, #12
 800bdbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bdc0:	637a      	str	r2, [r7, #52]	; 0x34
 800bdc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e5      	bne.n	800bda0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3314      	adds	r3, #20
 800bdda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	613b      	str	r3, [r7, #16]
   return(result);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f023 0301 	bic.w	r3, r3, #1
 800bdea:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdf4:	623a      	str	r2, [r7, #32]
 800bdf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf8:	69f9      	ldr	r1, [r7, #28]
 800bdfa:	6a3a      	ldr	r2, [r7, #32]
 800bdfc:	e841 2300 	strex	r3, r2, [r1]
 800be00:	61bb      	str	r3, [r7, #24]
   return(result);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e5      	bne.n	800bdd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2220      	movs	r2, #32
 800be0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2220      	movs	r2, #32
 800be14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e00f      	b.n	800be44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	4013      	ands	r3, r2
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	429a      	cmp	r2, r3
 800be32:	bf0c      	ite	eq
 800be34:	2301      	moveq	r3, #1
 800be36:	2300      	movne	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	461a      	mov	r2, r3
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d09f      	beq.n	800bd82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3740      	adds	r7, #64	; 0x40
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4613      	mov	r3, r2
 800be58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	88fa      	ldrh	r2, [r7, #6]
 800be64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	88fa      	ldrh	r2, [r7, #6]
 800be6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2222      	movs	r2, #34	; 0x22
 800be76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d007      	beq.n	800be9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	695a      	ldr	r2, [r3, #20]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f042 0201 	orr.w	r2, r2, #1
 800bea8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f042 0220 	orr.w	r2, r2, #32
 800beb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bec8:	b480      	push	{r7}
 800beca:	b095      	sub	sp, #84	; 0x54
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	330c      	adds	r3, #12
 800bed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	330c      	adds	r3, #12
 800beee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bef0:	643a      	str	r2, [r7, #64]	; 0x40
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e5      	bne.n	800bed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3314      	adds	r3, #20
 800bf0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	e853 3f00 	ldrex	r3, [r3]
 800bf12:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3314      	adds	r3, #20
 800bf22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e5      	bne.n	800bf04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d119      	bne.n	800bf74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	330c      	adds	r3, #12
 800bf46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	f023 0310 	bic.w	r3, r3, #16
 800bf56:	647b      	str	r3, [r7, #68]	; 0x44
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	330c      	adds	r3, #12
 800bf5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf60:	61ba      	str	r2, [r7, #24]
 800bf62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	6979      	ldr	r1, [r7, #20]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e5      	bne.n	800bf40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2220      	movs	r2, #32
 800bf78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bf82:	bf00      	nop
 800bf84:	3754      	adds	r7, #84	; 0x54
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff fecb 	bl	800bd44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfae:	bf00      	nop
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b21      	cmp	r3, #33	; 0x21
 800bfc8:	d13e      	bne.n	800c048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd2:	d114      	bne.n	800bffe <UART_Transmit_IT+0x48>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d110      	bne.n	800bffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	1c9a      	adds	r2, r3, #2
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	621a      	str	r2, [r3, #32]
 800bffc:	e008      	b.n	800c010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	1c59      	adds	r1, r3, #1
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	6211      	str	r1, [r2, #32]
 800c008:	781a      	ldrb	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c014:	b29b      	uxth	r3, r3
 800c016:	3b01      	subs	r3, #1
 800c018:	b29b      	uxth	r3, r3
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	4619      	mov	r1, r3
 800c01e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10f      	bne.n	800c044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	e000      	b.n	800c04a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c048:	2302      	movs	r3, #2
  }
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68da      	ldr	r2, [r3, #12]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c06c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2220      	movs	r2, #32
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff fe5a 	bl	800bd30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b08c      	sub	sp, #48	; 0x30
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b22      	cmp	r3, #34	; 0x22
 800c098:	f040 80ab 	bne.w	800c1f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a4:	d117      	bne.n	800c0d6 <UART_Receive_IT+0x50>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d113      	bne.n	800c0d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ce:	1c9a      	adds	r2, r3, #2
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	629a      	str	r2, [r3, #40]	; 0x28
 800c0d4:	e026      	b.n	800c124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e8:	d007      	beq.n	800c0fa <UART_Receive_IT+0x74>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10a      	bne.n	800c108 <UART_Receive_IT+0x82>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	b2da      	uxtb	r2, r3
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	701a      	strb	r2, [r3, #0]
 800c106:	e008      	b.n	800c11a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c114:	b2da      	uxtb	r2, r3
 800c116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c128:	b29b      	uxth	r3, r3
 800c12a:	3b01      	subs	r3, #1
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	4619      	mov	r1, r3
 800c132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c134:	2b00      	cmp	r3, #0
 800c136:	d15a      	bne.n	800c1ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 0220 	bic.w	r2, r2, #32
 800c146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68da      	ldr	r2, [r3, #12]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	695a      	ldr	r2, [r3, #20]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f022 0201 	bic.w	r2, r2, #1
 800c166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c174:	2b01      	cmp	r3, #1
 800c176:	d135      	bne.n	800c1e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	330c      	adds	r3, #12
 800c184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	e853 3f00 	ldrex	r3, [r3]
 800c18c:	613b      	str	r3, [r7, #16]
   return(result);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	f023 0310 	bic.w	r3, r3, #16
 800c194:	627b      	str	r3, [r7, #36]	; 0x24
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	330c      	adds	r3, #12
 800c19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c19e:	623a      	str	r2, [r7, #32]
 800c1a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	69f9      	ldr	r1, [r7, #28]
 800c1a4:	6a3a      	ldr	r2, [r7, #32]
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e5      	bne.n	800c17e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0310 	and.w	r3, r3, #16
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d10a      	bne.n	800c1d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff fdbb 	bl	800bd58 <HAL_UARTEx_RxEventCallback>
 800c1e2:	e002      	b.n	800c1ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f7f8 f817 	bl	8004218 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e002      	b.n	800c1f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e000      	b.n	800c1f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c1f2:	2302      	movs	r3, #2
  }
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3730      	adds	r7, #48	; 0x30
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c200:	b0c0      	sub	sp, #256	; 0x100
 800c202:	af00      	add	r7, sp, #0
 800c204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c218:	68d9      	ldr	r1, [r3, #12]
 800c21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	ea40 0301 	orr.w	r3, r0, r1
 800c224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	431a      	orrs	r2, r3
 800c234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	431a      	orrs	r2, r3
 800c23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	4313      	orrs	r3, r2
 800c244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c254:	f021 010c 	bic.w	r1, r1, #12
 800c258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c262:	430b      	orrs	r3, r1
 800c264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c276:	6999      	ldr	r1, [r3, #24]
 800c278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	ea40 0301 	orr.w	r3, r0, r1
 800c282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	4b8f      	ldr	r3, [pc, #572]	; (800c4c8 <UART_SetConfig+0x2cc>)
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d005      	beq.n	800c29c <UART_SetConfig+0xa0>
 800c290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b8d      	ldr	r3, [pc, #564]	; (800c4cc <UART_SetConfig+0x2d0>)
 800c298:	429a      	cmp	r2, r3
 800c29a:	d104      	bne.n	800c2a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c29c:	f7fd fb62 	bl	8009964 <HAL_RCC_GetPCLK2Freq>
 800c2a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c2a4:	e003      	b.n	800c2ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c2a6:	f7fd fb49 	bl	800993c <HAL_RCC_GetPCLK1Freq>
 800c2aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b2:	69db      	ldr	r3, [r3, #28]
 800c2b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b8:	f040 810c 	bne.w	800c4d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c2bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c2c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c2ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	462b      	mov	r3, r5
 800c2d2:	1891      	adds	r1, r2, r2
 800c2d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2d6:	415b      	adcs	r3, r3
 800c2d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c2de:	4621      	mov	r1, r4
 800c2e0:	eb12 0801 	adds.w	r8, r2, r1
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	eb43 0901 	adc.w	r9, r3, r1
 800c2ea:	f04f 0200 	mov.w	r2, #0
 800c2ee:	f04f 0300 	mov.w	r3, #0
 800c2f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2fe:	4690      	mov	r8, r2
 800c300:	4699      	mov	r9, r3
 800c302:	4623      	mov	r3, r4
 800c304:	eb18 0303 	adds.w	r3, r8, r3
 800c308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c30c:	462b      	mov	r3, r5
 800c30e:	eb49 0303 	adc.w	r3, r9, r3
 800c312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c32a:	460b      	mov	r3, r1
 800c32c:	18db      	adds	r3, r3, r3
 800c32e:	653b      	str	r3, [r7, #80]	; 0x50
 800c330:	4613      	mov	r3, r2
 800c332:	eb42 0303 	adc.w	r3, r2, r3
 800c336:	657b      	str	r3, [r7, #84]	; 0x54
 800c338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c33c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c340:	f7f4 fcf2 	bl	8000d28 <__aeabi_uldivmod>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4b61      	ldr	r3, [pc, #388]	; (800c4d0 <UART_SetConfig+0x2d4>)
 800c34a:	fba3 2302 	umull	r2, r3, r3, r2
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	011c      	lsls	r4, r3, #4
 800c352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c356:	2200      	movs	r2, #0
 800c358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c35c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c364:	4642      	mov	r2, r8
 800c366:	464b      	mov	r3, r9
 800c368:	1891      	adds	r1, r2, r2
 800c36a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c36c:	415b      	adcs	r3, r3
 800c36e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c374:	4641      	mov	r1, r8
 800c376:	eb12 0a01 	adds.w	sl, r2, r1
 800c37a:	4649      	mov	r1, r9
 800c37c:	eb43 0b01 	adc.w	fp, r3, r1
 800c380:	f04f 0200 	mov.w	r2, #0
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c38c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c394:	4692      	mov	sl, r2
 800c396:	469b      	mov	fp, r3
 800c398:	4643      	mov	r3, r8
 800c39a:	eb1a 0303 	adds.w	r3, sl, r3
 800c39e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3a2:	464b      	mov	r3, r9
 800c3a4:	eb4b 0303 	adc.w	r3, fp, r3
 800c3a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c3bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	18db      	adds	r3, r3, r3
 800c3c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	eb42 0303 	adc.w	r3, r2, r3
 800c3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c3d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c3d6:	f7f4 fca7 	bl	8000d28 <__aeabi_uldivmod>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4b3b      	ldr	r3, [pc, #236]	; (800c4d0 <UART_SetConfig+0x2d4>)
 800c3e2:	fba3 2301 	umull	r2, r3, r3, r1
 800c3e6:	095b      	lsrs	r3, r3, #5
 800c3e8:	2264      	movs	r2, #100	; 0x64
 800c3ea:	fb02 f303 	mul.w	r3, r2, r3
 800c3ee:	1acb      	subs	r3, r1, r3
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c3f6:	4b36      	ldr	r3, [pc, #216]	; (800c4d0 <UART_SetConfig+0x2d4>)
 800c3f8:	fba3 2302 	umull	r2, r3, r3, r2
 800c3fc:	095b      	lsrs	r3, r3, #5
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c404:	441c      	add	r4, r3
 800c406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c418:	4642      	mov	r2, r8
 800c41a:	464b      	mov	r3, r9
 800c41c:	1891      	adds	r1, r2, r2
 800c41e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c420:	415b      	adcs	r3, r3
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c428:	4641      	mov	r1, r8
 800c42a:	1851      	adds	r1, r2, r1
 800c42c:	6339      	str	r1, [r7, #48]	; 0x30
 800c42e:	4649      	mov	r1, r9
 800c430:	414b      	adcs	r3, r1
 800c432:	637b      	str	r3, [r7, #52]	; 0x34
 800c434:	f04f 0200 	mov.w	r2, #0
 800c438:	f04f 0300 	mov.w	r3, #0
 800c43c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c440:	4659      	mov	r1, fp
 800c442:	00cb      	lsls	r3, r1, #3
 800c444:	4651      	mov	r1, sl
 800c446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c44a:	4651      	mov	r1, sl
 800c44c:	00ca      	lsls	r2, r1, #3
 800c44e:	4610      	mov	r0, r2
 800c450:	4619      	mov	r1, r3
 800c452:	4603      	mov	r3, r0
 800c454:	4642      	mov	r2, r8
 800c456:	189b      	adds	r3, r3, r2
 800c458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c45c:	464b      	mov	r3, r9
 800c45e:	460a      	mov	r2, r1
 800c460:	eb42 0303 	adc.w	r3, r2, r3
 800c464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c47c:	460b      	mov	r3, r1
 800c47e:	18db      	adds	r3, r3, r3
 800c480:	62bb      	str	r3, [r7, #40]	; 0x28
 800c482:	4613      	mov	r3, r2
 800c484:	eb42 0303 	adc.w	r3, r2, r3
 800c488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c48a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c48e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c492:	f7f4 fc49 	bl	8000d28 <__aeabi_uldivmod>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4b0d      	ldr	r3, [pc, #52]	; (800c4d0 <UART_SetConfig+0x2d4>)
 800c49c:	fba3 1302 	umull	r1, r3, r3, r2
 800c4a0:	095b      	lsrs	r3, r3, #5
 800c4a2:	2164      	movs	r1, #100	; 0x64
 800c4a4:	fb01 f303 	mul.w	r3, r1, r3
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	3332      	adds	r3, #50	; 0x32
 800c4ae:	4a08      	ldr	r2, [pc, #32]	; (800c4d0 <UART_SetConfig+0x2d4>)
 800c4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b4:	095b      	lsrs	r3, r3, #5
 800c4b6:	f003 0207 	and.w	r2, r3, #7
 800c4ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4422      	add	r2, r4
 800c4c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c4c4:	e106      	b.n	800c6d4 <UART_SetConfig+0x4d8>
 800c4c6:	bf00      	nop
 800c4c8:	40011000 	.word	0x40011000
 800c4cc:	40011400 	.word	0x40011400
 800c4d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c4d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c4e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c4e6:	4642      	mov	r2, r8
 800c4e8:	464b      	mov	r3, r9
 800c4ea:	1891      	adds	r1, r2, r2
 800c4ec:	6239      	str	r1, [r7, #32]
 800c4ee:	415b      	adcs	r3, r3
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c4f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	1854      	adds	r4, r2, r1
 800c4fa:	4649      	mov	r1, r9
 800c4fc:	eb43 0501 	adc.w	r5, r3, r1
 800c500:	f04f 0200 	mov.w	r2, #0
 800c504:	f04f 0300 	mov.w	r3, #0
 800c508:	00eb      	lsls	r3, r5, #3
 800c50a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c50e:	00e2      	lsls	r2, r4, #3
 800c510:	4614      	mov	r4, r2
 800c512:	461d      	mov	r5, r3
 800c514:	4643      	mov	r3, r8
 800c516:	18e3      	adds	r3, r4, r3
 800c518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c51c:	464b      	mov	r3, r9
 800c51e:	eb45 0303 	adc.w	r3, r5, r3
 800c522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	f04f 0300 	mov.w	r3, #0
 800c53e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c542:	4629      	mov	r1, r5
 800c544:	008b      	lsls	r3, r1, #2
 800c546:	4621      	mov	r1, r4
 800c548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c54c:	4621      	mov	r1, r4
 800c54e:	008a      	lsls	r2, r1, #2
 800c550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c554:	f7f4 fbe8 	bl	8000d28 <__aeabi_uldivmod>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	4b60      	ldr	r3, [pc, #384]	; (800c6e0 <UART_SetConfig+0x4e4>)
 800c55e:	fba3 2302 	umull	r2, r3, r3, r2
 800c562:	095b      	lsrs	r3, r3, #5
 800c564:	011c      	lsls	r4, r3, #4
 800c566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c56a:	2200      	movs	r2, #0
 800c56c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c578:	4642      	mov	r2, r8
 800c57a:	464b      	mov	r3, r9
 800c57c:	1891      	adds	r1, r2, r2
 800c57e:	61b9      	str	r1, [r7, #24]
 800c580:	415b      	adcs	r3, r3
 800c582:	61fb      	str	r3, [r7, #28]
 800c584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c588:	4641      	mov	r1, r8
 800c58a:	1851      	adds	r1, r2, r1
 800c58c:	6139      	str	r1, [r7, #16]
 800c58e:	4649      	mov	r1, r9
 800c590:	414b      	adcs	r3, r1
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	f04f 0200 	mov.w	r2, #0
 800c598:	f04f 0300 	mov.w	r3, #0
 800c59c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	00cb      	lsls	r3, r1, #3
 800c5a4:	4651      	mov	r1, sl
 800c5a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5aa:	4651      	mov	r1, sl
 800c5ac:	00ca      	lsls	r2, r1, #3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	4642      	mov	r2, r8
 800c5b6:	189b      	adds	r3, r3, r2
 800c5b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5bc:	464b      	mov	r3, r9
 800c5be:	460a      	mov	r2, r1
 800c5c0:	eb42 0303 	adc.w	r3, r2, r3
 800c5c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c5d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c5d4:	f04f 0200 	mov.w	r2, #0
 800c5d8:	f04f 0300 	mov.w	r3, #0
 800c5dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	008b      	lsls	r3, r1, #2
 800c5e4:	4641      	mov	r1, r8
 800c5e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5ea:	4641      	mov	r1, r8
 800c5ec:	008a      	lsls	r2, r1, #2
 800c5ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c5f2:	f7f4 fb99 	bl	8000d28 <__aeabi_uldivmod>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	4b38      	ldr	r3, [pc, #224]	; (800c6e0 <UART_SetConfig+0x4e4>)
 800c5fe:	fba3 2301 	umull	r2, r3, r3, r1
 800c602:	095b      	lsrs	r3, r3, #5
 800c604:	2264      	movs	r2, #100	; 0x64
 800c606:	fb02 f303 	mul.w	r3, r2, r3
 800c60a:	1acb      	subs	r3, r1, r3
 800c60c:	011b      	lsls	r3, r3, #4
 800c60e:	3332      	adds	r3, #50	; 0x32
 800c610:	4a33      	ldr	r2, [pc, #204]	; (800c6e0 <UART_SetConfig+0x4e4>)
 800c612:	fba2 2303 	umull	r2, r3, r2, r3
 800c616:	095b      	lsrs	r3, r3, #5
 800c618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c61c:	441c      	add	r4, r3
 800c61e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c622:	2200      	movs	r2, #0
 800c624:	673b      	str	r3, [r7, #112]	; 0x70
 800c626:	677a      	str	r2, [r7, #116]	; 0x74
 800c628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c62c:	4642      	mov	r2, r8
 800c62e:	464b      	mov	r3, r9
 800c630:	1891      	adds	r1, r2, r2
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	415b      	adcs	r3, r3
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c63c:	4641      	mov	r1, r8
 800c63e:	1851      	adds	r1, r2, r1
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	4649      	mov	r1, r9
 800c644:	414b      	adcs	r3, r1
 800c646:	607b      	str	r3, [r7, #4]
 800c648:	f04f 0200 	mov.w	r2, #0
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c654:	4659      	mov	r1, fp
 800c656:	00cb      	lsls	r3, r1, #3
 800c658:	4651      	mov	r1, sl
 800c65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c65e:	4651      	mov	r1, sl
 800c660:	00ca      	lsls	r2, r1, #3
 800c662:	4610      	mov	r0, r2
 800c664:	4619      	mov	r1, r3
 800c666:	4603      	mov	r3, r0
 800c668:	4642      	mov	r2, r8
 800c66a:	189b      	adds	r3, r3, r2
 800c66c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c66e:	464b      	mov	r3, r9
 800c670:	460a      	mov	r2, r1
 800c672:	eb42 0303 	adc.w	r3, r2, r3
 800c676:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	663b      	str	r3, [r7, #96]	; 0x60
 800c682:	667a      	str	r2, [r7, #100]	; 0x64
 800c684:	f04f 0200 	mov.w	r2, #0
 800c688:	f04f 0300 	mov.w	r3, #0
 800c68c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c690:	4649      	mov	r1, r9
 800c692:	008b      	lsls	r3, r1, #2
 800c694:	4641      	mov	r1, r8
 800c696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c69a:	4641      	mov	r1, r8
 800c69c:	008a      	lsls	r2, r1, #2
 800c69e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c6a2:	f7f4 fb41 	bl	8000d28 <__aeabi_uldivmod>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4b0d      	ldr	r3, [pc, #52]	; (800c6e0 <UART_SetConfig+0x4e4>)
 800c6ac:	fba3 1302 	umull	r1, r3, r3, r2
 800c6b0:	095b      	lsrs	r3, r3, #5
 800c6b2:	2164      	movs	r1, #100	; 0x64
 800c6b4:	fb01 f303 	mul.w	r3, r1, r3
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	011b      	lsls	r3, r3, #4
 800c6bc:	3332      	adds	r3, #50	; 0x32
 800c6be:	4a08      	ldr	r2, [pc, #32]	; (800c6e0 <UART_SetConfig+0x4e4>)
 800c6c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c4:	095b      	lsrs	r3, r3, #5
 800c6c6:	f003 020f 	and.w	r2, r3, #15
 800c6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4422      	add	r2, r4
 800c6d2:	609a      	str	r2, [r3, #8]
}
 800c6d4:	bf00      	nop
 800c6d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6e0:	51eb851f 	.word	0x51eb851f

0800c6e4 <__cvt>:
 800c6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e8:	ec55 4b10 	vmov	r4, r5, d0
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	460e      	mov	r6, r1
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	bfbb      	ittet	lt
 800c6f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6fa:	461d      	movlt	r5, r3
 800c6fc:	2300      	movge	r3, #0
 800c6fe:	232d      	movlt	r3, #45	; 0x2d
 800c700:	700b      	strb	r3, [r1, #0]
 800c702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c704:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c708:	4691      	mov	r9, r2
 800c70a:	f023 0820 	bic.w	r8, r3, #32
 800c70e:	bfbc      	itt	lt
 800c710:	4622      	movlt	r2, r4
 800c712:	4614      	movlt	r4, r2
 800c714:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c718:	d005      	beq.n	800c726 <__cvt+0x42>
 800c71a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c71e:	d100      	bne.n	800c722 <__cvt+0x3e>
 800c720:	3601      	adds	r6, #1
 800c722:	2102      	movs	r1, #2
 800c724:	e000      	b.n	800c728 <__cvt+0x44>
 800c726:	2103      	movs	r1, #3
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	ab02      	add	r3, sp, #8
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	ec45 4b10 	vmov	d0, r4, r5
 800c734:	4653      	mov	r3, sl
 800c736:	4632      	mov	r2, r6
 800c738:	f000 ff36 	bl	800d5a8 <_dtoa_r>
 800c73c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c740:	4607      	mov	r7, r0
 800c742:	d102      	bne.n	800c74a <__cvt+0x66>
 800c744:	f019 0f01 	tst.w	r9, #1
 800c748:	d022      	beq.n	800c790 <__cvt+0xac>
 800c74a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c74e:	eb07 0906 	add.w	r9, r7, r6
 800c752:	d110      	bne.n	800c776 <__cvt+0x92>
 800c754:	783b      	ldrb	r3, [r7, #0]
 800c756:	2b30      	cmp	r3, #48	; 0x30
 800c758:	d10a      	bne.n	800c770 <__cvt+0x8c>
 800c75a:	2200      	movs	r2, #0
 800c75c:	2300      	movs	r3, #0
 800c75e:	4620      	mov	r0, r4
 800c760:	4629      	mov	r1, r5
 800c762:	f7f4 f9d1 	bl	8000b08 <__aeabi_dcmpeq>
 800c766:	b918      	cbnz	r0, 800c770 <__cvt+0x8c>
 800c768:	f1c6 0601 	rsb	r6, r6, #1
 800c76c:	f8ca 6000 	str.w	r6, [sl]
 800c770:	f8da 3000 	ldr.w	r3, [sl]
 800c774:	4499      	add	r9, r3
 800c776:	2200      	movs	r2, #0
 800c778:	2300      	movs	r3, #0
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f4 f9c3 	bl	8000b08 <__aeabi_dcmpeq>
 800c782:	b108      	cbz	r0, 800c788 <__cvt+0xa4>
 800c784:	f8cd 900c 	str.w	r9, [sp, #12]
 800c788:	2230      	movs	r2, #48	; 0x30
 800c78a:	9b03      	ldr	r3, [sp, #12]
 800c78c:	454b      	cmp	r3, r9
 800c78e:	d307      	bcc.n	800c7a0 <__cvt+0xbc>
 800c790:	9b03      	ldr	r3, [sp, #12]
 800c792:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c794:	1bdb      	subs	r3, r3, r7
 800c796:	4638      	mov	r0, r7
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	b004      	add	sp, #16
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	1c59      	adds	r1, r3, #1
 800c7a2:	9103      	str	r1, [sp, #12]
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e7f0      	b.n	800c78a <__cvt+0xa6>

0800c7a8 <__exponent>:
 800c7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	bfb8      	it	lt
 800c7b0:	4249      	neglt	r1, r1
 800c7b2:	f803 2b02 	strb.w	r2, [r3], #2
 800c7b6:	bfb4      	ite	lt
 800c7b8:	222d      	movlt	r2, #45	; 0x2d
 800c7ba:	222b      	movge	r2, #43	; 0x2b
 800c7bc:	2909      	cmp	r1, #9
 800c7be:	7042      	strb	r2, [r0, #1]
 800c7c0:	dd2a      	ble.n	800c818 <__exponent+0x70>
 800c7c2:	f10d 0207 	add.w	r2, sp, #7
 800c7c6:	4617      	mov	r7, r2
 800c7c8:	260a      	movs	r6, #10
 800c7ca:	4694      	mov	ip, r2
 800c7cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c7d0:	fb06 1415 	mls	r4, r6, r5, r1
 800c7d4:	3430      	adds	r4, #48	; 0x30
 800c7d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7da:	460c      	mov	r4, r1
 800c7dc:	2c63      	cmp	r4, #99	; 0x63
 800c7de:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	dcf1      	bgt.n	800c7ca <__exponent+0x22>
 800c7e6:	3130      	adds	r1, #48	; 0x30
 800c7e8:	f1ac 0402 	sub.w	r4, ip, #2
 800c7ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7f0:	1c41      	adds	r1, r0, #1
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	42ba      	cmp	r2, r7
 800c7f6:	d30a      	bcc.n	800c80e <__exponent+0x66>
 800c7f8:	f10d 0209 	add.w	r2, sp, #9
 800c7fc:	eba2 020c 	sub.w	r2, r2, ip
 800c800:	42bc      	cmp	r4, r7
 800c802:	bf88      	it	hi
 800c804:	2200      	movhi	r2, #0
 800c806:	4413      	add	r3, r2
 800c808:	1a18      	subs	r0, r3, r0
 800c80a:	b003      	add	sp, #12
 800c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c812:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c816:	e7ed      	b.n	800c7f4 <__exponent+0x4c>
 800c818:	2330      	movs	r3, #48	; 0x30
 800c81a:	3130      	adds	r1, #48	; 0x30
 800c81c:	7083      	strb	r3, [r0, #2]
 800c81e:	70c1      	strb	r1, [r0, #3]
 800c820:	1d03      	adds	r3, r0, #4
 800c822:	e7f1      	b.n	800c808 <__exponent+0x60>

0800c824 <_printf_float>:
 800c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	ed2d 8b02 	vpush	{d8}
 800c82c:	b08d      	sub	sp, #52	; 0x34
 800c82e:	460c      	mov	r4, r1
 800c830:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c834:	4616      	mov	r6, r2
 800c836:	461f      	mov	r7, r3
 800c838:	4605      	mov	r5, r0
 800c83a:	f000 fd95 	bl	800d368 <_localeconv_r>
 800c83e:	f8d0 a000 	ldr.w	sl, [r0]
 800c842:	4650      	mov	r0, sl
 800c844:	f7f3 fd34 	bl	80002b0 <strlen>
 800c848:	2300      	movs	r3, #0
 800c84a:	930a      	str	r3, [sp, #40]	; 0x28
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	9305      	str	r3, [sp, #20]
 800c850:	f8d8 3000 	ldr.w	r3, [r8]
 800c854:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c858:	3307      	adds	r3, #7
 800c85a:	f023 0307 	bic.w	r3, r3, #7
 800c85e:	f103 0208 	add.w	r2, r3, #8
 800c862:	f8c8 2000 	str.w	r2, [r8]
 800c866:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c86a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c86e:	9307      	str	r3, [sp, #28]
 800c870:	f8cd 8018 	str.w	r8, [sp, #24]
 800c874:	ee08 0a10 	vmov	s16, r0
 800c878:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c87c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c880:	4b9e      	ldr	r3, [pc, #632]	; (800cafc <_printf_float+0x2d8>)
 800c882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c886:	f7f4 f971 	bl	8000b6c <__aeabi_dcmpun>
 800c88a:	bb88      	cbnz	r0, 800c8f0 <_printf_float+0xcc>
 800c88c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c890:	4b9a      	ldr	r3, [pc, #616]	; (800cafc <_printf_float+0x2d8>)
 800c892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c896:	f7f4 f94b 	bl	8000b30 <__aeabi_dcmple>
 800c89a:	bb48      	cbnz	r0, 800c8f0 <_printf_float+0xcc>
 800c89c:	2200      	movs	r2, #0
 800c89e:	2300      	movs	r3, #0
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	f7f4 f93a 	bl	8000b1c <__aeabi_dcmplt>
 800c8a8:	b110      	cbz	r0, 800c8b0 <_printf_float+0x8c>
 800c8aa:	232d      	movs	r3, #45	; 0x2d
 800c8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8b0:	4a93      	ldr	r2, [pc, #588]	; (800cb00 <_printf_float+0x2dc>)
 800c8b2:	4b94      	ldr	r3, [pc, #592]	; (800cb04 <_printf_float+0x2e0>)
 800c8b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8b8:	bf94      	ite	ls
 800c8ba:	4690      	movls	r8, r2
 800c8bc:	4698      	movhi	r8, r3
 800c8be:	2303      	movs	r3, #3
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	9b05      	ldr	r3, [sp, #20]
 800c8c4:	f023 0304 	bic.w	r3, r3, #4
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	f04f 0900 	mov.w	r9, #0
 800c8ce:	9700      	str	r7, [sp, #0]
 800c8d0:	4633      	mov	r3, r6
 800c8d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f000 f9da 	bl	800cc90 <_printf_common>
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f040 8090 	bne.w	800ca02 <_printf_float+0x1de>
 800c8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8e6:	b00d      	add	sp, #52	; 0x34
 800c8e8:	ecbd 8b02 	vpop	{d8}
 800c8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f0:	4642      	mov	r2, r8
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f4 f938 	bl	8000b6c <__aeabi_dcmpun>
 800c8fc:	b140      	cbz	r0, 800c910 <_printf_float+0xec>
 800c8fe:	464b      	mov	r3, r9
 800c900:	2b00      	cmp	r3, #0
 800c902:	bfbc      	itt	lt
 800c904:	232d      	movlt	r3, #45	; 0x2d
 800c906:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c90a:	4a7f      	ldr	r2, [pc, #508]	; (800cb08 <_printf_float+0x2e4>)
 800c90c:	4b7f      	ldr	r3, [pc, #508]	; (800cb0c <_printf_float+0x2e8>)
 800c90e:	e7d1      	b.n	800c8b4 <_printf_float+0x90>
 800c910:	6863      	ldr	r3, [r4, #4]
 800c912:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c916:	9206      	str	r2, [sp, #24]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	d13f      	bne.n	800c99c <_printf_float+0x178>
 800c91c:	2306      	movs	r3, #6
 800c91e:	6063      	str	r3, [r4, #4]
 800c920:	9b05      	ldr	r3, [sp, #20]
 800c922:	6861      	ldr	r1, [r4, #4]
 800c924:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c928:	2300      	movs	r3, #0
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	ab0a      	add	r3, sp, #40	; 0x28
 800c92e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c932:	ab09      	add	r3, sp, #36	; 0x24
 800c934:	ec49 8b10 	vmov	d0, r8, r9
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	6022      	str	r2, [r4, #0]
 800c93c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c940:	4628      	mov	r0, r5
 800c942:	f7ff fecf 	bl	800c6e4 <__cvt>
 800c946:	9b06      	ldr	r3, [sp, #24]
 800c948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c94a:	2b47      	cmp	r3, #71	; 0x47
 800c94c:	4680      	mov	r8, r0
 800c94e:	d108      	bne.n	800c962 <_printf_float+0x13e>
 800c950:	1cc8      	adds	r0, r1, #3
 800c952:	db02      	blt.n	800c95a <_printf_float+0x136>
 800c954:	6863      	ldr	r3, [r4, #4]
 800c956:	4299      	cmp	r1, r3
 800c958:	dd41      	ble.n	800c9de <_printf_float+0x1ba>
 800c95a:	f1ab 0302 	sub.w	r3, fp, #2
 800c95e:	fa5f fb83 	uxtb.w	fp, r3
 800c962:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c966:	d820      	bhi.n	800c9aa <_printf_float+0x186>
 800c968:	3901      	subs	r1, #1
 800c96a:	465a      	mov	r2, fp
 800c96c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c970:	9109      	str	r1, [sp, #36]	; 0x24
 800c972:	f7ff ff19 	bl	800c7a8 <__exponent>
 800c976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c978:	1813      	adds	r3, r2, r0
 800c97a:	2a01      	cmp	r2, #1
 800c97c:	4681      	mov	r9, r0
 800c97e:	6123      	str	r3, [r4, #16]
 800c980:	dc02      	bgt.n	800c988 <_printf_float+0x164>
 800c982:	6822      	ldr	r2, [r4, #0]
 800c984:	07d2      	lsls	r2, r2, #31
 800c986:	d501      	bpl.n	800c98c <_printf_float+0x168>
 800c988:	3301      	adds	r3, #1
 800c98a:	6123      	str	r3, [r4, #16]
 800c98c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c990:	2b00      	cmp	r3, #0
 800c992:	d09c      	beq.n	800c8ce <_printf_float+0xaa>
 800c994:	232d      	movs	r3, #45	; 0x2d
 800c996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c99a:	e798      	b.n	800c8ce <_printf_float+0xaa>
 800c99c:	9a06      	ldr	r2, [sp, #24]
 800c99e:	2a47      	cmp	r2, #71	; 0x47
 800c9a0:	d1be      	bne.n	800c920 <_printf_float+0xfc>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1bc      	bne.n	800c920 <_printf_float+0xfc>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e7b9      	b.n	800c91e <_printf_float+0xfa>
 800c9aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c9ae:	d118      	bne.n	800c9e2 <_printf_float+0x1be>
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	dd0b      	ble.n	800c9ce <_printf_float+0x1aa>
 800c9b6:	6121      	str	r1, [r4, #16]
 800c9b8:	b913      	cbnz	r3, 800c9c0 <_printf_float+0x19c>
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	07d0      	lsls	r0, r2, #31
 800c9be:	d502      	bpl.n	800c9c6 <_printf_float+0x1a2>
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	440b      	add	r3, r1
 800c9c4:	6123      	str	r3, [r4, #16]
 800c9c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9c8:	f04f 0900 	mov.w	r9, #0
 800c9cc:	e7de      	b.n	800c98c <_printf_float+0x168>
 800c9ce:	b913      	cbnz	r3, 800c9d6 <_printf_float+0x1b2>
 800c9d0:	6822      	ldr	r2, [r4, #0]
 800c9d2:	07d2      	lsls	r2, r2, #31
 800c9d4:	d501      	bpl.n	800c9da <_printf_float+0x1b6>
 800c9d6:	3302      	adds	r3, #2
 800c9d8:	e7f4      	b.n	800c9c4 <_printf_float+0x1a0>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e7f2      	b.n	800c9c4 <_printf_float+0x1a0>
 800c9de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e4:	4299      	cmp	r1, r3
 800c9e6:	db05      	blt.n	800c9f4 <_printf_float+0x1d0>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	6121      	str	r1, [r4, #16]
 800c9ec:	07d8      	lsls	r0, r3, #31
 800c9ee:	d5ea      	bpl.n	800c9c6 <_printf_float+0x1a2>
 800c9f0:	1c4b      	adds	r3, r1, #1
 800c9f2:	e7e7      	b.n	800c9c4 <_printf_float+0x1a0>
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	bfd4      	ite	le
 800c9f8:	f1c1 0202 	rsble	r2, r1, #2
 800c9fc:	2201      	movgt	r2, #1
 800c9fe:	4413      	add	r3, r2
 800ca00:	e7e0      	b.n	800c9c4 <_printf_float+0x1a0>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	055a      	lsls	r2, r3, #21
 800ca06:	d407      	bmi.n	800ca18 <_printf_float+0x1f4>
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	4642      	mov	r2, r8
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4628      	mov	r0, r5
 800ca10:	47b8      	blx	r7
 800ca12:	3001      	adds	r0, #1
 800ca14:	d12c      	bne.n	800ca70 <_printf_float+0x24c>
 800ca16:	e764      	b.n	800c8e2 <_printf_float+0xbe>
 800ca18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca1c:	f240 80e0 	bls.w	800cbe0 <_printf_float+0x3bc>
 800ca20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca24:	2200      	movs	r2, #0
 800ca26:	2300      	movs	r3, #0
 800ca28:	f7f4 f86e 	bl	8000b08 <__aeabi_dcmpeq>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d034      	beq.n	800ca9a <_printf_float+0x276>
 800ca30:	4a37      	ldr	r2, [pc, #220]	; (800cb10 <_printf_float+0x2ec>)
 800ca32:	2301      	movs	r3, #1
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	f43f af51 	beq.w	800c8e2 <_printf_float+0xbe>
 800ca40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca44:	429a      	cmp	r2, r3
 800ca46:	db02      	blt.n	800ca4e <_printf_float+0x22a>
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	07d8      	lsls	r0, r3, #31
 800ca4c:	d510      	bpl.n	800ca70 <_printf_float+0x24c>
 800ca4e:	ee18 3a10 	vmov	r3, s16
 800ca52:	4652      	mov	r2, sl
 800ca54:	4631      	mov	r1, r6
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b8      	blx	r7
 800ca5a:	3001      	adds	r0, #1
 800ca5c:	f43f af41 	beq.w	800c8e2 <_printf_float+0xbe>
 800ca60:	f04f 0800 	mov.w	r8, #0
 800ca64:	f104 091a 	add.w	r9, r4, #26
 800ca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	4543      	cmp	r3, r8
 800ca6e:	dc09      	bgt.n	800ca84 <_printf_float+0x260>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	079b      	lsls	r3, r3, #30
 800ca74:	f100 8107 	bmi.w	800cc86 <_printf_float+0x462>
 800ca78:	68e0      	ldr	r0, [r4, #12]
 800ca7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca7c:	4298      	cmp	r0, r3
 800ca7e:	bfb8      	it	lt
 800ca80:	4618      	movlt	r0, r3
 800ca82:	e730      	b.n	800c8e6 <_printf_float+0xc2>
 800ca84:	2301      	movs	r3, #1
 800ca86:	464a      	mov	r2, r9
 800ca88:	4631      	mov	r1, r6
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	47b8      	blx	r7
 800ca8e:	3001      	adds	r0, #1
 800ca90:	f43f af27 	beq.w	800c8e2 <_printf_float+0xbe>
 800ca94:	f108 0801 	add.w	r8, r8, #1
 800ca98:	e7e6      	b.n	800ca68 <_printf_float+0x244>
 800ca9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dc39      	bgt.n	800cb14 <_printf_float+0x2f0>
 800caa0:	4a1b      	ldr	r2, [pc, #108]	; (800cb10 <_printf_float+0x2ec>)
 800caa2:	2301      	movs	r3, #1
 800caa4:	4631      	mov	r1, r6
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b8      	blx	r7
 800caaa:	3001      	adds	r0, #1
 800caac:	f43f af19 	beq.w	800c8e2 <_printf_float+0xbe>
 800cab0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cab4:	4313      	orrs	r3, r2
 800cab6:	d102      	bne.n	800cabe <_printf_float+0x29a>
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	07d9      	lsls	r1, r3, #31
 800cabc:	d5d8      	bpl.n	800ca70 <_printf_float+0x24c>
 800cabe:	ee18 3a10 	vmov	r3, s16
 800cac2:	4652      	mov	r2, sl
 800cac4:	4631      	mov	r1, r6
 800cac6:	4628      	mov	r0, r5
 800cac8:	47b8      	blx	r7
 800caca:	3001      	adds	r0, #1
 800cacc:	f43f af09 	beq.w	800c8e2 <_printf_float+0xbe>
 800cad0:	f04f 0900 	mov.w	r9, #0
 800cad4:	f104 0a1a 	add.w	sl, r4, #26
 800cad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cada:	425b      	negs	r3, r3
 800cadc:	454b      	cmp	r3, r9
 800cade:	dc01      	bgt.n	800cae4 <_printf_float+0x2c0>
 800cae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cae2:	e792      	b.n	800ca0a <_printf_float+0x1e6>
 800cae4:	2301      	movs	r3, #1
 800cae6:	4652      	mov	r2, sl
 800cae8:	4631      	mov	r1, r6
 800caea:	4628      	mov	r0, r5
 800caec:	47b8      	blx	r7
 800caee:	3001      	adds	r0, #1
 800caf0:	f43f aef7 	beq.w	800c8e2 <_printf_float+0xbe>
 800caf4:	f109 0901 	add.w	r9, r9, #1
 800caf8:	e7ee      	b.n	800cad8 <_printf_float+0x2b4>
 800cafa:	bf00      	nop
 800cafc:	7fefffff 	.word	0x7fefffff
 800cb00:	08014eb4 	.word	0x08014eb4
 800cb04:	08014eb8 	.word	0x08014eb8
 800cb08:	08014ebc 	.word	0x08014ebc
 800cb0c:	08014ec0 	.word	0x08014ec0
 800cb10:	08014fd6 	.word	0x08014fd6
 800cb14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	bfa8      	it	ge
 800cb1c:	461a      	movge	r2, r3
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	4691      	mov	r9, r2
 800cb22:	dc37      	bgt.n	800cb94 <_printf_float+0x370>
 800cb24:	f04f 0b00 	mov.w	fp, #0
 800cb28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb2c:	f104 021a 	add.w	r2, r4, #26
 800cb30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb32:	9305      	str	r3, [sp, #20]
 800cb34:	eba3 0309 	sub.w	r3, r3, r9
 800cb38:	455b      	cmp	r3, fp
 800cb3a:	dc33      	bgt.n	800cba4 <_printf_float+0x380>
 800cb3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb40:	429a      	cmp	r2, r3
 800cb42:	db3b      	blt.n	800cbbc <_printf_float+0x398>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	07da      	lsls	r2, r3, #31
 800cb48:	d438      	bmi.n	800cbbc <_printf_float+0x398>
 800cb4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cb4e:	eba2 0903 	sub.w	r9, r2, r3
 800cb52:	9b05      	ldr	r3, [sp, #20]
 800cb54:	1ad2      	subs	r2, r2, r3
 800cb56:	4591      	cmp	r9, r2
 800cb58:	bfa8      	it	ge
 800cb5a:	4691      	movge	r9, r2
 800cb5c:	f1b9 0f00 	cmp.w	r9, #0
 800cb60:	dc35      	bgt.n	800cbce <_printf_float+0x3aa>
 800cb62:	f04f 0800 	mov.w	r8, #0
 800cb66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb6a:	f104 0a1a 	add.w	sl, r4, #26
 800cb6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	eba3 0309 	sub.w	r3, r3, r9
 800cb78:	4543      	cmp	r3, r8
 800cb7a:	f77f af79 	ble.w	800ca70 <_printf_float+0x24c>
 800cb7e:	2301      	movs	r3, #1
 800cb80:	4652      	mov	r2, sl
 800cb82:	4631      	mov	r1, r6
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b8      	blx	r7
 800cb88:	3001      	adds	r0, #1
 800cb8a:	f43f aeaa 	beq.w	800c8e2 <_printf_float+0xbe>
 800cb8e:	f108 0801 	add.w	r8, r8, #1
 800cb92:	e7ec      	b.n	800cb6e <_printf_float+0x34a>
 800cb94:	4613      	mov	r3, r2
 800cb96:	4631      	mov	r1, r6
 800cb98:	4642      	mov	r2, r8
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	47b8      	blx	r7
 800cb9e:	3001      	adds	r0, #1
 800cba0:	d1c0      	bne.n	800cb24 <_printf_float+0x300>
 800cba2:	e69e      	b.n	800c8e2 <_printf_float+0xbe>
 800cba4:	2301      	movs	r3, #1
 800cba6:	4631      	mov	r1, r6
 800cba8:	4628      	mov	r0, r5
 800cbaa:	9205      	str	r2, [sp, #20]
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f ae97 	beq.w	800c8e2 <_printf_float+0xbe>
 800cbb4:	9a05      	ldr	r2, [sp, #20]
 800cbb6:	f10b 0b01 	add.w	fp, fp, #1
 800cbba:	e7b9      	b.n	800cb30 <_printf_float+0x30c>
 800cbbc:	ee18 3a10 	vmov	r3, s16
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	4631      	mov	r1, r6
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	47b8      	blx	r7
 800cbc8:	3001      	adds	r0, #1
 800cbca:	d1be      	bne.n	800cb4a <_printf_float+0x326>
 800cbcc:	e689      	b.n	800c8e2 <_printf_float+0xbe>
 800cbce:	9a05      	ldr	r2, [sp, #20]
 800cbd0:	464b      	mov	r3, r9
 800cbd2:	4442      	add	r2, r8
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47b8      	blx	r7
 800cbda:	3001      	adds	r0, #1
 800cbdc:	d1c1      	bne.n	800cb62 <_printf_float+0x33e>
 800cbde:	e680      	b.n	800c8e2 <_printf_float+0xbe>
 800cbe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbe2:	2a01      	cmp	r2, #1
 800cbe4:	dc01      	bgt.n	800cbea <_printf_float+0x3c6>
 800cbe6:	07db      	lsls	r3, r3, #31
 800cbe8:	d53a      	bpl.n	800cc60 <_printf_float+0x43c>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4642      	mov	r2, r8
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b8      	blx	r7
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	f43f ae74 	beq.w	800c8e2 <_printf_float+0xbe>
 800cbfa:	ee18 3a10 	vmov	r3, s16
 800cbfe:	4652      	mov	r2, sl
 800cc00:	4631      	mov	r1, r6
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	f43f ae6b 	beq.w	800c8e2 <_printf_float+0xbe>
 800cc0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc10:	2200      	movs	r2, #0
 800cc12:	2300      	movs	r3, #0
 800cc14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cc18:	f7f3 ff76 	bl	8000b08 <__aeabi_dcmpeq>
 800cc1c:	b9d8      	cbnz	r0, 800cc56 <_printf_float+0x432>
 800cc1e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cc22:	f108 0201 	add.w	r2, r8, #1
 800cc26:	4631      	mov	r1, r6
 800cc28:	4628      	mov	r0, r5
 800cc2a:	47b8      	blx	r7
 800cc2c:	3001      	adds	r0, #1
 800cc2e:	d10e      	bne.n	800cc4e <_printf_float+0x42a>
 800cc30:	e657      	b.n	800c8e2 <_printf_float+0xbe>
 800cc32:	2301      	movs	r3, #1
 800cc34:	4652      	mov	r2, sl
 800cc36:	4631      	mov	r1, r6
 800cc38:	4628      	mov	r0, r5
 800cc3a:	47b8      	blx	r7
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	f43f ae50 	beq.w	800c8e2 <_printf_float+0xbe>
 800cc42:	f108 0801 	add.w	r8, r8, #1
 800cc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	4543      	cmp	r3, r8
 800cc4c:	dcf1      	bgt.n	800cc32 <_printf_float+0x40e>
 800cc4e:	464b      	mov	r3, r9
 800cc50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc54:	e6da      	b.n	800ca0c <_printf_float+0x1e8>
 800cc56:	f04f 0800 	mov.w	r8, #0
 800cc5a:	f104 0a1a 	add.w	sl, r4, #26
 800cc5e:	e7f2      	b.n	800cc46 <_printf_float+0x422>
 800cc60:	2301      	movs	r3, #1
 800cc62:	4642      	mov	r2, r8
 800cc64:	e7df      	b.n	800cc26 <_printf_float+0x402>
 800cc66:	2301      	movs	r3, #1
 800cc68:	464a      	mov	r2, r9
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b8      	blx	r7
 800cc70:	3001      	adds	r0, #1
 800cc72:	f43f ae36 	beq.w	800c8e2 <_printf_float+0xbe>
 800cc76:	f108 0801 	add.w	r8, r8, #1
 800cc7a:	68e3      	ldr	r3, [r4, #12]
 800cc7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc7e:	1a5b      	subs	r3, r3, r1
 800cc80:	4543      	cmp	r3, r8
 800cc82:	dcf0      	bgt.n	800cc66 <_printf_float+0x442>
 800cc84:	e6f8      	b.n	800ca78 <_printf_float+0x254>
 800cc86:	f04f 0800 	mov.w	r8, #0
 800cc8a:	f104 0919 	add.w	r9, r4, #25
 800cc8e:	e7f4      	b.n	800cc7a <_printf_float+0x456>

0800cc90 <_printf_common>:
 800cc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc94:	4616      	mov	r6, r2
 800cc96:	4699      	mov	r9, r3
 800cc98:	688a      	ldr	r2, [r1, #8]
 800cc9a:	690b      	ldr	r3, [r1, #16]
 800cc9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cca0:	4293      	cmp	r3, r2
 800cca2:	bfb8      	it	lt
 800cca4:	4613      	movlt	r3, r2
 800cca6:	6033      	str	r3, [r6, #0]
 800cca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ccac:	4607      	mov	r7, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	b10a      	cbz	r2, 800ccb6 <_printf_common+0x26>
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	6033      	str	r3, [r6, #0]
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	0699      	lsls	r1, r3, #26
 800ccba:	bf42      	ittt	mi
 800ccbc:	6833      	ldrmi	r3, [r6, #0]
 800ccbe:	3302      	addmi	r3, #2
 800ccc0:	6033      	strmi	r3, [r6, #0]
 800ccc2:	6825      	ldr	r5, [r4, #0]
 800ccc4:	f015 0506 	ands.w	r5, r5, #6
 800ccc8:	d106      	bne.n	800ccd8 <_printf_common+0x48>
 800ccca:	f104 0a19 	add.w	sl, r4, #25
 800ccce:	68e3      	ldr	r3, [r4, #12]
 800ccd0:	6832      	ldr	r2, [r6, #0]
 800ccd2:	1a9b      	subs	r3, r3, r2
 800ccd4:	42ab      	cmp	r3, r5
 800ccd6:	dc26      	bgt.n	800cd26 <_printf_common+0x96>
 800ccd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccdc:	1e13      	subs	r3, r2, #0
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	bf18      	it	ne
 800cce2:	2301      	movne	r3, #1
 800cce4:	0692      	lsls	r2, r2, #26
 800cce6:	d42b      	bmi.n	800cd40 <_printf_common+0xb0>
 800cce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccec:	4649      	mov	r1, r9
 800ccee:	4638      	mov	r0, r7
 800ccf0:	47c0      	blx	r8
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d01e      	beq.n	800cd34 <_printf_common+0xa4>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	6922      	ldr	r2, [r4, #16]
 800ccfa:	f003 0306 	and.w	r3, r3, #6
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	bf02      	ittt	eq
 800cd02:	68e5      	ldreq	r5, [r4, #12]
 800cd04:	6833      	ldreq	r3, [r6, #0]
 800cd06:	1aed      	subeq	r5, r5, r3
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	bf0c      	ite	eq
 800cd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd10:	2500      	movne	r5, #0
 800cd12:	4293      	cmp	r3, r2
 800cd14:	bfc4      	itt	gt
 800cd16:	1a9b      	subgt	r3, r3, r2
 800cd18:	18ed      	addgt	r5, r5, r3
 800cd1a:	2600      	movs	r6, #0
 800cd1c:	341a      	adds	r4, #26
 800cd1e:	42b5      	cmp	r5, r6
 800cd20:	d11a      	bne.n	800cd58 <_printf_common+0xc8>
 800cd22:	2000      	movs	r0, #0
 800cd24:	e008      	b.n	800cd38 <_printf_common+0xa8>
 800cd26:	2301      	movs	r3, #1
 800cd28:	4652      	mov	r2, sl
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	4638      	mov	r0, r7
 800cd2e:	47c0      	blx	r8
 800cd30:	3001      	adds	r0, #1
 800cd32:	d103      	bne.n	800cd3c <_printf_common+0xac>
 800cd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3c:	3501      	adds	r5, #1
 800cd3e:	e7c6      	b.n	800ccce <_printf_common+0x3e>
 800cd40:	18e1      	adds	r1, r4, r3
 800cd42:	1c5a      	adds	r2, r3, #1
 800cd44:	2030      	movs	r0, #48	; 0x30
 800cd46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd4a:	4422      	add	r2, r4
 800cd4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd54:	3302      	adds	r3, #2
 800cd56:	e7c7      	b.n	800cce8 <_printf_common+0x58>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	4638      	mov	r0, r7
 800cd60:	47c0      	blx	r8
 800cd62:	3001      	adds	r0, #1
 800cd64:	d0e6      	beq.n	800cd34 <_printf_common+0xa4>
 800cd66:	3601      	adds	r6, #1
 800cd68:	e7d9      	b.n	800cd1e <_printf_common+0x8e>
	...

0800cd6c <_printf_i>:
 800cd6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd70:	7e0f      	ldrb	r7, [r1, #24]
 800cd72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd74:	2f78      	cmp	r7, #120	; 0x78
 800cd76:	4691      	mov	r9, r2
 800cd78:	4680      	mov	r8, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	469a      	mov	sl, r3
 800cd7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd82:	d807      	bhi.n	800cd94 <_printf_i+0x28>
 800cd84:	2f62      	cmp	r7, #98	; 0x62
 800cd86:	d80a      	bhi.n	800cd9e <_printf_i+0x32>
 800cd88:	2f00      	cmp	r7, #0
 800cd8a:	f000 80d4 	beq.w	800cf36 <_printf_i+0x1ca>
 800cd8e:	2f58      	cmp	r7, #88	; 0x58
 800cd90:	f000 80c0 	beq.w	800cf14 <_printf_i+0x1a8>
 800cd94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd9c:	e03a      	b.n	800ce14 <_printf_i+0xa8>
 800cd9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cda2:	2b15      	cmp	r3, #21
 800cda4:	d8f6      	bhi.n	800cd94 <_printf_i+0x28>
 800cda6:	a101      	add	r1, pc, #4	; (adr r1, 800cdac <_printf_i+0x40>)
 800cda8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdac:	0800ce05 	.word	0x0800ce05
 800cdb0:	0800ce19 	.word	0x0800ce19
 800cdb4:	0800cd95 	.word	0x0800cd95
 800cdb8:	0800cd95 	.word	0x0800cd95
 800cdbc:	0800cd95 	.word	0x0800cd95
 800cdc0:	0800cd95 	.word	0x0800cd95
 800cdc4:	0800ce19 	.word	0x0800ce19
 800cdc8:	0800cd95 	.word	0x0800cd95
 800cdcc:	0800cd95 	.word	0x0800cd95
 800cdd0:	0800cd95 	.word	0x0800cd95
 800cdd4:	0800cd95 	.word	0x0800cd95
 800cdd8:	0800cf1d 	.word	0x0800cf1d
 800cddc:	0800ce45 	.word	0x0800ce45
 800cde0:	0800ced7 	.word	0x0800ced7
 800cde4:	0800cd95 	.word	0x0800cd95
 800cde8:	0800cd95 	.word	0x0800cd95
 800cdec:	0800cf3f 	.word	0x0800cf3f
 800cdf0:	0800cd95 	.word	0x0800cd95
 800cdf4:	0800ce45 	.word	0x0800ce45
 800cdf8:	0800cd95 	.word	0x0800cd95
 800cdfc:	0800cd95 	.word	0x0800cd95
 800ce00:	0800cedf 	.word	0x0800cedf
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	1d1a      	adds	r2, r3, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	602a      	str	r2, [r5, #0]
 800ce0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce14:	2301      	movs	r3, #1
 800ce16:	e09f      	b.n	800cf58 <_printf_i+0x1ec>
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	682b      	ldr	r3, [r5, #0]
 800ce1c:	0607      	lsls	r7, r0, #24
 800ce1e:	f103 0104 	add.w	r1, r3, #4
 800ce22:	6029      	str	r1, [r5, #0]
 800ce24:	d501      	bpl.n	800ce2a <_printf_i+0xbe>
 800ce26:	681e      	ldr	r6, [r3, #0]
 800ce28:	e003      	b.n	800ce32 <_printf_i+0xc6>
 800ce2a:	0646      	lsls	r6, r0, #25
 800ce2c:	d5fb      	bpl.n	800ce26 <_printf_i+0xba>
 800ce2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ce32:	2e00      	cmp	r6, #0
 800ce34:	da03      	bge.n	800ce3e <_printf_i+0xd2>
 800ce36:	232d      	movs	r3, #45	; 0x2d
 800ce38:	4276      	negs	r6, r6
 800ce3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3e:	485a      	ldr	r0, [pc, #360]	; (800cfa8 <_printf_i+0x23c>)
 800ce40:	230a      	movs	r3, #10
 800ce42:	e012      	b.n	800ce6a <_printf_i+0xfe>
 800ce44:	682b      	ldr	r3, [r5, #0]
 800ce46:	6820      	ldr	r0, [r4, #0]
 800ce48:	1d19      	adds	r1, r3, #4
 800ce4a:	6029      	str	r1, [r5, #0]
 800ce4c:	0605      	lsls	r5, r0, #24
 800ce4e:	d501      	bpl.n	800ce54 <_printf_i+0xe8>
 800ce50:	681e      	ldr	r6, [r3, #0]
 800ce52:	e002      	b.n	800ce5a <_printf_i+0xee>
 800ce54:	0641      	lsls	r1, r0, #25
 800ce56:	d5fb      	bpl.n	800ce50 <_printf_i+0xe4>
 800ce58:	881e      	ldrh	r6, [r3, #0]
 800ce5a:	4853      	ldr	r0, [pc, #332]	; (800cfa8 <_printf_i+0x23c>)
 800ce5c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce5e:	bf0c      	ite	eq
 800ce60:	2308      	moveq	r3, #8
 800ce62:	230a      	movne	r3, #10
 800ce64:	2100      	movs	r1, #0
 800ce66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce6a:	6865      	ldr	r5, [r4, #4]
 800ce6c:	60a5      	str	r5, [r4, #8]
 800ce6e:	2d00      	cmp	r5, #0
 800ce70:	bfa2      	ittt	ge
 800ce72:	6821      	ldrge	r1, [r4, #0]
 800ce74:	f021 0104 	bicge.w	r1, r1, #4
 800ce78:	6021      	strge	r1, [r4, #0]
 800ce7a:	b90e      	cbnz	r6, 800ce80 <_printf_i+0x114>
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	d04b      	beq.n	800cf18 <_printf_i+0x1ac>
 800ce80:	4615      	mov	r5, r2
 800ce82:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce86:	fb03 6711 	mls	r7, r3, r1, r6
 800ce8a:	5dc7      	ldrb	r7, [r0, r7]
 800ce8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce90:	4637      	mov	r7, r6
 800ce92:	42bb      	cmp	r3, r7
 800ce94:	460e      	mov	r6, r1
 800ce96:	d9f4      	bls.n	800ce82 <_printf_i+0x116>
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d10b      	bne.n	800ceb4 <_printf_i+0x148>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	07de      	lsls	r6, r3, #31
 800cea0:	d508      	bpl.n	800ceb4 <_printf_i+0x148>
 800cea2:	6923      	ldr	r3, [r4, #16]
 800cea4:	6861      	ldr	r1, [r4, #4]
 800cea6:	4299      	cmp	r1, r3
 800cea8:	bfde      	ittt	le
 800ceaa:	2330      	movle	r3, #48	; 0x30
 800ceac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ceb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ceb4:	1b52      	subs	r2, r2, r5
 800ceb6:	6122      	str	r2, [r4, #16]
 800ceb8:	f8cd a000 	str.w	sl, [sp]
 800cebc:	464b      	mov	r3, r9
 800cebe:	aa03      	add	r2, sp, #12
 800cec0:	4621      	mov	r1, r4
 800cec2:	4640      	mov	r0, r8
 800cec4:	f7ff fee4 	bl	800cc90 <_printf_common>
 800cec8:	3001      	adds	r0, #1
 800ceca:	d14a      	bne.n	800cf62 <_printf_i+0x1f6>
 800cecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ced0:	b004      	add	sp, #16
 800ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	f043 0320 	orr.w	r3, r3, #32
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	4833      	ldr	r0, [pc, #204]	; (800cfac <_printf_i+0x240>)
 800cee0:	2778      	movs	r7, #120	; 0x78
 800cee2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	6829      	ldr	r1, [r5, #0]
 800ceea:	061f      	lsls	r7, r3, #24
 800ceec:	f851 6b04 	ldr.w	r6, [r1], #4
 800cef0:	d402      	bmi.n	800cef8 <_printf_i+0x18c>
 800cef2:	065f      	lsls	r7, r3, #25
 800cef4:	bf48      	it	mi
 800cef6:	b2b6      	uxthmi	r6, r6
 800cef8:	07df      	lsls	r7, r3, #31
 800cefa:	bf48      	it	mi
 800cefc:	f043 0320 	orrmi.w	r3, r3, #32
 800cf00:	6029      	str	r1, [r5, #0]
 800cf02:	bf48      	it	mi
 800cf04:	6023      	strmi	r3, [r4, #0]
 800cf06:	b91e      	cbnz	r6, 800cf10 <_printf_i+0x1a4>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	f023 0320 	bic.w	r3, r3, #32
 800cf0e:	6023      	str	r3, [r4, #0]
 800cf10:	2310      	movs	r3, #16
 800cf12:	e7a7      	b.n	800ce64 <_printf_i+0xf8>
 800cf14:	4824      	ldr	r0, [pc, #144]	; (800cfa8 <_printf_i+0x23c>)
 800cf16:	e7e4      	b.n	800cee2 <_printf_i+0x176>
 800cf18:	4615      	mov	r5, r2
 800cf1a:	e7bd      	b.n	800ce98 <_printf_i+0x12c>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	6826      	ldr	r6, [r4, #0]
 800cf20:	6961      	ldr	r1, [r4, #20]
 800cf22:	1d18      	adds	r0, r3, #4
 800cf24:	6028      	str	r0, [r5, #0]
 800cf26:	0635      	lsls	r5, r6, #24
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	d501      	bpl.n	800cf30 <_printf_i+0x1c4>
 800cf2c:	6019      	str	r1, [r3, #0]
 800cf2e:	e002      	b.n	800cf36 <_printf_i+0x1ca>
 800cf30:	0670      	lsls	r0, r6, #25
 800cf32:	d5fb      	bpl.n	800cf2c <_printf_i+0x1c0>
 800cf34:	8019      	strh	r1, [r3, #0]
 800cf36:	2300      	movs	r3, #0
 800cf38:	6123      	str	r3, [r4, #16]
 800cf3a:	4615      	mov	r5, r2
 800cf3c:	e7bc      	b.n	800ceb8 <_printf_i+0x14c>
 800cf3e:	682b      	ldr	r3, [r5, #0]
 800cf40:	1d1a      	adds	r2, r3, #4
 800cf42:	602a      	str	r2, [r5, #0]
 800cf44:	681d      	ldr	r5, [r3, #0]
 800cf46:	6862      	ldr	r2, [r4, #4]
 800cf48:	2100      	movs	r1, #0
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f7f3 f960 	bl	8000210 <memchr>
 800cf50:	b108      	cbz	r0, 800cf56 <_printf_i+0x1ea>
 800cf52:	1b40      	subs	r0, r0, r5
 800cf54:	6060      	str	r0, [r4, #4]
 800cf56:	6863      	ldr	r3, [r4, #4]
 800cf58:	6123      	str	r3, [r4, #16]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf60:	e7aa      	b.n	800ceb8 <_printf_i+0x14c>
 800cf62:	6923      	ldr	r3, [r4, #16]
 800cf64:	462a      	mov	r2, r5
 800cf66:	4649      	mov	r1, r9
 800cf68:	4640      	mov	r0, r8
 800cf6a:	47d0      	blx	sl
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	d0ad      	beq.n	800cecc <_printf_i+0x160>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	079b      	lsls	r3, r3, #30
 800cf74:	d413      	bmi.n	800cf9e <_printf_i+0x232>
 800cf76:	68e0      	ldr	r0, [r4, #12]
 800cf78:	9b03      	ldr	r3, [sp, #12]
 800cf7a:	4298      	cmp	r0, r3
 800cf7c:	bfb8      	it	lt
 800cf7e:	4618      	movlt	r0, r3
 800cf80:	e7a6      	b.n	800ced0 <_printf_i+0x164>
 800cf82:	2301      	movs	r3, #1
 800cf84:	4632      	mov	r2, r6
 800cf86:	4649      	mov	r1, r9
 800cf88:	4640      	mov	r0, r8
 800cf8a:	47d0      	blx	sl
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	d09d      	beq.n	800cecc <_printf_i+0x160>
 800cf90:	3501      	adds	r5, #1
 800cf92:	68e3      	ldr	r3, [r4, #12]
 800cf94:	9903      	ldr	r1, [sp, #12]
 800cf96:	1a5b      	subs	r3, r3, r1
 800cf98:	42ab      	cmp	r3, r5
 800cf9a:	dcf2      	bgt.n	800cf82 <_printf_i+0x216>
 800cf9c:	e7eb      	b.n	800cf76 <_printf_i+0x20a>
 800cf9e:	2500      	movs	r5, #0
 800cfa0:	f104 0619 	add.w	r6, r4, #25
 800cfa4:	e7f5      	b.n	800cf92 <_printf_i+0x226>
 800cfa6:	bf00      	nop
 800cfa8:	08014ec4 	.word	0x08014ec4
 800cfac:	08014ed5 	.word	0x08014ed5

0800cfb0 <sniprintf>:
 800cfb0:	b40c      	push	{r2, r3}
 800cfb2:	b530      	push	{r4, r5, lr}
 800cfb4:	4b17      	ldr	r3, [pc, #92]	; (800d014 <sniprintf+0x64>)
 800cfb6:	1e0c      	subs	r4, r1, #0
 800cfb8:	681d      	ldr	r5, [r3, #0]
 800cfba:	b09d      	sub	sp, #116	; 0x74
 800cfbc:	da08      	bge.n	800cfd0 <sniprintf+0x20>
 800cfbe:	238b      	movs	r3, #139	; 0x8b
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc6:	b01d      	add	sp, #116	; 0x74
 800cfc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfcc:	b002      	add	sp, #8
 800cfce:	4770      	bx	lr
 800cfd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cfd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfd8:	bf14      	ite	ne
 800cfda:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cfde:	4623      	moveq	r3, r4
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	9307      	str	r3, [sp, #28]
 800cfe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfe8:	9002      	str	r0, [sp, #8]
 800cfea:	9006      	str	r0, [sp, #24]
 800cfec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cff0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cff2:	ab21      	add	r3, sp, #132	; 0x84
 800cff4:	a902      	add	r1, sp, #8
 800cff6:	4628      	mov	r0, r5
 800cff8:	9301      	str	r3, [sp, #4]
 800cffa:	f001 f96d 	bl	800e2d8 <_svfiprintf_r>
 800cffe:	1c43      	adds	r3, r0, #1
 800d000:	bfbc      	itt	lt
 800d002:	238b      	movlt	r3, #139	; 0x8b
 800d004:	602b      	strlt	r3, [r5, #0]
 800d006:	2c00      	cmp	r4, #0
 800d008:	d0dd      	beq.n	800cfc6 <sniprintf+0x16>
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	2200      	movs	r2, #0
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	e7d9      	b.n	800cfc6 <sniprintf+0x16>
 800d012:	bf00      	nop
 800d014:	2000009c 	.word	0x2000009c

0800d018 <siprintf>:
 800d018:	b40e      	push	{r1, r2, r3}
 800d01a:	b500      	push	{lr}
 800d01c:	b09c      	sub	sp, #112	; 0x70
 800d01e:	ab1d      	add	r3, sp, #116	; 0x74
 800d020:	9002      	str	r0, [sp, #8]
 800d022:	9006      	str	r0, [sp, #24]
 800d024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d028:	4809      	ldr	r0, [pc, #36]	; (800d050 <siprintf+0x38>)
 800d02a:	9107      	str	r1, [sp, #28]
 800d02c:	9104      	str	r1, [sp, #16]
 800d02e:	4909      	ldr	r1, [pc, #36]	; (800d054 <siprintf+0x3c>)
 800d030:	f853 2b04 	ldr.w	r2, [r3], #4
 800d034:	9105      	str	r1, [sp, #20]
 800d036:	6800      	ldr	r0, [r0, #0]
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	a902      	add	r1, sp, #8
 800d03c:	f001 f94c 	bl	800e2d8 <_svfiprintf_r>
 800d040:	9b02      	ldr	r3, [sp, #8]
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	b01c      	add	sp, #112	; 0x70
 800d048:	f85d eb04 	ldr.w	lr, [sp], #4
 800d04c:	b003      	add	sp, #12
 800d04e:	4770      	bx	lr
 800d050:	2000009c 	.word	0x2000009c
 800d054:	ffff0208 	.word	0xffff0208

0800d058 <siscanf>:
 800d058:	b40e      	push	{r1, r2, r3}
 800d05a:	b510      	push	{r4, lr}
 800d05c:	b09f      	sub	sp, #124	; 0x7c
 800d05e:	ac21      	add	r4, sp, #132	; 0x84
 800d060:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d064:	f854 2b04 	ldr.w	r2, [r4], #4
 800d068:	9201      	str	r2, [sp, #4]
 800d06a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d06e:	9004      	str	r0, [sp, #16]
 800d070:	9008      	str	r0, [sp, #32]
 800d072:	f7f3 f91d 	bl	80002b0 <strlen>
 800d076:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <siscanf+0x50>)
 800d078:	9005      	str	r0, [sp, #20]
 800d07a:	9009      	str	r0, [sp, #36]	; 0x24
 800d07c:	930d      	str	r3, [sp, #52]	; 0x34
 800d07e:	480b      	ldr	r0, [pc, #44]	; (800d0ac <siscanf+0x54>)
 800d080:	9a01      	ldr	r2, [sp, #4]
 800d082:	6800      	ldr	r0, [r0, #0]
 800d084:	9403      	str	r4, [sp, #12]
 800d086:	2300      	movs	r3, #0
 800d088:	9311      	str	r3, [sp, #68]	; 0x44
 800d08a:	9316      	str	r3, [sp, #88]	; 0x58
 800d08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d090:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d094:	a904      	add	r1, sp, #16
 800d096:	4623      	mov	r3, r4
 800d098:	f001 fa76 	bl	800e588 <__ssvfiscanf_r>
 800d09c:	b01f      	add	sp, #124	; 0x7c
 800d09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0a2:	b003      	add	sp, #12
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	0800d0d3 	.word	0x0800d0d3
 800d0ac:	2000009c 	.word	0x2000009c

0800d0b0 <__sread>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b8:	f000 f97c 	bl	800d3b4 <_read_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	bfab      	itete	ge
 800d0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0c4:	181b      	addge	r3, r3, r0
 800d0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ca:	bfac      	ite	ge
 800d0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0ce:	81a3      	strhlt	r3, [r4, #12]
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <__seofread>:
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	4770      	bx	lr

0800d0d6 <__swrite>:
 800d0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0da:	461f      	mov	r7, r3
 800d0dc:	898b      	ldrh	r3, [r1, #12]
 800d0de:	05db      	lsls	r3, r3, #23
 800d0e0:	4605      	mov	r5, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	d505      	bpl.n	800d0f4 <__swrite+0x1e>
 800d0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f000 f94e 	bl	800d390 <_lseek_r>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	4632      	mov	r2, r6
 800d102:	463b      	mov	r3, r7
 800d104:	4628      	mov	r0, r5
 800d106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d10a:	f000 b965 	b.w	800d3d8 <_write_r>

0800d10e <__sseek>:
 800d10e:	b510      	push	{r4, lr}
 800d110:	460c      	mov	r4, r1
 800d112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d116:	f000 f93b 	bl	800d390 <_lseek_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	bf15      	itete	ne
 800d120:	6560      	strne	r0, [r4, #84]	; 0x54
 800d122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d12a:	81a3      	strheq	r3, [r4, #12]
 800d12c:	bf18      	it	ne
 800d12e:	81a3      	strhne	r3, [r4, #12]
 800d130:	bd10      	pop	{r4, pc}

0800d132 <__sclose>:
 800d132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d136:	f000 b91b 	b.w	800d370 <_close_r>
	...

0800d13c <std>:
 800d13c:	2300      	movs	r3, #0
 800d13e:	b510      	push	{r4, lr}
 800d140:	4604      	mov	r4, r0
 800d142:	e9c0 3300 	strd	r3, r3, [r0]
 800d146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d14a:	6083      	str	r3, [r0, #8]
 800d14c:	8181      	strh	r1, [r0, #12]
 800d14e:	6643      	str	r3, [r0, #100]	; 0x64
 800d150:	81c2      	strh	r2, [r0, #14]
 800d152:	6183      	str	r3, [r0, #24]
 800d154:	4619      	mov	r1, r3
 800d156:	2208      	movs	r2, #8
 800d158:	305c      	adds	r0, #92	; 0x5c
 800d15a:	f000 f8fd 	bl	800d358 <memset>
 800d15e:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <std+0x58>)
 800d160:	6263      	str	r3, [r4, #36]	; 0x24
 800d162:	4b0d      	ldr	r3, [pc, #52]	; (800d198 <std+0x5c>)
 800d164:	62a3      	str	r3, [r4, #40]	; 0x28
 800d166:	4b0d      	ldr	r3, [pc, #52]	; (800d19c <std+0x60>)
 800d168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d16a:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <std+0x64>)
 800d16c:	6323      	str	r3, [r4, #48]	; 0x30
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <std+0x68>)
 800d170:	6224      	str	r4, [r4, #32]
 800d172:	429c      	cmp	r4, r3
 800d174:	d006      	beq.n	800d184 <std+0x48>
 800d176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d17a:	4294      	cmp	r4, r2
 800d17c:	d002      	beq.n	800d184 <std+0x48>
 800d17e:	33d0      	adds	r3, #208	; 0xd0
 800d180:	429c      	cmp	r4, r3
 800d182:	d105      	bne.n	800d190 <std+0x54>
 800d184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18c:	f000 b960 	b.w	800d450 <__retarget_lock_init_recursive>
 800d190:	bd10      	pop	{r4, pc}
 800d192:	bf00      	nop
 800d194:	0800d0b1 	.word	0x0800d0b1
 800d198:	0800d0d7 	.word	0x0800d0d7
 800d19c:	0800d10f 	.word	0x0800d10f
 800d1a0:	0800d133 	.word	0x0800d133
 800d1a4:	20009cfc 	.word	0x20009cfc

0800d1a8 <stdio_exit_handler>:
 800d1a8:	4a02      	ldr	r2, [pc, #8]	; (800d1b4 <stdio_exit_handler+0xc>)
 800d1aa:	4903      	ldr	r1, [pc, #12]	; (800d1b8 <stdio_exit_handler+0x10>)
 800d1ac:	4803      	ldr	r0, [pc, #12]	; (800d1bc <stdio_exit_handler+0x14>)
 800d1ae:	f000 b869 	b.w	800d284 <_fwalk_sglue>
 800d1b2:	bf00      	nop
 800d1b4:	20000044 	.word	0x20000044
 800d1b8:	0800f06d 	.word	0x0800f06d
 800d1bc:	20000050 	.word	0x20000050

0800d1c0 <cleanup_stdio>:
 800d1c0:	6841      	ldr	r1, [r0, #4]
 800d1c2:	4b0c      	ldr	r3, [pc, #48]	; (800d1f4 <cleanup_stdio+0x34>)
 800d1c4:	4299      	cmp	r1, r3
 800d1c6:	b510      	push	{r4, lr}
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	d001      	beq.n	800d1d0 <cleanup_stdio+0x10>
 800d1cc:	f001 ff4e 	bl	800f06c <_fflush_r>
 800d1d0:	68a1      	ldr	r1, [r4, #8]
 800d1d2:	4b09      	ldr	r3, [pc, #36]	; (800d1f8 <cleanup_stdio+0x38>)
 800d1d4:	4299      	cmp	r1, r3
 800d1d6:	d002      	beq.n	800d1de <cleanup_stdio+0x1e>
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f001 ff47 	bl	800f06c <_fflush_r>
 800d1de:	68e1      	ldr	r1, [r4, #12]
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <cleanup_stdio+0x3c>)
 800d1e2:	4299      	cmp	r1, r3
 800d1e4:	d004      	beq.n	800d1f0 <cleanup_stdio+0x30>
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1ec:	f001 bf3e 	b.w	800f06c <_fflush_r>
 800d1f0:	bd10      	pop	{r4, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20009cfc 	.word	0x20009cfc
 800d1f8:	20009d64 	.word	0x20009d64
 800d1fc:	20009dcc 	.word	0x20009dcc

0800d200 <global_stdio_init.part.0>:
 800d200:	b510      	push	{r4, lr}
 800d202:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <global_stdio_init.part.0+0x30>)
 800d204:	4c0b      	ldr	r4, [pc, #44]	; (800d234 <global_stdio_init.part.0+0x34>)
 800d206:	4a0c      	ldr	r2, [pc, #48]	; (800d238 <global_stdio_init.part.0+0x38>)
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	4620      	mov	r0, r4
 800d20c:	2200      	movs	r2, #0
 800d20e:	2104      	movs	r1, #4
 800d210:	f7ff ff94 	bl	800d13c <std>
 800d214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d218:	2201      	movs	r2, #1
 800d21a:	2109      	movs	r1, #9
 800d21c:	f7ff ff8e 	bl	800d13c <std>
 800d220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d224:	2202      	movs	r2, #2
 800d226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d22a:	2112      	movs	r1, #18
 800d22c:	f7ff bf86 	b.w	800d13c <std>
 800d230:	20009e34 	.word	0x20009e34
 800d234:	20009cfc 	.word	0x20009cfc
 800d238:	0800d1a9 	.word	0x0800d1a9

0800d23c <__sfp_lock_acquire>:
 800d23c:	4801      	ldr	r0, [pc, #4]	; (800d244 <__sfp_lock_acquire+0x8>)
 800d23e:	f000 b908 	b.w	800d452 <__retarget_lock_acquire_recursive>
 800d242:	bf00      	nop
 800d244:	20009e3d 	.word	0x20009e3d

0800d248 <__sfp_lock_release>:
 800d248:	4801      	ldr	r0, [pc, #4]	; (800d250 <__sfp_lock_release+0x8>)
 800d24a:	f000 b903 	b.w	800d454 <__retarget_lock_release_recursive>
 800d24e:	bf00      	nop
 800d250:	20009e3d 	.word	0x20009e3d

0800d254 <__sinit>:
 800d254:	b510      	push	{r4, lr}
 800d256:	4604      	mov	r4, r0
 800d258:	f7ff fff0 	bl	800d23c <__sfp_lock_acquire>
 800d25c:	6a23      	ldr	r3, [r4, #32]
 800d25e:	b11b      	cbz	r3, 800d268 <__sinit+0x14>
 800d260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d264:	f7ff bff0 	b.w	800d248 <__sfp_lock_release>
 800d268:	4b04      	ldr	r3, [pc, #16]	; (800d27c <__sinit+0x28>)
 800d26a:	6223      	str	r3, [r4, #32]
 800d26c:	4b04      	ldr	r3, [pc, #16]	; (800d280 <__sinit+0x2c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1f5      	bne.n	800d260 <__sinit+0xc>
 800d274:	f7ff ffc4 	bl	800d200 <global_stdio_init.part.0>
 800d278:	e7f2      	b.n	800d260 <__sinit+0xc>
 800d27a:	bf00      	nop
 800d27c:	0800d1c1 	.word	0x0800d1c1
 800d280:	20009e34 	.word	0x20009e34

0800d284 <_fwalk_sglue>:
 800d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d288:	4607      	mov	r7, r0
 800d28a:	4688      	mov	r8, r1
 800d28c:	4614      	mov	r4, r2
 800d28e:	2600      	movs	r6, #0
 800d290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d294:	f1b9 0901 	subs.w	r9, r9, #1
 800d298:	d505      	bpl.n	800d2a6 <_fwalk_sglue+0x22>
 800d29a:	6824      	ldr	r4, [r4, #0]
 800d29c:	2c00      	cmp	r4, #0
 800d29e:	d1f7      	bne.n	800d290 <_fwalk_sglue+0xc>
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d907      	bls.n	800d2bc <_fwalk_sglue+0x38>
 800d2ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	d003      	beq.n	800d2bc <_fwalk_sglue+0x38>
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	47c0      	blx	r8
 800d2ba:	4306      	orrs	r6, r0
 800d2bc:	3568      	adds	r5, #104	; 0x68
 800d2be:	e7e9      	b.n	800d294 <_fwalk_sglue+0x10>

0800d2c0 <_vsniprintf_r>:
 800d2c0:	b530      	push	{r4, r5, lr}
 800d2c2:	4614      	mov	r4, r2
 800d2c4:	2c00      	cmp	r4, #0
 800d2c6:	b09b      	sub	sp, #108	; 0x6c
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	da05      	bge.n	800d2da <_vsniprintf_r+0x1a>
 800d2ce:	238b      	movs	r3, #139	; 0x8b
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2d6:	b01b      	add	sp, #108	; 0x6c
 800d2d8:	bd30      	pop	{r4, r5, pc}
 800d2da:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d2de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d2e2:	bf14      	ite	ne
 800d2e4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d2e8:	4623      	moveq	r3, r4
 800d2ea:	9302      	str	r3, [sp, #8]
 800d2ec:	9305      	str	r3, [sp, #20]
 800d2ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2f2:	9100      	str	r1, [sp, #0]
 800d2f4:	9104      	str	r1, [sp, #16]
 800d2f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d2fa:	4669      	mov	r1, sp
 800d2fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d2fe:	f000 ffeb 	bl	800e2d8 <_svfiprintf_r>
 800d302:	1c43      	adds	r3, r0, #1
 800d304:	bfbc      	itt	lt
 800d306:	238b      	movlt	r3, #139	; 0x8b
 800d308:	602b      	strlt	r3, [r5, #0]
 800d30a:	2c00      	cmp	r4, #0
 800d30c:	d0e3      	beq.n	800d2d6 <_vsniprintf_r+0x16>
 800d30e:	9b00      	ldr	r3, [sp, #0]
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	e7df      	b.n	800d2d6 <_vsniprintf_r+0x16>
	...

0800d318 <vsniprintf>:
 800d318:	b507      	push	{r0, r1, r2, lr}
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	4613      	mov	r3, r2
 800d31e:	460a      	mov	r2, r1
 800d320:	4601      	mov	r1, r0
 800d322:	4803      	ldr	r0, [pc, #12]	; (800d330 <vsniprintf+0x18>)
 800d324:	6800      	ldr	r0, [r0, #0]
 800d326:	f7ff ffcb 	bl	800d2c0 <_vsniprintf_r>
 800d32a:	b003      	add	sp, #12
 800d32c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d330:	2000009c 	.word	0x2000009c

0800d334 <iprintf>:
 800d334:	b40f      	push	{r0, r1, r2, r3}
 800d336:	b507      	push	{r0, r1, r2, lr}
 800d338:	4906      	ldr	r1, [pc, #24]	; (800d354 <iprintf+0x20>)
 800d33a:	ab04      	add	r3, sp, #16
 800d33c:	6808      	ldr	r0, [r1, #0]
 800d33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d342:	6881      	ldr	r1, [r0, #8]
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	f001 fac1 	bl	800e8cc <_vfiprintf_r>
 800d34a:	b003      	add	sp, #12
 800d34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d350:	b004      	add	sp, #16
 800d352:	4770      	bx	lr
 800d354:	2000009c 	.word	0x2000009c

0800d358 <memset>:
 800d358:	4402      	add	r2, r0
 800d35a:	4603      	mov	r3, r0
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d100      	bne.n	800d362 <memset+0xa>
 800d360:	4770      	bx	lr
 800d362:	f803 1b01 	strb.w	r1, [r3], #1
 800d366:	e7f9      	b.n	800d35c <memset+0x4>

0800d368 <_localeconv_r>:
 800d368:	4800      	ldr	r0, [pc, #0]	; (800d36c <_localeconv_r+0x4>)
 800d36a:	4770      	bx	lr
 800d36c:	20000190 	.word	0x20000190

0800d370 <_close_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d06      	ldr	r5, [pc, #24]	; (800d38c <_close_r+0x1c>)
 800d374:	2300      	movs	r3, #0
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	602b      	str	r3, [r5, #0]
 800d37c:	f7f7 fb95 	bl	8004aaa <_close>
 800d380:	1c43      	adds	r3, r0, #1
 800d382:	d102      	bne.n	800d38a <_close_r+0x1a>
 800d384:	682b      	ldr	r3, [r5, #0]
 800d386:	b103      	cbz	r3, 800d38a <_close_r+0x1a>
 800d388:	6023      	str	r3, [r4, #0]
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	20009e38 	.word	0x20009e38

0800d390 <_lseek_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4d07      	ldr	r5, [pc, #28]	; (800d3b0 <_lseek_r+0x20>)
 800d394:	4604      	mov	r4, r0
 800d396:	4608      	mov	r0, r1
 800d398:	4611      	mov	r1, r2
 800d39a:	2200      	movs	r2, #0
 800d39c:	602a      	str	r2, [r5, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	f7f7 fbaa 	bl	8004af8 <_lseek>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_lseek_r+0x1e>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_lseek_r+0x1e>
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	20009e38 	.word	0x20009e38

0800d3b4 <_read_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4d07      	ldr	r5, [pc, #28]	; (800d3d4 <_read_r+0x20>)
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	4608      	mov	r0, r1
 800d3bc:	4611      	mov	r1, r2
 800d3be:	2200      	movs	r2, #0
 800d3c0:	602a      	str	r2, [r5, #0]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	f7f7 fb38 	bl	8004a38 <_read>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	d102      	bne.n	800d3d2 <_read_r+0x1e>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	b103      	cbz	r3, 800d3d2 <_read_r+0x1e>
 800d3d0:	6023      	str	r3, [r4, #0]
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	20009e38 	.word	0x20009e38

0800d3d8 <_write_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4d07      	ldr	r5, [pc, #28]	; (800d3f8 <_write_r+0x20>)
 800d3dc:	4604      	mov	r4, r0
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	602a      	str	r2, [r5, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f7f7 fb43 	bl	8004a72 <_write>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_write_r+0x1e>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_write_r+0x1e>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	20009e38 	.word	0x20009e38

0800d3fc <__errno>:
 800d3fc:	4b01      	ldr	r3, [pc, #4]	; (800d404 <__errno+0x8>)
 800d3fe:	6818      	ldr	r0, [r3, #0]
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	2000009c 	.word	0x2000009c

0800d408 <__libc_init_array>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	4d0d      	ldr	r5, [pc, #52]	; (800d440 <__libc_init_array+0x38>)
 800d40c:	4c0d      	ldr	r4, [pc, #52]	; (800d444 <__libc_init_array+0x3c>)
 800d40e:	1b64      	subs	r4, r4, r5
 800d410:	10a4      	asrs	r4, r4, #2
 800d412:	2600      	movs	r6, #0
 800d414:	42a6      	cmp	r6, r4
 800d416:	d109      	bne.n	800d42c <__libc_init_array+0x24>
 800d418:	4d0b      	ldr	r5, [pc, #44]	; (800d448 <__libc_init_array+0x40>)
 800d41a:	4c0c      	ldr	r4, [pc, #48]	; (800d44c <__libc_init_array+0x44>)
 800d41c:	f003 f954 	bl	80106c8 <_init>
 800d420:	1b64      	subs	r4, r4, r5
 800d422:	10a4      	asrs	r4, r4, #2
 800d424:	2600      	movs	r6, #0
 800d426:	42a6      	cmp	r6, r4
 800d428:	d105      	bne.n	800d436 <__libc_init_array+0x2e>
 800d42a:	bd70      	pop	{r4, r5, r6, pc}
 800d42c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d430:	4798      	blx	r3
 800d432:	3601      	adds	r6, #1
 800d434:	e7ee      	b.n	800d414 <__libc_init_array+0xc>
 800d436:	f855 3b04 	ldr.w	r3, [r5], #4
 800d43a:	4798      	blx	r3
 800d43c:	3601      	adds	r6, #1
 800d43e:	e7f2      	b.n	800d426 <__libc_init_array+0x1e>
 800d440:	08015248 	.word	0x08015248
 800d444:	08015248 	.word	0x08015248
 800d448:	08015248 	.word	0x08015248
 800d44c:	0801524c 	.word	0x0801524c

0800d450 <__retarget_lock_init_recursive>:
 800d450:	4770      	bx	lr

0800d452 <__retarget_lock_acquire_recursive>:
 800d452:	4770      	bx	lr

0800d454 <__retarget_lock_release_recursive>:
 800d454:	4770      	bx	lr
	...

0800d458 <__assert_func>:
 800d458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d45a:	4614      	mov	r4, r2
 800d45c:	461a      	mov	r2, r3
 800d45e:	4b09      	ldr	r3, [pc, #36]	; (800d484 <__assert_func+0x2c>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4605      	mov	r5, r0
 800d464:	68d8      	ldr	r0, [r3, #12]
 800d466:	b14c      	cbz	r4, 800d47c <__assert_func+0x24>
 800d468:	4b07      	ldr	r3, [pc, #28]	; (800d488 <__assert_func+0x30>)
 800d46a:	9100      	str	r1, [sp, #0]
 800d46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d470:	4906      	ldr	r1, [pc, #24]	; (800d48c <__assert_func+0x34>)
 800d472:	462b      	mov	r3, r5
 800d474:	f002 f9aa 	bl	800f7cc <fiprintf>
 800d478:	f002 fc6e 	bl	800fd58 <abort>
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <__assert_func+0x38>)
 800d47e:	461c      	mov	r4, r3
 800d480:	e7f3      	b.n	800d46a <__assert_func+0x12>
 800d482:	bf00      	nop
 800d484:	2000009c 	.word	0x2000009c
 800d488:	08014ee6 	.word	0x08014ee6
 800d48c:	08014ef3 	.word	0x08014ef3
 800d490:	08014f21 	.word	0x08014f21

0800d494 <quorem>:
 800d494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	6903      	ldr	r3, [r0, #16]
 800d49a:	690c      	ldr	r4, [r1, #16]
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	4607      	mov	r7, r0
 800d4a0:	db7e      	blt.n	800d5a0 <quorem+0x10c>
 800d4a2:	3c01      	subs	r4, #1
 800d4a4:	f101 0814 	add.w	r8, r1, #20
 800d4a8:	f100 0514 	add.w	r5, r0, #20
 800d4ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4ca:	d331      	bcc.n	800d530 <quorem+0x9c>
 800d4cc:	f04f 0e00 	mov.w	lr, #0
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	46ac      	mov	ip, r5
 800d4d4:	46f2      	mov	sl, lr
 800d4d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4da:	b293      	uxth	r3, r2
 800d4dc:	fb06 e303 	mla	r3, r6, r3, lr
 800d4e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d4e4:	0c1a      	lsrs	r2, r3, #16
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800d4ec:	f8dc a000 	ldr.w	sl, [ip]
 800d4f0:	fa13 f38a 	uxtah	r3, r3, sl
 800d4f4:	fb06 220e 	mla	r2, r6, lr, r2
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	9b00      	ldr	r3, [sp, #0]
 800d4fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d500:	b292      	uxth	r2, r2
 800d502:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d506:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d50a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d50e:	4581      	cmp	r9, r0
 800d510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d514:	f84c 3b04 	str.w	r3, [ip], #4
 800d518:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d51c:	d2db      	bcs.n	800d4d6 <quorem+0x42>
 800d51e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d522:	b92b      	cbnz	r3, 800d530 <quorem+0x9c>
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	3b04      	subs	r3, #4
 800d528:	429d      	cmp	r5, r3
 800d52a:	461a      	mov	r2, r3
 800d52c:	d32c      	bcc.n	800d588 <quorem+0xf4>
 800d52e:	613c      	str	r4, [r7, #16]
 800d530:	4638      	mov	r0, r7
 800d532:	f002 f84b 	bl	800f5cc <__mcmp>
 800d536:	2800      	cmp	r0, #0
 800d538:	db22      	blt.n	800d580 <quorem+0xec>
 800d53a:	3601      	adds	r6, #1
 800d53c:	4629      	mov	r1, r5
 800d53e:	2000      	movs	r0, #0
 800d540:	f858 2b04 	ldr.w	r2, [r8], #4
 800d544:	f8d1 c000 	ldr.w	ip, [r1]
 800d548:	b293      	uxth	r3, r2
 800d54a:	1ac3      	subs	r3, r0, r3
 800d54c:	0c12      	lsrs	r2, r2, #16
 800d54e:	fa13 f38c 	uxtah	r3, r3, ip
 800d552:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d560:	45c1      	cmp	r9, r8
 800d562:	f841 3b04 	str.w	r3, [r1], #4
 800d566:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d56a:	d2e9      	bcs.n	800d540 <quorem+0xac>
 800d56c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d570:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d574:	b922      	cbnz	r2, 800d580 <quorem+0xec>
 800d576:	3b04      	subs	r3, #4
 800d578:	429d      	cmp	r5, r3
 800d57a:	461a      	mov	r2, r3
 800d57c:	d30a      	bcc.n	800d594 <quorem+0x100>
 800d57e:	613c      	str	r4, [r7, #16]
 800d580:	4630      	mov	r0, r6
 800d582:	b003      	add	sp, #12
 800d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	3b04      	subs	r3, #4
 800d58c:	2a00      	cmp	r2, #0
 800d58e:	d1ce      	bne.n	800d52e <quorem+0x9a>
 800d590:	3c01      	subs	r4, #1
 800d592:	e7c9      	b.n	800d528 <quorem+0x94>
 800d594:	6812      	ldr	r2, [r2, #0]
 800d596:	3b04      	subs	r3, #4
 800d598:	2a00      	cmp	r2, #0
 800d59a:	d1f0      	bne.n	800d57e <quorem+0xea>
 800d59c:	3c01      	subs	r4, #1
 800d59e:	e7eb      	b.n	800d578 <quorem+0xe4>
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	e7ee      	b.n	800d582 <quorem+0xee>
 800d5a4:	0000      	movs	r0, r0
	...

0800d5a8 <_dtoa_r>:
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	ed2d 8b04 	vpush	{d8-d9}
 800d5b0:	69c5      	ldr	r5, [r0, #28]
 800d5b2:	b093      	sub	sp, #76	; 0x4c
 800d5b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5b8:	ec57 6b10 	vmov	r6, r7, d0
 800d5bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5c0:	9107      	str	r1, [sp, #28]
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	920a      	str	r2, [sp, #40]	; 0x28
 800d5c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d5c8:	b975      	cbnz	r5, 800d5e8 <_dtoa_r+0x40>
 800d5ca:	2010      	movs	r0, #16
 800d5cc:	f001 fa98 	bl	800eb00 <malloc>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	61e0      	str	r0, [r4, #28]
 800d5d4:	b920      	cbnz	r0, 800d5e0 <_dtoa_r+0x38>
 800d5d6:	4bae      	ldr	r3, [pc, #696]	; (800d890 <_dtoa_r+0x2e8>)
 800d5d8:	21ef      	movs	r1, #239	; 0xef
 800d5da:	48ae      	ldr	r0, [pc, #696]	; (800d894 <_dtoa_r+0x2ec>)
 800d5dc:	f7ff ff3c 	bl	800d458 <__assert_func>
 800d5e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5e4:	6005      	str	r5, [r0, #0]
 800d5e6:	60c5      	str	r5, [r0, #12]
 800d5e8:	69e3      	ldr	r3, [r4, #28]
 800d5ea:	6819      	ldr	r1, [r3, #0]
 800d5ec:	b151      	cbz	r1, 800d604 <_dtoa_r+0x5c>
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	604a      	str	r2, [r1, #4]
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4093      	lsls	r3, r2
 800d5f6:	608b      	str	r3, [r1, #8]
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 fdab 	bl	800f154 <_Bfree>
 800d5fe:	69e3      	ldr	r3, [r4, #28]
 800d600:	2200      	movs	r2, #0
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	1e3b      	subs	r3, r7, #0
 800d606:	bfbb      	ittet	lt
 800d608:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d60c:	9303      	strlt	r3, [sp, #12]
 800d60e:	2300      	movge	r3, #0
 800d610:	2201      	movlt	r2, #1
 800d612:	bfac      	ite	ge
 800d614:	f8c8 3000 	strge.w	r3, [r8]
 800d618:	f8c8 2000 	strlt.w	r2, [r8]
 800d61c:	4b9e      	ldr	r3, [pc, #632]	; (800d898 <_dtoa_r+0x2f0>)
 800d61e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d622:	ea33 0308 	bics.w	r3, r3, r8
 800d626:	d11b      	bne.n	800d660 <_dtoa_r+0xb8>
 800d628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d62a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d634:	4333      	orrs	r3, r6
 800d636:	f000 8593 	beq.w	800e160 <_dtoa_r+0xbb8>
 800d63a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d63c:	b963      	cbnz	r3, 800d658 <_dtoa_r+0xb0>
 800d63e:	4b97      	ldr	r3, [pc, #604]	; (800d89c <_dtoa_r+0x2f4>)
 800d640:	e027      	b.n	800d692 <_dtoa_r+0xea>
 800d642:	4b97      	ldr	r3, [pc, #604]	; (800d8a0 <_dtoa_r+0x2f8>)
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	3308      	adds	r3, #8
 800d648:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	9800      	ldr	r0, [sp, #0]
 800d64e:	b013      	add	sp, #76	; 0x4c
 800d650:	ecbd 8b04 	vpop	{d8-d9}
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	4b90      	ldr	r3, [pc, #576]	; (800d89c <_dtoa_r+0x2f4>)
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	3303      	adds	r3, #3
 800d65e:	e7f3      	b.n	800d648 <_dtoa_r+0xa0>
 800d660:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d664:	2200      	movs	r2, #0
 800d666:	ec51 0b17 	vmov	r0, r1, d7
 800d66a:	eeb0 8a47 	vmov.f32	s16, s14
 800d66e:	eef0 8a67 	vmov.f32	s17, s15
 800d672:	2300      	movs	r3, #0
 800d674:	f7f3 fa48 	bl	8000b08 <__aeabi_dcmpeq>
 800d678:	4681      	mov	r9, r0
 800d67a:	b160      	cbz	r0, 800d696 <_dtoa_r+0xee>
 800d67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d67e:	2301      	movs	r3, #1
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8568 	beq.w	800e15a <_dtoa_r+0xbb2>
 800d68a:	4b86      	ldr	r3, [pc, #536]	; (800d8a4 <_dtoa_r+0x2fc>)
 800d68c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d68e:	6013      	str	r3, [r2, #0]
 800d690:	3b01      	subs	r3, #1
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	e7da      	b.n	800d64c <_dtoa_r+0xa4>
 800d696:	aa10      	add	r2, sp, #64	; 0x40
 800d698:	a911      	add	r1, sp, #68	; 0x44
 800d69a:	4620      	mov	r0, r4
 800d69c:	eeb0 0a48 	vmov.f32	s0, s16
 800d6a0:	eef0 0a68 	vmov.f32	s1, s17
 800d6a4:	f002 f838 	bl	800f718 <__d2b>
 800d6a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d6ac:	4682      	mov	sl, r0
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	d07f      	beq.n	800d7b2 <_dtoa_r+0x20a>
 800d6b2:	ee18 3a90 	vmov	r3, s17
 800d6b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d6be:	ec51 0b18 	vmov	r0, r1, d8
 800d6c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	4b75      	ldr	r3, [pc, #468]	; (800d8a8 <_dtoa_r+0x300>)
 800d6d4:	f7f2 fdf8 	bl	80002c8 <__aeabi_dsub>
 800d6d8:	a367      	add	r3, pc, #412	; (adr r3, 800d878 <_dtoa_r+0x2d0>)
 800d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6de:	f7f2 ffab 	bl	8000638 <__aeabi_dmul>
 800d6e2:	a367      	add	r3, pc, #412	; (adr r3, 800d880 <_dtoa_r+0x2d8>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	f7f2 fdf0 	bl	80002cc <__adddf3>
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	460f      	mov	r7, r1
 800d6f2:	f7f2 ff37 	bl	8000564 <__aeabi_i2d>
 800d6f6:	a364      	add	r3, pc, #400	; (adr r3, 800d888 <_dtoa_r+0x2e0>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f7f2 ff9c 	bl	8000638 <__aeabi_dmul>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4630      	mov	r0, r6
 800d706:	4639      	mov	r1, r7
 800d708:	f7f2 fde0 	bl	80002cc <__adddf3>
 800d70c:	4606      	mov	r6, r0
 800d70e:	460f      	mov	r7, r1
 800d710:	f7f3 fa42 	bl	8000b98 <__aeabi_d2iz>
 800d714:	2200      	movs	r2, #0
 800d716:	4683      	mov	fp, r0
 800d718:	2300      	movs	r3, #0
 800d71a:	4630      	mov	r0, r6
 800d71c:	4639      	mov	r1, r7
 800d71e:	f7f3 f9fd 	bl	8000b1c <__aeabi_dcmplt>
 800d722:	b148      	cbz	r0, 800d738 <_dtoa_r+0x190>
 800d724:	4658      	mov	r0, fp
 800d726:	f7f2 ff1d 	bl	8000564 <__aeabi_i2d>
 800d72a:	4632      	mov	r2, r6
 800d72c:	463b      	mov	r3, r7
 800d72e:	f7f3 f9eb 	bl	8000b08 <__aeabi_dcmpeq>
 800d732:	b908      	cbnz	r0, 800d738 <_dtoa_r+0x190>
 800d734:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d738:	f1bb 0f16 	cmp.w	fp, #22
 800d73c:	d857      	bhi.n	800d7ee <_dtoa_r+0x246>
 800d73e:	4b5b      	ldr	r3, [pc, #364]	; (800d8ac <_dtoa_r+0x304>)
 800d740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	ec51 0b18 	vmov	r0, r1, d8
 800d74c:	f7f3 f9e6 	bl	8000b1c <__aeabi_dcmplt>
 800d750:	2800      	cmp	r0, #0
 800d752:	d04e      	beq.n	800d7f2 <_dtoa_r+0x24a>
 800d754:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d758:	2300      	movs	r3, #0
 800d75a:	930c      	str	r3, [sp, #48]	; 0x30
 800d75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d75e:	1b5b      	subs	r3, r3, r5
 800d760:	1e5a      	subs	r2, r3, #1
 800d762:	bf45      	ittet	mi
 800d764:	f1c3 0301 	rsbmi	r3, r3, #1
 800d768:	9305      	strmi	r3, [sp, #20]
 800d76a:	2300      	movpl	r3, #0
 800d76c:	2300      	movmi	r3, #0
 800d76e:	9206      	str	r2, [sp, #24]
 800d770:	bf54      	ite	pl
 800d772:	9305      	strpl	r3, [sp, #20]
 800d774:	9306      	strmi	r3, [sp, #24]
 800d776:	f1bb 0f00 	cmp.w	fp, #0
 800d77a:	db3c      	blt.n	800d7f6 <_dtoa_r+0x24e>
 800d77c:	9b06      	ldr	r3, [sp, #24]
 800d77e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d782:	445b      	add	r3, fp
 800d784:	9306      	str	r3, [sp, #24]
 800d786:	2300      	movs	r3, #0
 800d788:	9308      	str	r3, [sp, #32]
 800d78a:	9b07      	ldr	r3, [sp, #28]
 800d78c:	2b09      	cmp	r3, #9
 800d78e:	d868      	bhi.n	800d862 <_dtoa_r+0x2ba>
 800d790:	2b05      	cmp	r3, #5
 800d792:	bfc4      	itt	gt
 800d794:	3b04      	subgt	r3, #4
 800d796:	9307      	strgt	r3, [sp, #28]
 800d798:	9b07      	ldr	r3, [sp, #28]
 800d79a:	f1a3 0302 	sub.w	r3, r3, #2
 800d79e:	bfcc      	ite	gt
 800d7a0:	2500      	movgt	r5, #0
 800d7a2:	2501      	movle	r5, #1
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	f200 8085 	bhi.w	800d8b4 <_dtoa_r+0x30c>
 800d7aa:	e8df f003 	tbb	[pc, r3]
 800d7ae:	3b2e      	.short	0x3b2e
 800d7b0:	5839      	.short	0x5839
 800d7b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7b6:	441d      	add	r5, r3
 800d7b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7bc:	2b20      	cmp	r3, #32
 800d7be:	bfc1      	itttt	gt
 800d7c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d7c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d7cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d7d0:	bfd6      	itet	le
 800d7d2:	f1c3 0320 	rsble	r3, r3, #32
 800d7d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d7da:	fa06 f003 	lslle.w	r0, r6, r3
 800d7de:	f7f2 feb1 	bl	8000544 <__aeabi_ui2d>
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d7e8:	3d01      	subs	r5, #1
 800d7ea:	920e      	str	r2, [sp, #56]	; 0x38
 800d7ec:	e76f      	b.n	800d6ce <_dtoa_r+0x126>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e7b3      	b.n	800d75a <_dtoa_r+0x1b2>
 800d7f2:	900c      	str	r0, [sp, #48]	; 0x30
 800d7f4:	e7b2      	b.n	800d75c <_dtoa_r+0x1b4>
 800d7f6:	9b05      	ldr	r3, [sp, #20]
 800d7f8:	eba3 030b 	sub.w	r3, r3, fp
 800d7fc:	9305      	str	r3, [sp, #20]
 800d7fe:	f1cb 0300 	rsb	r3, fp, #0
 800d802:	9308      	str	r3, [sp, #32]
 800d804:	2300      	movs	r3, #0
 800d806:	930b      	str	r3, [sp, #44]	; 0x2c
 800d808:	e7bf      	b.n	800d78a <_dtoa_r+0x1e2>
 800d80a:	2300      	movs	r3, #0
 800d80c:	9309      	str	r3, [sp, #36]	; 0x24
 800d80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	dc52      	bgt.n	800d8ba <_dtoa_r+0x312>
 800d814:	2301      	movs	r3, #1
 800d816:	9301      	str	r3, [sp, #4]
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	461a      	mov	r2, r3
 800d81c:	920a      	str	r2, [sp, #40]	; 0x28
 800d81e:	e00b      	b.n	800d838 <_dtoa_r+0x290>
 800d820:	2301      	movs	r3, #1
 800d822:	e7f3      	b.n	800d80c <_dtoa_r+0x264>
 800d824:	2300      	movs	r3, #0
 800d826:	9309      	str	r3, [sp, #36]	; 0x24
 800d828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d82a:	445b      	add	r3, fp
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	3301      	adds	r3, #1
 800d830:	2b01      	cmp	r3, #1
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	bfb8      	it	lt
 800d836:	2301      	movlt	r3, #1
 800d838:	69e0      	ldr	r0, [r4, #28]
 800d83a:	2100      	movs	r1, #0
 800d83c:	2204      	movs	r2, #4
 800d83e:	f102 0614 	add.w	r6, r2, #20
 800d842:	429e      	cmp	r6, r3
 800d844:	d93d      	bls.n	800d8c2 <_dtoa_r+0x31a>
 800d846:	6041      	str	r1, [r0, #4]
 800d848:	4620      	mov	r0, r4
 800d84a:	f001 fc43 	bl	800f0d4 <_Balloc>
 800d84e:	9000      	str	r0, [sp, #0]
 800d850:	2800      	cmp	r0, #0
 800d852:	d139      	bne.n	800d8c8 <_dtoa_r+0x320>
 800d854:	4b16      	ldr	r3, [pc, #88]	; (800d8b0 <_dtoa_r+0x308>)
 800d856:	4602      	mov	r2, r0
 800d858:	f240 11af 	movw	r1, #431	; 0x1af
 800d85c:	e6bd      	b.n	800d5da <_dtoa_r+0x32>
 800d85e:	2301      	movs	r3, #1
 800d860:	e7e1      	b.n	800d826 <_dtoa_r+0x27e>
 800d862:	2501      	movs	r5, #1
 800d864:	2300      	movs	r3, #0
 800d866:	9307      	str	r3, [sp, #28]
 800d868:	9509      	str	r5, [sp, #36]	; 0x24
 800d86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	2200      	movs	r2, #0
 800d874:	2312      	movs	r3, #18
 800d876:	e7d1      	b.n	800d81c <_dtoa_r+0x274>
 800d878:	636f4361 	.word	0x636f4361
 800d87c:	3fd287a7 	.word	0x3fd287a7
 800d880:	8b60c8b3 	.word	0x8b60c8b3
 800d884:	3fc68a28 	.word	0x3fc68a28
 800d888:	509f79fb 	.word	0x509f79fb
 800d88c:	3fd34413 	.word	0x3fd34413
 800d890:	08014f2f 	.word	0x08014f2f
 800d894:	08014f46 	.word	0x08014f46
 800d898:	7ff00000 	.word	0x7ff00000
 800d89c:	08014f2b 	.word	0x08014f2b
 800d8a0:	08014f22 	.word	0x08014f22
 800d8a4:	08014fd7 	.word	0x08014fd7
 800d8a8:	3ff80000 	.word	0x3ff80000
 800d8ac:	08015060 	.word	0x08015060
 800d8b0:	08014f9e 	.word	0x08014f9e
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b8:	e7d7      	b.n	800d86a <_dtoa_r+0x2c2>
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	e7ba      	b.n	800d838 <_dtoa_r+0x290>
 800d8c2:	3101      	adds	r1, #1
 800d8c4:	0052      	lsls	r2, r2, #1
 800d8c6:	e7ba      	b.n	800d83e <_dtoa_r+0x296>
 800d8c8:	69e3      	ldr	r3, [r4, #28]
 800d8ca:	9a00      	ldr	r2, [sp, #0]
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	9b04      	ldr	r3, [sp, #16]
 800d8d0:	2b0e      	cmp	r3, #14
 800d8d2:	f200 80a8 	bhi.w	800da26 <_dtoa_r+0x47e>
 800d8d6:	2d00      	cmp	r5, #0
 800d8d8:	f000 80a5 	beq.w	800da26 <_dtoa_r+0x47e>
 800d8dc:	f1bb 0f00 	cmp.w	fp, #0
 800d8e0:	dd38      	ble.n	800d954 <_dtoa_r+0x3ac>
 800d8e2:	4bc0      	ldr	r3, [pc, #768]	; (800dbe4 <_dtoa_r+0x63c>)
 800d8e4:	f00b 020f 	and.w	r2, fp, #15
 800d8e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d8f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d8f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d8f8:	d019      	beq.n	800d92e <_dtoa_r+0x386>
 800d8fa:	4bbb      	ldr	r3, [pc, #748]	; (800dbe8 <_dtoa_r+0x640>)
 800d8fc:	ec51 0b18 	vmov	r0, r1, d8
 800d900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d904:	f7f2 ffc2 	bl	800088c <__aeabi_ddiv>
 800d908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d90c:	f008 080f 	and.w	r8, r8, #15
 800d910:	2503      	movs	r5, #3
 800d912:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dbe8 <_dtoa_r+0x640>
 800d916:	f1b8 0f00 	cmp.w	r8, #0
 800d91a:	d10a      	bne.n	800d932 <_dtoa_r+0x38a>
 800d91c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d920:	4632      	mov	r2, r6
 800d922:	463b      	mov	r3, r7
 800d924:	f7f2 ffb2 	bl	800088c <__aeabi_ddiv>
 800d928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d92c:	e02b      	b.n	800d986 <_dtoa_r+0x3de>
 800d92e:	2502      	movs	r5, #2
 800d930:	e7ef      	b.n	800d912 <_dtoa_r+0x36a>
 800d932:	f018 0f01 	tst.w	r8, #1
 800d936:	d008      	beq.n	800d94a <_dtoa_r+0x3a2>
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d940:	f7f2 fe7a 	bl	8000638 <__aeabi_dmul>
 800d944:	3501      	adds	r5, #1
 800d946:	4606      	mov	r6, r0
 800d948:	460f      	mov	r7, r1
 800d94a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d94e:	f109 0908 	add.w	r9, r9, #8
 800d952:	e7e0      	b.n	800d916 <_dtoa_r+0x36e>
 800d954:	f000 809f 	beq.w	800da96 <_dtoa_r+0x4ee>
 800d958:	f1cb 0600 	rsb	r6, fp, #0
 800d95c:	4ba1      	ldr	r3, [pc, #644]	; (800dbe4 <_dtoa_r+0x63c>)
 800d95e:	4fa2      	ldr	r7, [pc, #648]	; (800dbe8 <_dtoa_r+0x640>)
 800d960:	f006 020f 	and.w	r2, r6, #15
 800d964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	ec51 0b18 	vmov	r0, r1, d8
 800d970:	f7f2 fe62 	bl	8000638 <__aeabi_dmul>
 800d974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d978:	1136      	asrs	r6, r6, #4
 800d97a:	2300      	movs	r3, #0
 800d97c:	2502      	movs	r5, #2
 800d97e:	2e00      	cmp	r6, #0
 800d980:	d17e      	bne.n	800da80 <_dtoa_r+0x4d8>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1d0      	bne.n	800d928 <_dtoa_r+0x380>
 800d986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d988:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 8084 	beq.w	800da9a <_dtoa_r+0x4f2>
 800d992:	4b96      	ldr	r3, [pc, #600]	; (800dbec <_dtoa_r+0x644>)
 800d994:	2200      	movs	r2, #0
 800d996:	4640      	mov	r0, r8
 800d998:	4649      	mov	r1, r9
 800d99a:	f7f3 f8bf 	bl	8000b1c <__aeabi_dcmplt>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d07b      	beq.n	800da9a <_dtoa_r+0x4f2>
 800d9a2:	9b04      	ldr	r3, [sp, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d078      	beq.n	800da9a <_dtoa_r+0x4f2>
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	dd39      	ble.n	800da22 <_dtoa_r+0x47a>
 800d9ae:	4b90      	ldr	r3, [pc, #576]	; (800dbf0 <_dtoa_r+0x648>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	f7f2 fe3f 	bl	8000638 <__aeabi_dmul>
 800d9ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9be:	9e01      	ldr	r6, [sp, #4]
 800d9c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800d9c4:	3501      	adds	r5, #1
 800d9c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f7f2 fdca 	bl	8000564 <__aeabi_i2d>
 800d9d0:	4642      	mov	r2, r8
 800d9d2:	464b      	mov	r3, r9
 800d9d4:	f7f2 fe30 	bl	8000638 <__aeabi_dmul>
 800d9d8:	4b86      	ldr	r3, [pc, #536]	; (800dbf4 <_dtoa_r+0x64c>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f7f2 fc76 	bl	80002cc <__adddf3>
 800d9e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	2e00      	cmp	r6, #0
 800d9ec:	d158      	bne.n	800daa0 <_dtoa_r+0x4f8>
 800d9ee:	4b82      	ldr	r3, [pc, #520]	; (800dbf8 <_dtoa_r+0x650>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	4649      	mov	r1, r9
 800d9f6:	f7f2 fc67 	bl	80002c8 <__aeabi_dsub>
 800d9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9fe:	4680      	mov	r8, r0
 800da00:	4689      	mov	r9, r1
 800da02:	f7f3 f8a9 	bl	8000b58 <__aeabi_dcmpgt>
 800da06:	2800      	cmp	r0, #0
 800da08:	f040 8296 	bne.w	800df38 <_dtoa_r+0x990>
 800da0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da10:	4640      	mov	r0, r8
 800da12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da16:	4649      	mov	r1, r9
 800da18:	f7f3 f880 	bl	8000b1c <__aeabi_dcmplt>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f040 8289 	bne.w	800df34 <_dtoa_r+0x98c>
 800da22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800da26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f2c0 814e 	blt.w	800dcca <_dtoa_r+0x722>
 800da2e:	f1bb 0f0e 	cmp.w	fp, #14
 800da32:	f300 814a 	bgt.w	800dcca <_dtoa_r+0x722>
 800da36:	4b6b      	ldr	r3, [pc, #428]	; (800dbe4 <_dtoa_r+0x63c>)
 800da38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	f280 80dc 	bge.w	800dc00 <_dtoa_r+0x658>
 800da48:	9b04      	ldr	r3, [sp, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f300 80d8 	bgt.w	800dc00 <_dtoa_r+0x658>
 800da50:	f040 826f 	bne.w	800df32 <_dtoa_r+0x98a>
 800da54:	4b68      	ldr	r3, [pc, #416]	; (800dbf8 <_dtoa_r+0x650>)
 800da56:	2200      	movs	r2, #0
 800da58:	4640      	mov	r0, r8
 800da5a:	4649      	mov	r1, r9
 800da5c:	f7f2 fdec 	bl	8000638 <__aeabi_dmul>
 800da60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da64:	f7f3 f86e 	bl	8000b44 <__aeabi_dcmpge>
 800da68:	9e04      	ldr	r6, [sp, #16]
 800da6a:	4637      	mov	r7, r6
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f040 8245 	bne.w	800defc <_dtoa_r+0x954>
 800da72:	9d00      	ldr	r5, [sp, #0]
 800da74:	2331      	movs	r3, #49	; 0x31
 800da76:	f805 3b01 	strb.w	r3, [r5], #1
 800da7a:	f10b 0b01 	add.w	fp, fp, #1
 800da7e:	e241      	b.n	800df04 <_dtoa_r+0x95c>
 800da80:	07f2      	lsls	r2, r6, #31
 800da82:	d505      	bpl.n	800da90 <_dtoa_r+0x4e8>
 800da84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da88:	f7f2 fdd6 	bl	8000638 <__aeabi_dmul>
 800da8c:	3501      	adds	r5, #1
 800da8e:	2301      	movs	r3, #1
 800da90:	1076      	asrs	r6, r6, #1
 800da92:	3708      	adds	r7, #8
 800da94:	e773      	b.n	800d97e <_dtoa_r+0x3d6>
 800da96:	2502      	movs	r5, #2
 800da98:	e775      	b.n	800d986 <_dtoa_r+0x3de>
 800da9a:	9e04      	ldr	r6, [sp, #16]
 800da9c:	465f      	mov	r7, fp
 800da9e:	e792      	b.n	800d9c6 <_dtoa_r+0x41e>
 800daa0:	9900      	ldr	r1, [sp, #0]
 800daa2:	4b50      	ldr	r3, [pc, #320]	; (800dbe4 <_dtoa_r+0x63c>)
 800daa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daa8:	4431      	add	r1, r6
 800daaa:	9102      	str	r1, [sp, #8]
 800daac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800daae:	eeb0 9a47 	vmov.f32	s18, s14
 800dab2:	eef0 9a67 	vmov.f32	s19, s15
 800dab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dabe:	2900      	cmp	r1, #0
 800dac0:	d044      	beq.n	800db4c <_dtoa_r+0x5a4>
 800dac2:	494e      	ldr	r1, [pc, #312]	; (800dbfc <_dtoa_r+0x654>)
 800dac4:	2000      	movs	r0, #0
 800dac6:	f7f2 fee1 	bl	800088c <__aeabi_ddiv>
 800daca:	ec53 2b19 	vmov	r2, r3, d9
 800dace:	f7f2 fbfb 	bl	80002c8 <__aeabi_dsub>
 800dad2:	9d00      	ldr	r5, [sp, #0]
 800dad4:	ec41 0b19 	vmov	d9, r0, r1
 800dad8:	4649      	mov	r1, r9
 800dada:	4640      	mov	r0, r8
 800dadc:	f7f3 f85c 	bl	8000b98 <__aeabi_d2iz>
 800dae0:	4606      	mov	r6, r0
 800dae2:	f7f2 fd3f 	bl	8000564 <__aeabi_i2d>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	4640      	mov	r0, r8
 800daec:	4649      	mov	r1, r9
 800daee:	f7f2 fbeb 	bl	80002c8 <__aeabi_dsub>
 800daf2:	3630      	adds	r6, #48	; 0x30
 800daf4:	f805 6b01 	strb.w	r6, [r5], #1
 800daf8:	ec53 2b19 	vmov	r2, r3, d9
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	f7f3 f80c 	bl	8000b1c <__aeabi_dcmplt>
 800db04:	2800      	cmp	r0, #0
 800db06:	d164      	bne.n	800dbd2 <_dtoa_r+0x62a>
 800db08:	4642      	mov	r2, r8
 800db0a:	464b      	mov	r3, r9
 800db0c:	4937      	ldr	r1, [pc, #220]	; (800dbec <_dtoa_r+0x644>)
 800db0e:	2000      	movs	r0, #0
 800db10:	f7f2 fbda 	bl	80002c8 <__aeabi_dsub>
 800db14:	ec53 2b19 	vmov	r2, r3, d9
 800db18:	f7f3 f800 	bl	8000b1c <__aeabi_dcmplt>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	f040 80b6 	bne.w	800dc8e <_dtoa_r+0x6e6>
 800db22:	9b02      	ldr	r3, [sp, #8]
 800db24:	429d      	cmp	r5, r3
 800db26:	f43f af7c 	beq.w	800da22 <_dtoa_r+0x47a>
 800db2a:	4b31      	ldr	r3, [pc, #196]	; (800dbf0 <_dtoa_r+0x648>)
 800db2c:	ec51 0b19 	vmov	r0, r1, d9
 800db30:	2200      	movs	r2, #0
 800db32:	f7f2 fd81 	bl	8000638 <__aeabi_dmul>
 800db36:	4b2e      	ldr	r3, [pc, #184]	; (800dbf0 <_dtoa_r+0x648>)
 800db38:	ec41 0b19 	vmov	d9, r0, r1
 800db3c:	2200      	movs	r2, #0
 800db3e:	4640      	mov	r0, r8
 800db40:	4649      	mov	r1, r9
 800db42:	f7f2 fd79 	bl	8000638 <__aeabi_dmul>
 800db46:	4680      	mov	r8, r0
 800db48:	4689      	mov	r9, r1
 800db4a:	e7c5      	b.n	800dad8 <_dtoa_r+0x530>
 800db4c:	ec51 0b17 	vmov	r0, r1, d7
 800db50:	f7f2 fd72 	bl	8000638 <__aeabi_dmul>
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	9d00      	ldr	r5, [sp, #0]
 800db58:	930f      	str	r3, [sp, #60]	; 0x3c
 800db5a:	ec41 0b19 	vmov	d9, r0, r1
 800db5e:	4649      	mov	r1, r9
 800db60:	4640      	mov	r0, r8
 800db62:	f7f3 f819 	bl	8000b98 <__aeabi_d2iz>
 800db66:	4606      	mov	r6, r0
 800db68:	f7f2 fcfc 	bl	8000564 <__aeabi_i2d>
 800db6c:	3630      	adds	r6, #48	; 0x30
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4640      	mov	r0, r8
 800db74:	4649      	mov	r1, r9
 800db76:	f7f2 fba7 	bl	80002c8 <__aeabi_dsub>
 800db7a:	f805 6b01 	strb.w	r6, [r5], #1
 800db7e:	9b02      	ldr	r3, [sp, #8]
 800db80:	429d      	cmp	r5, r3
 800db82:	4680      	mov	r8, r0
 800db84:	4689      	mov	r9, r1
 800db86:	f04f 0200 	mov.w	r2, #0
 800db8a:	d124      	bne.n	800dbd6 <_dtoa_r+0x62e>
 800db8c:	4b1b      	ldr	r3, [pc, #108]	; (800dbfc <_dtoa_r+0x654>)
 800db8e:	ec51 0b19 	vmov	r0, r1, d9
 800db92:	f7f2 fb9b 	bl	80002cc <__adddf3>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	4640      	mov	r0, r8
 800db9c:	4649      	mov	r1, r9
 800db9e:	f7f2 ffdb 	bl	8000b58 <__aeabi_dcmpgt>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	d173      	bne.n	800dc8e <_dtoa_r+0x6e6>
 800dba6:	ec53 2b19 	vmov	r2, r3, d9
 800dbaa:	4914      	ldr	r1, [pc, #80]	; (800dbfc <_dtoa_r+0x654>)
 800dbac:	2000      	movs	r0, #0
 800dbae:	f7f2 fb8b 	bl	80002c8 <__aeabi_dsub>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	4649      	mov	r1, r9
 800dbba:	f7f2 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f af2f 	beq.w	800da22 <_dtoa_r+0x47a>
 800dbc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbc6:	1e6b      	subs	r3, r5, #1
 800dbc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbce:	2b30      	cmp	r3, #48	; 0x30
 800dbd0:	d0f8      	beq.n	800dbc4 <_dtoa_r+0x61c>
 800dbd2:	46bb      	mov	fp, r7
 800dbd4:	e04a      	b.n	800dc6c <_dtoa_r+0x6c4>
 800dbd6:	4b06      	ldr	r3, [pc, #24]	; (800dbf0 <_dtoa_r+0x648>)
 800dbd8:	f7f2 fd2e 	bl	8000638 <__aeabi_dmul>
 800dbdc:	4680      	mov	r8, r0
 800dbde:	4689      	mov	r9, r1
 800dbe0:	e7bd      	b.n	800db5e <_dtoa_r+0x5b6>
 800dbe2:	bf00      	nop
 800dbe4:	08015060 	.word	0x08015060
 800dbe8:	08015038 	.word	0x08015038
 800dbec:	3ff00000 	.word	0x3ff00000
 800dbf0:	40240000 	.word	0x40240000
 800dbf4:	401c0000 	.word	0x401c0000
 800dbf8:	40140000 	.word	0x40140000
 800dbfc:	3fe00000 	.word	0x3fe00000
 800dc00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc04:	9d00      	ldr	r5, [sp, #0]
 800dc06:	4642      	mov	r2, r8
 800dc08:	464b      	mov	r3, r9
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7f2 fe3d 	bl	800088c <__aeabi_ddiv>
 800dc12:	f7f2 ffc1 	bl	8000b98 <__aeabi_d2iz>
 800dc16:	9001      	str	r0, [sp, #4]
 800dc18:	f7f2 fca4 	bl	8000564 <__aeabi_i2d>
 800dc1c:	4642      	mov	r2, r8
 800dc1e:	464b      	mov	r3, r9
 800dc20:	f7f2 fd0a 	bl	8000638 <__aeabi_dmul>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 fb4c 	bl	80002c8 <__aeabi_dsub>
 800dc30:	9e01      	ldr	r6, [sp, #4]
 800dc32:	9f04      	ldr	r7, [sp, #16]
 800dc34:	3630      	adds	r6, #48	; 0x30
 800dc36:	f805 6b01 	strb.w	r6, [r5], #1
 800dc3a:	9e00      	ldr	r6, [sp, #0]
 800dc3c:	1bae      	subs	r6, r5, r6
 800dc3e:	42b7      	cmp	r7, r6
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	d134      	bne.n	800dcb0 <_dtoa_r+0x708>
 800dc46:	f7f2 fb41 	bl	80002cc <__adddf3>
 800dc4a:	4642      	mov	r2, r8
 800dc4c:	464b      	mov	r3, r9
 800dc4e:	4606      	mov	r6, r0
 800dc50:	460f      	mov	r7, r1
 800dc52:	f7f2 ff81 	bl	8000b58 <__aeabi_dcmpgt>
 800dc56:	b9c8      	cbnz	r0, 800dc8c <_dtoa_r+0x6e4>
 800dc58:	4642      	mov	r2, r8
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	4639      	mov	r1, r7
 800dc60:	f7f2 ff52 	bl	8000b08 <__aeabi_dcmpeq>
 800dc64:	b110      	cbz	r0, 800dc6c <_dtoa_r+0x6c4>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	07db      	lsls	r3, r3, #31
 800dc6a:	d40f      	bmi.n	800dc8c <_dtoa_r+0x6e4>
 800dc6c:	4651      	mov	r1, sl
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f001 fa70 	bl	800f154 <_Bfree>
 800dc74:	2300      	movs	r3, #0
 800dc76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc78:	702b      	strb	r3, [r5, #0]
 800dc7a:	f10b 0301 	add.w	r3, fp, #1
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f43f ace2 	beq.w	800d64c <_dtoa_r+0xa4>
 800dc88:	601d      	str	r5, [r3, #0]
 800dc8a:	e4df      	b.n	800d64c <_dtoa_r+0xa4>
 800dc8c:	465f      	mov	r7, fp
 800dc8e:	462b      	mov	r3, r5
 800dc90:	461d      	mov	r5, r3
 800dc92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc96:	2a39      	cmp	r2, #57	; 0x39
 800dc98:	d106      	bne.n	800dca8 <_dtoa_r+0x700>
 800dc9a:	9a00      	ldr	r2, [sp, #0]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d1f7      	bne.n	800dc90 <_dtoa_r+0x6e8>
 800dca0:	9900      	ldr	r1, [sp, #0]
 800dca2:	2230      	movs	r2, #48	; 0x30
 800dca4:	3701      	adds	r7, #1
 800dca6:	700a      	strb	r2, [r1, #0]
 800dca8:	781a      	ldrb	r2, [r3, #0]
 800dcaa:	3201      	adds	r2, #1
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	e790      	b.n	800dbd2 <_dtoa_r+0x62a>
 800dcb0:	4ba3      	ldr	r3, [pc, #652]	; (800df40 <_dtoa_r+0x998>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f7f2 fcc0 	bl	8000638 <__aeabi_dmul>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2300      	movs	r3, #0
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	460f      	mov	r7, r1
 800dcc0:	f7f2 ff22 	bl	8000b08 <__aeabi_dcmpeq>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d09e      	beq.n	800dc06 <_dtoa_r+0x65e>
 800dcc8:	e7d0      	b.n	800dc6c <_dtoa_r+0x6c4>
 800dcca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dccc:	2a00      	cmp	r2, #0
 800dcce:	f000 80ca 	beq.w	800de66 <_dtoa_r+0x8be>
 800dcd2:	9a07      	ldr	r2, [sp, #28]
 800dcd4:	2a01      	cmp	r2, #1
 800dcd6:	f300 80ad 	bgt.w	800de34 <_dtoa_r+0x88c>
 800dcda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	f000 80a5 	beq.w	800de2c <_dtoa_r+0x884>
 800dce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dce6:	9e08      	ldr	r6, [sp, #32]
 800dce8:	9d05      	ldr	r5, [sp, #20]
 800dcea:	9a05      	ldr	r2, [sp, #20]
 800dcec:	441a      	add	r2, r3
 800dcee:	9205      	str	r2, [sp, #20]
 800dcf0:	9a06      	ldr	r2, [sp, #24]
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	441a      	add	r2, r3
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	9206      	str	r2, [sp, #24]
 800dcfa:	f001 fae1 	bl	800f2c0 <__i2b>
 800dcfe:	4607      	mov	r7, r0
 800dd00:	b165      	cbz	r5, 800dd1c <_dtoa_r+0x774>
 800dd02:	9b06      	ldr	r3, [sp, #24]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	dd09      	ble.n	800dd1c <_dtoa_r+0x774>
 800dd08:	42ab      	cmp	r3, r5
 800dd0a:	9a05      	ldr	r2, [sp, #20]
 800dd0c:	bfa8      	it	ge
 800dd0e:	462b      	movge	r3, r5
 800dd10:	1ad2      	subs	r2, r2, r3
 800dd12:	9205      	str	r2, [sp, #20]
 800dd14:	9a06      	ldr	r2, [sp, #24]
 800dd16:	1aed      	subs	r5, r5, r3
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	9306      	str	r3, [sp, #24]
 800dd1c:	9b08      	ldr	r3, [sp, #32]
 800dd1e:	b1f3      	cbz	r3, 800dd5e <_dtoa_r+0x7b6>
 800dd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 80a3 	beq.w	800de6e <_dtoa_r+0x8c6>
 800dd28:	2e00      	cmp	r6, #0
 800dd2a:	dd10      	ble.n	800dd4e <_dtoa_r+0x7a6>
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	4632      	mov	r2, r6
 800dd30:	4620      	mov	r0, r4
 800dd32:	f001 fb85 	bl	800f440 <__pow5mult>
 800dd36:	4652      	mov	r2, sl
 800dd38:	4601      	mov	r1, r0
 800dd3a:	4607      	mov	r7, r0
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f001 fad5 	bl	800f2ec <__multiply>
 800dd42:	4651      	mov	r1, sl
 800dd44:	4680      	mov	r8, r0
 800dd46:	4620      	mov	r0, r4
 800dd48:	f001 fa04 	bl	800f154 <_Bfree>
 800dd4c:	46c2      	mov	sl, r8
 800dd4e:	9b08      	ldr	r3, [sp, #32]
 800dd50:	1b9a      	subs	r2, r3, r6
 800dd52:	d004      	beq.n	800dd5e <_dtoa_r+0x7b6>
 800dd54:	4651      	mov	r1, sl
 800dd56:	4620      	mov	r0, r4
 800dd58:	f001 fb72 	bl	800f440 <__pow5mult>
 800dd5c:	4682      	mov	sl, r0
 800dd5e:	2101      	movs	r1, #1
 800dd60:	4620      	mov	r0, r4
 800dd62:	f001 faad 	bl	800f2c0 <__i2b>
 800dd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	f340 8081 	ble.w	800de72 <_dtoa_r+0x8ca>
 800dd70:	461a      	mov	r2, r3
 800dd72:	4601      	mov	r1, r0
 800dd74:	4620      	mov	r0, r4
 800dd76:	f001 fb63 	bl	800f440 <__pow5mult>
 800dd7a:	9b07      	ldr	r3, [sp, #28]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	4606      	mov	r6, r0
 800dd80:	dd7a      	ble.n	800de78 <_dtoa_r+0x8d0>
 800dd82:	f04f 0800 	mov.w	r8, #0
 800dd86:	6933      	ldr	r3, [r6, #16]
 800dd88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd8c:	6918      	ldr	r0, [r3, #16]
 800dd8e:	f001 fa49 	bl	800f224 <__hi0bits>
 800dd92:	f1c0 0020 	rsb	r0, r0, #32
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	4418      	add	r0, r3
 800dd9a:	f010 001f 	ands.w	r0, r0, #31
 800dd9e:	f000 8094 	beq.w	800deca <_dtoa_r+0x922>
 800dda2:	f1c0 0320 	rsb	r3, r0, #32
 800dda6:	2b04      	cmp	r3, #4
 800dda8:	f340 8085 	ble.w	800deb6 <_dtoa_r+0x90e>
 800ddac:	9b05      	ldr	r3, [sp, #20]
 800ddae:	f1c0 001c 	rsb	r0, r0, #28
 800ddb2:	4403      	add	r3, r0
 800ddb4:	9305      	str	r3, [sp, #20]
 800ddb6:	9b06      	ldr	r3, [sp, #24]
 800ddb8:	4403      	add	r3, r0
 800ddba:	4405      	add	r5, r0
 800ddbc:	9306      	str	r3, [sp, #24]
 800ddbe:	9b05      	ldr	r3, [sp, #20]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dd05      	ble.n	800ddd0 <_dtoa_r+0x828>
 800ddc4:	4651      	mov	r1, sl
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f001 fb93 	bl	800f4f4 <__lshift>
 800ddce:	4682      	mov	sl, r0
 800ddd0:	9b06      	ldr	r3, [sp, #24]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	dd05      	ble.n	800dde2 <_dtoa_r+0x83a>
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	461a      	mov	r2, r3
 800ddda:	4620      	mov	r0, r4
 800dddc:	f001 fb8a 	bl	800f4f4 <__lshift>
 800dde0:	4606      	mov	r6, r0
 800dde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d072      	beq.n	800dece <_dtoa_r+0x926>
 800dde8:	4631      	mov	r1, r6
 800ddea:	4650      	mov	r0, sl
 800ddec:	f001 fbee 	bl	800f5cc <__mcmp>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	da6c      	bge.n	800dece <_dtoa_r+0x926>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4651      	mov	r1, sl
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f001 f9cc 	bl	800f198 <__multadd>
 800de00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800de06:	4682      	mov	sl, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 81b0 	beq.w	800e16e <_dtoa_r+0xbc6>
 800de0e:	2300      	movs	r3, #0
 800de10:	4639      	mov	r1, r7
 800de12:	220a      	movs	r2, #10
 800de14:	4620      	mov	r0, r4
 800de16:	f001 f9bf 	bl	800f198 <__multadd>
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	4607      	mov	r7, r0
 800de20:	f300 8096 	bgt.w	800df50 <_dtoa_r+0x9a8>
 800de24:	9b07      	ldr	r3, [sp, #28]
 800de26:	2b02      	cmp	r3, #2
 800de28:	dc59      	bgt.n	800dede <_dtoa_r+0x936>
 800de2a:	e091      	b.n	800df50 <_dtoa_r+0x9a8>
 800de2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de32:	e758      	b.n	800dce6 <_dtoa_r+0x73e>
 800de34:	9b04      	ldr	r3, [sp, #16]
 800de36:	1e5e      	subs	r6, r3, #1
 800de38:	9b08      	ldr	r3, [sp, #32]
 800de3a:	42b3      	cmp	r3, r6
 800de3c:	bfbf      	itttt	lt
 800de3e:	9b08      	ldrlt	r3, [sp, #32]
 800de40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800de42:	9608      	strlt	r6, [sp, #32]
 800de44:	1af3      	sublt	r3, r6, r3
 800de46:	bfb4      	ite	lt
 800de48:	18d2      	addlt	r2, r2, r3
 800de4a:	1b9e      	subge	r6, r3, r6
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	bfbc      	itt	lt
 800de50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800de52:	2600      	movlt	r6, #0
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfb7      	itett	lt
 800de58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800de5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800de60:	1a9d      	sublt	r5, r3, r2
 800de62:	2300      	movlt	r3, #0
 800de64:	e741      	b.n	800dcea <_dtoa_r+0x742>
 800de66:	9e08      	ldr	r6, [sp, #32]
 800de68:	9d05      	ldr	r5, [sp, #20]
 800de6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800de6c:	e748      	b.n	800dd00 <_dtoa_r+0x758>
 800de6e:	9a08      	ldr	r2, [sp, #32]
 800de70:	e770      	b.n	800dd54 <_dtoa_r+0x7ac>
 800de72:	9b07      	ldr	r3, [sp, #28]
 800de74:	2b01      	cmp	r3, #1
 800de76:	dc19      	bgt.n	800deac <_dtoa_r+0x904>
 800de78:	9b02      	ldr	r3, [sp, #8]
 800de7a:	b9bb      	cbnz	r3, 800deac <_dtoa_r+0x904>
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de82:	b99b      	cbnz	r3, 800deac <_dtoa_r+0x904>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de8a:	0d1b      	lsrs	r3, r3, #20
 800de8c:	051b      	lsls	r3, r3, #20
 800de8e:	b183      	cbz	r3, 800deb2 <_dtoa_r+0x90a>
 800de90:	9b05      	ldr	r3, [sp, #20]
 800de92:	3301      	adds	r3, #1
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	3301      	adds	r3, #1
 800de9a:	9306      	str	r3, [sp, #24]
 800de9c:	f04f 0801 	mov.w	r8, #1
 800dea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f47f af6f 	bne.w	800dd86 <_dtoa_r+0x7de>
 800dea8:	2001      	movs	r0, #1
 800deaa:	e774      	b.n	800dd96 <_dtoa_r+0x7ee>
 800deac:	f04f 0800 	mov.w	r8, #0
 800deb0:	e7f6      	b.n	800dea0 <_dtoa_r+0x8f8>
 800deb2:	4698      	mov	r8, r3
 800deb4:	e7f4      	b.n	800dea0 <_dtoa_r+0x8f8>
 800deb6:	d082      	beq.n	800ddbe <_dtoa_r+0x816>
 800deb8:	9a05      	ldr	r2, [sp, #20]
 800deba:	331c      	adds	r3, #28
 800debc:	441a      	add	r2, r3
 800debe:	9205      	str	r2, [sp, #20]
 800dec0:	9a06      	ldr	r2, [sp, #24]
 800dec2:	441a      	add	r2, r3
 800dec4:	441d      	add	r5, r3
 800dec6:	9206      	str	r2, [sp, #24]
 800dec8:	e779      	b.n	800ddbe <_dtoa_r+0x816>
 800deca:	4603      	mov	r3, r0
 800decc:	e7f4      	b.n	800deb8 <_dtoa_r+0x910>
 800dece:	9b04      	ldr	r3, [sp, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	dc37      	bgt.n	800df44 <_dtoa_r+0x99c>
 800ded4:	9b07      	ldr	r3, [sp, #28]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	dd34      	ble.n	800df44 <_dtoa_r+0x99c>
 800deda:	9b04      	ldr	r3, [sp, #16]
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	9b01      	ldr	r3, [sp, #4]
 800dee0:	b963      	cbnz	r3, 800defc <_dtoa_r+0x954>
 800dee2:	4631      	mov	r1, r6
 800dee4:	2205      	movs	r2, #5
 800dee6:	4620      	mov	r0, r4
 800dee8:	f001 f956 	bl	800f198 <__multadd>
 800deec:	4601      	mov	r1, r0
 800deee:	4606      	mov	r6, r0
 800def0:	4650      	mov	r0, sl
 800def2:	f001 fb6b 	bl	800f5cc <__mcmp>
 800def6:	2800      	cmp	r0, #0
 800def8:	f73f adbb 	bgt.w	800da72 <_dtoa_r+0x4ca>
 800defc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defe:	9d00      	ldr	r5, [sp, #0]
 800df00:	ea6f 0b03 	mvn.w	fp, r3
 800df04:	f04f 0800 	mov.w	r8, #0
 800df08:	4631      	mov	r1, r6
 800df0a:	4620      	mov	r0, r4
 800df0c:	f001 f922 	bl	800f154 <_Bfree>
 800df10:	2f00      	cmp	r7, #0
 800df12:	f43f aeab 	beq.w	800dc6c <_dtoa_r+0x6c4>
 800df16:	f1b8 0f00 	cmp.w	r8, #0
 800df1a:	d005      	beq.n	800df28 <_dtoa_r+0x980>
 800df1c:	45b8      	cmp	r8, r7
 800df1e:	d003      	beq.n	800df28 <_dtoa_r+0x980>
 800df20:	4641      	mov	r1, r8
 800df22:	4620      	mov	r0, r4
 800df24:	f001 f916 	bl	800f154 <_Bfree>
 800df28:	4639      	mov	r1, r7
 800df2a:	4620      	mov	r0, r4
 800df2c:	f001 f912 	bl	800f154 <_Bfree>
 800df30:	e69c      	b.n	800dc6c <_dtoa_r+0x6c4>
 800df32:	2600      	movs	r6, #0
 800df34:	4637      	mov	r7, r6
 800df36:	e7e1      	b.n	800defc <_dtoa_r+0x954>
 800df38:	46bb      	mov	fp, r7
 800df3a:	4637      	mov	r7, r6
 800df3c:	e599      	b.n	800da72 <_dtoa_r+0x4ca>
 800df3e:	bf00      	nop
 800df40:	40240000 	.word	0x40240000
 800df44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df46:	2b00      	cmp	r3, #0
 800df48:	f000 80c8 	beq.w	800e0dc <_dtoa_r+0xb34>
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	9301      	str	r3, [sp, #4]
 800df50:	2d00      	cmp	r5, #0
 800df52:	dd05      	ble.n	800df60 <_dtoa_r+0x9b8>
 800df54:	4639      	mov	r1, r7
 800df56:	462a      	mov	r2, r5
 800df58:	4620      	mov	r0, r4
 800df5a:	f001 facb 	bl	800f4f4 <__lshift>
 800df5e:	4607      	mov	r7, r0
 800df60:	f1b8 0f00 	cmp.w	r8, #0
 800df64:	d05b      	beq.n	800e01e <_dtoa_r+0xa76>
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4620      	mov	r0, r4
 800df6a:	f001 f8b3 	bl	800f0d4 <_Balloc>
 800df6e:	4605      	mov	r5, r0
 800df70:	b928      	cbnz	r0, 800df7e <_dtoa_r+0x9d6>
 800df72:	4b83      	ldr	r3, [pc, #524]	; (800e180 <_dtoa_r+0xbd8>)
 800df74:	4602      	mov	r2, r0
 800df76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800df7a:	f7ff bb2e 	b.w	800d5da <_dtoa_r+0x32>
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	3202      	adds	r2, #2
 800df82:	0092      	lsls	r2, r2, #2
 800df84:	f107 010c 	add.w	r1, r7, #12
 800df88:	300c      	adds	r0, #12
 800df8a:	f001 fed7 	bl	800fd3c <memcpy>
 800df8e:	2201      	movs	r2, #1
 800df90:	4629      	mov	r1, r5
 800df92:	4620      	mov	r0, r4
 800df94:	f001 faae 	bl	800f4f4 <__lshift>
 800df98:	9b00      	ldr	r3, [sp, #0]
 800df9a:	3301      	adds	r3, #1
 800df9c:	9304      	str	r3, [sp, #16]
 800df9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	9308      	str	r3, [sp, #32]
 800dfa6:	9b02      	ldr	r3, [sp, #8]
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	46b8      	mov	r8, r7
 800dfae:	9306      	str	r3, [sp, #24]
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	9b04      	ldr	r3, [sp, #16]
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	4650      	mov	r0, sl
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	f7ff fa6a 	bl	800d494 <quorem>
 800dfc0:	4641      	mov	r1, r8
 800dfc2:	9002      	str	r0, [sp, #8]
 800dfc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dfc8:	4650      	mov	r0, sl
 800dfca:	f001 faff 	bl	800f5cc <__mcmp>
 800dfce:	463a      	mov	r2, r7
 800dfd0:	9005      	str	r0, [sp, #20]
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f001 fb15 	bl	800f604 <__mdiff>
 800dfda:	68c2      	ldr	r2, [r0, #12]
 800dfdc:	4605      	mov	r5, r0
 800dfde:	bb02      	cbnz	r2, 800e022 <_dtoa_r+0xa7a>
 800dfe0:	4601      	mov	r1, r0
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	f001 faf2 	bl	800f5cc <__mcmp>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	4629      	mov	r1, r5
 800dfec:	4620      	mov	r0, r4
 800dfee:	9209      	str	r2, [sp, #36]	; 0x24
 800dff0:	f001 f8b0 	bl	800f154 <_Bfree>
 800dff4:	9b07      	ldr	r3, [sp, #28]
 800dff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff8:	9d04      	ldr	r5, [sp, #16]
 800dffa:	ea43 0102 	orr.w	r1, r3, r2
 800dffe:	9b06      	ldr	r3, [sp, #24]
 800e000:	4319      	orrs	r1, r3
 800e002:	d110      	bne.n	800e026 <_dtoa_r+0xa7e>
 800e004:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e008:	d029      	beq.n	800e05e <_dtoa_r+0xab6>
 800e00a:	9b05      	ldr	r3, [sp, #20]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dd02      	ble.n	800e016 <_dtoa_r+0xa6e>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	f883 9000 	strb.w	r9, [r3]
 800e01c:	e774      	b.n	800df08 <_dtoa_r+0x960>
 800e01e:	4638      	mov	r0, r7
 800e020:	e7ba      	b.n	800df98 <_dtoa_r+0x9f0>
 800e022:	2201      	movs	r2, #1
 800e024:	e7e1      	b.n	800dfea <_dtoa_r+0xa42>
 800e026:	9b05      	ldr	r3, [sp, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	db04      	blt.n	800e036 <_dtoa_r+0xa8e>
 800e02c:	9907      	ldr	r1, [sp, #28]
 800e02e:	430b      	orrs	r3, r1
 800e030:	9906      	ldr	r1, [sp, #24]
 800e032:	430b      	orrs	r3, r1
 800e034:	d120      	bne.n	800e078 <_dtoa_r+0xad0>
 800e036:	2a00      	cmp	r2, #0
 800e038:	dded      	ble.n	800e016 <_dtoa_r+0xa6e>
 800e03a:	4651      	mov	r1, sl
 800e03c:	2201      	movs	r2, #1
 800e03e:	4620      	mov	r0, r4
 800e040:	f001 fa58 	bl	800f4f4 <__lshift>
 800e044:	4631      	mov	r1, r6
 800e046:	4682      	mov	sl, r0
 800e048:	f001 fac0 	bl	800f5cc <__mcmp>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	dc03      	bgt.n	800e058 <_dtoa_r+0xab0>
 800e050:	d1e1      	bne.n	800e016 <_dtoa_r+0xa6e>
 800e052:	f019 0f01 	tst.w	r9, #1
 800e056:	d0de      	beq.n	800e016 <_dtoa_r+0xa6e>
 800e058:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e05c:	d1d8      	bne.n	800e010 <_dtoa_r+0xa68>
 800e05e:	9a01      	ldr	r2, [sp, #4]
 800e060:	2339      	movs	r3, #57	; 0x39
 800e062:	7013      	strb	r3, [r2, #0]
 800e064:	462b      	mov	r3, r5
 800e066:	461d      	mov	r5, r3
 800e068:	3b01      	subs	r3, #1
 800e06a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e06e:	2a39      	cmp	r2, #57	; 0x39
 800e070:	d06c      	beq.n	800e14c <_dtoa_r+0xba4>
 800e072:	3201      	adds	r2, #1
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	e747      	b.n	800df08 <_dtoa_r+0x960>
 800e078:	2a00      	cmp	r2, #0
 800e07a:	dd07      	ble.n	800e08c <_dtoa_r+0xae4>
 800e07c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e080:	d0ed      	beq.n	800e05e <_dtoa_r+0xab6>
 800e082:	9a01      	ldr	r2, [sp, #4]
 800e084:	f109 0301 	add.w	r3, r9, #1
 800e088:	7013      	strb	r3, [r2, #0]
 800e08a:	e73d      	b.n	800df08 <_dtoa_r+0x960>
 800e08c:	9b04      	ldr	r3, [sp, #16]
 800e08e:	9a08      	ldr	r2, [sp, #32]
 800e090:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e094:	4293      	cmp	r3, r2
 800e096:	d043      	beq.n	800e120 <_dtoa_r+0xb78>
 800e098:	4651      	mov	r1, sl
 800e09a:	2300      	movs	r3, #0
 800e09c:	220a      	movs	r2, #10
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 f87a 	bl	800f198 <__multadd>
 800e0a4:	45b8      	cmp	r8, r7
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	f04f 0300 	mov.w	r3, #0
 800e0ac:	f04f 020a 	mov.w	r2, #10
 800e0b0:	4641      	mov	r1, r8
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	d107      	bne.n	800e0c6 <_dtoa_r+0xb1e>
 800e0b6:	f001 f86f 	bl	800f198 <__multadd>
 800e0ba:	4680      	mov	r8, r0
 800e0bc:	4607      	mov	r7, r0
 800e0be:	9b04      	ldr	r3, [sp, #16]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	e775      	b.n	800dfb2 <_dtoa_r+0xa0a>
 800e0c6:	f001 f867 	bl	800f198 <__multadd>
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	4680      	mov	r8, r0
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	220a      	movs	r2, #10
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f001 f860 	bl	800f198 <__multadd>
 800e0d8:	4607      	mov	r7, r0
 800e0da:	e7f0      	b.n	800e0be <_dtoa_r+0xb16>
 800e0dc:	9b04      	ldr	r3, [sp, #16]
 800e0de:	9301      	str	r3, [sp, #4]
 800e0e0:	9d00      	ldr	r5, [sp, #0]
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	4650      	mov	r0, sl
 800e0e6:	f7ff f9d5 	bl	800d494 <quorem>
 800e0ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e0ee:	9b00      	ldr	r3, [sp, #0]
 800e0f0:	f805 9b01 	strb.w	r9, [r5], #1
 800e0f4:	1aea      	subs	r2, r5, r3
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	dd07      	ble.n	800e10c <_dtoa_r+0xb64>
 800e0fc:	4651      	mov	r1, sl
 800e0fe:	2300      	movs	r3, #0
 800e100:	220a      	movs	r2, #10
 800e102:	4620      	mov	r0, r4
 800e104:	f001 f848 	bl	800f198 <__multadd>
 800e108:	4682      	mov	sl, r0
 800e10a:	e7ea      	b.n	800e0e2 <_dtoa_r+0xb3a>
 800e10c:	9b01      	ldr	r3, [sp, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	bfc8      	it	gt
 800e112:	461d      	movgt	r5, r3
 800e114:	9b00      	ldr	r3, [sp, #0]
 800e116:	bfd8      	it	le
 800e118:	2501      	movle	r5, #1
 800e11a:	441d      	add	r5, r3
 800e11c:	f04f 0800 	mov.w	r8, #0
 800e120:	4651      	mov	r1, sl
 800e122:	2201      	movs	r2, #1
 800e124:	4620      	mov	r0, r4
 800e126:	f001 f9e5 	bl	800f4f4 <__lshift>
 800e12a:	4631      	mov	r1, r6
 800e12c:	4682      	mov	sl, r0
 800e12e:	f001 fa4d 	bl	800f5cc <__mcmp>
 800e132:	2800      	cmp	r0, #0
 800e134:	dc96      	bgt.n	800e064 <_dtoa_r+0xabc>
 800e136:	d102      	bne.n	800e13e <_dtoa_r+0xb96>
 800e138:	f019 0f01 	tst.w	r9, #1
 800e13c:	d192      	bne.n	800e064 <_dtoa_r+0xabc>
 800e13e:	462b      	mov	r3, r5
 800e140:	461d      	mov	r5, r3
 800e142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e146:	2a30      	cmp	r2, #48	; 0x30
 800e148:	d0fa      	beq.n	800e140 <_dtoa_r+0xb98>
 800e14a:	e6dd      	b.n	800df08 <_dtoa_r+0x960>
 800e14c:	9a00      	ldr	r2, [sp, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d189      	bne.n	800e066 <_dtoa_r+0xabe>
 800e152:	f10b 0b01 	add.w	fp, fp, #1
 800e156:	2331      	movs	r3, #49	; 0x31
 800e158:	e796      	b.n	800e088 <_dtoa_r+0xae0>
 800e15a:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <_dtoa_r+0xbdc>)
 800e15c:	f7ff ba99 	b.w	800d692 <_dtoa_r+0xea>
 800e160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f aa6d 	bne.w	800d642 <_dtoa_r+0x9a>
 800e168:	4b07      	ldr	r3, [pc, #28]	; (800e188 <_dtoa_r+0xbe0>)
 800e16a:	f7ff ba92 	b.w	800d692 <_dtoa_r+0xea>
 800e16e:	9b01      	ldr	r3, [sp, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	dcb5      	bgt.n	800e0e0 <_dtoa_r+0xb38>
 800e174:	9b07      	ldr	r3, [sp, #28]
 800e176:	2b02      	cmp	r3, #2
 800e178:	f73f aeb1 	bgt.w	800dede <_dtoa_r+0x936>
 800e17c:	e7b0      	b.n	800e0e0 <_dtoa_r+0xb38>
 800e17e:	bf00      	nop
 800e180:	08014f9e 	.word	0x08014f9e
 800e184:	08014fd6 	.word	0x08014fd6
 800e188:	08014f22 	.word	0x08014f22

0800e18c <_free_r>:
 800e18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e18e:	2900      	cmp	r1, #0
 800e190:	d044      	beq.n	800e21c <_free_r+0x90>
 800e192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e196:	9001      	str	r0, [sp, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f1a1 0404 	sub.w	r4, r1, #4
 800e19e:	bfb8      	it	lt
 800e1a0:	18e4      	addlt	r4, r4, r3
 800e1a2:	f000 ff8b 	bl	800f0bc <__malloc_lock>
 800e1a6:	4a1e      	ldr	r2, [pc, #120]	; (800e220 <_free_r+0x94>)
 800e1a8:	9801      	ldr	r0, [sp, #4]
 800e1aa:	6813      	ldr	r3, [r2, #0]
 800e1ac:	b933      	cbnz	r3, 800e1bc <_free_r+0x30>
 800e1ae:	6063      	str	r3, [r4, #4]
 800e1b0:	6014      	str	r4, [r2, #0]
 800e1b2:	b003      	add	sp, #12
 800e1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1b8:	f000 bf86 	b.w	800f0c8 <__malloc_unlock>
 800e1bc:	42a3      	cmp	r3, r4
 800e1be:	d908      	bls.n	800e1d2 <_free_r+0x46>
 800e1c0:	6825      	ldr	r5, [r4, #0]
 800e1c2:	1961      	adds	r1, r4, r5
 800e1c4:	428b      	cmp	r3, r1
 800e1c6:	bf01      	itttt	eq
 800e1c8:	6819      	ldreq	r1, [r3, #0]
 800e1ca:	685b      	ldreq	r3, [r3, #4]
 800e1cc:	1949      	addeq	r1, r1, r5
 800e1ce:	6021      	streq	r1, [r4, #0]
 800e1d0:	e7ed      	b.n	800e1ae <_free_r+0x22>
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	b10b      	cbz	r3, 800e1dc <_free_r+0x50>
 800e1d8:	42a3      	cmp	r3, r4
 800e1da:	d9fa      	bls.n	800e1d2 <_free_r+0x46>
 800e1dc:	6811      	ldr	r1, [r2, #0]
 800e1de:	1855      	adds	r5, r2, r1
 800e1e0:	42a5      	cmp	r5, r4
 800e1e2:	d10b      	bne.n	800e1fc <_free_r+0x70>
 800e1e4:	6824      	ldr	r4, [r4, #0]
 800e1e6:	4421      	add	r1, r4
 800e1e8:	1854      	adds	r4, r2, r1
 800e1ea:	42a3      	cmp	r3, r4
 800e1ec:	6011      	str	r1, [r2, #0]
 800e1ee:	d1e0      	bne.n	800e1b2 <_free_r+0x26>
 800e1f0:	681c      	ldr	r4, [r3, #0]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	6053      	str	r3, [r2, #4]
 800e1f6:	440c      	add	r4, r1
 800e1f8:	6014      	str	r4, [r2, #0]
 800e1fa:	e7da      	b.n	800e1b2 <_free_r+0x26>
 800e1fc:	d902      	bls.n	800e204 <_free_r+0x78>
 800e1fe:	230c      	movs	r3, #12
 800e200:	6003      	str	r3, [r0, #0]
 800e202:	e7d6      	b.n	800e1b2 <_free_r+0x26>
 800e204:	6825      	ldr	r5, [r4, #0]
 800e206:	1961      	adds	r1, r4, r5
 800e208:	428b      	cmp	r3, r1
 800e20a:	bf04      	itt	eq
 800e20c:	6819      	ldreq	r1, [r3, #0]
 800e20e:	685b      	ldreq	r3, [r3, #4]
 800e210:	6063      	str	r3, [r4, #4]
 800e212:	bf04      	itt	eq
 800e214:	1949      	addeq	r1, r1, r5
 800e216:	6021      	streq	r1, [r4, #0]
 800e218:	6054      	str	r4, [r2, #4]
 800e21a:	e7ca      	b.n	800e1b2 <_free_r+0x26>
 800e21c:	b003      	add	sp, #12
 800e21e:	bd30      	pop	{r4, r5, pc}
 800e220:	20009e40 	.word	0x20009e40

0800e224 <__ssputs_r>:
 800e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e228:	688e      	ldr	r6, [r1, #8]
 800e22a:	461f      	mov	r7, r3
 800e22c:	42be      	cmp	r6, r7
 800e22e:	680b      	ldr	r3, [r1, #0]
 800e230:	4682      	mov	sl, r0
 800e232:	460c      	mov	r4, r1
 800e234:	4690      	mov	r8, r2
 800e236:	d82c      	bhi.n	800e292 <__ssputs_r+0x6e>
 800e238:	898a      	ldrh	r2, [r1, #12]
 800e23a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e23e:	d026      	beq.n	800e28e <__ssputs_r+0x6a>
 800e240:	6965      	ldr	r5, [r4, #20]
 800e242:	6909      	ldr	r1, [r1, #16]
 800e244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e248:	eba3 0901 	sub.w	r9, r3, r1
 800e24c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e250:	1c7b      	adds	r3, r7, #1
 800e252:	444b      	add	r3, r9
 800e254:	106d      	asrs	r5, r5, #1
 800e256:	429d      	cmp	r5, r3
 800e258:	bf38      	it	cc
 800e25a:	461d      	movcc	r5, r3
 800e25c:	0553      	lsls	r3, r2, #21
 800e25e:	d527      	bpl.n	800e2b0 <__ssputs_r+0x8c>
 800e260:	4629      	mov	r1, r5
 800e262:	f000 fc75 	bl	800eb50 <_malloc_r>
 800e266:	4606      	mov	r6, r0
 800e268:	b360      	cbz	r0, 800e2c4 <__ssputs_r+0xa0>
 800e26a:	6921      	ldr	r1, [r4, #16]
 800e26c:	464a      	mov	r2, r9
 800e26e:	f001 fd65 	bl	800fd3c <memcpy>
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e27c:	81a3      	strh	r3, [r4, #12]
 800e27e:	6126      	str	r6, [r4, #16]
 800e280:	6165      	str	r5, [r4, #20]
 800e282:	444e      	add	r6, r9
 800e284:	eba5 0509 	sub.w	r5, r5, r9
 800e288:	6026      	str	r6, [r4, #0]
 800e28a:	60a5      	str	r5, [r4, #8]
 800e28c:	463e      	mov	r6, r7
 800e28e:	42be      	cmp	r6, r7
 800e290:	d900      	bls.n	800e294 <__ssputs_r+0x70>
 800e292:	463e      	mov	r6, r7
 800e294:	6820      	ldr	r0, [r4, #0]
 800e296:	4632      	mov	r2, r6
 800e298:	4641      	mov	r1, r8
 800e29a:	f001 fd03 	bl	800fca4 <memmove>
 800e29e:	68a3      	ldr	r3, [r4, #8]
 800e2a0:	1b9b      	subs	r3, r3, r6
 800e2a2:	60a3      	str	r3, [r4, #8]
 800e2a4:	6823      	ldr	r3, [r4, #0]
 800e2a6:	4433      	add	r3, r6
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	f001 fad7 	bl	800f864 <_realloc_r>
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d1e0      	bne.n	800e27e <__ssputs_r+0x5a>
 800e2bc:	6921      	ldr	r1, [r4, #16]
 800e2be:	4650      	mov	r0, sl
 800e2c0:	f7ff ff64 	bl	800e18c <_free_r>
 800e2c4:	230c      	movs	r3, #12
 800e2c6:	f8ca 3000 	str.w	r3, [sl]
 800e2ca:	89a3      	ldrh	r3, [r4, #12]
 800e2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2d6:	e7e9      	b.n	800e2ac <__ssputs_r+0x88>

0800e2d8 <_svfiprintf_r>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	4698      	mov	r8, r3
 800e2de:	898b      	ldrh	r3, [r1, #12]
 800e2e0:	061b      	lsls	r3, r3, #24
 800e2e2:	b09d      	sub	sp, #116	; 0x74
 800e2e4:	4607      	mov	r7, r0
 800e2e6:	460d      	mov	r5, r1
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	d50e      	bpl.n	800e30a <_svfiprintf_r+0x32>
 800e2ec:	690b      	ldr	r3, [r1, #16]
 800e2ee:	b963      	cbnz	r3, 800e30a <_svfiprintf_r+0x32>
 800e2f0:	2140      	movs	r1, #64	; 0x40
 800e2f2:	f000 fc2d 	bl	800eb50 <_malloc_r>
 800e2f6:	6028      	str	r0, [r5, #0]
 800e2f8:	6128      	str	r0, [r5, #16]
 800e2fa:	b920      	cbnz	r0, 800e306 <_svfiprintf_r+0x2e>
 800e2fc:	230c      	movs	r3, #12
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e304:	e0d0      	b.n	800e4a8 <_svfiprintf_r+0x1d0>
 800e306:	2340      	movs	r3, #64	; 0x40
 800e308:	616b      	str	r3, [r5, #20]
 800e30a:	2300      	movs	r3, #0
 800e30c:	9309      	str	r3, [sp, #36]	; 0x24
 800e30e:	2320      	movs	r3, #32
 800e310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e314:	f8cd 800c 	str.w	r8, [sp, #12]
 800e318:	2330      	movs	r3, #48	; 0x30
 800e31a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4c0 <_svfiprintf_r+0x1e8>
 800e31e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e322:	f04f 0901 	mov.w	r9, #1
 800e326:	4623      	mov	r3, r4
 800e328:	469a      	mov	sl, r3
 800e32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e32e:	b10a      	cbz	r2, 800e334 <_svfiprintf_r+0x5c>
 800e330:	2a25      	cmp	r2, #37	; 0x25
 800e332:	d1f9      	bne.n	800e328 <_svfiprintf_r+0x50>
 800e334:	ebba 0b04 	subs.w	fp, sl, r4
 800e338:	d00b      	beq.n	800e352 <_svfiprintf_r+0x7a>
 800e33a:	465b      	mov	r3, fp
 800e33c:	4622      	mov	r2, r4
 800e33e:	4629      	mov	r1, r5
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff ff6f 	bl	800e224 <__ssputs_r>
 800e346:	3001      	adds	r0, #1
 800e348:	f000 80a9 	beq.w	800e49e <_svfiprintf_r+0x1c6>
 800e34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e34e:	445a      	add	r2, fp
 800e350:	9209      	str	r2, [sp, #36]	; 0x24
 800e352:	f89a 3000 	ldrb.w	r3, [sl]
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80a1 	beq.w	800e49e <_svfiprintf_r+0x1c6>
 800e35c:	2300      	movs	r3, #0
 800e35e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e366:	f10a 0a01 	add.w	sl, sl, #1
 800e36a:	9304      	str	r3, [sp, #16]
 800e36c:	9307      	str	r3, [sp, #28]
 800e36e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e372:	931a      	str	r3, [sp, #104]	; 0x68
 800e374:	4654      	mov	r4, sl
 800e376:	2205      	movs	r2, #5
 800e378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e37c:	4850      	ldr	r0, [pc, #320]	; (800e4c0 <_svfiprintf_r+0x1e8>)
 800e37e:	f7f1 ff47 	bl	8000210 <memchr>
 800e382:	9a04      	ldr	r2, [sp, #16]
 800e384:	b9d8      	cbnz	r0, 800e3be <_svfiprintf_r+0xe6>
 800e386:	06d0      	lsls	r0, r2, #27
 800e388:	bf44      	itt	mi
 800e38a:	2320      	movmi	r3, #32
 800e38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e390:	0711      	lsls	r1, r2, #28
 800e392:	bf44      	itt	mi
 800e394:	232b      	movmi	r3, #43	; 0x2b
 800e396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e39a:	f89a 3000 	ldrb.w	r3, [sl]
 800e39e:	2b2a      	cmp	r3, #42	; 0x2a
 800e3a0:	d015      	beq.n	800e3ce <_svfiprintf_r+0xf6>
 800e3a2:	9a07      	ldr	r2, [sp, #28]
 800e3a4:	4654      	mov	r4, sl
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	f04f 0c0a 	mov.w	ip, #10
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3b2:	3b30      	subs	r3, #48	; 0x30
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	d94d      	bls.n	800e454 <_svfiprintf_r+0x17c>
 800e3b8:	b1b0      	cbz	r0, 800e3e8 <_svfiprintf_r+0x110>
 800e3ba:	9207      	str	r2, [sp, #28]
 800e3bc:	e014      	b.n	800e3e8 <_svfiprintf_r+0x110>
 800e3be:	eba0 0308 	sub.w	r3, r0, r8
 800e3c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	46a2      	mov	sl, r4
 800e3cc:	e7d2      	b.n	800e374 <_svfiprintf_r+0x9c>
 800e3ce:	9b03      	ldr	r3, [sp, #12]
 800e3d0:	1d19      	adds	r1, r3, #4
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	9103      	str	r1, [sp, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	bfbb      	ittet	lt
 800e3da:	425b      	neglt	r3, r3
 800e3dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e3e0:	9307      	strge	r3, [sp, #28]
 800e3e2:	9307      	strlt	r3, [sp, #28]
 800e3e4:	bfb8      	it	lt
 800e3e6:	9204      	strlt	r2, [sp, #16]
 800e3e8:	7823      	ldrb	r3, [r4, #0]
 800e3ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ec:	d10c      	bne.n	800e408 <_svfiprintf_r+0x130>
 800e3ee:	7863      	ldrb	r3, [r4, #1]
 800e3f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3f2:	d134      	bne.n	800e45e <_svfiprintf_r+0x186>
 800e3f4:	9b03      	ldr	r3, [sp, #12]
 800e3f6:	1d1a      	adds	r2, r3, #4
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	9203      	str	r2, [sp, #12]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	bfb8      	it	lt
 800e400:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e404:	3402      	adds	r4, #2
 800e406:	9305      	str	r3, [sp, #20]
 800e408:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4d0 <_svfiprintf_r+0x1f8>
 800e40c:	7821      	ldrb	r1, [r4, #0]
 800e40e:	2203      	movs	r2, #3
 800e410:	4650      	mov	r0, sl
 800e412:	f7f1 fefd 	bl	8000210 <memchr>
 800e416:	b138      	cbz	r0, 800e428 <_svfiprintf_r+0x150>
 800e418:	9b04      	ldr	r3, [sp, #16]
 800e41a:	eba0 000a 	sub.w	r0, r0, sl
 800e41e:	2240      	movs	r2, #64	; 0x40
 800e420:	4082      	lsls	r2, r0
 800e422:	4313      	orrs	r3, r2
 800e424:	3401      	adds	r4, #1
 800e426:	9304      	str	r3, [sp, #16]
 800e428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42c:	4825      	ldr	r0, [pc, #148]	; (800e4c4 <_svfiprintf_r+0x1ec>)
 800e42e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e432:	2206      	movs	r2, #6
 800e434:	f7f1 feec 	bl	8000210 <memchr>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d038      	beq.n	800e4ae <_svfiprintf_r+0x1d6>
 800e43c:	4b22      	ldr	r3, [pc, #136]	; (800e4c8 <_svfiprintf_r+0x1f0>)
 800e43e:	bb1b      	cbnz	r3, 800e488 <_svfiprintf_r+0x1b0>
 800e440:	9b03      	ldr	r3, [sp, #12]
 800e442:	3307      	adds	r3, #7
 800e444:	f023 0307 	bic.w	r3, r3, #7
 800e448:	3308      	adds	r3, #8
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e44e:	4433      	add	r3, r6
 800e450:	9309      	str	r3, [sp, #36]	; 0x24
 800e452:	e768      	b.n	800e326 <_svfiprintf_r+0x4e>
 800e454:	fb0c 3202 	mla	r2, ip, r2, r3
 800e458:	460c      	mov	r4, r1
 800e45a:	2001      	movs	r0, #1
 800e45c:	e7a6      	b.n	800e3ac <_svfiprintf_r+0xd4>
 800e45e:	2300      	movs	r3, #0
 800e460:	3401      	adds	r4, #1
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	4619      	mov	r1, r3
 800e466:	f04f 0c0a 	mov.w	ip, #10
 800e46a:	4620      	mov	r0, r4
 800e46c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e470:	3a30      	subs	r2, #48	; 0x30
 800e472:	2a09      	cmp	r2, #9
 800e474:	d903      	bls.n	800e47e <_svfiprintf_r+0x1a6>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0c6      	beq.n	800e408 <_svfiprintf_r+0x130>
 800e47a:	9105      	str	r1, [sp, #20]
 800e47c:	e7c4      	b.n	800e408 <_svfiprintf_r+0x130>
 800e47e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e482:	4604      	mov	r4, r0
 800e484:	2301      	movs	r3, #1
 800e486:	e7f0      	b.n	800e46a <_svfiprintf_r+0x192>
 800e488:	ab03      	add	r3, sp, #12
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	462a      	mov	r2, r5
 800e48e:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <_svfiprintf_r+0x1f4>)
 800e490:	a904      	add	r1, sp, #16
 800e492:	4638      	mov	r0, r7
 800e494:	f7fe f9c6 	bl	800c824 <_printf_float>
 800e498:	1c42      	adds	r2, r0, #1
 800e49a:	4606      	mov	r6, r0
 800e49c:	d1d6      	bne.n	800e44c <_svfiprintf_r+0x174>
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	065b      	lsls	r3, r3, #25
 800e4a2:	f53f af2d 	bmi.w	800e300 <_svfiprintf_r+0x28>
 800e4a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4a8:	b01d      	add	sp, #116	; 0x74
 800e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ae:	ab03      	add	r3, sp, #12
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <_svfiprintf_r+0x1f4>)
 800e4b6:	a904      	add	r1, sp, #16
 800e4b8:	4638      	mov	r0, r7
 800e4ba:	f7fe fc57 	bl	800cd6c <_printf_i>
 800e4be:	e7eb      	b.n	800e498 <_svfiprintf_r+0x1c0>
 800e4c0:	08014faf 	.word	0x08014faf
 800e4c4:	08014fb9 	.word	0x08014fb9
 800e4c8:	0800c825 	.word	0x0800c825
 800e4cc:	0800e225 	.word	0x0800e225
 800e4d0:	08014fb5 	.word	0x08014fb5

0800e4d4 <_sungetc_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	1c4b      	adds	r3, r1, #1
 800e4d8:	4614      	mov	r4, r2
 800e4da:	d103      	bne.n	800e4e4 <_sungetc_r+0x10>
 800e4dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
 800e4e4:	8993      	ldrh	r3, [r2, #12]
 800e4e6:	f023 0320 	bic.w	r3, r3, #32
 800e4ea:	8193      	strh	r3, [r2, #12]
 800e4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4ee:	6852      	ldr	r2, [r2, #4]
 800e4f0:	b2cd      	uxtb	r5, r1
 800e4f2:	b18b      	cbz	r3, 800e518 <_sungetc_r+0x44>
 800e4f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	dd08      	ble.n	800e50c <_sungetc_r+0x38>
 800e4fa:	6823      	ldr	r3, [r4, #0]
 800e4fc:	1e5a      	subs	r2, r3, #1
 800e4fe:	6022      	str	r2, [r4, #0]
 800e500:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e504:	6863      	ldr	r3, [r4, #4]
 800e506:	3301      	adds	r3, #1
 800e508:	6063      	str	r3, [r4, #4]
 800e50a:	e7e9      	b.n	800e4e0 <_sungetc_r+0xc>
 800e50c:	4621      	mov	r1, r4
 800e50e:	f001 f96f 	bl	800f7f0 <__submore>
 800e512:	2800      	cmp	r0, #0
 800e514:	d0f1      	beq.n	800e4fa <_sungetc_r+0x26>
 800e516:	e7e1      	b.n	800e4dc <_sungetc_r+0x8>
 800e518:	6921      	ldr	r1, [r4, #16]
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	b151      	cbz	r1, 800e534 <_sungetc_r+0x60>
 800e51e:	4299      	cmp	r1, r3
 800e520:	d208      	bcs.n	800e534 <_sungetc_r+0x60>
 800e522:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e526:	42a9      	cmp	r1, r5
 800e528:	d104      	bne.n	800e534 <_sungetc_r+0x60>
 800e52a:	3b01      	subs	r3, #1
 800e52c:	3201      	adds	r2, #1
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	6062      	str	r2, [r4, #4]
 800e532:	e7d5      	b.n	800e4e0 <_sungetc_r+0xc>
 800e534:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e53c:	6363      	str	r3, [r4, #52]	; 0x34
 800e53e:	2303      	movs	r3, #3
 800e540:	63a3      	str	r3, [r4, #56]	; 0x38
 800e542:	4623      	mov	r3, r4
 800e544:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	2301      	movs	r3, #1
 800e54c:	e7dc      	b.n	800e508 <_sungetc_r+0x34>

0800e54e <__ssrefill_r>:
 800e54e:	b510      	push	{r4, lr}
 800e550:	460c      	mov	r4, r1
 800e552:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e554:	b169      	cbz	r1, 800e572 <__ssrefill_r+0x24>
 800e556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e55a:	4299      	cmp	r1, r3
 800e55c:	d001      	beq.n	800e562 <__ssrefill_r+0x14>
 800e55e:	f7ff fe15 	bl	800e18c <_free_r>
 800e562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e564:	6063      	str	r3, [r4, #4]
 800e566:	2000      	movs	r0, #0
 800e568:	6360      	str	r0, [r4, #52]	; 0x34
 800e56a:	b113      	cbz	r3, 800e572 <__ssrefill_r+0x24>
 800e56c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e56e:	6023      	str	r3, [r4, #0]
 800e570:	bd10      	pop	{r4, pc}
 800e572:	6923      	ldr	r3, [r4, #16]
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	2300      	movs	r3, #0
 800e578:	6063      	str	r3, [r4, #4]
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	f043 0320 	orr.w	r3, r3, #32
 800e580:	81a3      	strh	r3, [r4, #12]
 800e582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e586:	e7f3      	b.n	800e570 <__ssrefill_r+0x22>

0800e588 <__ssvfiscanf_r>:
 800e588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e58c:	460c      	mov	r4, r1
 800e58e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e592:	2100      	movs	r1, #0
 800e594:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e598:	49a6      	ldr	r1, [pc, #664]	; (800e834 <__ssvfiscanf_r+0x2ac>)
 800e59a:	91a0      	str	r1, [sp, #640]	; 0x280
 800e59c:	f10d 0804 	add.w	r8, sp, #4
 800e5a0:	49a5      	ldr	r1, [pc, #660]	; (800e838 <__ssvfiscanf_r+0x2b0>)
 800e5a2:	4fa6      	ldr	r7, [pc, #664]	; (800e83c <__ssvfiscanf_r+0x2b4>)
 800e5a4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e840 <__ssvfiscanf_r+0x2b8>
 800e5a8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	91a1      	str	r1, [sp, #644]	; 0x284
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	7813      	ldrb	r3, [r2, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 815a 	beq.w	800e86e <__ssvfiscanf_r+0x2e6>
 800e5ba:	5cf9      	ldrb	r1, [r7, r3]
 800e5bc:	f011 0108 	ands.w	r1, r1, #8
 800e5c0:	f102 0501 	add.w	r5, r2, #1
 800e5c4:	d019      	beq.n	800e5fa <__ssvfiscanf_r+0x72>
 800e5c6:	6863      	ldr	r3, [r4, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dd0f      	ble.n	800e5ec <__ssvfiscanf_r+0x64>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	5cba      	ldrb	r2, [r7, r2]
 800e5d2:	0712      	lsls	r2, r2, #28
 800e5d4:	d401      	bmi.n	800e5da <__ssvfiscanf_r+0x52>
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	e7eb      	b.n	800e5b2 <__ssvfiscanf_r+0x2a>
 800e5da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5dc:	3201      	adds	r2, #1
 800e5de:	9245      	str	r2, [sp, #276]	; 0x114
 800e5e0:	6862      	ldr	r2, [r4, #4]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	3a01      	subs	r2, #1
 800e5e6:	6062      	str	r2, [r4, #4]
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	e7ec      	b.n	800e5c6 <__ssvfiscanf_r+0x3e>
 800e5ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4798      	blx	r3
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d0e9      	beq.n	800e5cc <__ssvfiscanf_r+0x44>
 800e5f8:	e7ed      	b.n	800e5d6 <__ssvfiscanf_r+0x4e>
 800e5fa:	2b25      	cmp	r3, #37	; 0x25
 800e5fc:	d012      	beq.n	800e624 <__ssvfiscanf_r+0x9c>
 800e5fe:	469a      	mov	sl, r3
 800e600:	6863      	ldr	r3, [r4, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f340 8091 	ble.w	800e72a <__ssvfiscanf_r+0x1a2>
 800e608:	6822      	ldr	r2, [r4, #0]
 800e60a:	7813      	ldrb	r3, [r2, #0]
 800e60c:	4553      	cmp	r3, sl
 800e60e:	f040 812e 	bne.w	800e86e <__ssvfiscanf_r+0x2e6>
 800e612:	6863      	ldr	r3, [r4, #4]
 800e614:	3b01      	subs	r3, #1
 800e616:	6063      	str	r3, [r4, #4]
 800e618:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e61a:	3201      	adds	r2, #1
 800e61c:	3301      	adds	r3, #1
 800e61e:	6022      	str	r2, [r4, #0]
 800e620:	9345      	str	r3, [sp, #276]	; 0x114
 800e622:	e7d8      	b.n	800e5d6 <__ssvfiscanf_r+0x4e>
 800e624:	9141      	str	r1, [sp, #260]	; 0x104
 800e626:	9143      	str	r1, [sp, #268]	; 0x10c
 800e628:	7853      	ldrb	r3, [r2, #1]
 800e62a:	2b2a      	cmp	r3, #42	; 0x2a
 800e62c:	bf02      	ittt	eq
 800e62e:	2310      	moveq	r3, #16
 800e630:	1c95      	addeq	r5, r2, #2
 800e632:	9341      	streq	r3, [sp, #260]	; 0x104
 800e634:	220a      	movs	r2, #10
 800e636:	46aa      	mov	sl, r5
 800e638:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e63c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e640:	2b09      	cmp	r3, #9
 800e642:	d91c      	bls.n	800e67e <__ssvfiscanf_r+0xf6>
 800e644:	487e      	ldr	r0, [pc, #504]	; (800e840 <__ssvfiscanf_r+0x2b8>)
 800e646:	2203      	movs	r2, #3
 800e648:	f7f1 fde2 	bl	8000210 <memchr>
 800e64c:	b138      	cbz	r0, 800e65e <__ssvfiscanf_r+0xd6>
 800e64e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e650:	eba0 0009 	sub.w	r0, r0, r9
 800e654:	2301      	movs	r3, #1
 800e656:	4083      	lsls	r3, r0
 800e658:	4313      	orrs	r3, r2
 800e65a:	9341      	str	r3, [sp, #260]	; 0x104
 800e65c:	4655      	mov	r5, sl
 800e65e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e662:	2b78      	cmp	r3, #120	; 0x78
 800e664:	d806      	bhi.n	800e674 <__ssvfiscanf_r+0xec>
 800e666:	2b57      	cmp	r3, #87	; 0x57
 800e668:	d810      	bhi.n	800e68c <__ssvfiscanf_r+0x104>
 800e66a:	2b25      	cmp	r3, #37	; 0x25
 800e66c:	d0c7      	beq.n	800e5fe <__ssvfiscanf_r+0x76>
 800e66e:	d857      	bhi.n	800e720 <__ssvfiscanf_r+0x198>
 800e670:	2b00      	cmp	r3, #0
 800e672:	d065      	beq.n	800e740 <__ssvfiscanf_r+0x1b8>
 800e674:	2303      	movs	r3, #3
 800e676:	9347      	str	r3, [sp, #284]	; 0x11c
 800e678:	230a      	movs	r3, #10
 800e67a:	9342      	str	r3, [sp, #264]	; 0x108
 800e67c:	e076      	b.n	800e76c <__ssvfiscanf_r+0x1e4>
 800e67e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e680:	fb02 1103 	mla	r1, r2, r3, r1
 800e684:	3930      	subs	r1, #48	; 0x30
 800e686:	9143      	str	r1, [sp, #268]	; 0x10c
 800e688:	4655      	mov	r5, sl
 800e68a:	e7d4      	b.n	800e636 <__ssvfiscanf_r+0xae>
 800e68c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e690:	2a20      	cmp	r2, #32
 800e692:	d8ef      	bhi.n	800e674 <__ssvfiscanf_r+0xec>
 800e694:	a101      	add	r1, pc, #4	; (adr r1, 800e69c <__ssvfiscanf_r+0x114>)
 800e696:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e69a:	bf00      	nop
 800e69c:	0800e74f 	.word	0x0800e74f
 800e6a0:	0800e675 	.word	0x0800e675
 800e6a4:	0800e675 	.word	0x0800e675
 800e6a8:	0800e7ad 	.word	0x0800e7ad
 800e6ac:	0800e675 	.word	0x0800e675
 800e6b0:	0800e675 	.word	0x0800e675
 800e6b4:	0800e675 	.word	0x0800e675
 800e6b8:	0800e675 	.word	0x0800e675
 800e6bc:	0800e675 	.word	0x0800e675
 800e6c0:	0800e675 	.word	0x0800e675
 800e6c4:	0800e675 	.word	0x0800e675
 800e6c8:	0800e7c3 	.word	0x0800e7c3
 800e6cc:	0800e7a9 	.word	0x0800e7a9
 800e6d0:	0800e727 	.word	0x0800e727
 800e6d4:	0800e727 	.word	0x0800e727
 800e6d8:	0800e727 	.word	0x0800e727
 800e6dc:	0800e675 	.word	0x0800e675
 800e6e0:	0800e765 	.word	0x0800e765
 800e6e4:	0800e675 	.word	0x0800e675
 800e6e8:	0800e675 	.word	0x0800e675
 800e6ec:	0800e675 	.word	0x0800e675
 800e6f0:	0800e675 	.word	0x0800e675
 800e6f4:	0800e7d3 	.word	0x0800e7d3
 800e6f8:	0800e7a1 	.word	0x0800e7a1
 800e6fc:	0800e747 	.word	0x0800e747
 800e700:	0800e675 	.word	0x0800e675
 800e704:	0800e675 	.word	0x0800e675
 800e708:	0800e7cf 	.word	0x0800e7cf
 800e70c:	0800e675 	.word	0x0800e675
 800e710:	0800e7a9 	.word	0x0800e7a9
 800e714:	0800e675 	.word	0x0800e675
 800e718:	0800e675 	.word	0x0800e675
 800e71c:	0800e74f 	.word	0x0800e74f
 800e720:	3b45      	subs	r3, #69	; 0x45
 800e722:	2b02      	cmp	r3, #2
 800e724:	d8a6      	bhi.n	800e674 <__ssvfiscanf_r+0xec>
 800e726:	2305      	movs	r3, #5
 800e728:	e01f      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e72a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e72c:	4621      	mov	r1, r4
 800e72e:	4630      	mov	r0, r6
 800e730:	4798      	blx	r3
 800e732:	2800      	cmp	r0, #0
 800e734:	f43f af68 	beq.w	800e608 <__ssvfiscanf_r+0x80>
 800e738:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e73a:	2800      	cmp	r0, #0
 800e73c:	f040 808d 	bne.w	800e85a <__ssvfiscanf_r+0x2d2>
 800e740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e744:	e08f      	b.n	800e866 <__ssvfiscanf_r+0x2de>
 800e746:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e748:	f042 0220 	orr.w	r2, r2, #32
 800e74c:	9241      	str	r2, [sp, #260]	; 0x104
 800e74e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e754:	9241      	str	r2, [sp, #260]	; 0x104
 800e756:	2210      	movs	r2, #16
 800e758:	2b6f      	cmp	r3, #111	; 0x6f
 800e75a:	9242      	str	r2, [sp, #264]	; 0x108
 800e75c:	bf34      	ite	cc
 800e75e:	2303      	movcc	r3, #3
 800e760:	2304      	movcs	r3, #4
 800e762:	e002      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e764:	2300      	movs	r3, #0
 800e766:	9342      	str	r3, [sp, #264]	; 0x108
 800e768:	2303      	movs	r3, #3
 800e76a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e76c:	6863      	ldr	r3, [r4, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	dd3d      	ble.n	800e7ee <__ssvfiscanf_r+0x266>
 800e772:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e774:	0659      	lsls	r1, r3, #25
 800e776:	d404      	bmi.n	800e782 <__ssvfiscanf_r+0x1fa>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	781a      	ldrb	r2, [r3, #0]
 800e77c:	5cba      	ldrb	r2, [r7, r2]
 800e77e:	0712      	lsls	r2, r2, #28
 800e780:	d43c      	bmi.n	800e7fc <__ssvfiscanf_r+0x274>
 800e782:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e784:	2b02      	cmp	r3, #2
 800e786:	dc4b      	bgt.n	800e820 <__ssvfiscanf_r+0x298>
 800e788:	466b      	mov	r3, sp
 800e78a:	4622      	mov	r2, r4
 800e78c:	a941      	add	r1, sp, #260	; 0x104
 800e78e:	4630      	mov	r0, r6
 800e790:	f000 fa5e 	bl	800ec50 <_scanf_chars>
 800e794:	2801      	cmp	r0, #1
 800e796:	d06a      	beq.n	800e86e <__ssvfiscanf_r+0x2e6>
 800e798:	2802      	cmp	r0, #2
 800e79a:	f47f af1c 	bne.w	800e5d6 <__ssvfiscanf_r+0x4e>
 800e79e:	e7cb      	b.n	800e738 <__ssvfiscanf_r+0x1b0>
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	9342      	str	r3, [sp, #264]	; 0x108
 800e7a4:	2304      	movs	r3, #4
 800e7a6:	e7e0      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e7a8:	220a      	movs	r2, #10
 800e7aa:	e7d5      	b.n	800e758 <__ssvfiscanf_r+0x1d0>
 800e7ac:	4629      	mov	r1, r5
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	f000 fb9c 	bl	800eeec <__sccl>
 800e7b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ba:	9341      	str	r3, [sp, #260]	; 0x104
 800e7bc:	4605      	mov	r5, r0
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e7d3      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e7c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c8:	9341      	str	r3, [sp, #260]	; 0x104
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e7cd      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	e7cb      	b.n	800e76a <__ssvfiscanf_r+0x1e2>
 800e7d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e7d4:	06c3      	lsls	r3, r0, #27
 800e7d6:	f53f aefe 	bmi.w	800e5d6 <__ssvfiscanf_r+0x4e>
 800e7da:	9b00      	ldr	r3, [sp, #0]
 800e7dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7de:	1d19      	adds	r1, r3, #4
 800e7e0:	9100      	str	r1, [sp, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	07c0      	lsls	r0, r0, #31
 800e7e6:	bf4c      	ite	mi
 800e7e8:	801a      	strhmi	r2, [r3, #0]
 800e7ea:	601a      	strpl	r2, [r3, #0]
 800e7ec:	e6f3      	b.n	800e5d6 <__ssvfiscanf_r+0x4e>
 800e7ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	4798      	blx	r3
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d0bb      	beq.n	800e772 <__ssvfiscanf_r+0x1ea>
 800e7fa:	e79d      	b.n	800e738 <__ssvfiscanf_r+0x1b0>
 800e7fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7fe:	3201      	adds	r2, #1
 800e800:	9245      	str	r2, [sp, #276]	; 0x114
 800e802:	6862      	ldr	r2, [r4, #4]
 800e804:	3a01      	subs	r2, #1
 800e806:	2a00      	cmp	r2, #0
 800e808:	6062      	str	r2, [r4, #4]
 800e80a:	dd02      	ble.n	800e812 <__ssvfiscanf_r+0x28a>
 800e80c:	3301      	adds	r3, #1
 800e80e:	6023      	str	r3, [r4, #0]
 800e810:	e7b2      	b.n	800e778 <__ssvfiscanf_r+0x1f0>
 800e812:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e814:	4621      	mov	r1, r4
 800e816:	4630      	mov	r0, r6
 800e818:	4798      	blx	r3
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d0ac      	beq.n	800e778 <__ssvfiscanf_r+0x1f0>
 800e81e:	e78b      	b.n	800e738 <__ssvfiscanf_r+0x1b0>
 800e820:	2b04      	cmp	r3, #4
 800e822:	dc0f      	bgt.n	800e844 <__ssvfiscanf_r+0x2bc>
 800e824:	466b      	mov	r3, sp
 800e826:	4622      	mov	r2, r4
 800e828:	a941      	add	r1, sp, #260	; 0x104
 800e82a:	4630      	mov	r0, r6
 800e82c:	f000 fa6a 	bl	800ed04 <_scanf_i>
 800e830:	e7b0      	b.n	800e794 <__ssvfiscanf_r+0x20c>
 800e832:	bf00      	nop
 800e834:	0800e4d5 	.word	0x0800e4d5
 800e838:	0800e54f 	.word	0x0800e54f
 800e83c:	0801513f 	.word	0x0801513f
 800e840:	08014fb5 	.word	0x08014fb5
 800e844:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <__ssvfiscanf_r+0x2ec>)
 800e846:	2b00      	cmp	r3, #0
 800e848:	f43f aec5 	beq.w	800e5d6 <__ssvfiscanf_r+0x4e>
 800e84c:	466b      	mov	r3, sp
 800e84e:	4622      	mov	r2, r4
 800e850:	a941      	add	r1, sp, #260	; 0x104
 800e852:	4630      	mov	r0, r6
 800e854:	f3af 8000 	nop.w
 800e858:	e79c      	b.n	800e794 <__ssvfiscanf_r+0x20c>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e860:	bf18      	it	ne
 800e862:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800e866:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e870:	e7f9      	b.n	800e866 <__ssvfiscanf_r+0x2de>
 800e872:	bf00      	nop
 800e874:	00000000 	.word	0x00000000

0800e878 <__sfputc_r>:
 800e878:	6893      	ldr	r3, [r2, #8]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	b410      	push	{r4}
 800e880:	6093      	str	r3, [r2, #8]
 800e882:	da08      	bge.n	800e896 <__sfputc_r+0x1e>
 800e884:	6994      	ldr	r4, [r2, #24]
 800e886:	42a3      	cmp	r3, r4
 800e888:	db01      	blt.n	800e88e <__sfputc_r+0x16>
 800e88a:	290a      	cmp	r1, #10
 800e88c:	d103      	bne.n	800e896 <__sfputc_r+0x1e>
 800e88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e892:	f001 b90f 	b.w	800fab4 <__swbuf_r>
 800e896:	6813      	ldr	r3, [r2, #0]
 800e898:	1c58      	adds	r0, r3, #1
 800e89a:	6010      	str	r0, [r2, #0]
 800e89c:	7019      	strb	r1, [r3, #0]
 800e89e:	4608      	mov	r0, r1
 800e8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <__sfputs_r>:
 800e8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	460f      	mov	r7, r1
 800e8ac:	4614      	mov	r4, r2
 800e8ae:	18d5      	adds	r5, r2, r3
 800e8b0:	42ac      	cmp	r4, r5
 800e8b2:	d101      	bne.n	800e8b8 <__sfputs_r+0x12>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	e007      	b.n	800e8c8 <__sfputs_r+0x22>
 800e8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8bc:	463a      	mov	r2, r7
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f7ff ffda 	bl	800e878 <__sfputc_r>
 800e8c4:	1c43      	adds	r3, r0, #1
 800e8c6:	d1f3      	bne.n	800e8b0 <__sfputs_r+0xa>
 800e8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8cc <_vfiprintf_r>:
 800e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d0:	460d      	mov	r5, r1
 800e8d2:	b09d      	sub	sp, #116	; 0x74
 800e8d4:	4614      	mov	r4, r2
 800e8d6:	4698      	mov	r8, r3
 800e8d8:	4606      	mov	r6, r0
 800e8da:	b118      	cbz	r0, 800e8e4 <_vfiprintf_r+0x18>
 800e8dc:	6a03      	ldr	r3, [r0, #32]
 800e8de:	b90b      	cbnz	r3, 800e8e4 <_vfiprintf_r+0x18>
 800e8e0:	f7fe fcb8 	bl	800d254 <__sinit>
 800e8e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e6:	07d9      	lsls	r1, r3, #31
 800e8e8:	d405      	bmi.n	800e8f6 <_vfiprintf_r+0x2a>
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	059a      	lsls	r2, r3, #22
 800e8ee:	d402      	bmi.n	800e8f6 <_vfiprintf_r+0x2a>
 800e8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8f2:	f7fe fdae 	bl	800d452 <__retarget_lock_acquire_recursive>
 800e8f6:	89ab      	ldrh	r3, [r5, #12]
 800e8f8:	071b      	lsls	r3, r3, #28
 800e8fa:	d501      	bpl.n	800e900 <_vfiprintf_r+0x34>
 800e8fc:	692b      	ldr	r3, [r5, #16]
 800e8fe:	b99b      	cbnz	r3, 800e928 <_vfiprintf_r+0x5c>
 800e900:	4629      	mov	r1, r5
 800e902:	4630      	mov	r0, r6
 800e904:	f001 f914 	bl	800fb30 <__swsetup_r>
 800e908:	b170      	cbz	r0, 800e928 <_vfiprintf_r+0x5c>
 800e90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e90c:	07dc      	lsls	r4, r3, #31
 800e90e:	d504      	bpl.n	800e91a <_vfiprintf_r+0x4e>
 800e910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e914:	b01d      	add	sp, #116	; 0x74
 800e916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91a:	89ab      	ldrh	r3, [r5, #12]
 800e91c:	0598      	lsls	r0, r3, #22
 800e91e:	d4f7      	bmi.n	800e910 <_vfiprintf_r+0x44>
 800e920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e922:	f7fe fd97 	bl	800d454 <__retarget_lock_release_recursive>
 800e926:	e7f3      	b.n	800e910 <_vfiprintf_r+0x44>
 800e928:	2300      	movs	r3, #0
 800e92a:	9309      	str	r3, [sp, #36]	; 0x24
 800e92c:	2320      	movs	r3, #32
 800e92e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e932:	f8cd 800c 	str.w	r8, [sp, #12]
 800e936:	2330      	movs	r3, #48	; 0x30
 800e938:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eaec <_vfiprintf_r+0x220>
 800e93c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e940:	f04f 0901 	mov.w	r9, #1
 800e944:	4623      	mov	r3, r4
 800e946:	469a      	mov	sl, r3
 800e948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e94c:	b10a      	cbz	r2, 800e952 <_vfiprintf_r+0x86>
 800e94e:	2a25      	cmp	r2, #37	; 0x25
 800e950:	d1f9      	bne.n	800e946 <_vfiprintf_r+0x7a>
 800e952:	ebba 0b04 	subs.w	fp, sl, r4
 800e956:	d00b      	beq.n	800e970 <_vfiprintf_r+0xa4>
 800e958:	465b      	mov	r3, fp
 800e95a:	4622      	mov	r2, r4
 800e95c:	4629      	mov	r1, r5
 800e95e:	4630      	mov	r0, r6
 800e960:	f7ff ffa1 	bl	800e8a6 <__sfputs_r>
 800e964:	3001      	adds	r0, #1
 800e966:	f000 80a9 	beq.w	800eabc <_vfiprintf_r+0x1f0>
 800e96a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e96c:	445a      	add	r2, fp
 800e96e:	9209      	str	r2, [sp, #36]	; 0x24
 800e970:	f89a 3000 	ldrb.w	r3, [sl]
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 80a1 	beq.w	800eabc <_vfiprintf_r+0x1f0>
 800e97a:	2300      	movs	r3, #0
 800e97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e984:	f10a 0a01 	add.w	sl, sl, #1
 800e988:	9304      	str	r3, [sp, #16]
 800e98a:	9307      	str	r3, [sp, #28]
 800e98c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e990:	931a      	str	r3, [sp, #104]	; 0x68
 800e992:	4654      	mov	r4, sl
 800e994:	2205      	movs	r2, #5
 800e996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e99a:	4854      	ldr	r0, [pc, #336]	; (800eaec <_vfiprintf_r+0x220>)
 800e99c:	f7f1 fc38 	bl	8000210 <memchr>
 800e9a0:	9a04      	ldr	r2, [sp, #16]
 800e9a2:	b9d8      	cbnz	r0, 800e9dc <_vfiprintf_r+0x110>
 800e9a4:	06d1      	lsls	r1, r2, #27
 800e9a6:	bf44      	itt	mi
 800e9a8:	2320      	movmi	r3, #32
 800e9aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9ae:	0713      	lsls	r3, r2, #28
 800e9b0:	bf44      	itt	mi
 800e9b2:	232b      	movmi	r3, #43	; 0x2b
 800e9b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e9bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e9be:	d015      	beq.n	800e9ec <_vfiprintf_r+0x120>
 800e9c0:	9a07      	ldr	r2, [sp, #28]
 800e9c2:	4654      	mov	r4, sl
 800e9c4:	2000      	movs	r0, #0
 800e9c6:	f04f 0c0a 	mov.w	ip, #10
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9d0:	3b30      	subs	r3, #48	; 0x30
 800e9d2:	2b09      	cmp	r3, #9
 800e9d4:	d94d      	bls.n	800ea72 <_vfiprintf_r+0x1a6>
 800e9d6:	b1b0      	cbz	r0, 800ea06 <_vfiprintf_r+0x13a>
 800e9d8:	9207      	str	r2, [sp, #28]
 800e9da:	e014      	b.n	800ea06 <_vfiprintf_r+0x13a>
 800e9dc:	eba0 0308 	sub.w	r3, r0, r8
 800e9e0:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	46a2      	mov	sl, r4
 800e9ea:	e7d2      	b.n	800e992 <_vfiprintf_r+0xc6>
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	1d19      	adds	r1, r3, #4
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	9103      	str	r1, [sp, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	bfbb      	ittet	lt
 800e9f8:	425b      	neglt	r3, r3
 800e9fa:	f042 0202 	orrlt.w	r2, r2, #2
 800e9fe:	9307      	strge	r3, [sp, #28]
 800ea00:	9307      	strlt	r3, [sp, #28]
 800ea02:	bfb8      	it	lt
 800ea04:	9204      	strlt	r2, [sp, #16]
 800ea06:	7823      	ldrb	r3, [r4, #0]
 800ea08:	2b2e      	cmp	r3, #46	; 0x2e
 800ea0a:	d10c      	bne.n	800ea26 <_vfiprintf_r+0x15a>
 800ea0c:	7863      	ldrb	r3, [r4, #1]
 800ea0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ea10:	d134      	bne.n	800ea7c <_vfiprintf_r+0x1b0>
 800ea12:	9b03      	ldr	r3, [sp, #12]
 800ea14:	1d1a      	adds	r2, r3, #4
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	9203      	str	r2, [sp, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	bfb8      	it	lt
 800ea1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea22:	3402      	adds	r4, #2
 800ea24:	9305      	str	r3, [sp, #20]
 800ea26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eafc <_vfiprintf_r+0x230>
 800ea2a:	7821      	ldrb	r1, [r4, #0]
 800ea2c:	2203      	movs	r2, #3
 800ea2e:	4650      	mov	r0, sl
 800ea30:	f7f1 fbee 	bl	8000210 <memchr>
 800ea34:	b138      	cbz	r0, 800ea46 <_vfiprintf_r+0x17a>
 800ea36:	9b04      	ldr	r3, [sp, #16]
 800ea38:	eba0 000a 	sub.w	r0, r0, sl
 800ea3c:	2240      	movs	r2, #64	; 0x40
 800ea3e:	4082      	lsls	r2, r0
 800ea40:	4313      	orrs	r3, r2
 800ea42:	3401      	adds	r4, #1
 800ea44:	9304      	str	r3, [sp, #16]
 800ea46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea4a:	4829      	ldr	r0, [pc, #164]	; (800eaf0 <_vfiprintf_r+0x224>)
 800ea4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea50:	2206      	movs	r2, #6
 800ea52:	f7f1 fbdd 	bl	8000210 <memchr>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d03f      	beq.n	800eada <_vfiprintf_r+0x20e>
 800ea5a:	4b26      	ldr	r3, [pc, #152]	; (800eaf4 <_vfiprintf_r+0x228>)
 800ea5c:	bb1b      	cbnz	r3, 800eaa6 <_vfiprintf_r+0x1da>
 800ea5e:	9b03      	ldr	r3, [sp, #12]
 800ea60:	3307      	adds	r3, #7
 800ea62:	f023 0307 	bic.w	r3, r3, #7
 800ea66:	3308      	adds	r3, #8
 800ea68:	9303      	str	r3, [sp, #12]
 800ea6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6c:	443b      	add	r3, r7
 800ea6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea70:	e768      	b.n	800e944 <_vfiprintf_r+0x78>
 800ea72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea76:	460c      	mov	r4, r1
 800ea78:	2001      	movs	r0, #1
 800ea7a:	e7a6      	b.n	800e9ca <_vfiprintf_r+0xfe>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	3401      	adds	r4, #1
 800ea80:	9305      	str	r3, [sp, #20]
 800ea82:	4619      	mov	r1, r3
 800ea84:	f04f 0c0a 	mov.w	ip, #10
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea8e:	3a30      	subs	r2, #48	; 0x30
 800ea90:	2a09      	cmp	r2, #9
 800ea92:	d903      	bls.n	800ea9c <_vfiprintf_r+0x1d0>
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0c6      	beq.n	800ea26 <_vfiprintf_r+0x15a>
 800ea98:	9105      	str	r1, [sp, #20]
 800ea9a:	e7c4      	b.n	800ea26 <_vfiprintf_r+0x15a>
 800ea9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaa0:	4604      	mov	r4, r0
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e7f0      	b.n	800ea88 <_vfiprintf_r+0x1bc>
 800eaa6:	ab03      	add	r3, sp, #12
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	462a      	mov	r2, r5
 800eaac:	4b12      	ldr	r3, [pc, #72]	; (800eaf8 <_vfiprintf_r+0x22c>)
 800eaae:	a904      	add	r1, sp, #16
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7fd feb7 	bl	800c824 <_printf_float>
 800eab6:	4607      	mov	r7, r0
 800eab8:	1c78      	adds	r0, r7, #1
 800eaba:	d1d6      	bne.n	800ea6a <_vfiprintf_r+0x19e>
 800eabc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eabe:	07d9      	lsls	r1, r3, #31
 800eac0:	d405      	bmi.n	800eace <_vfiprintf_r+0x202>
 800eac2:	89ab      	ldrh	r3, [r5, #12]
 800eac4:	059a      	lsls	r2, r3, #22
 800eac6:	d402      	bmi.n	800eace <_vfiprintf_r+0x202>
 800eac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eaca:	f7fe fcc3 	bl	800d454 <__retarget_lock_release_recursive>
 800eace:	89ab      	ldrh	r3, [r5, #12]
 800ead0:	065b      	lsls	r3, r3, #25
 800ead2:	f53f af1d 	bmi.w	800e910 <_vfiprintf_r+0x44>
 800ead6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ead8:	e71c      	b.n	800e914 <_vfiprintf_r+0x48>
 800eada:	ab03      	add	r3, sp, #12
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	462a      	mov	r2, r5
 800eae0:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <_vfiprintf_r+0x22c>)
 800eae2:	a904      	add	r1, sp, #16
 800eae4:	4630      	mov	r0, r6
 800eae6:	f7fe f941 	bl	800cd6c <_printf_i>
 800eaea:	e7e4      	b.n	800eab6 <_vfiprintf_r+0x1ea>
 800eaec:	08014faf 	.word	0x08014faf
 800eaf0:	08014fb9 	.word	0x08014fb9
 800eaf4:	0800c825 	.word	0x0800c825
 800eaf8:	0800e8a7 	.word	0x0800e8a7
 800eafc:	08014fb5 	.word	0x08014fb5

0800eb00 <malloc>:
 800eb00:	4b02      	ldr	r3, [pc, #8]	; (800eb0c <malloc+0xc>)
 800eb02:	4601      	mov	r1, r0
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	f000 b823 	b.w	800eb50 <_malloc_r>
 800eb0a:	bf00      	nop
 800eb0c:	2000009c 	.word	0x2000009c

0800eb10 <sbrk_aligned>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4e0e      	ldr	r6, [pc, #56]	; (800eb4c <sbrk_aligned+0x3c>)
 800eb14:	460c      	mov	r4, r1
 800eb16:	6831      	ldr	r1, [r6, #0]
 800eb18:	4605      	mov	r5, r0
 800eb1a:	b911      	cbnz	r1, 800eb22 <sbrk_aligned+0x12>
 800eb1c:	f001 f8fe 	bl	800fd1c <_sbrk_r>
 800eb20:	6030      	str	r0, [r6, #0]
 800eb22:	4621      	mov	r1, r4
 800eb24:	4628      	mov	r0, r5
 800eb26:	f001 f8f9 	bl	800fd1c <_sbrk_r>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	d00a      	beq.n	800eb44 <sbrk_aligned+0x34>
 800eb2e:	1cc4      	adds	r4, r0, #3
 800eb30:	f024 0403 	bic.w	r4, r4, #3
 800eb34:	42a0      	cmp	r0, r4
 800eb36:	d007      	beq.n	800eb48 <sbrk_aligned+0x38>
 800eb38:	1a21      	subs	r1, r4, r0
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f001 f8ee 	bl	800fd1c <_sbrk_r>
 800eb40:	3001      	adds	r0, #1
 800eb42:	d101      	bne.n	800eb48 <sbrk_aligned+0x38>
 800eb44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eb48:	4620      	mov	r0, r4
 800eb4a:	bd70      	pop	{r4, r5, r6, pc}
 800eb4c:	20009e44 	.word	0x20009e44

0800eb50 <_malloc_r>:
 800eb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb54:	1ccd      	adds	r5, r1, #3
 800eb56:	f025 0503 	bic.w	r5, r5, #3
 800eb5a:	3508      	adds	r5, #8
 800eb5c:	2d0c      	cmp	r5, #12
 800eb5e:	bf38      	it	cc
 800eb60:	250c      	movcc	r5, #12
 800eb62:	2d00      	cmp	r5, #0
 800eb64:	4607      	mov	r7, r0
 800eb66:	db01      	blt.n	800eb6c <_malloc_r+0x1c>
 800eb68:	42a9      	cmp	r1, r5
 800eb6a:	d905      	bls.n	800eb78 <_malloc_r+0x28>
 800eb6c:	230c      	movs	r3, #12
 800eb6e:	603b      	str	r3, [r7, #0]
 800eb70:	2600      	movs	r6, #0
 800eb72:	4630      	mov	r0, r6
 800eb74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ec4c <_malloc_r+0xfc>
 800eb7c:	f000 fa9e 	bl	800f0bc <__malloc_lock>
 800eb80:	f8d8 3000 	ldr.w	r3, [r8]
 800eb84:	461c      	mov	r4, r3
 800eb86:	bb5c      	cbnz	r4, 800ebe0 <_malloc_r+0x90>
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	f7ff ffc0 	bl	800eb10 <sbrk_aligned>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	4604      	mov	r4, r0
 800eb94:	d155      	bne.n	800ec42 <_malloc_r+0xf2>
 800eb96:	f8d8 4000 	ldr.w	r4, [r8]
 800eb9a:	4626      	mov	r6, r4
 800eb9c:	2e00      	cmp	r6, #0
 800eb9e:	d145      	bne.n	800ec2c <_malloc_r+0xdc>
 800eba0:	2c00      	cmp	r4, #0
 800eba2:	d048      	beq.n	800ec36 <_malloc_r+0xe6>
 800eba4:	6823      	ldr	r3, [r4, #0]
 800eba6:	4631      	mov	r1, r6
 800eba8:	4638      	mov	r0, r7
 800ebaa:	eb04 0903 	add.w	r9, r4, r3
 800ebae:	f001 f8b5 	bl	800fd1c <_sbrk_r>
 800ebb2:	4581      	cmp	r9, r0
 800ebb4:	d13f      	bne.n	800ec36 <_malloc_r+0xe6>
 800ebb6:	6821      	ldr	r1, [r4, #0]
 800ebb8:	1a6d      	subs	r5, r5, r1
 800ebba:	4629      	mov	r1, r5
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	f7ff ffa7 	bl	800eb10 <sbrk_aligned>
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	d037      	beq.n	800ec36 <_malloc_r+0xe6>
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	442b      	add	r3, r5
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d038      	beq.n	800ec46 <_malloc_r+0xf6>
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	42a2      	cmp	r2, r4
 800ebd8:	d12b      	bne.n	800ec32 <_malloc_r+0xe2>
 800ebda:	2200      	movs	r2, #0
 800ebdc:	605a      	str	r2, [r3, #4]
 800ebde:	e00f      	b.n	800ec00 <_malloc_r+0xb0>
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	1b52      	subs	r2, r2, r5
 800ebe4:	d41f      	bmi.n	800ec26 <_malloc_r+0xd6>
 800ebe6:	2a0b      	cmp	r2, #11
 800ebe8:	d917      	bls.n	800ec1a <_malloc_r+0xca>
 800ebea:	1961      	adds	r1, r4, r5
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	6025      	str	r5, [r4, #0]
 800ebf0:	bf18      	it	ne
 800ebf2:	6059      	strne	r1, [r3, #4]
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	bf08      	it	eq
 800ebf8:	f8c8 1000 	streq.w	r1, [r8]
 800ebfc:	5162      	str	r2, [r4, r5]
 800ebfe:	604b      	str	r3, [r1, #4]
 800ec00:	4638      	mov	r0, r7
 800ec02:	f104 060b 	add.w	r6, r4, #11
 800ec06:	f000 fa5f 	bl	800f0c8 <__malloc_unlock>
 800ec0a:	f026 0607 	bic.w	r6, r6, #7
 800ec0e:	1d23      	adds	r3, r4, #4
 800ec10:	1af2      	subs	r2, r6, r3
 800ec12:	d0ae      	beq.n	800eb72 <_malloc_r+0x22>
 800ec14:	1b9b      	subs	r3, r3, r6
 800ec16:	50a3      	str	r3, [r4, r2]
 800ec18:	e7ab      	b.n	800eb72 <_malloc_r+0x22>
 800ec1a:	42a3      	cmp	r3, r4
 800ec1c:	6862      	ldr	r2, [r4, #4]
 800ec1e:	d1dd      	bne.n	800ebdc <_malloc_r+0x8c>
 800ec20:	f8c8 2000 	str.w	r2, [r8]
 800ec24:	e7ec      	b.n	800ec00 <_malloc_r+0xb0>
 800ec26:	4623      	mov	r3, r4
 800ec28:	6864      	ldr	r4, [r4, #4]
 800ec2a:	e7ac      	b.n	800eb86 <_malloc_r+0x36>
 800ec2c:	4634      	mov	r4, r6
 800ec2e:	6876      	ldr	r6, [r6, #4]
 800ec30:	e7b4      	b.n	800eb9c <_malloc_r+0x4c>
 800ec32:	4613      	mov	r3, r2
 800ec34:	e7cc      	b.n	800ebd0 <_malloc_r+0x80>
 800ec36:	230c      	movs	r3, #12
 800ec38:	603b      	str	r3, [r7, #0]
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	f000 fa44 	bl	800f0c8 <__malloc_unlock>
 800ec40:	e797      	b.n	800eb72 <_malloc_r+0x22>
 800ec42:	6025      	str	r5, [r4, #0]
 800ec44:	e7dc      	b.n	800ec00 <_malloc_r+0xb0>
 800ec46:	605b      	str	r3, [r3, #4]
 800ec48:	deff      	udf	#255	; 0xff
 800ec4a:	bf00      	nop
 800ec4c:	20009e40 	.word	0x20009e40

0800ec50 <_scanf_chars>:
 800ec50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec54:	4615      	mov	r5, r2
 800ec56:	688a      	ldr	r2, [r1, #8]
 800ec58:	4680      	mov	r8, r0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	b932      	cbnz	r2, 800ec6c <_scanf_chars+0x1c>
 800ec5e:	698a      	ldr	r2, [r1, #24]
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	bf0c      	ite	eq
 800ec64:	2201      	moveq	r2, #1
 800ec66:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800ec6a:	608a      	str	r2, [r1, #8]
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ed00 <_scanf_chars+0xb0>
 800ec72:	06d1      	lsls	r1, r2, #27
 800ec74:	bf5f      	itttt	pl
 800ec76:	681a      	ldrpl	r2, [r3, #0]
 800ec78:	1d11      	addpl	r1, r2, #4
 800ec7a:	6019      	strpl	r1, [r3, #0]
 800ec7c:	6816      	ldrpl	r6, [r2, #0]
 800ec7e:	2700      	movs	r7, #0
 800ec80:	69a0      	ldr	r0, [r4, #24]
 800ec82:	b188      	cbz	r0, 800eca8 <_scanf_chars+0x58>
 800ec84:	2801      	cmp	r0, #1
 800ec86:	d107      	bne.n	800ec98 <_scanf_chars+0x48>
 800ec88:	682a      	ldr	r2, [r5, #0]
 800ec8a:	7811      	ldrb	r1, [r2, #0]
 800ec8c:	6962      	ldr	r2, [r4, #20]
 800ec8e:	5c52      	ldrb	r2, [r2, r1]
 800ec90:	b952      	cbnz	r2, 800eca8 <_scanf_chars+0x58>
 800ec92:	2f00      	cmp	r7, #0
 800ec94:	d031      	beq.n	800ecfa <_scanf_chars+0xaa>
 800ec96:	e022      	b.n	800ecde <_scanf_chars+0x8e>
 800ec98:	2802      	cmp	r0, #2
 800ec9a:	d120      	bne.n	800ecde <_scanf_chars+0x8e>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800eca4:	071b      	lsls	r3, r3, #28
 800eca6:	d41a      	bmi.n	800ecde <_scanf_chars+0x8e>
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	06da      	lsls	r2, r3, #27
 800ecac:	bf5e      	ittt	pl
 800ecae:	682b      	ldrpl	r3, [r5, #0]
 800ecb0:	781b      	ldrbpl	r3, [r3, #0]
 800ecb2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ecb6:	682a      	ldr	r2, [r5, #0]
 800ecb8:	686b      	ldr	r3, [r5, #4]
 800ecba:	3201      	adds	r2, #1
 800ecbc:	602a      	str	r2, [r5, #0]
 800ecbe:	68a2      	ldr	r2, [r4, #8]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	3a01      	subs	r2, #1
 800ecc4:	606b      	str	r3, [r5, #4]
 800ecc6:	3701      	adds	r7, #1
 800ecc8:	60a2      	str	r2, [r4, #8]
 800ecca:	b142      	cbz	r2, 800ecde <_scanf_chars+0x8e>
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dcd7      	bgt.n	800ec80 <_scanf_chars+0x30>
 800ecd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	4798      	blx	r3
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0d0      	beq.n	800ec80 <_scanf_chars+0x30>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	f013 0310 	ands.w	r3, r3, #16
 800ece4:	d105      	bne.n	800ecf2 <_scanf_chars+0xa2>
 800ece6:	68e2      	ldr	r2, [r4, #12]
 800ece8:	3201      	adds	r2, #1
 800ecea:	60e2      	str	r2, [r4, #12]
 800ecec:	69a2      	ldr	r2, [r4, #24]
 800ecee:	b102      	cbz	r2, 800ecf2 <_scanf_chars+0xa2>
 800ecf0:	7033      	strb	r3, [r6, #0]
 800ecf2:	6923      	ldr	r3, [r4, #16]
 800ecf4:	443b      	add	r3, r7
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecfe:	bf00      	nop
 800ed00:	0801513f 	.word	0x0801513f

0800ed04 <_scanf_i>:
 800ed04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	4698      	mov	r8, r3
 800ed0a:	4b74      	ldr	r3, [pc, #464]	; (800eedc <_scanf_i+0x1d8>)
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	4682      	mov	sl, r0
 800ed10:	4616      	mov	r6, r2
 800ed12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed16:	b087      	sub	sp, #28
 800ed18:	ab03      	add	r3, sp, #12
 800ed1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ed1e:	4b70      	ldr	r3, [pc, #448]	; (800eee0 <_scanf_i+0x1dc>)
 800ed20:	69a1      	ldr	r1, [r4, #24]
 800ed22:	4a70      	ldr	r2, [pc, #448]	; (800eee4 <_scanf_i+0x1e0>)
 800ed24:	2903      	cmp	r1, #3
 800ed26:	bf18      	it	ne
 800ed28:	461a      	movne	r2, r3
 800ed2a:	68a3      	ldr	r3, [r4, #8]
 800ed2c:	9201      	str	r2, [sp, #4]
 800ed2e:	1e5a      	subs	r2, r3, #1
 800ed30:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ed34:	bf88      	it	hi
 800ed36:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ed3a:	4627      	mov	r7, r4
 800ed3c:	bf82      	ittt	hi
 800ed3e:	eb03 0905 	addhi.w	r9, r3, r5
 800ed42:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ed46:	60a3      	strhi	r3, [r4, #8]
 800ed48:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ed4c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ed50:	bf98      	it	ls
 800ed52:	f04f 0900 	movls.w	r9, #0
 800ed56:	6023      	str	r3, [r4, #0]
 800ed58:	463d      	mov	r5, r7
 800ed5a:	f04f 0b00 	mov.w	fp, #0
 800ed5e:	6831      	ldr	r1, [r6, #0]
 800ed60:	ab03      	add	r3, sp, #12
 800ed62:	7809      	ldrb	r1, [r1, #0]
 800ed64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ed68:	2202      	movs	r2, #2
 800ed6a:	f7f1 fa51 	bl	8000210 <memchr>
 800ed6e:	b328      	cbz	r0, 800edbc <_scanf_i+0xb8>
 800ed70:	f1bb 0f01 	cmp.w	fp, #1
 800ed74:	d159      	bne.n	800ee2a <_scanf_i+0x126>
 800ed76:	6862      	ldr	r2, [r4, #4]
 800ed78:	b92a      	cbnz	r2, 800ed86 <_scanf_i+0x82>
 800ed7a:	6822      	ldr	r2, [r4, #0]
 800ed7c:	2308      	movs	r3, #8
 800ed7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed82:	6063      	str	r3, [r4, #4]
 800ed84:	6022      	str	r2, [r4, #0]
 800ed86:	6822      	ldr	r2, [r4, #0]
 800ed88:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ed8c:	6022      	str	r2, [r4, #0]
 800ed8e:	68a2      	ldr	r2, [r4, #8]
 800ed90:	1e51      	subs	r1, r2, #1
 800ed92:	60a1      	str	r1, [r4, #8]
 800ed94:	b192      	cbz	r2, 800edbc <_scanf_i+0xb8>
 800ed96:	6832      	ldr	r2, [r6, #0]
 800ed98:	1c51      	adds	r1, r2, #1
 800ed9a:	6031      	str	r1, [r6, #0]
 800ed9c:	7812      	ldrb	r2, [r2, #0]
 800ed9e:	f805 2b01 	strb.w	r2, [r5], #1
 800eda2:	6872      	ldr	r2, [r6, #4]
 800eda4:	3a01      	subs	r2, #1
 800eda6:	2a00      	cmp	r2, #0
 800eda8:	6072      	str	r2, [r6, #4]
 800edaa:	dc07      	bgt.n	800edbc <_scanf_i+0xb8>
 800edac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800edb0:	4631      	mov	r1, r6
 800edb2:	4650      	mov	r0, sl
 800edb4:	4790      	blx	r2
 800edb6:	2800      	cmp	r0, #0
 800edb8:	f040 8085 	bne.w	800eec6 <_scanf_i+0x1c2>
 800edbc:	f10b 0b01 	add.w	fp, fp, #1
 800edc0:	f1bb 0f03 	cmp.w	fp, #3
 800edc4:	d1cb      	bne.n	800ed5e <_scanf_i+0x5a>
 800edc6:	6863      	ldr	r3, [r4, #4]
 800edc8:	b90b      	cbnz	r3, 800edce <_scanf_i+0xca>
 800edca:	230a      	movs	r3, #10
 800edcc:	6063      	str	r3, [r4, #4]
 800edce:	6863      	ldr	r3, [r4, #4]
 800edd0:	4945      	ldr	r1, [pc, #276]	; (800eee8 <_scanf_i+0x1e4>)
 800edd2:	6960      	ldr	r0, [r4, #20]
 800edd4:	1ac9      	subs	r1, r1, r3
 800edd6:	f000 f889 	bl	800eeec <__sccl>
 800edda:	f04f 0b00 	mov.w	fp, #0
 800edde:	68a3      	ldr	r3, [r4, #8]
 800ede0:	6822      	ldr	r2, [r4, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d03d      	beq.n	800ee62 <_scanf_i+0x15e>
 800ede6:	6831      	ldr	r1, [r6, #0]
 800ede8:	6960      	ldr	r0, [r4, #20]
 800edea:	f891 c000 	ldrb.w	ip, [r1]
 800edee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d035      	beq.n	800ee62 <_scanf_i+0x15e>
 800edf6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800edfa:	d124      	bne.n	800ee46 <_scanf_i+0x142>
 800edfc:	0510      	lsls	r0, r2, #20
 800edfe:	d522      	bpl.n	800ee46 <_scanf_i+0x142>
 800ee00:	f10b 0b01 	add.w	fp, fp, #1
 800ee04:	f1b9 0f00 	cmp.w	r9, #0
 800ee08:	d003      	beq.n	800ee12 <_scanf_i+0x10e>
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ee10:	60a3      	str	r3, [r4, #8]
 800ee12:	6873      	ldr	r3, [r6, #4]
 800ee14:	3b01      	subs	r3, #1
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	6073      	str	r3, [r6, #4]
 800ee1a:	dd1b      	ble.n	800ee54 <_scanf_i+0x150>
 800ee1c:	6833      	ldr	r3, [r6, #0]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	6033      	str	r3, [r6, #0]
 800ee22:	68a3      	ldr	r3, [r4, #8]
 800ee24:	3b01      	subs	r3, #1
 800ee26:	60a3      	str	r3, [r4, #8]
 800ee28:	e7d9      	b.n	800edde <_scanf_i+0xda>
 800ee2a:	f1bb 0f02 	cmp.w	fp, #2
 800ee2e:	d1ae      	bne.n	800ed8e <_scanf_i+0x8a>
 800ee30:	6822      	ldr	r2, [r4, #0]
 800ee32:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ee36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ee3a:	d1bf      	bne.n	800edbc <_scanf_i+0xb8>
 800ee3c:	2310      	movs	r3, #16
 800ee3e:	6063      	str	r3, [r4, #4]
 800ee40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ee44:	e7a2      	b.n	800ed8c <_scanf_i+0x88>
 800ee46:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ee4a:	6022      	str	r2, [r4, #0]
 800ee4c:	780b      	ldrb	r3, [r1, #0]
 800ee4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ee52:	e7de      	b.n	800ee12 <_scanf_i+0x10e>
 800ee54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ee58:	4631      	mov	r1, r6
 800ee5a:	4650      	mov	r0, sl
 800ee5c:	4798      	blx	r3
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d0df      	beq.n	800ee22 <_scanf_i+0x11e>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	05d9      	lsls	r1, r3, #23
 800ee66:	d50d      	bpl.n	800ee84 <_scanf_i+0x180>
 800ee68:	42bd      	cmp	r5, r7
 800ee6a:	d909      	bls.n	800ee80 <_scanf_i+0x17c>
 800ee6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ee70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee74:	4632      	mov	r2, r6
 800ee76:	4650      	mov	r0, sl
 800ee78:	4798      	blx	r3
 800ee7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ee7e:	464d      	mov	r5, r9
 800ee80:	42bd      	cmp	r5, r7
 800ee82:	d028      	beq.n	800eed6 <_scanf_i+0x1d2>
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	f012 0210 	ands.w	r2, r2, #16
 800ee8a:	d113      	bne.n	800eeb4 <_scanf_i+0x1b0>
 800ee8c:	702a      	strb	r2, [r5, #0]
 800ee8e:	6863      	ldr	r3, [r4, #4]
 800ee90:	9e01      	ldr	r6, [sp, #4]
 800ee92:	4639      	mov	r1, r7
 800ee94:	4650      	mov	r0, sl
 800ee96:	47b0      	blx	r6
 800ee98:	f8d8 3000 	ldr.w	r3, [r8]
 800ee9c:	6821      	ldr	r1, [r4, #0]
 800ee9e:	1d1a      	adds	r2, r3, #4
 800eea0:	f8c8 2000 	str.w	r2, [r8]
 800eea4:	f011 0f20 	tst.w	r1, #32
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	d00f      	beq.n	800eecc <_scanf_i+0x1c8>
 800eeac:	6018      	str	r0, [r3, #0]
 800eeae:	68e3      	ldr	r3, [r4, #12]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	60e3      	str	r3, [r4, #12]
 800eeb4:	6923      	ldr	r3, [r4, #16]
 800eeb6:	1bed      	subs	r5, r5, r7
 800eeb8:	445d      	add	r5, fp
 800eeba:	442b      	add	r3, r5
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	2000      	movs	r0, #0
 800eec0:	b007      	add	sp, #28
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	f04f 0b00 	mov.w	fp, #0
 800eeca:	e7ca      	b.n	800ee62 <_scanf_i+0x15e>
 800eecc:	07ca      	lsls	r2, r1, #31
 800eece:	bf4c      	ite	mi
 800eed0:	8018      	strhmi	r0, [r3, #0]
 800eed2:	6018      	strpl	r0, [r3, #0]
 800eed4:	e7eb      	b.n	800eeae <_scanf_i+0x1aa>
 800eed6:	2001      	movs	r0, #1
 800eed8:	e7f2      	b.n	800eec0 <_scanf_i+0x1bc>
 800eeda:	bf00      	nop
 800eedc:	08010dd4 	.word	0x08010dd4
 800eee0:	0800fab1 	.word	0x0800fab1
 800eee4:	0800f9c9 	.word	0x0800f9c9
 800eee8:	08014fd0 	.word	0x08014fd0

0800eeec <__sccl>:
 800eeec:	b570      	push	{r4, r5, r6, lr}
 800eeee:	780b      	ldrb	r3, [r1, #0]
 800eef0:	4604      	mov	r4, r0
 800eef2:	2b5e      	cmp	r3, #94	; 0x5e
 800eef4:	bf0b      	itete	eq
 800eef6:	784b      	ldrbeq	r3, [r1, #1]
 800eef8:	1c4a      	addne	r2, r1, #1
 800eefa:	1c8a      	addeq	r2, r1, #2
 800eefc:	2100      	movne	r1, #0
 800eefe:	bf08      	it	eq
 800ef00:	2101      	moveq	r1, #1
 800ef02:	3801      	subs	r0, #1
 800ef04:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ef08:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ef0c:	42a8      	cmp	r0, r5
 800ef0e:	d1fb      	bne.n	800ef08 <__sccl+0x1c>
 800ef10:	b90b      	cbnz	r3, 800ef16 <__sccl+0x2a>
 800ef12:	1e50      	subs	r0, r2, #1
 800ef14:	bd70      	pop	{r4, r5, r6, pc}
 800ef16:	f081 0101 	eor.w	r1, r1, #1
 800ef1a:	54e1      	strb	r1, [r4, r3]
 800ef1c:	4610      	mov	r0, r2
 800ef1e:	4602      	mov	r2, r0
 800ef20:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ef24:	2d2d      	cmp	r5, #45	; 0x2d
 800ef26:	d005      	beq.n	800ef34 <__sccl+0x48>
 800ef28:	2d5d      	cmp	r5, #93	; 0x5d
 800ef2a:	d016      	beq.n	800ef5a <__sccl+0x6e>
 800ef2c:	2d00      	cmp	r5, #0
 800ef2e:	d0f1      	beq.n	800ef14 <__sccl+0x28>
 800ef30:	462b      	mov	r3, r5
 800ef32:	e7f2      	b.n	800ef1a <__sccl+0x2e>
 800ef34:	7846      	ldrb	r6, [r0, #1]
 800ef36:	2e5d      	cmp	r6, #93	; 0x5d
 800ef38:	d0fa      	beq.n	800ef30 <__sccl+0x44>
 800ef3a:	42b3      	cmp	r3, r6
 800ef3c:	dcf8      	bgt.n	800ef30 <__sccl+0x44>
 800ef3e:	3002      	adds	r0, #2
 800ef40:	461a      	mov	r2, r3
 800ef42:	3201      	adds	r2, #1
 800ef44:	4296      	cmp	r6, r2
 800ef46:	54a1      	strb	r1, [r4, r2]
 800ef48:	dcfb      	bgt.n	800ef42 <__sccl+0x56>
 800ef4a:	1af2      	subs	r2, r6, r3
 800ef4c:	3a01      	subs	r2, #1
 800ef4e:	1c5d      	adds	r5, r3, #1
 800ef50:	42b3      	cmp	r3, r6
 800ef52:	bfa8      	it	ge
 800ef54:	2200      	movge	r2, #0
 800ef56:	18ab      	adds	r3, r5, r2
 800ef58:	e7e1      	b.n	800ef1e <__sccl+0x32>
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	e7da      	b.n	800ef14 <__sccl+0x28>
	...

0800ef60 <__sflush_r>:
 800ef60:	898a      	ldrh	r2, [r1, #12]
 800ef62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef66:	4605      	mov	r5, r0
 800ef68:	0710      	lsls	r0, r2, #28
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	d458      	bmi.n	800f020 <__sflush_r+0xc0>
 800ef6e:	684b      	ldr	r3, [r1, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dc05      	bgt.n	800ef80 <__sflush_r+0x20>
 800ef74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	dc02      	bgt.n	800ef80 <__sflush_r+0x20>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef82:	2e00      	cmp	r6, #0
 800ef84:	d0f9      	beq.n	800ef7a <__sflush_r+0x1a>
 800ef86:	2300      	movs	r3, #0
 800ef88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef8c:	682f      	ldr	r7, [r5, #0]
 800ef8e:	6a21      	ldr	r1, [r4, #32]
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	d032      	beq.n	800effa <__sflush_r+0x9a>
 800ef94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	075a      	lsls	r2, r3, #29
 800ef9a:	d505      	bpl.n	800efa8 <__sflush_r+0x48>
 800ef9c:	6863      	ldr	r3, [r4, #4]
 800ef9e:	1ac0      	subs	r0, r0, r3
 800efa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efa2:	b10b      	cbz	r3, 800efa8 <__sflush_r+0x48>
 800efa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efa6:	1ac0      	subs	r0, r0, r3
 800efa8:	2300      	movs	r3, #0
 800efaa:	4602      	mov	r2, r0
 800efac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efae:	6a21      	ldr	r1, [r4, #32]
 800efb0:	4628      	mov	r0, r5
 800efb2:	47b0      	blx	r6
 800efb4:	1c43      	adds	r3, r0, #1
 800efb6:	89a3      	ldrh	r3, [r4, #12]
 800efb8:	d106      	bne.n	800efc8 <__sflush_r+0x68>
 800efba:	6829      	ldr	r1, [r5, #0]
 800efbc:	291d      	cmp	r1, #29
 800efbe:	d82b      	bhi.n	800f018 <__sflush_r+0xb8>
 800efc0:	4a29      	ldr	r2, [pc, #164]	; (800f068 <__sflush_r+0x108>)
 800efc2:	410a      	asrs	r2, r1
 800efc4:	07d6      	lsls	r6, r2, #31
 800efc6:	d427      	bmi.n	800f018 <__sflush_r+0xb8>
 800efc8:	2200      	movs	r2, #0
 800efca:	6062      	str	r2, [r4, #4]
 800efcc:	04d9      	lsls	r1, r3, #19
 800efce:	6922      	ldr	r2, [r4, #16]
 800efd0:	6022      	str	r2, [r4, #0]
 800efd2:	d504      	bpl.n	800efde <__sflush_r+0x7e>
 800efd4:	1c42      	adds	r2, r0, #1
 800efd6:	d101      	bne.n	800efdc <__sflush_r+0x7c>
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	b903      	cbnz	r3, 800efde <__sflush_r+0x7e>
 800efdc:	6560      	str	r0, [r4, #84]	; 0x54
 800efde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efe0:	602f      	str	r7, [r5, #0]
 800efe2:	2900      	cmp	r1, #0
 800efe4:	d0c9      	beq.n	800ef7a <__sflush_r+0x1a>
 800efe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efea:	4299      	cmp	r1, r3
 800efec:	d002      	beq.n	800eff4 <__sflush_r+0x94>
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff f8cc 	bl	800e18c <_free_r>
 800eff4:	2000      	movs	r0, #0
 800eff6:	6360      	str	r0, [r4, #52]	; 0x34
 800eff8:	e7c0      	b.n	800ef7c <__sflush_r+0x1c>
 800effa:	2301      	movs	r3, #1
 800effc:	4628      	mov	r0, r5
 800effe:	47b0      	blx	r6
 800f000:	1c41      	adds	r1, r0, #1
 800f002:	d1c8      	bne.n	800ef96 <__sflush_r+0x36>
 800f004:	682b      	ldr	r3, [r5, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d0c5      	beq.n	800ef96 <__sflush_r+0x36>
 800f00a:	2b1d      	cmp	r3, #29
 800f00c:	d001      	beq.n	800f012 <__sflush_r+0xb2>
 800f00e:	2b16      	cmp	r3, #22
 800f010:	d101      	bne.n	800f016 <__sflush_r+0xb6>
 800f012:	602f      	str	r7, [r5, #0]
 800f014:	e7b1      	b.n	800ef7a <__sflush_r+0x1a>
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f01c:	81a3      	strh	r3, [r4, #12]
 800f01e:	e7ad      	b.n	800ef7c <__sflush_r+0x1c>
 800f020:	690f      	ldr	r7, [r1, #16]
 800f022:	2f00      	cmp	r7, #0
 800f024:	d0a9      	beq.n	800ef7a <__sflush_r+0x1a>
 800f026:	0793      	lsls	r3, r2, #30
 800f028:	680e      	ldr	r6, [r1, #0]
 800f02a:	bf08      	it	eq
 800f02c:	694b      	ldreq	r3, [r1, #20]
 800f02e:	600f      	str	r7, [r1, #0]
 800f030:	bf18      	it	ne
 800f032:	2300      	movne	r3, #0
 800f034:	eba6 0807 	sub.w	r8, r6, r7
 800f038:	608b      	str	r3, [r1, #8]
 800f03a:	f1b8 0f00 	cmp.w	r8, #0
 800f03e:	dd9c      	ble.n	800ef7a <__sflush_r+0x1a>
 800f040:	6a21      	ldr	r1, [r4, #32]
 800f042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f044:	4643      	mov	r3, r8
 800f046:	463a      	mov	r2, r7
 800f048:	4628      	mov	r0, r5
 800f04a:	47b0      	blx	r6
 800f04c:	2800      	cmp	r0, #0
 800f04e:	dc06      	bgt.n	800f05e <__sflush_r+0xfe>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f056:	81a3      	strh	r3, [r4, #12]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05c:	e78e      	b.n	800ef7c <__sflush_r+0x1c>
 800f05e:	4407      	add	r7, r0
 800f060:	eba8 0800 	sub.w	r8, r8, r0
 800f064:	e7e9      	b.n	800f03a <__sflush_r+0xda>
 800f066:	bf00      	nop
 800f068:	dfbffffe 	.word	0xdfbffffe

0800f06c <_fflush_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	690b      	ldr	r3, [r1, #16]
 800f070:	4605      	mov	r5, r0
 800f072:	460c      	mov	r4, r1
 800f074:	b913      	cbnz	r3, 800f07c <_fflush_r+0x10>
 800f076:	2500      	movs	r5, #0
 800f078:	4628      	mov	r0, r5
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	b118      	cbz	r0, 800f086 <_fflush_r+0x1a>
 800f07e:	6a03      	ldr	r3, [r0, #32]
 800f080:	b90b      	cbnz	r3, 800f086 <_fflush_r+0x1a>
 800f082:	f7fe f8e7 	bl	800d254 <__sinit>
 800f086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d0f3      	beq.n	800f076 <_fflush_r+0xa>
 800f08e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f090:	07d0      	lsls	r0, r2, #31
 800f092:	d404      	bmi.n	800f09e <_fflush_r+0x32>
 800f094:	0599      	lsls	r1, r3, #22
 800f096:	d402      	bmi.n	800f09e <_fflush_r+0x32>
 800f098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f09a:	f7fe f9da 	bl	800d452 <__retarget_lock_acquire_recursive>
 800f09e:	4628      	mov	r0, r5
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	f7ff ff5d 	bl	800ef60 <__sflush_r>
 800f0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0a8:	07da      	lsls	r2, r3, #31
 800f0aa:	4605      	mov	r5, r0
 800f0ac:	d4e4      	bmi.n	800f078 <_fflush_r+0xc>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	059b      	lsls	r3, r3, #22
 800f0b2:	d4e1      	bmi.n	800f078 <_fflush_r+0xc>
 800f0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0b6:	f7fe f9cd 	bl	800d454 <__retarget_lock_release_recursive>
 800f0ba:	e7dd      	b.n	800f078 <_fflush_r+0xc>

0800f0bc <__malloc_lock>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	; (800f0c4 <__malloc_lock+0x8>)
 800f0be:	f7fe b9c8 	b.w	800d452 <__retarget_lock_acquire_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	20009e3c 	.word	0x20009e3c

0800f0c8 <__malloc_unlock>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__malloc_unlock+0x8>)
 800f0ca:	f7fe b9c3 	b.w	800d454 <__retarget_lock_release_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	20009e3c 	.word	0x20009e3c

0800f0d4 <_Balloc>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	69c6      	ldr	r6, [r0, #28]
 800f0d8:	4604      	mov	r4, r0
 800f0da:	460d      	mov	r5, r1
 800f0dc:	b976      	cbnz	r6, 800f0fc <_Balloc+0x28>
 800f0de:	2010      	movs	r0, #16
 800f0e0:	f7ff fd0e 	bl	800eb00 <malloc>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	61e0      	str	r0, [r4, #28]
 800f0e8:	b920      	cbnz	r0, 800f0f4 <_Balloc+0x20>
 800f0ea:	4b18      	ldr	r3, [pc, #96]	; (800f14c <_Balloc+0x78>)
 800f0ec:	4818      	ldr	r0, [pc, #96]	; (800f150 <_Balloc+0x7c>)
 800f0ee:	216b      	movs	r1, #107	; 0x6b
 800f0f0:	f7fe f9b2 	bl	800d458 <__assert_func>
 800f0f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0f8:	6006      	str	r6, [r0, #0]
 800f0fa:	60c6      	str	r6, [r0, #12]
 800f0fc:	69e6      	ldr	r6, [r4, #28]
 800f0fe:	68f3      	ldr	r3, [r6, #12]
 800f100:	b183      	cbz	r3, 800f124 <_Balloc+0x50>
 800f102:	69e3      	ldr	r3, [r4, #28]
 800f104:	68db      	ldr	r3, [r3, #12]
 800f106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f10a:	b9b8      	cbnz	r0, 800f13c <_Balloc+0x68>
 800f10c:	2101      	movs	r1, #1
 800f10e:	fa01 f605 	lsl.w	r6, r1, r5
 800f112:	1d72      	adds	r2, r6, #5
 800f114:	0092      	lsls	r2, r2, #2
 800f116:	4620      	mov	r0, r4
 800f118:	f000 fe25 	bl	800fd66 <_calloc_r>
 800f11c:	b160      	cbz	r0, 800f138 <_Balloc+0x64>
 800f11e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f122:	e00e      	b.n	800f142 <_Balloc+0x6e>
 800f124:	2221      	movs	r2, #33	; 0x21
 800f126:	2104      	movs	r1, #4
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 fe1c 	bl	800fd66 <_calloc_r>
 800f12e:	69e3      	ldr	r3, [r4, #28]
 800f130:	60f0      	str	r0, [r6, #12]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d1e4      	bne.n	800f102 <_Balloc+0x2e>
 800f138:	2000      	movs	r0, #0
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	6802      	ldr	r2, [r0, #0]
 800f13e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f142:	2300      	movs	r3, #0
 800f144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f148:	e7f7      	b.n	800f13a <_Balloc+0x66>
 800f14a:	bf00      	nop
 800f14c:	08014f2f 	.word	0x08014f2f
 800f150:	08014fdb 	.word	0x08014fdb

0800f154 <_Bfree>:
 800f154:	b570      	push	{r4, r5, r6, lr}
 800f156:	69c6      	ldr	r6, [r0, #28]
 800f158:	4605      	mov	r5, r0
 800f15a:	460c      	mov	r4, r1
 800f15c:	b976      	cbnz	r6, 800f17c <_Bfree+0x28>
 800f15e:	2010      	movs	r0, #16
 800f160:	f7ff fcce 	bl	800eb00 <malloc>
 800f164:	4602      	mov	r2, r0
 800f166:	61e8      	str	r0, [r5, #28]
 800f168:	b920      	cbnz	r0, 800f174 <_Bfree+0x20>
 800f16a:	4b09      	ldr	r3, [pc, #36]	; (800f190 <_Bfree+0x3c>)
 800f16c:	4809      	ldr	r0, [pc, #36]	; (800f194 <_Bfree+0x40>)
 800f16e:	218f      	movs	r1, #143	; 0x8f
 800f170:	f7fe f972 	bl	800d458 <__assert_func>
 800f174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f178:	6006      	str	r6, [r0, #0]
 800f17a:	60c6      	str	r6, [r0, #12]
 800f17c:	b13c      	cbz	r4, 800f18e <_Bfree+0x3a>
 800f17e:	69eb      	ldr	r3, [r5, #28]
 800f180:	6862      	ldr	r2, [r4, #4]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f188:	6021      	str	r1, [r4, #0]
 800f18a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f18e:	bd70      	pop	{r4, r5, r6, pc}
 800f190:	08014f2f 	.word	0x08014f2f
 800f194:	08014fdb 	.word	0x08014fdb

0800f198 <__multadd>:
 800f198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	690d      	ldr	r5, [r1, #16]
 800f19e:	4607      	mov	r7, r0
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	461e      	mov	r6, r3
 800f1a4:	f101 0c14 	add.w	ip, r1, #20
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	f8dc 3000 	ldr.w	r3, [ip]
 800f1ae:	b299      	uxth	r1, r3
 800f1b0:	fb02 6101 	mla	r1, r2, r1, r6
 800f1b4:	0c1e      	lsrs	r6, r3, #16
 800f1b6:	0c0b      	lsrs	r3, r1, #16
 800f1b8:	fb02 3306 	mla	r3, r2, r6, r3
 800f1bc:	b289      	uxth	r1, r1
 800f1be:	3001      	adds	r0, #1
 800f1c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1c4:	4285      	cmp	r5, r0
 800f1c6:	f84c 1b04 	str.w	r1, [ip], #4
 800f1ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1ce:	dcec      	bgt.n	800f1aa <__multadd+0x12>
 800f1d0:	b30e      	cbz	r6, 800f216 <__multadd+0x7e>
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	42ab      	cmp	r3, r5
 800f1d6:	dc19      	bgt.n	800f20c <__multadd+0x74>
 800f1d8:	6861      	ldr	r1, [r4, #4]
 800f1da:	4638      	mov	r0, r7
 800f1dc:	3101      	adds	r1, #1
 800f1de:	f7ff ff79 	bl	800f0d4 <_Balloc>
 800f1e2:	4680      	mov	r8, r0
 800f1e4:	b928      	cbnz	r0, 800f1f2 <__multadd+0x5a>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	4b0c      	ldr	r3, [pc, #48]	; (800f21c <__multadd+0x84>)
 800f1ea:	480d      	ldr	r0, [pc, #52]	; (800f220 <__multadd+0x88>)
 800f1ec:	21ba      	movs	r1, #186	; 0xba
 800f1ee:	f7fe f933 	bl	800d458 <__assert_func>
 800f1f2:	6922      	ldr	r2, [r4, #16]
 800f1f4:	3202      	adds	r2, #2
 800f1f6:	f104 010c 	add.w	r1, r4, #12
 800f1fa:	0092      	lsls	r2, r2, #2
 800f1fc:	300c      	adds	r0, #12
 800f1fe:	f000 fd9d 	bl	800fd3c <memcpy>
 800f202:	4621      	mov	r1, r4
 800f204:	4638      	mov	r0, r7
 800f206:	f7ff ffa5 	bl	800f154 <_Bfree>
 800f20a:	4644      	mov	r4, r8
 800f20c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f210:	3501      	adds	r5, #1
 800f212:	615e      	str	r6, [r3, #20]
 800f214:	6125      	str	r5, [r4, #16]
 800f216:	4620      	mov	r0, r4
 800f218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f21c:	08014f9e 	.word	0x08014f9e
 800f220:	08014fdb 	.word	0x08014fdb

0800f224 <__hi0bits>:
 800f224:	0c03      	lsrs	r3, r0, #16
 800f226:	041b      	lsls	r3, r3, #16
 800f228:	b9d3      	cbnz	r3, 800f260 <__hi0bits+0x3c>
 800f22a:	0400      	lsls	r0, r0, #16
 800f22c:	2310      	movs	r3, #16
 800f22e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f232:	bf04      	itt	eq
 800f234:	0200      	lsleq	r0, r0, #8
 800f236:	3308      	addeq	r3, #8
 800f238:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f23c:	bf04      	itt	eq
 800f23e:	0100      	lsleq	r0, r0, #4
 800f240:	3304      	addeq	r3, #4
 800f242:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f246:	bf04      	itt	eq
 800f248:	0080      	lsleq	r0, r0, #2
 800f24a:	3302      	addeq	r3, #2
 800f24c:	2800      	cmp	r0, #0
 800f24e:	db05      	blt.n	800f25c <__hi0bits+0x38>
 800f250:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f254:	f103 0301 	add.w	r3, r3, #1
 800f258:	bf08      	it	eq
 800f25a:	2320      	moveq	r3, #32
 800f25c:	4618      	mov	r0, r3
 800f25e:	4770      	bx	lr
 800f260:	2300      	movs	r3, #0
 800f262:	e7e4      	b.n	800f22e <__hi0bits+0xa>

0800f264 <__lo0bits>:
 800f264:	6803      	ldr	r3, [r0, #0]
 800f266:	f013 0207 	ands.w	r2, r3, #7
 800f26a:	d00c      	beq.n	800f286 <__lo0bits+0x22>
 800f26c:	07d9      	lsls	r1, r3, #31
 800f26e:	d422      	bmi.n	800f2b6 <__lo0bits+0x52>
 800f270:	079a      	lsls	r2, r3, #30
 800f272:	bf49      	itett	mi
 800f274:	085b      	lsrmi	r3, r3, #1
 800f276:	089b      	lsrpl	r3, r3, #2
 800f278:	6003      	strmi	r3, [r0, #0]
 800f27a:	2201      	movmi	r2, #1
 800f27c:	bf5c      	itt	pl
 800f27e:	6003      	strpl	r3, [r0, #0]
 800f280:	2202      	movpl	r2, #2
 800f282:	4610      	mov	r0, r2
 800f284:	4770      	bx	lr
 800f286:	b299      	uxth	r1, r3
 800f288:	b909      	cbnz	r1, 800f28e <__lo0bits+0x2a>
 800f28a:	0c1b      	lsrs	r3, r3, #16
 800f28c:	2210      	movs	r2, #16
 800f28e:	b2d9      	uxtb	r1, r3
 800f290:	b909      	cbnz	r1, 800f296 <__lo0bits+0x32>
 800f292:	3208      	adds	r2, #8
 800f294:	0a1b      	lsrs	r3, r3, #8
 800f296:	0719      	lsls	r1, r3, #28
 800f298:	bf04      	itt	eq
 800f29a:	091b      	lsreq	r3, r3, #4
 800f29c:	3204      	addeq	r2, #4
 800f29e:	0799      	lsls	r1, r3, #30
 800f2a0:	bf04      	itt	eq
 800f2a2:	089b      	lsreq	r3, r3, #2
 800f2a4:	3202      	addeq	r2, #2
 800f2a6:	07d9      	lsls	r1, r3, #31
 800f2a8:	d403      	bmi.n	800f2b2 <__lo0bits+0x4e>
 800f2aa:	085b      	lsrs	r3, r3, #1
 800f2ac:	f102 0201 	add.w	r2, r2, #1
 800f2b0:	d003      	beq.n	800f2ba <__lo0bits+0x56>
 800f2b2:	6003      	str	r3, [r0, #0]
 800f2b4:	e7e5      	b.n	800f282 <__lo0bits+0x1e>
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	e7e3      	b.n	800f282 <__lo0bits+0x1e>
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	e7e1      	b.n	800f282 <__lo0bits+0x1e>
	...

0800f2c0 <__i2b>:
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	460c      	mov	r4, r1
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	f7ff ff05 	bl	800f0d4 <_Balloc>
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	b928      	cbnz	r0, 800f2da <__i2b+0x1a>
 800f2ce:	4b05      	ldr	r3, [pc, #20]	; (800f2e4 <__i2b+0x24>)
 800f2d0:	4805      	ldr	r0, [pc, #20]	; (800f2e8 <__i2b+0x28>)
 800f2d2:	f240 1145 	movw	r1, #325	; 0x145
 800f2d6:	f7fe f8bf 	bl	800d458 <__assert_func>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	6144      	str	r4, [r0, #20]
 800f2de:	6103      	str	r3, [r0, #16]
 800f2e0:	bd10      	pop	{r4, pc}
 800f2e2:	bf00      	nop
 800f2e4:	08014f9e 	.word	0x08014f9e
 800f2e8:	08014fdb 	.word	0x08014fdb

0800f2ec <__multiply>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	4691      	mov	r9, r2
 800f2f2:	690a      	ldr	r2, [r1, #16]
 800f2f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	bfb8      	it	lt
 800f2fc:	460b      	movlt	r3, r1
 800f2fe:	460c      	mov	r4, r1
 800f300:	bfbc      	itt	lt
 800f302:	464c      	movlt	r4, r9
 800f304:	4699      	movlt	r9, r3
 800f306:	6927      	ldr	r7, [r4, #16]
 800f308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f30c:	68a3      	ldr	r3, [r4, #8]
 800f30e:	6861      	ldr	r1, [r4, #4]
 800f310:	eb07 060a 	add.w	r6, r7, sl
 800f314:	42b3      	cmp	r3, r6
 800f316:	b085      	sub	sp, #20
 800f318:	bfb8      	it	lt
 800f31a:	3101      	addlt	r1, #1
 800f31c:	f7ff feda 	bl	800f0d4 <_Balloc>
 800f320:	b930      	cbnz	r0, 800f330 <__multiply+0x44>
 800f322:	4602      	mov	r2, r0
 800f324:	4b44      	ldr	r3, [pc, #272]	; (800f438 <__multiply+0x14c>)
 800f326:	4845      	ldr	r0, [pc, #276]	; (800f43c <__multiply+0x150>)
 800f328:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f32c:	f7fe f894 	bl	800d458 <__assert_func>
 800f330:	f100 0514 	add.w	r5, r0, #20
 800f334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f338:	462b      	mov	r3, r5
 800f33a:	2200      	movs	r2, #0
 800f33c:	4543      	cmp	r3, r8
 800f33e:	d321      	bcc.n	800f384 <__multiply+0x98>
 800f340:	f104 0314 	add.w	r3, r4, #20
 800f344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f348:	f109 0314 	add.w	r3, r9, #20
 800f34c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f350:	9202      	str	r2, [sp, #8]
 800f352:	1b3a      	subs	r2, r7, r4
 800f354:	3a15      	subs	r2, #21
 800f356:	f022 0203 	bic.w	r2, r2, #3
 800f35a:	3204      	adds	r2, #4
 800f35c:	f104 0115 	add.w	r1, r4, #21
 800f360:	428f      	cmp	r7, r1
 800f362:	bf38      	it	cc
 800f364:	2204      	movcc	r2, #4
 800f366:	9201      	str	r2, [sp, #4]
 800f368:	9a02      	ldr	r2, [sp, #8]
 800f36a:	9303      	str	r3, [sp, #12]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d80c      	bhi.n	800f38a <__multiply+0x9e>
 800f370:	2e00      	cmp	r6, #0
 800f372:	dd03      	ble.n	800f37c <__multiply+0x90>
 800f374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d05b      	beq.n	800f434 <__multiply+0x148>
 800f37c:	6106      	str	r6, [r0, #16]
 800f37e:	b005      	add	sp, #20
 800f380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f384:	f843 2b04 	str.w	r2, [r3], #4
 800f388:	e7d8      	b.n	800f33c <__multiply+0x50>
 800f38a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f38e:	f1ba 0f00 	cmp.w	sl, #0
 800f392:	d024      	beq.n	800f3de <__multiply+0xf2>
 800f394:	f104 0e14 	add.w	lr, r4, #20
 800f398:	46a9      	mov	r9, r5
 800f39a:	f04f 0c00 	mov.w	ip, #0
 800f39e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3a2:	f8d9 1000 	ldr.w	r1, [r9]
 800f3a6:	fa1f fb82 	uxth.w	fp, r2
 800f3aa:	b289      	uxth	r1, r1
 800f3ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800f3b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f3b8:	4461      	add	r1, ip
 800f3ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3be:	fb0a c20b 	mla	r2, sl, fp, ip
 800f3c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3c6:	b289      	uxth	r1, r1
 800f3c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3cc:	4577      	cmp	r7, lr
 800f3ce:	f849 1b04 	str.w	r1, [r9], #4
 800f3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3d6:	d8e2      	bhi.n	800f39e <__multiply+0xb2>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	f845 c002 	str.w	ip, [r5, r2]
 800f3de:	9a03      	ldr	r2, [sp, #12]
 800f3e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3e4:	3304      	adds	r3, #4
 800f3e6:	f1b9 0f00 	cmp.w	r9, #0
 800f3ea:	d021      	beq.n	800f430 <__multiply+0x144>
 800f3ec:	6829      	ldr	r1, [r5, #0]
 800f3ee:	f104 0c14 	add.w	ip, r4, #20
 800f3f2:	46ae      	mov	lr, r5
 800f3f4:	f04f 0a00 	mov.w	sl, #0
 800f3f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f3fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f400:	fb09 220b 	mla	r2, r9, fp, r2
 800f404:	4452      	add	r2, sl
 800f406:	b289      	uxth	r1, r1
 800f408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f40c:	f84e 1b04 	str.w	r1, [lr], #4
 800f410:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f418:	f8be 1000 	ldrh.w	r1, [lr]
 800f41c:	fb09 110a 	mla	r1, r9, sl, r1
 800f420:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f424:	4567      	cmp	r7, ip
 800f426:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f42a:	d8e5      	bhi.n	800f3f8 <__multiply+0x10c>
 800f42c:	9a01      	ldr	r2, [sp, #4]
 800f42e:	50a9      	str	r1, [r5, r2]
 800f430:	3504      	adds	r5, #4
 800f432:	e799      	b.n	800f368 <__multiply+0x7c>
 800f434:	3e01      	subs	r6, #1
 800f436:	e79b      	b.n	800f370 <__multiply+0x84>
 800f438:	08014f9e 	.word	0x08014f9e
 800f43c:	08014fdb 	.word	0x08014fdb

0800f440 <__pow5mult>:
 800f440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f444:	4615      	mov	r5, r2
 800f446:	f012 0203 	ands.w	r2, r2, #3
 800f44a:	4606      	mov	r6, r0
 800f44c:	460f      	mov	r7, r1
 800f44e:	d007      	beq.n	800f460 <__pow5mult+0x20>
 800f450:	4c25      	ldr	r4, [pc, #148]	; (800f4e8 <__pow5mult+0xa8>)
 800f452:	3a01      	subs	r2, #1
 800f454:	2300      	movs	r3, #0
 800f456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f45a:	f7ff fe9d 	bl	800f198 <__multadd>
 800f45e:	4607      	mov	r7, r0
 800f460:	10ad      	asrs	r5, r5, #2
 800f462:	d03d      	beq.n	800f4e0 <__pow5mult+0xa0>
 800f464:	69f4      	ldr	r4, [r6, #28]
 800f466:	b97c      	cbnz	r4, 800f488 <__pow5mult+0x48>
 800f468:	2010      	movs	r0, #16
 800f46a:	f7ff fb49 	bl	800eb00 <malloc>
 800f46e:	4602      	mov	r2, r0
 800f470:	61f0      	str	r0, [r6, #28]
 800f472:	b928      	cbnz	r0, 800f480 <__pow5mult+0x40>
 800f474:	4b1d      	ldr	r3, [pc, #116]	; (800f4ec <__pow5mult+0xac>)
 800f476:	481e      	ldr	r0, [pc, #120]	; (800f4f0 <__pow5mult+0xb0>)
 800f478:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f47c:	f7fd ffec 	bl	800d458 <__assert_func>
 800f480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f484:	6004      	str	r4, [r0, #0]
 800f486:	60c4      	str	r4, [r0, #12]
 800f488:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f490:	b94c      	cbnz	r4, 800f4a6 <__pow5mult+0x66>
 800f492:	f240 2171 	movw	r1, #625	; 0x271
 800f496:	4630      	mov	r0, r6
 800f498:	f7ff ff12 	bl	800f2c0 <__i2b>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	f04f 0900 	mov.w	r9, #0
 800f4aa:	07eb      	lsls	r3, r5, #31
 800f4ac:	d50a      	bpl.n	800f4c4 <__pow5mult+0x84>
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f7ff ff1a 	bl	800f2ec <__multiply>
 800f4b8:	4639      	mov	r1, r7
 800f4ba:	4680      	mov	r8, r0
 800f4bc:	4630      	mov	r0, r6
 800f4be:	f7ff fe49 	bl	800f154 <_Bfree>
 800f4c2:	4647      	mov	r7, r8
 800f4c4:	106d      	asrs	r5, r5, #1
 800f4c6:	d00b      	beq.n	800f4e0 <__pow5mult+0xa0>
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	b938      	cbnz	r0, 800f4dc <__pow5mult+0x9c>
 800f4cc:	4622      	mov	r2, r4
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	f7ff ff0b 	bl	800f2ec <__multiply>
 800f4d6:	6020      	str	r0, [r4, #0]
 800f4d8:	f8c0 9000 	str.w	r9, [r0]
 800f4dc:	4604      	mov	r4, r0
 800f4de:	e7e4      	b.n	800f4aa <__pow5mult+0x6a>
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e6:	bf00      	nop
 800f4e8:	08015128 	.word	0x08015128
 800f4ec:	08014f2f 	.word	0x08014f2f
 800f4f0:	08014fdb 	.word	0x08014fdb

0800f4f4 <__lshift>:
 800f4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	460c      	mov	r4, r1
 800f4fa:	6849      	ldr	r1, [r1, #4]
 800f4fc:	6923      	ldr	r3, [r4, #16]
 800f4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f502:	68a3      	ldr	r3, [r4, #8]
 800f504:	4607      	mov	r7, r0
 800f506:	4691      	mov	r9, r2
 800f508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f50c:	f108 0601 	add.w	r6, r8, #1
 800f510:	42b3      	cmp	r3, r6
 800f512:	db0b      	blt.n	800f52c <__lshift+0x38>
 800f514:	4638      	mov	r0, r7
 800f516:	f7ff fddd 	bl	800f0d4 <_Balloc>
 800f51a:	4605      	mov	r5, r0
 800f51c:	b948      	cbnz	r0, 800f532 <__lshift+0x3e>
 800f51e:	4602      	mov	r2, r0
 800f520:	4b28      	ldr	r3, [pc, #160]	; (800f5c4 <__lshift+0xd0>)
 800f522:	4829      	ldr	r0, [pc, #164]	; (800f5c8 <__lshift+0xd4>)
 800f524:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f528:	f7fd ff96 	bl	800d458 <__assert_func>
 800f52c:	3101      	adds	r1, #1
 800f52e:	005b      	lsls	r3, r3, #1
 800f530:	e7ee      	b.n	800f510 <__lshift+0x1c>
 800f532:	2300      	movs	r3, #0
 800f534:	f100 0114 	add.w	r1, r0, #20
 800f538:	f100 0210 	add.w	r2, r0, #16
 800f53c:	4618      	mov	r0, r3
 800f53e:	4553      	cmp	r3, sl
 800f540:	db33      	blt.n	800f5aa <__lshift+0xb6>
 800f542:	6920      	ldr	r0, [r4, #16]
 800f544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f548:	f104 0314 	add.w	r3, r4, #20
 800f54c:	f019 091f 	ands.w	r9, r9, #31
 800f550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f558:	d02b      	beq.n	800f5b2 <__lshift+0xbe>
 800f55a:	f1c9 0e20 	rsb	lr, r9, #32
 800f55e:	468a      	mov	sl, r1
 800f560:	2200      	movs	r2, #0
 800f562:	6818      	ldr	r0, [r3, #0]
 800f564:	fa00 f009 	lsl.w	r0, r0, r9
 800f568:	4310      	orrs	r0, r2
 800f56a:	f84a 0b04 	str.w	r0, [sl], #4
 800f56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f572:	459c      	cmp	ip, r3
 800f574:	fa22 f20e 	lsr.w	r2, r2, lr
 800f578:	d8f3      	bhi.n	800f562 <__lshift+0x6e>
 800f57a:	ebac 0304 	sub.w	r3, ip, r4
 800f57e:	3b15      	subs	r3, #21
 800f580:	f023 0303 	bic.w	r3, r3, #3
 800f584:	3304      	adds	r3, #4
 800f586:	f104 0015 	add.w	r0, r4, #21
 800f58a:	4584      	cmp	ip, r0
 800f58c:	bf38      	it	cc
 800f58e:	2304      	movcc	r3, #4
 800f590:	50ca      	str	r2, [r1, r3]
 800f592:	b10a      	cbz	r2, 800f598 <__lshift+0xa4>
 800f594:	f108 0602 	add.w	r6, r8, #2
 800f598:	3e01      	subs	r6, #1
 800f59a:	4638      	mov	r0, r7
 800f59c:	612e      	str	r6, [r5, #16]
 800f59e:	4621      	mov	r1, r4
 800f5a0:	f7ff fdd8 	bl	800f154 <_Bfree>
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	e7c5      	b.n	800f53e <__lshift+0x4a>
 800f5b2:	3904      	subs	r1, #4
 800f5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5bc:	459c      	cmp	ip, r3
 800f5be:	d8f9      	bhi.n	800f5b4 <__lshift+0xc0>
 800f5c0:	e7ea      	b.n	800f598 <__lshift+0xa4>
 800f5c2:	bf00      	nop
 800f5c4:	08014f9e 	.word	0x08014f9e
 800f5c8:	08014fdb 	.word	0x08014fdb

0800f5cc <__mcmp>:
 800f5cc:	b530      	push	{r4, r5, lr}
 800f5ce:	6902      	ldr	r2, [r0, #16]
 800f5d0:	690c      	ldr	r4, [r1, #16]
 800f5d2:	1b12      	subs	r2, r2, r4
 800f5d4:	d10e      	bne.n	800f5f4 <__mcmp+0x28>
 800f5d6:	f100 0314 	add.w	r3, r0, #20
 800f5da:	3114      	adds	r1, #20
 800f5dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5ec:	42a5      	cmp	r5, r4
 800f5ee:	d003      	beq.n	800f5f8 <__mcmp+0x2c>
 800f5f0:	d305      	bcc.n	800f5fe <__mcmp+0x32>
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	bd30      	pop	{r4, r5, pc}
 800f5f8:	4283      	cmp	r3, r0
 800f5fa:	d3f3      	bcc.n	800f5e4 <__mcmp+0x18>
 800f5fc:	e7fa      	b.n	800f5f4 <__mcmp+0x28>
 800f5fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f602:	e7f7      	b.n	800f5f4 <__mcmp+0x28>

0800f604 <__mdiff>:
 800f604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f608:	460c      	mov	r4, r1
 800f60a:	4606      	mov	r6, r0
 800f60c:	4611      	mov	r1, r2
 800f60e:	4620      	mov	r0, r4
 800f610:	4690      	mov	r8, r2
 800f612:	f7ff ffdb 	bl	800f5cc <__mcmp>
 800f616:	1e05      	subs	r5, r0, #0
 800f618:	d110      	bne.n	800f63c <__mdiff+0x38>
 800f61a:	4629      	mov	r1, r5
 800f61c:	4630      	mov	r0, r6
 800f61e:	f7ff fd59 	bl	800f0d4 <_Balloc>
 800f622:	b930      	cbnz	r0, 800f632 <__mdiff+0x2e>
 800f624:	4b3a      	ldr	r3, [pc, #232]	; (800f710 <__mdiff+0x10c>)
 800f626:	4602      	mov	r2, r0
 800f628:	f240 2137 	movw	r1, #567	; 0x237
 800f62c:	4839      	ldr	r0, [pc, #228]	; (800f714 <__mdiff+0x110>)
 800f62e:	f7fd ff13 	bl	800d458 <__assert_func>
 800f632:	2301      	movs	r3, #1
 800f634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f63c:	bfa4      	itt	ge
 800f63e:	4643      	movge	r3, r8
 800f640:	46a0      	movge	r8, r4
 800f642:	4630      	mov	r0, r6
 800f644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f648:	bfa6      	itte	ge
 800f64a:	461c      	movge	r4, r3
 800f64c:	2500      	movge	r5, #0
 800f64e:	2501      	movlt	r5, #1
 800f650:	f7ff fd40 	bl	800f0d4 <_Balloc>
 800f654:	b920      	cbnz	r0, 800f660 <__mdiff+0x5c>
 800f656:	4b2e      	ldr	r3, [pc, #184]	; (800f710 <__mdiff+0x10c>)
 800f658:	4602      	mov	r2, r0
 800f65a:	f240 2145 	movw	r1, #581	; 0x245
 800f65e:	e7e5      	b.n	800f62c <__mdiff+0x28>
 800f660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f664:	6926      	ldr	r6, [r4, #16]
 800f666:	60c5      	str	r5, [r0, #12]
 800f668:	f104 0914 	add.w	r9, r4, #20
 800f66c:	f108 0514 	add.w	r5, r8, #20
 800f670:	f100 0e14 	add.w	lr, r0, #20
 800f674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f67c:	f108 0210 	add.w	r2, r8, #16
 800f680:	46f2      	mov	sl, lr
 800f682:	2100      	movs	r1, #0
 800f684:	f859 3b04 	ldr.w	r3, [r9], #4
 800f688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f68c:	fa11 f88b 	uxtah	r8, r1, fp
 800f690:	b299      	uxth	r1, r3
 800f692:	0c1b      	lsrs	r3, r3, #16
 800f694:	eba8 0801 	sub.w	r8, r8, r1
 800f698:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f69c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6a0:	fa1f f888 	uxth.w	r8, r8
 800f6a4:	1419      	asrs	r1, r3, #16
 800f6a6:	454e      	cmp	r6, r9
 800f6a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6ac:	f84a 3b04 	str.w	r3, [sl], #4
 800f6b0:	d8e8      	bhi.n	800f684 <__mdiff+0x80>
 800f6b2:	1b33      	subs	r3, r6, r4
 800f6b4:	3b15      	subs	r3, #21
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	3304      	adds	r3, #4
 800f6bc:	3415      	adds	r4, #21
 800f6be:	42a6      	cmp	r6, r4
 800f6c0:	bf38      	it	cc
 800f6c2:	2304      	movcc	r3, #4
 800f6c4:	441d      	add	r5, r3
 800f6c6:	4473      	add	r3, lr
 800f6c8:	469e      	mov	lr, r3
 800f6ca:	462e      	mov	r6, r5
 800f6cc:	4566      	cmp	r6, ip
 800f6ce:	d30e      	bcc.n	800f6ee <__mdiff+0xea>
 800f6d0:	f10c 0203 	add.w	r2, ip, #3
 800f6d4:	1b52      	subs	r2, r2, r5
 800f6d6:	f022 0203 	bic.w	r2, r2, #3
 800f6da:	3d03      	subs	r5, #3
 800f6dc:	45ac      	cmp	ip, r5
 800f6de:	bf38      	it	cc
 800f6e0:	2200      	movcc	r2, #0
 800f6e2:	4413      	add	r3, r2
 800f6e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6e8:	b17a      	cbz	r2, 800f70a <__mdiff+0x106>
 800f6ea:	6107      	str	r7, [r0, #16]
 800f6ec:	e7a4      	b.n	800f638 <__mdiff+0x34>
 800f6ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6f2:	fa11 f288 	uxtah	r2, r1, r8
 800f6f6:	1414      	asrs	r4, r2, #16
 800f6f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6fc:	b292      	uxth	r2, r2
 800f6fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f702:	f84e 2b04 	str.w	r2, [lr], #4
 800f706:	1421      	asrs	r1, r4, #16
 800f708:	e7e0      	b.n	800f6cc <__mdiff+0xc8>
 800f70a:	3f01      	subs	r7, #1
 800f70c:	e7ea      	b.n	800f6e4 <__mdiff+0xe0>
 800f70e:	bf00      	nop
 800f710:	08014f9e 	.word	0x08014f9e
 800f714:	08014fdb 	.word	0x08014fdb

0800f718 <__d2b>:
 800f718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f71c:	460f      	mov	r7, r1
 800f71e:	2101      	movs	r1, #1
 800f720:	ec59 8b10 	vmov	r8, r9, d0
 800f724:	4616      	mov	r6, r2
 800f726:	f7ff fcd5 	bl	800f0d4 <_Balloc>
 800f72a:	4604      	mov	r4, r0
 800f72c:	b930      	cbnz	r0, 800f73c <__d2b+0x24>
 800f72e:	4602      	mov	r2, r0
 800f730:	4b24      	ldr	r3, [pc, #144]	; (800f7c4 <__d2b+0xac>)
 800f732:	4825      	ldr	r0, [pc, #148]	; (800f7c8 <__d2b+0xb0>)
 800f734:	f240 310f 	movw	r1, #783	; 0x30f
 800f738:	f7fd fe8e 	bl	800d458 <__assert_func>
 800f73c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f744:	bb2d      	cbnz	r5, 800f792 <__d2b+0x7a>
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	f1b8 0300 	subs.w	r3, r8, #0
 800f74c:	d026      	beq.n	800f79c <__d2b+0x84>
 800f74e:	4668      	mov	r0, sp
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	f7ff fd87 	bl	800f264 <__lo0bits>
 800f756:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f75a:	b1e8      	cbz	r0, 800f798 <__d2b+0x80>
 800f75c:	f1c0 0320 	rsb	r3, r0, #32
 800f760:	fa02 f303 	lsl.w	r3, r2, r3
 800f764:	430b      	orrs	r3, r1
 800f766:	40c2      	lsrs	r2, r0
 800f768:	6163      	str	r3, [r4, #20]
 800f76a:	9201      	str	r2, [sp, #4]
 800f76c:	9b01      	ldr	r3, [sp, #4]
 800f76e:	61a3      	str	r3, [r4, #24]
 800f770:	2b00      	cmp	r3, #0
 800f772:	bf14      	ite	ne
 800f774:	2202      	movne	r2, #2
 800f776:	2201      	moveq	r2, #1
 800f778:	6122      	str	r2, [r4, #16]
 800f77a:	b1bd      	cbz	r5, 800f7ac <__d2b+0x94>
 800f77c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f780:	4405      	add	r5, r0
 800f782:	603d      	str	r5, [r7, #0]
 800f784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f788:	6030      	str	r0, [r6, #0]
 800f78a:	4620      	mov	r0, r4
 800f78c:	b003      	add	sp, #12
 800f78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f796:	e7d6      	b.n	800f746 <__d2b+0x2e>
 800f798:	6161      	str	r1, [r4, #20]
 800f79a:	e7e7      	b.n	800f76c <__d2b+0x54>
 800f79c:	a801      	add	r0, sp, #4
 800f79e:	f7ff fd61 	bl	800f264 <__lo0bits>
 800f7a2:	9b01      	ldr	r3, [sp, #4]
 800f7a4:	6163      	str	r3, [r4, #20]
 800f7a6:	3020      	adds	r0, #32
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	e7e5      	b.n	800f778 <__d2b+0x60>
 800f7ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f7b4:	6038      	str	r0, [r7, #0]
 800f7b6:	6918      	ldr	r0, [r3, #16]
 800f7b8:	f7ff fd34 	bl	800f224 <__hi0bits>
 800f7bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7c0:	e7e2      	b.n	800f788 <__d2b+0x70>
 800f7c2:	bf00      	nop
 800f7c4:	08014f9e 	.word	0x08014f9e
 800f7c8:	08014fdb 	.word	0x08014fdb

0800f7cc <fiprintf>:
 800f7cc:	b40e      	push	{r1, r2, r3}
 800f7ce:	b503      	push	{r0, r1, lr}
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	ab03      	add	r3, sp, #12
 800f7d4:	4805      	ldr	r0, [pc, #20]	; (800f7ec <fiprintf+0x20>)
 800f7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7da:	6800      	ldr	r0, [r0, #0]
 800f7dc:	9301      	str	r3, [sp, #4]
 800f7de:	f7ff f875 	bl	800e8cc <_vfiprintf_r>
 800f7e2:	b002      	add	sp, #8
 800f7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e8:	b003      	add	sp, #12
 800f7ea:	4770      	bx	lr
 800f7ec:	2000009c 	.word	0x2000009c

0800f7f0 <__submore>:
 800f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7fc:	4299      	cmp	r1, r3
 800f7fe:	d11d      	bne.n	800f83c <__submore+0x4c>
 800f800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f804:	f7ff f9a4 	bl	800eb50 <_malloc_r>
 800f808:	b918      	cbnz	r0, 800f812 <__submore+0x22>
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f816:	63a3      	str	r3, [r4, #56]	; 0x38
 800f818:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f81c:	6360      	str	r0, [r4, #52]	; 0x34
 800f81e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f822:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f826:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f82a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f82e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f832:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f836:	6020      	str	r0, [r4, #0]
 800f838:	2000      	movs	r0, #0
 800f83a:	e7e8      	b.n	800f80e <__submore+0x1e>
 800f83c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f83e:	0077      	lsls	r7, r6, #1
 800f840:	463a      	mov	r2, r7
 800f842:	f000 f80f 	bl	800f864 <_realloc_r>
 800f846:	4605      	mov	r5, r0
 800f848:	2800      	cmp	r0, #0
 800f84a:	d0de      	beq.n	800f80a <__submore+0x1a>
 800f84c:	eb00 0806 	add.w	r8, r0, r6
 800f850:	4601      	mov	r1, r0
 800f852:	4632      	mov	r2, r6
 800f854:	4640      	mov	r0, r8
 800f856:	f000 fa71 	bl	800fd3c <memcpy>
 800f85a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f85e:	f8c4 8000 	str.w	r8, [r4]
 800f862:	e7e9      	b.n	800f838 <__submore+0x48>

0800f864 <_realloc_r>:
 800f864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f868:	4680      	mov	r8, r0
 800f86a:	4614      	mov	r4, r2
 800f86c:	460e      	mov	r6, r1
 800f86e:	b921      	cbnz	r1, 800f87a <_realloc_r+0x16>
 800f870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f874:	4611      	mov	r1, r2
 800f876:	f7ff b96b 	b.w	800eb50 <_malloc_r>
 800f87a:	b92a      	cbnz	r2, 800f888 <_realloc_r+0x24>
 800f87c:	f7fe fc86 	bl	800e18c <_free_r>
 800f880:	4625      	mov	r5, r4
 800f882:	4628      	mov	r0, r5
 800f884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f888:	f000 fa95 	bl	800fdb6 <_malloc_usable_size_r>
 800f88c:	4284      	cmp	r4, r0
 800f88e:	4607      	mov	r7, r0
 800f890:	d802      	bhi.n	800f898 <_realloc_r+0x34>
 800f892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f896:	d812      	bhi.n	800f8be <_realloc_r+0x5a>
 800f898:	4621      	mov	r1, r4
 800f89a:	4640      	mov	r0, r8
 800f89c:	f7ff f958 	bl	800eb50 <_malloc_r>
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	d0ed      	beq.n	800f882 <_realloc_r+0x1e>
 800f8a6:	42bc      	cmp	r4, r7
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	4631      	mov	r1, r6
 800f8ac:	bf28      	it	cs
 800f8ae:	463a      	movcs	r2, r7
 800f8b0:	f000 fa44 	bl	800fd3c <memcpy>
 800f8b4:	4631      	mov	r1, r6
 800f8b6:	4640      	mov	r0, r8
 800f8b8:	f7fe fc68 	bl	800e18c <_free_r>
 800f8bc:	e7e1      	b.n	800f882 <_realloc_r+0x1e>
 800f8be:	4635      	mov	r5, r6
 800f8c0:	e7df      	b.n	800f882 <_realloc_r+0x1e>
	...

0800f8c4 <_strtol_l.constprop.0>:
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ca:	d001      	beq.n	800f8d0 <_strtol_l.constprop.0+0xc>
 800f8cc:	2b24      	cmp	r3, #36	; 0x24
 800f8ce:	d906      	bls.n	800f8de <_strtol_l.constprop.0+0x1a>
 800f8d0:	f7fd fd94 	bl	800d3fc <__errno>
 800f8d4:	2316      	movs	r3, #22
 800f8d6:	6003      	str	r3, [r0, #0]
 800f8d8:	2000      	movs	r0, #0
 800f8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f9c4 <_strtol_l.constprop.0+0x100>
 800f8e2:	460d      	mov	r5, r1
 800f8e4:	462e      	mov	r6, r5
 800f8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f8ee:	f017 0708 	ands.w	r7, r7, #8
 800f8f2:	d1f7      	bne.n	800f8e4 <_strtol_l.constprop.0+0x20>
 800f8f4:	2c2d      	cmp	r4, #45	; 0x2d
 800f8f6:	d132      	bne.n	800f95e <_strtol_l.constprop.0+0x9a>
 800f8f8:	782c      	ldrb	r4, [r5, #0]
 800f8fa:	2701      	movs	r7, #1
 800f8fc:	1cb5      	adds	r5, r6, #2
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d05b      	beq.n	800f9ba <_strtol_l.constprop.0+0xf6>
 800f902:	2b10      	cmp	r3, #16
 800f904:	d109      	bne.n	800f91a <_strtol_l.constprop.0+0x56>
 800f906:	2c30      	cmp	r4, #48	; 0x30
 800f908:	d107      	bne.n	800f91a <_strtol_l.constprop.0+0x56>
 800f90a:	782c      	ldrb	r4, [r5, #0]
 800f90c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f910:	2c58      	cmp	r4, #88	; 0x58
 800f912:	d14d      	bne.n	800f9b0 <_strtol_l.constprop.0+0xec>
 800f914:	786c      	ldrb	r4, [r5, #1]
 800f916:	2310      	movs	r3, #16
 800f918:	3502      	adds	r5, #2
 800f91a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f91e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f922:	f04f 0e00 	mov.w	lr, #0
 800f926:	fbb8 f9f3 	udiv	r9, r8, r3
 800f92a:	4676      	mov	r6, lr
 800f92c:	fb03 8a19 	mls	sl, r3, r9, r8
 800f930:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f934:	f1bc 0f09 	cmp.w	ip, #9
 800f938:	d816      	bhi.n	800f968 <_strtol_l.constprop.0+0xa4>
 800f93a:	4664      	mov	r4, ip
 800f93c:	42a3      	cmp	r3, r4
 800f93e:	dd24      	ble.n	800f98a <_strtol_l.constprop.0+0xc6>
 800f940:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f944:	d008      	beq.n	800f958 <_strtol_l.constprop.0+0x94>
 800f946:	45b1      	cmp	r9, r6
 800f948:	d31c      	bcc.n	800f984 <_strtol_l.constprop.0+0xc0>
 800f94a:	d101      	bne.n	800f950 <_strtol_l.constprop.0+0x8c>
 800f94c:	45a2      	cmp	sl, r4
 800f94e:	db19      	blt.n	800f984 <_strtol_l.constprop.0+0xc0>
 800f950:	fb06 4603 	mla	r6, r6, r3, r4
 800f954:	f04f 0e01 	mov.w	lr, #1
 800f958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f95c:	e7e8      	b.n	800f930 <_strtol_l.constprop.0+0x6c>
 800f95e:	2c2b      	cmp	r4, #43	; 0x2b
 800f960:	bf04      	itt	eq
 800f962:	782c      	ldrbeq	r4, [r5, #0]
 800f964:	1cb5      	addeq	r5, r6, #2
 800f966:	e7ca      	b.n	800f8fe <_strtol_l.constprop.0+0x3a>
 800f968:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f96c:	f1bc 0f19 	cmp.w	ip, #25
 800f970:	d801      	bhi.n	800f976 <_strtol_l.constprop.0+0xb2>
 800f972:	3c37      	subs	r4, #55	; 0x37
 800f974:	e7e2      	b.n	800f93c <_strtol_l.constprop.0+0x78>
 800f976:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f97a:	f1bc 0f19 	cmp.w	ip, #25
 800f97e:	d804      	bhi.n	800f98a <_strtol_l.constprop.0+0xc6>
 800f980:	3c57      	subs	r4, #87	; 0x57
 800f982:	e7db      	b.n	800f93c <_strtol_l.constprop.0+0x78>
 800f984:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f988:	e7e6      	b.n	800f958 <_strtol_l.constprop.0+0x94>
 800f98a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800f98e:	d105      	bne.n	800f99c <_strtol_l.constprop.0+0xd8>
 800f990:	2322      	movs	r3, #34	; 0x22
 800f992:	6003      	str	r3, [r0, #0]
 800f994:	4646      	mov	r6, r8
 800f996:	b942      	cbnz	r2, 800f9aa <_strtol_l.constprop.0+0xe6>
 800f998:	4630      	mov	r0, r6
 800f99a:	e79e      	b.n	800f8da <_strtol_l.constprop.0+0x16>
 800f99c:	b107      	cbz	r7, 800f9a0 <_strtol_l.constprop.0+0xdc>
 800f99e:	4276      	negs	r6, r6
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	d0f9      	beq.n	800f998 <_strtol_l.constprop.0+0xd4>
 800f9a4:	f1be 0f00 	cmp.w	lr, #0
 800f9a8:	d000      	beq.n	800f9ac <_strtol_l.constprop.0+0xe8>
 800f9aa:	1e69      	subs	r1, r5, #1
 800f9ac:	6011      	str	r1, [r2, #0]
 800f9ae:	e7f3      	b.n	800f998 <_strtol_l.constprop.0+0xd4>
 800f9b0:	2430      	movs	r4, #48	; 0x30
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1b1      	bne.n	800f91a <_strtol_l.constprop.0+0x56>
 800f9b6:	2308      	movs	r3, #8
 800f9b8:	e7af      	b.n	800f91a <_strtol_l.constprop.0+0x56>
 800f9ba:	2c30      	cmp	r4, #48	; 0x30
 800f9bc:	d0a5      	beq.n	800f90a <_strtol_l.constprop.0+0x46>
 800f9be:	230a      	movs	r3, #10
 800f9c0:	e7ab      	b.n	800f91a <_strtol_l.constprop.0+0x56>
 800f9c2:	bf00      	nop
 800f9c4:	0801513f 	.word	0x0801513f

0800f9c8 <_strtol_r>:
 800f9c8:	f7ff bf7c 	b.w	800f8c4 <_strtol_l.constprop.0>

0800f9cc <_strtoul_l.constprop.0>:
 800f9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	4f36      	ldr	r7, [pc, #216]	; (800faac <_strtoul_l.constprop.0+0xe0>)
 800f9d2:	4686      	mov	lr, r0
 800f9d4:	460d      	mov	r5, r1
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9dc:	5d3e      	ldrb	r6, [r7, r4]
 800f9de:	f016 0608 	ands.w	r6, r6, #8
 800f9e2:	d1f8      	bne.n	800f9d6 <_strtoul_l.constprop.0+0xa>
 800f9e4:	2c2d      	cmp	r4, #45	; 0x2d
 800f9e6:	d130      	bne.n	800fa4a <_strtoul_l.constprop.0+0x7e>
 800f9e8:	782c      	ldrb	r4, [r5, #0]
 800f9ea:	2601      	movs	r6, #1
 800f9ec:	1c85      	adds	r5, r0, #2
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d057      	beq.n	800faa2 <_strtoul_l.constprop.0+0xd6>
 800f9f2:	2b10      	cmp	r3, #16
 800f9f4:	d109      	bne.n	800fa0a <_strtoul_l.constprop.0+0x3e>
 800f9f6:	2c30      	cmp	r4, #48	; 0x30
 800f9f8:	d107      	bne.n	800fa0a <_strtoul_l.constprop.0+0x3e>
 800f9fa:	7828      	ldrb	r0, [r5, #0]
 800f9fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fa00:	2858      	cmp	r0, #88	; 0x58
 800fa02:	d149      	bne.n	800fa98 <_strtoul_l.constprop.0+0xcc>
 800fa04:	786c      	ldrb	r4, [r5, #1]
 800fa06:	2310      	movs	r3, #16
 800fa08:	3502      	adds	r5, #2
 800fa0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800fa0e:	2700      	movs	r7, #0
 800fa10:	fbb8 f8f3 	udiv	r8, r8, r3
 800fa14:	fb03 f908 	mul.w	r9, r3, r8
 800fa18:	ea6f 0909 	mvn.w	r9, r9
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fa22:	f1bc 0f09 	cmp.w	ip, #9
 800fa26:	d815      	bhi.n	800fa54 <_strtoul_l.constprop.0+0x88>
 800fa28:	4664      	mov	r4, ip
 800fa2a:	42a3      	cmp	r3, r4
 800fa2c:	dd23      	ble.n	800fa76 <_strtoul_l.constprop.0+0xaa>
 800fa2e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800fa32:	d007      	beq.n	800fa44 <_strtoul_l.constprop.0+0x78>
 800fa34:	4580      	cmp	r8, r0
 800fa36:	d31b      	bcc.n	800fa70 <_strtoul_l.constprop.0+0xa4>
 800fa38:	d101      	bne.n	800fa3e <_strtoul_l.constprop.0+0x72>
 800fa3a:	45a1      	cmp	r9, r4
 800fa3c:	db18      	blt.n	800fa70 <_strtoul_l.constprop.0+0xa4>
 800fa3e:	fb00 4003 	mla	r0, r0, r3, r4
 800fa42:	2701      	movs	r7, #1
 800fa44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa48:	e7e9      	b.n	800fa1e <_strtoul_l.constprop.0+0x52>
 800fa4a:	2c2b      	cmp	r4, #43	; 0x2b
 800fa4c:	bf04      	itt	eq
 800fa4e:	782c      	ldrbeq	r4, [r5, #0]
 800fa50:	1c85      	addeq	r5, r0, #2
 800fa52:	e7cc      	b.n	800f9ee <_strtoul_l.constprop.0+0x22>
 800fa54:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fa58:	f1bc 0f19 	cmp.w	ip, #25
 800fa5c:	d801      	bhi.n	800fa62 <_strtoul_l.constprop.0+0x96>
 800fa5e:	3c37      	subs	r4, #55	; 0x37
 800fa60:	e7e3      	b.n	800fa2a <_strtoul_l.constprop.0+0x5e>
 800fa62:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fa66:	f1bc 0f19 	cmp.w	ip, #25
 800fa6a:	d804      	bhi.n	800fa76 <_strtoul_l.constprop.0+0xaa>
 800fa6c:	3c57      	subs	r4, #87	; 0x57
 800fa6e:	e7dc      	b.n	800fa2a <_strtoul_l.constprop.0+0x5e>
 800fa70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa74:	e7e6      	b.n	800fa44 <_strtoul_l.constprop.0+0x78>
 800fa76:	1c7b      	adds	r3, r7, #1
 800fa78:	d106      	bne.n	800fa88 <_strtoul_l.constprop.0+0xbc>
 800fa7a:	2322      	movs	r3, #34	; 0x22
 800fa7c:	f8ce 3000 	str.w	r3, [lr]
 800fa80:	4638      	mov	r0, r7
 800fa82:	b932      	cbnz	r2, 800fa92 <_strtoul_l.constprop.0+0xc6>
 800fa84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa88:	b106      	cbz	r6, 800fa8c <_strtoul_l.constprop.0+0xc0>
 800fa8a:	4240      	negs	r0, r0
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d0f9      	beq.n	800fa84 <_strtoul_l.constprop.0+0xb8>
 800fa90:	b107      	cbz	r7, 800fa94 <_strtoul_l.constprop.0+0xc8>
 800fa92:	1e69      	subs	r1, r5, #1
 800fa94:	6011      	str	r1, [r2, #0]
 800fa96:	e7f5      	b.n	800fa84 <_strtoul_l.constprop.0+0xb8>
 800fa98:	2430      	movs	r4, #48	; 0x30
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1b5      	bne.n	800fa0a <_strtoul_l.constprop.0+0x3e>
 800fa9e:	2308      	movs	r3, #8
 800faa0:	e7b3      	b.n	800fa0a <_strtoul_l.constprop.0+0x3e>
 800faa2:	2c30      	cmp	r4, #48	; 0x30
 800faa4:	d0a9      	beq.n	800f9fa <_strtoul_l.constprop.0+0x2e>
 800faa6:	230a      	movs	r3, #10
 800faa8:	e7af      	b.n	800fa0a <_strtoul_l.constprop.0+0x3e>
 800faaa:	bf00      	nop
 800faac:	0801513f 	.word	0x0801513f

0800fab0 <_strtoul_r>:
 800fab0:	f7ff bf8c 	b.w	800f9cc <_strtoul_l.constprop.0>

0800fab4 <__swbuf_r>:
 800fab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab6:	460e      	mov	r6, r1
 800fab8:	4614      	mov	r4, r2
 800faba:	4605      	mov	r5, r0
 800fabc:	b118      	cbz	r0, 800fac6 <__swbuf_r+0x12>
 800fabe:	6a03      	ldr	r3, [r0, #32]
 800fac0:	b90b      	cbnz	r3, 800fac6 <__swbuf_r+0x12>
 800fac2:	f7fd fbc7 	bl	800d254 <__sinit>
 800fac6:	69a3      	ldr	r3, [r4, #24]
 800fac8:	60a3      	str	r3, [r4, #8]
 800faca:	89a3      	ldrh	r3, [r4, #12]
 800facc:	071a      	lsls	r2, r3, #28
 800face:	d525      	bpl.n	800fb1c <__swbuf_r+0x68>
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	b31b      	cbz	r3, 800fb1c <__swbuf_r+0x68>
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	6922      	ldr	r2, [r4, #16]
 800fad8:	1a98      	subs	r0, r3, r2
 800fada:	6963      	ldr	r3, [r4, #20]
 800fadc:	b2f6      	uxtb	r6, r6
 800fade:	4283      	cmp	r3, r0
 800fae0:	4637      	mov	r7, r6
 800fae2:	dc04      	bgt.n	800faee <__swbuf_r+0x3a>
 800fae4:	4621      	mov	r1, r4
 800fae6:	4628      	mov	r0, r5
 800fae8:	f7ff fac0 	bl	800f06c <_fflush_r>
 800faec:	b9e0      	cbnz	r0, 800fb28 <__swbuf_r+0x74>
 800faee:	68a3      	ldr	r3, [r4, #8]
 800faf0:	3b01      	subs	r3, #1
 800faf2:	60a3      	str	r3, [r4, #8]
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	1c5a      	adds	r2, r3, #1
 800faf8:	6022      	str	r2, [r4, #0]
 800fafa:	701e      	strb	r6, [r3, #0]
 800fafc:	6962      	ldr	r2, [r4, #20]
 800fafe:	1c43      	adds	r3, r0, #1
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d004      	beq.n	800fb0e <__swbuf_r+0x5a>
 800fb04:	89a3      	ldrh	r3, [r4, #12]
 800fb06:	07db      	lsls	r3, r3, #31
 800fb08:	d506      	bpl.n	800fb18 <__swbuf_r+0x64>
 800fb0a:	2e0a      	cmp	r6, #10
 800fb0c:	d104      	bne.n	800fb18 <__swbuf_r+0x64>
 800fb0e:	4621      	mov	r1, r4
 800fb10:	4628      	mov	r0, r5
 800fb12:	f7ff faab 	bl	800f06c <_fflush_r>
 800fb16:	b938      	cbnz	r0, 800fb28 <__swbuf_r+0x74>
 800fb18:	4638      	mov	r0, r7
 800fb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4628      	mov	r0, r5
 800fb20:	f000 f806 	bl	800fb30 <__swsetup_r>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d0d5      	beq.n	800fad4 <__swbuf_r+0x20>
 800fb28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fb2c:	e7f4      	b.n	800fb18 <__swbuf_r+0x64>
	...

0800fb30 <__swsetup_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4b2a      	ldr	r3, [pc, #168]	; (800fbdc <__swsetup_r+0xac>)
 800fb34:	4605      	mov	r5, r0
 800fb36:	6818      	ldr	r0, [r3, #0]
 800fb38:	460c      	mov	r4, r1
 800fb3a:	b118      	cbz	r0, 800fb44 <__swsetup_r+0x14>
 800fb3c:	6a03      	ldr	r3, [r0, #32]
 800fb3e:	b90b      	cbnz	r3, 800fb44 <__swsetup_r+0x14>
 800fb40:	f7fd fb88 	bl	800d254 <__sinit>
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb4a:	0718      	lsls	r0, r3, #28
 800fb4c:	d422      	bmi.n	800fb94 <__swsetup_r+0x64>
 800fb4e:	06d9      	lsls	r1, r3, #27
 800fb50:	d407      	bmi.n	800fb62 <__swsetup_r+0x32>
 800fb52:	2309      	movs	r3, #9
 800fb54:	602b      	str	r3, [r5, #0]
 800fb56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb5a:	81a3      	strh	r3, [r4, #12]
 800fb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb60:	e034      	b.n	800fbcc <__swsetup_r+0x9c>
 800fb62:	0758      	lsls	r0, r3, #29
 800fb64:	d512      	bpl.n	800fb8c <__swsetup_r+0x5c>
 800fb66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb68:	b141      	cbz	r1, 800fb7c <__swsetup_r+0x4c>
 800fb6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb6e:	4299      	cmp	r1, r3
 800fb70:	d002      	beq.n	800fb78 <__swsetup_r+0x48>
 800fb72:	4628      	mov	r0, r5
 800fb74:	f7fe fb0a 	bl	800e18c <_free_r>
 800fb78:	2300      	movs	r3, #0
 800fb7a:	6363      	str	r3, [r4, #52]	; 0x34
 800fb7c:	89a3      	ldrh	r3, [r4, #12]
 800fb7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb82:	81a3      	strh	r3, [r4, #12]
 800fb84:	2300      	movs	r3, #0
 800fb86:	6063      	str	r3, [r4, #4]
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	6023      	str	r3, [r4, #0]
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	f043 0308 	orr.w	r3, r3, #8
 800fb92:	81a3      	strh	r3, [r4, #12]
 800fb94:	6923      	ldr	r3, [r4, #16]
 800fb96:	b94b      	cbnz	r3, 800fbac <__swsetup_r+0x7c>
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fba2:	d003      	beq.n	800fbac <__swsetup_r+0x7c>
 800fba4:	4621      	mov	r1, r4
 800fba6:	4628      	mov	r0, r5
 800fba8:	f000 f840 	bl	800fc2c <__smakebuf_r>
 800fbac:	89a0      	ldrh	r0, [r4, #12]
 800fbae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbb2:	f010 0301 	ands.w	r3, r0, #1
 800fbb6:	d00a      	beq.n	800fbce <__swsetup_r+0x9e>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	6963      	ldr	r3, [r4, #20]
 800fbbe:	425b      	negs	r3, r3
 800fbc0:	61a3      	str	r3, [r4, #24]
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	b943      	cbnz	r3, 800fbd8 <__swsetup_r+0xa8>
 800fbc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbca:	d1c4      	bne.n	800fb56 <__swsetup_r+0x26>
 800fbcc:	bd38      	pop	{r3, r4, r5, pc}
 800fbce:	0781      	lsls	r1, r0, #30
 800fbd0:	bf58      	it	pl
 800fbd2:	6963      	ldrpl	r3, [r4, #20]
 800fbd4:	60a3      	str	r3, [r4, #8]
 800fbd6:	e7f4      	b.n	800fbc2 <__swsetup_r+0x92>
 800fbd8:	2000      	movs	r0, #0
 800fbda:	e7f7      	b.n	800fbcc <__swsetup_r+0x9c>
 800fbdc:	2000009c 	.word	0x2000009c

0800fbe0 <__swhatbuf_r>:
 800fbe0:	b570      	push	{r4, r5, r6, lr}
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbe8:	2900      	cmp	r1, #0
 800fbea:	b096      	sub	sp, #88	; 0x58
 800fbec:	4615      	mov	r5, r2
 800fbee:	461e      	mov	r6, r3
 800fbf0:	da0d      	bge.n	800fc0e <__swhatbuf_r+0x2e>
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fbf8:	f04f 0100 	mov.w	r1, #0
 800fbfc:	bf0c      	ite	eq
 800fbfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fc02:	2340      	movne	r3, #64	; 0x40
 800fc04:	2000      	movs	r0, #0
 800fc06:	6031      	str	r1, [r6, #0]
 800fc08:	602b      	str	r3, [r5, #0]
 800fc0a:	b016      	add	sp, #88	; 0x58
 800fc0c:	bd70      	pop	{r4, r5, r6, pc}
 800fc0e:	466a      	mov	r2, sp
 800fc10:	f000 f862 	bl	800fcd8 <_fstat_r>
 800fc14:	2800      	cmp	r0, #0
 800fc16:	dbec      	blt.n	800fbf2 <__swhatbuf_r+0x12>
 800fc18:	9901      	ldr	r1, [sp, #4]
 800fc1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fc1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fc22:	4259      	negs	r1, r3
 800fc24:	4159      	adcs	r1, r3
 800fc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc2a:	e7eb      	b.n	800fc04 <__swhatbuf_r+0x24>

0800fc2c <__smakebuf_r>:
 800fc2c:	898b      	ldrh	r3, [r1, #12]
 800fc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc30:	079d      	lsls	r5, r3, #30
 800fc32:	4606      	mov	r6, r0
 800fc34:	460c      	mov	r4, r1
 800fc36:	d507      	bpl.n	800fc48 <__smakebuf_r+0x1c>
 800fc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc3c:	6023      	str	r3, [r4, #0]
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	2301      	movs	r3, #1
 800fc42:	6163      	str	r3, [r4, #20]
 800fc44:	b002      	add	sp, #8
 800fc46:	bd70      	pop	{r4, r5, r6, pc}
 800fc48:	ab01      	add	r3, sp, #4
 800fc4a:	466a      	mov	r2, sp
 800fc4c:	f7ff ffc8 	bl	800fbe0 <__swhatbuf_r>
 800fc50:	9900      	ldr	r1, [sp, #0]
 800fc52:	4605      	mov	r5, r0
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7fe ff7b 	bl	800eb50 <_malloc_r>
 800fc5a:	b948      	cbnz	r0, 800fc70 <__smakebuf_r+0x44>
 800fc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc60:	059a      	lsls	r2, r3, #22
 800fc62:	d4ef      	bmi.n	800fc44 <__smakebuf_r+0x18>
 800fc64:	f023 0303 	bic.w	r3, r3, #3
 800fc68:	f043 0302 	orr.w	r3, r3, #2
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	e7e3      	b.n	800fc38 <__smakebuf_r+0xc>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	6020      	str	r0, [r4, #0]
 800fc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	9b00      	ldr	r3, [sp, #0]
 800fc7c:	6163      	str	r3, [r4, #20]
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	6120      	str	r0, [r4, #16]
 800fc82:	b15b      	cbz	r3, 800fc9c <__smakebuf_r+0x70>
 800fc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f000 f837 	bl	800fcfc <_isatty_r>
 800fc8e:	b128      	cbz	r0, 800fc9c <__smakebuf_r+0x70>
 800fc90:	89a3      	ldrh	r3, [r4, #12]
 800fc92:	f023 0303 	bic.w	r3, r3, #3
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	81a3      	strh	r3, [r4, #12]
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	431d      	orrs	r5, r3
 800fca0:	81a5      	strh	r5, [r4, #12]
 800fca2:	e7cf      	b.n	800fc44 <__smakebuf_r+0x18>

0800fca4 <memmove>:
 800fca4:	4288      	cmp	r0, r1
 800fca6:	b510      	push	{r4, lr}
 800fca8:	eb01 0402 	add.w	r4, r1, r2
 800fcac:	d902      	bls.n	800fcb4 <memmove+0x10>
 800fcae:	4284      	cmp	r4, r0
 800fcb0:	4623      	mov	r3, r4
 800fcb2:	d807      	bhi.n	800fcc4 <memmove+0x20>
 800fcb4:	1e43      	subs	r3, r0, #1
 800fcb6:	42a1      	cmp	r1, r4
 800fcb8:	d008      	beq.n	800fccc <memmove+0x28>
 800fcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcc2:	e7f8      	b.n	800fcb6 <memmove+0x12>
 800fcc4:	4402      	add	r2, r0
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	428a      	cmp	r2, r1
 800fcca:	d100      	bne.n	800fcce <memmove+0x2a>
 800fccc:	bd10      	pop	{r4, pc}
 800fcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcd6:	e7f7      	b.n	800fcc8 <memmove+0x24>

0800fcd8 <_fstat_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d07      	ldr	r5, [pc, #28]	; (800fcf8 <_fstat_r+0x20>)
 800fcdc:	2300      	movs	r3, #0
 800fcde:	4604      	mov	r4, r0
 800fce0:	4608      	mov	r0, r1
 800fce2:	4611      	mov	r1, r2
 800fce4:	602b      	str	r3, [r5, #0]
 800fce6:	f7f4 feec 	bl	8004ac2 <_fstat>
 800fcea:	1c43      	adds	r3, r0, #1
 800fcec:	d102      	bne.n	800fcf4 <_fstat_r+0x1c>
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	b103      	cbz	r3, 800fcf4 <_fstat_r+0x1c>
 800fcf2:	6023      	str	r3, [r4, #0]
 800fcf4:	bd38      	pop	{r3, r4, r5, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20009e38 	.word	0x20009e38

0800fcfc <_isatty_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d06      	ldr	r5, [pc, #24]	; (800fd18 <_isatty_r+0x1c>)
 800fd00:	2300      	movs	r3, #0
 800fd02:	4604      	mov	r4, r0
 800fd04:	4608      	mov	r0, r1
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	f7f4 feeb 	bl	8004ae2 <_isatty>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d102      	bne.n	800fd16 <_isatty_r+0x1a>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b103      	cbz	r3, 800fd16 <_isatty_r+0x1a>
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	20009e38 	.word	0x20009e38

0800fd1c <_sbrk_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4d06      	ldr	r5, [pc, #24]	; (800fd38 <_sbrk_r+0x1c>)
 800fd20:	2300      	movs	r3, #0
 800fd22:	4604      	mov	r4, r0
 800fd24:	4608      	mov	r0, r1
 800fd26:	602b      	str	r3, [r5, #0]
 800fd28:	f7f4 fef4 	bl	8004b14 <_sbrk>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_sbrk_r+0x1a>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_sbrk_r+0x1a>
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	20009e38 	.word	0x20009e38

0800fd3c <memcpy>:
 800fd3c:	440a      	add	r2, r1
 800fd3e:	4291      	cmp	r1, r2
 800fd40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd44:	d100      	bne.n	800fd48 <memcpy+0xc>
 800fd46:	4770      	bx	lr
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd52:	4291      	cmp	r1, r2
 800fd54:	d1f9      	bne.n	800fd4a <memcpy+0xe>
 800fd56:	bd10      	pop	{r4, pc}

0800fd58 <abort>:
 800fd58:	b508      	push	{r3, lr}
 800fd5a:	2006      	movs	r0, #6
 800fd5c:	f000 f868 	bl	800fe30 <raise>
 800fd60:	2001      	movs	r0, #1
 800fd62:	f7f4 fe5f 	bl	8004a24 <_exit>

0800fd66 <_calloc_r>:
 800fd66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd68:	fba1 2402 	umull	r2, r4, r1, r2
 800fd6c:	b94c      	cbnz	r4, 800fd82 <_calloc_r+0x1c>
 800fd6e:	4611      	mov	r1, r2
 800fd70:	9201      	str	r2, [sp, #4]
 800fd72:	f7fe feed 	bl	800eb50 <_malloc_r>
 800fd76:	9a01      	ldr	r2, [sp, #4]
 800fd78:	4605      	mov	r5, r0
 800fd7a:	b930      	cbnz	r0, 800fd8a <_calloc_r+0x24>
 800fd7c:	4628      	mov	r0, r5
 800fd7e:	b003      	add	sp, #12
 800fd80:	bd30      	pop	{r4, r5, pc}
 800fd82:	220c      	movs	r2, #12
 800fd84:	6002      	str	r2, [r0, #0]
 800fd86:	2500      	movs	r5, #0
 800fd88:	e7f8      	b.n	800fd7c <_calloc_r+0x16>
 800fd8a:	4621      	mov	r1, r4
 800fd8c:	f7fd fae4 	bl	800d358 <memset>
 800fd90:	e7f4      	b.n	800fd7c <_calloc_r+0x16>

0800fd92 <__ascii_mbtowc>:
 800fd92:	b082      	sub	sp, #8
 800fd94:	b901      	cbnz	r1, 800fd98 <__ascii_mbtowc+0x6>
 800fd96:	a901      	add	r1, sp, #4
 800fd98:	b142      	cbz	r2, 800fdac <__ascii_mbtowc+0x1a>
 800fd9a:	b14b      	cbz	r3, 800fdb0 <__ascii_mbtowc+0x1e>
 800fd9c:	7813      	ldrb	r3, [r2, #0]
 800fd9e:	600b      	str	r3, [r1, #0]
 800fda0:	7812      	ldrb	r2, [r2, #0]
 800fda2:	1e10      	subs	r0, r2, #0
 800fda4:	bf18      	it	ne
 800fda6:	2001      	movne	r0, #1
 800fda8:	b002      	add	sp, #8
 800fdaa:	4770      	bx	lr
 800fdac:	4610      	mov	r0, r2
 800fdae:	e7fb      	b.n	800fda8 <__ascii_mbtowc+0x16>
 800fdb0:	f06f 0001 	mvn.w	r0, #1
 800fdb4:	e7f8      	b.n	800fda8 <__ascii_mbtowc+0x16>

0800fdb6 <_malloc_usable_size_r>:
 800fdb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdba:	1f18      	subs	r0, r3, #4
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	bfbc      	itt	lt
 800fdc0:	580b      	ldrlt	r3, [r1, r0]
 800fdc2:	18c0      	addlt	r0, r0, r3
 800fdc4:	4770      	bx	lr

0800fdc6 <__ascii_wctomb>:
 800fdc6:	b149      	cbz	r1, 800fddc <__ascii_wctomb+0x16>
 800fdc8:	2aff      	cmp	r2, #255	; 0xff
 800fdca:	bf85      	ittet	hi
 800fdcc:	238a      	movhi	r3, #138	; 0x8a
 800fdce:	6003      	strhi	r3, [r0, #0]
 800fdd0:	700a      	strbls	r2, [r1, #0]
 800fdd2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fdd6:	bf98      	it	ls
 800fdd8:	2001      	movls	r0, #1
 800fdda:	4770      	bx	lr
 800fddc:	4608      	mov	r0, r1
 800fdde:	4770      	bx	lr

0800fde0 <_raise_r>:
 800fde0:	291f      	cmp	r1, #31
 800fde2:	b538      	push	{r3, r4, r5, lr}
 800fde4:	4604      	mov	r4, r0
 800fde6:	460d      	mov	r5, r1
 800fde8:	d904      	bls.n	800fdf4 <_raise_r+0x14>
 800fdea:	2316      	movs	r3, #22
 800fdec:	6003      	str	r3, [r0, #0]
 800fdee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdf2:	bd38      	pop	{r3, r4, r5, pc}
 800fdf4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fdf6:	b112      	cbz	r2, 800fdfe <_raise_r+0x1e>
 800fdf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdfc:	b94b      	cbnz	r3, 800fe12 <_raise_r+0x32>
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f000 f830 	bl	800fe64 <_getpid_r>
 800fe04:	462a      	mov	r2, r5
 800fe06:	4601      	mov	r1, r0
 800fe08:	4620      	mov	r0, r4
 800fe0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe0e:	f000 b817 	b.w	800fe40 <_kill_r>
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d00a      	beq.n	800fe2c <_raise_r+0x4c>
 800fe16:	1c59      	adds	r1, r3, #1
 800fe18:	d103      	bne.n	800fe22 <_raise_r+0x42>
 800fe1a:	2316      	movs	r3, #22
 800fe1c:	6003      	str	r3, [r0, #0]
 800fe1e:	2001      	movs	r0, #1
 800fe20:	e7e7      	b.n	800fdf2 <_raise_r+0x12>
 800fe22:	2400      	movs	r4, #0
 800fe24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe28:	4628      	mov	r0, r5
 800fe2a:	4798      	blx	r3
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	e7e0      	b.n	800fdf2 <_raise_r+0x12>

0800fe30 <raise>:
 800fe30:	4b02      	ldr	r3, [pc, #8]	; (800fe3c <raise+0xc>)
 800fe32:	4601      	mov	r1, r0
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	f7ff bfd3 	b.w	800fde0 <_raise_r>
 800fe3a:	bf00      	nop
 800fe3c:	2000009c 	.word	0x2000009c

0800fe40 <_kill_r>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4d07      	ldr	r5, [pc, #28]	; (800fe60 <_kill_r+0x20>)
 800fe44:	2300      	movs	r3, #0
 800fe46:	4604      	mov	r4, r0
 800fe48:	4608      	mov	r0, r1
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	602b      	str	r3, [r5, #0]
 800fe4e:	f7f4 fdd9 	bl	8004a04 <_kill>
 800fe52:	1c43      	adds	r3, r0, #1
 800fe54:	d102      	bne.n	800fe5c <_kill_r+0x1c>
 800fe56:	682b      	ldr	r3, [r5, #0]
 800fe58:	b103      	cbz	r3, 800fe5c <_kill_r+0x1c>
 800fe5a:	6023      	str	r3, [r4, #0]
 800fe5c:	bd38      	pop	{r3, r4, r5, pc}
 800fe5e:	bf00      	nop
 800fe60:	20009e38 	.word	0x20009e38

0800fe64 <_getpid_r>:
 800fe64:	f7f4 bdc6 	b.w	80049f4 <_getpid>

0800fe68 <acos>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	ed2d 8b02 	vpush	{d8}
 800fe6e:	ec55 4b10 	vmov	r4, r5, d0
 800fe72:	f000 f82d 	bl	800fed0 <__ieee754_acos>
 800fe76:	4622      	mov	r2, r4
 800fe78:	462b      	mov	r3, r5
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe82:	eef0 8a60 	vmov.f32	s17, s1
 800fe86:	f7f0 fe71 	bl	8000b6c <__aeabi_dcmpun>
 800fe8a:	b9a8      	cbnz	r0, 800feb8 <acos+0x50>
 800fe8c:	ec45 4b10 	vmov	d0, r4, r5
 800fe90:	f000 faaa 	bl	80103e8 <fabs>
 800fe94:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <acos+0x60>)
 800fe96:	ec51 0b10 	vmov	r0, r1, d0
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f7f0 fe5c 	bl	8000b58 <__aeabi_dcmpgt>
 800fea0:	b150      	cbz	r0, 800feb8 <acos+0x50>
 800fea2:	f7fd faab 	bl	800d3fc <__errno>
 800fea6:	ecbd 8b02 	vpop	{d8}
 800feaa:	2321      	movs	r3, #33	; 0x21
 800feac:	6003      	str	r3, [r0, #0]
 800feae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feb2:	4806      	ldr	r0, [pc, #24]	; (800fecc <acos+0x64>)
 800feb4:	f000 bc00 	b.w	80106b8 <nan>
 800feb8:	eeb0 0a48 	vmov.f32	s0, s16
 800febc:	eef0 0a68 	vmov.f32	s1, s17
 800fec0:	ecbd 8b02 	vpop	{d8}
 800fec4:	bd38      	pop	{r3, r4, r5, pc}
 800fec6:	bf00      	nop
 800fec8:	3ff00000 	.word	0x3ff00000
 800fecc:	08014f21 	.word	0x08014f21

0800fed0 <__ieee754_acos>:
 800fed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	ec55 4b10 	vmov	r4, r5, d0
 800fed8:	49b7      	ldr	r1, [pc, #732]	; (80101b8 <__ieee754_acos+0x2e8>)
 800feda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fede:	428b      	cmp	r3, r1
 800fee0:	dd1b      	ble.n	800ff1a <__ieee754_acos+0x4a>
 800fee2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800fee6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800feea:	4323      	orrs	r3, r4
 800feec:	d106      	bne.n	800fefc <__ieee754_acos+0x2c>
 800feee:	2d00      	cmp	r5, #0
 800fef0:	f300 8211 	bgt.w	8010316 <__ieee754_acos+0x446>
 800fef4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010150 <__ieee754_acos+0x280>
 800fef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	ee10 2a10 	vmov	r2, s0
 800ff00:	462b      	mov	r3, r5
 800ff02:	ee10 0a10 	vmov	r0, s0
 800ff06:	4629      	mov	r1, r5
 800ff08:	f7f0 f9de 	bl	80002c8 <__aeabi_dsub>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	f7f0 fcbc 	bl	800088c <__aeabi_ddiv>
 800ff14:	ec41 0b10 	vmov	d0, r0, r1
 800ff18:	e7ee      	b.n	800fef8 <__ieee754_acos+0x28>
 800ff1a:	49a8      	ldr	r1, [pc, #672]	; (80101bc <__ieee754_acos+0x2ec>)
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	f300 8087 	bgt.w	8010030 <__ieee754_acos+0x160>
 800ff22:	4aa7      	ldr	r2, [pc, #668]	; (80101c0 <__ieee754_acos+0x2f0>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	f340 81f9 	ble.w	801031c <__ieee754_acos+0x44c>
 800ff2a:	ee10 2a10 	vmov	r2, s0
 800ff2e:	ee10 0a10 	vmov	r0, s0
 800ff32:	462b      	mov	r3, r5
 800ff34:	4629      	mov	r1, r5
 800ff36:	f7f0 fb7f 	bl	8000638 <__aeabi_dmul>
 800ff3a:	a387      	add	r3, pc, #540	; (adr r3, 8010158 <__ieee754_acos+0x288>)
 800ff3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff40:	4606      	mov	r6, r0
 800ff42:	460f      	mov	r7, r1
 800ff44:	f7f0 fb78 	bl	8000638 <__aeabi_dmul>
 800ff48:	a385      	add	r3, pc, #532	; (adr r3, 8010160 <__ieee754_acos+0x290>)
 800ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4e:	f7f0 f9bd 	bl	80002cc <__adddf3>
 800ff52:	4632      	mov	r2, r6
 800ff54:	463b      	mov	r3, r7
 800ff56:	f7f0 fb6f 	bl	8000638 <__aeabi_dmul>
 800ff5a:	a383      	add	r3, pc, #524	; (adr r3, 8010168 <__ieee754_acos+0x298>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	f7f0 f9b2 	bl	80002c8 <__aeabi_dsub>
 800ff64:	4632      	mov	r2, r6
 800ff66:	463b      	mov	r3, r7
 800ff68:	f7f0 fb66 	bl	8000638 <__aeabi_dmul>
 800ff6c:	a380      	add	r3, pc, #512	; (adr r3, 8010170 <__ieee754_acos+0x2a0>)
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	f7f0 f9ab 	bl	80002cc <__adddf3>
 800ff76:	4632      	mov	r2, r6
 800ff78:	463b      	mov	r3, r7
 800ff7a:	f7f0 fb5d 	bl	8000638 <__aeabi_dmul>
 800ff7e:	a37e      	add	r3, pc, #504	; (adr r3, 8010178 <__ieee754_acos+0x2a8>)
 800ff80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff84:	f7f0 f9a0 	bl	80002c8 <__aeabi_dsub>
 800ff88:	4632      	mov	r2, r6
 800ff8a:	463b      	mov	r3, r7
 800ff8c:	f7f0 fb54 	bl	8000638 <__aeabi_dmul>
 800ff90:	a37b      	add	r3, pc, #492	; (adr r3, 8010180 <__ieee754_acos+0x2b0>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	f7f0 f999 	bl	80002cc <__adddf3>
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	463b      	mov	r3, r7
 800ff9e:	f7f0 fb4b 	bl	8000638 <__aeabi_dmul>
 800ffa2:	a379      	add	r3, pc, #484	; (adr r3, 8010188 <__ieee754_acos+0x2b8>)
 800ffa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa8:	4680      	mov	r8, r0
 800ffaa:	4689      	mov	r9, r1
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 fb42 	bl	8000638 <__aeabi_dmul>
 800ffb4:	a376      	add	r3, pc, #472	; (adr r3, 8010190 <__ieee754_acos+0x2c0>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	f7f0 f985 	bl	80002c8 <__aeabi_dsub>
 800ffbe:	4632      	mov	r2, r6
 800ffc0:	463b      	mov	r3, r7
 800ffc2:	f7f0 fb39 	bl	8000638 <__aeabi_dmul>
 800ffc6:	a374      	add	r3, pc, #464	; (adr r3, 8010198 <__ieee754_acos+0x2c8>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f97e 	bl	80002cc <__adddf3>
 800ffd0:	4632      	mov	r2, r6
 800ffd2:	463b      	mov	r3, r7
 800ffd4:	f7f0 fb30 	bl	8000638 <__aeabi_dmul>
 800ffd8:	a371      	add	r3, pc, #452	; (adr r3, 80101a0 <__ieee754_acos+0x2d0>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	f7f0 f973 	bl	80002c8 <__aeabi_dsub>
 800ffe2:	4632      	mov	r2, r6
 800ffe4:	463b      	mov	r3, r7
 800ffe6:	f7f0 fb27 	bl	8000638 <__aeabi_dmul>
 800ffea:	4b76      	ldr	r3, [pc, #472]	; (80101c4 <__ieee754_acos+0x2f4>)
 800ffec:	2200      	movs	r2, #0
 800ffee:	f7f0 f96d 	bl	80002cc <__adddf3>
 800fff2:	4602      	mov	r2, r0
 800fff4:	460b      	mov	r3, r1
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	f7f0 fc47 	bl	800088c <__aeabi_ddiv>
 800fffe:	4622      	mov	r2, r4
 8010000:	462b      	mov	r3, r5
 8010002:	f7f0 fb19 	bl	8000638 <__aeabi_dmul>
 8010006:	4602      	mov	r2, r0
 8010008:	460b      	mov	r3, r1
 801000a:	a167      	add	r1, pc, #412	; (adr r1, 80101a8 <__ieee754_acos+0x2d8>)
 801000c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010010:	f7f0 f95a 	bl	80002c8 <__aeabi_dsub>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4620      	mov	r0, r4
 801001a:	4629      	mov	r1, r5
 801001c:	f7f0 f954 	bl	80002c8 <__aeabi_dsub>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	a162      	add	r1, pc, #392	; (adr r1, 80101b0 <__ieee754_acos+0x2e0>)
 8010026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801002a:	f7f0 f94d 	bl	80002c8 <__aeabi_dsub>
 801002e:	e771      	b.n	800ff14 <__ieee754_acos+0x44>
 8010030:	2d00      	cmp	r5, #0
 8010032:	f280 80cb 	bge.w	80101cc <__ieee754_acos+0x2fc>
 8010036:	ee10 0a10 	vmov	r0, s0
 801003a:	4b62      	ldr	r3, [pc, #392]	; (80101c4 <__ieee754_acos+0x2f4>)
 801003c:	2200      	movs	r2, #0
 801003e:	4629      	mov	r1, r5
 8010040:	f7f0 f944 	bl	80002cc <__adddf3>
 8010044:	4b60      	ldr	r3, [pc, #384]	; (80101c8 <__ieee754_acos+0x2f8>)
 8010046:	2200      	movs	r2, #0
 8010048:	f7f0 faf6 	bl	8000638 <__aeabi_dmul>
 801004c:	a342      	add	r3, pc, #264	; (adr r3, 8010158 <__ieee754_acos+0x288>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	4604      	mov	r4, r0
 8010054:	460d      	mov	r5, r1
 8010056:	f7f0 faef 	bl	8000638 <__aeabi_dmul>
 801005a:	a341      	add	r3, pc, #260	; (adr r3, 8010160 <__ieee754_acos+0x290>)
 801005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010060:	f7f0 f934 	bl	80002cc <__adddf3>
 8010064:	4622      	mov	r2, r4
 8010066:	462b      	mov	r3, r5
 8010068:	f7f0 fae6 	bl	8000638 <__aeabi_dmul>
 801006c:	a33e      	add	r3, pc, #248	; (adr r3, 8010168 <__ieee754_acos+0x298>)
 801006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010072:	f7f0 f929 	bl	80002c8 <__aeabi_dsub>
 8010076:	4622      	mov	r2, r4
 8010078:	462b      	mov	r3, r5
 801007a:	f7f0 fadd 	bl	8000638 <__aeabi_dmul>
 801007e:	a33c      	add	r3, pc, #240	; (adr r3, 8010170 <__ieee754_acos+0x2a0>)
 8010080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010084:	f7f0 f922 	bl	80002cc <__adddf3>
 8010088:	4622      	mov	r2, r4
 801008a:	462b      	mov	r3, r5
 801008c:	f7f0 fad4 	bl	8000638 <__aeabi_dmul>
 8010090:	a339      	add	r3, pc, #228	; (adr r3, 8010178 <__ieee754_acos+0x2a8>)
 8010092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010096:	f7f0 f917 	bl	80002c8 <__aeabi_dsub>
 801009a:	4622      	mov	r2, r4
 801009c:	462b      	mov	r3, r5
 801009e:	f7f0 facb 	bl	8000638 <__aeabi_dmul>
 80100a2:	a337      	add	r3, pc, #220	; (adr r3, 8010180 <__ieee754_acos+0x2b0>)
 80100a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a8:	f7f0 f910 	bl	80002cc <__adddf3>
 80100ac:	4622      	mov	r2, r4
 80100ae:	462b      	mov	r3, r5
 80100b0:	f7f0 fac2 	bl	8000638 <__aeabi_dmul>
 80100b4:	ec45 4b10 	vmov	d0, r4, r5
 80100b8:	4680      	mov	r8, r0
 80100ba:	4689      	mov	r9, r1
 80100bc:	f000 f99e 	bl	80103fc <__ieee754_sqrt>
 80100c0:	a331      	add	r3, pc, #196	; (adr r3, 8010188 <__ieee754_acos+0x2b8>)
 80100c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c6:	4620      	mov	r0, r4
 80100c8:	4629      	mov	r1, r5
 80100ca:	ec57 6b10 	vmov	r6, r7, d0
 80100ce:	f7f0 fab3 	bl	8000638 <__aeabi_dmul>
 80100d2:	a32f      	add	r3, pc, #188	; (adr r3, 8010190 <__ieee754_acos+0x2c0>)
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	f7f0 f8f6 	bl	80002c8 <__aeabi_dsub>
 80100dc:	4622      	mov	r2, r4
 80100de:	462b      	mov	r3, r5
 80100e0:	f7f0 faaa 	bl	8000638 <__aeabi_dmul>
 80100e4:	a32c      	add	r3, pc, #176	; (adr r3, 8010198 <__ieee754_acos+0x2c8>)
 80100e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ea:	f7f0 f8ef 	bl	80002cc <__adddf3>
 80100ee:	4622      	mov	r2, r4
 80100f0:	462b      	mov	r3, r5
 80100f2:	f7f0 faa1 	bl	8000638 <__aeabi_dmul>
 80100f6:	a32a      	add	r3, pc, #168	; (adr r3, 80101a0 <__ieee754_acos+0x2d0>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f7f0 f8e4 	bl	80002c8 <__aeabi_dsub>
 8010100:	4622      	mov	r2, r4
 8010102:	462b      	mov	r3, r5
 8010104:	f7f0 fa98 	bl	8000638 <__aeabi_dmul>
 8010108:	4b2e      	ldr	r3, [pc, #184]	; (80101c4 <__ieee754_acos+0x2f4>)
 801010a:	2200      	movs	r2, #0
 801010c:	f7f0 f8de 	bl	80002cc <__adddf3>
 8010110:	4602      	mov	r2, r0
 8010112:	460b      	mov	r3, r1
 8010114:	4640      	mov	r0, r8
 8010116:	4649      	mov	r1, r9
 8010118:	f7f0 fbb8 	bl	800088c <__aeabi_ddiv>
 801011c:	4632      	mov	r2, r6
 801011e:	463b      	mov	r3, r7
 8010120:	f7f0 fa8a 	bl	8000638 <__aeabi_dmul>
 8010124:	a320      	add	r3, pc, #128	; (adr r3, 80101a8 <__ieee754_acos+0x2d8>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	f7f0 f8cd 	bl	80002c8 <__aeabi_dsub>
 801012e:	4632      	mov	r2, r6
 8010130:	463b      	mov	r3, r7
 8010132:	f7f0 f8cb 	bl	80002cc <__adddf3>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	f7f0 f8c7 	bl	80002cc <__adddf3>
 801013e:	4602      	mov	r2, r0
 8010140:	460b      	mov	r3, r1
 8010142:	a103      	add	r1, pc, #12	; (adr r1, 8010150 <__ieee754_acos+0x280>)
 8010144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010148:	e76f      	b.n	801002a <__ieee754_acos+0x15a>
 801014a:	bf00      	nop
 801014c:	f3af 8000 	nop.w
 8010150:	54442d18 	.word	0x54442d18
 8010154:	400921fb 	.word	0x400921fb
 8010158:	0dfdf709 	.word	0x0dfdf709
 801015c:	3f023de1 	.word	0x3f023de1
 8010160:	7501b288 	.word	0x7501b288
 8010164:	3f49efe0 	.word	0x3f49efe0
 8010168:	b5688f3b 	.word	0xb5688f3b
 801016c:	3fa48228 	.word	0x3fa48228
 8010170:	0e884455 	.word	0x0e884455
 8010174:	3fc9c155 	.word	0x3fc9c155
 8010178:	03eb6f7d 	.word	0x03eb6f7d
 801017c:	3fd4d612 	.word	0x3fd4d612
 8010180:	55555555 	.word	0x55555555
 8010184:	3fc55555 	.word	0x3fc55555
 8010188:	b12e9282 	.word	0xb12e9282
 801018c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010190:	1b8d0159 	.word	0x1b8d0159
 8010194:	3fe6066c 	.word	0x3fe6066c
 8010198:	9c598ac8 	.word	0x9c598ac8
 801019c:	40002ae5 	.word	0x40002ae5
 80101a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80101a4:	40033a27 	.word	0x40033a27
 80101a8:	33145c07 	.word	0x33145c07
 80101ac:	3c91a626 	.word	0x3c91a626
 80101b0:	54442d18 	.word	0x54442d18
 80101b4:	3ff921fb 	.word	0x3ff921fb
 80101b8:	3fefffff 	.word	0x3fefffff
 80101bc:	3fdfffff 	.word	0x3fdfffff
 80101c0:	3c600000 	.word	0x3c600000
 80101c4:	3ff00000 	.word	0x3ff00000
 80101c8:	3fe00000 	.word	0x3fe00000
 80101cc:	ee10 2a10 	vmov	r2, s0
 80101d0:	462b      	mov	r3, r5
 80101d2:	496d      	ldr	r1, [pc, #436]	; (8010388 <__ieee754_acos+0x4b8>)
 80101d4:	2000      	movs	r0, #0
 80101d6:	f7f0 f877 	bl	80002c8 <__aeabi_dsub>
 80101da:	4b6c      	ldr	r3, [pc, #432]	; (801038c <__ieee754_acos+0x4bc>)
 80101dc:	2200      	movs	r2, #0
 80101de:	f7f0 fa2b 	bl	8000638 <__aeabi_dmul>
 80101e2:	4604      	mov	r4, r0
 80101e4:	460d      	mov	r5, r1
 80101e6:	ec45 4b10 	vmov	d0, r4, r5
 80101ea:	f000 f907 	bl	80103fc <__ieee754_sqrt>
 80101ee:	a34e      	add	r3, pc, #312	; (adr r3, 8010328 <__ieee754_acos+0x458>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	4620      	mov	r0, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	ec59 8b10 	vmov	r8, r9, d0
 80101fc:	f7f0 fa1c 	bl	8000638 <__aeabi_dmul>
 8010200:	a34b      	add	r3, pc, #300	; (adr r3, 8010330 <__ieee754_acos+0x460>)
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	f7f0 f861 	bl	80002cc <__adddf3>
 801020a:	4622      	mov	r2, r4
 801020c:	462b      	mov	r3, r5
 801020e:	f7f0 fa13 	bl	8000638 <__aeabi_dmul>
 8010212:	a349      	add	r3, pc, #292	; (adr r3, 8010338 <__ieee754_acos+0x468>)
 8010214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010218:	f7f0 f856 	bl	80002c8 <__aeabi_dsub>
 801021c:	4622      	mov	r2, r4
 801021e:	462b      	mov	r3, r5
 8010220:	f7f0 fa0a 	bl	8000638 <__aeabi_dmul>
 8010224:	a346      	add	r3, pc, #280	; (adr r3, 8010340 <__ieee754_acos+0x470>)
 8010226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022a:	f7f0 f84f 	bl	80002cc <__adddf3>
 801022e:	4622      	mov	r2, r4
 8010230:	462b      	mov	r3, r5
 8010232:	f7f0 fa01 	bl	8000638 <__aeabi_dmul>
 8010236:	a344      	add	r3, pc, #272	; (adr r3, 8010348 <__ieee754_acos+0x478>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	f7f0 f844 	bl	80002c8 <__aeabi_dsub>
 8010240:	4622      	mov	r2, r4
 8010242:	462b      	mov	r3, r5
 8010244:	f7f0 f9f8 	bl	8000638 <__aeabi_dmul>
 8010248:	a341      	add	r3, pc, #260	; (adr r3, 8010350 <__ieee754_acos+0x480>)
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	f7f0 f83d 	bl	80002cc <__adddf3>
 8010252:	4622      	mov	r2, r4
 8010254:	462b      	mov	r3, r5
 8010256:	f7f0 f9ef 	bl	8000638 <__aeabi_dmul>
 801025a:	a33f      	add	r3, pc, #252	; (adr r3, 8010358 <__ieee754_acos+0x488>)
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	4682      	mov	sl, r0
 8010262:	468b      	mov	fp, r1
 8010264:	4620      	mov	r0, r4
 8010266:	4629      	mov	r1, r5
 8010268:	f7f0 f9e6 	bl	8000638 <__aeabi_dmul>
 801026c:	a33c      	add	r3, pc, #240	; (adr r3, 8010360 <__ieee754_acos+0x490>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	f7f0 f829 	bl	80002c8 <__aeabi_dsub>
 8010276:	4622      	mov	r2, r4
 8010278:	462b      	mov	r3, r5
 801027a:	f7f0 f9dd 	bl	8000638 <__aeabi_dmul>
 801027e:	a33a      	add	r3, pc, #232	; (adr r3, 8010368 <__ieee754_acos+0x498>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	f7f0 f822 	bl	80002cc <__adddf3>
 8010288:	4622      	mov	r2, r4
 801028a:	462b      	mov	r3, r5
 801028c:	f7f0 f9d4 	bl	8000638 <__aeabi_dmul>
 8010290:	a337      	add	r3, pc, #220	; (adr r3, 8010370 <__ieee754_acos+0x4a0>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	f7f0 f817 	bl	80002c8 <__aeabi_dsub>
 801029a:	4622      	mov	r2, r4
 801029c:	462b      	mov	r3, r5
 801029e:	f7f0 f9cb 	bl	8000638 <__aeabi_dmul>
 80102a2:	4b39      	ldr	r3, [pc, #228]	; (8010388 <__ieee754_acos+0x4b8>)
 80102a4:	2200      	movs	r2, #0
 80102a6:	f7f0 f811 	bl	80002cc <__adddf3>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	4650      	mov	r0, sl
 80102b0:	4659      	mov	r1, fp
 80102b2:	f7f0 faeb 	bl	800088c <__aeabi_ddiv>
 80102b6:	4642      	mov	r2, r8
 80102b8:	464b      	mov	r3, r9
 80102ba:	f7f0 f9bd 	bl	8000638 <__aeabi_dmul>
 80102be:	2600      	movs	r6, #0
 80102c0:	4682      	mov	sl, r0
 80102c2:	468b      	mov	fp, r1
 80102c4:	4632      	mov	r2, r6
 80102c6:	464b      	mov	r3, r9
 80102c8:	4630      	mov	r0, r6
 80102ca:	4649      	mov	r1, r9
 80102cc:	f7f0 f9b4 	bl	8000638 <__aeabi_dmul>
 80102d0:	4602      	mov	r2, r0
 80102d2:	460b      	mov	r3, r1
 80102d4:	4620      	mov	r0, r4
 80102d6:	4629      	mov	r1, r5
 80102d8:	f7ef fff6 	bl	80002c8 <__aeabi_dsub>
 80102dc:	4632      	mov	r2, r6
 80102de:	4604      	mov	r4, r0
 80102e0:	460d      	mov	r5, r1
 80102e2:	464b      	mov	r3, r9
 80102e4:	4640      	mov	r0, r8
 80102e6:	4649      	mov	r1, r9
 80102e8:	f7ef fff0 	bl	80002cc <__adddf3>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4620      	mov	r0, r4
 80102f2:	4629      	mov	r1, r5
 80102f4:	f7f0 faca 	bl	800088c <__aeabi_ddiv>
 80102f8:	4602      	mov	r2, r0
 80102fa:	460b      	mov	r3, r1
 80102fc:	4650      	mov	r0, sl
 80102fe:	4659      	mov	r1, fp
 8010300:	f7ef ffe4 	bl	80002cc <__adddf3>
 8010304:	4632      	mov	r2, r6
 8010306:	464b      	mov	r3, r9
 8010308:	f7ef ffe0 	bl	80002cc <__adddf3>
 801030c:	4602      	mov	r2, r0
 801030e:	460b      	mov	r3, r1
 8010310:	f7ef ffdc 	bl	80002cc <__adddf3>
 8010314:	e5fe      	b.n	800ff14 <__ieee754_acos+0x44>
 8010316:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010378 <__ieee754_acos+0x4a8>
 801031a:	e5ed      	b.n	800fef8 <__ieee754_acos+0x28>
 801031c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010380 <__ieee754_acos+0x4b0>
 8010320:	e5ea      	b.n	800fef8 <__ieee754_acos+0x28>
 8010322:	bf00      	nop
 8010324:	f3af 8000 	nop.w
 8010328:	0dfdf709 	.word	0x0dfdf709
 801032c:	3f023de1 	.word	0x3f023de1
 8010330:	7501b288 	.word	0x7501b288
 8010334:	3f49efe0 	.word	0x3f49efe0
 8010338:	b5688f3b 	.word	0xb5688f3b
 801033c:	3fa48228 	.word	0x3fa48228
 8010340:	0e884455 	.word	0x0e884455
 8010344:	3fc9c155 	.word	0x3fc9c155
 8010348:	03eb6f7d 	.word	0x03eb6f7d
 801034c:	3fd4d612 	.word	0x3fd4d612
 8010350:	55555555 	.word	0x55555555
 8010354:	3fc55555 	.word	0x3fc55555
 8010358:	b12e9282 	.word	0xb12e9282
 801035c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010360:	1b8d0159 	.word	0x1b8d0159
 8010364:	3fe6066c 	.word	0x3fe6066c
 8010368:	9c598ac8 	.word	0x9c598ac8
 801036c:	40002ae5 	.word	0x40002ae5
 8010370:	1c8a2d4b 	.word	0x1c8a2d4b
 8010374:	40033a27 	.word	0x40033a27
	...
 8010380:	54442d18 	.word	0x54442d18
 8010384:	3ff921fb 	.word	0x3ff921fb
 8010388:	3ff00000 	.word	0x3ff00000
 801038c:	3fe00000 	.word	0x3fe00000

08010390 <sqrt>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	ed2d 8b02 	vpush	{d8}
 8010396:	ec55 4b10 	vmov	r4, r5, d0
 801039a:	f000 f82f 	bl	80103fc <__ieee754_sqrt>
 801039e:	4622      	mov	r2, r4
 80103a0:	462b      	mov	r3, r5
 80103a2:	4620      	mov	r0, r4
 80103a4:	4629      	mov	r1, r5
 80103a6:	eeb0 8a40 	vmov.f32	s16, s0
 80103aa:	eef0 8a60 	vmov.f32	s17, s1
 80103ae:	f7f0 fbdd 	bl	8000b6c <__aeabi_dcmpun>
 80103b2:	b990      	cbnz	r0, 80103da <sqrt+0x4a>
 80103b4:	2200      	movs	r2, #0
 80103b6:	2300      	movs	r3, #0
 80103b8:	4620      	mov	r0, r4
 80103ba:	4629      	mov	r1, r5
 80103bc:	f7f0 fbae 	bl	8000b1c <__aeabi_dcmplt>
 80103c0:	b158      	cbz	r0, 80103da <sqrt+0x4a>
 80103c2:	f7fd f81b 	bl	800d3fc <__errno>
 80103c6:	2321      	movs	r3, #33	; 0x21
 80103c8:	6003      	str	r3, [r0, #0]
 80103ca:	2200      	movs	r2, #0
 80103cc:	2300      	movs	r3, #0
 80103ce:	4610      	mov	r0, r2
 80103d0:	4619      	mov	r1, r3
 80103d2:	f7f0 fa5b 	bl	800088c <__aeabi_ddiv>
 80103d6:	ec41 0b18 	vmov	d8, r0, r1
 80103da:	eeb0 0a48 	vmov.f32	s0, s16
 80103de:	eef0 0a68 	vmov.f32	s1, s17
 80103e2:	ecbd 8b02 	vpop	{d8}
 80103e6:	bd38      	pop	{r3, r4, r5, pc}

080103e8 <fabs>:
 80103e8:	ec51 0b10 	vmov	r0, r1, d0
 80103ec:	ee10 2a10 	vmov	r2, s0
 80103f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80103f4:	ec43 2b10 	vmov	d0, r2, r3
 80103f8:	4770      	bx	lr
	...

080103fc <__ieee754_sqrt>:
 80103fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	ec55 4b10 	vmov	r4, r5, d0
 8010404:	4e67      	ldr	r6, [pc, #412]	; (80105a4 <__ieee754_sqrt+0x1a8>)
 8010406:	43ae      	bics	r6, r5
 8010408:	ee10 0a10 	vmov	r0, s0
 801040c:	ee10 2a10 	vmov	r2, s0
 8010410:	4629      	mov	r1, r5
 8010412:	462b      	mov	r3, r5
 8010414:	d10d      	bne.n	8010432 <__ieee754_sqrt+0x36>
 8010416:	f7f0 f90f 	bl	8000638 <__aeabi_dmul>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	4620      	mov	r0, r4
 8010420:	4629      	mov	r1, r5
 8010422:	f7ef ff53 	bl	80002cc <__adddf3>
 8010426:	4604      	mov	r4, r0
 8010428:	460d      	mov	r5, r1
 801042a:	ec45 4b10 	vmov	d0, r4, r5
 801042e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010432:	2d00      	cmp	r5, #0
 8010434:	dc0b      	bgt.n	801044e <__ieee754_sqrt+0x52>
 8010436:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801043a:	4326      	orrs	r6, r4
 801043c:	d0f5      	beq.n	801042a <__ieee754_sqrt+0x2e>
 801043e:	b135      	cbz	r5, 801044e <__ieee754_sqrt+0x52>
 8010440:	f7ef ff42 	bl	80002c8 <__aeabi_dsub>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	f7f0 fa20 	bl	800088c <__aeabi_ddiv>
 801044c:	e7eb      	b.n	8010426 <__ieee754_sqrt+0x2a>
 801044e:	1509      	asrs	r1, r1, #20
 8010450:	f000 808d 	beq.w	801056e <__ieee754_sqrt+0x172>
 8010454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010458:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801045c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010460:	07c9      	lsls	r1, r1, #31
 8010462:	bf5c      	itt	pl
 8010464:	005b      	lslpl	r3, r3, #1
 8010466:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801046a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801046e:	bf58      	it	pl
 8010470:	0052      	lslpl	r2, r2, #1
 8010472:	2500      	movs	r5, #0
 8010474:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010478:	1076      	asrs	r6, r6, #1
 801047a:	0052      	lsls	r2, r2, #1
 801047c:	f04f 0e16 	mov.w	lr, #22
 8010480:	46ac      	mov	ip, r5
 8010482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010486:	eb0c 0001 	add.w	r0, ip, r1
 801048a:	4298      	cmp	r0, r3
 801048c:	bfde      	ittt	le
 801048e:	1a1b      	suble	r3, r3, r0
 8010490:	eb00 0c01 	addle.w	ip, r0, r1
 8010494:	186d      	addle	r5, r5, r1
 8010496:	005b      	lsls	r3, r3, #1
 8010498:	f1be 0e01 	subs.w	lr, lr, #1
 801049c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80104a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80104a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80104a8:	d1ed      	bne.n	8010486 <__ieee754_sqrt+0x8a>
 80104aa:	4674      	mov	r4, lr
 80104ac:	2720      	movs	r7, #32
 80104ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80104b2:	4563      	cmp	r3, ip
 80104b4:	eb01 000e 	add.w	r0, r1, lr
 80104b8:	dc02      	bgt.n	80104c0 <__ieee754_sqrt+0xc4>
 80104ba:	d113      	bne.n	80104e4 <__ieee754_sqrt+0xe8>
 80104bc:	4290      	cmp	r0, r2
 80104be:	d811      	bhi.n	80104e4 <__ieee754_sqrt+0xe8>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	eb00 0e01 	add.w	lr, r0, r1
 80104c6:	da57      	bge.n	8010578 <__ieee754_sqrt+0x17c>
 80104c8:	f1be 0f00 	cmp.w	lr, #0
 80104cc:	db54      	blt.n	8010578 <__ieee754_sqrt+0x17c>
 80104ce:	f10c 0801 	add.w	r8, ip, #1
 80104d2:	eba3 030c 	sub.w	r3, r3, ip
 80104d6:	4290      	cmp	r0, r2
 80104d8:	bf88      	it	hi
 80104da:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80104de:	1a12      	subs	r2, r2, r0
 80104e0:	440c      	add	r4, r1
 80104e2:	46c4      	mov	ip, r8
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	3f01      	subs	r7, #1
 80104e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80104ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80104f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80104f4:	d1dd      	bne.n	80104b2 <__ieee754_sqrt+0xb6>
 80104f6:	4313      	orrs	r3, r2
 80104f8:	d01b      	beq.n	8010532 <__ieee754_sqrt+0x136>
 80104fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80105a8 <__ieee754_sqrt+0x1ac>
 80104fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80105ac <__ieee754_sqrt+0x1b0>
 8010502:	e9da 0100 	ldrd	r0, r1, [sl]
 8010506:	e9db 2300 	ldrd	r2, r3, [fp]
 801050a:	f7ef fedd 	bl	80002c8 <__aeabi_dsub>
 801050e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010512:	4602      	mov	r2, r0
 8010514:	460b      	mov	r3, r1
 8010516:	4640      	mov	r0, r8
 8010518:	4649      	mov	r1, r9
 801051a:	f7f0 fb09 	bl	8000b30 <__aeabi_dcmple>
 801051e:	b140      	cbz	r0, 8010532 <__ieee754_sqrt+0x136>
 8010520:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010524:	e9da 0100 	ldrd	r0, r1, [sl]
 8010528:	e9db 2300 	ldrd	r2, r3, [fp]
 801052c:	d126      	bne.n	801057c <__ieee754_sqrt+0x180>
 801052e:	3501      	adds	r5, #1
 8010530:	463c      	mov	r4, r7
 8010532:	106a      	asrs	r2, r5, #1
 8010534:	0863      	lsrs	r3, r4, #1
 8010536:	07e9      	lsls	r1, r5, #31
 8010538:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801053c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010540:	bf48      	it	mi
 8010542:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010546:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801054a:	461c      	mov	r4, r3
 801054c:	e76d      	b.n	801042a <__ieee754_sqrt+0x2e>
 801054e:	0ad3      	lsrs	r3, r2, #11
 8010550:	3815      	subs	r0, #21
 8010552:	0552      	lsls	r2, r2, #21
 8010554:	2b00      	cmp	r3, #0
 8010556:	d0fa      	beq.n	801054e <__ieee754_sqrt+0x152>
 8010558:	02dc      	lsls	r4, r3, #11
 801055a:	d50a      	bpl.n	8010572 <__ieee754_sqrt+0x176>
 801055c:	f1c1 0420 	rsb	r4, r1, #32
 8010560:	fa22 f404 	lsr.w	r4, r2, r4
 8010564:	1e4d      	subs	r5, r1, #1
 8010566:	408a      	lsls	r2, r1
 8010568:	4323      	orrs	r3, r4
 801056a:	1b41      	subs	r1, r0, r5
 801056c:	e772      	b.n	8010454 <__ieee754_sqrt+0x58>
 801056e:	4608      	mov	r0, r1
 8010570:	e7f0      	b.n	8010554 <__ieee754_sqrt+0x158>
 8010572:	005b      	lsls	r3, r3, #1
 8010574:	3101      	adds	r1, #1
 8010576:	e7ef      	b.n	8010558 <__ieee754_sqrt+0x15c>
 8010578:	46e0      	mov	r8, ip
 801057a:	e7aa      	b.n	80104d2 <__ieee754_sqrt+0xd6>
 801057c:	f7ef fea6 	bl	80002cc <__adddf3>
 8010580:	e9da 8900 	ldrd	r8, r9, [sl]
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4640      	mov	r0, r8
 801058a:	4649      	mov	r1, r9
 801058c:	f7f0 fac6 	bl	8000b1c <__aeabi_dcmplt>
 8010590:	b120      	cbz	r0, 801059c <__ieee754_sqrt+0x1a0>
 8010592:	1ca0      	adds	r0, r4, #2
 8010594:	bf08      	it	eq
 8010596:	3501      	addeq	r5, #1
 8010598:	3402      	adds	r4, #2
 801059a:	e7ca      	b.n	8010532 <__ieee754_sqrt+0x136>
 801059c:	3401      	adds	r4, #1
 801059e:	f024 0401 	bic.w	r4, r4, #1
 80105a2:	e7c6      	b.n	8010532 <__ieee754_sqrt+0x136>
 80105a4:	7ff00000 	.word	0x7ff00000
 80105a8:	20000210 	.word	0x20000210
 80105ac:	20000218 	.word	0x20000218

080105b0 <round>:
 80105b0:	ec53 2b10 	vmov	r2, r3, d0
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80105ba:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80105be:	2813      	cmp	r0, #19
 80105c0:	ee10 5a10 	vmov	r5, s0
 80105c4:	4619      	mov	r1, r3
 80105c6:	dc18      	bgt.n	80105fa <round+0x4a>
 80105c8:	2800      	cmp	r0, #0
 80105ca:	da09      	bge.n	80105e0 <round+0x30>
 80105cc:	3001      	adds	r0, #1
 80105ce:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80105d2:	d103      	bne.n	80105dc <round+0x2c>
 80105d4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80105d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80105dc:	2300      	movs	r3, #0
 80105de:	e02a      	b.n	8010636 <round+0x86>
 80105e0:	4c16      	ldr	r4, [pc, #88]	; (801063c <round+0x8c>)
 80105e2:	4104      	asrs	r4, r0
 80105e4:	ea03 0604 	and.w	r6, r3, r4
 80105e8:	4316      	orrs	r6, r2
 80105ea:	d011      	beq.n	8010610 <round+0x60>
 80105ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80105f0:	4103      	asrs	r3, r0
 80105f2:	440b      	add	r3, r1
 80105f4:	ea23 0104 	bic.w	r1, r3, r4
 80105f8:	e7f0      	b.n	80105dc <round+0x2c>
 80105fa:	2833      	cmp	r0, #51	; 0x33
 80105fc:	dd0b      	ble.n	8010616 <round+0x66>
 80105fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010602:	d105      	bne.n	8010610 <round+0x60>
 8010604:	ee10 0a10 	vmov	r0, s0
 8010608:	f7ef fe60 	bl	80002cc <__adddf3>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	ec43 2b10 	vmov	d0, r2, r3
 8010614:	bd70      	pop	{r4, r5, r6, pc}
 8010616:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801061a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801061e:	40f4      	lsrs	r4, r6
 8010620:	4214      	tst	r4, r2
 8010622:	d0f5      	beq.n	8010610 <round+0x60>
 8010624:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010628:	2301      	movs	r3, #1
 801062a:	4083      	lsls	r3, r0
 801062c:	195b      	adds	r3, r3, r5
 801062e:	bf28      	it	cs
 8010630:	3101      	addcs	r1, #1
 8010632:	ea23 0304 	bic.w	r3, r3, r4
 8010636:	461a      	mov	r2, r3
 8010638:	460b      	mov	r3, r1
 801063a:	e7e9      	b.n	8010610 <round+0x60>
 801063c:	000fffff 	.word	0x000fffff

08010640 <trunc>:
 8010640:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8010644:	ec5c bb10 	vmov	fp, ip, d0
 8010648:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801064c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8010650:	2913      	cmp	r1, #19
 8010652:	4664      	mov	r4, ip
 8010654:	dc11      	bgt.n	801067a <trunc+0x3a>
 8010656:	2900      	cmp	r1, #0
 8010658:	bfa7      	ittee	ge
 801065a:	4b15      	ldrge	r3, [pc, #84]	; (80106b0 <trunc+0x70>)
 801065c:	fa43 f101 	asrge.w	r1, r3, r1
 8010660:	2200      	movlt	r2, #0
 8010662:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8010666:	bfa4      	itt	ge
 8010668:	2200      	movge	r2, #0
 801066a:	ea01 030c 	andge.w	r3, r1, ip
 801066e:	4693      	mov	fp, r2
 8010670:	469c      	mov	ip, r3
 8010672:	ec4c bb10 	vmov	d0, fp, ip
 8010676:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 801067a:	2933      	cmp	r1, #51	; 0x33
 801067c:	dd0d      	ble.n	801069a <trunc+0x5a>
 801067e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010682:	d1f6      	bne.n	8010672 <trunc+0x32>
 8010684:	4663      	mov	r3, ip
 8010686:	ee10 2a10 	vmov	r2, s0
 801068a:	ee10 0a10 	vmov	r0, s0
 801068e:	4621      	mov	r1, r4
 8010690:	f7ef fe1c 	bl	80002cc <__adddf3>
 8010694:	4683      	mov	fp, r0
 8010696:	468c      	mov	ip, r1
 8010698:	e7eb      	b.n	8010672 <trunc+0x32>
 801069a:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 801069e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106a2:	40c3      	lsrs	r3, r0
 80106a4:	ea2b 0603 	bic.w	r6, fp, r3
 80106a8:	46b3      	mov	fp, r6
 80106aa:	46a4      	mov	ip, r4
 80106ac:	e7e1      	b.n	8010672 <trunc+0x32>
 80106ae:	bf00      	nop
 80106b0:	fff00000 	.word	0xfff00000
 80106b4:	00000000 	.word	0x00000000

080106b8 <nan>:
 80106b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80106c0 <nan+0x8>
 80106bc:	4770      	bx	lr
 80106be:	bf00      	nop
 80106c0:	00000000 	.word	0x00000000
 80106c4:	7ff80000 	.word	0x7ff80000

080106c8 <_init>:
 80106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ca:	bf00      	nop
 80106cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ce:	bc08      	pop	{r3}
 80106d0:	469e      	mov	lr, r3
 80106d2:	4770      	bx	lr

080106d4 <_fini>:
 80106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106d6:	bf00      	nop
 80106d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106da:	bc08      	pop	{r3}
 80106dc:	469e      	mov	lr, r3
 80106de:	4770      	bx	lr
