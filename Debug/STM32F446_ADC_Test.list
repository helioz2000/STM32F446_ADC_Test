
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f160  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a98  0800f330  0800f330  0001f330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013dc8  08013dc8  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08013dc8  08013dc8  00023dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013dd0  08013dd0  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013dd0  08013dd0  00023dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013dd4  08013dd4  00023dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08013dd8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f00  20000220  08013ff8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009120  08013ff8  00039120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161c8  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000381d  00000000  00000000  0004645b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00049c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa7  00000000  00000000  0004b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026af7  00000000  00000000  0004c077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001acc0  00000000  00000000  00072b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3056  00000000  00000000  0008d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bd8  00000000  00000000  00170884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017745c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f318 	.word	0x0800f318

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800f318 	.word	0x0800f318

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0bc      	b.n	80011c2 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4951      	ldr	r1, [pc, #324]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	494c      	ldr	r1, [pc, #304]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4947      	ldr	r1, [pc, #284]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4942      	ldr	r1, [pc, #264]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	492c      	ldr	r1, [pc, #176]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	82fb      	strh	r3, [r7, #22]
 8001144:	e030      	b.n	80011a8 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001146:	8af9      	ldrh	r1, [r7, #22]
 8001148:	7c7a      	ldrb	r2, [r7, #17]
 800114a:	8a7b      	ldrh	r3, [r7, #18]
 800114c:	4c20      	ldr	r4, [pc, #128]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001154:	fb05 f000 	mul.w	r0, r5, r0
 8001158:	4401      	add	r1, r0
 800115a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800115e:	491d      	ldr	r1, [pc, #116]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	4622      	mov	r2, r4
 800116c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	7c3a      	ldrb	r2, [r7, #16]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	8278      	strh	r0, [r7, #18]
 800117c:	461d      	mov	r5, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001186:	fb04 f303 	mul.w	r3, r4, r3
 800118a:	440b      	add	r3, r1
 800118c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001192:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	442b      	add	r3, r5
 800119c:	4602      	mov	r2, r0
 800119e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3302      	adds	r3, #2
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d9ca      	bls.n	8001146 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f93c 	bl	8001430 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f938 	bl	8001430 <calc_downsample>
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	2000232c 	.word	0x2000232c
 80011d4:	200057ac 	.word	0x200057ac

080011d8 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	f200 8117 	bhi.w	800141c <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0df      	b.n	80013de <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <calc_zero_detector+0x250>)
 8001222:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001226:	fb03 f202 	mul.w	r2, r3, r2
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	f300 80ce 	bgt.w	80013d8 <calc_zero_detector+0x200>
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	497a      	ldr	r1, [pc, #488]	; (8001428 <calc_zero_detector+0x250>)
 8001240:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4293      	cmp	r3, r2
 8001256:	f2c0 80bf 	blt.w	80013d8 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <calc_zero_detector+0x250>)
 800125e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4293      	cmp	r3, r2
 8001274:	da3d      	bge.n	80012f2 <calc_zero_detector+0x11a>
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3b01      	subs	r3, #1
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <calc_zero_detector+0x250>)
 800127e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	db2e      	blt.n	80012f2 <calc_zero_detector+0x11a>
				detected++;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	3301      	adds	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd11      	ble.n	80012c4 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <calc_zero_detector+0x250>)
 80012a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ac:	fb00 f202 	mul.w	r2, r0, r2
 80012b0:	4413      	add	r3, r2
 80012b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	dd02      	ble.n	80012c4 <calc_zero_detector+0xec>
						detected++;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3301      	adds	r3, #1
 80012c2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012cc:	d211      	bcs.n	80012f2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3302      	adds	r3, #2
 80012d4:	4954      	ldr	r1, [pc, #336]	; (8001428 <calc_zero_detector+0x250>)
 80012d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012da:	fb00 f202 	mul.w	r2, r0, r2
 80012de:	4413      	add	r3, r2
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	da02      	bge.n	80012f2 <calc_zero_detector+0x11a>
						detected++;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	3301      	adds	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90f      	bls.n	8001318 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	494c      	ldr	r1, [pc, #304]	; (800142c <calc_zero_detector+0x254>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]
				detected = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 8001316:	e05f      	b.n	80013d8 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4942      	ldr	r1, [pc, #264]	; (8001428 <calc_zero_detector+0x250>)
 8001320:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4413      	add	r3, r2
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	dd4f      	ble.n	80013d8 <calc_zero_detector+0x200>
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	493a      	ldr	r1, [pc, #232]	; (8001428 <calc_zero_detector+0x250>)
 8001340:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	4413      	add	r3, r2
 800134a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc40      	bgt.n	80013d8 <calc_zero_detector+0x200>
				detected++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd11      	ble.n	8001386 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b02      	subs	r3, #2
 8001368:	492f      	ldr	r1, [pc, #188]	; (8001428 <calc_zero_detector+0x250>)
 800136a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136e:	fb00 f202 	mul.w	r2, r0, r2
 8001372:	4413      	add	r3, r2
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4293      	cmp	r3, r2
 800137e:	dc02      	bgt.n	8001386 <calc_zero_detector+0x1ae>
						detected++;
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3302      	adds	r3, #2
 800138a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800138e:	d211      	bcs.n	80013b4 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <calc_zero_detector+0x250>)
 8001398:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800139c:	fb00 f202 	mul.w	r2, r0, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd02      	ble.n	80013b4 <calc_zero_detector+0x1dc>
						detected++;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d90c      	bls.n	80013d4 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <calc_zero_detector+0x254>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3308      	adds	r3, #8
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013e4:	f4ff af1b 	bcc.w	800121e <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <calc_zero_detector+0x254>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	f06f 0208 	mvn.w	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <calc_zero_detector+0x254>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f06f 0208 	mvn.w	r2, #8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e000      	b.n	800141e <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800141c:	bf00      	nop
	}
}
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	200071ec 	.word	0x200071ec
 800142c:	2000023c 	.word	0x2000023c

08001430 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800143a:	2300      	movs	r3, #0
 800143c:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80f1 	bhi.w	8001628 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e083      	b.n	8001554 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <calc_downsample+0x200>)
 8001450:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001454:	fb03 f202 	mul.w	r2, r3, r2
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001460:	461c      	mov	r4, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3b01      	subs	r3, #1
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <calc_downsample+0x200>)
 800146a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	4423      	add	r3, r4
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	3201      	adds	r2, #1
 8001480:	486b      	ldr	r0, [pc, #428]	; (8001630 <calc_downsample+0x200>)
 8001482:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001486:	fb04 f101 	mul.w	r1, r4, r1
 800148a:	440a      	add	r2, r1
 800148c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001490:	4413      	add	r3, r2
 8001492:	4a68      	ldr	r2, [pc, #416]	; (8001634 <calc_downsample+0x204>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	b28c      	uxth	r4, r1
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <calc_downsample+0x208>)
 80014a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014a8:	fb00 f202 	mul.w	r2, r0, r2
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <calc_downsample+0x20c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	82bb      	strh	r3, [r7, #20]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	8bfb      	ldrh	r3, [r7, #30]
 80014ca:	495b      	ldr	r1, [pc, #364]	; (8001638 <calc_downsample+0x208>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf28      	it	cs
 80014e4:	4613      	movcs	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <calc_downsample+0x20c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	494f      	ldr	r1, [pc, #316]	; (800163c <calc_downsample+0x20c>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	823b      	strh	r3, [r7, #16]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	4948      	ldr	r1, [pc, #288]	; (8001638 <calc_downsample+0x208>)
 8001516:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800151a:	fb00 f202 	mul.w	r2, r0, r2
 800151e:	4413      	add	r3, r2
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	8a3b      	ldrh	r3, [r7, #16]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf38      	it	cc
 800152e:	4613      	movcc	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	b298      	uxth	r0, r3
 8001536:	4941      	ldr	r1, [pc, #260]	; (800163c <calc_downsample+0x20c>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3302      	adds	r3, #2
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	3301      	adds	r3, #1
 800154c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3302      	adds	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f240 3245 	movw	r2, #837	; 0x345
 800155a:	4293      	cmp	r3, r2
 800155c:	f67f af76 	bls.w	800144c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <calc_downsample+0x200>)
 8001564:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <calc_downsample+0x200>)
 800157a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4403      	add	r3, r0
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	4618      	mov	r0, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	83f9      	strh	r1, [r7, #30]
 800159c:	461c      	mov	r4, r3
 800159e:	b280      	uxth	r0, r0
 80015a0:	4925      	ldr	r1, [pc, #148]	; (8001638 <calc_downsample+0x208>)
 80015a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4423      	add	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015b8:	d20a      	bcs.n	80015d0 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <calc_downsample+0x208>)
 80015c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015c4:	fb00 f202 	mul.w	r2, r0, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <calc_downsample+0x20c>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <calc_downsample+0x20c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <calc_downsample+0x20c>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	18c1      	adds	r1, r0, r3
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <calc_downsample+0x210>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdd9 	bl	80011d8 <calc_zero_detector>
 8001626:	e000      	b.n	800162a <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001628:	bf00      	nop
}
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200057ac 	.word	0x200057ac
 8001634:	55555556 	.word	0x55555556
 8001638:	200071ec 	.word	0x200071ec
 800163c:	2000023c 	.word	0x2000023c
 8001640:	cccccccd 	.word	0xcccccccd

08001644 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e039      	b.n	80016c4 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	4a74      	ldr	r2, [pc, #464]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4972      	ldr	r1, [pc, #456]	; (8001828 <calc_filter_measurements+0x1e4>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	4a70      	ldr	r2, [pc, #448]	; (800182c <calc_filter_measurements+0x1e8>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	496e      	ldr	r1, [pc, #440]	; (800182c <calc_filter_measurements+0x1e8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <calc_filter_measurements+0x1ec>)
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4969      	ldr	r1, [pc, #420]	; (8001830 <calc_filter_measurements+0x1ec>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a62      	ldr	r2, [pc, #392]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4960      	ldr	r1, [pc, #384]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	ddc2      	ble.n	8001650 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <calc_filter_measurements+0x1f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a56      	ldr	r2, [pc, #344]	; (8001828 <calc_filter_measurements+0x1e4>)
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <calc_filter_measurements+0x1fc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <calc_filter_measurements+0x1e8>)
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <calc_filter_measurements+0x200>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a54      	ldr	r2, [pc, #336]	; (8001830 <calc_filter_measurements+0x1ec>)
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <calc_filter_measurements+0x204>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <calc_filter_measurements+0x208>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016f0:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <calc_filter_measurements+0x20c>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <calc_filter_measurements+0x210>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <calc_filter_measurements+0x214>)
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <calc_filter_measurements+0x218>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <calc_filter_measurements+0x21c>)
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e048      	b.n	80017b2 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001720:	4a41      	ldr	r2, [pc, #260]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <calc_filter_measurements+0x20c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <calc_filter_measurements+0x20c>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <calc_filter_measurements+0x1e8>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <calc_filter_measurements+0x210>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <calc_filter_measurements+0x210>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <calc_filter_measurements+0x1ec>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <calc_filter_measurements+0x214>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <calc_filter_measurements+0x214>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <calc_filter_measurements+0x218>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <calc_filter_measurements+0x218>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <calc_filter_measurements+0x1f4>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <calc_filter_measurements+0x21c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <calc_filter_measurements+0x21c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	ddb3      	ble.n	8001720 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <calc_filter_measurements+0x20c>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <calc_filter_measurements+0x20c>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <calc_filter_measurements+0x210>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <calc_filter_measurements+0x210>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <calc_filter_measurements+0x214>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <calc_filter_measurements+0x214>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <calc_filter_measurements+0x218>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <calc_filter_measurements+0x218>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <calc_filter_measurements+0x21c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <calc_filter_measurements+0x21c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000290 	.word	0x20000290
 800182c:	200002b8 	.word	0x200002b8
 8001830:	200002e0 	.word	0x200002e0
 8001834:	20000308 	.word	0x20000308
 8001838:	20000330 	.word	0x20000330
 800183c:	20000358 	.word	0x20000358
 8001840:	2000035c 	.word	0x2000035c
 8001844:	20000360 	.word	0x20000360
 8001848:	20000364 	.word	0x20000364
 800184c:	20000368 	.word	0x20000368
 8001850:	20007f0c 	.word	0x20007f0c
 8001854:	20007f10 	.word	0x20007f10
 8001858:	20007f14 	.word	0x20007f14
 800185c:	20007f18 	.word	0x20007f18
 8001860:	20007f1c 	.word	0x20007f1c

08001864 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	ed2d 8b02 	vpush	{d8}
 800186c:	b0a8      	sub	sp, #160	; 0xa0
 800186e:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 80018a6:	4bae      	ldr	r3, [pc, #696]	; (8001b60 <calc_measurements+0x2fc>)
 80018a8:	885b      	ldrh	r3, [r3, #2]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4bac      	ldr	r3, [pc, #688]	; (8001b60 <calc_measurements+0x2fc>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	1ad2      	subs	r2, r2, r3
 80018b2:	0fd3      	lsrs	r3, r2, #31
 80018b4:	4413      	add	r3, r2
 80018b6:	105b      	asrs	r3, r3, #1
 80018b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 80018bc:	4ba8      	ldr	r3, [pc, #672]	; (8001b60 <calc_measurements+0x2fc>)
 80018be:	8adb      	ldrh	r3, [r3, #22]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4ba7      	ldr	r3, [pc, #668]	; (8001b60 <calc_measurements+0x2fc>)
 80018c4:	8a9b      	ldrh	r3, [r3, #20]
 80018c6:	1ad2      	subs	r2, r2, r3
 80018c8:	0fd3      	lsrs	r3, r2, #31
 80018ca:	4413      	add	r3, r2
 80018cc:	105b      	asrs	r3, r3, #1
 80018ce:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	float w=0, va=0;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	673b      	str	r3, [r7, #112]	; 0x70
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	66fb      	str	r3, [r7, #108]	; 0x6c

	// Calculate values using the positive half of the sine wave

	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) { 	// do we have zero crossing?
 80018de:	4ba0      	ldr	r3, [pc, #640]	; (8001b60 <calc_measurements+0x2fc>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da05      	bge.n	80018f2 <calc_measurements+0x8e>
		meter_readings_invalid = 1;
 80018e6:	4b9f      	ldr	r3, [pc, #636]	; (8001b64 <calc_measurements+0x300>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - invalid measurements\r\n", __FUNCTION__);
		return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f0:	e28a      	b.n	8001e08 <calc_measurements+0x5a4>
	} else {
		meter_readings_invalid = 0;
 80018f2:	4a9c      	ldr	r2, [pc, #624]	; (8001b64 <calc_measurements+0x300>)
 80018f4:	2300      	movs	r3, #0
 80018f6:	7013      	strb	r3, [r2, #0]
	}

	//term_print("%s()\r\n", __FUNCTION__);

	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 80018f8:	4b99      	ldr	r3, [pc, #612]	; (8001b60 <calc_measurements+0x2fc>)
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	4b98      	ldr	r3, [pc, #608]	; (8001b60 <calc_measurements+0x2fc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	f280 8091 	bge.w	8001a28 <calc_measurements+0x1c4>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001906:	4b96      	ldr	r3, [pc, #600]	; (8001b60 <calc_measurements+0x2fc>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800190e:	e083      	b.n	8001a18 <calc_measurements+0x1b4>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001910:	4a95      	ldr	r2, [pc, #596]	; (8001b68 <calc_measurements+0x304>)
 8001912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001916:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800191a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001926:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800192a:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	17da      	asrs	r2, r3, #31
 8001934:	461c      	mov	r4, r3
 8001936:	4615      	mov	r5, r2
 8001938:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800193c:	eb12 0a04 	adds.w	sl, r2, r4
 8001940:	eb43 0b05 	adc.w	fp, r3, r5
 8001944:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001948:	4a87      	ldr	r2, [pc, #540]	; (8001b68 <calc_measurements+0x304>)
 800194a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800194e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001952:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001956:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001962:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001966:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	17da      	asrs	r2, r3, #31
 8001970:	4698      	mov	r8, r3
 8001972:	4691      	mov	r9, r2
 8001974:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001978:	eb12 0108 	adds.w	r1, r2, r8
 800197c:	6239      	str	r1, [r7, #32]
 800197e:	eb43 0309 	adc.w	r3, r3, r9
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001988:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 800198c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001990:	3301      	adds	r3, #1
 8001992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001996:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fbc8 	bl	8002130 <calc_adc_raw_to_V>
 80019a0:	eeb0 8a40 	vmov.f32	s16, s0
 80019a4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 fbdf 	bl	800216c <calc_adc_raw_to_A>
 80019ae:	eef0 7a40 	vmov.f32	s15, s0
 80019b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019b6:	ee17 0a90 	vmov	r0, s15
 80019ba:	f7fe fde5 	bl	8000588 <__aeabi_f2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80019c6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0a      	blt.n	80019e4 <calc_measurements+0x180>
				i1_va_acc += va_instant;
 80019ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80019d6:	f7fe fc79 	bl	80002cc <__adddf3>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80019e2:	e014      	b.n	8001a0e <calc_measurements+0x1aa>
			} else {
				i1_w_acc += abs(va_instant);
 80019e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019e8:	f7ff f8d6 	bl	8000b98 <__aeabi_d2iz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bfb8      	it	lt
 80019f2:	425b      	neglt	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdb5 	bl	8000564 <__aeabi_i2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a02:	f7fe fc63 	bl	80002cc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a12:	3301      	adds	r3, #1
 8001a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a18:	4b51      	ldr	r3, [pc, #324]	; (8001b60 <calc_measurements+0x2fc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f6ff af75 	blt.w	8001910 <calc_measurements+0xac>
 8001a26:	e134      	b.n	8001c92 <calc_measurements+0x42e>
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <calc_measurements+0x2fc>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a30:	e08b      	b.n	8001b4a <calc_measurements+0x2e6>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001a32:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <calc_measurements+0x304>)
 8001a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001a48:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a4c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	17da      	asrs	r2, r3, #31
 8001a56:	653b      	str	r3, [r7, #80]	; 0x50
 8001a58:	657a      	str	r2, [r7, #84]	; 0x54
 8001a5a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a5e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a62:	4621      	mov	r1, r4
 8001a64:	1851      	adds	r1, r2, r1
 8001a66:	61b9      	str	r1, [r7, #24]
 8001a68:	4629      	mov	r1, r5
 8001a6a:	414b      	adcs	r3, r1
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a72:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001a76:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <calc_measurements+0x304>)
 8001a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a7c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001a80:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a84:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001a90:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001a94:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aa2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001aa6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1851      	adds	r1, r2, r1
 8001aae:	6139      	str	r1, [r7, #16]
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	414b      	adcs	r3, r1
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001aba:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001abe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001ac8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fb2f 	bl	8002130 <calc_adc_raw_to_V>
 8001ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8001ad6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fb46 	bl	800216c <calc_adc_raw_to_A>
 8001ae0:	eef0 7a40 	vmov.f32	s15, s0
 8001ae4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ae8:	ee17 0a90 	vmov	r0, s15
 8001aec:	f7fe fd4c 	bl	8000588 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001af8:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <calc_measurements+0x2b2>
				i1_va_acc += va_instant;
 8001b00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b04:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b08:	f7fe fbe0 	bl	80002cc <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b14:	e014      	b.n	8001b40 <calc_measurements+0x2dc>
			} else {
				i1_w_acc += abs(va_instant);
 8001b16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b1a:	f7ff f83d 	bl	8000b98 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bfb8      	it	lt
 8001b24:	425b      	neglt	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd1c 	bl	8000564 <__aeabi_i2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b34:	f7fe fbca 	bl	80002cc <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b44:	3301      	adds	r3, #1
 8001b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b52:	f4ff af6e 	bcc.w	8001a32 <calc_measurements+0x1ce>
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b56:	2314      	movs	r3, #20
 8001b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b5c:	e092      	b.n	8001c84 <calc_measurements+0x420>
 8001b5e:	bf00      	nop
 8001b60:	2000023c 	.word	0x2000023c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	200071ec 	.word	0x200071ec
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b6c:	4aaa      	ldr	r2, [pc, #680]	; (8001e18 <calc_measurements+0x5b4>)
 8001b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b72:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b76:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001b82:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001b86:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	17da      	asrs	r2, r3, #31
 8001b90:	643b      	str	r3, [r7, #64]	; 0x40
 8001b92:	647a      	str	r2, [r7, #68]	; 0x44
 8001b94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b98:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	1851      	adds	r1, r2, r1
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	414b      	adcs	r3, r1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bac:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bb0:	4a99      	ldr	r2, [pc, #612]	; (8001e18 <calc_measurements+0x5b4>)
 8001bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001bba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bbe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001bca:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001bce:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bda:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001be0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001be4:	4621      	mov	r1, r4
 8001be6:	1851      	adds	r1, r2, r1
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	4629      	mov	r1, r5
 8001bec:	414b      	adcs	r3, r1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bf4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001bf8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c02:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fa92 	bl	8002130 <calc_adc_raw_to_V>
 8001c0c:	eeb0 8a40 	vmov.f32	s16, s0
 8001c10:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 faa9 	bl	800216c <calc_adc_raw_to_A>
 8001c1a:	eef0 7a40 	vmov.f32	s15, s0
 8001c1e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001c32:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0a      	blt.n	8001c50 <calc_measurements+0x3ec>
				i1_va_acc += va_instant;
 8001c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c42:	f7fe fb43 	bl	80002cc <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c4e:	e014      	b.n	8001c7a <calc_measurements+0x416>
			} else {
				i1_w_acc += abs(va_instant);
 8001c50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c54:	f7fe ffa0 	bl	8000b98 <__aeabi_d2iz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bfb8      	it	lt
 8001c5e:	425b      	neglt	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc7f 	bl	8000564 <__aeabi_i2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c6e:	f7fe fb2d 	bl	80002cc <__adddf3>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c84:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <calc_measurements+0x5b8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	f6ff af6d 	blt.w	8001b6c <calc_measurements+0x308>
			}
		}
	}

	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001c92:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c96:	2200      	movs	r2, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
 8001c9a:	637a      	str	r2, [r7, #52]	; 0x34
 8001c9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ca0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ca4:	f7fe fff0 	bl	8000c88 <__aeabi_ldivmod>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe fc94 	bl	80005dc <__aeabi_l2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	ec43 2b10 	vmov	d0, r2, r3
 8001cbc:	f00d f990 	bl	800efe0 <sqrt>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff66 	bl	8000b98 <__aeabi_d2iz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fa2d 	bl	8002130 <calc_adc_raw_to_V>
 8001cd6:	eef0 7a40 	vmov.f32	s15, s0
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <calc_measurements+0x5bc>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
	i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001ce0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001cf2:	f7fe ffc9 	bl	8000c88 <__aeabi_ldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fc6d 	bl	80005dc <__aeabi_l2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ec43 2b10 	vmov	d0, r2, r3
 8001d0a:	f00d f969 	bl	800efe0 <sqrt>
 8001d0e:	ec53 2b10 	vmov	r2, r3, d0
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff3f 	bl	8000b98 <__aeabi_d2iz>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fa24 	bl	800216c <calc_adc_raw_to_A>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <calc_measurements+0x5c0>)
 8001d2a:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d3a:	f7fe ff0d 	bl	8000b58 <__aeabi_dcmpgt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <calc_measurements+0x506>
 8001d44:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc0b 	bl	8000564 <__aeabi_i2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d56:	f7fe fd99 	bl	800088c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe ff41 	bl	8000be8 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d76:	f7fe feef 	bl	8000b58 <__aeabi_dcmpgt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d012      	beq.n	8001da6 <calc_measurements+0x542>
 8001d80:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbed 	bl	8000564 <__aeabi_i2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d92:	f7fe fd7b 	bl	800088c <__aeabi_ddiv>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe ff23 	bl	8000be8 <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	673b      	str	r3, [r7, #112]	; 0x70
	va1_measured = v_measured * i1_measured;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <calc_measurements+0x5bc>)
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <calc_measurements+0x5c0>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <calc_measurements+0x5c4>)
 8001db8:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001dbc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	dd09      	ble.n	8001dde <calc_measurements+0x57a>
		w1_measured = va - w;
 8001dca:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001dce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <calc_measurements+0x5c8>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
 8001ddc:	e003      	b.n	8001de6 <calc_measurements+0x582>
	} else {
		w1_measured = va1_measured;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <calc_measurements+0x5c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <calc_measurements+0x5c8>)
 8001de4:	6013      	str	r3, [r2, #0]
	}
	pf1_measured = w1_measured / va1_measured;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <calc_measurements+0x5c8>)
 8001de8:	edd3 6a00 	vldr	s13, [r3]
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <calc_measurements+0x5c4>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <calc_measurements+0x5cc>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <calc_measurements+0x5b8>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	731a      	strb	r2, [r3, #12]

	calc_filter_measurements();
 8001e02:	f7ff fc1f 	bl	8001644 <calc_filter_measurements>

	return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	37a0      	adds	r7, #160	; 0xa0
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	ecbd 8b02 	vpop	{d8}
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	200071ec 	.word	0x200071ec
 8001e1c:	2000023c 	.word	0x2000023c
 8001e20:	20000358 	.word	0x20000358
 8001e24:	2000035c 	.word	0x2000035c
 8001e28:	20000360 	.word	0x20000360
 8001e2c:	20000364 	.word	0x20000364
 8001e30:	20000368 	.word	0x20000368

08001e34 <calc_channel>:
 * The RMS value is calculated from readings between the positive and negative zero crossing
 * that is, the positive half of the sine wave.
 * The RMS value is calculate by adding the square of each reading to an accumulator and then
 * diving the accumulator by the number of readings.
 */
int calc_channel(uint8_t bufnum) {
 8001e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e38:	b090      	sub	sp, #64	; 0x40
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int i;
	uint64_t squared_acc = 0;		// accumulating the squared values
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint16_t num_readings = 0;		// number of squared readings
 8001e4e:	2300      	movs	r3, #0
 8001e50:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t reading = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
 8001e56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e5a:	4994      	ldr	r1, [pc, #592]	; (80020ac <calc_channel+0x278>)
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	3302      	adds	r3, #2
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e70:	498e      	ldr	r1, [pc, #568]	; (80020ac <calc_channel+0x278>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	1ac2      	subs	r2, r0, r3
 8001e80:	0fd3      	lsrs	r3, r2, #31
 8001e82:	4413      	add	r3, r2
 8001e84:	105b      	asrs	r3, r3, #1
 8001e86:	857b      	strh	r3, [r7, #42]	; 0x2a

	if (bufnum >= ADC_NUM_BUFFERS) { return -1; }		// check valid buffer number
 8001e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d902      	bls.n	8001e96 <calc_channel+0x62>
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e94:	e104      	b.n	80020a0 <calc_channel+0x26c>

	// Calculate the RMS value using the positive half of the sinewave

	if (sample_buf_meta[bufnum].zero_cross_pos < 0) { return -1; }	// do we have zero crossing?
 8001e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e9a:	4984      	ldr	r1, [pc, #528]	; (80020ac <calc_channel+0x278>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da02      	bge.n	8001eb4 <calc_channel+0x80>
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb2:	e0f5      	b.n	80020a0 <calc_channel+0x26c>
	if (sample_buf_meta[bufnum].zero_cross_pos < sample_buf_meta[bufnum].zero_cross_neg) {
 8001eb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001eb8:	497c      	ldr	r1, [pc, #496]	; (80020ac <calc_channel+0x278>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ecc:	4977      	ldr	r1, [pc, #476]	; (80020ac <calc_channel+0x278>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3308      	adds	r3, #8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4298      	cmp	r0, r3
 8001ede:	da40      	bge.n	8001f62 <calc_channel+0x12e>
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001ee0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ee4:	4971      	ldr	r1, [pc, #452]	; (80020ac <calc_channel+0x278>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef6:	e026      	b.n	8001f46 <calc_channel+0x112>
			reading = sample_buf[bufnum][i] - zero_value;
 8001ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001efc:	496c      	ldr	r1, [pc, #432]	; (80020b0 <calc_channel+0x27c>)
 8001efe:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f02:	fb03 f202 	mul.w	r2, r3, r2
 8001f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f08:	4413      	add	r3, r2
 8001f0a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001f14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f16:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	17da      	asrs	r2, r3, #31
 8001f1e:	469a      	mov	sl, r3
 8001f20:	4693      	mov	fp, r2
 8001f22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f26:	eb12 010a 	adds.w	r1, r2, sl
 8001f2a:	6139      	str	r1, [r7, #16]
 8001f2c:	eb43 030b 	adc.w	r3, r3, fp
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f36:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			num_readings++;
 8001f3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f42:	3301      	adds	r3, #1
 8001f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f4a:	4958      	ldr	r1, [pc, #352]	; (80020ac <calc_channel+0x278>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	3308      	adds	r3, #8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbcb      	blt.n	8001ef8 <calc_channel+0xc4>
 8001f60:	e06b      	b.n	800203a <calc_channel+0x206>
		}
	} else {
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001f62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f66:	4951      	ldr	r1, [pc, #324]	; (80020ac <calc_channel+0x278>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f78:	e026      	b.n	8001fc8 <calc_channel+0x194>
			reading = sample_buf[bufnum][i] - zero_value;
 8001f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f7e:	494c      	ldr	r1, [pc, #304]	; (80020b0 <calc_channel+0x27c>)
 8001f80:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001f84:	fb03 f202 	mul.w	r2, r3, r2
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f98:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	17da      	asrs	r2, r3, #31
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	4691      	mov	r9, r2
 8001fa4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fa8:	eb12 0108 	adds.w	r1, r2, r8
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	eb43 0309 	adc.w	r3, r3, r9
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 8001fbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=sample_buf_meta[bufnum].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fca:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001fce:	d3d4      	bcc.n	8001f7a <calc_channel+0x146>
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 8001fd0:	2314      	movs	r3, #20
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	e024      	b.n	8002020 <calc_channel+0x1ec>
			reading = sample_buf[bufnum][i] - zero_value;
 8001fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fda:	4935      	ldr	r1, [pc, #212]	; (80020b0 <calc_channel+0x27c>)
 8001fdc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001fe0:	fb03 f202 	mul.w	r2, r3, r2
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	85bb      	strh	r3, [r7, #44]	; 0x2c
			squared_acc += reading * reading;
 8001ff2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ff4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	17da      	asrs	r2, r3, #31
 8001ffc:	461c      	mov	r4, r3
 8001ffe:	4615      	mov	r5, r2
 8002000:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002004:	1911      	adds	r1, r2, r4
 8002006:	6039      	str	r1, [r7, #0]
 8002008:	416b      	adcs	r3, r5
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002010:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			num_readings++;
 8002014:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002016:	3301      	adds	r3, #1
 8002018:	85fb      	strh	r3, [r7, #46]	; 0x2e
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[bufnum].zero_cross_neg; i++ ) {
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	3301      	adds	r3, #1
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002020:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002024:	4921      	ldr	r1, [pc, #132]	; (80020ac <calc_channel+0x278>)
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3308      	adds	r3, #8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002036:	429a      	cmp	r2, r3
 8002038:	dbcd      	blt.n	8001fd6 <calc_channel+0x1a2>
		}
	}
	sample_buf_meta[bufnum].rms_value = sqrt((squared_acc / num_readings));
 800203a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800203c:	2200      	movs	r2, #0
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	61fa      	str	r2, [r7, #28]
 8002042:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002046:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800204a:	f7fe fe6d 	bl	8000d28 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fab9 	bl	80005cc <__aeabi_ul2d>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	ec43 2b10 	vmov	d0, r2, r3
 8002062:	f00c ffbd 	bl	800efe0 <sqrt>
 8002066:	ec53 2b10 	vmov	r2, r3, d0
 800206a:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fd91 	bl	8000b98 <__aeabi_d2iz>
 8002076:	4602      	mov	r2, r0
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <calc_channel+0x278>)
 800207a:	4623      	mov	r3, r4
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4423      	add	r3, r4
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3310      	adds	r3, #16
 8002086:	601a      	str	r2, [r3, #0]
	sample_buf_meta[bufnum].measurements_valid = 1;
 8002088:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <calc_channel+0x278>)
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	330c      	adds	r3, #12
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
	return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3740      	adds	r7, #64	; 0x40
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	2000023c 	.word	0x2000023c
 80020b0:	200071ec 	.word	0x200071ec

080020b4 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 80020be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f816 	bl	80020f4 <calc_adc_raw_to_mv_float>
 80020c8:	ee10 3a10 	vmov	r3, s0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa5b 	bl	8000588 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ec43 2b10 	vmov	d0, r2, r3
 80020da:	f00d f891 	bl	800f200 <round>
 80020de:	ec53 2b10 	vmov	r2, r3, d0
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd57 	bl	8000b98 <__aeabi_d2iz>
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 80020fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002128 <calc_adc_raw_to_mv_float+0x34>
 800210e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002112:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800212c <calc_adc_raw_to_mv_float+0x38>
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	457ff000 	.word	0x457ff000
 800212c:	454e4000 	.word	0x454e4000

08002130 <calc_adc_raw_to_V>:

float calc_adc_raw_to_V(int16_t adc_raw) {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 800213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002146:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002164 <calc_adc_raw_to_V+0x34>
 800214a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800214e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002168 <calc_adc_raw_to_V+0x38>
 8002152:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	457ff000 	.word	0x457ff000
 8002168:	44480000 	.word	0x44480000

0800216c <calc_adc_raw_to_A>:

float calc_adc_raw_to_A(int16_t adc_raw) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002182:	eddf 6a07 	vldr	s13, [pc, #28]	; 80021a0 <calc_adc_raw_to_A+0x34>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021a4 <calc_adc_raw_to_A+0x38>
 800218e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	457ff000 	.word	0x457ff000
 80021a4:	43480000 	.word	0x43480000

080021a8 <cmd_error>:
extern uint8_t tft_display;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <cmd_error+0x18>)
 80021b4:	f002 fad6 	bl	8004764 <term_print>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	0800f330 	.word	0x0800f330

080021c4 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b74      	cmp	r3, #116	; 0x74
 80021d4:	d014      	beq.n	8002200 <cmd_t+0x3c>
 80021d6:	2b74      	cmp	r3, #116	; 0x74
 80021d8:	dc17      	bgt.n	800220a <cmd_t+0x46>
 80021da:	2b54      	cmp	r3, #84	; 0x54
 80021dc:	d010      	beq.n	8002200 <cmd_t+0x3c>
 80021de:	2b54      	cmp	r3, #84	; 0x54
 80021e0:	dc13      	bgt.n	800220a <cmd_t+0x46>
 80021e2:	2b30      	cmp	r3, #48	; 0x30
 80021e4:	d002      	beq.n	80021ec <cmd_t+0x28>
 80021e6:	2b31      	cmp	r3, #49	; 0x31
 80021e8:	d005      	beq.n	80021f6 <cmd_t+0x32>
 80021ea:	e00e      	b.n	800220a <cmd_t+0x46>
	case '0':
		tft_display = 1;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <cmd_t+0x58>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
		return 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e00b      	b.n	800220e <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <cmd_t+0x58>)
 80021f8:	2202      	movs	r2, #2
 80021fa:	701a      	strb	r2, [r3, #0]
		return 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e006      	b.n	800220e <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <cmd_t+0x58>)
 8002202:	2209      	movs	r2, #9
 8002204:	701a      	strb	r2, [r3, #0]
		return 0;
 8002206:	2300      	movs	r3, #0
 8002208:	e001      	b.n	800220e <cmd_t+0x4a>
	}
	return -1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20002316 	.word	0x20002316

08002220 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	f107 0208 	add.w	r2, r7, #8
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <cmd_p+0x38>)
 8002232:	4618      	mov	r0, r3
 8002234:	f009 fd38 	bl	800bca8 <siscanf>
 8002238:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <cmd_p+0x26>
 8002240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002244:	e004      	b.n	8002250 <cmd_p+0x30>
	new_time_period = value;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <cmd_p+0x3c>)
 800224c:	801a      	strh	r2, [r3, #0]
	return 0;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800f348 	.word	0x0800f348
 800225c:	20002318 	.word	0x20002318

08002260 <cmd_led>:

int cmd_led(int cmd) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b01      	cmp	r3, #1
 800226c:	dd05      	ble.n	800227a <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	2120      	movs	r1, #32
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <cmd_led+0x30>)
 8002274:	f005 fff0 	bl	8008258 <HAL_GPIO_WritePin>
 8002278:	e004      	b.n	8002284 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	2120      	movs	r1, #32
 800227e:	4804      	ldr	r0, [pc, #16]	; (8002290 <cmd_led+0x30>)
 8002280:	f005 ffea 	bl	8008258 <HAL_GPIO_WritePin>
	}
	return(0);
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40020000 	.word	0x40020000

08002294 <cmd_help>:


int cmd_help(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002298:	4811      	ldr	r0, [pc, #68]	; (80022e0 <cmd_help+0x4c>)
 800229a:	f002 fa63 	bl	8004764 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 800229e:	4811      	ldr	r0, [pc, #68]	; (80022e4 <cmd_help+0x50>)
 80022a0:	f002 fa60 	bl	8004764 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 80022a4:	4810      	ldr	r0, [pc, #64]	; (80022e8 <cmd_help+0x54>)
 80022a6:	f002 fa5d 	bl	8004764 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 80022aa:	4810      	ldr	r0, [pc, #64]	; (80022ec <cmd_help+0x58>)
 80022ac:	f002 fa5a 	bl	8004764 <term_print>
#endif
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 80022b0:	480f      	ldr	r0, [pc, #60]	; (80022f0 <cmd_help+0x5c>)
 80022b2:	f002 fa57 	bl	8004764 <term_print>
	term_print("M show measurements using all channels");
 80022b6:	480f      	ldr	r0, [pc, #60]	; (80022f4 <cmd_help+0x60>)
 80022b8:	f002 fa54 	bl	8004764 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 80022bc:	480e      	ldr	r0, [pc, #56]	; (80022f8 <cmd_help+0x64>)
 80022be:	f002 fa51 	bl	8004764 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 80022c2:	480e      	ldr	r0, [pc, #56]	; (80022fc <cmd_help+0x68>)
 80022c4:	f002 fa4e 	bl	8004764 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <cmd_help+0x6c>)
 80022ca:	f002 fa4b 	bl	8004764 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 80022ce:	480d      	ldr	r0, [pc, #52]	; (8002304 <cmd_help+0x70>)
 80022d0:	f002 fa48 	bl	8004764 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <cmd_help+0x74>)
 80022d6:	f002 fa45 	bl	8004764 <term_print>
	return 0;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800f34c 	.word	0x0800f34c
 80022e4:	0800f360 	.word	0x0800f360
 80022e8:	0800f398 	.word	0x0800f398
 80022ec:	0800f3cc 	.word	0x0800f3cc
 80022f0:	0800f3f8 	.word	0x0800f3f8
 80022f4:	0800f414 	.word	0x0800f414
 80022f8:	0800f43c 	.word	0x0800f43c
 80022fc:	0800f484 	.word	0x0800f484
 8002300:	0800f4b8 	.word	0x0800f4b8
 8002304:	0800f4d4 	.word	0x0800f4d4
 8002308:	0800f514 	.word	0x0800f514

0800230c <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	int retval = -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002318:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	3b3f      	subs	r3, #63	; 0x3f
 8002320:	2b35      	cmp	r3, #53	; 0x35
 8002322:	f200 80c9 	bhi.w	80024b8 <cmd_process+0x1ac>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <cmd_process+0x20>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080024b3 	.word	0x080024b3
 8002330:	080024b9 	.word	0x080024b9
 8002334:	080024b9 	.word	0x080024b9
 8002338:	080024b9 	.word	0x080024b9
 800233c:	08002405 	.word	0x08002405
 8002340:	0800241b 	.word	0x0800241b
 8002344:	080024b9 	.word	0x080024b9
 8002348:	080024b9 	.word	0x080024b9
 800234c:	080024b9 	.word	0x080024b9
 8002350:	080024b3 	.word	0x080024b3
 8002354:	080024b9 	.word	0x080024b9
 8002358:	080024b9 	.word	0x080024b9
 800235c:	080024b9 	.word	0x080024b9
 8002360:	08002443 	.word	0x08002443
 8002364:	08002455 	.word	0x08002455
 8002368:	080024b9 	.word	0x080024b9
 800236c:	080024b9 	.word	0x080024b9
 8002370:	0800247d 	.word	0x0800247d
 8002374:	080024b9 	.word	0x080024b9
 8002378:	08002487 	.word	0x08002487
 800237c:	08002493 	.word	0x08002493
 8002380:	080024a9 	.word	0x080024a9
 8002384:	080024b9 	.word	0x080024b9
 8002388:	080024b9 	.word	0x080024b9
 800238c:	080024b9 	.word	0x080024b9
 8002390:	080024b9 	.word	0x080024b9
 8002394:	080024b9 	.word	0x080024b9
 8002398:	080024b9 	.word	0x080024b9
 800239c:	080024b9 	.word	0x080024b9
 80023a0:	080024b9 	.word	0x080024b9
 80023a4:	080024b9 	.word	0x080024b9
 80023a8:	080024b9 	.word	0x080024b9
 80023ac:	080024b9 	.word	0x080024b9
 80023b0:	080024b9 	.word	0x080024b9
 80023b4:	080024b9 	.word	0x080024b9
 80023b8:	080024b9 	.word	0x080024b9
 80023bc:	08002405 	.word	0x08002405
 80023c0:	0800241b 	.word	0x0800241b
 80023c4:	080024b9 	.word	0x080024b9
 80023c8:	080024b9 	.word	0x080024b9
 80023cc:	080024b9 	.word	0x080024b9
 80023d0:	080024b3 	.word	0x080024b3
 80023d4:	080024b9 	.word	0x080024b9
 80023d8:	080024b9 	.word	0x080024b9
 80023dc:	080024b9 	.word	0x080024b9
 80023e0:	08002443 	.word	0x08002443
 80023e4:	08002455 	.word	0x08002455
 80023e8:	080024b9 	.word	0x080024b9
 80023ec:	080024b9 	.word	0x080024b9
 80023f0:	0800247d 	.word	0x0800247d
 80023f4:	080024b9 	.word	0x080024b9
 80023f8:	08002487 	.word	0x08002487
 80023fc:	08002493 	.word	0x08002493
 8002400:	080024a9 	.word	0x080024a9
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3301      	adds	r3, #1
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3b31      	subs	r3, #49	; 0x31
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fb3a 	bl	8004a88 <term_csv_buffer>
		retval = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
		break;
 8002418:	e04e      	b.n	80024b8 <cmd_process+0x1ac>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fd ff48 	bl	80002b0 <strlen>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d908      	bls.n	8002438 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3301      	adds	r3, #1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	3b31      	subs	r3, #49	; 0x31
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f000 ff6f 	bl	8003314 <display_show_curve>
 8002436:	e001      	b.n	800243c <cmd_process+0x130>
		} else {
			display_show_curves();
 8002438:	f000 ff46 	bl	80032c8 <display_show_curves>
		}
		retval = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
		break;
 8002440:	e03a      	b.n	80024b8 <cmd_process+0x1ac>
#endif
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3301      	adds	r3, #1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3b2f      	subs	r3, #47	; 0x2f
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff08 	bl	8002260 <cmd_led>
 8002450:	60f8      	str	r0, [r7, #12]
		break;
 8002452:	e031      	b.n	80024b8 <cmd_process+0x1ac>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7fd ff2b 	bl	80002b0 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d908      	bls.n	8002472 <cmd_process+0x166>
		    term_show_channel(cmd_str[1] - 0x31);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3301      	adds	r3, #1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3b31      	subs	r3, #49	; 0x31
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fa68 	bl	8004940 <term_show_channel>
 8002470:	e001      	b.n	8002476 <cmd_process+0x16a>
		} else {
			term_show_measurements();
 8002472:	f002 f9f1 	bl	8004858 <term_show_measurements>
		}
		retval = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
		break;
 800247a:	e01d      	b.n	80024b8 <cmd_process+0x1ac>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fecf 	bl	8002220 <cmd_p>
 8002482:	60f8      	str	r0, [r7, #12]
		break;
 8002484:	e018      	b.n	80024b8 <cmd_process+0x1ac>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <cmd_process+0x1b8>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
		retval = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
		break;
 8002490:	e012      	b.n	80024b8 <cmd_process+0x1ac>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3b31      	subs	r3, #49	; 0x31
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	f002 f985 	bl	80047ac <term_show_buffer>
		retval = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
		break;
 80024a6:	e007      	b.n	80024b8 <cmd_process+0x1ac>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fe8b 	bl	80021c4 <cmd_t>
 80024ae:	60f8      	str	r0, [r7, #12]
		break;
 80024b0:	e002      	b.n	80024b8 <cmd_process+0x1ac>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 80024b2:	f7ff feef 	bl	8002294 <cmd_help>
 80024b6:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 80024b8:	68fb      	ldr	r3, [r7, #12]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20002315 	.word	0x20002315

080024c8 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fd feed 	bl	80002b0 <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <CMD_Handler+0x3c>)
 80024dc:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <CMD_Handler+0x3c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fe5e 	bl	80021a8 <cmd_error>
		return -1;
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f0:	e003      	b.n	80024fa <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff0a 	bl	800230c <cmd_process>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000036c 	.word	0x2000036c

08002508 <display_init>:
uint8_t lastbuf = 9;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 800250c:	2302      	movs	r3, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fc20 	bl	8004d54 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 8002514:	2302      	movs	r3, #2
 8002516:	2b01      	cmp	r3, #1
 8002518:	d002      	beq.n	8002520 <display_init+0x18>
 800251a:	2302      	movs	r3, #2
 800251c:	2b03      	cmp	r3, #3
 800251e:	d107      	bne.n	8002530 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <display_init+0x3c>)
 8002522:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002526:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <display_init+0x40>)
 800252a:	22f0      	movs	r2, #240	; 0xf0
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <display_init+0x40>)
 8002532:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002536:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <display_init+0x3c>)
 800253a:	22f0      	movs	r2, #240	; 0xf0
 800253c:	801a      	strh	r2, [r3, #0]
	}
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20001fe0 	.word	0x20001fe0
 8002548:	20001fe2 	.word	0x20001fe2

0800254c <display_splash_screen>:

void display_splash_screen() {
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002552:	2000      	movs	r0, #0
 8002554:	f002 fe54 	bl	8005200 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002558:	2302      	movs	r3, #2
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2300      	movs	r3, #0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <display_splash_screen+0xe4>)
 8002562:	4a34      	ldr	r2, [pc, #208]	; (8002634 <display_splash_screen+0xe8>)
 8002564:	2120      	movs	r1, #32
 8002566:	4834      	ldr	r0, [pc, #208]	; (8002638 <display_splash_screen+0xec>)
 8002568:	f009 fb4a 	bl	800bc00 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <display_splash_screen+0xf0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	461c      	mov	r4, r3
 8002572:	4831      	ldr	r0, [pc, #196]	; (8002638 <display_splash_screen+0xec>)
 8002574:	f7fd fe9c 	bl	80002b0 <strlen>
 8002578:	4603      	mov	r3, r0
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <display_splash_screen+0xf4>)
 800257c:	8892      	ldrh	r2, [r2, #4]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	1ae3      	subs	r3, r4, r3
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	b29c      	uxth	r4, r3
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <display_splash_screen+0xf8>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <display_splash_screen+0xf4>)
 8002590:	88db      	ldrh	r3, [r3, #6]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	0fda      	lsrs	r2, r3, #31
 8002596:	4413      	add	r3, r2
 8002598:	105b      	asrs	r3, r3, #1
 800259a:	b29d      	uxth	r5, r3
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <display_splash_screen+0xf4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	9204      	str	r2, [sp, #16]
 80025a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025a6:	9203      	str	r2, [sp, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	9202      	str	r2, [sp, #8]
 80025ac:	466e      	mov	r6, sp
 80025ae:	1d1a      	adds	r2, r3, #4
 80025b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025b4:	e886 0003 	stmia.w	r6, {r0, r1}
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <display_splash_screen+0xec>)
 80025bc:	4629      	mov	r1, r5
 80025be:	4620      	mov	r0, r4
 80025c0:	f003 fd90 	bl	80060e4 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <display_splash_screen+0xf0>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	461c      	mov	r4, r3
 80025ca:	481f      	ldr	r0, [pc, #124]	; (8002648 <display_splash_screen+0xfc>)
 80025cc:	f7fd fe70 	bl	80002b0 <strlen>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <display_splash_screen+0x100>)
 80025d4:	8892      	ldrh	r2, [r2, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	1ae3      	subs	r3, r4, r3
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	b29c      	uxth	r4, r3
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <display_splash_screen+0xf8>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <display_splash_screen+0xf4>)
 80025e8:	88db      	ldrh	r3, [r3, #6]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	0fda      	lsrs	r2, r3, #31
 80025ee:	4413      	add	r3, r2
 80025f0:	105b      	asrs	r3, r3, #1
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3319      	adds	r3, #25
 80025f6:	b29d      	uxth	r5, r3
 80025f8:	4b14      	ldr	r3, [pc, #80]	; (800264c <display_splash_screen+0x100>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	9204      	str	r2, [sp, #16]
 80025fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002602:	9203      	str	r2, [sp, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	9202      	str	r2, [sp, #8]
 8002608:	466e      	mov	r6, sp
 800260a:	1d1a      	adds	r2, r3, #4
 800260c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002610:	e886 0003 	stmia.w	r6, {r0, r1}
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <display_splash_screen+0xfc>)
 8002618:	4629      	mov	r1, r5
 800261a:	4620      	mov	r0, r4
 800261c:	f003 fd62 	bl	80060e4 <Displ_WString>

	Displ_BackLight('1');
 8002620:	2031      	movs	r0, #49	; 0x31
 8002622:	f003 fd9f 	bl	8006164 <Displ_BackLight>
}
 8002626:	bf00      	nop
 8002628:	3704      	adds	r7, #4
 800262a:	46bd      	mov	sp, r7
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	bf00      	nop
 8002630:	080139e8 	.word	0x080139e8
 8002634:	0800f548 	.word	0x0800f548
 8002638:	20001fc0 	.word	0x20001fc0
 800263c:	20001fe0 	.word	0x20001fe0
 8002640:	20000018 	.word	0x20000018
 8002644:	20001fe2 	.word	0x20001fe2
 8002648:	080139ec 	.word	0x080139ec
 800264c:	2000000c 	.word	0x2000000c

08002650 <display_update_meter>:
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}



void display_update_meter() {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b087      	sub	sp, #28
 8002654:	af06      	add	r7, sp, #24

	if (!meter_readings_invalid) {
 8002656:	4b84      	ldr	r3, [pc, #528]	; (8002868 <display_update_meter+0x218>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 811e 	bne.w	800289c <display_update_meter+0x24c>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002660:	4b82      	ldr	r3, [pc, #520]	; (800286c <display_update_meter+0x21c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff8f 	bl	8000588 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	e9cd 2300 	strd	r2, r3, [sp]
 8002672:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <display_update_meter+0x220>)
 8002674:	2120      	movs	r1, #32
 8002676:	487f      	ldr	r0, [pc, #508]	; (8002874 <display_update_meter+0x224>)
 8002678:	f009 fac2 	bl	800bc00 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800267c:	4b7e      	ldr	r3, [pc, #504]	; (8002878 <display_update_meter+0x228>)
 800267e:	2200      	movs	r2, #0
 8002680:	9204      	str	r2, [sp, #16]
 8002682:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002686:	9203      	str	r2, [sp, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	9202      	str	r2, [sp, #8]
 800268c:	466c      	mov	r4, sp
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002694:	e884 0003 	stmia.w	r4, {r0, r1}
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a76      	ldr	r2, [pc, #472]	; (8002874 <display_update_meter+0x224>)
 800269c:	2107      	movs	r1, #7
 800269e:	2009      	movs	r0, #9
 80026a0:	f003 fd20 	bl	80060e4 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <display_update_meter+0x22c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff6d 	bl	8000588 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	e9cd 2300 	strd	r2, r3, [sp]
 80026b6:	4a72      	ldr	r2, [pc, #456]	; (8002880 <display_update_meter+0x230>)
 80026b8:	2120      	movs	r1, #32
 80026ba:	486e      	ldr	r0, [pc, #440]	; (8002874 <display_update_meter+0x224>)
 80026bc:	f009 faa0 	bl	800bc00 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <display_update_meter+0x228>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	9204      	str	r2, [sp, #16]
 80026c6:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80026ca:	9203      	str	r2, [sp, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	9202      	str	r2, [sp, #8]
 80026d0:	466c      	mov	r4, sp
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a65      	ldr	r2, [pc, #404]	; (8002874 <display_update_meter+0x224>)
 80026e0:	2107      	movs	r1, #7
 80026e2:	2078      	movs	r0, #120	; 0x78
 80026e4:	f003 fcfe 	bl	80060e4 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 80026e8:	4b66      	ldr	r3, [pc, #408]	; (8002884 <display_update_meter+0x234>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff4b 	bl	8000588 <__aeabi_f2d>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	e9cd 2300 	strd	r2, r3, [sp]
 80026fa:	4a63      	ldr	r2, [pc, #396]	; (8002888 <display_update_meter+0x238>)
 80026fc:	2120      	movs	r1, #32
 80026fe:	485d      	ldr	r0, [pc, #372]	; (8002874 <display_update_meter+0x224>)
 8002700:	f009 fa7e 	bl	800bc00 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 8002704:	4b5c      	ldr	r3, [pc, #368]	; (8002878 <display_update_meter+0x228>)
 8002706:	2200      	movs	r2, #0
 8002708:	9204      	str	r2, [sp, #16]
 800270a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800270e:	9203      	str	r2, [sp, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	9202      	str	r2, [sp, #8]
 8002714:	466c      	mov	r4, sp
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800271c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a54      	ldr	r2, [pc, #336]	; (8002874 <display_update_meter+0x224>)
 8002724:	2130      	movs	r1, #48	; 0x30
 8002726:	2009      	movs	r0, #9
 8002728:	f003 fcdc 	bl	80060e4 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 800272c:	4b57      	ldr	r3, [pc, #348]	; (800288c <display_update_meter+0x23c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff29 	bl	8000588 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	e9cd 2300 	strd	r2, r3, [sp]
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <display_update_meter+0x238>)
 8002740:	2120      	movs	r1, #32
 8002742:	484c      	ldr	r0, [pc, #304]	; (8002874 <display_update_meter+0x224>)
 8002744:	f009 fa5c 	bl	800bc00 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 8002748:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <display_update_meter+0x228>)
 800274a:	2200      	movs	r2, #0
 800274c:	9204      	str	r2, [sp, #16]
 800274e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002752:	9203      	str	r2, [sp, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	9202      	str	r2, [sp, #8]
 8002758:	466c      	mov	r4, sp
 800275a:	1d1a      	adds	r2, r3, #4
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	e884 0003 	stmia.w	r4, {r0, r1}
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a43      	ldr	r2, [pc, #268]	; (8002874 <display_update_meter+0x224>)
 8002768:	2159      	movs	r1, #89	; 0x59
 800276a:	2009      	movs	r0, #9
 800276c:	f003 fcba 	bl	80060e4 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", metervalue_pf1 );
 8002770:	4b47      	ldr	r3, [pc, #284]	; (8002890 <display_update_meter+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd ff07 	bl	8000588 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	e9cd 2300 	strd	r2, r3, [sp]
 8002782:	4a44      	ldr	r2, [pc, #272]	; (8002894 <display_update_meter+0x244>)
 8002784:	2120      	movs	r1, #32
 8002786:	483b      	ldr	r0, [pc, #236]	; (8002874 <display_update_meter+0x224>)
 8002788:	f009 fa3a 	bl	800bc00 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 800278c:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <display_update_meter+0x228>)
 800278e:	2200      	movs	r2, #0
 8002790:	9204      	str	r2, [sp, #16]
 8002792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002796:	9203      	str	r2, [sp, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	9202      	str	r2, [sp, #8]
 800279c:	466c      	mov	r4, sp
 800279e:	1d1a      	adds	r2, r3, #4
 80027a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <display_update_meter+0x224>)
 80027ac:	2182      	movs	r1, #130	; 0x82
 80027ae:	2009      	movs	r0, #9
 80027b0:	f003 fc98 	bl	80060e4 <Displ_WString>
		// Angle
		if (metervalue_pf1 < 0) {
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <display_update_meter+0x240>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d51b      	bpl.n	80027fc <display_update_meter+0x1ac>
			snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80027c4:	4b32      	ldr	r3, [pc, #200]	; (8002890 <display_update_meter+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fedd 	bl	8000588 <__aeabi_f2d>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	ec43 2b10 	vmov	d0, r2, r3
 80027d6:	f00c f96f 	bl	800eab8 <acos>
 80027da:	ec51 0b10 	vmov	r0, r1, d0
 80027de:	a320      	add	r3, pc, #128	; (adr r3, 8002860 <display_update_meter+0x210>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fd ff28 	bl	8000638 <__aeabi_dmul>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	e9cd 2300 	strd	r2, r3, [sp]
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <display_update_meter+0x248>)
 80027f2:	2120      	movs	r1, #32
 80027f4:	481f      	ldr	r0, [pc, #124]	; (8002874 <display_update_meter+0x224>)
 80027f6:	f009 fa03 	bl	800bc00 <sniprintf>
 80027fa:	e01a      	b.n	8002832 <display_update_meter+0x1e2>
		} else {
			snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <display_update_meter+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fec1 	bl	8000588 <__aeabi_f2d>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	ec43 2b10 	vmov	d0, r2, r3
 800280e:	f00c f953 	bl	800eab8 <acos>
 8002812:	ec51 0b10 	vmov	r0, r1, d0
 8002816:	a312      	add	r3, pc, #72	; (adr r3, 8002860 <display_update_meter+0x210>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd ff0c 	bl	8000638 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9cd 2300 	strd	r2, r3, [sp]
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <display_update_meter+0x230>)
 800282a:	2120      	movs	r1, #32
 800282c:	4811      	ldr	r0, [pc, #68]	; (8002874 <display_update_meter+0x224>)
 800282e:	f009 f9e7 	bl	800bc00 <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <display_update_meter+0x228>)
 8002834:	2200      	movs	r2, #0
 8002836:	9204      	str	r2, [sp, #16]
 8002838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283c:	9203      	str	r2, [sp, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	9202      	str	r2, [sp, #8]
 8002842:	466c      	mov	r4, sp
 8002844:	1d1a      	adds	r2, r3, #4
 8002846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800284a:	e884 0003 	stmia.w	r4, {r0, r1}
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <display_update_meter+0x224>)
 8002852:	2182      	movs	r1, #130	; 0x82
 8002854:	208a      	movs	r0, #138	; 0x8a
 8002856:	f003 fc45 	bl	80060e4 <Displ_WString>
 800285a:	e097      	b.n	800298c <display_update_meter+0x33c>
 800285c:	f3af 8000 	nop.w
 8002860:	1af05a77 	.word	0x1af05a77
 8002864:	404ca5dc 	.word	0x404ca5dc
 8002868:	2000028c 	.word	0x2000028c
 800286c:	20007f0c 	.word	0x20007f0c
 8002870:	0800f564 	.word	0x0800f564
 8002874:	20001fc0 	.word	0x20001fc0
 8002878:	20000024 	.word	0x20000024
 800287c:	20007f10 	.word	0x20007f10
 8002880:	0800f56c 	.word	0x0800f56c
 8002884:	20007f14 	.word	0x20007f14
 8002888:	0800f574 	.word	0x0800f574
 800288c:	20007f18 	.word	0x20007f18
 8002890:	20007f1c 	.word	0x20007f1c
 8002894:	0800f57c 	.word	0x0800f57c
 8002898:	0800f584 	.word	0x0800f584
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <display_update_meter+0x348>)
 800289e:	2200      	movs	r2, #0
 80028a0:	9204      	str	r2, [sp, #16]
 80028a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028a6:	9203      	str	r2, [sp, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	9202      	str	r2, [sp, #8]
 80028ac:	466c      	mov	r4, sp
 80028ae:	1d1a      	adds	r2, r3, #4
 80028b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a38      	ldr	r2, [pc, #224]	; (800299c <display_update_meter+0x34c>)
 80028bc:	2107      	movs	r1, #7
 80028be:	2009      	movs	r0, #9
 80028c0:	f003 fc10 	bl	80060e4 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, GREEN, BLACK);
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <display_update_meter+0x348>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	9204      	str	r2, [sp, #16]
 80028ca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80028ce:	9203      	str	r2, [sp, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	9202      	str	r2, [sp, #8]
 80028d4:	466c      	mov	r4, sp
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2f      	ldr	r2, [pc, #188]	; (80029a0 <display_update_meter+0x350>)
 80028e4:	2107      	movs	r1, #7
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f003 fbfc 	bl	80060e4 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <display_update_meter+0x348>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	9204      	str	r2, [sp, #16]
 80028f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80028f6:	9203      	str	r2, [sp, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	466c      	mov	r4, sp
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002904:	e884 0003 	stmia.w	r4, {r0, r1}
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <display_update_meter+0x354>)
 800290c:	2130      	movs	r1, #48	; 0x30
 800290e:	2009      	movs	r0, #9
 8002910:	f003 fbe8 	bl	80060e4 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <display_update_meter+0x348>)
 8002916:	2200      	movs	r2, #0
 8002918:	9204      	str	r2, [sp, #16]
 800291a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800291e:	9203      	str	r2, [sp, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	9202      	str	r2, [sp, #8]
 8002924:	466c      	mov	r4, sp
 8002926:	1d1a      	adds	r2, r3, #4
 8002928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800292c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <display_update_meter+0x354>)
 8002934:	2159      	movs	r1, #89	; 0x59
 8002936:	2009      	movs	r0, #9
 8002938:	f003 fbd4 	bl	80060e4 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <display_update_meter+0x348>)
 800293e:	2200      	movs	r2, #0
 8002940:	9204      	str	r2, [sp, #16]
 8002942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002946:	9203      	str	r2, [sp, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	9202      	str	r2, [sp, #8]
 800294c:	466c      	mov	r4, sp
 800294e:	1d1a      	adds	r2, r3, #4
 8002950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002954:	e884 0003 	stmia.w	r4, {r0, r1}
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <display_update_meter+0x358>)
 800295c:	2182      	movs	r1, #130	; 0x82
 800295e:	2009      	movs	r0, #9
 8002960:	f003 fbc0 	bl	80060e4 <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <display_update_meter+0x348>)
 8002966:	2200      	movs	r2, #0
 8002968:	9204      	str	r2, [sp, #16]
 800296a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800296e:	9203      	str	r2, [sp, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	9202      	str	r2, [sp, #8]
 8002974:	466c      	mov	r4, sp
 8002976:	1d1a      	adds	r2, r3, #4
 8002978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800297c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <display_update_meter+0x350>)
 8002984:	2182      	movs	r1, #130	; 0x82
 8002986:	208a      	movs	r0, #138	; 0x8a
 8002988:	f003 fbac 	bl	80060e4 <Displ_WString>
	}
	display_show_curves();
 800298c:	f000 fc9c 	bl	80032c8 <display_show_curves>
}
 8002990:	bf00      	nop
 8002992:	3704      	adds	r7, #4
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	20000024 	.word	0x20000024
 800299c:	0800f58c 	.word	0x0800f58c
 80029a0:	0800f590 	.word	0x0800f590
 80029a4:	0800f598 	.word	0x0800f598
 80029a8:	0800f5a0 	.word	0x0800f5a0

080029ac <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	b08b      	sub	sp, #44	; 0x2c
 80029b0:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 80029b6:	2328      	movs	r3, #40	; 0x28
 80029b8:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 80029ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029be:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 80029c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029c4:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fc17 	bl	8005200 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 80029d2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80029d6:	4ba5      	ldr	r3, [pc, #660]	; (8002c6c <display_meter_mask+0x2c0>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21a      	sxth	r2, r3
 80029e0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4603      	mov	r3, r0
 80029ea:	2000      	movs	r0, #0
 80029ec:	f002 fdf1 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 80029f0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80029f4:	89fa      	ldrh	r2, [r7, #14]
 80029f6:	89bb      	ldrh	r3, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	2200      	movs	r2, #0
 8002a06:	2000      	movs	r0, #0
 8002a08:	f002 fde3 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a0c:	89fa      	ldrh	r2, [r7, #14]
 8002a0e:	89bb      	ldrh	r3, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b219      	sxth	r1, r3
 8002a16:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <display_meter_mask+0x2c0>)
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b218      	sxth	r0, r3
 8002a20:	89fa      	ldrh	r2, [r7, #14]
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b21a      	sxth	r2, r3
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	4602      	mov	r2, r0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f002 fdcd 	bl	80055d2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 8002a38:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <display_meter_mask+0x2c0>)
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b218      	sxth	r0, r3
 8002a42:	89fa      	ldrh	r2, [r7, #14]
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b219      	sxth	r1, r3
 8002a4c:	4b87      	ldr	r3, [pc, #540]	; (8002c6c <display_meter_mask+0x2c0>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f002 fdb9 	bl	80055d2 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 8002a60:	89fb      	ldrh	r3, [r7, #14]
 8002a62:	3309      	adds	r3, #9
 8002a64:	b29c      	uxth	r4, r3
 8002a66:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <display_meter_mask+0x2c4>)
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	9204      	str	r2, [sp, #16]
 8002a6c:	893a      	ldrh	r2, [r7, #8]
 8002a6e:	9203      	str	r2, [sp, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	9202      	str	r2, [sp, #8]
 8002a74:	466d      	mov	r5, sp
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2256      	movs	r2, #86	; 0x56
 8002a84:	4621      	mov	r1, r4
 8002a86:	204b      	movs	r0, #75	; 0x4b
 8002a88:	f003 f8ae 	bl	8005be8 <Displ_WChar>
	font_col = ORANGE;
 8002a8c:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002a90:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <display_meter_mask+0x2c0>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	3b1e      	subs	r3, #30
 8002a98:	b29c      	uxth	r4, r3
 8002a9a:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <display_meter_mask+0x2c4>)
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	9204      	str	r2, [sp, #16]
 8002aa0:	893a      	ldrh	r2, [r7, #8]
 8002aa2:	9203      	str	r2, [sp, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	466d      	mov	r5, sp
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2241      	movs	r2, #65	; 0x41
 8002ab8:	2109      	movs	r1, #9
 8002aba:	4620      	mov	r0, r4
 8002abc:	f003 f894 	bl	8005be8 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002ac0:	89ba      	ldrh	r2, [r7, #12]
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002acc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002ad6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <display_meter_mask+0x2c0>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002ae8:	897b      	ldrh	r3, [r7, #10]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4603      	mov	r3, r0
 8002aee:	2000      	movs	r0, #0
 8002af0:	f002 fd6f 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002af4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002af8:	89fa      	ldrh	r2, [r7, #14]
 8002afa:	89bb      	ldrh	r3, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f002 fd61 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b10:	89fa      	ldrh	r2, [r7, #14]
 8002b12:	89bb      	ldrh	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b219      	sxth	r1, r3
 8002b1a:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <display_meter_mask+0x2c0>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b218      	sxth	r0, r3
 8002b24:	89fa      	ldrh	r2, [r7, #14]
 8002b26:	89bb      	ldrh	r3, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	4602      	mov	r2, r0
 8002b36:	2000      	movs	r0, #0
 8002b38:	f002 fd4b 	bl	80055d2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <display_meter_mask+0x2c0>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b218      	sxth	r0, r3
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	89bb      	ldrh	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b219      	sxth	r1, r3
 8002b50:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <display_meter_mask+0x2c0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	4623      	mov	r3, r4
 8002b64:	f002 fd35 	bl	80055d2 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8002b68:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <display_meter_mask+0x2c0>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3b50      	subs	r3, #80	; 0x50
 8002b6e:	b29c      	uxth	r4, r3
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	3309      	adds	r3, #9
 8002b74:	b29d      	uxth	r5, r3
 8002b76:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <display_meter_mask+0x2c4>)
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	9204      	str	r2, [sp, #16]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	9203      	str	r2, [sp, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	9202      	str	r2, [sp, #8]
 8002b84:	466e      	mov	r6, sp
 8002b86:	1d1a      	adds	r2, r3, #4
 8002b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b8c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <display_meter_mask+0x2c8>)
 8002b94:	4629      	mov	r1, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	f003 faa4 	bl	80060e4 <Displ_WString>
	// W
	ypos += box_height+1;
 8002b9c:	89ba      	ldrh	r2, [r7, #12]
 8002b9e:	89fb      	ldrh	r3, [r7, #14]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002ba8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002bac:	813b      	strh	r3, [r7, #8]
 8002bae:	893b      	ldrh	r3, [r7, #8]
 8002bb0:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002bb2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <display_meter_mask+0x2c0>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002bc4:	897b      	ldrh	r3, [r7, #10]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f002 fd01 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002bd0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002bd4:	89fa      	ldrh	r2, [r7, #14]
 8002bd6:	89bb      	ldrh	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	4613      	mov	r3, r2
 8002be4:	2200      	movs	r2, #0
 8002be6:	2000      	movs	r0, #0
 8002be8:	f002 fcf3 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002bec:	89fa      	ldrh	r2, [r7, #14]
 8002bee:	89bb      	ldrh	r3, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b219      	sxth	r1, r3
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <display_meter_mask+0x2c0>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	b218      	sxth	r0, r3
 8002c00:	89fa      	ldrh	r2, [r7, #14]
 8002c02:	89bb      	ldrh	r3, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	4602      	mov	r2, r0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f002 fcdd 	bl	80055d2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <display_meter_mask+0x2c0>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	b218      	sxth	r0, r3
 8002c22:	89fa      	ldrh	r2, [r7, #14]
 8002c24:	89bb      	ldrh	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b219      	sxth	r1, r3
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <display_meter_mask+0x2c0>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4623      	mov	r3, r4
 8002c40:	f002 fcc7 	bl	80055d2 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <display_meter_mask+0x2c0>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	3b50      	subs	r3, #80	; 0x50
 8002c4a:	b29c      	uxth	r4, r3
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	3309      	adds	r3, #9
 8002c50:	b29d      	uxth	r5, r3
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <display_meter_mask+0x2c4>)
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	9204      	str	r2, [sp, #16]
 8002c58:	893a      	ldrh	r2, [r7, #8]
 8002c5a:	9203      	str	r2, [sp, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	9202      	str	r2, [sp, #8]
 8002c60:	466e      	mov	r6, sp
 8002c62:	1d1a      	adds	r2, r3, #4
 8002c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c68:	e006      	b.n	8002c78 <display_meter_mask+0x2cc>
 8002c6a:	bf00      	nop
 8002c6c:	20001fe0 	.word	0x20001fe0
 8002c70:	20000018 	.word	0x20000018
 8002c74:	0800f5a8 	.word	0x0800f5a8
 8002c78:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2257      	movs	r2, #87	; 0x57
 8002c80:	4629      	mov	r1, r5
 8002c82:	4620      	mov	r0, r4
 8002c84:	f002 ffb0 	bl	8005be8 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002c88:	89ba      	ldrh	r2, [r7, #12]
 8002c8a:	89fb      	ldrh	r3, [r7, #14]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3301      	adds	r3, #1
 8002c92:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	893b      	ldrh	r3, [r7, #8]
 8002c9c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002c9e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <display_meter_mask+0x470>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b21a      	sxth	r2, r3
 8002cac:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f002 fc8b 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002cbc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002cc0:	89fa      	ldrh	r2, [r7, #14]
 8002cc2:	89bb      	ldrh	r3, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	b21a      	sxth	r2, r3
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f002 fc7d 	bl	80055d2 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002cd8:	89fa      	ldrh	r2, [r7, #14]
 8002cda:	89bb      	ldrh	r3, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	b219      	sxth	r1, r3
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	; (8002e1c <display_meter_mask+0x470>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b218      	sxth	r0, r3
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	89bb      	ldrh	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f002 fc67 	bl	80055d2 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <display_meter_mask+0x470>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b218      	sxth	r0, r3
 8002d0e:	89fa      	ldrh	r2, [r7, #14]
 8002d10:	89bb      	ldrh	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b219      	sxth	r1, r3
 8002d18:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <display_meter_mask+0x470>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21a      	sxth	r2, r3
 8002d22:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f002 fc51 	bl	80055d2 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002d30:	89fb      	ldrh	r3, [r7, #14]
 8002d32:	3309      	adds	r3, #9
 8002d34:	b29c      	uxth	r4, r3
 8002d36:	4b3a      	ldr	r3, [pc, #232]	; (8002e20 <display_meter_mask+0x474>)
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	9204      	str	r2, [sp, #16]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	9203      	str	r2, [sp, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	9202      	str	r2, [sp, #8]
 8002d44:	466d      	mov	r5, sp
 8002d46:	1d1a      	adds	r2, r3, #4
 8002d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <display_meter_mask+0x478>)
 8002d54:	4621      	mov	r1, r4
 8002d56:	205f      	movs	r0, #95	; 0x5f
 8002d58:	f003 f9c4 	bl	80060e4 <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <display_meter_mask+0x470>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	3b16      	subs	r3, #22
 8002d62:	b29c      	uxth	r4, r3
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <display_meter_mask+0x47c>)
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	9204      	str	r2, [sp, #16]
 8002d6a:	893a      	ldrh	r2, [r7, #8]
 8002d6c:	9203      	str	r2, [sp, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	9202      	str	r2, [sp, #8]
 8002d72:	466d      	mov	r5, sp
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2260      	movs	r2, #96	; 0x60
 8002d82:	2182      	movs	r1, #130	; 0x82
 8002d84:	4620      	mov	r0, r4
 8002d86:	f002 ff2f 	bl	8005be8 <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002d8a:	89ba      	ldrh	r2, [r7, #12]
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	4413      	add	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002d96:	231f      	movs	r3, #31
 8002d98:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <display_meter_mask+0x480>)
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	2302      	movs	r3, #2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <display_meter_mask+0x484>)
 8002db0:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2;
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <display_meter_mask+0x484>)
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	085b      	lsrs	r3, r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <display_meter_mask+0x488>)
 8002dc2:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002dc4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <display_meter_mask+0x470>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b218      	sxth	r0, r3
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <display_meter_mask+0x480>)
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	89fb      	ldrh	r3, [r7, #14]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b21c      	sxth	r4, r3
 8002dda:	2302      	movs	r3, #2
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	897a      	ldrh	r2, [r7, #10]
 8002de0:	9201      	str	r2, [sp, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	4623      	mov	r3, r4
 8002de6:	4602      	mov	r2, r0
 8002de8:	2000      	movs	r0, #0
 8002dea:	f002 fd23 	bl	8005834 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <display_meter_mask+0x48c>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b218      	sxth	r0, r3
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <display_meter_mask+0x488>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b219      	sxth	r1, r3
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <display_meter_mask+0x48c>)
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	33d2      	adds	r3, #210	; 0xd2
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <display_meter_mask+0x488>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e0e:	9400      	str	r4, [sp, #0]
 8002e10:	f002 fbdf 	bl	80055d2 <Displ_Line>
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1c:	20001fe0 	.word	0x20001fe0
 8002e20:	20000018 	.word	0x20000018
 8002e24:	0800f5ac 	.word	0x0800f5ac
 8002e28:	20000024 	.word	0x20000024
 8002e2c:	20001fe2 	.word	0x20001fe2
 8002e30:	20000008 	.word	0x20000008
 8002e34:	200006b8 	.word	0x200006b8
 8002e38:	2000000a 	.word	0x2000000a

08002e3c <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e46:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e4c:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <display_align_curves+0xfc>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da20      	bge.n	8002e98 <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	e016      	b.n	8002e8a <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002e5c:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <display_align_curves+0x100>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e64:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <display_align_curves+0x104>)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <display_align_curves+0x100>)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002e74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e78:	4a31      	ldr	r2, [pc, #196]	; (8002f40 <display_align_curves+0x104>)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002e80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002e90:	d3e4      	bcc.n	8002e5c <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002e92:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002e96:	e049      	b.n	8002f2c <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <display_align_curves+0xfc>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	e019      	b.n	8002ed4 <display_align_curves+0x98>
		dest_idx++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <display_align_curves+0x100>)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002eae:	4a24      	ldr	r2, [pc, #144]	; (8002f40 <display_align_curves+0x104>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <display_align_curves+0x100>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002ebe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ec2:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <display_align_curves+0x104>)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002eca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002eda:	d3e1      	bcc.n	8002ea0 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002edc:	2314      	movs	r3, #20
 8002ede:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	e019      	b.n	8002f1a <display_align_curves+0xde>
		dest_idx++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <display_align_curves+0x100>)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <display_align_curves+0x104>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002efc:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <display_align_curves+0x100>)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002f04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <display_align_curves+0x104>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002f10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <display_align_curves+0xfc>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbe0      	blt.n	8002ee6 <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	2000023c 	.word	0x2000023c
 8002f3c:	200071ec 	.word	0x200071ec
 8002f40:	200006bc 	.word	0x200006bc

08002f44 <draw_curve>:
 * parameter colour: curve colour
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear) {
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	80fb      	strh	r3, [r7, #6]
 8002f50:	4613      	mov	r3, r2
 8002f52:	717b      	strb	r3, [r7, #5]

	if (! dont_clear) {
 8002f54:	797b      	ldrb	r3, [r7, #5]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d115      	bne.n	8002f86 <draw_curve+0x42>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002f5a:	4b33      	ldr	r3, [pc, #204]	; (8003028 <draw_curve+0xe4>)
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	4b33      	ldr	r3, [pc, #204]	; (800302c <draw_curve+0xe8>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b02      	subs	r3, #2
 8002f68:	b299      	uxth	r1, r3
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <draw_curve+0xec>)
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <draw_curve+0xe8>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	9000      	str	r0, [sp, #0]
 8002f80:	2002      	movs	r0, #2
 8002f82:	f001 ff89 	bl	8004e98 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);
	// draw zero line
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <draw_curve+0xf0>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b218      	sxth	r0, r3
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <draw_curve+0xf4>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b219      	sxth	r1, r3
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <draw_curve+0xf0>)
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <draw_curve+0xf8>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <draw_curve+0xf4>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002faa:	9400      	str	r4, [sp, #0]
 8002fac:	f002 fb11 	bl	80055d2 <Displ_Line>
	// draw the curve
	for (int x=1; x<curve_len; x++) {
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e02d      	b.n	8003012 <draw_curve+0xce>
		Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <draw_curve+0xf0>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	b218      	sxth	r0, r3
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <draw_curve+0xf4>)
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	491b      	ldr	r1, [pc, #108]	; (8003040 <draw_curve+0xfc>)
 8002fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	b219      	sxth	r1, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <draw_curve+0xf0>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b21c      	sxth	r4, r3
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <draw_curve+0xf4>)
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	4d13      	ldr	r5, [pc, #76]	; (8003040 <draw_curve+0xfc>)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	4622      	mov	r2, r4
 8003008:	f002 fae3 	bl	80055d2 <Displ_Line>
	for (int x=1; x<curve_len; x++) {
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <draw_curve+0xf8>)
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4293      	cmp	r3, r2
 800301c:	dbcb      	blt.n	8002fb6 <draw_curve+0x72>
	}
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bdb0      	pop	{r4, r5, r7, pc}
 8003028:	20001fe2 	.word	0x20001fe2
 800302c:	20000008 	.word	0x20000008
 8003030:	20001fe0 	.word	0x20001fe0
 8003034:	2000000a 	.word	0x2000000a
 8003038:	200006b8 	.word	0x200006b8
 800303c:	20001fbc 	.word	0x20001fbc
 8003040:	20000370 	.word	0x20000370

08003044 <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum) {
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08b      	sub	sp, #44	; 0x2c
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
	int value;
	int scale_factor = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
	int src_idx = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
	int zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) /2;
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	4995      	ldr	r1, [pc, #596]	; (80032b0 <make_curve+0x26c>)
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3302      	adds	r3, #2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	4990      	ldr	r1, [pc, #576]	; (80032b0 <make_curve+0x26c>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	1ac3      	subs	r3, r0, r3
 800307c:	0fda      	lsrs	r2, r3, #31
 800307e:	4413      	add	r3, r2
 8003080:	105b      	asrs	r3, r3, #1
 8003082:	617b      	str	r3, [r7, #20]

	//term_print("zero_value = %d\r\n", zero_value);

	float fScale = (float)curve_y_size / (float)sample_buf_meta[bufnum].max;
 8003084:	4b8b      	ldr	r3, [pc, #556]	; (80032b4 <make_curve+0x270>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003090:	79fa      	ldrb	r2, [r7, #7]
 8003092:	4987      	ldr	r1, [pc, #540]	; (80032b0 <make_curve+0x26c>)
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3302      	adds	r3, #2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ae:	edc7 7a04 	vstr	s15, [r7, #16]
	if (fScale < 1) {
 80030b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d51f      	bpl.n	8003104 <make_curve+0xc0>
		scale_factor = trunc(1/fScale)+1; // divisor
 80030c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80030cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030d0:	ee16 0a90 	vmov	r0, s13
 80030d4:	f7fd fa58 	bl	8000588 <__aeabi_f2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	ec43 2b10 	vmov	d0, r2, r3
 80030e0:	f00c f8d6 	bl	800f290 <trunc>
 80030e4:	ec51 0b10 	vmov	r0, r1, d0
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <make_curve+0x274>)
 80030ee:	f7fd f8ed 	bl	80002cc <__adddf3>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd4d 	bl	8000b98 <__aeabi_d2iz>
 80030fe:	4603      	mov	r3, r0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	e010      	b.n	8003126 <make_curve+0xe2>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8003104:	6938      	ldr	r0, [r7, #16]
 8003106:	f7fd fa3f 	bl	8000588 <__aeabi_f2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	ec43 2b10 	vmov	d0, r2, r3
 8003112:	f00c f8bd 	bl	800f290 <trunc>
 8003116:	ec53 2b10 	vmov	r2, r3, d0
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fd3b 	bl	8000b98 <__aeabi_d2iz>
 8003122:	4603      	mov	r3, r0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;
 8003126:	f7ff fe89 	bl	8002e3c <display_align_curves>
 800312a:	4603      	mov	r3, r0
 800312c:	0fda      	lsrs	r2, r3, #31
 800312e:	4413      	add	r3, r2
 8003130:	105b      	asrs	r3, r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <make_curve+0x278>)
 8003136:	801a      	strh	r2, [r3, #0]
	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003138:	edd7 7a04 	vldr	s15, [r7, #16]
 800313c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	d557      	bpl.n	80031fa <make_curve+0x1b6>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	495c      	ldr	r1, [pc, #368]	; (80032c0 <make_curve+0x27c>)
 800314e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003152:	fb03 f202 	mul.w	r2, r3, r2
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	4413      	add	r3, r2
 800315a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800315e:	461c      	mov	r4, r3
 8003160:	79fa      	ldrb	r2, [r7, #7]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	3301      	adds	r3, #1
 8003166:	4956      	ldr	r1, [pc, #344]	; (80032c0 <make_curve+0x27c>)
 8003168:	f44f 7048 	mov.w	r0, #800	; 0x320
 800316c:	fb00 f202 	mul.w	r2, r0, r2
 8003170:	4413      	add	r3, r2
 8003172:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003176:	4423      	add	r3, r4
 8003178:	0fda      	lsrs	r2, r3, #31
 800317a:	4413      	add	r3, r2
 800317c:	105b      	asrs	r3, r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
		curve_y[0] = (value  - zero_value) / scale_factor;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad2      	subs	r2, r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	fb92 f3f3 	sdiv	r3, r2, r3
 800318c:	4a4d      	ldr	r2, [pc, #308]	; (80032c4 <make_curve+0x280>)
 800318e:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003190:	2301      	movs	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e02a      	b.n	80031ec <make_curve+0x1a8>
			src_idx+=2;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	3302      	adds	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4948      	ldr	r1, [pc, #288]	; (80032c0 <make_curve+0x27c>)
 80031a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031a4:	fb03 f202 	mul.w	r2, r3, r2
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	4413      	add	r3, r2
 80031ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031b0:	461c      	mov	r4, r3
 80031b2:	79fa      	ldrb	r2, [r7, #7]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4941      	ldr	r1, [pc, #260]	; (80032c0 <make_curve+0x27c>)
 80031ba:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031be:	fb00 f202 	mul.w	r2, r0, r2
 80031c2:	4413      	add	r3, r2
 80031c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031c8:	4423      	add	r3, r4
 80031ca:	0fda      	lsrs	r2, r3, #31
 80031cc:	4413      	add	r3, r2
 80031ce:	105b      	asrs	r3, r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = (value - zero_value) / scale_factor ;
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	fb92 f2f3 	sdiv	r2, r2, r3
 80031de:	4939      	ldr	r1, [pc, #228]	; (80032c4 <make_curve+0x280>)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	4b33      	ldr	r3, [pc, #204]	; (80032bc <make_curve+0x278>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4293      	cmp	r3, r2
 80031f6:	dbce      	blt.n	8003196 <make_curve+0x152>
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = (value - zero_value) * scale_factor ;
			//curve_y[pos_x] = y_max - (value * scale_factor) + y_offset;
		}
	}
}
 80031f8:	e056      	b.n	80032a8 <make_curve+0x264>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4930      	ldr	r1, [pc, #192]	; (80032c0 <make_curve+0x27c>)
 80031fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003202:	fb03 f202 	mul.w	r2, r3, r2
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	4413      	add	r3, r2
 800320a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800320e:	461c      	mov	r4, r3
 8003210:	79fa      	ldrb	r2, [r7, #7]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	3301      	adds	r3, #1
 8003216:	492a      	ldr	r1, [pc, #168]	; (80032c0 <make_curve+0x27c>)
 8003218:	f44f 7048 	mov.w	r0, #800	; 0x320
 800321c:	fb00 f202 	mul.w	r2, r0, r2
 8003220:	4413      	add	r3, r2
 8003222:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003226:	4423      	add	r3, r4
 8003228:	0fda      	lsrs	r2, r3, #31
 800322a:	4413      	add	r3, r2
 800322c:	105b      	asrs	r3, r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
		curve_y[0] = (value - zero_value) * scale_factor;
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <make_curve+0x280>)
 800323e:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003240:	2301      	movs	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	e02a      	b.n	800329c <make_curve+0x258>
			src_idx+=2;
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	3302      	adds	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	491c      	ldr	r1, [pc, #112]	; (80032c0 <make_curve+0x27c>)
 8003250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003254:	fb03 f202 	mul.w	r2, r3, r2
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	4413      	add	r3, r2
 800325c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003260:	461c      	mov	r4, r3
 8003262:	79fa      	ldrb	r2, [r7, #7]
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	3301      	adds	r3, #1
 8003268:	4915      	ldr	r1, [pc, #84]	; (80032c0 <make_curve+0x27c>)
 800326a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800326e:	fb00 f202 	mul.w	r2, r0, r2
 8003272:	4413      	add	r3, r2
 8003274:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003278:	4423      	add	r3, r4
 800327a:	0fda      	lsrs	r2, r3, #31
 800327c:	4413      	add	r3, r2
 800327e:	105b      	asrs	r3, r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
			curve_y[pos_x] = (value - zero_value) * scale_factor ;
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	fb03 f202 	mul.w	r2, r3, r2
 800328e:	490d      	ldr	r1, [pc, #52]	; (80032c4 <make_curve+0x280>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3301      	adds	r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <make_curve+0x278>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	dbce      	blt.n	8003246 <make_curve+0x202>
}
 80032a8:	bf00      	nop
 80032aa:	372c      	adds	r7, #44	; 0x2c
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	2000023c 	.word	0x2000023c
 80032b4:	20000008 	.word	0x20000008
 80032b8:	3ff00000 	.word	0x3ff00000
 80032bc:	20001fbc 	.word	0x20001fbc
 80032c0:	200006bc 	.word	0x200006bc
 80032c4:	20000370 	.word	0x20000370

080032c8 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
	uint8_t dont_clear = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	e012      	b.n	80032fe <display_show_curves+0x36>
		make_curve(i);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff feb1 	bl	8003044 <make_curve>
		draw_curve(channel_colour[i], dont_clear);
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <display_show_curves+0x48>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ea:	79fa      	ldrb	r2, [r7, #7]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fe28 	bl	8002f44 <draw_curve>
		dont_clear = 1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	dde9      	ble.n	80032d8 <display_show_curves+0x10>
	}
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d80c      	bhi.n	800333e <display_show_curve+0x2a>

	make_curve(bufnum);
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fe8c 	bl	8003044 <make_curve>
	draw_curve(channel_colour[bufnum], 0);
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <display_show_curve+0x34>)
 8003330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe04 	bl	8002f44 <draw_curve>
 800333c:	e000      	b.n	8003340 <display_show_curve+0x2c>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 800333e:	bf00      	nop

}
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000000 	.word	0x20000000

0800334c <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003350:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003354:	490d      	ldr	r1, [pc, #52]	; (800338c <start_adcs+0x40>)
 8003356:	480e      	ldr	r0, [pc, #56]	; (8003390 <start_adcs+0x44>)
 8003358:	f003 fcfe 	bl	8006d58 <HAL_ADC_Start_DMA>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 8003362:	480c      	ldr	r0, [pc, #48]	; (8003394 <start_adcs+0x48>)
 8003364:	f001 f9fe 	bl	8004764 <term_print>
  	  Error_Handler();
 8003368:	f000 fe1c 	bl	8003fa4 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 800336c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003370:	4909      	ldr	r1, [pc, #36]	; (8003398 <start_adcs+0x4c>)
 8003372:	480a      	ldr	r0, [pc, #40]	; (800339c <start_adcs+0x50>)
 8003374:	f003 fcf0 	bl	8006d58 <HAL_ADC_Start_DMA>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 800337e:	4808      	ldr	r0, [pc, #32]	; (80033a0 <start_adcs+0x54>)
 8003380:	f001 f9f0 	bl	8004764 <term_print>
 	  Error_Handler();
 8003384:	f000 fe0e 	bl	8003fa4 <Error_Handler>
	}
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000232c 	.word	0x2000232c
 8003390:	20001fe4 	.word	0x20001fe4
 8003394:	0800f5b0 	.word	0x0800f5b0
 8003398:	20003d6c 	.word	0x20003d6c
 800339c:	2000202c 	.word	0x2000202c
 80033a0:	0800f5cc 	.word	0x0800f5cc

080033a4 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	460a      	mov	r2, r1
 80033ae:	80fb      	strh	r3, [r7, #6]
 80033b0:	4613      	mov	r3, r2
 80033b2:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d803      	bhi.n	80033c6 <adjust_TIM2_period+0x22>
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033c4:	d205      	bcs.n	80033d2 <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4808      	ldr	r0, [pc, #32]	; (80033ec <adjust_TIM2_period+0x48>)
 80033cc:	f001 f9ca 	bl	8004764 <term_print>
		return;
 80033d0:	e008      	b.n	80033e4 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 80033d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4619      	mov	r1, r3
 80033de:	4804      	ldr	r0, [pc, #16]	; (80033f0 <adjust_TIM2_period+0x4c>)
 80033e0:	f001 f9c0 	bl	8004764 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	0800f5e8 	.word	0x0800f5e8
 80033f0:	0800f608 	.word	0x0800f608

080033f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033fa:	f003 fbd3 	bl	8006ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033fe:	f000 f9eb 	bl	80037d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003402:	f000 fc2f 	bl	8003c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8003406:	f000 fbef 	bl	8003be8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800340a:	f000 fb99 	bl	8003b40 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800340e:	f000 fb4b 	bl	8003aa8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003412:	f000 fa53 	bl	80038bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8003416:	f000 fab1 	bl	800397c <MX_ADC2_Init>
  MX_SPI2_Init();
 800341a:	f000 fb0f 	bl	8003a3c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800341e:	f000 fbb9 	bl	8003b94 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8003422:	f7ff f871 	bl	8002508 <display_init>
#endif

  // Start UART receive via interrupt
  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) != HAL_OK) {
 8003426:	2201      	movs	r2, #1
 8003428:	4984      	ldr	r1, [pc, #528]	; (800363c <main+0x248>)
 800342a:	4885      	ldr	r0, [pc, #532]	; (8003640 <main+0x24c>)
 800342c:	f006 ffe9 	bl	800a402 <HAL_UART_Receive_IT>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <main+0x46>
    Error_Handler();
 8003436:	f000 fdb5 	bl	8003fa4 <Error_Handler>
  }

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800343a:	4882      	ldr	r0, [pc, #520]	; (8003644 <main+0x250>)
 800343c:	f006 fac6 	bl	80099cc <HAL_TIM_Base_Start_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <main+0x56>
     Error_Handler();
 8003446:	f000 fdad 	bl	8003fa4 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 800344a:	f7ff ff7f 	bl	800334c <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 800344e:	f7ff f87d 	bl	800254c <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 8003452:	f003 fc0d 	bl	8006c70 <HAL_GetTick>
 8003456:	4603      	mov	r3, r0
 8003458:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800345c:	4a7a      	ldr	r2, [pc, #488]	; (8003648 <main+0x254>)
 800345e:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8003460:	4b7a      	ldr	r3, [pc, #488]	; (800364c <main+0x258>)
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2302      	movs	r3, #2
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	4a79      	ldr	r2, [pc, #484]	; (8003650 <main+0x25c>)
 800346c:	4979      	ldr	r1, [pc, #484]	; (8003654 <main+0x260>)
 800346e:	487a      	ldr	r0, [pc, #488]	; (8003658 <main+0x264>)
 8003470:	f008 fbfa 	bl	800bc68 <siprintf>
  if (HAL_UART_Transmit(&huart2, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 8003474:	4878      	ldr	r0, [pc, #480]	; (8003658 <main+0x264>)
 8003476:	f7fc ff1b 	bl	80002b0 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	b29a      	uxth	r2, r3
 800347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003482:	4975      	ldr	r1, [pc, #468]	; (8003658 <main+0x264>)
 8003484:	486e      	ldr	r0, [pc, #440]	; (8003640 <main+0x24c>)
 8003486:	f006 ff2a 	bl	800a2de <HAL_UART_Transmit>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <main+0xa0>
    Error_Handler();
 8003490:	f000 fd88 	bl	8003fa4 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 8003494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	486f      	ldr	r0, [pc, #444]	; (800365c <main+0x268>)
 800349e:	f001 f961 	bl	8004764 <term_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 80034a2:	f003 fbe5 	bl	8006c70 <HAL_GetTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	3364      	adds	r3, #100	; 0x64
 80034aa:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <main+0x26c>)
 80034ac:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 80034ae:	f003 fbdf 	bl	8006c70 <HAL_GetTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	33c8      	adds	r3, #200	; 0xc8
 80034b6:	4a6b      	ldr	r2, [pc, #428]	; (8003664 <main+0x270>)
 80034b8:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 80034ba:	f003 fbd9 	bl	8006c70 <HAL_GetTick>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a69      	ldr	r2, [pc, #420]	; (8003668 <main+0x274>)
 80034c2:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 80034c4:	4b68      	ldr	r3, [pc, #416]	; (8003668 <main+0x274>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <main+0x278>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d21b      	bcs.n	8003508 <main+0x114>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80034d0:	4b65      	ldr	r3, [pc, #404]	; (8003668 <main+0x274>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3364      	adds	r3, #100	; 0x64
 80034d6:	4a62      	ldr	r2, [pc, #392]	; (8003660 <main+0x26c>)
 80034d8:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <main+0x27c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <main+0xfe>
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <main+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80034ea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <main+0x27c>)
 80034f0:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <main+0x274>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80034fa:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <main+0x280>)
 80034fc:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80034fe:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <main+0x274>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	33c8      	adds	r3, #200	; 0xc8
 8003504:	4a57      	ldr	r2, [pc, #348]	; (8003664 <main+0x270>)
 8003506:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 8003508:	4b57      	ldr	r3, [pc, #348]	; (8003668 <main+0x274>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a57      	ldr	r2, [pc, #348]	; (800366c <main+0x278>)
 800350e:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 8003510:	4b55      	ldr	r3, [pc, #340]	; (8003668 <main+0x274>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <main+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d306      	bcc.n	800352a <main+0x136>
		next_measurement_time += MEASUREMENT_INTERVAL;
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <main+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	33c8      	adds	r3, #200	; 0xc8
 8003522:	4a50      	ldr	r2, [pc, #320]	; (8003664 <main+0x270>)
 8003524:	6013      	str	r3, [r2, #0]
		calc_measurements();
 8003526:	f7fe f99d 	bl	8001864 <calc_measurements>
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 800352a:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <main+0x274>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <main+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	f0c0 80c1 	bcc.w	80036ba <main+0x2c6>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <main+0x274>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3364      	adds	r3, #100	; 0x64
 800353e:	4a48      	ldr	r2, [pc, #288]	; (8003660 <main+0x26c>)
 8003540:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <main+0x254>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d017      	beq.n	800357a <main+0x186>
			if (now_ticks >= display_splash_ticks) {
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <main+0x274>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <main+0x254>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d31f      	bcc.n	8003596 <main+0x1a2>
				display_splash_ticks = 0;
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <main+0x254>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
				display_update_ticks = now_ticks;
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <main+0x274>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a44      	ldr	r2, [pc, #272]	; (8003674 <main+0x280>)
 8003562:	6013      	str	r3, [r2, #0]
				display_meter_mask();
 8003564:	f7ff fa22 	bl	80029ac <display_meter_mask>
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <main+0x274>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003570:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003574:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <main+0x27c>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	e00d      	b.n	8003596 <main+0x1a2>
			}
		} else {
		// Meter display update
			if (now_ticks >= display_update_ticks) {
 800357a:	4b3b      	ldr	r3, [pc, #236]	; (8003668 <main+0x274>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <main+0x280>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d307      	bcc.n	8003596 <main+0x1a2>
				display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <main+0x274>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800358e:	4a39      	ldr	r2, [pc, #228]	; (8003674 <main+0x280>)
 8003590:	6013      	str	r3, [r2, #0]
				display_update_meter();
 8003592:	f7ff f85d 	bl	8002650 <display_update_meter>
			}
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <main+0x27c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <main+0x1c2>
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <main+0x274>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <main+0x27c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d305      	bcc.n	80035b6 <main+0x1c2>
			Displ_BackLight('0');
 80035aa:	2030      	movs	r0, #48	; 0x30
 80035ac:	f002 fdda 	bl	8006164 <Displ_BackLight>
	  		display_off_ticks = 0;
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <main+0x27c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
	  	}

		// Handle UART communication
		if (rx_cmd_ready) {
 80035b6:	4b30      	ldr	r3, [pc, #192]	; (8003678 <main+0x284>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <main+0x1dc>
		  CMD_Handler((uint8_t*)rx_buff);
 80035be:	482f      	ldr	r0, [pc, #188]	; (800367c <main+0x288>)
 80035c0:	f7fe ff82 	bl	80024c8 <CMD_Handler>
		  rx_count = 0;
 80035c4:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <main+0x28c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
		  rx_cmd_ready = 0;
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <main+0x284>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
		}

		if (adc_restart) {
 80035d0:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <main+0x290>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <main+0x1ee>
		  adc_restart = 0;
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <main+0x290>)
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 80035de:	f7ff feb5 	bl	800334c <start_adcs>
		}

		if (new_time_period) {
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <main+0x294>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <main+0x208>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 80035ea:	4b27      	ldr	r3, [pc, #156]	; (8003688 <main+0x294>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fed7 	bl	80033a4 <adjust_TIM2_period>
		  new_time_period = 0;
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <main+0x294>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (tft_display) {
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <main+0x298>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05a      	beq.n	80036ba <main+0x2c6>
			if (tft_display == 9) {
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <main+0x298>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b09      	cmp	r3, #9
 800360a:	d10e      	bne.n	800362a <main+0x236>
				term_print("Running TFT performance test ...\r\n");
 800360c:	4820      	ldr	r0, [pc, #128]	; (8003690 <main+0x29c>)
 800360e:	f001 f8a9 	bl	8004764 <term_print>
				Displ_BackLight('1');
 8003612:	2031      	movs	r0, #49	; 0x31
 8003614:	f002 fda6 	bl	8006164 <Displ_BackLight>
				Displ_TestAll();
 8003618:	f003 fa6e 	bl	8006af8 <Displ_TestAll>
				Displ_BackLight('0');
 800361c:	2030      	movs	r0, #48	; 0x30
 800361e:	f002 fda1 	bl	8006164 <Displ_BackLight>
				term_print("....completed\r\n");
 8003622:	481c      	ldr	r0, [pc, #112]	; (8003694 <main+0x2a0>)
 8003624:	f001 f89e 	bl	8004764 <term_print>
 8003628:	e044      	b.n	80036b4 <main+0x2c0>
			} else {
				if (tft_display == 1) {
 800362a:	4b18      	ldr	r3, [pc, #96]	; (800368c <main+0x298>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d132      	bne.n	8003698 <main+0x2a4>
					Displ_BackLight('0');
 8003632:	2030      	movs	r0, #48	; 0x30
 8003634:	f002 fd96 	bl	8006164 <Displ_BackLight>
 8003638:	e03c      	b.n	80036b4 <main+0x2c0>
 800363a:	bf00      	nop
 800363c:	200022fe 	.word	0x200022fe
 8003640:	20002234 	.word	0x20002234
 8003644:	200021ec 	.word	0x200021ec
 8003648:	20007f24 	.word	0x20007f24
 800364c:	080139ec 	.word	0x080139ec
 8003650:	080139e8 	.word	0x080139e8
 8003654:	0800f618 	.word	0x0800f618
 8003658:	200022bc 	.word	0x200022bc
 800365c:	0800f62c 	.word	0x0800f62c
 8003660:	20007f38 	.word	0x20007f38
 8003664:	20007f34 	.word	0x20007f34
 8003668:	20007f2c 	.word	0x20007f2c
 800366c:	20007f30 	.word	0x20007f30
 8003670:	20007f20 	.word	0x20007f20
 8003674:	20007f28 	.word	0x20007f28
 8003678:	20002314 	.word	0x20002314
 800367c:	20002300 	.word	0x20002300
 8003680:	200022fc 	.word	0x200022fc
 8003684:	20002315 	.word	0x20002315
 8003688:	20002318 	.word	0x20002318
 800368c:	20002316 	.word	0x20002316
 8003690:	0800f63c 	.word	0x0800f63c
 8003694:	0800f660 	.word	0x0800f660
				} else {
					Displ_BackLight('1');
 8003698:	2031      	movs	r0, #49	; 0x31
 800369a:	f002 fd63 	bl	8006164 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 800369e:	f003 fae7 	bl	8006c70 <HAL_GetTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80036a8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80036ac:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <main+0x3bc>)
 80036ae:	6013      	str	r3, [r2, #0]
					display_meter_mask();
 80036b0:	f7ff f97c 	bl	80029ac <display_meter_mask>
				}
			}
		tft_display = 0;
 80036b4:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <main+0x3c0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <main+0x3c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	dc0b      	bgt.n	80036da <main+0x2e6>
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <main+0x3c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	dc07      	bgt.n	80036da <main+0x2e6>
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <main+0x3cc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	dc03      	bgt.n	80036da <main+0x2e6>
 80036d2:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <main+0x3d0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	dd1b      	ble.n	8003712 <main+0x31e>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <main+0x3c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	dd02      	ble.n	80036e8 <main+0x2f4>
 80036e2:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <main+0x3c4>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <main+0x3c8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	dd02      	ble.n	80036f6 <main+0x302>
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <main+0x3c8>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80036f6:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <main+0x3cc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	dd02      	ble.n	8003704 <main+0x310>
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <main+0x3cc>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <main+0x3d0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b01      	cmp	r3, #1
 800370a:	dd02      	ble.n	8003712 <main+0x31e>
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <main+0x3d0>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <main+0x3c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	dd0e      	ble.n	8003738 <main+0x344>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 800371a:	2100      	movs	r1, #0
 800371c:	2000      	movs	r0, #0
 800371e:	f7fd fc81 	bl	8001024 <calc_process_dma_buffer>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <main+0x33a>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8003728:	4827      	ldr	r0, [pc, #156]	; (80037c8 <main+0x3d4>)
 800372a:	f001 f81b 	bl	8004764 <term_print>
			}
			adc1_dma_l_count--;
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <main+0x3c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <main+0x3c4>)
 8003736:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <main+0x3c8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	dd0e      	ble.n	800375e <main+0x36a>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8003740:	2100      	movs	r1, #0
 8003742:	2001      	movs	r0, #1
 8003744:	f7fd fc6e 	bl	8001024 <calc_process_dma_buffer>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <main+0x360>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 800374e:	481f      	ldr	r0, [pc, #124]	; (80037cc <main+0x3d8>)
 8003750:	f001 f808 	bl	8004764 <term_print>
			}
			adc1_dma_h_count--;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <main+0x3c8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3b01      	subs	r3, #1
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <main+0x3c8>)
 800375c:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <main+0x3cc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	dd0e      	ble.n	8003784 <main+0x390>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003766:	2101      	movs	r1, #1
 8003768:	2000      	movs	r0, #0
 800376a:	f7fd fc5b 	bl	8001024 <calc_process_dma_buffer>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <main+0x386>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 8003774:	4816      	ldr	r0, [pc, #88]	; (80037d0 <main+0x3dc>)
 8003776:	f000 fff5 	bl	8004764 <term_print>
			}
			adc2_dma_l_count--;
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <main+0x3cc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <main+0x3cc>)
 8003782:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <main+0x3d0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	f77f ae96 	ble.w	80034ba <main+0xc6>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 800378e:	2101      	movs	r1, #1
 8003790:	2001      	movs	r0, #1
 8003792:	f7fd fc47 	bl	8001024 <calc_process_dma_buffer>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <main+0x3ae>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 800379c:	480d      	ldr	r0, [pc, #52]	; (80037d4 <main+0x3e0>)
 800379e:	f000 ffe1 	bl	8004764 <term_print>
			}
			adc2_dma_h_count--;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <main+0x3d0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <main+0x3d0>)
 80037aa:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 80037ac:	e685      	b.n	80034ba <main+0xc6>
 80037ae:	bf00      	nop
 80037b0:	20007f20 	.word	0x20007f20
 80037b4:	20002316 	.word	0x20002316
 80037b8:	2000231c 	.word	0x2000231c
 80037bc:	20002320 	.word	0x20002320
 80037c0:	20002324 	.word	0x20002324
 80037c4:	20002328 	.word	0x20002328
 80037c8:	0800f670 	.word	0x0800f670
 80037cc:	0800f698 	.word	0x0800f698
 80037d0:	0800f6c0 	.word	0x0800f6c0
 80037d4:	0800f6e8 	.word	0x0800f6e8

080037d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b094      	sub	sp, #80	; 0x50
 80037dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037de:	f107 031c 	add.w	r3, r7, #28
 80037e2:	2234      	movs	r2, #52	; 0x34
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f008 fbde 	bl	800bfa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fc:	2300      	movs	r3, #0
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <SystemClock_Config+0xdc>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <SystemClock_Config+0xdc>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	6413      	str	r3, [r2, #64]	; 0x40
 800380c:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <SystemClock_Config+0xdc>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003818:	2300      	movs	r3, #0
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <SystemClock_Config+0xe0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <SystemClock_Config+0xe0>)
 8003822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <SystemClock_Config+0xe0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003834:	2302      	movs	r3, #2
 8003836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003838:	2301      	movs	r3, #1
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800383c:	2310      	movs	r3, #16
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003840:	2302      	movs	r3, #2
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003844:	2300      	movs	r3, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003848:	2308      	movs	r3, #8
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800384c:	23b4      	movs	r3, #180	; 0xb4
 800384e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003850:	2302      	movs	r3, #2
 8003852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003854:	2302      	movs	r3, #2
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003858:	2302      	movs	r3, #2
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	4618      	mov	r0, r3
 8003862:	f005 f8eb 	bl	8008a3c <HAL_RCC_OscConfig>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800386c:	f000 fb9a 	bl	8003fa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003870:	f004 fd4a 	bl	8008308 <HAL_PWREx_EnableOverDrive>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800387a:	f000 fb93 	bl	8003fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800387e:	230f      	movs	r3, #15
 8003880:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003882:	2302      	movs	r3, #2
 8003884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800388a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800388e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003894:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	2105      	movs	r1, #5
 800389c:	4618      	mov	r0, r3
 800389e:	f004 fd83 	bl	80083a8 <HAL_RCC_ClockConfig>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80038a8:	f000 fb7c 	bl	8003fa4 <Error_Handler>
  }
}
 80038ac:	bf00      	nop
 80038ae:	3750      	adds	r7, #80	; 0x50
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000

080038bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80038c2:	463b      	mov	r3, r7
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80038ce:	4b29      	ldr	r3, [pc, #164]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <MX_ADC1_Init+0xbc>)
 80038d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80038e8:	4b22      	ldr	r3, [pc, #136]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <MX_ADC1_Init+0xb8>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <MX_ADC1_Init+0xb8>)
 8003900:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <MX_ADC1_Init+0xb8>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <MX_ADC1_Init+0xb8>)
 800390e:	2202      	movs	r2, #2
 8003910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <MX_ADC1_Init+0xb8>)
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_ADC1_Init+0xb8>)
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003920:	4814      	ldr	r0, [pc, #80]	; (8003974 <MX_ADC1_Init+0xb8>)
 8003922:	f003 f9d5 	bl	8006cd0 <HAL_ADC_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800392c:	f000 fb3a 	bl	8003fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003930:	2300      	movs	r3, #0
 8003932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003934:	2301      	movs	r3, #1
 8003936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003938:	2303      	movs	r3, #3
 800393a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800393c:	463b      	mov	r3, r7
 800393e:	4619      	mov	r1, r3
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <MX_ADC1_Init+0xb8>)
 8003942:	f003 fb19 	bl	8006f78 <HAL_ADC_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800394c:	f000 fb2a 	bl	8003fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003950:	230a      	movs	r3, #10
 8003952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003954:	2302      	movs	r3, #2
 8003956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003958:	463b      	mov	r3, r7
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <MX_ADC1_Init+0xb8>)
 800395e:	f003 fb0b 	bl	8006f78 <HAL_ADC_ConfigChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003968:	f000 fb1c 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20001fe4 	.word	0x20001fe4
 8003978:	40012000 	.word	0x40012000

0800397c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003982:	463b      	mov	r3, r7
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_ADC2_Init+0xb8>)
 8003990:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <MX_ADC2_Init+0xbc>)
 8003992:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <MX_ADC2_Init+0xb8>)
 8003996:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800399a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <MX_ADC2_Init+0xb8>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80039b6:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039ce:	2202      	movs	r2, #2
 80039d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80039e0:	4814      	ldr	r0, [pc, #80]	; (8003a34 <MX_ADC2_Init+0xb8>)
 80039e2:	f003 f975 	bl	8006cd0 <HAL_ADC_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80039ec:	f000 fada 	bl	8003fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039f0:	2301      	movs	r3, #1
 80039f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039f4:	2301      	movs	r3, #1
 80039f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80039f8:	2303      	movs	r3, #3
 80039fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039fc:	463b      	mov	r3, r7
 80039fe:	4619      	mov	r1, r3
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <MX_ADC2_Init+0xb8>)
 8003a02:	f003 fab9 	bl	8006f78 <HAL_ADC_ConfigChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003a0c:	f000 faca 	bl	8003fa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003a10:	230b      	movs	r3, #11
 8003a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003a14:	2302      	movs	r3, #2
 8003a16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_ADC2_Init+0xb8>)
 8003a1e:	f003 faab 	bl	8006f78 <HAL_ADC_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003a28:	f000 fabc 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000202c 	.word	0x2000202c
 8003a38:	40012100 	.word	0x40012100

08003a3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <MX_SPI2_Init+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a88:	220a      	movs	r2, #10
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a8c:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <MX_SPI2_Init+0x64>)
 8003a8e:	f005 fa73 	bl	8008f78 <HAL_SPI_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a98:	f000 fa84 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20002134 	.word	0x20002134
 8003aa4:	40003800 	.word	0x40003800

08003aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abc:	463b      	mov	r3, r7
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003ad8:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ada:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003ade:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aec:	4813      	ldr	r0, [pc, #76]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003aee:	f005 ff1d 	bl	800992c <HAL_TIM_Base_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003af8:	f000 fa54 	bl	8003fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	4619      	mov	r1, r3
 8003b08:	480c      	ldr	r0, [pc, #48]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003b0a:	f006 f8d7 	bl	8009cbc <HAL_TIM_ConfigClockSource>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003b14:	f000 fa46 	bl	8003fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b20:	463b      	mov	r3, r7
 8003b22:	4619      	mov	r1, r3
 8003b24:	4805      	ldr	r0, [pc, #20]	; (8003b3c <MX_TIM2_Init+0x94>)
 8003b26:	f006 fafd 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b30:	f000 fa38 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200021ec 	.word	0x200021ec

08003b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <MX_USART2_UART_Init+0x50>)
 8003b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_USART2_UART_Init+0x4c>)
 8003b78:	f006 fb64 	bl	800a244 <HAL_UART_Init>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b82:	f000 fa0f 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20002234 	.word	0x20002234
 8003b90:	40004400 	.word	0x40004400

08003b94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <MX_USART3_UART_Init+0x50>)
 8003b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bba:	220c      	movs	r2, #12
 8003bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_USART3_UART_Init+0x4c>)
 8003bcc:	f006 fb3a 	bl	800a244 <HAL_UART_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bd6:	f000 f9e5 	bl	8003fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20002278 	.word	0x20002278
 8003be4:	40004800 	.word	0x40004800

08003be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <MX_DMA_Init+0x78>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <MX_DMA_Init+0x78>)
 8003bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b18      	ldr	r3, [pc, #96]	; (8003c60 <MX_DMA_Init+0x78>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	607b      	str	r3, [r7, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <MX_DMA_Init+0x78>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <MX_DMA_Init+0x78>)
 8003c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <MX_DMA_Init+0x78>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	200f      	movs	r0, #15
 8003c2c:	f003 fd2f 	bl	800768e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c30:	200f      	movs	r0, #15
 8003c32:	f003 fd48 	bl	80076c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2038      	movs	r0, #56	; 0x38
 8003c3c:	f003 fd27 	bl	800768e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c40:	2038      	movs	r0, #56	; 0x38
 8003c42:	f003 fd40 	bl	80076c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	203a      	movs	r0, #58	; 0x3a
 8003c4c:	f003 fd1f 	bl	800768e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c50:	203a      	movs	r0, #58	; 0x3a
 8003c52:	f003 fd38 	bl	80076c6 <HAL_NVIC_EnableIRQ>

}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800

08003c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	60da      	str	r2, [r3, #12]
 8003c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a4f      	ldr	r2, [pc, #316]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a48      	ldr	r2, [pc, #288]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a41      	ldr	r2, [pc, #260]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003cd8:	f043 0302 	orr.w	r3, r3, #2
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <MX_GPIO_Init+0x178>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003cea:	2200      	movs	r2, #0
 8003cec:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003cf0:	483b      	ldr	r0, [pc, #236]	; (8003de0 <MX_GPIO_Init+0x17c>)
 8003cf2:	f004 fab1 	bl	8008258 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	483a      	ldr	r0, [pc, #232]	; (8003de4 <MX_GPIO_Init+0x180>)
 8003cfc:	f004 faac 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003d00:	2201      	movs	r2, #1
 8003d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d06:	4836      	ldr	r0, [pc, #216]	; (8003de0 <MX_GPIO_Init+0x17c>)
 8003d08:	f004 faa6 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	21c0      	movs	r1, #192	; 0xc0
 8003d10:	4835      	ldr	r0, [pc, #212]	; (8003de8 <MX_GPIO_Init+0x184>)
 8003d12:	f004 faa1 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	482d      	ldr	r0, [pc, #180]	; (8003de4 <MX_GPIO_Init+0x180>)
 8003d2e:	f004 f8e7 	bl	8007f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8003d32:	f248 4360 	movw	r3, #33888	; 0x8460
 8003d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 0314 	add.w	r3, r7, #20
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4825      	ldr	r0, [pc, #148]	; (8003de0 <MX_GPIO_Init+0x17c>)
 8003d4c:	f004 f8d8 	bl	8007f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4619      	mov	r1, r3
 8003d66:	481e      	ldr	r0, [pc, #120]	; (8003de0 <MX_GPIO_Init+0x17c>)
 8003d68:	f004 f8ca 	bl	8007f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d70:	2301      	movs	r3, #1
 8003d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	4619      	mov	r1, r3
 8003d82:	4818      	ldr	r0, [pc, #96]	; (8003de4 <MX_GPIO_Init+0x180>)
 8003d84:	f004 f8bc 	bl	8007f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d96:	2303      	movs	r3, #3
 8003d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480f      	ldr	r0, [pc, #60]	; (8003de0 <MX_GPIO_Init+0x17c>)
 8003da2:	f004 f8ad 	bl	8007f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	4619      	mov	r1, r3
 8003dbc:	480a      	ldr	r0, [pc, #40]	; (8003de8 <MX_GPIO_Init+0x184>)
 8003dbe:	f004 f89f 	bl	8007f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	2028      	movs	r0, #40	; 0x28
 8003dc8:	f003 fc61 	bl	800768e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003dcc:	2028      	movs	r0, #40	; 0x28
 8003dce:	f003 fc7a 	bl	80076c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dd2:	bf00      	nop
 8003dd4:	3728      	adds	r7, #40	; 0x28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020400 	.word	0x40020400

08003dec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_ADC_ConvCpltCallback+0x34>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d105      	bne.n	8003e08 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_ADC_ConvCpltCallback+0x38>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <HAL_ADC_ConvCpltCallback+0x38>)
 8003e04:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8003e06:	e004      	b.n	8003e12 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20001fe4 	.word	0x20001fe4
 8003e24:	20002320 	.word	0x20002320
 8003e28:	20002328 	.word	0x20002328

08003e2c <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d105      	bne.n	8003e48 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8003e44:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8003e46:	e004      	b.n	8003e52 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8003e48:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	4a06      	ldr	r2, [pc, #24]	; (8003e68 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8003e50:	6013      	str	r3, [r2, #0]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20001fe4 	.word	0x20001fe4
 8003e64:	2000231c 	.word	0x2000231c
 8003e68:	20002324 	.word	0x20002324

08003e6c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_ADC_ErrorCallback+0x94>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d102      	bne.n	8003e82 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e001      	b.n	8003e86 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8003e82:	2302      	movs	r3, #2
 8003e84:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d82c      	bhi.n	8003ee8 <HAL_ADC_ErrorCallback+0x7c>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_ADC_ErrorCallback+0x28>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea9 	.word	0x08003ea9
 8003e98:	08003eb9 	.word	0x08003eb9
 8003e9c:	08003ec9 	.word	0x08003ec9
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ed9 	.word	0x08003ed9
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	461a      	mov	r2, r3
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	4814      	ldr	r0, [pc, #80]	; (8003f04 <HAL_ADC_ErrorCallback+0x98>)
 8003eb2:	f000 fc57 	bl	8004764 <term_print>
		break;
 8003eb6:	e01e      	b.n	8003ef6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	4811      	ldr	r0, [pc, #68]	; (8003f08 <HAL_ADC_ErrorCallback+0x9c>)
 8003ec2:	f000 fc4f 	bl	8004764 <term_print>
		break;
 8003ec6:	e016      	b.n	8003ef6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	480e      	ldr	r0, [pc, #56]	; (8003f0c <HAL_ADC_ErrorCallback+0xa0>)
 8003ed2:	f000 fc47 	bl	8004764 <term_print>
		break;
 8003ed6:	e00e      	b.n	8003ef6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	461a      	mov	r2, r3
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	480b      	ldr	r0, [pc, #44]	; (8003f10 <HAL_ADC_ErrorCallback+0xa4>)
 8003ee2:	f000 fc3f 	bl	8004764 <term_print>
		break;
 8003ee6:	e006      	b.n	8003ef6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	4619      	mov	r1, r3
 8003eee:	4809      	ldr	r0, [pc, #36]	; (8003f14 <HAL_ADC_ErrorCallback+0xa8>)
 8003ef0:	f000 fc38 	bl	8004764 <term_print>
	}
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20001fe4 	.word	0x20001fe4
 8003f04:	0800f710 	.word	0x0800f710
 8003f08:	0800f72c 	.word	0x0800f72c
 8003f0c:	0800f750 	.word	0x0800f750
 8003f10:	0800f770 	.word	0x0800f770
 8003f14:	0800f78c 	.word	0x0800f78c

08003f18 <HAL_UART_RxCpltCallback>:

// UART has received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	if (rx_count >= sizeof(rx_buff)) {
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	2b13      	cmp	r3, #19
 8003f26:	d902      	bls.n	8003f2e <HAL_UART_RxCpltCallback+0x16>
		rx_count = 0;		// wrap back to start
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
	}
	if ( HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8003f2e:	2201      	movs	r2, #1
 8003f30:	4918      	ldr	r1, [pc, #96]	; (8003f94 <HAL_UART_RxCpltCallback+0x7c>)
 8003f32:	4819      	ldr	r0, [pc, #100]	; (8003f98 <HAL_UART_RxCpltCallback+0x80>)
 8003f34:	f006 fa65 	bl	800a402 <HAL_UART_Receive_IT>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d124      	bne.n	8003f88 <HAL_UART_RxCpltCallback+0x70>
		// check for End of input (CR or LF)
		if ( (rx_byte != 0x0A) && (rx_byte !=  0x0D) ) {
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_UART_RxCpltCallback+0x7c>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b0a      	cmp	r3, #10
 8003f44:	d00f      	beq.n	8003f66 <HAL_UART_RxCpltCallback+0x4e>
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_UART_RxCpltCallback+0x7c>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b0d      	cmp	r3, #13
 8003f4c:	d00b      	beq.n	8003f66 <HAL_UART_RxCpltCallback+0x4e>
			rx_buff[rx_count++] = rx_byte;
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	b291      	uxth	r1, r2
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f58:	8011      	strh	r1, [r2, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_UART_RxCpltCallback+0x7c>)
 8003f5e:	7819      	ldrb	r1, [r3, #0]
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_UART_RxCpltCallback+0x84>)
 8003f62:	5499      	strb	r1, [r3, r2]
				rx_cmd_ready = 1;
				rx_buff[rx_count++] = 0;	// end of string
			}
		}
	} // else { rx_error_count++; } // this should never happen
}
 8003f64:	e010      	b.n	8003f88 <HAL_UART_RxCpltCallback+0x70>
			if (rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_UART_RxCpltCallback+0x70>
				rx_cmd_ready = 1;
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_UART_RxCpltCallback+0x88>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
				rx_buff[rx_count++] = 0;	// end of string
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	b291      	uxth	r1, r2
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_UART_RxCpltCallback+0x78>)
 8003f7e:	8011      	strh	r1, [r2, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_UART_RxCpltCallback+0x84>)
 8003f84:	2100      	movs	r1, #0
 8003f86:	5499      	strb	r1, [r3, r2]
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200022fc 	.word	0x200022fc
 8003f94:	200022fe 	.word	0x200022fe
 8003f98:	20002234 	.word	0x20002234
 8003f9c:	20002300 	.word	0x20002300
 8003fa0:	20002314 	.word	0x20002314

08003fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <Error_Handler+0x10>)
 8003faa:	f007 ffeb 	bl	800bf84 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fae:	b672      	cpsid	i
}
 8003fb0:	bf00      	nop
    __disable_irq();
    while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <Error_Handler+0xe>
 8003fb4:	0800f7ac 	.word	0x0800f7ac

08003fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	4b10      	ldr	r3, [pc, #64]	; (8004004 <HAL_MspInit+0x4c>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <HAL_MspInit+0x4c>)
 8003fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <HAL_MspInit+0x4c>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_MspInit+0x4c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <HAL_MspInit+0x4c>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_MspInit+0x4c>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ff6:	2007      	movs	r0, #7
 8003ff8:	f003 fb3e 	bl	8007678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	; 0x38
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a79      	ldr	r2, [pc, #484]	; (800420c <HAL_ADC_MspInit+0x204>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d173      	bne.n	8004112 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
 800402e:	4b78      	ldr	r3, [pc, #480]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004038:	6453      	str	r3, [r2, #68]	; 0x44
 800403a:	4b75      	ldr	r3, [pc, #468]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	4b71      	ldr	r3, [pc, #452]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a70      	ldr	r2, [pc, #448]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b6e      	ldr	r3, [pc, #440]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a69      	ldr	r2, [pc, #420]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800407e:	2301      	movs	r3, #1
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004082:	2303      	movs	r3, #3
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408e:	4619      	mov	r1, r3
 8004090:	4860      	ldr	r0, [pc, #384]	; (8004214 <HAL_ADC_MspInit+0x20c>)
 8004092:	f003 ff35 	bl	8007f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004096:	2301      	movs	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800409a:	2303      	movs	r3, #3
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a6:	4619      	mov	r1, r3
 80040a8:	485b      	ldr	r0, [pc, #364]	; (8004218 <HAL_ADC_MspInit+0x210>)
 80040aa:	f003 ff29 	bl	8007f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80040ae:	4b5b      	ldr	r3, [pc, #364]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040b0:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_ADC_MspInit+0x218>)
 80040b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040ba:	4b58      	ldr	r3, [pc, #352]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040c0:	4b56      	ldr	r3, [pc, #344]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040c6:	4b55      	ldr	r3, [pc, #340]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040ce:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040d6:	4b51      	ldr	r3, [pc, #324]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80040de:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040e6:	4b4d      	ldr	r3, [pc, #308]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ee:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040f4:	4849      	ldr	r0, [pc, #292]	; (800421c <HAL_ADC_MspInit+0x214>)
 80040f6:	f003 fb01 	bl	80076fc <HAL_DMA_Init>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004100:	f7ff ff50 	bl	8003fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a45      	ldr	r2, [pc, #276]	; (800421c <HAL_ADC_MspInit+0x214>)
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
 800410a:	4a44      	ldr	r2, [pc, #272]	; (800421c <HAL_ADC_MspInit+0x214>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004110:	e078      	b.n	8004204 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a43      	ldr	r2, [pc, #268]	; (8004224 <HAL_ADC_MspInit+0x21c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d173      	bne.n	8004204 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800412a:	6453      	str	r3, [r2, #68]	; 0x44
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	4b34      	ldr	r3, [pc, #208]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	4a33      	ldr	r2, [pc, #204]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6313      	str	r3, [r2, #48]	; 0x30
 8004148:	4b31      	ldr	r3, [pc, #196]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <HAL_ADC_MspInit+0x208>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6313      	str	r3, [r2, #48]	; 0x30
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_ADC_MspInit+0x208>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004170:	2302      	movs	r3, #2
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004174:	2303      	movs	r3, #3
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004180:	4619      	mov	r1, r3
 8004182:	4824      	ldr	r0, [pc, #144]	; (8004214 <HAL_ADC_MspInit+0x20c>)
 8004184:	f003 febc 	bl	8007f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004188:	2302      	movs	r3, #2
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800418c:	2303      	movs	r3, #3
 800418e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004198:	4619      	mov	r1, r3
 800419a:	481f      	ldr	r0, [pc, #124]	; (8004218 <HAL_ADC_MspInit+0x210>)
 800419c:	f003 feb0 	bl	8007f00 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80041a0:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_ADC_MspInit+0x224>)
 80041a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b4:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80041e0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80041e8:	480f      	ldr	r0, [pc, #60]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041ea:	f003 fa87 	bl	80076fc <HAL_DMA_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 80041f4:	f7ff fed6 	bl	8003fa4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <HAL_ADC_MspInit+0x220>)
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_ADC_MspInit+0x220>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004204:	bf00      	nop
 8004206:	3738      	adds	r7, #56	; 0x38
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40012000 	.word	0x40012000
 8004210:	40023800 	.word	0x40023800
 8004214:	40020800 	.word	0x40020800
 8004218:	40020000 	.word	0x40020000
 800421c:	20002074 	.word	0x20002074
 8004220:	40026410 	.word	0x40026410
 8004224:	40012100 	.word	0x40012100
 8004228:	200020d4 	.word	0x200020d4
 800422c:	40026440 	.word	0x40026440

08004230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a43      	ldr	r2, [pc, #268]	; (800435c <HAL_SPI_MspInit+0x12c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d17f      	bne.n	8004352 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	4a41      	ldr	r2, [pc, #260]	; (8004360 <HAL_SPI_MspInit+0x130>)
 800425c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_SPI_MspInit+0x130>)
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6313      	str	r3, [r2, #48]	; 0x30
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_SPI_MspInit+0x130>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80042a6:	230c      	movs	r3, #12
 80042a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b2:	2303      	movs	r3, #3
 80042b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042b6:	2305      	movs	r3, #5
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	4619      	mov	r1, r3
 80042c0:	4828      	ldr	r0, [pc, #160]	; (8004364 <HAL_SPI_MspInit+0x134>)
 80042c2:	f003 fe1d 	bl	8007f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 80042c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d4:	2303      	movs	r3, #3
 80042d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042d8:	2305      	movs	r3, #5
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	4619      	mov	r1, r3
 80042e2:	4821      	ldr	r0, [pc, #132]	; (8004368 <HAL_SPI_MspInit+0x138>)
 80042e4:	f003 fe0c 	bl	8007f00 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80042e8:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_SPI_MspInit+0x13c>)
 80042ea:	4a21      	ldr	r2, [pc, #132]	; (8004370 <HAL_SPI_MspInit+0x140>)
 80042ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80042ee:	4b1f      	ldr	r3, [pc, #124]	; (800436c <HAL_SPI_MspInit+0x13c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_SPI_MspInit+0x13c>)
 80042f6:	2240      	movs	r2, #64	; 0x40
 80042f8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <HAL_SPI_MspInit+0x13c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_SPI_MspInit+0x13c>)
 8004302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004306:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_SPI_MspInit+0x13c>)
 800430a:	2200      	movs	r2, #0
 800430c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_SPI_MspInit+0x13c>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <HAL_SPI_MspInit+0x13c>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_SPI_MspInit+0x13c>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_SPI_MspInit+0x13c>)
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004326:	4811      	ldr	r0, [pc, #68]	; (800436c <HAL_SPI_MspInit+0x13c>)
 8004328:	f003 f9e8 	bl	80076fc <HAL_DMA_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004332:	f7ff fe37 	bl	8003fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_SPI_MspInit+0x13c>)
 800433a:	649a      	str	r2, [r3, #72]	; 0x48
 800433c:	4a0b      	ldr	r2, [pc, #44]	; (800436c <HAL_SPI_MspInit+0x13c>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	2024      	movs	r0, #36	; 0x24
 8004348:	f003 f9a1 	bl	800768e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800434c:	2024      	movs	r0, #36	; 0x24
 800434e:	f003 f9ba 	bl	80076c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004352:	bf00      	nop
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40003800 	.word	0x40003800
 8004360:	40023800 	.word	0x40023800
 8004364:	40020800 	.word	0x40020800
 8004368:	40020400 	.word	0x40020400
 800436c:	2000218c 	.word	0x2000218c
 8004370:	40026070 	.word	0x40026070

08004374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004384:	d115      	bne.n	80043b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_TIM_Base_MspInit+0x48>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	201c      	movs	r0, #28
 80043a8:	f003 f971 	bl	800768e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80043ac:	201c      	movs	r0, #28
 80043ae:	f003 f98a 	bl	80076c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08c      	sub	sp, #48	; 0x30
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <HAL_UART_MspInit+0xf8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d134      	bne.n	800444c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_UART_MspInit+0xfc>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_UART_MspInit+0xfc>)
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_UART_MspInit+0xfc>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	4b2e      	ldr	r3, [pc, #184]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800441a:	230c      	movs	r3, #12
 800441c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800442a:	2307      	movs	r3, #7
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442e:	f107 031c 	add.w	r3, r7, #28
 8004432:	4619      	mov	r1, r3
 8004434:	4822      	ldr	r0, [pc, #136]	; (80044c0 <HAL_UART_MspInit+0x100>)
 8004436:	f003 fd63 	bl	8007f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	2100      	movs	r1, #0
 800443e:	2026      	movs	r0, #38	; 0x26
 8004440:	f003 f925 	bl	800768e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004444:	2026      	movs	r0, #38	; 0x26
 8004446:	f003 f93e 	bl	80076c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800444a:	e031      	b.n	80044b0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_UART_MspInit+0x104>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d12c      	bne.n	80044b0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_UART_MspInit+0xfc>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6413      	str	r3, [r2, #64]	; 0x40
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	4a10      	ldr	r2, [pc, #64]	; (80044bc <HAL_UART_MspInit+0xfc>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6313      	str	r3, [r2, #48]	; 0x30
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <HAL_UART_MspInit+0xfc>)
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800448e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004494:	2302      	movs	r3, #2
 8004496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800449c:	2303      	movs	r3, #3
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044a0:	2307      	movs	r3, #7
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a4:	f107 031c 	add.w	r3, r7, #28
 80044a8:	4619      	mov	r1, r3
 80044aa:	4807      	ldr	r0, [pc, #28]	; (80044c8 <HAL_UART_MspInit+0x108>)
 80044ac:	f003 fd28 	bl	8007f00 <HAL_GPIO_Init>
}
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	; 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40004400 	.word	0x40004400
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40020000 	.word	0x40020000
 80044c4:	40004800 	.word	0x40004800
 80044c8:	40020800 	.word	0x40020800

080044cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d0:	e7fe      	b.n	80044d0 <NMI_Handler+0x4>

080044d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d2:	b480      	push	{r7}
 80044d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d6:	e7fe      	b.n	80044d6 <HardFault_Handler+0x4>

080044d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044dc:	e7fe      	b.n	80044dc <MemManage_Handler+0x4>

080044de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e2:	e7fe      	b.n	80044e2 <BusFault_Handler+0x4>

080044e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <UsageFault_Handler+0x4>

080044ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004518:	f002 fb96 	bl	8006c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}

08004520 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004524:	4802      	ldr	r0, [pc, #8]	; (8004530 <DMA1_Stream4_IRQHandler+0x10>)
 8004526:	f003 fa81 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000218c 	.word	0x2000218c

08004534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004538:	4804      	ldr	r0, [pc, #16]	; (800454c <TIM2_IRQHandler+0x18>)
 800453a:	f005 fab7 	bl	8009aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	4803      	ldr	r0, [pc, #12]	; (8004550 <TIM2_IRQHandler+0x1c>)
 8004544:	f003 fea1 	bl	800828a <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200021ec 	.word	0x200021ec
 8004550:	40020000 	.word	0x40020000

08004554 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004558:	4802      	ldr	r0, [pc, #8]	; (8004564 <SPI2_IRQHandler+0x10>)
 800455a:	f004 ff89 	bl	8009470 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20002134 	.word	0x20002134

08004568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800456c:	4802      	ldr	r0, [pc, #8]	; (8004578 <USART2_IRQHandler+0x10>)
 800456e:	f005 ff79 	bl	800a464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20002234 	.word	0x20002234

0800457c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004580:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004584:	f003 fe9c 	bl	80082c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}

0800458c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <DMA2_Stream0_IRQHandler+0x10>)
 8004592:	f003 fa4b 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20002074 	.word	0x20002074

080045a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <DMA2_Stream2_IRQHandler+0x10>)
 80045a6:	f003 fa41 	bl	8007a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200020d4 	.word	0x200020d4

080045b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return 1;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <_kill>:

int _kill(int pid, int sig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045ce:	f007 fd3d 	bl	800c04c <__errno>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2216      	movs	r2, #22
 80045d6:	601a      	str	r2, [r3, #0]
  return -1;
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_exit>:

void _exit (int status)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ffe7 	bl	80045c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045f6:	e7fe      	b.n	80045f6 <_exit+0x12>

080045f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e00a      	b.n	8004620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800460a:	f3af 8000 	nop.w
 800460e:	4601      	mov	r1, r0
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	60ba      	str	r2, [r7, #8]
 8004616:	b2ca      	uxtb	r2, r1
 8004618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	3301      	adds	r3, #1
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	429a      	cmp	r2, r3
 8004626:	dbf0      	blt.n	800460a <_read+0x12>
  }

  return len;
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e009      	b.n	8004658 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	60ba      	str	r2, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	3301      	adds	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	dbf1      	blt.n	8004644 <_write+0x12>
  }
  return len;
 8004660:	687b      	ldr	r3, [r7, #4]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_close>:

int _close(int file)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004692:	605a      	str	r2, [r3, #4]
  return 0;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <_isatty>:

int _isatty(int file)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046aa:	2301      	movs	r3, #1
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <_sbrk+0x5c>)
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <_sbrk+0x60>)
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <_sbrk+0x64>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <_sbrk+0x64>)
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <_sbrk+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <_sbrk+0x64>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d207      	bcs.n	8004714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004704:	f007 fca2 	bl	800c04c <__errno>
 8004708:	4603      	mov	r3, r0
 800470a:	220c      	movs	r2, #12
 800470c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004712:	e009      	b.n	8004728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	4a05      	ldr	r2, [pc, #20]	; (8004738 <_sbrk+0x64>)
 8004724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20020000 	.word	0x20020000
 8004734:	00000400 	.word	0x00000400
 8004738:	20007f3c 	.word	0x20007f3c
 800473c:	20009120 	.word	0x20009120

08004740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <SystemInit+0x20>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	4a05      	ldr	r2, [pc, #20]	; (8004760 <SystemInit+0x20>)
 800474c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004764:	b40f      	push	{r0, r1, r2, r3}
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	2180      	movs	r1, #128	; 0x80
 8004778:	480a      	ldr	r0, [pc, #40]	; (80047a4 <term_print+0x40>)
 800477a:	f007 fbf5 	bl	800bf68 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 800477e:	4809      	ldr	r0, [pc, #36]	; (80047a4 <term_print+0x40>)
 8004780:	f7fb fd96 	bl	80002b0 <strlen>
 8004784:	4603      	mov	r3, r0
 8004786:	b29a      	uxth	r2, r3
 8004788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800478c:	4905      	ldr	r1, [pc, #20]	; (80047a4 <term_print+0x40>)
 800478e:	4806      	ldr	r0, [pc, #24]	; (80047a8 <term_print+0x44>)
 8004790:	f005 fda5 	bl	800a2de <HAL_UART_Transmit>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	20007f40 	.word	0x20007f40
 80047a8:	20002234 	.word	0x20002234

080047ac <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d838      	bhi.n	8004836 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	4619      	mov	r1, r3
 80047c8:	481d      	ldr	r0, [pc, #116]	; (8004840 <term_show_buffer+0x94>)
 80047ca:	f7ff ffcb 	bl	8004764 <term_print>
	term_print("%3d: ", 0);
 80047ce:	2100      	movs	r1, #0
 80047d0:	481c      	ldr	r0, [pc, #112]	; (8004844 <term_show_buffer+0x98>)
 80047d2:	f7ff ffc7 	bl	8004764 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e020      	b.n	800481e <term_show_buffer+0x72>
		if (count >= 20) {
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b13      	cmp	r3, #19
 80047e0:	dd06      	ble.n	80047f0 <term_show_buffer+0x44>
			count =0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 80047e6:	8a7b      	ldrh	r3, [r7, #18]
 80047e8:	4619      	mov	r1, r3
 80047ea:	4817      	ldr	r0, [pc, #92]	; (8004848 <term_show_buffer+0x9c>)
 80047ec:	f7ff ffba 	bl	8004764 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	4916      	ldr	r1, [pc, #88]	; (800484c <term_show_buffer+0xa0>)
 80047f4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80047f8:	fb03 f202 	mul.w	r2, r3, r2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004804:	4619      	mov	r1, r3
 8004806:	4812      	ldr	r0, [pc, #72]	; (8004850 <term_show_buffer+0xa4>)
 8004808:	f7ff ffac 	bl	8004764 <term_print>
		count++; address++;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	8a7b      	ldrh	r3, [r7, #18]
 8004814:	3301      	adds	r3, #1
 8004816:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004824:	d3da      	bcc.n	80047dc <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004826:	480b      	ldr	r0, [pc, #44]	; (8004854 <term_show_buffer+0xa8>)
 8004828:	f7ff ff9c 	bl	8004764 <term_print>
	term_show_channel(bufnum);
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f886 	bl	8004940 <term_show_channel>
 8004834:	e000      	b.n	8004838 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004836:	bf00      	nop
}
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	0800f7e0 	.word	0x0800f7e0
 8004844:	0800f7ec 	.word	0x0800f7ec
 8004848:	0800f7f4 	.word	0x0800f7f4
 800484c:	200071ec 	.word	0x200071ec
 8004850:	0800f7fc 	.word	0x0800f7fc
 8004854:	0800f804 	.word	0x0800f804

08004858 <term_show_measurements>:

void term_show_measurements() {
 8004858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485c:	b08e      	sub	sp, #56	; 0x38
 800485e:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <term_show_measurements+0xc8>)
 8004862:	7b1b      	ldrb	r3, [r3, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d008      	beq.n	800487a <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004868:	f7fc fffc 	bl	8001864 <calc_measurements>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004872:	482c      	ldr	r0, [pc, #176]	; (8004924 <term_show_measurements+0xcc>)
 8004874:	f7ff ff76 	bl	8004764 <term_print>
			return;
 8004878:	e047      	b.n	800490a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 800487a:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <term_show_measurements+0xd0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fe82 	bl	8000588 <__aeabi_f2d>
 8004884:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004888:	4b28      	ldr	r3, [pc, #160]	; (800492c <term_show_measurements+0xd4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe7b 	bl	8000588 <__aeabi_f2d>
 8004892:	4604      	mov	r4, r0
 8004894:	460d      	mov	r5, r1
 8004896:	4b26      	ldr	r3, [pc, #152]	; (8004930 <term_show_measurements+0xd8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fe74 	bl	8000588 <__aeabi_f2d>
 80048a0:	4680      	mov	r8, r0
 80048a2:	4689      	mov	r9, r1
 80048a4:	4b23      	ldr	r3, [pc, #140]	; (8004934 <term_show_measurements+0xdc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fb fe6d 	bl	8000588 <__aeabi_f2d>
 80048ae:	4682      	mov	sl, r0
 80048b0:	468b      	mov	fp, r1
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <term_show_measurements+0xe0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fe66 	bl	8000588 <__aeabi_f2d>
 80048bc:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <term_show_measurements+0xe0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fe5f 	bl	8000588 <__aeabi_f2d>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	ec43 2b10 	vmov	d0, r2, r3
 80048d2:	f00a f8f1 	bl	800eab8 <acos>
 80048d6:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 80048da:	a30f      	add	r3, pc, #60	; (adr r3, 8004918 <term_show_measurements+0xc0>)
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f7fb feaa 	bl	8000638 <__aeabi_dmul>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048ec:	ed97 7b00 	vldr	d7, [r7]
 80048f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80048f4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80048f8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048fc:	e9cd 4500 	strd	r4, r5, [sp]
 8004900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004904:	480d      	ldr	r0, [pc, #52]	; (800493c <term_show_measurements+0xe4>)
 8004906:	f7ff ff2d 	bl	8004764 <term_print>
}
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	f3af 8000 	nop.w
 8004918:	1af05a77 	.word	0x1af05a77
 800491c:	404ca5dc 	.word	0x404ca5dc
 8004920:	2000023c 	.word	0x2000023c
 8004924:	0800f808 	.word	0x0800f808
 8004928:	20007f0c 	.word	0x20007f0c
 800492c:	20007f10 	.word	0x20007f10
 8004930:	20007f14 	.word	0x20007f14
 8004934:	20007f18 	.word	0x20007f18
 8004938:	20007f1c 	.word	0x20007f1c
 800493c:	0800f81c 	.word	0x0800f81c

08004940 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	2b03      	cmp	r3, #3
 800494e:	f200 808a 	bhi.w	8004a66 <term_show_channel+0x126>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8004952:	79fa      	ldrb	r2, [r7, #7]
 8004954:	4946      	ldr	r1, [pc, #280]	; (8004a70 <term_show_channel+0x130>)
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	330c      	adds	r3, #12
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d00c      	beq.n	8004982 <term_show_channel+0x42>
		if (calc_channel(bufnum) != 0) {
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fd fa62 	bl	8001e34 <calc_channel>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <term_show_channel+0x42>
			term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	4619      	mov	r1, r3
 800497a:	483e      	ldr	r0, [pc, #248]	; (8004a74 <term_show_channel+0x134>)
 800497c:	f7ff fef2 	bl	8004764 <term_print>
			return; } ;
 8004980:	e072      	b.n	8004a68 <term_show_channel+0x128>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004982:	79fa      	ldrb	r2, [r7, #7]
 8004984:	493a      	ldr	r1, [pc, #232]	; (8004a70 <term_show_channel+0x130>)
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	3302      	adds	r3, #2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	79fa      	ldrb	r2, [r7, #7]
 8004998:	4935      	ldr	r1, [pc, #212]	; (8004a70 <term_show_channel+0x130>)
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	1ac3      	subs	r3, r0, r3
 80049a8:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4832      	ldr	r0, [pc, #200]	; (8004a78 <term_show_channel+0x138>)
 80049b0:	f7ff fed8 	bl	8004764 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 80049b4:	79fa      	ldrb	r2, [r7, #7]
 80049b6:	492e      	ldr	r1, [pc, #184]	; (8004a70 <term_show_channel+0x130>)
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	3310      	adds	r3, #16
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fb73 	bl	80020b4 <calc_adc_raw_to_mv_int>
 80049ce:	4604      	mov	r4, r0
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	b21b      	sxth	r3, r3
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd fb6d 	bl	80020b4 <calc_adc_raw_to_mv_int>
 80049da:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	0fda      	lsrs	r2, r3, #31
 80049e0:	4413      	add	r3, r2
 80049e2:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 80049e4:	b21b      	sxth	r3, r3
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fb64 	bl	80020b4 <calc_adc_raw_to_mv_int>
 80049ec:	4603      	mov	r3, r0
 80049ee:	462a      	mov	r2, r5
 80049f0:	4621      	mov	r1, r4
 80049f2:	4822      	ldr	r0, [pc, #136]	; (8004a7c <term_show_channel+0x13c>)
 80049f4:	f7ff feb6 	bl	8004764 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 80049f8:	79fa      	ldrb	r2, [r7, #7]
 80049fa:	491d      	ldr	r1, [pc, #116]	; (8004a70 <term_show_channel+0x130>)
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b21b      	sxth	r3, r3
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd fb52 	bl	80020b4 <calc_adc_raw_to_mv_int>
 8004a10:	4604      	mov	r4, r0
 8004a12:	79fa      	ldrb	r2, [r7, #7]
 8004a14:	4916      	ldr	r1, [pc, #88]	; (8004a70 <term_show_channel+0x130>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	3302      	adds	r3, #2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fd fb44 	bl	80020b4 <calc_adc_raw_to_mv_int>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4621      	mov	r1, r4
 8004a32:	4813      	ldr	r0, [pc, #76]	; (8004a80 <term_show_channel+0x140>)
 8004a34:	f7ff fe96 	bl	8004764 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004a38:	79fa      	ldrb	r2, [r7, #7]
 8004a3a:	490d      	ldr	r1, [pc, #52]	; (8004a70 <term_show_channel+0x130>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	3304      	adds	r3, #4
 8004a48:	6819      	ldr	r1, [r3, #0]
 8004a4a:	79fa      	ldrb	r2, [r7, #7]
 8004a4c:	4808      	ldr	r0, [pc, #32]	; (8004a70 <term_show_channel+0x130>)
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4403      	add	r3, r0
 8004a58:	3308      	adds	r3, #8
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4809      	ldr	r0, [pc, #36]	; (8004a84 <term_show_channel+0x144>)
 8004a60:	f7ff fe80 	bl	8004764 <term_print>
 8004a64:	e000      	b.n	8004a68 <term_show_channel+0x128>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004a66:	bf00      	nop
}
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	2000023c 	.word	0x2000023c
 8004a74:	0800f84c 	.word	0x0800f84c
 8004a78:	0800f86c 	.word	0x0800f86c
 8004a7c:	0800f888 	.word	0x0800f888
 8004a80:	0800f8ac 	.word	0x0800f8ac
 8004a84:	0800f8c4 	.word	0x0800f8c4

08004a88 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d821      	bhi.n	8004adc <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4811      	ldr	r0, [pc, #68]	; (8004ae4 <term_csv_buffer+0x5c>)
 8004a9e:	f7ff fe61 	bl	8004764 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e011      	b.n	8004acc <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <term_csv_buffer+0x60>)
 8004aac:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004ab0:	fb03 f202 	mul.w	r2, r3, r2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004abc:	461a      	mov	r2, r3
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	480a      	ldr	r0, [pc, #40]	; (8004aec <term_csv_buffer+0x64>)
 8004ac2:	f7ff fe4f 	bl	8004764 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004ad2:	d3e9      	bcc.n	8004aa8 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004ad4:	4806      	ldr	r0, [pc, #24]	; (8004af0 <term_csv_buffer+0x68>)
 8004ad6:	f7ff fe45 	bl	8004764 <term_print>
 8004ada:	e000      	b.n	8004ade <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004adc:	bf00      	nop
}
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	0800f7e0 	.word	0x0800f7e0
 8004ae8:	200057ac 	.word	0x200057ac
 8004aec:	0800f8e4 	.word	0x0800f8e4
 8004af0:	0800f8ec 	.word	0x0800f8ec

08004af4 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 8004af8:	2180      	movs	r1, #128	; 0x80
 8004afa:	480f      	ldr	r0, [pc, #60]	; (8004b38 <Displ_Select+0x44>)
 8004afc:	f003 fb94 	bl	8008228 <HAL_GPIO_ReadPin>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d015      	beq.n	8004b32 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 8004b06:	2201      	movs	r2, #1
 8004b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b0c:	480b      	ldr	r0, [pc, #44]	; (8004b3c <Displ_Select+0x48>)
 8004b0e:	f003 fba3 	bl	8008258 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <Displ_Select+0x4c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	490a      	ldr	r1, [pc, #40]	; (8004b40 <Displ_Select+0x4c>)
 8004b18:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <Displ_Select+0x4c>)
 8004b22:	4a07      	ldr	r2, [pc, #28]	; (8004b40 <Displ_Select+0x4c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	4802      	ldr	r0, [pc, #8]	; (8004b38 <Displ_Select+0x44>)
 8004b2e:	f003 fb93 	bl	8008258 <HAL_GPIO_WritePin>
		}
	}
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40020800 	.word	0x40020800
 8004b3c:	40020000 	.word	0x40020000
 8004b40:	40003800 	.word	0x40003800

08004b44 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6039      	str	r1, [r7, #0]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4603      	mov	r3, r0
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	460b      	mov	r3, r1
 8004b56:	80bb      	strh	r3, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8004b5c:	bf00      	nop
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <Displ_Transmit+0xa4>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0fa      	beq.n	8004b5e <Displ_Transmit+0x1a>

	Displ_Select();
 8004b68:	f7ff ffc4 	bl	8004af4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	481e      	ldr	r0, [pc, #120]	; (8004bec <Displ_Transmit+0xa8>)
 8004b74:	f003 fb70 	bl	8008258 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8004b78:	79bb      	ldrb	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8004b7e:	88bb      	ldrh	r3, [r7, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	4413      	add	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e00b      	b.n	8004ba4 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	ba5b      	rev16	r3, r3
 8004b96:	60bb      	str	r3, [r7, #8]
  return result;
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3ef      	bcc.n	8004b8c <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8004bac:	88bb      	ldrh	r3, [r7, #4]
 8004bae:	2b13      	cmp	r3, #19
 8004bb0:	d80d      	bhi.n	8004bce <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <Displ_Transmit+0xa4>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8004bb8:	88ba      	ldrh	r2, [r7, #4]
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	480b      	ldr	r0, [pc, #44]	; (8004bf0 <Displ_Transmit+0xac>)
 8004bc2:	f004 fa62 	bl	800908a <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <Displ_Transmit+0xa4>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8004bcc:	e008      	b.n	8004be0 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <Displ_Transmit+0xa4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8004bd4:	88bb      	ldrh	r3, [r7, #4]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <Displ_Transmit+0xac>)
 8004bdc:	f004 fb92 	bl	8009304 <HAL_SPI_Transmit_DMA>
	}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000034 	.word	0x20000034
 8004bec:	40020000 	.word	0x40020000
 8004bf0:	20002134 	.word	0x20002134

08004bf4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 8004bfe:	1df9      	adds	r1, r7, #7
 8004c00:	2300      	movs	r3, #0
 8004c02:	2201      	movs	r2, #1
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7ff ff9d 	bl	8004b44 <Displ_Transmit>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f7ff ff88 	bl	8004b44 <Displ_Transmit>
 8004c34:	e000      	b.n	8004c38 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 8004c36:	bf00      	nop
}
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
	Displ_Select();
 8004c44:	f7ff ff56 	bl	8004af4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2140      	movs	r1, #64	; 0x40
 8004c4c:	4819      	ldr	r0, [pc, #100]	; (8004cb4 <ILI9XXX_Init+0x74>)
 8004c4e:	f003 fb03 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f002 f818 	bl	8006c88 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8004c58:	2201      	movs	r2, #1
 8004c5a:	2140      	movs	r1, #64	; 0x40
 8004c5c:	4815      	ldr	r0, [pc, #84]	; (8004cb4 <ILI9XXX_Init+0x74>)
 8004c5e:	f003 fafb 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8004c62:	20a5      	movs	r0, #165	; 0xa5
 8004c64:	f002 f810 	bl	8006c88 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8004c68:	203a      	movs	r0, #58	; 0x3a
 8004c6a:	f7ff ffc3 	bl	8004bf4 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2101      	movs	r1, #1
 8004c72:	4811      	ldr	r0, [pc, #68]	; (8004cb8 <ILI9XXX_Init+0x78>)
 8004c74:	f7ff ffcd 	bl	8004c12 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c78:	20b0      	movs	r0, #176	; 0xb0
 8004c7a:	f7ff ffbb 	bl	8004bf4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2101      	movs	r1, #1
 8004c82:	480e      	ldr	r0, [pc, #56]	; (8004cbc <ILI9XXX_Init+0x7c>)
 8004c84:	f7ff ffc5 	bl	8004c12 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8004c88:	20b0      	movs	r0, #176	; 0xb0
 8004c8a:	f7ff ffb3 	bl	8004bf4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2101      	movs	r1, #1
 8004c92:	480a      	ldr	r0, [pc, #40]	; (8004cbc <ILI9XXX_Init+0x7c>)
 8004c94:	f7ff ffbd 	bl	8004c12 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8004c98:	2011      	movs	r0, #17
 8004c9a:	f7ff ffab 	bl	8004bf4 <Displ_WriteCommand>
	HAL_Delay(120);
 8004c9e:	2078      	movs	r0, #120	; 0x78
 8004ca0:	f001 fff2 	bl	8006c88 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8004ca4:	2029      	movs	r0, #41	; 0x29
 8004ca6:	f7ff ffa5 	bl	8004bf4 <Displ_WriteCommand>
	HAL_Delay(5);
 8004caa:	2005      	movs	r0, #5
 8004cac:	f001 ffec 	bl	8006c88 <HAL_Delay>

}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40020400 	.word	0x40020400
 8004cb8:	0800f8f4 	.word	0x0800f8f4
 8004cbc:	0800f8f8 	.word	0x0800f8f8

08004cc0 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	80fb      	strh	r3, [r7, #6]
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	80bb      	strh	r3, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	807b      	strh	r3, [r7, #2]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8004cde:	887b      	ldrh	r3, [r7, #2]
 8004ce0:	061a      	lsls	r2, r3, #24
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cea:	431a      	orrs	r2, r3
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	0a12      	lsrs	r2, r2, #8
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <Displ_SetAddressWindow+0x90>)
 8004cfe:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8004d00:	202a      	movs	r0, #42	; 0x2a
 8004d02:	f7ff ff77 	bl	8004bf4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2104      	movs	r1, #4
 8004d0a:	4811      	ldr	r0, [pc, #68]	; (8004d50 <Displ_SetAddressWindow+0x90>)
 8004d0c:	f7ff ff81 	bl	8004c12 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8004d10:	883b      	ldrh	r3, [r7, #0]
 8004d12:	061a      	lsls	r2, r3, #24
 8004d14:	883b      	ldrh	r3, [r7, #0]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	88ba      	ldrh	r2, [r7, #4]
 8004d28:	0a12      	lsrs	r2, r2, #8
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <Displ_SetAddressWindow+0x90>)
 8004d30:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8004d32:	202b      	movs	r0, #43	; 0x2b
 8004d34:	f7ff ff5e 	bl	8004bf4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	4804      	ldr	r0, [pc, #16]	; (8004d50 <Displ_SetAddressWindow+0x90>)
 8004d3e:	f7ff ff68 	bl	8004c12 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8004d42:	202c      	movs	r0, #44	; 0x2c
 8004d44:	f7ff ff56 	bl	8004bf4 <Displ_WriteCommand>
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd90      	pop	{r4, r7, pc}
 8004d50:	20008fc8 	.word	0x20008fc8

08004d54 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2180      	movs	r1, #128	; 0x80
 8004d62:	4809      	ldr	r0, [pc, #36]	; (8004d88 <Displ_Init+0x34>)
 8004d64:	f003 fa78 	bl	8008258 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d6e:	4807      	ldr	r0, [pc, #28]	; (8004d8c <Displ_Init+0x38>)
 8004d70:	f003 fa72 	bl	8008258 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8004d74:	f7ff ff64 	bl	8004c40 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f808 	bl	8004d90 <Displ_Orientation>
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40020800 	.word	0x40020800
 8004d8c:	40020000 	.word	0x40020000

08004d90 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d837      	bhi.n	8004e10 <Displ_Orientation+0x80>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <Displ_Orientation+0x18>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dcf 	.word	0x08004dcf
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004dfb 	.word	0x08004dfb
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <Displ_Orientation+0xa0>)
 8004dba:	2288      	movs	r2, #136	; 0x88
 8004dbc:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <Displ_Orientation+0xa4>)
 8004dc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004dc4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <Displ_Orientation+0xa8>)
 8004dc8:	22f0      	movs	r2, #240	; 0xf0
 8004dca:	801a      	strh	r2, [r3, #0]
			break;
 8004dcc:	e020      	b.n	8004e10 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <Displ_Orientation+0xa0>)
 8004dd0:	22e8      	movs	r2, #232	; 0xe8
 8004dd2:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004dd4:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <Displ_Orientation+0xa4>)
 8004dd6:	22f0      	movs	r2, #240	; 0xf0
 8004dd8:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <Displ_Orientation+0xa8>)
 8004ddc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004de0:	801a      	strh	r2, [r3, #0]
			break;
 8004de2:	e015      	b.n	8004e10 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <Displ_Orientation+0xa0>)
 8004de6:	2248      	movs	r2, #72	; 0x48
 8004de8:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <Displ_Orientation+0xa4>)
 8004dec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004df0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <Displ_Orientation+0xa8>)
 8004df4:	22f0      	movs	r2, #240	; 0xf0
 8004df6:	801a      	strh	r2, [r3, #0]
			break;
 8004df8:	e00a      	b.n	8004e10 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <Displ_Orientation+0xa0>)
 8004dfc:	2228      	movs	r2, #40	; 0x28
 8004dfe:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <Displ_Orientation+0xa4>)
 8004e02:	22f0      	movs	r2, #240	; 0xf0
 8004e04:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8004e06:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <Displ_Orientation+0xa8>)
 8004e08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e0c:	801a      	strh	r2, [r3, #0]
			break;
 8004e0e:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8004e10:	2036      	movs	r0, #54	; 0x36
 8004e12:	f7ff feef 	bl	8004bf4 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4805      	ldr	r0, [pc, #20]	; (8004e30 <Displ_Orientation+0xa0>)
 8004e1c:	f7ff fef9 	bl	8004c12 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8004e20:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <Displ_Orientation+0xac>)
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	7013      	strb	r3, [r2, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20008fcc 	.word	0x20008fcc
 8004e34:	20007fc4 	.word	0x20007fc4
 8004e38:	20007fc2 	.word	0x20007fc2
 8004e3c:	20007fc0 	.word	0x20007fc0

08004e40 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <HAL_SPI_ErrorCallback+0x24>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_SPI_ErrorCallback+0x28>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
	}
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	40003800 	.word	0x40003800
 8004e68:	20000034 	.word	0x20000034

08004e6c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <HAL_SPI_TxCpltCallback+0x24>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d102      	bne.n	8004e84 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_SPI_TxCpltCallback+0x28>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40003800 	.word	0x40003800
 8004e94:	20000034 	.word	0x20000034

08004e98 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	80fb      	strh	r3, [r7, #6]
 8004eaa:	4603      	mov	r3, r0
 8004eac:	80bb      	strh	r3, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	807b      	strh	r3, [r7, #2]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	; (8004ff8 <Displ_FillArea+0x160>)
 8004eba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f280 8096 	bge.w	8004ff0 <Displ_FillArea+0x158>
 8004ec4:	88bb      	ldrh	r3, [r7, #4]
 8004ec6:	4a4d      	ldr	r2, [pc, #308]	; (8004ffc <Displ_FillArea+0x164>)
 8004ec8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	f280 808f 	bge.w	8004ff0 <Displ_FillArea+0x158>
 8004ed2:	887b      	ldrh	r3, [r7, #2]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 808b 	beq.w	8004ff0 <Displ_FillArea+0x158>
 8004eda:	883b      	ldrh	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8087 	beq.w	8004ff0 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	887b      	ldrh	r3, [r7, #2]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8004eec:	4b42      	ldr	r3, [pc, #264]	; (8004ff8 <Displ_FillArea+0x160>)
 8004eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d903      	bls.n	8004f02 <Displ_FillArea+0x6a>
		x1=_width;
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <Displ_FillArea+0x160>)
 8004efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f00:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8004f02:	88ba      	ldrh	r2, [r7, #4]
 8004f04:	883b      	ldrh	r3, [r7, #0]
 8004f06:	4413      	add	r3, r2
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8004f0c:	4b3b      	ldr	r3, [pc, #236]	; (8004ffc <Displ_FillArea+0x164>)
 8004f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f12:	461a      	mov	r2, r3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d903      	bls.n	8004f22 <Displ_FillArea+0x8a>
		y1=_height;
 8004f1a:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <Displ_FillArea+0x164>)
 8004f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f20:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8004f22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8004f38:	88bb      	ldrh	r3, [r7, #4]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	88fa      	ldrh	r2, [r7, #6]
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	1a8a      	subs	r2, r1, r2
 8004f46:	3201      	adds	r2, #1
 8004f48:	fb02 f303 	mul.w	r3, r2, r3
 8004f4c:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <Displ_FillArea+0x168>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d204      	bcs.n	8004f66 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3301      	adds	r3, #1
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	e002      	b.n	8004f6c <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8004f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f6a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	e007      	b.n	8004f82 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	617a      	str	r2, [r7, #20]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d3f3      	bcc.n	8004f72 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	88b9      	ldrh	r1, [r7, #4]
 8004f94:	88f8      	ldrh	r0, [r7, #6]
 8004f96:	f7ff fe93 	bl	8004cc0 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0a9b      	lsrs	r3, r3, #10
 8004f9e:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa4:	e00a      	b.n	8004fbc <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <Displ_FillArea+0x168>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fe2e 	bl	8004c12 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d3f0      	bcc.n	8004fa6 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	; (8005000 <Displ_FillArea+0x168>)
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	005a      	lsls	r2, r3, #1
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	02db      	lsls	r3, r3, #11
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f7ff fe1c 	bl	8004c12 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <Displ_FillArea+0x168>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <Displ_FillArea+0x16c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <Displ_FillArea+0x150>
 8004fe4:	4b08      	ldr	r3, [pc, #32]	; (8005008 <Displ_FillArea+0x170>)
 8004fe6:	e000      	b.n	8004fea <Displ_FillArea+0x152>
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <Displ_FillArea+0x16c>)
 8004fea:	4a05      	ldr	r2, [pc, #20]	; (8005000 <Displ_FillArea+0x168>)
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e000      	b.n	8004ff2 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8004ff0:	bf00      	nop

}
 8004ff2:	372c      	adds	r7, #44	; 0x2c
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}
 8004ff8:	20007fc2 	.word	0x20007fc2
 8004ffc:	20007fc4 	.word	0x20007fc4
 8005000:	20000038 	.word	0x20000038
 8005004:	20007fc8 	.word	0x20007fc8
 8005008:	200087c8 	.word	0x200087c8

0800500c <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af02      	add	r7, sp, #8
 8005012:	4603      	mov	r3, r0
 8005014:	80fb      	strh	r3, [r7, #6]
 8005016:	460b      	mov	r3, r1
 8005018:	80bb      	strh	r3, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <Displ_Pixel+0x44>)
 8005022:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005026:	4293      	cmp	r3, r2
 8005028:	da0e      	bge.n	8005048 <Displ_Pixel+0x3c>
 800502a:	88bb      	ldrh	r3, [r7, #4]
 800502c:	4a09      	ldr	r2, [pc, #36]	; (8005054 <Displ_Pixel+0x48>)
 800502e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005032:	4293      	cmp	r3, r2
 8005034:	da08      	bge.n	8005048 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8005036:	88b9      	ldrh	r1, [r7, #4]
 8005038:	88f8      	ldrh	r0, [r7, #6]
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2301      	movs	r3, #1
 8005040:	2201      	movs	r2, #1
 8005042:	f7ff ff29 	bl	8004e98 <Displ_FillArea>
 8005046:	e000      	b.n	800504a <Displ_Pixel+0x3e>
        return;
 8005048:	bf00      	nop

}
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20007fc2 	.word	0x20007fc2
 8005054:	20007fc4 	.word	0x20007fc4

08005058 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	461a      	mov	r2, r3
 8005066:	4623      	mov	r3, r4
 8005068:	80fb      	strh	r3, [r7, #6]
 800506a:	4603      	mov	r3, r0
 800506c:	80bb      	strh	r3, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	807b      	strh	r3, [r7, #2]
 8005072:	4613      	mov	r3, r2
 8005074:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8005076:	887b      	ldrh	r3, [r7, #2]
 8005078:	f1c3 0301 	rsb	r3, r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005080:	2301      	movs	r3, #1
 8005082:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	461a      	mov	r2, r3
 8005088:	03d2      	lsls	r2, r2, #15
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 800509a:	88f8      	ldrh	r0, [r7, #6]
 800509c:	88ba      	ldrh	r2, [r7, #4]
 800509e:	887b      	ldrh	r3, [r7, #2]
 80050a0:	4413      	add	r3, r2
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	883a      	ldrh	r2, [r7, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7ff ffb0 	bl	800500c <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 80050ac:	88f8      	ldrh	r0, [r7, #6]
 80050ae:	88ba      	ldrh	r2, [r7, #4]
 80050b0:	887b      	ldrh	r3, [r7, #2]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	883a      	ldrh	r2, [r7, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7ff ffa7 	bl	800500c <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	887b      	ldrh	r3, [r7, #2]
 80050c2:	4413      	add	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	88b9      	ldrh	r1, [r7, #4]
 80050c8:	883a      	ldrh	r2, [r7, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff ff9e 	bl	800500c <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	88b9      	ldrh	r1, [r7, #4]
 80050da:	883a      	ldrh	r2, [r7, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff ff95 	bl	800500c <Displ_Pixel>

    while (x<y) {
 80050e2:	e081      	b.n	80051e8 <Displ_drawCircle+0x190>
        if (f >= 0) {
 80050e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db0e      	blt.n	800510a <Displ_drawCircle+0xb2>
            y--;
 80050ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80050f8:	8a7b      	ldrh	r3, [r7, #18]
 80050fa:	3302      	adds	r3, #2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8005100:	8afa      	ldrh	r2, [r7, #22]
 8005102:	8a7b      	ldrh	r3, [r7, #18]
 8005104:	4413      	add	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800510a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800510e:	b29b      	uxth	r3, r3
 8005110:	3301      	adds	r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005116:	8abb      	ldrh	r3, [r7, #20]
 8005118:	3302      	adds	r3, #2
 800511a:	b29b      	uxth	r3, r3
 800511c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800511e:	8afa      	ldrh	r2, [r7, #22]
 8005120:	8abb      	ldrh	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	8a3b      	ldrh	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	b298      	uxth	r0, r3
 8005130:	88ba      	ldrh	r2, [r7, #4]
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	4413      	add	r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	883a      	ldrh	r2, [r7, #0]
 800513a:	4619      	mov	r1, r3
 800513c:	f7ff ff66 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	8a3b      	ldrh	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	b298      	uxth	r0, r3
 8005148:	88ba      	ldrh	r2, [r7, #4]
 800514a:	89fb      	ldrh	r3, [r7, #14]
 800514c:	4413      	add	r3, r2
 800514e:	b29b      	uxth	r3, r3
 8005150:	883a      	ldrh	r2, [r7, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	f7ff ff5a 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005158:	88fa      	ldrh	r2, [r7, #6]
 800515a:	8a3b      	ldrh	r3, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	b298      	uxth	r0, r3
 8005160:	88ba      	ldrh	r2, [r7, #4]
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	b29b      	uxth	r3, r3
 8005168:	883a      	ldrh	r2, [r7, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	f7ff ff4e 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	8a3b      	ldrh	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	b298      	uxth	r0, r3
 8005178:	88ba      	ldrh	r2, [r7, #4]
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	883a      	ldrh	r2, [r7, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	f7ff ff42 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	4413      	add	r3, r2
 800518e:	b298      	uxth	r0, r3
 8005190:	88ba      	ldrh	r2, [r7, #4]
 8005192:	8a3b      	ldrh	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	b29b      	uxth	r3, r3
 8005198:	883a      	ldrh	r2, [r7, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	f7ff ff36 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	b298      	uxth	r0, r3
 80051a8:	88ba      	ldrh	r2, [r7, #4]
 80051aa:	8a3b      	ldrh	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	883a      	ldrh	r2, [r7, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	f7ff ff2a 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	4413      	add	r3, r2
 80051be:	b298      	uxth	r0, r3
 80051c0:	88ba      	ldrh	r2, [r7, #4]
 80051c2:	8a3b      	ldrh	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	883a      	ldrh	r2, [r7, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	f7ff ff1e 	bl	800500c <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	b298      	uxth	r0, r3
 80051d8:	88ba      	ldrh	r2, [r7, #4]
 80051da:	8a3b      	ldrh	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	b29b      	uxth	r3, r3
 80051e0:	883a      	ldrh	r2, [r7, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7ff ff12 	bl	800500c <Displ_Pixel>
    while (x<y) {
 80051e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80051ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	f6ff af77 	blt.w	80050e4 <Displ_drawCircle+0x8c>
    }
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd90      	pop	{r4, r7, pc}

08005200 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af02      	add	r7, sp, #8
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <Displ_CLS+0x30>)
 800520c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005210:	b29a      	uxth	r2, r3
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <Displ_CLS+0x34>)
 8005214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005218:	b299      	uxth	r1, r3
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	460b      	mov	r3, r1
 8005220:	2100      	movs	r1, #0
 8005222:	2000      	movs	r0, #0
 8005224:	f7ff fe38 	bl	8004e98 <Displ_FillArea>
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20007fc2 	.word	0x20007fc2
 8005234:	20007fc4 	.word	0x20007fc4

08005238 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4623      	mov	r3, r4
 8005248:	80fb      	strh	r3, [r7, #6]
 800524a:	4603      	mov	r3, r0
 800524c:	80bb      	strh	r3, [r7, #4]
 800524e:	460b      	mov	r3, r1
 8005250:	807b      	strh	r3, [r7, #2]
 8005252:	4613      	mov	r3, r2
 8005254:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	f1c3 0301 	rsb	r3, r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005260:	2301      	movs	r3, #1
 8005262:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	461a      	mov	r2, r3
 8005268:	03d2      	lsls	r2, r2, #15
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800527a:	e095      	b.n	80053a8 <drawCircleHelper+0x170>
        if (f >= 0) {
 800527c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db0e      	blt.n	80052a2 <drawCircleHelper+0x6a>
            y--;
 8005284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29b      	uxth	r3, r3
 800528e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005290:	8a7b      	ldrh	r3, [r7, #18]
 8005292:	3302      	adds	r3, #2
 8005294:	b29b      	uxth	r3, r3
 8005296:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005298:	8afa      	ldrh	r2, [r7, #22]
 800529a:	8a7b      	ldrh	r3, [r7, #18]
 800529c:	4413      	add	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80052a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3301      	adds	r3, #1
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80052ae:	8abb      	ldrh	r3, [r7, #20]
 80052b0:	3302      	adds	r3, #2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 80052b6:	8afa      	ldrh	r2, [r7, #22]
 80052b8:	8abb      	ldrh	r3, [r7, #20]
 80052ba:	4413      	add	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 80052c0:	787b      	ldrb	r3, [r7, #1]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	8a3b      	ldrh	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	b298      	uxth	r0, r3
 80052d2:	88ba      	ldrh	r2, [r7, #4]
 80052d4:	89fb      	ldrh	r3, [r7, #14]
 80052d6:	4413      	add	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80052dc:	4619      	mov	r1, r3
 80052de:	f7ff fe95 	bl	800500c <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	4413      	add	r3, r2
 80052e8:	b298      	uxth	r0, r3
 80052ea:	88ba      	ldrh	r2, [r7, #4]
 80052ec:	8a3b      	ldrh	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80052f4:	4619      	mov	r1, r3
 80052f6:	f7ff fe89 	bl	800500c <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80052fa:	787b      	ldrb	r3, [r7, #1]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	8a3b      	ldrh	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	b298      	uxth	r0, r3
 800530c:	88ba      	ldrh	r2, [r7, #4]
 800530e:	89fb      	ldrh	r3, [r7, #14]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005316:	4619      	mov	r1, r3
 8005318:	f7ff fe78 	bl	800500c <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	4413      	add	r3, r2
 8005322:	b298      	uxth	r0, r3
 8005324:	88ba      	ldrh	r2, [r7, #4]
 8005326:	8a3b      	ldrh	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	b29b      	uxth	r3, r3
 800532c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800532e:	4619      	mov	r1, r3
 8005330:	f7ff fe6c 	bl	800500c <Displ_Pixel>
        }
        if (cornername & 0x8) {
 8005334:	787b      	ldrb	r3, [r7, #1]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d017      	beq.n	800536e <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b298      	uxth	r0, r3
 8005346:	88ba      	ldrh	r2, [r7, #4]
 8005348:	8a3b      	ldrh	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005350:	4619      	mov	r1, r3
 8005352:	f7ff fe5b 	bl	800500c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	8a3b      	ldrh	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	b298      	uxth	r0, r3
 800535e:	88ba      	ldrh	r2, [r7, #4]
 8005360:	89fb      	ldrh	r3, [r7, #14]
 8005362:	4413      	add	r3, r2
 8005364:	b29b      	uxth	r3, r3
 8005366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005368:	4619      	mov	r1, r3
 800536a:	f7ff fe4f 	bl	800500c <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800536e:	787b      	ldrb	r3, [r7, #1]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	b298      	uxth	r0, r3
 8005380:	88ba      	ldrh	r2, [r7, #4]
 8005382:	8a3b      	ldrh	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	b29b      	uxth	r3, r3
 8005388:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800538a:	4619      	mov	r1, r3
 800538c:	f7ff fe3e 	bl	800500c <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	8a3b      	ldrh	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b298      	uxth	r0, r3
 8005398:	88ba      	ldrh	r2, [r7, #4]
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7ff fe32 	bl	800500c <Displ_Pixel>
    while (x<y) {
 80053a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80053ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	f6ff af63 	blt.w	800527c <drawCircleHelper+0x44>
        }
    }
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}

080053c0 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b089      	sub	sp, #36	; 0x24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	80fb      	strh	r3, [r7, #6]
 80053d2:	4603      	mov	r3, r0
 80053d4:	80bb      	strh	r3, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	807b      	strh	r3, [r7, #2]
 80053da:	4613      	mov	r3, r2
 80053dc:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	f1c3 0301 	rsb	r3, r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	461a      	mov	r2, r3
 80053f0:	03d2      	lsls	r2, r2, #15
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80053fe:	887b      	ldrh	r3, [r7, #2]
 8005400:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8005402:	e0a7      	b.n	8005554 <fillCircleHelper+0x194>
    if (f >= 0) {
 8005404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005408:	2b00      	cmp	r3, #0
 800540a:	db0e      	blt.n	800542a <fillCircleHelper+0x6a>
      y--;
 800540c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29b      	uxth	r3, r3
 8005416:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8005418:	8a7b      	ldrh	r3, [r7, #18]
 800541a:	3302      	adds	r3, #2
 800541c:	b29b      	uxth	r3, r3
 800541e:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8005420:	8afa      	ldrh	r2, [r7, #22]
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	4413      	add	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800542a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800542e:	b29b      	uxth	r3, r3
 8005430:	3301      	adds	r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8005436:	8abb      	ldrh	r3, [r7, #20]
 8005438:	3302      	adds	r3, #2
 800543a:	b29b      	uxth	r3, r3
 800543c:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800543e:	8afa      	ldrh	r2, [r7, #22]
 8005440:	8abb      	ldrh	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8005448:	787b      	ldrb	r3, [r7, #1]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d03d      	beq.n	80054ce <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	8a3b      	ldrh	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	b29b      	uxth	r3, r3
 800545a:	b218      	sxth	r0, r3
 800545c:	88ba      	ldrh	r2, [r7, #4]
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	b219      	sxth	r1, r3
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	8a3b      	ldrh	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	b21c      	sxth	r4, r3
 8005470:	88ba      	ldrh	r2, [r7, #4]
 8005472:	89fb      	ldrh	r3, [r7, #14]
 8005474:	4413      	add	r3, r2
 8005476:	b29a      	uxth	r2, r3
 8005478:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800547a:	4413      	add	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	3301      	adds	r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	b21a      	sxth	r2, r3
 8005484:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	4613      	mov	r3, r2
 800548a:	4622      	mov	r2, r4
 800548c:	f000 f8a1 	bl	80055d2 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8005490:	88fa      	ldrh	r2, [r7, #6]
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	4413      	add	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	b218      	sxth	r0, r3
 800549a:	88ba      	ldrh	r2, [r7, #4]
 800549c:	8a3b      	ldrh	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	b219      	sxth	r1, r3
 80054a4:	88fa      	ldrh	r2, [r7, #6]
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	4413      	add	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	b21c      	sxth	r4, r3
 80054ae:	88ba      	ldrh	r2, [r7, #4]
 80054b0:	8a3b      	ldrh	r3, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054b8:	4413      	add	r3, r2
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b21a      	sxth	r2, r3
 80054c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	4613      	mov	r3, r2
 80054c8:	4622      	mov	r2, r4
 80054ca:	f000 f882 	bl	80055d2 <Displ_Line>
    }
    if (cornername & 0x2) {
 80054ce:	787b      	ldrb	r3, [r7, #1]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d03d      	beq.n	8005554 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	8a3b      	ldrh	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	b29b      	uxth	r3, r3
 80054e0:	b218      	sxth	r0, r3
 80054e2:	88ba      	ldrh	r2, [r7, #4]
 80054e4:	89fb      	ldrh	r3, [r7, #14]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b219      	sxth	r1, r3
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	b21c      	sxth	r4, r3
 80054f6:	88ba      	ldrh	r2, [r7, #4]
 80054f8:	89fb      	ldrh	r3, [r7, #14]
 80054fa:	4413      	add	r3, r2
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005500:	4413      	add	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	3301      	adds	r3, #1
 8005506:	b29b      	uxth	r3, r3
 8005508:	b21a      	sxth	r2, r3
 800550a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	4622      	mov	r2, r4
 8005512:	f000 f85e 	bl	80055d2 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	89fb      	ldrh	r3, [r7, #14]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	b218      	sxth	r0, r3
 8005520:	88ba      	ldrh	r2, [r7, #4]
 8005522:	8a3b      	ldrh	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	b219      	sxth	r1, r3
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	89fb      	ldrh	r3, [r7, #14]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	b21c      	sxth	r4, r3
 8005534:	88ba      	ldrh	r2, [r7, #4]
 8005536:	8a3b      	ldrh	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	b29a      	uxth	r2, r3
 800553c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800553e:	4413      	add	r3, r2
 8005540:	b29b      	uxth	r3, r3
 8005542:	3301      	adds	r3, #1
 8005544:	b29b      	uxth	r3, r3
 8005546:	b21a      	sxth	r2, r3
 8005548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	4622      	mov	r2, r4
 8005550:	f000 f83f 	bl	80055d2 <Displ_Line>
  while (x<y) {
 8005554:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800555c:	429a      	cmp	r2, r3
 800555e:	f6ff af51 	blt.w	8005404 <fillCircleHelper+0x44>
    }
  }
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b085      	sub	sp, #20
 8005570:	af02      	add	r7, sp, #8
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4623      	mov	r3, r4
 800557c:	80fb      	strh	r3, [r7, #6]
 800557e:	4603      	mov	r3, r0
 8005580:	80bb      	strh	r3, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	807b      	strh	r3, [r7, #2]
 8005586:	4613      	mov	r3, r2
 8005588:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 800558a:	88ba      	ldrh	r2, [r7, #4]
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	b29b      	uxth	r3, r3
 8005592:	b219      	sxth	r1, r3
 8005594:	88ba      	ldrh	r2, [r7, #4]
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	4413      	add	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	b21c      	sxth	r4, r3
 800559e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80055a6:	883b      	ldrh	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	4623      	mov	r3, r4
 80055ac:	f000 f811 	bl	80055d2 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 80055b0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80055b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80055b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80055bc:	883b      	ldrh	r3, [r7, #0]
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	2300      	movs	r3, #0
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2303      	movs	r3, #3
 80055c6:	f7ff fefb 	bl	80053c0 <fillCircleHelper>
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd90      	pop	{r4, r7, pc}

080055d2 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80055d2:	b590      	push	{r4, r7, lr}
 80055d4:	b08b      	sub	sp, #44	; 0x2c
 80055d6:	af02      	add	r7, sp, #8
 80055d8:	4604      	mov	r4, r0
 80055da:	4608      	mov	r0, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	461a      	mov	r2, r3
 80055e0:	4623      	mov	r3, r4
 80055e2:	80fb      	strh	r3, [r7, #6]
 80055e4:	4603      	mov	r3, r0
 80055e6:	80bb      	strh	r3, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	807b      	strh	r3, [r7, #2]
 80055ec:	4613      	mov	r3, r2
 80055ee:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80055f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80055f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d123      	bne.n	8005644 <Displ_Line+0x72>
    	if (y1>y0){
 80055fc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005600:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	dd0e      	ble.n	8005626 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005608:	88f8      	ldrh	r0, [r7, #6]
 800560a:	88b9      	ldrh	r1, [r7, #4]
 800560c:	883a      	ldrh	r2, [r7, #0]
 800560e:	88bb      	ldrh	r3, [r7, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	b29b      	uxth	r3, r3
 8005614:	3301      	adds	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	2201      	movs	r2, #1
 8005620:	f7ff fc3a 	bl	8004e98 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005624:	e103      	b.n	800582e <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005626:	88f8      	ldrh	r0, [r7, #6]
 8005628:	8839      	ldrh	r1, [r7, #0]
 800562a:	88ba      	ldrh	r2, [r7, #4]
 800562c:	883b      	ldrh	r3, [r7, #0]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	b29b      	uxth	r3, r3
 8005632:	3301      	adds	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4613      	mov	r3, r2
 800563c:	2201      	movs	r2, #1
 800563e:	f7ff fc2b 	bl	8004e98 <Displ_FillArea>
    	return;
 8005642:	e0f4      	b.n	800582e <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005644:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005648:	f9b7 3000 	ldrsh.w	r3, [r7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d121      	bne.n	8005694 <Displ_Line+0xc2>
    	if (x1>x0)
 8005650:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005658:	429a      	cmp	r2, r3
 800565a:	dd0d      	ble.n	8005678 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800565c:	88f8      	ldrh	r0, [r7, #6]
 800565e:	88b9      	ldrh	r1, [r7, #4]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	3301      	adds	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2301      	movs	r3, #1
 8005672:	f7ff fc11 	bl	8004e98 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8005676:	e0da      	b.n	800582e <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8005678:	8878      	ldrh	r0, [r7, #2]
 800567a:	8839      	ldrh	r1, [r7, #0]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b29b      	uxth	r3, r3
 8005684:	3301      	adds	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2301      	movs	r3, #1
 800568e:	f7ff fc03 	bl	8004e98 <Displ_FillArea>
    	return;
 8005692:	e0cc      	b.n	800582e <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005694:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	dd05      	ble.n	80056ac <Displ_Line+0xda>
 80056a0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056a8:	1ad2      	subs	r2, r2, r3
 80056aa:	e004      	b.n	80056b6 <Displ_Line+0xe4>
 80056ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80056b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80056ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056be:	4299      	cmp	r1, r3
 80056c0:	dd05      	ble.n	80056ce <Displ_Line+0xfc>
 80056c2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80056c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ca:	1acb      	subs	r3, r1, r3
 80056cc:	e004      	b.n	80056d8 <Displ_Line+0x106>
 80056ce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80056d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056d6:	1acb      	subs	r3, r1, r3
 80056d8:	429a      	cmp	r2, r3
 80056da:	bfcc      	ite	gt
 80056dc:	2301      	movgt	r3, #1
 80056de:	2300      	movle	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 80056e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00b      	beq.n	8005704 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 80056ec:	88fb      	ldrh	r3, [r7, #6]
 80056ee:	827b      	strh	r3, [r7, #18]
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	80fb      	strh	r3, [r7, #6]
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	823b      	strh	r3, [r7, #16]
 80056fc:	883b      	ldrh	r3, [r7, #0]
 80056fe:	807b      	strh	r3, [r7, #2]
 8005700:	8a3b      	ldrh	r3, [r7, #16]
 8005702:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005704:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800570c:	429a      	cmp	r2, r3
 800570e:	dd0b      	ble.n	8005728 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	81fb      	strh	r3, [r7, #14]
 8005714:	887b      	ldrh	r3, [r7, #2]
 8005716:	80fb      	strh	r3, [r7, #6]
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 800571c:	88bb      	ldrh	r3, [r7, #4]
 800571e:	81bb      	strh	r3, [r7, #12]
 8005720:	883b      	ldrh	r3, [r7, #0]
 8005722:	80bb      	strh	r3, [r7, #4]
 8005724:	89bb      	ldrh	r3, [r7, #12]
 8005726:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005728:	887a      	ldrh	r2, [r7, #2]
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005732:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005736:	105b      	asrs	r3, r3, #1
 8005738:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 800573a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800573e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005742:	429a      	cmp	r2, r3
 8005744:	da07      	bge.n	8005756 <Displ_Line+0x184>
        dy = y1-y0;
 8005746:	883a      	ldrh	r2, [r7, #0]
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005750:	2301      	movs	r3, #1
 8005752:	837b      	strh	r3, [r7, #26]
 8005754:	e007      	b.n	8005766 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005756:	88ba      	ldrh	r2, [r7, #4]
 8005758:	883b      	ldrh	r3, [r7, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	b29b      	uxth	r3, r3
 800575e:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005764:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005766:	2300      	movs	r3, #0
 8005768:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	83bb      	strh	r3, [r7, #28]
 800576e:	e03a      	b.n	80057e6 <Displ_Line+0x214>
    	l++;
 8005770:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005774:	b29b      	uxth	r3, r3
 8005776:	3301      	adds	r3, #1
 8005778:	b29b      	uxth	r3, r3
 800577a:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800577c:	8b3a      	ldrh	r2, [r7, #24]
 800577e:	8afb      	ldrh	r3, [r7, #22]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	b29b      	uxth	r3, r3
 8005784:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005786:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da25      	bge.n	80057da <Displ_Line+0x208>
        	if (steep) {
 800578e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005796:	88b8      	ldrh	r0, [r7, #4]
 8005798:	88f9      	ldrh	r1, [r7, #6]
 800579a:	8bfa      	ldrh	r2, [r7, #30]
 800579c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	2201      	movs	r2, #1
 80057a4:	f7ff fb78 	bl	8004e98 <Displ_FillArea>
 80057a8:	e007      	b.n	80057ba <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 80057aa:	88f8      	ldrh	r0, [r7, #6]
 80057ac:	88b9      	ldrh	r1, [r7, #4]
 80057ae:	8bfa      	ldrh	r2, [r7, #30]
 80057b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2301      	movs	r3, #1
 80057b6:	f7ff fb6f 	bl	8004e98 <Displ_FillArea>
            }
            y0 += ystep;
 80057ba:	88ba      	ldrh	r2, [r7, #4]
 80057bc:	8b7b      	ldrh	r3, [r7, #26]
 80057be:	4413      	add	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	80bb      	strh	r3, [r7, #4]
            l=0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 80057c8:	8bbb      	ldrh	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	80fb      	strh	r3, [r7, #6]
            err += dx;
 80057d0:	8b3a      	ldrh	r2, [r7, #24]
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	4413      	add	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 80057da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3301      	adds	r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	83bb      	strh	r3, [r7, #28]
 80057e6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80057ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	ddbe      	ble.n	8005770 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80057f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d019      	beq.n	800582e <Displ_Line+0x25c>
    	if (steep) {
 80057fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8005802:	88b8      	ldrh	r0, [r7, #4]
 8005804:	88f9      	ldrh	r1, [r7, #6]
 8005806:	8bfb      	ldrh	r3, [r7, #30]
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4613      	mov	r3, r2
 8005812:	2201      	movs	r2, #1
 8005814:	f7ff fb40 	bl	8004e98 <Displ_FillArea>
 8005818:	e009      	b.n	800582e <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 800581a:	88f8      	ldrh	r0, [r7, #6]
 800581c:	88b9      	ldrh	r1, [r7, #4]
 800581e:	8bfb      	ldrh	r3, [r7, #30]
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2301      	movs	r3, #1
 800582a:	f7ff fb35 	bl	8004e98 <Displ_FillArea>
    	}
    }
}
 800582e:	3724      	adds	r7, #36	; 0x24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd90      	pop	{r4, r7, pc}

08005834 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8005834:	b590      	push	{r4, r7, lr}
 8005836:	b085      	sub	sp, #20
 8005838:	af02      	add	r7, sp, #8
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4623      	mov	r3, r4
 8005844:	80fb      	strh	r3, [r7, #6]
 8005846:	4603      	mov	r3, r0
 8005848:	80bb      	strh	r3, [r7, #4]
 800584a:	460b      	mov	r3, r1
 800584c:	807b      	strh	r3, [r7, #2]
 800584e:	4613      	mov	r3, r2
 8005850:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8005852:	88f8      	ldrh	r0, [r7, #6]
 8005854:	88b9      	ldrh	r1, [r7, #4]
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	8b3c      	ldrh	r4, [r7, #24]
 800585a:	8bbb      	ldrh	r3, [r7, #28]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	4623      	mov	r3, r4
 8005860:	f7ff fb1a 	bl	8004e98 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8005864:	88f8      	ldrh	r0, [r7, #6]
 8005866:	88ba      	ldrh	r2, [r7, #4]
 8005868:	883b      	ldrh	r3, [r7, #0]
 800586a:	4413      	add	r3, r2
 800586c:	b29a      	uxth	r2, r3
 800586e:	8b3b      	ldrh	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	b299      	uxth	r1, r3
 8005874:	887a      	ldrh	r2, [r7, #2]
 8005876:	8b3c      	ldrh	r4, [r7, #24]
 8005878:	8bbb      	ldrh	r3, [r7, #28]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4623      	mov	r3, r4
 800587e:	f7ff fb0b 	bl	8004e98 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8005882:	88f8      	ldrh	r0, [r7, #6]
 8005884:	88b9      	ldrh	r1, [r7, #4]
 8005886:	8b3a      	ldrh	r2, [r7, #24]
 8005888:	883c      	ldrh	r4, [r7, #0]
 800588a:	8bbb      	ldrh	r3, [r7, #28]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4623      	mov	r3, r4
 8005890:	f7ff fb02 	bl	8004e98 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	887b      	ldrh	r3, [r7, #2]
 8005898:	4413      	add	r3, r2
 800589a:	b29a      	uxth	r2, r3
 800589c:	8b3b      	ldrh	r3, [r7, #24]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b298      	uxth	r0, r3
 80058a2:	88b9      	ldrh	r1, [r7, #4]
 80058a4:	8b3a      	ldrh	r2, [r7, #24]
 80058a6:	883c      	ldrh	r4, [r7, #0]
 80058a8:	8bbb      	ldrh	r3, [r7, #28]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	4623      	mov	r3, r4
 80058ae:	f7ff faf3 	bl	8004e98 <Displ_FillArea>
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}

080058ba <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80058ba:	b590      	push	{r4, r7, lr}
 80058bc:	b085      	sub	sp, #20
 80058be:	af02      	add	r7, sp, #8
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	461a      	mov	r2, r3
 80058c8:	4623      	mov	r3, r4
 80058ca:	80fb      	strh	r3, [r7, #6]
 80058cc:	4603      	mov	r3, r0
 80058ce:	80bb      	strh	r3, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 80058d8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058e4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058e8:	8c3b      	ldrh	r3, [r7, #32]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	4623      	mov	r3, r4
 80058ee:	f7ff fe70 	bl	80055d2 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80058f2:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80058f6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80058fa:	f9b7 1000 	ldrsh.w	r1, [r7]
 80058fe:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005902:	8c3b      	ldrh	r3, [r7, #32]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4623      	mov	r3, r4
 8005908:	f7ff fe63 	bl	80055d2 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 800590c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005910:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005914:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005918:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800591c:	8c3b      	ldrh	r3, [r7, #32]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4623      	mov	r3, r4
 8005922:	f7ff fe56 	bl	80055d2 <Displ_Line>
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bd90      	pop	{r4, r7, pc}

0800592e <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800592e:	b590      	push	{r4, r7, lr}
 8005930:	b091      	sub	sp, #68	; 0x44
 8005932:	af02      	add	r7, sp, #8
 8005934:	4604      	mov	r4, r0
 8005936:	4608      	mov	r0, r1
 8005938:	4611      	mov	r1, r2
 800593a:	461a      	mov	r2, r3
 800593c:	4623      	mov	r3, r4
 800593e:	80fb      	strh	r3, [r7, #6]
 8005940:	4603      	mov	r3, r0
 8005942:	80bb      	strh	r3, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	807b      	strh	r3, [r7, #2]
 8005948:	4613      	mov	r3, r2
 800594a:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800594c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005950:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005954:	429a      	cmp	r2, r3
 8005956:	dd0b      	ble.n	8005970 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005958:	88bb      	ldrh	r3, [r7, #4]
 800595a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800595c:	883b      	ldrh	r3, [r7, #0]
 800595e:	80bb      	strh	r3, [r7, #4]
 8005960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005962:	803b      	strh	r3, [r7, #0]
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	80fb      	strh	r3, [r7, #6]
 800596c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005970:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005974:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005978:	429a      	cmp	r2, r3
 800597a:	dd0f      	ble.n	800599c <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800597c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005980:	847b      	strh	r3, [r7, #34]	; 0x22
 8005982:	883b      	ldrh	r3, [r7, #0]
 8005984:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800598a:	803b      	strh	r3, [r7, #0]
 800598c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005990:	843b      	strh	r3, [r7, #32]
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005998:	8c3b      	ldrh	r3, [r7, #32]
 800599a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800599c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dd0b      	ble.n	80059c0 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	83fb      	strh	r3, [r7, #30]
 80059ac:	883b      	ldrh	r3, [r7, #0]
 80059ae:	80bb      	strh	r3, [r7, #4]
 80059b0:	8bfb      	ldrh	r3, [r7, #30]
 80059b2:	803b      	strh	r3, [r7, #0]
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	83bb      	strh	r3, [r7, #28]
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	80fb      	strh	r3, [r7, #6]
 80059bc:	8bbb      	ldrh	r3, [r7, #28]
 80059be:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80059c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d136      	bne.n	8005a3a <Displ_fillTriangle+0x10c>
        a = b = x0;
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80059d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80059d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80059d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059dc:	429a      	cmp	r2, r3
 80059de:	da02      	bge.n	80059e6 <Displ_fillTriangle+0xb8>
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80059e4:	e007      	b.n	80059f6 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80059e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80059ea:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80059ee:	429a      	cmp	r2, r3
 80059f0:	dd01      	ble.n	80059f6 <Displ_fillTriangle+0xc8>
 80059f2:	887b      	ldrh	r3, [r7, #2]
 80059f4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80059f6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80059fa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059fe:	429a      	cmp	r2, r3
 8005a00:	da03      	bge.n	8005a0a <Displ_fillTriangle+0xdc>
 8005a02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a06:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a08:	e008      	b.n	8005a1c <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005a0a:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005a0e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005a12:	429a      	cmp	r2, r3
 8005a14:	dd02      	ble.n	8005a1c <Displ_fillTriangle+0xee>
 8005a16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a1a:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005a1c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005a20:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005a24:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a28:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005a2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4623      	mov	r3, r4
 8005a34:	f7ff fdcd 	bl	80055d2 <Displ_Line>
        return;
 8005a38:	e0d2      	b.n	8005be0 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	88fb      	ldrh	r3, [r7, #6]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005a44:	883a      	ldrh	r2, [r7, #0]
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005a4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8005a5a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005a5e:	88bb      	ldrh	r3, [r7, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8005a66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8005a72:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005a76:	883b      	ldrh	r3, [r7, #0]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8005a86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005a8a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d102      	bne.n	8005a98 <Displ_fillTriangle+0x16a>
 8005a92:	883b      	ldrh	r3, [r7, #0]
 8005a94:	863b      	strh	r3, [r7, #48]	; 0x30
 8005a96:	e003      	b.n	8005aa0 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8005a98:	883b      	ldrh	r3, [r7, #0]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8005aa0:	88bb      	ldrh	r3, [r7, #4]
 8005aa2:	867b      	strh	r3, [r7, #50]	; 0x32
 8005aa4:	e03d      	b.n	8005b22 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8005aa6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005aba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	4413      	add	r3, r2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8005ace:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005ad8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ade:	4413      	add	r3, r2
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005ae2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005ae6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dd05      	ble.n	8005afa <Displ_fillTriangle+0x1cc>
 8005aee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005af0:	81bb      	strh	r3, [r7, #12]
 8005af2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005af4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005af6:	89bb      	ldrh	r3, [r7, #12]
 8005af8:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005afa:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005afe:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005b02:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b06:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005b0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	4623      	mov	r3, r4
 8005b12:	f7ff fd5e 	bl	80055d2 <Displ_Line>
    for(y=y0; y<=last; y++) {
 8005b16:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b22:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005b26:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	ddbb      	ble.n	8005aa6 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8005b2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b32:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b36:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005b3a:	1a8a      	subs	r2, r1, r2
 8005b3c:	fb02 f303 	mul.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8005b42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b46:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005b4a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005b4e:	1a8a      	subs	r2, r1, r2
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8005b56:	e03d      	b.n	8005bd4 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8005b58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	887b      	ldrh	r3, [r7, #2]
 8005b66:	4413      	add	r3, r2
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8005b6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8005b80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b86:	4413      	add	r3, r2
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8005b8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	4413      	add	r3, r2
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8005b94:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005b98:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	dd05      	ble.n	8005bac <Displ_fillTriangle+0x27e>
 8005ba0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ba2:	81fb      	strh	r3, [r7, #14]
 8005ba4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ba6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8005bac:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8005bb0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005bb4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8005bb8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005bbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	f7ff fd05 	bl	80055d2 <Displ_Line>
    for(; y<=y2; y++) {
 8005bc8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	867b      	strh	r3, [r7, #50]	; 0x32
 8005bd4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8005bd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	ddbb      	ble.n	8005b58 <Displ_fillTriangle+0x22a>
    }
}
 8005be0:	373c      	adds	r7, #60	; 0x3c
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd90      	pop	{r4, r7, pc}
	...

08005be8 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8005be8:	b082      	sub	sp, #8
 8005bea:	b590      	push	{r4, r7, lr}
 8005bec:	b08f      	sub	sp, #60	; 0x3c
 8005bee:	af02      	add	r7, sp, #8
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	80fb      	strh	r3, [r7, #6]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	80bb      	strh	r3, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 8005bfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c02:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 8005c04:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d102      	bne.n	8005c12 <Displ_WChar+0x2a>
		wsize<<= 1;
 8005c0c:	7efb      	ldrb	r3, [r7, #27]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 8005c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c1a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 8005c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	3b20      	subs	r3, #32
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 8005c36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d005      	beq.n	8005c4a <Displ_WChar+0x62>
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d107      	bne.n	8005c52 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 8005c42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005c46:	61fb      	str	r3, [r7, #28]
			break;
 8005c48:	e005      	b.n	8005c56 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4e:	61fb      	str	r3, [r7, #28]
			break;
 8005c50:	e001      	b.n	8005c56 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8005c52:	2380      	movs	r3, #128	; 0x80
 8005c54:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8005c56:	4b68      	ldr	r3, [pc, #416]	; (8005df8 <Displ_WChar+0x210>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005c5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	b21a      	sxth	r2, r3
 8005c64:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	b21b      	sxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8005c74:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	4313      	orrs	r3, r2
 8005c88:	b21b      	sxth	r3, r3
 8005c8a:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c90:	e06f      	b.n	8005d72 <Displ_WChar+0x18a>
		b=0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8005c96:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d015      	beq.n	8005cca <Displ_WChar+0xe2>
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d120      	bne.n	8005ce4 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	041a      	lsls	r2, r3, #16
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	3301      	adds	r3, #1
 8005cb0:	6939      	ldr	r1, [r7, #16]
 8005cb2:	440b      	add	r3, r1
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbc:	3202      	adds	r2, #2
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8005cc8:	e011      	b.n	8005cee <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	4413      	add	r3, r2
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd6:	3201      	adds	r2, #1
 8005cd8:	6939      	ldr	r1, [r7, #16]
 8005cda:	440a      	add	r2, r1
 8005cdc:	7812      	ldrb	r2, [r2, #0]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8005ce2:	e004      	b.n	8005cee <Displ_WChar+0x106>
			default:
				b=pos[i];
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	4413      	add	r3, r2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e032      	b.n	8005d5a <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	623a      	str	r2, [r7, #32]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	897a      	ldrh	r2, [r7, #10]
 8005d10:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8005d12:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d11c      	bne.n	8005d54 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	623a      	str	r2, [r7, #32]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	897a      	ldrh	r2, [r7, #10]
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e013      	b.n	8005d54 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	623a      	str	r2, [r7, #32]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	893a      	ldrh	r2, [r7, #8]
 8005d3a:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8005d3c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d107      	bne.n	8005d54 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	623a      	str	r2, [r7, #32]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	893a      	ldrh	r2, [r7, #8]
 8005d52:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	3301      	adds	r3, #1
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d3c6      	bcc.n	8005cf4 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8005d66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	4413      	add	r3, r2
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d38b      	bcc.n	8005c92 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	005b      	lsls	r3, r3, #1
 8005d7e:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8005d80:	7efb      	ldrb	r3, [r7, #27]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	4413      	add	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29c      	uxth	r4, r3
 8005d8e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005d92:	88bb      	ldrh	r3, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	88b9      	ldrh	r1, [r7, #4]
 8005d9e:	88f8      	ldrh	r0, [r7, #6]
 8005da0:	4622      	mov	r2, r4
 8005da2:	f7fe ff8d 	bl	8004cc0 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dac:	d90b      	bls.n	8005dc6 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8005dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005db2:	9301      	str	r3, [sp, #4]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	f240 33ad 	movw	r3, #941	; 0x3ad
 8005dbc:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <Displ_WChar+0x214>)
 8005dbe:	4910      	ldr	r1, [pc, #64]	; (8005e00 <Displ_WChar+0x218>)
 8005dc0:	4810      	ldr	r0, [pc, #64]	; (8005e04 <Displ_WChar+0x21c>)
 8005dc2:	f7fe fccf 	bl	8004764 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <Displ_WChar+0x210>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6a39      	ldr	r1, [r7, #32]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe ff1f 	bl	8004c12 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <Displ_WChar+0x210>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a0b      	ldr	r2, [pc, #44]	; (8005e08 <Displ_WChar+0x220>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <Displ_WChar+0x1fa>
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <Displ_WChar+0x224>)
 8005de0:	e000      	b.n	8005de4 <Displ_WChar+0x1fc>
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <Displ_WChar+0x220>)
 8005de4:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <Displ_WChar+0x210>)
 8005de6:	6013      	str	r3, [r2, #0]

}
 8005de8:	bf00      	nop
 8005dea:	3734      	adds	r7, #52	; 0x34
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005df2:	b002      	add	sp, #8
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000038 	.word	0x20000038
 8005dfc:	08013a28 	.word	0x08013a28
 8005e00:	0800f8fc 	.word	0x0800f8fc
 8005e04:	0800f91c 	.word	0x0800f91c
 8005e08:	20007fc8 	.word	0x20007fc8
 8005e0c:	200087c8 	.word	0x200087c8

08005e10 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	80fb      	strh	r3, [r7, #6]
 8005e22:	4603      	mov	r3, r0
 8005e24:	80bb      	strh	r3, [r7, #4]
 8005e26:	460b      	mov	r3, r1
 8005e28:	807b      	strh	r3, [r7, #2]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8005e2e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005e32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e36:	4293      	cmp	r3, r2
 8005e38:	bfa8      	it	ge
 8005e3a:	4613      	movge	r3, r2
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	0fda      	lsrs	r2, r3, #31
 8005e40:	4413      	add	r3, r2
 8005e42:	105b      	asrs	r3, r3, #1
 8005e44:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8005e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005e4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	dd01      	ble.n	8005e56 <Displ_drawRoundRect+0x46>
 8005e52:	89fb      	ldrh	r3, [r7, #14]
 8005e54:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	8c3b      	ldrh	r3, [r7, #32]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	b218      	sxth	r0, r3
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	4413      	add	r3, r2
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	8c3b      	ldrh	r3, [r7, #32]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	b21a      	sxth	r2, r3
 8005e74:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005e78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4623      	mov	r3, r4
 8005e82:	f7ff fba6 	bl	80055d2 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	8c3b      	ldrh	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b218      	sxth	r0, r3
 8005e90:	88ba      	ldrh	r2, [r7, #4]
 8005e92:	883b      	ldrh	r3, [r7, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	b219      	sxth	r1, r3
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	887b      	ldrh	r3, [r7, #2]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	8c3b      	ldrh	r3, [r7, #32]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	b21c      	sxth	r4, r3
 8005eb2:	88ba      	ldrh	r2, [r7, #4]
 8005eb4:	883b      	ldrh	r3, [r7, #0]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	b21a      	sxth	r2, r3
 8005ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	f7ff fb83 	bl	80055d2 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8005ecc:	88ba      	ldrh	r2, [r7, #4]
 8005ece:	8c3b      	ldrh	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	b219      	sxth	r1, r3
 8005ed6:	88ba      	ldrh	r2, [r7, #4]
 8005ed8:	883b      	ldrh	r3, [r7, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	8c3b      	ldrh	r3, [r7, #32]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	b21c      	sxth	r4, r3
 8005eea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	f7ff fb6b 	bl	80055d2 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8005efc:	88fa      	ldrh	r2, [r7, #6]
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	4413      	add	r3, r2
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	b218      	sxth	r0, r3
 8005f0a:	88ba      	ldrh	r2, [r7, #4]
 8005f0c:	8c3b      	ldrh	r3, [r7, #32]
 8005f0e:	4413      	add	r3, r2
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	b219      	sxth	r1, r3
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	887b      	ldrh	r3, [r7, #2]
 8005f18:	4413      	add	r3, r2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b21c      	sxth	r4, r3
 8005f22:	88ba      	ldrh	r2, [r7, #4]
 8005f24:	883b      	ldrh	r3, [r7, #0]
 8005f26:	4413      	add	r3, r2
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	8c3b      	ldrh	r3, [r7, #32]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b21a      	sxth	r2, r3
 8005f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	f7ff fb48 	bl	80055d2 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	8c3b      	ldrh	r3, [r7, #32]
 8005f46:	4413      	add	r3, r2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	b218      	sxth	r0, r3
 8005f4c:	88ba      	ldrh	r2, [r7, #4]
 8005f4e:	8c3b      	ldrh	r3, [r7, #32]
 8005f50:	4413      	add	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b219      	sxth	r1, r3
 8005f56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f7ff f96a 	bl	8005238 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	887b      	ldrh	r3, [r7, #2]
 8005f68:	4413      	add	r3, r2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	8c3b      	ldrh	r3, [r7, #32]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	b218      	sxth	r0, r3
 8005f78:	88ba      	ldrh	r2, [r7, #4]
 8005f7a:	8c3b      	ldrh	r3, [r7, #32]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	b219      	sxth	r1, r3
 8005f82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	f7ff f954 	bl	8005238 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	887b      	ldrh	r3, [r7, #2]
 8005f94:	4413      	add	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	8c3b      	ldrh	r3, [r7, #32]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b218      	sxth	r0, r3
 8005fa4:	88ba      	ldrh	r2, [r7, #4]
 8005fa6:	883b      	ldrh	r3, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	8c3b      	ldrh	r3, [r7, #32]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	b219      	sxth	r1, r3
 8005fb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f7ff f939 	bl	8005238 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	8c3b      	ldrh	r3, [r7, #32]
 8005fca:	4413      	add	r3, r2
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	b218      	sxth	r0, r3
 8005fd0:	88ba      	ldrh	r2, [r7, #4]
 8005fd2:	883b      	ldrh	r3, [r7, #0]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	8c3b      	ldrh	r3, [r7, #32]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b219      	sxth	r1, r3
 8005fe4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	2308      	movs	r3, #8
 8005fee:	f7ff f923 	bl	8005238 <drawCircleHelper>
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}

08005ffa <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8005ffa:	b590      	push	{r4, r7, lr}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af02      	add	r7, sp, #8
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	461a      	mov	r2, r3
 8006008:	4623      	mov	r3, r4
 800600a:	80fb      	strh	r3, [r7, #6]
 800600c:	4603      	mov	r3, r0
 800600e:	80bb      	strh	r3, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	807b      	strh	r3, [r7, #2]
 8006014:	4613      	mov	r3, r2
 8006016:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006018:	f9b7 2000 	ldrsh.w	r2, [r7]
 800601c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006020:	4293      	cmp	r3, r2
 8006022:	bfa8      	it	ge
 8006024:	4613      	movge	r3, r2
 8006026:	b21b      	sxth	r3, r3
 8006028:	0fda      	lsrs	r2, r3, #31
 800602a:	4413      	add	r3, r2
 800602c:	105b      	asrs	r3, r3, #1
 800602e:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006030:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006038:	429a      	cmp	r2, r3
 800603a:	dd01      	ble.n	8006040 <Displ_fillRoundRect+0x46>
 800603c:	89fb      	ldrh	r3, [r7, #14]
 800603e:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	8c3b      	ldrh	r3, [r7, #32]
 8006044:	4413      	add	r3, r2
 8006046:	b298      	uxth	r0, r3
 8006048:	88b9      	ldrh	r1, [r7, #4]
 800604a:	887a      	ldrh	r2, [r7, #2]
 800604c:	8c3b      	ldrh	r3, [r7, #32]
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	b29a      	uxth	r2, r3
 8006056:	883c      	ldrh	r4, [r7, #0]
 8006058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4623      	mov	r3, r4
 800605e:	f7fe ff1b 	bl	8004e98 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	887b      	ldrh	r3, [r7, #2]
 8006066:	4413      	add	r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	8c3b      	ldrh	r3, [r7, #32]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	b218      	sxth	r0, r3
 8006076:	88ba      	ldrh	r2, [r7, #4]
 8006078:	8c3b      	ldrh	r3, [r7, #32]
 800607a:	4413      	add	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	b219      	sxth	r1, r3
 8006080:	883a      	ldrh	r2, [r7, #0]
 8006082:	8c3b      	ldrh	r3, [r7, #32]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	b21b      	sxth	r3, r3
 8006092:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006098:	9201      	str	r2, [sp, #4]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2301      	movs	r3, #1
 800609e:	4622      	mov	r2, r4
 80060a0:	f7ff f98e 	bl	80053c0 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	8c3b      	ldrh	r3, [r7, #32]
 80060a8:	4413      	add	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b218      	sxth	r0, r3
 80060ae:	88ba      	ldrh	r2, [r7, #4]
 80060b0:	8c3b      	ldrh	r3, [r7, #32]
 80060b2:	4413      	add	r3, r2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	b219      	sxth	r1, r3
 80060b8:	883a      	ldrh	r2, [r7, #0]
 80060ba:	8c3b      	ldrh	r3, [r7, #32]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	b21b      	sxth	r3, r3
 80060ca:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 80060ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060d0:	9201      	str	r2, [sp, #4]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2302      	movs	r3, #2
 80060d6:	4622      	mov	r2, r4
 80060d8:	f7ff f972 	bl	80053c0 <fillCircleHelper>
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 80060e4:	b082      	sub	sp, #8
 80060e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e8:	b08b      	sub	sp, #44	; 0x2c
 80060ea:	af06      	add	r7, sp, #24
 80060ec:	603a      	str	r2, [r7, #0]
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f0:	4603      	mov	r3, r0
 80060f2:	80fb      	strh	r3, [r7, #6]
 80060f4:	460b      	mov	r3, r1
 80060f6:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80060f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060fa:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80060fc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006100:	2b01      	cmp	r3, #1
 8006102:	d922      	bls.n	800614a <Displ_WString+0x66>
		delta<<=1;
 8006104:	89fb      	ldrh	r3, [r7, #14]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 800610a:	e01e      	b.n	800614a <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781a      	ldrb	r2, [r3, #0]
 8006110:	88bd      	ldrh	r5, [r7, #4]
 8006112:	88fc      	ldrh	r4, [r7, #6]
 8006114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	466e      	mov	r6, sp
 8006126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800612a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800612e:	e886 0003 	stmia.w	r6, {r0, r1}
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	4629      	mov	r1, r5
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fd56 	bl	8005be8 <Displ_WChar>
        x += delta;
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	89fb      	ldrh	r3, [r7, #14]
 8006140:	4413      	add	r3, r2
 8006142:	80fb      	strh	r3, [r7, #6]
        str++;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	603b      	str	r3, [r7, #0]
    while(*str) {
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1dc      	bne.n	800610c <Displ_WString+0x28>
    }
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800615e:	b002      	add	sp, #8
 8006160:	4770      	bx	lr
	...

08006164 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b51      	cmp	r3, #81	; 0x51
 8006172:	d00a      	beq.n	800618a <Displ_BackLight+0x26>
 8006174:	2b51      	cmp	r3, #81	; 0x51
 8006176:	dc16      	bgt.n	80061a6 <Displ_BackLight+0x42>
 8006178:	2b46      	cmp	r3, #70	; 0x46
 800617a:	d008      	beq.n	800618e <Displ_BackLight+0x2a>
 800617c:	2b46      	cmp	r3, #70	; 0x46
 800617e:	dc12      	bgt.n	80061a6 <Displ_BackLight+0x42>
 8006180:	2b30      	cmp	r3, #48	; 0x30
 8006182:	d00a      	beq.n	800619a <Displ_BackLight+0x36>
 8006184:	2b31      	cmp	r3, #49	; 0x31
 8006186:	d002      	beq.n	800618e <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006188:	e00d      	b.n	80061a6 <Displ_BackLight+0x42>
		__NOP();
 800618a:	bf00      	nop
		break;
 800618c:	e00c      	b.n	80061a8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 800618e:	2201      	movs	r2, #1
 8006190:	2140      	movs	r1, #64	; 0x40
 8006192:	480a      	ldr	r0, [pc, #40]	; (80061bc <Displ_BackLight+0x58>)
 8006194:	f002 f860 	bl	8008258 <HAL_GPIO_WritePin>
		break;
 8006198:	e006      	b.n	80061a8 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 800619a:	2200      	movs	r2, #0
 800619c:	2140      	movs	r1, #64	; 0x40
 800619e:	4807      	ldr	r0, [pc, #28]	; (80061bc <Displ_BackLight+0x58>)
 80061a0:	f002 f85a 	bl	8008258 <HAL_GPIO_WritePin>
		break;
 80061a4:	e000      	b.n	80061a8 <Displ_BackLight+0x44>
		break;
 80061a6:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 80061a8:	2140      	movs	r1, #64	; 0x40
 80061aa:	4804      	ldr	r0, [pc, #16]	; (80061bc <Displ_BackLight+0x58>)
 80061ac:	f002 f83c 	bl	8008228 <HAL_GPIO_ReadPin>
 80061b0:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40020000 	.word	0x40020000

080061c0 <testLines>:




void testLines(uint16_t color)
{
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b08b      	sub	sp, #44	; 0x2c
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	4603      	mov	r3, r0
 80061c8:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 80061ca:	4b7c      	ldr	r3, [pc, #496]	; (80063bc <testLines+0x1fc>)
 80061cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d0:	617b      	str	r3, [r7, #20]
                  h = _height;
 80061d2:	4b7b      	ldr	r3, [pc, #492]	; (80063c0 <testLines+0x200>)
 80061d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d8:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80061da:	2000      	movs	r0, #0
 80061dc:	f7ff f810 	bl	8005200 <Displ_CLS>

    x1 = y1 = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80061ee:	2300      	movs	r3, #0
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e00f      	b.n	8006214 <testLines+0x54>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	b218      	sxth	r0, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	b219      	sxth	r1, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	b21a      	sxth	r2, r3
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	b21c      	sxth	r4, r3
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4623      	mov	r3, r4
 800620a:	f7ff f9e2 	bl	80055d2 <Displ_Line>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3306      	adds	r3, #6
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	dbeb      	blt.n	80061f4 <testLines+0x34>
    x2    = w - 1;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3b01      	subs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e00f      	b.n	8006248 <testLines+0x88>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	b218      	sxth	r0, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	b219      	sxth	r1, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	b21a      	sxth	r2, r3
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	b21c      	sxth	r4, r3
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	4623      	mov	r3, r4
 800623e:	f7ff f9c8 	bl	80055d2 <Displ_Line>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3306      	adds	r3, #6
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	dbeb      	blt.n	8006228 <testLines+0x68>

    Displ_CLS(BLACK);
 8006250:	2000      	movs	r0, #0
 8006252:	f7fe ffd5 	bl	8005200 <Displ_CLS>

    x1    = w - 1;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	3b01      	subs	r3, #1
 800625a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	3b01      	subs	r3, #1
 8006264:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	e00f      	b.n	800628c <testLines+0xcc>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	b218      	sxth	r0, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	b219      	sxth	r1, r3
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	b21a      	sxth	r2, r3
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	b21c      	sxth	r4, r3
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	4623      	mov	r3, r4
 8006282:	f7ff f9a6 	bl	80055d2 <Displ_Line>
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3306      	adds	r3, #6
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	dbeb      	blt.n	800626c <testLines+0xac>
    x2    = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006298:	2300      	movs	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e00f      	b.n	80062be <testLines+0xfe>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	b218      	sxth	r0, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	b219      	sxth	r1, r3
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	b21a      	sxth	r2, r3
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	b21c      	sxth	r4, r3
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	4623      	mov	r3, r4
 80062b4:	f7ff f98d 	bl	80055d2 <Displ_Line>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3306      	adds	r3, #6
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	dbeb      	blt.n	800629e <testLines+0xde>

    Displ_CLS(BLACK);
 80062c6:	2000      	movs	r0, #0
 80062c8:	f7fe ff9a 	bl	8005200 <Displ_CLS>

    x1    = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e00f      	b.n	8006300 <testLines+0x140>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	b218      	sxth	r0, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	b219      	sxth	r1, r3
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	b21a      	sxth	r2, r3
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	b21c      	sxth	r4, r3
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	4623      	mov	r3, r4
 80062f6:	f7ff f96c 	bl	80055d2 <Displ_Line>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3306      	adds	r3, #6
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	429a      	cmp	r2, r3
 8006306:	dbeb      	blt.n	80062e0 <testLines+0x120>
    x2    = w - 1;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3b01      	subs	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800630e:	2300      	movs	r3, #0
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e00f      	b.n	8006334 <testLines+0x174>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	b218      	sxth	r0, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	b219      	sxth	r1, r3
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	b21a      	sxth	r2, r3
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	b21c      	sxth	r4, r3
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4623      	mov	r3, r4
 800632a:	f7ff f952 	bl	80055d2 <Displ_Line>
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	3306      	adds	r3, #6
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	dbeb      	blt.n	8006314 <testLines+0x154>

    Displ_CLS(BLACK);
 800633c:	2000      	movs	r0, #0
 800633e:	f7fe ff5f 	bl	8005200 <Displ_CLS>

    x1    = w - 1;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	3b01      	subs	r3, #1
 8006346:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3b01      	subs	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e00f      	b.n	8006378 <testLines+0x1b8>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	b218      	sxth	r0, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	b219      	sxth	r1, r3
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	b21a      	sxth	r2, r3
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	b21c      	sxth	r4, r3
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4623      	mov	r3, r4
 800636e:	f7ff f930 	bl	80055d2 <Displ_Line>
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3306      	adds	r3, #6
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	429a      	cmp	r2, r3
 800637e:	dbeb      	blt.n	8006358 <testLines+0x198>
    x2    = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
 8006388:	e00f      	b.n	80063aa <testLines+0x1ea>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	b218      	sxth	r0, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	b219      	sxth	r1, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	b21a      	sxth	r2, r3
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	b21c      	sxth	r4, r3
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4623      	mov	r3, r4
 80063a0:	f7ff f917 	bl	80055d2 <Displ_Line>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	3306      	adds	r3, #6
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	dbeb      	blt.n	800638a <testLines+0x1ca>

}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	3724      	adds	r7, #36	; 0x24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd90      	pop	{r4, r7, pc}
 80063bc:	20007fc2 	.word	0x20007fc2
 80063c0:	20007fc4 	.word	0x20007fc4

080063c4 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	4603      	mov	r3, r0
 80063cc:	460a      	mov	r2, r1
 80063ce:	80fb      	strh	r3, [r7, #6]
 80063d0:	4613      	mov	r3, r2
 80063d2:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 80063d4:	4b20      	ldr	r3, [pc, #128]	; (8006458 <testFastLines+0x94>)
 80063d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	4b1f      	ldr	r3, [pc, #124]	; (800645c <testFastLines+0x98>)
 80063de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063e2:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7fe ff0b 	bl	8005200 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	e011      	b.n	8006414 <testFastLines+0x50>
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b219      	sxth	r1, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	b21a      	sxth	r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	b218      	sxth	r0, r3
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4603      	mov	r3, r0
 8006408:	2000      	movs	r0, #0
 800640a:	f7ff f8e2 	bl	80055d2 <Displ_Line>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	3305      	adds	r3, #5
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	dbe9      	blt.n	80063f0 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e011      	b.n	8006446 <testFastLines+0x82>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	b218      	sxth	r0, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	b21a      	sxth	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	b219      	sxth	r1, r3
 8006434:	88bb      	ldrh	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	460b      	mov	r3, r1
 800643a:	2100      	movs	r1, #0
 800643c:	f7ff f8c9 	bl	80055d2 <Displ_Line>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3305      	adds	r3, #5
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	429a      	cmp	r2, r3
 800644c:	dbe9      	blt.n	8006422 <testFastLines+0x5e>
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20007fc2 	.word	0x20007fc2
 800645c:	20007fc4 	.word	0x20007fc4

08006460 <testRects>:




void testRects(uint16_t color)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b08b      	sub	sp, #44	; 0x2c
 8006464:	af02      	add	r7, sp, #8
 8006466:	4603      	mov	r3, r0
 8006468:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 800646a:	4b25      	ldr	r3, [pc, #148]	; (8006500 <testRects+0xa0>)
 800646c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006470:	0fda      	lsrs	r2, r3, #31
 8006472:	4413      	add	r3, r2
 8006474:	105b      	asrs	r3, r3, #1
 8006476:	b21b      	sxth	r3, r3
 8006478:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 800647a:	4b22      	ldr	r3, [pc, #136]	; (8006504 <testRects+0xa4>)
 800647c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006480:	0fda      	lsrs	r2, r3, #31
 8006482:	4413      	add	r3, r2
 8006484:	105b      	asrs	r3, r3, #1
 8006486:	b21b      	sxth	r3, r3
 8006488:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800648a:	2000      	movs	r0, #0
 800648c:	f7fe feb8 	bl	8005200 <Displ_CLS>
	n     = min(_width, _height);
 8006490:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <testRects+0xa4>)
 8006492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006496:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <testRects+0xa0>)
 8006498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649c:	4293      	cmp	r3, r2
 800649e:	bfa8      	it	ge
 80064a0:	4613      	movge	r3, r2
 80064a2:	b21b      	sxth	r3, r3
 80064a4:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 80064a6:	2302      	movs	r3, #2
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	e020      	b.n	80064ee <testRects+0x8e>
		i2 = i / 2;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	0fda      	lsrs	r2, r3, #31
 80064b0:	4413      	add	r3, r2
 80064b2:	105b      	asrs	r3, r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b218      	sxth	r0, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b219      	sxth	r1, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	b21a      	sxth	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	b21c      	sxth	r4, r3
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	2301      	movs	r3, #1
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4623      	mov	r3, r4
 80064e4:	f7ff f9a6 	bl	8005834 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3306      	adds	r3, #6
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	dbda      	blt.n	80064ac <testRects+0x4c>
	}
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	3724      	adds	r7, #36	; 0x24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}
 8006500:	20007fc2 	.word	0x20007fc2
 8006504:	20007fc4 	.word	0x20007fc4

08006508 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b08b      	sub	sp, #44	; 0x2c
 800650c:	af02      	add	r7, sp, #8
 800650e:	4603      	mov	r3, r0
 8006510:	460a      	mov	r2, r1
 8006512:	80fb      	strh	r3, [r7, #6]
 8006514:	4613      	mov	r3, r2
 8006516:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8006518:	4b30      	ldr	r3, [pc, #192]	; (80065dc <testFilledRects+0xd4>)
 800651a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651e:	0fda      	lsrs	r2, r3, #31
 8006520:	4413      	add	r3, r2
 8006522:	105b      	asrs	r3, r3, #1
 8006524:	b21b      	sxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 800652a:	4b2d      	ldr	r3, [pc, #180]	; (80065e0 <testFilledRects+0xd8>)
 800652c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006530:	0fda      	lsrs	r2, r3, #31
 8006532:	4413      	add	r3, r2
 8006534:	105b      	asrs	r3, r3, #1
 8006536:	b21b      	sxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800653c:	2000      	movs	r0, #0
 800653e:	f7fe fe5f 	bl	8005200 <Displ_CLS>
	n = min(_width, _height);
 8006542:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <testFilledRects+0xd8>)
 8006544:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006548:	4b24      	ldr	r3, [pc, #144]	; (80065dc <testFilledRects+0xd4>)
 800654a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654e:	4293      	cmp	r3, r2
 8006550:	bfa8      	it	ge
 8006552:	4613      	movge	r3, r2
 8006554:	b21b      	sxth	r3, r3
 8006556:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	e035      	b.n	80065ca <testFilledRects+0xc2>
		i2    = i / 2;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	0fda      	lsrs	r2, r3, #31
 8006562:	4413      	add	r3, r2
 8006564:	105b      	asrs	r3, r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	b29b      	uxth	r3, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	b298      	uxth	r0, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	b29b      	uxth	r3, r3
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	b299      	uxth	r1, r3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	b29a      	uxth	r2, r3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	b29c      	uxth	r4, r3
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4623      	mov	r3, r4
 800658e:	f7fe fc83 	bl	8004e98 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	b29b      	uxth	r3, r3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	b29b      	uxth	r3, r3
 800659e:	b218      	sxth	r0, r3
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	b219      	sxth	r1, r3
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	b21a      	sxth	r2, r3
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	b21c      	sxth	r4, r3
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	2301      	movs	r3, #1
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4623      	mov	r3, r4
 80065c0:	f7ff f938 	bl	8005834 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	3b06      	subs	r3, #6
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dcc6      	bgt.n	800655e <testFilledRects+0x56>
	}
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd90      	pop	{r4, r7, pc}
 80065da:	bf00      	nop
 80065dc:	20007fc2 	.word	0x20007fc2
 80065e0:	20007fc4 	.word	0x20007fc4

080065e4 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	460a      	mov	r2, r1
 80065ee:	71fb      	strb	r3, [r7, #7]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <testFilledCircles+0x74>)
 80065f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <testFilledCircles+0x78>)
 80065fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 800660a:	2000      	movs	r0, #0
 800660c:	f7fe fdf8 	bl	8005200 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e017      	b.n	8006646 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e00c      	b.n	8006636 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	b218      	sxth	r0, r3
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	b219      	sxth	r1, r3
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	b21a      	sxth	r2, r3
 8006628:	88bb      	ldrh	r3, [r7, #4]
 800662a:	f7fe ff9f 	bl	800556c <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	429a      	cmp	r2, r3
 800663c:	dbee      	blt.n	800661c <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	429a      	cmp	r2, r3
 800664c:	dbe3      	blt.n	8006616 <testFilledCircles+0x32>
        }
    }
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20007fc2 	.word	0x20007fc2
 800665c:	20007fc4 	.word	0x20007fc4

08006660 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	460a      	mov	r2, r1
 800666a:	71fb      	strb	r3, [r7, #7]
 800666c:	4613      	mov	r3, r2
 800666e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8006676:	4b19      	ldr	r3, [pc, #100]	; (80066dc <testCircles+0x7c>)
 8006678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	4413      	add	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8006684:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <testCircles+0x80>)
 8006686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
 8006696:	e017      	b.n	80066c8 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	e00c      	b.n	80066b8 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	b218      	sxth	r0, r3
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	b219      	sxth	r1, r3
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	b21a      	sxth	r2, r3
 80066aa:	88bb      	ldrh	r3, [r7, #4]
 80066ac:	f7fe fcd4 	bl	8005058 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	4413      	add	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	dbee      	blt.n	800669e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	dbe3      	blt.n	8006698 <testCircles+0x38>
        }
    }
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20007fc2 	.word	0x20007fc2
 80066e0:	20007fc4 	.word	0x20007fc4

080066e4 <testTriangles>:




void testTriangles()
{
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 80066ea:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <testTriangles+0xc0>)
 80066ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f0:	0fda      	lsrs	r2, r3, #31
 80066f2:	4413      	add	r3, r2
 80066f4:	105b      	asrs	r3, r3, #1
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80066fc:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <testTriangles+0xc4>)
 80066fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006702:	0fda      	lsrs	r2, r3, #31
 8006704:	4413      	add	r3, r2
 8006706:	105b      	asrs	r3, r3, #1
 8006708:	b21b      	sxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 800670e:	2000      	movs	r0, #0
 8006710:	f7fe fd76 	bl	8005200 <Displ_CLS>
    n     = min(cx, cy);
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4293      	cmp	r3, r2
 800671a:	bfa8      	it	ge
 800671c:	4613      	movge	r3, r2
 800671e:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e035      	b.n	8006792 <testTriangles+0xae>
    	Displ_drawTriangle(
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	b29b      	uxth	r3, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006736:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	b29b      	uxth	r3, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006744:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	b29b      	uxth	r3, r3
 800674e:	4413      	add	r3, r2
 8006750:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006752:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	b29b      	uxth	r3, r3
 800675c:	4413      	add	r3, r2
 800675e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006760:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	b291      	uxth	r1, r2
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	b292      	uxth	r2, r2
 800676a:	440a      	add	r2, r1
 800676c:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800676e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	10c9      	asrs	r1, r1, #3
 8006774:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8006776:	f001 011f 	and.w	r1, r1, #31
 800677a:	b289      	uxth	r1, r1
 800677c:	9102      	str	r1, [sp, #8]
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	4633      	mov	r3, r6
 8006784:	462a      	mov	r2, r5
 8006786:	4621      	mov	r1, r4
 8006788:	f7ff f897 	bl	80058ba <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3305      	adds	r3, #5
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	dbc5      	blt.n	8006726 <testTriangles+0x42>
    }
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067a4:	20007fc2 	.word	0x20007fc2
 80067a8:	20007fc4 	.word	0x20007fc4

080067ac <testFilledTriangles>:





void testFilledTriangles() {
 80067ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 80067b2:	4b53      	ldr	r3, [pc, #332]	; (8006900 <testFilledTriangles+0x154>)
 80067b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067b8:	0fda      	lsrs	r2, r3, #31
 80067ba:	4413      	add	r3, r2
 80067bc:	105b      	asrs	r3, r3, #1
 80067be:	b21b      	sxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 80067c4:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <testFilledTriangles+0x158>)
 80067c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ca:	0fda      	lsrs	r2, r3, #31
 80067cc:	4413      	add	r3, r2
 80067ce:	105b      	asrs	r3, r3, #1
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	3b01      	subs	r3, #1
 80067d4:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80067d6:	2000      	movs	r0, #0
 80067d8:	f7fe fd12 	bl	8005200 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	bfa8      	it	ge
 80067e4:	4613      	movge	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e080      	b.n	80068ec <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	b21c      	sxth	r4, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	b21d      	sxth	r5, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	b29b      	uxth	r3, r3
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	b21e      	sxth	r6, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	b29b      	uxth	r3, r3
 8006812:	4413      	add	r3, r2
 8006814:	b29b      	uxth	r3, r3
 8006816:	fa0f fc83 	sxth.w	ip, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	b29b      	uxth	r3, r3
 8006822:	4413      	add	r3, r2
 8006824:	b29b      	uxth	r3, r3
 8006826:	b21b      	sxth	r3, r3
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	b291      	uxth	r1, r2
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	b292      	uxth	r2, r2
 8006830:	440a      	add	r2, r1
 8006832:	b292      	uxth	r2, r2
 8006834:	b212      	sxth	r2, r2
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	00c9      	lsls	r1, r1, #3
 800683a:	b209      	sxth	r1, r1
 800683c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8006840:	b208      	sxth	r0, r1
 8006842:	68f9      	ldr	r1, [r7, #12]
 8006844:	10c9      	asrs	r1, r1, #3
 8006846:	b209      	sxth	r1, r1
 8006848:	f001 011f 	and.w	r1, r1, #31
 800684c:	b209      	sxth	r1, r1
 800684e:	4301      	orrs	r1, r0
 8006850:	b209      	sxth	r1, r1
 8006852:	b289      	uxth	r1, r1
 8006854:	9102      	str	r1, [sp, #8]
 8006856:	9201      	str	r2, [sp, #4]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	4663      	mov	r3, ip
 800685c:	4632      	mov	r2, r6
 800685e:	4629      	mov	r1, r5
 8006860:	4620      	mov	r0, r4
 8006862:	f7ff f864 	bl	800592e <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	b21c      	sxth	r4, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	b29b      	uxth	r3, r3
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	b29b      	uxth	r3, r3
 8006876:	b21d      	sxth	r5, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	b29b      	uxth	r3, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	b29b      	uxth	r3, r3
 8006884:	b21e      	sxth	r6, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	b29b      	uxth	r3, r3
 800688e:	4413      	add	r3, r2
 8006890:	b29b      	uxth	r3, r3
 8006892:	fa0f fc83 	sxth.w	ip, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	b29b      	uxth	r3, r3
 800689e:	4413      	add	r3, r2
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	b21a      	sxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	b299      	uxth	r1, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	440b      	add	r3, r1
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	b219      	sxth	r1, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	b21b      	sxth	r3, r3
 80068b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068bc:	f023 0307 	bic.w	r3, r3, #7
 80068c0:	b218      	sxth	r0, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	b21b      	sxth	r3, r3
 80068c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	4303      	orrs	r3, r0
 80068d0:	b21b      	sxth	r3, r3
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	9101      	str	r1, [sp, #4]
 80068d8:	9200      	str	r2, [sp, #0]
 80068da:	4663      	mov	r3, ip
 80068dc:	4632      	mov	r2, r6
 80068de:	4629      	mov	r1, r5
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fe ffea 	bl	80058ba <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3b05      	subs	r3, #5
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b0a      	cmp	r3, #10
 80068f0:	f73f af7b 	bgt.w	80067ea <testFilledTriangles+0x3e>
    }
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fe:	bf00      	nop
 8006900:	20007fc2 	.word	0x20007fc2
 8006904:	20007fc4 	.word	0x20007fc4

08006908 <testRoundRects>:





void testRoundRects() {
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 800690e:	4b33      	ldr	r3, [pc, #204]	; (80069dc <testRoundRects+0xd4>)
 8006910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006914:	0fda      	lsrs	r2, r3, #31
 8006916:	4413      	add	r3, r2
 8006918:	105b      	asrs	r3, r3, #1
 800691a:	b21b      	sxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8006920:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <testRoundRects+0xd8>)
 8006922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006926:	0fda      	lsrs	r2, r3, #31
 8006928:	4413      	add	r3, r2
 800692a:	105b      	asrs	r3, r3, #1
 800692c:	b21b      	sxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006932:	2000      	movs	r0, #0
 8006934:	f7fe fc64 	bl	8005200 <Displ_CLS>
    w     = min(_width, _height);
 8006938:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <testRoundRects+0xd8>)
 800693a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800693e:	4b27      	ldr	r3, [pc, #156]	; (80069dc <testRoundRects+0xd4>)
 8006940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006944:	4293      	cmp	r3, r2
 8006946:	bfa8      	it	ge
 8006948:	4613      	movge	r3, r2
 800694a:	b21b      	sxth	r3, r3
 800694c:	60fb      	str	r3, [r7, #12]
    red = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8006952:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	fb92 f3f3 	sdiv	r3, r2, r3
 800695c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
 8006962:	e031      	b.n	80069c8 <testRoundRects+0xc0>
        i2 = i / 2;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	0fda      	lsrs	r2, r3, #31
 8006968:	4413      	add	r3, r2
 800696a:	105b      	asrs	r3, r3, #1
 800696c:	607b      	str	r3, [r7, #4]
        red += step;
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4413      	add	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	b29a      	uxth	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	b29b      	uxth	r3, r3
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	b29b      	uxth	r3, r3
 8006982:	b218      	sxth	r0, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	b29b      	uxth	r3, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	b219      	sxth	r1, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	b21c      	sxth	r4, r3
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	b21d      	sxth	r5, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	da00      	bge.n	80069a2 <testRoundRects+0x9a>
 80069a0:	3307      	adds	r3, #7
 80069a2:	10db      	asrs	r3, r3, #3
 80069a4:	b21a      	sxth	r2, r3
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	9200      	str	r2, [sp, #0]
 80069ba:	462b      	mov	r3, r5
 80069bc:	4622      	mov	r2, r4
 80069be:	f7ff fa27 	bl	8005e10 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	3306      	adds	r3, #6
 80069c6:	61fb      	str	r3, [r7, #28]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	dbc9      	blt.n	8006964 <testRoundRects+0x5c>
    }
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bdb0      	pop	{r4, r5, r7, pc}
 80069da:	bf00      	nop
 80069dc:	20007fc2 	.word	0x20007fc2
 80069e0:	20007fc4 	.word	0x20007fc4

080069e4 <testFilledRoundRects>:





void testFilledRoundRects() {
 80069e4:	b5b0      	push	{r4, r5, r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 80069ea:	4b36      	ldr	r3, [pc, #216]	; (8006ac4 <testFilledRoundRects+0xe0>)
 80069ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f0:	0fda      	lsrs	r2, r3, #31
 80069f2:	4413      	add	r3, r2
 80069f4:	105b      	asrs	r3, r3, #1
 80069f6:	b21b      	sxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 80069fc:	4b32      	ldr	r3, [pc, #200]	; (8006ac8 <testFilledRoundRects+0xe4>)
 80069fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a02:	0fda      	lsrs	r2, r3, #31
 8006a04:	4413      	add	r3, r2
 8006a06:	105b      	asrs	r3, r3, #1
 8006a08:	b21b      	sxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7fe fbf6 	bl	8005200 <Displ_CLS>
    green = 256;
 8006a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a18:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8006a1a:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <testFilledRoundRects+0xe4>)
 8006a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a20:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <testFilledRoundRects+0xe0>)
 8006a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	bfa8      	it	ge
 8006a2a:	4613      	movge	r3, r2
 8006a2c:	b21b      	sxth	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a38:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006a3a:	4b23      	ldr	r3, [pc, #140]	; (8006ac8 <testFilledRoundRects+0xe4>)
 8006a3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a40:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <testFilledRoundRects+0xe0>)
 8006a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	bfa8      	it	ge
 8006a4a:	4613      	movge	r3, r2
 8006a4c:	b21b      	sxth	r3, r3
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e02f      	b.n	8006ab2 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	0fda      	lsrs	r2, r3, #31
 8006a56:	4413      	add	r3, r2
 8006a58:	105b      	asrs	r3, r3, #1
 8006a5a:	603b      	str	r3, [r7, #0]
        green -= step;
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	b218      	sxth	r0, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	b219      	sxth	r1, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	b21c      	sxth	r4, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	b21d      	sxth	r5, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da00      	bge.n	8006a90 <testFilledRoundRects+0xac>
 8006a8e:	3307      	adds	r3, #7
 8006a90:	10db      	asrs	r3, r3, #3
 8006a92:	b21b      	sxth	r3, r3
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	00d2      	lsls	r2, r2, #3
 8006a98:	b292      	uxth	r2, r2
 8006a9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8006a9e:	b292      	uxth	r2, r2
 8006aa0:	9201      	str	r2, [sp, #4]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	f7ff faa7 	bl	8005ffa <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3b06      	subs	r3, #6
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b14      	cmp	r3, #20
 8006ab6:	dccc      	bgt.n	8006a52 <testFilledRoundRects+0x6e>
    }
}
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20007fc2 	.word	0x20007fc2
 8006ac8:	20007fc4 	.word	0x20007fc4

08006acc <testFillScreen>:




void testFillScreen()
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8006ad0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006ad4:	f7fe fb94 	bl	8005200 <Displ_CLS>
	Displ_CLS(GREEN);
 8006ad8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006adc:	f7fe fb90 	bl	8005200 <Displ_CLS>
	Displ_CLS(BLUE);
 8006ae0:	201f      	movs	r0, #31
 8006ae2:	f7fe fb8d 	bl	8005200 <Displ_CLS>
	Displ_CLS(YELLOW);
 8006ae6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006aea:	f7fe fb89 	bl	8005200 <Displ_CLS>
	Displ_CLS(BLACK);
 8006aee:	2000      	movs	r0, #0
 8006af0:	f7fe fb86 	bl	8005200 <Displ_CLS>
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <Displ_TestAll>:





void Displ_TestAll (){
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
	testFillScreen();
 8006afc:	f7ff ffe6 	bl	8006acc <testFillScreen>
	testLines(CYAN);
 8006b00:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8006b04:	f7ff fb5c 	bl	80061c0 <testLines>
	testFastLines(RED, BLUE);
 8006b08:	211f      	movs	r1, #31
 8006b0a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8006b0e:	f7ff fc59 	bl	80063c4 <testFastLines>
	testRects(GREEN);
 8006b12:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8006b16:	f7ff fca3 	bl	8006460 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 8006b1a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006b1e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8006b22:	f7ff fcf1 	bl	8006508 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 8006b26:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8006b2a:	200a      	movs	r0, #10
 8006b2c:	f7ff fd5a 	bl	80065e4 <testFilledCircles>
	testCircles(10, WHITE);
 8006b30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b34:	200a      	movs	r0, #10
 8006b36:	f7ff fd93 	bl	8006660 <testCircles>
	testTriangles();
 8006b3a:	f7ff fdd3 	bl	80066e4 <testTriangles>
	testFilledTriangles();
 8006b3e:	f7ff fe35 	bl	80067ac <testFilledTriangles>
	testRoundRects();
 8006b42:	f7ff fee1 	bl	8006908 <testRoundRects>
	testFilledRoundRects();
 8006b46:	f7ff ff4d 	bl	80069e4 <testFilledRoundRects>
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b54:	480d      	ldr	r0, [pc, #52]	; (8006b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006b56:	490e      	ldr	r1, [pc, #56]	; (8006b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006b58:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b5c:	e002      	b.n	8006b64 <LoopCopyDataInit>

08006b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b62:	3304      	adds	r3, #4

08006b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b68:	d3f9      	bcc.n	8006b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b6a:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006b6c:	4c0b      	ldr	r4, [pc, #44]	; (8006b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b70:	e001      	b.n	8006b76 <LoopFillZerobss>

08006b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b74:	3204      	adds	r2, #4

08006b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b78:	d3fb      	bcc.n	8006b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006b7a:	f7fd fde1 	bl	8004740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b7e:	f005 fa6b 	bl	800c058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b82:	f7fc fc37 	bl	80033f4 <main>
  bx  lr    
 8006b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b90:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006b94:	08013dd8 	.word	0x08013dd8
  ldr r2, =_sbss
 8006b98:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006b9c:	20009120 	.word	0x20009120

08006ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ba0:	e7fe      	b.n	8006ba0 <ADC_IRQHandler>
	...

08006ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <HAL_Init+0x40>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a0d      	ldr	r2, [pc, #52]	; (8006be4 <HAL_Init+0x40>)
 8006bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_Init+0x40>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a0a      	ldr	r2, [pc, #40]	; (8006be4 <HAL_Init+0x40>)
 8006bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <HAL_Init+0x40>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <HAL_Init+0x40>)
 8006bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006bcc:	2003      	movs	r0, #3
 8006bce:	f000 fd53 	bl	8007678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f000 f808 	bl	8006be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bd8:	f7fd f9ee 	bl	8003fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40023c00 	.word	0x40023c00

08006be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <HAL_InitTick+0x54>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_InitTick+0x58>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fd6b 	bl	80076e2 <HAL_SYSTICK_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e00e      	b.n	8006c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b0f      	cmp	r3, #15
 8006c1a:	d80a      	bhi.n	8006c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c24:	f000 fd33 	bl	800768e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c28:	4a06      	ldr	r2, [pc, #24]	; (8006c44 <HAL_InitTick+0x5c>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e000      	b.n	8006c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000030 	.word	0x20000030
 8006c40:	20000040 	.word	0x20000040
 8006c44:	2000003c 	.word	0x2000003c

08006c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_IncTick+0x20>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <HAL_IncTick+0x24>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4413      	add	r3, r2
 8006c58:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <HAL_IncTick+0x24>)
 8006c5a:	6013      	str	r3, [r2, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000040 	.word	0x20000040
 8006c6c:	20008fd0 	.word	0x20008fd0

08006c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  return uwTick;
 8006c74:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <HAL_GetTick+0x14>)
 8006c76:	681b      	ldr	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20008fd0 	.word	0x20008fd0

08006c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c90:	f7ff ffee 	bl	8006c70 <HAL_GetTick>
 8006c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ca0:	d005      	beq.n	8006cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <HAL_Delay+0x44>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cae:	bf00      	nop
 8006cb0:	f7ff ffde 	bl	8006c70 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d8f7      	bhi.n	8006cb0 <HAL_Delay+0x28>
  {
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000040 	.word	0x20000040

08006cd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e033      	b.n	8006d4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fd f98a 	bl	8004008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d118      	bne.n	8006d40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d16:	f023 0302 	bic.w	r3, r3, #2
 8006d1a:	f043 0202 	orr.w	r2, r3, #2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa5a 	bl	80071dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	f043 0201 	orr.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8006d3e:	e001      	b.n	8006d44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_ADC_Start_DMA+0x1e>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e0e9      	b.n	8006f4a <HAL_ADC_Start_DMA+0x1f2>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d018      	beq.n	8006dbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d9c:	4b6d      	ldr	r3, [pc, #436]	; (8006f54 <HAL_ADC_Start_DMA+0x1fc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a6d      	ldr	r2, [pc, #436]	; (8006f58 <HAL_ADC_Start_DMA+0x200>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	0c9a      	lsrs	r2, r3, #18
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006db0:	e002      	b.n	8006db8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f9      	bne.n	8006db2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dcc:	d107      	bne.n	8006dde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f040 80a1 	bne.w	8006f30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d106      	bne.n	8006e3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e32:	f023 0206 	bic.w	r2, r3, #6
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
 8006e3a:	e002      	b.n	8006e42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e4a:	4b44      	ldr	r3, [pc, #272]	; (8006f5c <HAL_ADC_Start_DMA+0x204>)
 8006e4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	4a43      	ldr	r2, [pc, #268]	; (8006f60 <HAL_ADC_Start_DMA+0x208>)
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	4a42      	ldr	r2, [pc, #264]	; (8006f64 <HAL_ADC_Start_DMA+0x20c>)
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	4a41      	ldr	r2, [pc, #260]	; (8006f68 <HAL_ADC_Start_DMA+0x210>)
 8006e64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	334c      	adds	r3, #76	; 0x4c
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f000 fcda 	bl	8007858 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d12a      	bne.n	8006f06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_ADC_Start_DMA+0x214>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d015      	beq.n	8006ee6 <HAL_ADC_Start_DMA+0x18e>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <HAL_ADC_Start_DMA+0x218>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d105      	bne.n	8006ed0 <HAL_ADC_Start_DMA+0x178>
 8006ec4:	4b25      	ldr	r3, [pc, #148]	; (8006f5c <HAL_ADC_Start_DMA+0x204>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <HAL_ADC_Start_DMA+0x21c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d136      	bne.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <HAL_ADC_Start_DMA+0x204>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d130      	bne.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d129      	bne.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f02:	609a      	str	r2, [r3, #8]
 8006f04:	e020      	b.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_ADC_Start_DMA+0x214>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d11b      	bne.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d114      	bne.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f2c:	609a      	str	r2, [r3, #8]
 8006f2e:	e00b      	b.n	8006f48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	f043 0210 	orr.w	r2, r3, #16
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	f043 0201 	orr.w	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000030 	.word	0x20000030
 8006f58:	431bde83 	.word	0x431bde83
 8006f5c:	40012300 	.word	0x40012300
 8006f60:	080073d5 	.word	0x080073d5
 8006f64:	0800748f 	.word	0x0800748f
 8006f68:	080074ab 	.word	0x080074ab
 8006f6c:	40012000 	.word	0x40012000
 8006f70:	40012100 	.word	0x40012100
 8006f74:	40012200 	.word	0x40012200

08006f78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_ADC_ConfigChannel+0x1c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e113      	b.n	80071bc <HAL_ADC_ConfigChannel+0x244>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b09      	cmp	r3, #9
 8006fa2:	d925      	bls.n	8006ff0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68d9      	ldr	r1, [r3, #12]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	005b      	lsls	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3b1e      	subs	r3, #30
 8006fba:	2207      	movs	r2, #7
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	43da      	mvns	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68d9      	ldr	r1, [r3, #12]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4603      	mov	r3, r0
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4403      	add	r3, r0
 8006fe2:	3b1e      	subs	r3, #30
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	e022      	b.n	8007036 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6919      	ldr	r1, [r3, #16]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	2207      	movs	r2, #7
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43da      	mvns	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	400a      	ands	r2, r1
 8007012:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6919      	ldr	r1, [r3, #16]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	b29b      	uxth	r3, r3
 8007024:	4618      	mov	r0, r3
 8007026:	4603      	mov	r3, r0
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4403      	add	r3, r0
 800702c:	409a      	lsls	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b06      	cmp	r3, #6
 800703c:	d824      	bhi.n	8007088 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	3b05      	subs	r3, #5
 8007050:	221f      	movs	r2, #31
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43da      	mvns	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	400a      	ands	r2, r1
 800705e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	4618      	mov	r0, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	3b05      	subs	r3, #5
 800707a:	fa00 f203 	lsl.w	r2, r0, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
 8007086:	e04c      	b.n	8007122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d824      	bhi.n	80070da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	3b23      	subs	r3, #35	; 0x23
 80070a2:	221f      	movs	r2, #31
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43da      	mvns	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	400a      	ands	r2, r1
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	4618      	mov	r0, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	3b23      	subs	r3, #35	; 0x23
 80070cc:	fa00 f203 	lsl.w	r2, r0, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
 80070d8:	e023      	b.n	8007122 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	3b41      	subs	r3, #65	; 0x41
 80070ec:	221f      	movs	r2, #31
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	400a      	ands	r2, r1
 80070fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	4618      	mov	r0, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	3b41      	subs	r3, #65	; 0x41
 8007116:	fa00 f203 	lsl.w	r2, r0, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007122:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <HAL_ADC_ConfigChannel+0x250>)
 8007124:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a28      	ldr	r2, [pc, #160]	; (80071cc <HAL_ADC_ConfigChannel+0x254>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d10f      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x1d8>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b12      	cmp	r3, #18
 8007136:	d10b      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <HAL_ADC_ConfigChannel+0x254>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d12b      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x23a>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_ADC_ConfigChannel+0x258>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <HAL_ADC_ConfigChannel+0x1f4>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b11      	cmp	r3, #17
 800716a:	d122      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <HAL_ADC_ConfigChannel+0x258>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d111      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800718e:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <HAL_ADC_ConfigChannel+0x25c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a11      	ldr	r2, [pc, #68]	; (80071d8 <HAL_ADC_ConfigChannel+0x260>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	0c9a      	lsrs	r2, r3, #18
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071a4:	e002      	b.n	80071ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f9      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	40012300 	.word	0x40012300
 80071cc:	40012000 	.word	0x40012000
 80071d0:	10000012 	.word	0x10000012
 80071d4:	20000030 	.word	0x20000030
 80071d8:	431bde83 	.word	0x431bde83

080071dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071e4:	4b79      	ldr	r3, [pc, #484]	; (80073cc <ADC_Init+0x1f0>)
 80071e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6859      	ldr	r1, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	021a      	lsls	r2, r3, #8
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6859      	ldr	r1, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6899      	ldr	r1, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	4a58      	ldr	r2, [pc, #352]	; (80073d0 <ADC_Init+0x1f4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6899      	ldr	r1, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6899      	ldr	r1, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	e00f      	b.n	80072da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80072d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0202 	bic.w	r2, r2, #2
 80072e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6899      	ldr	r1, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7e1b      	ldrb	r3, [r3, #24]
 80072f4:	005a      	lsls	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01b      	beq.n	8007340 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6859      	ldr	r1, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	3b01      	subs	r3, #1
 8007334:	035a      	lsls	r2, r3, #13
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	e007      	b.n	8007350 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800734e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800735e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	3b01      	subs	r3, #1
 800736c:	051a      	lsls	r2, r3, #20
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6899      	ldr	r1, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007392:	025a      	lsls	r2, r3, #9
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6899      	ldr	r1, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	029a      	lsls	r2, r3, #10
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40012300 	.word	0x40012300
 80073d0:	0f000001 	.word	0x0f000001

080073d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d13c      	bne.n	8007468 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d12b      	bne.n	8007460 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800740c:	2b00      	cmp	r3, #0
 800740e:	d127      	bne.n	8007460 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007428:	2b00      	cmp	r3, #0
 800742a:	d119      	bne.n	8007460 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0220 	bic.w	r2, r2, #32
 800743a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	f043 0201 	orr.w	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7fc fcc3 	bl	8003dec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007466:	e00e      	b.n	8007486 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7fc fcf9 	bl	8003e6c <HAL_ADC_ErrorCallback>
}
 800747a:	e004      	b.n	8007486 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7fc fcc5 	bl	8003e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2240      	movs	r2, #64	; 0x40
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	f043 0204 	orr.w	r2, r3, #4
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7fc fcce 	bl	8003e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <__NVIC_SetPriorityGrouping+0x44>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074f4:	4013      	ands	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <__NVIC_SetPriorityGrouping+0x44>)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	60d3      	str	r3, [r2, #12]
}
 8007510:	bf00      	nop
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	e000ed00 	.word	0xe000ed00

08007520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <__NVIC_GetPriorityGrouping+0x18>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	f003 0307 	and.w	r3, r3, #7
}
 800752e:	4618      	mov	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	e000ed00 	.word	0xe000ed00

0800753c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754a:	2b00      	cmp	r3, #0
 800754c:	db0b      	blt.n	8007566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	f003 021f 	and.w	r2, r3, #31
 8007554:	4907      	ldr	r1, [pc, #28]	; (8007574 <__NVIC_EnableIRQ+0x38>)
 8007556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	2001      	movs	r0, #1
 800755e:	fa00 f202 	lsl.w	r2, r0, r2
 8007562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	e000e100 	.word	0xe000e100

08007578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db0a      	blt.n	80075a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	b2da      	uxtb	r2, r3
 8007590:	490c      	ldr	r1, [pc, #48]	; (80075c4 <__NVIC_SetPriority+0x4c>)
 8007592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007596:	0112      	lsls	r2, r2, #4
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	440b      	add	r3, r1
 800759c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075a0:	e00a      	b.n	80075b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4908      	ldr	r1, [pc, #32]	; (80075c8 <__NVIC_SetPriority+0x50>)
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	3b04      	subs	r3, #4
 80075b0:	0112      	lsls	r2, r2, #4
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	440b      	add	r3, r1
 80075b6:	761a      	strb	r2, [r3, #24]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	e000e100 	.word	0xe000e100
 80075c8:	e000ed00 	.word	0xe000ed00

080075cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	; 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f1c3 0307 	rsb	r3, r3, #7
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	bf28      	it	cs
 80075ea:	2304      	movcs	r3, #4
 80075ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	3304      	adds	r3, #4
 80075f2:	2b06      	cmp	r3, #6
 80075f4:	d902      	bls.n	80075fc <NVIC_EncodePriority+0x30>
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	3b03      	subs	r3, #3
 80075fa:	e000      	b.n	80075fe <NVIC_EncodePriority+0x32>
 80075fc:	2300      	movs	r3, #0
 80075fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43da      	mvns	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	401a      	ands	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	fa01 f303 	lsl.w	r3, r1, r3
 800761e:	43d9      	mvns	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007624:	4313      	orrs	r3, r2
         );
}
 8007626:	4618      	mov	r0, r3
 8007628:	3724      	adds	r7, #36	; 0x24
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3b01      	subs	r3, #1
 8007640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007644:	d301      	bcc.n	800764a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007646:	2301      	movs	r3, #1
 8007648:	e00f      	b.n	800766a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <SysTick_Config+0x40>)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3b01      	subs	r3, #1
 8007650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007652:	210f      	movs	r1, #15
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007658:	f7ff ff8e 	bl	8007578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <SysTick_Config+0x40>)
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007662:	4b04      	ldr	r3, [pc, #16]	; (8007674 <SysTick_Config+0x40>)
 8007664:	2207      	movs	r2, #7
 8007666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	e000e010 	.word	0xe000e010

08007678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff29 	bl	80074d8 <__NVIC_SetPriorityGrouping>
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800768e:	b580      	push	{r7, lr}
 8007690:	b086      	sub	sp, #24
 8007692:	af00      	add	r7, sp, #0
 8007694:	4603      	mov	r3, r0
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076a0:	f7ff ff3e 	bl	8007520 <__NVIC_GetPriorityGrouping>
 80076a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f7ff ff8e 	bl	80075cc <NVIC_EncodePriority>
 80076b0:	4602      	mov	r2, r0
 80076b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff ff5d 	bl	8007578 <__NVIC_SetPriority>
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	4603      	mov	r3, r0
 80076ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff ff31 	bl	800753c <__NVIC_EnableIRQ>
}
 80076da:	bf00      	nop
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff ffa2 	bl	8007634 <SysTick_Config>
 80076f0:	4603      	mov	r3, r0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007708:	f7ff fab2 	bl	8006c70 <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e099      	b.n	800784c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0201 	bic.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007738:	e00f      	b.n	800775a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800773a:	f7ff fa99 	bl	8006c70 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b05      	cmp	r3, #5
 8007746:	d908      	bls.n	800775a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2203      	movs	r2, #3
 8007752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e078      	b.n	800784c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e8      	bne.n	800773a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4b38      	ldr	r3, [pc, #224]	; (8007854 <HAL_DMA_Init+0x158>)
 8007774:	4013      	ands	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800779e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d107      	bne.n	80077c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	4313      	orrs	r3, r2
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d117      	bne.n	800781e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00e      	beq.n	800781e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fb01 	bl	8007e08 <DMA_CheckFifoParam>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2240      	movs	r2, #64	; 0x40
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800781a:	2301      	movs	r3, #1
 800781c:	e016      	b.n	800784c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fab8 	bl	8007d9c <DMA_CalcBaseAndBitshift>
 800782c:	4603      	mov	r3, r0
 800782e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007834:	223f      	movs	r2, #63	; 0x3f
 8007836:	409a      	lsls	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	f010803f 	.word	0xf010803f

08007858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_DMA_Start_IT+0x26>
 800787a:	2302      	movs	r3, #2
 800787c:	e040      	b.n	8007900 <HAL_DMA_Start_IT+0xa8>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d12f      	bne.n	80078f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fa4a 	bl	8007d40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b0:	223f      	movs	r2, #63	; 0x3f
 80078b2:	409a      	lsls	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0216 	orr.w	r2, r2, #22
 80078c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0208 	orr.w	r2, r2, #8
 80078de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f042 0201 	orr.w	r2, r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e005      	b.n	80078fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80078fa:	2302      	movs	r3, #2
 80078fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007914:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007916:	f7ff f9ab 	bl	8006c70 <HAL_GetTick>
 800791a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d008      	beq.n	800793a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e052      	b.n	80079e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0216 	bic.w	r2, r2, #22
 8007948:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007958:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <HAL_DMA_Abort+0x62>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 0208 	bic.w	r2, r2, #8
 8007978:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800798a:	e013      	b.n	80079b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800798c:	f7ff f970 	bl	8006c70 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b05      	cmp	r3, #5
 8007998:	d90c      	bls.n	80079b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e015      	b.n	80079e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e4      	bne.n	800798c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	223f      	movs	r2, #63	; 0x3f
 80079c8:	409a      	lsls	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d004      	beq.n	8007a06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2280      	movs	r2, #128	; 0x80
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e00c      	b.n	8007a20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2205      	movs	r2, #5
 8007a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a38:	4b8e      	ldr	r3, [pc, #568]	; (8007c74 <HAL_DMA_IRQHandler+0x248>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a8e      	ldr	r2, [pc, #568]	; (8007c78 <HAL_DMA_IRQHandler+0x24c>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0a9b      	lsrs	r3, r3, #10
 8007a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a56:	2208      	movs	r2, #8
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01a      	beq.n	8007a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d013      	beq.n	8007a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0204 	bic.w	r2, r2, #4
 8007a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a84:	2208      	movs	r2, #8
 8007a86:	409a      	lsls	r2, r3
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a90:	f043 0201 	orr.w	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aba:	2201      	movs	r2, #1
 8007abc:	409a      	lsls	r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f043 0202 	orr.w	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d012      	beq.n	8007b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af0:	2204      	movs	r2, #4
 8007af2:	409a      	lsls	r2, r3
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	f043 0204 	orr.w	r2, r3, #4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b08:	2210      	movs	r2, #16
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d043      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d03c      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b26:	2210      	movs	r2, #16
 8007b28:	409a      	lsls	r2, r3
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d018      	beq.n	8007b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d108      	bne.n	8007b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d024      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
 8007b5a:	e01f      	b.n	8007b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01b      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
 8007b6c:	e016      	b.n	8007b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0208 	bic.w	r2, r2, #8
 8007b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 808f 	beq.w	8007ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8087 	beq.w	8007ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d136      	bne.n	8007c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0216 	bic.w	r2, r2, #22
 8007be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695a      	ldr	r2, [r3, #20]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <HAL_DMA_IRQHandler+0x1da>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0208 	bic.w	r2, r2, #8
 8007c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1a:	223f      	movs	r2, #63	; 0x3f
 8007c1c:	409a      	lsls	r2, r3
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d07e      	beq.n	8007d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
        }
        return;
 8007c42:	e079      	b.n	8007d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01d      	beq.n	8007c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10d      	bne.n	8007c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d031      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	4798      	blx	r3
 8007c70:	e02c      	b.n	8007ccc <HAL_DMA_IRQHandler+0x2a0>
 8007c72:	bf00      	nop
 8007c74:	20000030 	.word	0x20000030
 8007c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d023      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
 8007c8c:	e01e      	b.n	8007ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10f      	bne.n	8007cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0210 	bic.w	r2, r2, #16
 8007caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d032      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d022      	beq.n	8007d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2205      	movs	r2, #5
 8007ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0201 	bic.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60bb      	str	r3, [r7, #8]
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d307      	bcc.n	8007d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f2      	bne.n	8007cf8 <HAL_DMA_IRQHandler+0x2cc>
 8007d12:	e000      	b.n	8007d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	4798      	blx	r3
 8007d36:	e000      	b.n	8007d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007d38:	bf00      	nop
    }
  }
}
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d108      	bne.n	8007d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007d7e:	e007      	b.n	8007d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	3b10      	subs	r3, #16
 8007dac:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <DMA_CalcBaseAndBitshift+0x64>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	091b      	lsrs	r3, r3, #4
 8007db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <DMA_CalcBaseAndBitshift+0x68>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d909      	bls.n	8007dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	659a      	str	r2, [r3, #88]	; 0x58
 8007ddc:	e007      	b.n	8007dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	aaaaaaab 	.word	0xaaaaaaab
 8007e04:	08013a34 	.word	0x08013a34

08007e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d11f      	bne.n	8007e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d856      	bhi.n	8007ed6 <DMA_CheckFifoParam+0xce>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <DMA_CheckFifoParam+0x28>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e53 	.word	0x08007e53
 8007e38:	08007e41 	.word	0x08007e41
 8007e3c:	08007ed7 	.word	0x08007ed7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d046      	beq.n	8007eda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e50:	e043      	b.n	8007eda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e5a:	d140      	bne.n	8007ede <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e60:	e03d      	b.n	8007ede <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e6a:	d121      	bne.n	8007eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d837      	bhi.n	8007ee2 <DMA_CheckFifoParam+0xda>
 8007e72:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <DMA_CheckFifoParam+0x70>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007e8f 	.word	0x08007e8f
 8007e80:	08007e89 	.word	0x08007e89
 8007e84:	08007ea1 	.word	0x08007ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e030      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d025      	beq.n	8007ee6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e9e:	e022      	b.n	8007ee6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ea8:	d11f      	bne.n	8007eea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007eae:	e01c      	b.n	8007eea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d903      	bls.n	8007ebe <DMA_CheckFifoParam+0xb6>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d003      	beq.n	8007ec4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ebc:	e018      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	e015      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00e      	beq.n	8007eee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed4:	e00b      	b.n	8007eee <DMA_CheckFifoParam+0xe6>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e00a      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8007eda:	bf00      	nop
 8007edc:	e008      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ede:	bf00      	nop
 8007ee0:	e006      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e004      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e002      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <DMA_CheckFifoParam+0xe8>
      break;
 8007eee:	bf00      	nop
    }
  } 
  
  return status; 
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e165      	b.n	80081e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	f040 8154 	bne.w	80081e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d005      	beq.n	8007f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d130      	bne.n	8007fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f62:	43db      	mvns	r3, r3
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4013      	ands	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f88:	2201      	movs	r2, #1
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f90:	43db      	mvns	r3, r3
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	4013      	ands	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 0201 	and.w	r2, r3, #1
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 0303 	and.w	r3, r3, #3
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d017      	beq.n	8007ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	2203      	movs	r2, #3
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d123      	bne.n	8008044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	08da      	lsrs	r2, r3, #3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3208      	adds	r2, #8
 8008004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	220f      	movs	r2, #15
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	43db      	mvns	r3, r3
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4013      	ands	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	4313      	orrs	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	08da      	lsrs	r2, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3208      	adds	r2, #8
 800803e:	69b9      	ldr	r1, [r7, #24]
 8008040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	2203      	movs	r2, #3
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	43db      	mvns	r3, r3
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4013      	ands	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0203 	and.w	r2, r3, #3
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4313      	orrs	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80ae 	beq.w	80081e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	4b5d      	ldr	r3, [pc, #372]	; (8008200 <HAL_GPIO_Init+0x300>)
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	4a5c      	ldr	r2, [pc, #368]	; (8008200 <HAL_GPIO_Init+0x300>)
 8008090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008094:	6453      	str	r3, [r2, #68]	; 0x44
 8008096:	4b5a      	ldr	r3, [pc, #360]	; (8008200 <HAL_GPIO_Init+0x300>)
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080a2:	4a58      	ldr	r2, [pc, #352]	; (8008204 <HAL_GPIO_Init+0x304>)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	3302      	adds	r3, #2
 80080aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	220f      	movs	r2, #15
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	43db      	mvns	r3, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a4f      	ldr	r2, [pc, #316]	; (8008208 <HAL_GPIO_Init+0x308>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d025      	beq.n	800811a <HAL_GPIO_Init+0x21a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a4e      	ldr	r2, [pc, #312]	; (800820c <HAL_GPIO_Init+0x30c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01f      	beq.n	8008116 <HAL_GPIO_Init+0x216>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a4d      	ldr	r2, [pc, #308]	; (8008210 <HAL_GPIO_Init+0x310>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d019      	beq.n	8008112 <HAL_GPIO_Init+0x212>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a4c      	ldr	r2, [pc, #304]	; (8008214 <HAL_GPIO_Init+0x314>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <HAL_GPIO_Init+0x20e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a4b      	ldr	r2, [pc, #300]	; (8008218 <HAL_GPIO_Init+0x318>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00d      	beq.n	800810a <HAL_GPIO_Init+0x20a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a4a      	ldr	r2, [pc, #296]	; (800821c <HAL_GPIO_Init+0x31c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d007      	beq.n	8008106 <HAL_GPIO_Init+0x206>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a49      	ldr	r2, [pc, #292]	; (8008220 <HAL_GPIO_Init+0x320>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d101      	bne.n	8008102 <HAL_GPIO_Init+0x202>
 80080fe:	2306      	movs	r3, #6
 8008100:	e00c      	b.n	800811c <HAL_GPIO_Init+0x21c>
 8008102:	2307      	movs	r3, #7
 8008104:	e00a      	b.n	800811c <HAL_GPIO_Init+0x21c>
 8008106:	2305      	movs	r3, #5
 8008108:	e008      	b.n	800811c <HAL_GPIO_Init+0x21c>
 800810a:	2304      	movs	r3, #4
 800810c:	e006      	b.n	800811c <HAL_GPIO_Init+0x21c>
 800810e:	2303      	movs	r3, #3
 8008110:	e004      	b.n	800811c <HAL_GPIO_Init+0x21c>
 8008112:	2302      	movs	r3, #2
 8008114:	e002      	b.n	800811c <HAL_GPIO_Init+0x21c>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <HAL_GPIO_Init+0x21c>
 800811a:	2300      	movs	r3, #0
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	f002 0203 	and.w	r2, r2, #3
 8008122:	0092      	lsls	r2, r2, #2
 8008124:	4093      	lsls	r3, r2
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4313      	orrs	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800812c:	4935      	ldr	r1, [pc, #212]	; (8008204 <HAL_GPIO_Init+0x304>)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	089b      	lsrs	r3, r3, #2
 8008132:	3302      	adds	r3, #2
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800813a:	4b3a      	ldr	r3, [pc, #232]	; (8008224 <HAL_GPIO_Init+0x324>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	43db      	mvns	r3, r3
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	4013      	ands	r3, r2
 8008148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800815e:	4a31      	ldr	r2, [pc, #196]	; (8008224 <HAL_GPIO_Init+0x324>)
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008164:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <HAL_GPIO_Init+0x324>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	43db      	mvns	r3, r3
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4013      	ands	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008188:	4a26      	ldr	r2, [pc, #152]	; (8008224 <HAL_GPIO_Init+0x324>)
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800818e:	4b25      	ldr	r3, [pc, #148]	; (8008224 <HAL_GPIO_Init+0x324>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	43db      	mvns	r3, r3
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	4013      	ands	r3, r2
 800819c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081b2:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <HAL_GPIO_Init+0x324>)
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081b8:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <HAL_GPIO_Init+0x324>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4013      	ands	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081dc:	4a11      	ldr	r2, [pc, #68]	; (8008224 <HAL_GPIO_Init+0x324>)
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	3301      	adds	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2b0f      	cmp	r3, #15
 80081ec:	f67f ae96 	bls.w	8007f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	3724      	adds	r7, #36	; 0x24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40023800 	.word	0x40023800
 8008204:	40013800 	.word	0x40013800
 8008208:	40020000 	.word	0x40020000
 800820c:	40020400 	.word	0x40020400
 8008210:	40020800 	.word	0x40020800
 8008214:	40020c00 	.word	0x40020c00
 8008218:	40021000 	.word	0x40021000
 800821c:	40021400 	.word	0x40021400
 8008220:	40021800 	.word	0x40021800
 8008224:	40013c00 	.word	0x40013c00

08008228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	e001      	b.n	800824a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	807b      	strh	r3, [r7, #2]
 8008264:	4613      	mov	r3, r2
 8008266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008268:	787b      	ldrb	r3, [r7, #1]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800826e:	887a      	ldrh	r2, [r7, #2]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008274:	e003      	b.n	800827e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008276:	887b      	ldrh	r3, [r7, #2]
 8008278:	041a      	lsls	r2, r3, #16
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800829c:	887a      	ldrh	r2, [r7, #2]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4013      	ands	r3, r2
 80082a2:	041a      	lsls	r2, r3, #16
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	43d9      	mvns	r1, r3
 80082a8:	887b      	ldrh	r3, [r7, #2]
 80082aa:	400b      	ands	r3, r1
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	619a      	str	r2, [r3, #24]
}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
	...

080082c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80082ca:	4b08      	ldr	r3, [pc, #32]	; (80082ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	4013      	ands	r3, r2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d006      	beq.n	80082e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082d6:	4a05      	ldr	r2, [pc, #20]	; (80082ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f806 	bl	80082f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80082e4:	bf00      	nop
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40013c00 	.word	0x40013c00

080082f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	603b      	str	r3, [r7, #0]
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <HAL_PWREx_EnableOverDrive+0x90>)
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <HAL_PWREx_EnableOverDrive+0x90>)
 800831c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008320:	6413      	str	r3, [r2, #64]	; 0x40
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <HAL_PWREx_EnableOverDrive+0x90>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800832e:	4b1b      	ldr	r3, [pc, #108]	; (800839c <HAL_PWREx_EnableOverDrive+0x94>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008334:	f7fe fc9c 	bl	8006c70 <HAL_GetTick>
 8008338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800833a:	e009      	b.n	8008350 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800833c:	f7fe fc98 	bl	8006c70 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800834a:	d901      	bls.n	8008350 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e01f      	b.n	8008390 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008350:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835c:	d1ee      	bne.n	800833c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800835e:	4b11      	ldr	r3, [pc, #68]	; (80083a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008364:	f7fe fc84 	bl	8006c70 <HAL_GetTick>
 8008368:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800836a:	e009      	b.n	8008380 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800836c:	f7fe fc80 	bl	8006c70 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800837a:	d901      	bls.n	8008380 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e007      	b.n	8008390 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008380:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838c:	d1ee      	bne.n	800836c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40023800 	.word	0x40023800
 800839c:	420e0040 	.word	0x420e0040
 80083a0:	40007000 	.word	0x40007000
 80083a4:	420e0044 	.word	0x420e0044

080083a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e0cc      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083bc:	4b68      	ldr	r3, [pc, #416]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d90c      	bls.n	80083e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ca:	4b65      	ldr	r3, [pc, #404]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083d2:	4b63      	ldr	r3, [pc, #396]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 030f 	and.w	r3, r3, #15
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d001      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0b8      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d020      	beq.n	8008432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083fc:	4b59      	ldr	r3, [pc, #356]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	4a58      	ldr	r2, [pc, #352]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008414:	4b53      	ldr	r3, [pc, #332]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a52      	ldr	r2, [pc, #328]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800841e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008420:	4b50      	ldr	r3, [pc, #320]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	494d      	ldr	r1, [pc, #308]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	4313      	orrs	r3, r2
 8008430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d044      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d107      	bne.n	8008456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008446:	4b47      	ldr	r3, [pc, #284]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d119      	bne.n	8008486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e07f      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d003      	beq.n	8008466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008462:	2b03      	cmp	r3, #3
 8008464:	d107      	bne.n	8008476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008466:	4b3f      	ldr	r3, [pc, #252]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e06f      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008476:	4b3b      	ldr	r3, [pc, #236]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e067      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f023 0203 	bic.w	r2, r3, #3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	4934      	ldr	r1, [pc, #208]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	4313      	orrs	r3, r2
 8008496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008498:	f7fe fbea 	bl	8006c70 <HAL_GetTick>
 800849c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849e:	e00a      	b.n	80084b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084a0:	f7fe fbe6 	bl	8006c70 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e04f      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b6:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 020c 	and.w	r2, r3, #12
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d1eb      	bne.n	80084a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084c8:	4b25      	ldr	r3, [pc, #148]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d20c      	bcs.n	80084f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d6:	4b22      	ldr	r3, [pc, #136]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084de:	4b20      	ldr	r3, [pc, #128]	; (8008560 <HAL_RCC_ClockConfig+0x1b8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d001      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e032      	b.n	8008556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084fc:	4b19      	ldr	r3, [pc, #100]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4916      	ldr	r1, [pc, #88]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 800850a:	4313      	orrs	r3, r2
 800850c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800851a:	4b12      	ldr	r3, [pc, #72]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	490e      	ldr	r1, [pc, #56]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 800852a:	4313      	orrs	r3, r2
 800852c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800852e:	f000 f855 	bl	80085dc <HAL_RCC_GetSysClockFreq>
 8008532:	4602      	mov	r2, r0
 8008534:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	490a      	ldr	r1, [pc, #40]	; (8008568 <HAL_RCC_ClockConfig+0x1c0>)
 8008540:	5ccb      	ldrb	r3, [r1, r3]
 8008542:	fa22 f303 	lsr.w	r3, r2, r3
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <HAL_RCC_ClockConfig+0x1c4>)
 8008548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <HAL_RCC_ClockConfig+0x1c8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fb4a 	bl	8006be8 <HAL_InitTick>

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	40023c00 	.word	0x40023c00
 8008564:	40023800 	.word	0x40023800
 8008568:	08013a10 	.word	0x08013a10
 800856c:	20000030 	.word	0x20000030
 8008570:	2000003c 	.word	0x2000003c

08008574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008578:	4b03      	ldr	r3, [pc, #12]	; (8008588 <HAL_RCC_GetHCLKFreq+0x14>)
 800857a:	681b      	ldr	r3, [r3, #0]
}
 800857c:	4618      	mov	r0, r3
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000030 	.word	0x20000030

0800858c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008590:	f7ff fff0 	bl	8008574 <HAL_RCC_GetHCLKFreq>
 8008594:	4602      	mov	r2, r0
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	0a9b      	lsrs	r3, r3, #10
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	4903      	ldr	r1, [pc, #12]	; (80085b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a2:	5ccb      	ldrb	r3, [r1, r3]
 80085a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40023800 	.word	0x40023800
 80085b0:	08013a20 	.word	0x08013a20

080085b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085b8:	f7ff ffdc 	bl	8008574 <HAL_RCC_GetHCLKFreq>
 80085bc:	4602      	mov	r2, r0
 80085be:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	0b5b      	lsrs	r3, r3, #13
 80085c4:	f003 0307 	and.w	r3, r3, #7
 80085c8:	4903      	ldr	r1, [pc, #12]	; (80085d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ca:	5ccb      	ldrb	r3, [r1, r3]
 80085cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40023800 	.word	0x40023800
 80085d8:	08013a20 	.word	0x08013a20

080085dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e0:	b0ae      	sub	sp, #184	; 0xb8
 80085e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008602:	4bcb      	ldr	r3, [pc, #812]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	2b0c      	cmp	r3, #12
 800860c:	f200 8206 	bhi.w	8008a1c <HAL_RCC_GetSysClockFreq+0x440>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	0800864d 	.word	0x0800864d
 800861c:	08008a1d 	.word	0x08008a1d
 8008620:	08008a1d 	.word	0x08008a1d
 8008624:	08008a1d 	.word	0x08008a1d
 8008628:	08008655 	.word	0x08008655
 800862c:	08008a1d 	.word	0x08008a1d
 8008630:	08008a1d 	.word	0x08008a1d
 8008634:	08008a1d 	.word	0x08008a1d
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008a1d 	.word	0x08008a1d
 8008640:	08008a1d 	.word	0x08008a1d
 8008644:	08008a1d 	.word	0x08008a1d
 8008648:	0800884d 	.word	0x0800884d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800864c:	4bb9      	ldr	r3, [pc, #740]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 800864e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008652:	e1e7      	b.n	8008a24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008654:	4bb8      	ldr	r3, [pc, #736]	; (8008938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800865a:	e1e3      	b.n	8008a24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800865c:	4bb4      	ldr	r3, [pc, #720]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008668:	4bb1      	ldr	r3, [pc, #708]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d071      	beq.n	8008758 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008674:	4bae      	ldr	r3, [pc, #696]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	099b      	lsrs	r3, r3, #6
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008680:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008690:	2300      	movs	r3, #0
 8008692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800869a:	4622      	mov	r2, r4
 800869c:	462b      	mov	r3, r5
 800869e:	f04f 0000 	mov.w	r0, #0
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	0159      	lsls	r1, r3, #5
 80086a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086ac:	0150      	lsls	r0, r2, #5
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4621      	mov	r1, r4
 80086b4:	1a51      	subs	r1, r2, r1
 80086b6:	6439      	str	r1, [r7, #64]	; 0x40
 80086b8:	4629      	mov	r1, r5
 80086ba:	eb63 0301 	sbc.w	r3, r3, r1
 80086be:	647b      	str	r3, [r7, #68]	; 0x44
 80086c0:	f04f 0200 	mov.w	r2, #0
 80086c4:	f04f 0300 	mov.w	r3, #0
 80086c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80086cc:	4649      	mov	r1, r9
 80086ce:	018b      	lsls	r3, r1, #6
 80086d0:	4641      	mov	r1, r8
 80086d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086d6:	4641      	mov	r1, r8
 80086d8:	018a      	lsls	r2, r1, #6
 80086da:	4641      	mov	r1, r8
 80086dc:	1a51      	subs	r1, r2, r1
 80086de:	63b9      	str	r1, [r7, #56]	; 0x38
 80086e0:	4649      	mov	r1, r9
 80086e2:	eb63 0301 	sbc.w	r3, r3, r1
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80086f4:	4649      	mov	r1, r9
 80086f6:	00cb      	lsls	r3, r1, #3
 80086f8:	4641      	mov	r1, r8
 80086fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086fe:	4641      	mov	r1, r8
 8008700:	00ca      	lsls	r2, r1, #3
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	4603      	mov	r3, r0
 8008708:	4622      	mov	r2, r4
 800870a:	189b      	adds	r3, r3, r2
 800870c:	633b      	str	r3, [r7, #48]	; 0x30
 800870e:	462b      	mov	r3, r5
 8008710:	460a      	mov	r2, r1
 8008712:	eb42 0303 	adc.w	r3, r2, r3
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008724:	4629      	mov	r1, r5
 8008726:	024b      	lsls	r3, r1, #9
 8008728:	4621      	mov	r1, r4
 800872a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800872e:	4621      	mov	r1, r4
 8008730:	024a      	lsls	r2, r1, #9
 8008732:	4610      	mov	r0, r2
 8008734:	4619      	mov	r1, r3
 8008736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800873a:	2200      	movs	r2, #0
 800873c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008740:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008744:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008748:	f7f8 faee 	bl	8000d28 <__aeabi_uldivmod>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4613      	mov	r3, r2
 8008752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008756:	e067      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008758:	4b75      	ldr	r3, [pc, #468]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	099b      	lsrs	r3, r3, #6
 800875e:	2200      	movs	r2, #0
 8008760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008764:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008768:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800876c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008770:	67bb      	str	r3, [r7, #120]	; 0x78
 8008772:	2300      	movs	r3, #0
 8008774:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008776:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800877a:	4622      	mov	r2, r4
 800877c:	462b      	mov	r3, r5
 800877e:	f04f 0000 	mov.w	r0, #0
 8008782:	f04f 0100 	mov.w	r1, #0
 8008786:	0159      	lsls	r1, r3, #5
 8008788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800878c:	0150      	lsls	r0, r2, #5
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4621      	mov	r1, r4
 8008794:	1a51      	subs	r1, r2, r1
 8008796:	62b9      	str	r1, [r7, #40]	; 0x28
 8008798:	4629      	mov	r1, r5
 800879a:	eb63 0301 	sbc.w	r3, r3, r1
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80087ac:	4649      	mov	r1, r9
 80087ae:	018b      	lsls	r3, r1, #6
 80087b0:	4641      	mov	r1, r8
 80087b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087b6:	4641      	mov	r1, r8
 80087b8:	018a      	lsls	r2, r1, #6
 80087ba:	4641      	mov	r1, r8
 80087bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80087c0:	4649      	mov	r1, r9
 80087c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	f04f 0300 	mov.w	r3, #0
 80087ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087da:	4692      	mov	sl, r2
 80087dc:	469b      	mov	fp, r3
 80087de:	4623      	mov	r3, r4
 80087e0:	eb1a 0303 	adds.w	r3, sl, r3
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	462b      	mov	r3, r5
 80087e8:	eb4b 0303 	adc.w	r3, fp, r3
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80087fa:	4629      	mov	r1, r5
 80087fc:	028b      	lsls	r3, r1, #10
 80087fe:	4621      	mov	r1, r4
 8008800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008804:	4621      	mov	r1, r4
 8008806:	028a      	lsls	r2, r1, #10
 8008808:	4610      	mov	r0, r2
 800880a:	4619      	mov	r1, r3
 800880c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008810:	2200      	movs	r2, #0
 8008812:	673b      	str	r3, [r7, #112]	; 0x70
 8008814:	677a      	str	r2, [r7, #116]	; 0x74
 8008816:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800881a:	f7f8 fa85 	bl	8000d28 <__aeabi_uldivmod>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4613      	mov	r3, r2
 8008824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008828:	4b41      	ldr	r3, [pc, #260]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	0c1b      	lsrs	r3, r3, #16
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	3301      	adds	r3, #1
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800883a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800883e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008842:	fbb2 f3f3 	udiv	r3, r2, r3
 8008846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800884a:	e0eb      	b.n	8008a24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800884c:	4b38      	ldr	r3, [pc, #224]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008858:	4b35      	ldr	r3, [pc, #212]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d06b      	beq.n	800893c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <HAL_RCC_GetSysClockFreq+0x354>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	099b      	lsrs	r3, r3, #6
 800886a:	2200      	movs	r2, #0
 800886c:	66bb      	str	r3, [r7, #104]	; 0x68
 800886e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008876:	663b      	str	r3, [r7, #96]	; 0x60
 8008878:	2300      	movs	r3, #0
 800887a:	667b      	str	r3, [r7, #100]	; 0x64
 800887c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008880:	4622      	mov	r2, r4
 8008882:	462b      	mov	r3, r5
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	0159      	lsls	r1, r3, #5
 800888e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008892:	0150      	lsls	r0, r2, #5
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4621      	mov	r1, r4
 800889a:	1a51      	subs	r1, r2, r1
 800889c:	61b9      	str	r1, [r7, #24]
 800889e:	4629      	mov	r1, r5
 80088a0:	eb63 0301 	sbc.w	r3, r3, r1
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80088b2:	4659      	mov	r1, fp
 80088b4:	018b      	lsls	r3, r1, #6
 80088b6:	4651      	mov	r1, sl
 80088b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088bc:	4651      	mov	r1, sl
 80088be:	018a      	lsls	r2, r1, #6
 80088c0:	4651      	mov	r1, sl
 80088c2:	ebb2 0801 	subs.w	r8, r2, r1
 80088c6:	4659      	mov	r1, fp
 80088c8:	eb63 0901 	sbc.w	r9, r3, r1
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088e0:	4690      	mov	r8, r2
 80088e2:	4699      	mov	r9, r3
 80088e4:	4623      	mov	r3, r4
 80088e6:	eb18 0303 	adds.w	r3, r8, r3
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	462b      	mov	r3, r5
 80088ee:	eb49 0303 	adc.w	r3, r9, r3
 80088f2:	617b      	str	r3, [r7, #20]
 80088f4:	f04f 0200 	mov.w	r2, #0
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008900:	4629      	mov	r1, r5
 8008902:	024b      	lsls	r3, r1, #9
 8008904:	4621      	mov	r1, r4
 8008906:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800890a:	4621      	mov	r1, r4
 800890c:	024a      	lsls	r2, r1, #9
 800890e:	4610      	mov	r0, r2
 8008910:	4619      	mov	r1, r3
 8008912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008916:	2200      	movs	r2, #0
 8008918:	65bb      	str	r3, [r7, #88]	; 0x58
 800891a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800891c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008920:	f7f8 fa02 	bl	8000d28 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4613      	mov	r3, r2
 800892a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800892e:	e065      	b.n	80089fc <HAL_RCC_GetSysClockFreq+0x420>
 8008930:	40023800 	.word	0x40023800
 8008934:	00f42400 	.word	0x00f42400
 8008938:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800893c:	4b3d      	ldr	r3, [pc, #244]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x458>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	099b      	lsrs	r3, r3, #6
 8008942:	2200      	movs	r2, #0
 8008944:	4618      	mov	r0, r3
 8008946:	4611      	mov	r1, r2
 8008948:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800894c:	653b      	str	r3, [r7, #80]	; 0x50
 800894e:	2300      	movs	r3, #0
 8008950:	657b      	str	r3, [r7, #84]	; 0x54
 8008952:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008956:	4642      	mov	r2, r8
 8008958:	464b      	mov	r3, r9
 800895a:	f04f 0000 	mov.w	r0, #0
 800895e:	f04f 0100 	mov.w	r1, #0
 8008962:	0159      	lsls	r1, r3, #5
 8008964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008968:	0150      	lsls	r0, r2, #5
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4641      	mov	r1, r8
 8008970:	1a51      	subs	r1, r2, r1
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	4649      	mov	r1, r9
 8008976:	eb63 0301 	sbc.w	r3, r3, r1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	f04f 0300 	mov.w	r3, #0
 8008984:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008988:	4659      	mov	r1, fp
 800898a:	018b      	lsls	r3, r1, #6
 800898c:	4651      	mov	r1, sl
 800898e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008992:	4651      	mov	r1, sl
 8008994:	018a      	lsls	r2, r1, #6
 8008996:	4651      	mov	r1, sl
 8008998:	1a54      	subs	r4, r2, r1
 800899a:	4659      	mov	r1, fp
 800899c:	eb63 0501 	sbc.w	r5, r3, r1
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	f04f 0300 	mov.w	r3, #0
 80089a8:	00eb      	lsls	r3, r5, #3
 80089aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089ae:	00e2      	lsls	r2, r4, #3
 80089b0:	4614      	mov	r4, r2
 80089b2:	461d      	mov	r5, r3
 80089b4:	4643      	mov	r3, r8
 80089b6:	18e3      	adds	r3, r4, r3
 80089b8:	603b      	str	r3, [r7, #0]
 80089ba:	464b      	mov	r3, r9
 80089bc:	eb45 0303 	adc.w	r3, r5, r3
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089ce:	4629      	mov	r1, r5
 80089d0:	028b      	lsls	r3, r1, #10
 80089d2:	4621      	mov	r1, r4
 80089d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089d8:	4621      	mov	r1, r4
 80089da:	028a      	lsls	r2, r1, #10
 80089dc:	4610      	mov	r0, r2
 80089de:	4619      	mov	r1, r3
 80089e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089e4:	2200      	movs	r2, #0
 80089e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089ee:	f7f8 f99b 	bl	8000d28 <__aeabi_uldivmod>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4613      	mov	r3, r2
 80089f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x458>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	0f1b      	lsrs	r3, r3, #28
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a1a:	e003      	b.n	8008a24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008a22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	37b8      	adds	r7, #184	; 0xb8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a32:	bf00      	nop
 8008a34:	40023800 	.word	0x40023800
 8008a38:	00f42400 	.word	0x00f42400

08008a3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e28d      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 8083 	beq.w	8008b62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a5c:	4b94      	ldr	r3, [pc, #592]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 030c 	and.w	r3, r3, #12
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d019      	beq.n	8008a9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a68:	4b91      	ldr	r3, [pc, #580]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d106      	bne.n	8008a82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a74:	4b8e      	ldr	r3, [pc, #568]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a80:	d00c      	beq.n	8008a9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a82:	4b8b      	ldr	r3, [pc, #556]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a8a:	2b0c      	cmp	r3, #12
 8008a8c:	d112      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a8e:	4b88      	ldr	r3, [pc, #544]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d10b      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9c:	4b84      	ldr	r3, [pc, #528]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d05b      	beq.n	8008b60 <HAL_RCC_OscConfig+0x124>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d157      	bne.n	8008b60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e25a      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abc:	d106      	bne.n	8008acc <HAL_RCC_OscConfig+0x90>
 8008abe:	4b7c      	ldr	r3, [pc, #496]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a7b      	ldr	r2, [pc, #492]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	e01d      	b.n	8008b08 <HAL_RCC_OscConfig+0xcc>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ad4:	d10c      	bne.n	8008af0 <HAL_RCC_OscConfig+0xb4>
 8008ad6:	4b76      	ldr	r3, [pc, #472]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a75      	ldr	r2, [pc, #468]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	4b73      	ldr	r3, [pc, #460]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a72      	ldr	r2, [pc, #456]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	e00b      	b.n	8008b08 <HAL_RCC_OscConfig+0xcc>
 8008af0:	4b6f      	ldr	r3, [pc, #444]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a6e      	ldr	r2, [pc, #440]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4b6c      	ldr	r3, [pc, #432]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a6b      	ldr	r2, [pc, #428]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d013      	beq.n	8008b38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b10:	f7fe f8ae 	bl	8006c70 <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b18:	f7fe f8aa 	bl	8006c70 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b64      	cmp	r3, #100	; 0x64
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e21f      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b2a:	4b61      	ldr	r3, [pc, #388]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f0      	beq.n	8008b18 <HAL_RCC_OscConfig+0xdc>
 8008b36:	e014      	b.n	8008b62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b38:	f7fe f89a 	bl	8006c70 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b40:	f7fe f896 	bl	8006c70 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b64      	cmp	r3, #100	; 0x64
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e20b      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b52:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f0      	bne.n	8008b40 <HAL_RCC_OscConfig+0x104>
 8008b5e:	e000      	b.n	8008b62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d06f      	beq.n	8008c4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b6e:	4b50      	ldr	r3, [pc, #320]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 030c 	and.w	r3, r3, #12
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d017      	beq.n	8008baa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b7a:	4b4d      	ldr	r3, [pc, #308]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	d105      	bne.n	8008b92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b86:	4b4a      	ldr	r3, [pc, #296]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b92:	4b47      	ldr	r3, [pc, #284]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b9a:	2b0c      	cmp	r3, #12
 8008b9c:	d11c      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b9e:	4b44      	ldr	r3, [pc, #272]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d116      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008baa:	4b41      	ldr	r3, [pc, #260]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x186>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d001      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e1d3      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc2:	4b3b      	ldr	r3, [pc, #236]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4937      	ldr	r1, [pc, #220]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bd6:	e03a      	b.n	8008c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d020      	beq.n	8008c22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008be0:	4b34      	ldr	r3, [pc, #208]	; (8008cb4 <HAL_RCC_OscConfig+0x278>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be6:	f7fe f843 	bl	8006c70 <HAL_GetTick>
 8008bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bec:	e008      	b.n	8008c00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bee:	f7fe f83f 	bl	8006c70 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e1b4      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c00:	4b2b      	ldr	r3, [pc, #172]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0f0      	beq.n	8008bee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c0c:	4b28      	ldr	r3, [pc, #160]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	4925      	ldr	r1, [pc, #148]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	600b      	str	r3, [r1, #0]
 8008c20:	e015      	b.n	8008c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c22:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <HAL_RCC_OscConfig+0x278>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fe f822 	bl	8006c70 <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c30:	f7fe f81e 	bl	8006c70 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e193      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c42:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d036      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d016      	beq.n	8008c90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c62:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <HAL_RCC_OscConfig+0x27c>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c68:	f7fe f802 	bl	8006c70 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c70:	f7fd fffe 	bl	8006c70 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e173      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c82:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <HAL_RCC_OscConfig+0x274>)
 8008c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0f0      	beq.n	8008c70 <HAL_RCC_OscConfig+0x234>
 8008c8e:	e01b      	b.n	8008cc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c90:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <HAL_RCC_OscConfig+0x27c>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c96:	f7fd ffeb 	bl	8006c70 <HAL_GetTick>
 8008c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c9c:	e00e      	b.n	8008cbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c9e:	f7fd ffe7 	bl	8006c70 <HAL_GetTick>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d907      	bls.n	8008cbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e15c      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	42470000 	.word	0x42470000
 8008cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cbc:	4b8a      	ldr	r3, [pc, #552]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1ea      	bne.n	8008c9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8097 	beq.w	8008e04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cda:	4b83      	ldr	r3, [pc, #524]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10f      	bne.n	8008d06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60bb      	str	r3, [r7, #8]
 8008cea:	4b7f      	ldr	r3, [pc, #508]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	4a7e      	ldr	r2, [pc, #504]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf6:	4b7c      	ldr	r3, [pc, #496]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	60bb      	str	r3, [r7, #8]
 8008d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d06:	4b79      	ldr	r3, [pc, #484]	; (8008eec <HAL_RCC_OscConfig+0x4b0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d118      	bne.n	8008d44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d12:	4b76      	ldr	r3, [pc, #472]	; (8008eec <HAL_RCC_OscConfig+0x4b0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a75      	ldr	r2, [pc, #468]	; (8008eec <HAL_RCC_OscConfig+0x4b0>)
 8008d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d1e:	f7fd ffa7 	bl	8006c70 <HAL_GetTick>
 8008d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d24:	e008      	b.n	8008d38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d26:	f7fd ffa3 	bl	8006c70 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e118      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d38:	4b6c      	ldr	r3, [pc, #432]	; (8008eec <HAL_RCC_OscConfig+0x4b0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0f0      	beq.n	8008d26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d106      	bne.n	8008d5a <HAL_RCC_OscConfig+0x31e>
 8008d4c:	4b66      	ldr	r3, [pc, #408]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	4a65      	ldr	r2, [pc, #404]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	6713      	str	r3, [r2, #112]	; 0x70
 8008d58:	e01c      	b.n	8008d94 <HAL_RCC_OscConfig+0x358>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d10c      	bne.n	8008d7c <HAL_RCC_OscConfig+0x340>
 8008d62:	4b61      	ldr	r3, [pc, #388]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d66:	4a60      	ldr	r2, [pc, #384]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d68:	f043 0304 	orr.w	r3, r3, #4
 8008d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d6e:	4b5e      	ldr	r3, [pc, #376]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	4a5d      	ldr	r2, [pc, #372]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d74:	f043 0301 	orr.w	r3, r3, #1
 8008d78:	6713      	str	r3, [r2, #112]	; 0x70
 8008d7a:	e00b      	b.n	8008d94 <HAL_RCC_OscConfig+0x358>
 8008d7c:	4b5a      	ldr	r3, [pc, #360]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d80:	4a59      	ldr	r2, [pc, #356]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d82:	f023 0301 	bic.w	r3, r3, #1
 8008d86:	6713      	str	r3, [r2, #112]	; 0x70
 8008d88:	4b57      	ldr	r3, [pc, #348]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8c:	4a56      	ldr	r2, [pc, #344]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008d8e:	f023 0304 	bic.w	r3, r3, #4
 8008d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d015      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d9c:	f7fd ff68 	bl	8006c70 <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008da2:	e00a      	b.n	8008dba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008da4:	f7fd ff64 	bl	8006c70 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e0d7      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dba:	4b4b      	ldr	r3, [pc, #300]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0ee      	beq.n	8008da4 <HAL_RCC_OscConfig+0x368>
 8008dc6:	e014      	b.n	8008df2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc8:	f7fd ff52 	bl	8006c70 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dce:	e00a      	b.n	8008de6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dd0:	f7fd ff4e 	bl	8006c70 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e0c1      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008de6:	4b40      	ldr	r3, [pc, #256]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1ee      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d105      	bne.n	8008e04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df8:	4b3b      	ldr	r3, [pc, #236]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	4a3a      	ldr	r2, [pc, #232]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80ad 	beq.w	8008f68 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e0e:	4b36      	ldr	r3, [pc, #216]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f003 030c 	and.w	r3, r3, #12
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	d060      	beq.n	8008edc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d145      	bne.n	8008eae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e22:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <HAL_RCC_OscConfig+0x4b4>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fd ff22 	bl	8006c70 <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e2e:	e008      	b.n	8008e42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e30:	f7fd ff1e 	bl	8006c70 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e093      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e42:	4b29      	ldr	r3, [pc, #164]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f0      	bne.n	8008e30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69da      	ldr	r2, [r3, #28]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	019b      	lsls	r3, r3, #6
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e64:	085b      	lsrs	r3, r3, #1
 8008e66:	3b01      	subs	r3, #1
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	061b      	lsls	r3, r3, #24
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	071b      	lsls	r3, r3, #28
 8008e7a:	491b      	ldr	r1, [pc, #108]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e80:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <HAL_RCC_OscConfig+0x4b4>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e86:	f7fd fef3 	bl	8006c70 <HAL_GetTick>
 8008e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e8c:	e008      	b.n	8008ea0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e8e:	f7fd feef 	bl	8006c70 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e064      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea0:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0f0      	beq.n	8008e8e <HAL_RCC_OscConfig+0x452>
 8008eac:	e05c      	b.n	8008f68 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008eae:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <HAL_RCC_OscConfig+0x4b4>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb4:	f7fd fedc 	bl	8006c70 <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ebc:	f7fd fed8 	bl	8006c70 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e04d      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ece:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <HAL_RCC_OscConfig+0x4ac>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f0      	bne.n	8008ebc <HAL_RCC_OscConfig+0x480>
 8008eda:	e045      	b.n	8008f68 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e040      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	40007000 	.word	0x40007000
 8008ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ef4:	4b1f      	ldr	r3, [pc, #124]	; (8008f74 <HAL_RCC_OscConfig+0x538>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d030      	beq.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d129      	bne.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d122      	bne.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f24:	4013      	ands	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d119      	bne.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3a:	085b      	lsrs	r3, r3, #1
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d10f      	bne.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d107      	bne.n	8008f64 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d001      	beq.n	8008f68 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e000      	b.n	8008f6a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	40023800 	.word	0x40023800

08008f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e07b      	b.n	8009082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d108      	bne.n	8008fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f9a:	d009      	beq.n	8008fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	61da      	str	r2, [r3, #28]
 8008fa2:	e005      	b.n	8008fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fb f930 	bl	8004230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009020:	431a      	orrs	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	ea42 0103 	orr.w	r1, r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	0c1b      	lsrs	r3, r3, #16
 800904e:	f003 0104 	and.w	r1, r3, #4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	f003 0210 	and.w	r2, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b088      	sub	sp, #32
 800908e:	af00      	add	r7, sp, #0
 8009090:	60f8      	str	r0, [r7, #12]
 8009092:	60b9      	str	r1, [r7, #8]
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	4613      	mov	r3, r2
 8009098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d101      	bne.n	80090ac <HAL_SPI_Transmit+0x22>
 80090a8:	2302      	movs	r3, #2
 80090aa:	e126      	b.n	80092fa <HAL_SPI_Transmit+0x270>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090b4:	f7fd fddc 	bl	8006c70 <HAL_GetTick>
 80090b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d002      	beq.n	80090d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ca:	2302      	movs	r3, #2
 80090cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ce:	e10b      	b.n	80092e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_Transmit+0x52>
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090e0:	e102      	b.n	80092e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2203      	movs	r2, #3
 80090e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	88fa      	ldrh	r2, [r7, #6]
 80090fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	88fa      	ldrh	r2, [r7, #6]
 8009100:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009128:	d10f      	bne.n	800914a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009138:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d007      	beq.n	8009168 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009170:	d14b      	bne.n	800920a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_SPI_Transmit+0xf6>
 800917a:	8afb      	ldrh	r3, [r7, #22]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d13e      	bne.n	80091fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	881a      	ldrh	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	1c9a      	adds	r2, r3, #2
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919a:	b29b      	uxth	r3, r3
 800919c:	3b01      	subs	r3, #1
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80091a4:	e02b      	b.n	80091fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d112      	bne.n	80091da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	881a      	ldrh	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	1c9a      	adds	r2, r3, #2
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80091d8:	e011      	b.n	80091fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091da:	f7fd fd49 	bl	8006c70 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d803      	bhi.n	80091f2 <HAL_SPI_Transmit+0x168>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f0:	d102      	bne.n	80091f8 <HAL_SPI_Transmit+0x16e>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091fc:	e074      	b.n	80092e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1ce      	bne.n	80091a6 <HAL_SPI_Transmit+0x11c>
 8009208:	e04c      	b.n	80092a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_SPI_Transmit+0x18e>
 8009212:	8afb      	ldrh	r3, [r7, #22]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d140      	bne.n	800929a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	7812      	ldrb	r2, [r2, #0]
 8009224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	b29a      	uxth	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800923e:	e02c      	b.n	800929a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b02      	cmp	r3, #2
 800924c:	d113      	bne.n	8009276 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	7812      	ldrb	r2, [r2, #0]
 800925a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29a      	uxth	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	86da      	strh	r2, [r3, #54]	; 0x36
 8009274:	e011      	b.n	800929a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009276:	f7fd fcfb 	bl	8006c70 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d803      	bhi.n	800928e <HAL_SPI_Transmit+0x204>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928c:	d102      	bne.n	8009294 <HAL_SPI_Transmit+0x20a>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009298:	e026      	b.n	80092e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1cd      	bne.n	8009240 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fafd 	bl	80098a8 <SPI_EndRxTxTransaction>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	613b      	str	r3, [r7, #16]
 80092d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	77fb      	strb	r3, [r7, #31]
 80092e4:	e000      	b.n	80092e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80092e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3720      	adds	r7, #32
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_SPI_Transmit_DMA+0x20>
 8009320:	2302      	movs	r3, #2
 8009322:	e09b      	b.n	800945c <HAL_SPI_Transmit_DMA+0x158>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d002      	beq.n	800933e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009338:	2302      	movs	r3, #2
 800933a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800933c:	e089      	b.n	8009452 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_Transmit_DMA+0x46>
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800934e:	e080      	b.n	8009452 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2203      	movs	r2, #3
 8009354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	88fa      	ldrh	r2, [r7, #6]
 8009368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	88fa      	ldrh	r2, [r7, #6]
 800936e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009396:	d10f      	bne.n	80093b8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093bc:	4a29      	ldr	r2, [pc, #164]	; (8009464 <HAL_SPI_Transmit_DMA+0x160>)
 80093be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c4:	4a28      	ldr	r2, [pc, #160]	; (8009468 <HAL_SPI_Transmit_DMA+0x164>)
 80093c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <HAL_SPI_Transmit_DMA+0x168>)
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d4:	2200      	movs	r2, #0
 80093d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e0:	4619      	mov	r1, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	330c      	adds	r3, #12
 80093e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80093f0:	f7fe fa32 	bl	8007858 <HAL_DMA_Start_IT>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00c      	beq.n	8009414 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	f043 0210 	orr.w	r2, r3, #16
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009412:	e01e      	b.n	8009452 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941e:	2b40      	cmp	r3, #64	; 0x40
 8009420:	d007      	beq.n	8009432 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009430:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0220 	orr.w	r2, r2, #32
 8009440:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0202 	orr.w	r2, r2, #2
 8009450:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800945a:	7dfb      	ldrb	r3, [r7, #23]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	08009715 	.word	0x08009715
 8009468:	0800966d 	.word	0x0800966d
 800946c:	08009731 	.word	0x08009731

08009470 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10e      	bne.n	80094b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009498:	2b00      	cmp	r3, #0
 800949a:	d009      	beq.n	80094b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
    return;
 80094ae:	e0ce      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <HAL_SPI_IRQHandler+0x5e>
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
    return;
 80094cc:	e0bf      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <HAL_SPI_IRQHandler+0x7e>
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80b0 	beq.w	800964e <HAL_SPI_IRQHandler+0x1de>
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f003 0320 	and.w	r3, r3, #32
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80aa 	beq.w	800964e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	d023      	beq.n	800954c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b03      	cmp	r3, #3
 800950e:	d011      	beq.n	8009534 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009514:	f043 0204 	orr.w	r2, r3, #4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	e00b      	b.n	800954c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009534:	2300      	movs	r3, #0
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	613b      	str	r3, [r7, #16]
 8009548:	693b      	ldr	r3, [r7, #16]
        return;
 800954a:	e080      	b.n	800964e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f003 0320 	and.w	r3, r3, #32
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	f043 0201 	orr.w	r2, r3, #1
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958e:	f043 0208 	orr.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009596:	2300      	movs	r3, #0
 8009598:	60bb      	str	r3, [r7, #8]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	60bb      	str	r3, [r7, #8]
 80095a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d04f      	beq.n	800964c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <HAL_SPI_IRQHandler+0x168>
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d034      	beq.n	8009642 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0203 	bic.w	r2, r2, #3
 80095e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d011      	beq.n	8009614 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <HAL_SPI_IRQHandler+0x1e4>)
 80095f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe f9f3 	bl	80079e8 <HAL_DMA_Abort_IT>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009618:	2b00      	cmp	r3, #0
 800961a:	d016      	beq.n	800964a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009620:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <HAL_SPI_IRQHandler+0x1e4>)
 8009622:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe f9dd 	bl	80079e8 <HAL_DMA_Abort_IT>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009640:	e003      	b.n	800964a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fb fbfc 	bl	8004e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009648:	e000      	b.n	800964c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800964a:	bf00      	nop
    return;
 800964c:	bf00      	nop
  }
}
 800964e:	3720      	adds	r7, #32
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	08009771 	.word	0x08009771

08009658 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800967a:	f7fd faf9 	bl	8006c70 <HAL_GetTick>
 800967e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968e:	d03b      	beq.n	8009708 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0220 	bic.w	r2, r2, #32
 800969e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0202 	bic.w	r2, r2, #2
 80096ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	2164      	movs	r1, #100	; 0x64
 80096b4:	6978      	ldr	r0, [r7, #20]
 80096b6:	f000 f8f7 	bl	80098a8 <SPI_EndRxTxTransaction>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c4:	f043 0220 	orr.w	r2, r3, #32
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2200      	movs	r2, #0
 80096ee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009700:	6978      	ldr	r0, [r7, #20]
 8009702:	f7fb fb9d 	bl	8004e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009706:	e002      	b.n	800970e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f7fb fbaf 	bl	8004e6c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7ff ff98 	bl	8009658 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0203 	bic.w	r2, r2, #3
 800974c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009752:	f043 0210 	orr.w	r2, r3, #16
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7fb fb6c 	bl	8004e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7fb fb58 	bl	8004e40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	4613      	mov	r3, r2
 80097a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097a8:	f7fd fa62 	bl	8006c70 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4413      	add	r3, r2
 80097b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097b8:	f7fd fa5a 	bl	8006c70 <HAL_GetTick>
 80097bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097be:	4b39      	ldr	r3, [pc, #228]	; (80098a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	015b      	lsls	r3, r3, #5
 80097c4:	0d1b      	lsrs	r3, r3, #20
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	fb02 f303 	mul.w	r3, r2, r3
 80097cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ce:	e054      	b.n	800987a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d6:	d050      	beq.n	800987a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097d8:	f7fd fa4a 	bl	8006c70 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	69fa      	ldr	r2, [r7, #28]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d902      	bls.n	80097ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d13d      	bne.n	800986a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009806:	d111      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009810:	d004      	beq.n	800981c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800981a:	d107      	bne.n	800982c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800982a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009834:	d10f      	bne.n	8009856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e017      	b.n	800989a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3b01      	subs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4013      	ands	r3, r2
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	bf0c      	ite	eq
 800988a:	2301      	moveq	r3, #1
 800988c:	2300      	movne	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	429a      	cmp	r2, r3
 8009896:	d19b      	bne.n	80097d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3720      	adds	r7, #32
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000030 	.word	0x20000030

080098a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098b4:	4b1b      	ldr	r3, [pc, #108]	; (8009924 <SPI_EndRxTxTransaction+0x7c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <SPI_EndRxTxTransaction+0x80>)
 80098ba:	fba2 2303 	umull	r2, r3, r2, r3
 80098be:	0d5b      	lsrs	r3, r3, #21
 80098c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098c4:	fb02 f303 	mul.w	r3, r2, r3
 80098c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098d2:	d112      	bne.n	80098fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	2180      	movs	r1, #128	; 0x80
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7ff ff5a 	bl	8009798 <SPI_WaitFlagStateUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d016      	beq.n	8009918 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ee:	f043 0220 	orr.w	r2, r3, #32
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e00f      	b.n	800991a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3b01      	subs	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009910:	2b80      	cmp	r3, #128	; 0x80
 8009912:	d0f2      	beq.n	80098fa <SPI_EndRxTxTransaction+0x52>
 8009914:	e000      	b.n	8009918 <SPI_EndRxTxTransaction+0x70>
        break;
 8009916:	bf00      	nop
  }

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	20000030 	.word	0x20000030
 8009928:	165e9f81 	.word	0x165e9f81

0800992c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e041      	b.n	80099c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fa fd0e 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f000 faa0 	bl	8009eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e04e      	b.n	8009a82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d022      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a0e:	d01d      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d018      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a1e      	ldr	r2, [pc, #120]	; (8009a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d013      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00e      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a1b      	ldr	r2, [pc, #108]	; (8009aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d009      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d004      	beq.n	8009a4c <HAL_TIM_Base_Start_IT+0x80>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d111      	bne.n	8009a70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0307 	and.w	r3, r3, #7
 8009a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2b06      	cmp	r3, #6
 8009a5c:	d010      	beq.n	8009a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	e007      	b.n	8009a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40000400 	.word	0x40000400
 8009a98:	40000800 	.word	0x40000800
 8009a9c:	40000c00 	.word	0x40000c00
 8009aa0:	40010400 	.word	0x40010400
 8009aa4:	40014000 	.word	0x40014000
 8009aa8:	40001800 	.word	0x40001800

08009aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d122      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d11b      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0202 	mvn.w	r2, #2
 8009ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f9bf 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009af4:	e005      	b.n	8009b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f9b1 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f9c2 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d122      	bne.n	8009b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d11b      	bne.n	8009b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0204 	mvn.w	r2, #4
 8009b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f995 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009b48:	e005      	b.n	8009b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f987 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f998 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b08      	cmp	r3, #8
 8009b68:	d122      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d11b      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f06f 0208 	mvn.w	r2, #8
 8009b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2204      	movs	r2, #4
 8009b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f003 0303 	and.w	r3, r3, #3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f96b 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009b9c:	e005      	b.n	8009baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f95d 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f96e 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d122      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d11b      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0210 	mvn.w	r2, #16
 8009bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f941 	bl	8009e72 <HAL_TIM_IC_CaptureCallback>
 8009bf0:	e005      	b.n	8009bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f933 	bl	8009e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f944 	bl	8009e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d10e      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d107      	bne.n	8009c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0201 	mvn.w	r2, #1
 8009c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f90d 	bl	8009e4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3a:	2b80      	cmp	r3, #128	; 0x80
 8009c3c:	d10e      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c48:	2b80      	cmp	r3, #128	; 0x80
 8009c4a:	d107      	bne.n	8009c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 faea 	bl	800a230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c66:	2b40      	cmp	r3, #64	; 0x40
 8009c68:	d10e      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d107      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f909 	bl	8009e9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d10e      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d107      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0220 	mvn.w	r2, #32
 8009cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fab4 	bl	800a21c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d101      	bne.n	8009cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	e0b4      	b.n	8009e42 <HAL_TIM_ConfigClockSource+0x186>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2202      	movs	r2, #2
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d10:	d03e      	beq.n	8009d90 <HAL_TIM_ConfigClockSource+0xd4>
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d16:	f200 8087 	bhi.w	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1e:	f000 8086 	beq.w	8009e2e <HAL_TIM_ConfigClockSource+0x172>
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	d87f      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d28:	2b70      	cmp	r3, #112	; 0x70
 8009d2a:	d01a      	beq.n	8009d62 <HAL_TIM_ConfigClockSource+0xa6>
 8009d2c:	2b70      	cmp	r3, #112	; 0x70
 8009d2e:	d87b      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d30:	2b60      	cmp	r3, #96	; 0x60
 8009d32:	d050      	beq.n	8009dd6 <HAL_TIM_ConfigClockSource+0x11a>
 8009d34:	2b60      	cmp	r3, #96	; 0x60
 8009d36:	d877      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d38:	2b50      	cmp	r3, #80	; 0x50
 8009d3a:	d03c      	beq.n	8009db6 <HAL_TIM_ConfigClockSource+0xfa>
 8009d3c:	2b50      	cmp	r3, #80	; 0x50
 8009d3e:	d873      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d40:	2b40      	cmp	r3, #64	; 0x40
 8009d42:	d058      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0x13a>
 8009d44:	2b40      	cmp	r3, #64	; 0x40
 8009d46:	d86f      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d48:	2b30      	cmp	r3, #48	; 0x30
 8009d4a:	d064      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0x15a>
 8009d4c:	2b30      	cmp	r3, #48	; 0x30
 8009d4e:	d86b      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d060      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0x15a>
 8009d54:	2b20      	cmp	r3, #32
 8009d56:	d867      	bhi.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d05c      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0x15a>
 8009d5c:	2b10      	cmp	r3, #16
 8009d5e:	d05a      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0x15a>
 8009d60:	e062      	b.n	8009e28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6899      	ldr	r1, [r3, #8]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f000 f9b7 	bl	800a0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	609a      	str	r2, [r3, #8]
      break;
 8009d8e:	e04f      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	6899      	ldr	r1, [r3, #8]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f000 f9a0 	bl	800a0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	689a      	ldr	r2, [r3, #8]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009db2:	609a      	str	r2, [r3, #8]
      break;
 8009db4:	e03c      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6818      	ldr	r0, [r3, #0]
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6859      	ldr	r1, [r3, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f000 f914 	bl	8009ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2150      	movs	r1, #80	; 0x50
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f96d 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009dd4:	e02c      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6859      	ldr	r1, [r3, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f000 f933 	bl	800a04e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2160      	movs	r1, #96	; 0x60
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 f95d 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009df4:	e01c      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	6859      	ldr	r1, [r3, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f000 f8f4 	bl	8009ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2140      	movs	r1, #64	; 0x40
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f94d 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009e14:	e00c      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f000 f944 	bl	800a0ae <TIM_ITRx_SetConfig>
      break;
 8009e26:	e003      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2c:	e000      	b.n	8009e30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b083      	sub	sp, #12
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e7a:	bf00      	nop
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e8e:	bf00      	nop
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a40      	ldr	r2, [pc, #256]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d013      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ece:	d00f      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3d      	ldr	r2, [pc, #244]	; (8009fc8 <TIM_Base_SetConfig+0x118>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3c      	ldr	r2, [pc, #240]	; (8009fcc <TIM_Base_SetConfig+0x11c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a3b      	ldr	r2, [pc, #236]	; (8009fd0 <TIM_Base_SetConfig+0x120>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a3a      	ldr	r2, [pc, #232]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d108      	bne.n	8009f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a2f      	ldr	r2, [pc, #188]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d02b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f10:	d027      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <TIM_Base_SetConfig+0x118>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d023      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <TIM_Base_SetConfig+0x11c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <TIM_Base_SetConfig+0x120>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a29      	ldr	r2, [pc, #164]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d017      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a28      	ldr	r2, [pc, #160]	; (8009fd8 <TIM_Base_SetConfig+0x128>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a27      	ldr	r2, [pc, #156]	; (8009fdc <TIM_Base_SetConfig+0x12c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <TIM_Base_SetConfig+0x130>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a25      	ldr	r2, [pc, #148]	; (8009fe4 <TIM_Base_SetConfig+0x134>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <TIM_Base_SetConfig+0x138>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a23      	ldr	r2, [pc, #140]	; (8009fec <TIM_Base_SetConfig+0x13c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a0a      	ldr	r2, [pc, #40]	; (8009fc4 <TIM_Base_SetConfig+0x114>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_Base_SetConfig+0xf8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a0c      	ldr	r2, [pc, #48]	; (8009fd4 <TIM_Base_SetConfig+0x124>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d103      	bne.n	8009fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	615a      	str	r2, [r3, #20]
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	40000c00 	.word	0x40000c00
 8009fd4:	40010400 	.word	0x40010400
 8009fd8:	40014000 	.word	0x40014000
 8009fdc:	40014400 	.word	0x40014400
 8009fe0:	40014800 	.word	0x40014800
 8009fe4:	40001800 	.word	0x40001800
 8009fe8:	40001c00 	.word	0x40001c00
 8009fec:	40002000 	.word	0x40002000

08009ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f023 030a 	bic.w	r3, r3, #10
 800a02c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4313      	orrs	r3, r2
 800a034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	621a      	str	r2, [r3, #32]
}
 800a042:	bf00      	nop
 800a044:	371c      	adds	r7, #28
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a04e:	b480      	push	{r7}
 800a050:	b087      	sub	sp, #28
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f023 0210 	bic.w	r2, r3, #16
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	031b      	lsls	r3, r3, #12
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a08a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	f043 0307 	orr.w	r3, r3, #7
 800a0d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	609a      	str	r2, [r3, #8]
}
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	021a      	lsls	r2, r3, #8
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	431a      	orrs	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	609a      	str	r2, [r3, #8]
}
 800a118:	bf00      	nop
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a138:	2302      	movs	r3, #2
 800a13a:	e05a      	b.n	800a1f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a21      	ldr	r2, [pc, #132]	; (800a200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d022      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a188:	d01d      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d018      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1b      	ldr	r2, [pc, #108]	; (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d013      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1a      	ldr	r2, [pc, #104]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00e      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a18      	ldr	r2, [pc, #96]	; (800a210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d009      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a17      	ldr	r2, [pc, #92]	; (800a214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d004      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a15      	ldr	r2, [pc, #84]	; (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d10c      	bne.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40010000 	.word	0x40010000
 800a204:	40000400 	.word	0x40000400
 800a208:	40000800 	.word	0x40000800
 800a20c:	40000c00 	.word	0x40000c00
 800a210:	40010400 	.word	0x40010400
 800a214:	40014000 	.word	0x40014000
 800a218:	40001800 	.word	0x40001800

0800a21c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e03f      	b.n	800a2d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7fa f8a8 	bl	80043c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2224      	movs	r2, #36	; 0x24
 800a274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fddf 	bl	800ae4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a29c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	695a      	ldr	r2, [r3, #20]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b08a      	sub	sp, #40	; 0x28
 800a2e2:	af02      	add	r7, sp, #8
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	603b      	str	r3, [r7, #0]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d17c      	bne.n	800a3f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <HAL_UART_Transmit+0x2c>
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e075      	b.n	800a3fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_UART_Transmit+0x3e>
 800a318:	2302      	movs	r3, #2
 800a31a:	e06e      	b.n	800a3fa <HAL_UART_Transmit+0x11c>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2221      	movs	r2, #33	; 0x21
 800a32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a332:	f7fc fc9d 	bl	8006c70 <HAL_GetTick>
 800a336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	88fa      	ldrh	r2, [r7, #6]
 800a33c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	88fa      	ldrh	r2, [r7, #6]
 800a342:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34c:	d108      	bne.n	800a360 <HAL_UART_Transmit+0x82>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	e003      	b.n	800a368 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a364:	2300      	movs	r3, #0
 800a366:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a370:	e02a      	b.n	800a3c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	2200      	movs	r2, #0
 800a37a:	2180      	movs	r1, #128	; 0x80
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 fb1f 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e036      	b.n	800a3fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10b      	bne.n	800a3aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	3302      	adds	r3, #2
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	e007      	b.n	800a3ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1cf      	bne.n	800a372 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2140      	movs	r1, #64	; 0x40
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 faef 	bl	800a9c0 <UART_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e006      	b.n	800a3fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e000      	b.n	800a3fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a3f8:	2302      	movs	r3, #2
  }
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	4613      	mov	r3, r2
 800a40e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b20      	cmp	r3, #32
 800a41a:	d11d      	bne.n	800a458 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <HAL_UART_Receive_IT+0x26>
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e016      	b.n	800a45a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_UART_Receive_IT+0x38>
 800a436:	2302      	movs	r3, #2
 800a438:	e00f      	b.n	800a45a <HAL_UART_Receive_IT+0x58>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	461a      	mov	r2, r3
 800a44c:	68b9      	ldr	r1, [r7, #8]
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fb24 	bl	800aa9c <UART_Start_Receive_IT>
 800a454:	4603      	mov	r3, r0
 800a456:	e000      	b.n	800a45a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a458:	2302      	movs	r3, #2
  }
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b0ba      	sub	sp, #232	; 0xe8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a490:	2300      	movs	r3, #0
 800a492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a49a:	f003 030f 	and.w	r3, r3, #15
 800a49e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a4a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10f      	bne.n	800a4ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ae:	f003 0320 	and.w	r3, r3, #32
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d009      	beq.n	800a4ca <HAL_UART_IRQHandler+0x66>
 800a4b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4ba:	f003 0320 	and.w	r3, r3, #32
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fc07 	bl	800acd6 <UART_Receive_IT>
      return;
 800a4c8:	e256      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80de 	beq.w	800a690 <HAL_UART_IRQHandler+0x22c>
 800a4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80d1 	beq.w	800a690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <HAL_UART_IRQHandler+0xae>
 800a4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f043 0201 	orr.w	r2, r3, #1
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a516:	f003 0304 	and.w	r3, r3, #4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <HAL_UART_IRQHandler+0xd2>
 800a51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	f043 0202 	orr.w	r2, r3, #2
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00b      	beq.n	800a55a <HAL_UART_IRQHandler+0xf6>
 800a542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a552:	f043 0204 	orr.w	r2, r3, #4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d011      	beq.n	800a58a <HAL_UART_IRQHandler+0x126>
 800a566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d005      	beq.n	800a58a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f043 0208 	orr.w	r2, r3, #8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 81ed 	beq.w	800a96e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d008      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x14e>
 800a5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a4:	f003 0320 	and.w	r3, r3, #32
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fb92 	bl	800acd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5bc:	2b40      	cmp	r3, #64	; 0x40
 800a5be:	bf0c      	ite	eq
 800a5c0:	2301      	moveq	r3, #1
 800a5c2:	2300      	movne	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <HAL_UART_IRQHandler+0x17a>
 800a5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d04f      	beq.n	800a67e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa9a 	bl	800ab18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b40      	cmp	r3, #64	; 0x40
 800a5f0:	d141      	bne.n	800a676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a600:	e853 3f00 	ldrex	r3, [r3]
 800a604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3314      	adds	r3, #20
 800a61a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a61e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a62a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a62e:	e841 2300 	strex	r3, r2, [r1]
 800a632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1d9      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	d013      	beq.n	800a66e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	4a7d      	ldr	r2, [pc, #500]	; (800a840 <HAL_UART_IRQHandler+0x3dc>)
 800a64c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	4618      	mov	r0, r3
 800a654:	f7fd f9c8 	bl	80079e8 <HAL_DMA_Abort_IT>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d016      	beq.n	800a68c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66c:	e00e      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f990 	bl	800a994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a674:	e00a      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f98c 	bl	800a994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	e006      	b.n	800a68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f988 	bl	800a994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a68a:	e170      	b.n	800a96e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a68c:	bf00      	nop
    return;
 800a68e:	e16e      	b.n	800a96e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a694:	2b01      	cmp	r3, #1
 800a696:	f040 814a 	bne.w	800a92e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69e:	f003 0310 	and.w	r3, r3, #16
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8143 	beq.w	800a92e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 813c 	beq.w	800a92e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	60bb      	str	r3, [r7, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	60bb      	str	r3, [r7, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	2b40      	cmp	r3, #64	; 0x40
 800a6d8:	f040 80b4 	bne.w	800a844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 8140 	beq.w	800a972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f080 8139 	bcs.w	800a972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a712:	f000 8088 	beq.w	800a826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	330c      	adds	r3, #12
 800a71c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a72c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	330c      	adds	r3, #12
 800a73e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a74e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a75a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1d9      	bne.n	800a716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3314      	adds	r3, #20
 800a768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3314      	adds	r3, #20
 800a782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a78a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a78e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e1      	bne.n	800a762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3314      	adds	r3, #20
 800a7a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3314      	adds	r3, #20
 800a7be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e3      	bne.n	800a79e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f6:	f023 0310 	bic.w	r3, r3, #16
 800a7fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a808:	65ba      	str	r2, [r7, #88]	; 0x58
 800a80a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a80e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e3      	bne.n	800a7e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	4618      	mov	r0, r3
 800a822:	f7fd f871 	bl	8007908 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a82e:	b29b      	uxth	r3, r3
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	b29b      	uxth	r3, r3
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f8b6 	bl	800a9a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a83c:	e099      	b.n	800a972 <HAL_UART_IRQHandler+0x50e>
 800a83e:	bf00      	nop
 800a840:	0800abdf 	.word	0x0800abdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 808b 	beq.w	800a976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8086 	beq.w	800a976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	330c      	adds	r3, #12
 800a88a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a88e:	647a      	str	r2, [r7, #68]	; 0x44
 800a890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e3      	bne.n	800a86a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3314      	adds	r3, #20
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3314      	adds	r3, #20
 800a8c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a8c6:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e3      	bne.n	800a8a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	330c      	adds	r3, #12
 800a8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0310 	bic.w	r3, r3, #16
 800a8fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	330c      	adds	r3, #12
 800a908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a90c:	61fa      	str	r2, [r7, #28]
 800a90e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	69b9      	ldr	r1, [r7, #24]
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	617b      	str	r3, [r7, #20]
   return(result);
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e3      	bne.n	800a8e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f83e 	bl	800a9a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a92c:	e023      	b.n	800a976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a936:	2b00      	cmp	r3, #0
 800a938:	d009      	beq.n	800a94e <HAL_UART_IRQHandler+0x4ea>
 800a93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d003      	beq.n	800a94e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f95d 	bl	800ac06 <UART_Transmit_IT>
    return;
 800a94c:	e014      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a94e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <HAL_UART_IRQHandler+0x514>
 800a95a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f99d 	bl	800aca6 <UART_EndTransmit_IT>
    return;
 800a96c:	e004      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
    return;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
      return;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <HAL_UART_IRQHandler+0x514>
      return;
 800a976:	bf00      	nop
  }
}
 800a978:	37e8      	adds	r7, #232	; 0xe8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop

0800a980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b090      	sub	sp, #64	; 0x40
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d0:	e050      	b.n	800aa74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d8:	d04c      	beq.n	800aa74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d007      	beq.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9e0:	f7fc f946 	bl	8006c70 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d241      	bcs.n	800aa74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	330c      	adds	r3, #12
 800aa0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa10:	637a      	str	r2, [r7, #52]	; 0x34
 800aa12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e5      	bne.n	800a9f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3314      	adds	r3, #20
 800aa2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	613b      	str	r3, [r7, #16]
   return(result);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3314      	adds	r3, #20
 800aa42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa44:	623a      	str	r2, [r7, #32]
 800aa46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	69f9      	ldr	r1, [r7, #28]
 800aa4a:	6a3a      	ldr	r2, [r7, #32]
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e00f      	b.n	800aa94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	bf0c      	ite	eq
 800aa84:	2301      	moveq	r3, #1
 800aa86:	2300      	movne	r3, #0
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d09f      	beq.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3740      	adds	r7, #64	; 0x40
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	88fa      	ldrh	r2, [r7, #6]
 800aab4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	88fa      	ldrh	r2, [r7, #6]
 800aaba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2222      	movs	r2, #34	; 0x22
 800aac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d007      	beq.n	800aaea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aae8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	695a      	ldr	r2, [r3, #20]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0201 	orr.w	r2, r2, #1
 800aaf8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f042 0220 	orr.w	r2, r2, #32
 800ab08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b095      	sub	sp, #84	; 0x54
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	330c      	adds	r3, #12
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab40:	643a      	str	r2, [r7, #64]	; 0x40
 800ab42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e5      	bne.n	800ab20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3314      	adds	r3, #20
 800ab5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3314      	adds	r3, #20
 800ab72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d119      	bne.n	800abc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	330c      	adds	r3, #12
 800ab96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	e853 3f00 	ldrex	r3, [r3]
 800ab9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f023 0310 	bic.w	r3, r3, #16
 800aba6:	647b      	str	r3, [r7, #68]	; 0x44
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	330c      	adds	r3, #12
 800abae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abb0:	61ba      	str	r2, [r7, #24]
 800abb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	6979      	ldr	r1, [r7, #20]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	613b      	str	r3, [r7, #16]
   return(result);
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e5      	bne.n	800ab90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2220      	movs	r2, #32
 800abc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abd2:	bf00      	nop
 800abd4:	3754      	adds	r7, #84	; 0x54
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff fecb 	bl	800a994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b085      	sub	sp, #20
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b21      	cmp	r3, #33	; 0x21
 800ac18:	d13e      	bne.n	800ac98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac22:	d114      	bne.n	800ac4e <UART_Transmit_IT+0x48>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d110      	bne.n	800ac4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	1c9a      	adds	r2, r3, #2
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	621a      	str	r2, [r3, #32]
 800ac4c:	e008      	b.n	800ac60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	1c59      	adds	r1, r3, #1
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	6211      	str	r1, [r2, #32]
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	3b01      	subs	r3, #1
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10f      	bne.n	800ac94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	e000      	b.n	800ac9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac98:	2302      	movs	r3, #2
  }
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68da      	ldr	r2, [r3, #12]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2220      	movs	r2, #32
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f7ff fe5a 	bl	800a980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b08c      	sub	sp, #48	; 0x30
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b22      	cmp	r3, #34	; 0x22
 800ace8:	f040 80ab 	bne.w	800ae42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf4:	d117      	bne.n	800ad26 <UART_Receive_IT+0x50>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d113      	bne.n	800ad26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	1c9a      	adds	r2, r3, #2
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	629a      	str	r2, [r3, #40]	; 0x28
 800ad24:	e026      	b.n	800ad74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad38:	d007      	beq.n	800ad4a <UART_Receive_IT+0x74>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10a      	bne.n	800ad58 <UART_Receive_IT+0x82>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d106      	bne.n	800ad58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	e008      	b.n	800ad6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	4619      	mov	r1, r3
 800ad82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d15a      	bne.n	800ae3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f022 0220 	bic.w	r2, r2, #32
 800ad96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ada6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	695a      	ldr	r2, [r3, #20]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 0201 	bic.w	r2, r2, #1
 800adb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2220      	movs	r2, #32
 800adbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d135      	bne.n	800ae34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	330c      	adds	r3, #12
 800add4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	613b      	str	r3, [r7, #16]
   return(result);
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f023 0310 	bic.w	r3, r3, #16
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	330c      	adds	r3, #12
 800adec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adee:	623a      	str	r2, [r7, #32]
 800adf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	69f9      	ldr	r1, [r7, #28]
 800adf4:	6a3a      	ldr	r2, [r7, #32]
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e5      	bne.n	800adce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0310 	and.w	r3, r3, #16
 800ae0c:	2b10      	cmp	r3, #16
 800ae0e:	d10a      	bne.n	800ae26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae10:	2300      	movs	r3, #0
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fdbb 	bl	800a9a8 <HAL_UARTEx_RxEventCallback>
 800ae32:	e002      	b.n	800ae3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7f9 f86f 	bl	8003f18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e002      	b.n	800ae44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e000      	b.n	800ae44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae42:	2302      	movs	r3, #2
  }
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3730      	adds	r7, #48	; 0x30
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae50:	b0c0      	sub	sp, #256	; 0x100
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae68:	68d9      	ldr	r1, [r3, #12]
 800ae6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	ea40 0301 	orr.w	r3, r0, r1
 800ae74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	431a      	orrs	r2, r3
 800ae84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	431a      	orrs	r2, r3
 800ae8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aea4:	f021 010c 	bic.w	r1, r1, #12
 800aea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aeb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aec6:	6999      	ldr	r1, [r3, #24]
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	ea40 0301 	orr.w	r3, r0, r1
 800aed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	4b8f      	ldr	r3, [pc, #572]	; (800b118 <UART_SetConfig+0x2cc>)
 800aedc:	429a      	cmp	r2, r3
 800aede:	d005      	beq.n	800aeec <UART_SetConfig+0xa0>
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b8d      	ldr	r3, [pc, #564]	; (800b11c <UART_SetConfig+0x2d0>)
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d104      	bne.n	800aef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aeec:	f7fd fb62 	bl	80085b4 <HAL_RCC_GetPCLK2Freq>
 800aef0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aef4:	e003      	b.n	800aefe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aef6:	f7fd fb49 	bl	800858c <HAL_RCC_GetPCLK1Freq>
 800aefa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af08:	f040 810c 	bne.w	800b124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af10:	2200      	movs	r2, #0
 800af12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800af1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800af1e:	4622      	mov	r2, r4
 800af20:	462b      	mov	r3, r5
 800af22:	1891      	adds	r1, r2, r2
 800af24:	65b9      	str	r1, [r7, #88]	; 0x58
 800af26:	415b      	adcs	r3, r3
 800af28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800af2e:	4621      	mov	r1, r4
 800af30:	eb12 0801 	adds.w	r8, r2, r1
 800af34:	4629      	mov	r1, r5
 800af36:	eb43 0901 	adc.w	r9, r3, r1
 800af3a:	f04f 0200 	mov.w	r2, #0
 800af3e:	f04f 0300 	mov.w	r3, #0
 800af42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af4e:	4690      	mov	r8, r2
 800af50:	4699      	mov	r9, r3
 800af52:	4623      	mov	r3, r4
 800af54:	eb18 0303 	adds.w	r3, r8, r3
 800af58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af5c:	462b      	mov	r3, r5
 800af5e:	eb49 0303 	adc.w	r3, r9, r3
 800af62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800af76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af7a:	460b      	mov	r3, r1
 800af7c:	18db      	adds	r3, r3, r3
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50
 800af80:	4613      	mov	r3, r2
 800af82:	eb42 0303 	adc.w	r3, r2, r3
 800af86:	657b      	str	r3, [r7, #84]	; 0x54
 800af88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af90:	f7f5 feca 	bl	8000d28 <__aeabi_uldivmod>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4b61      	ldr	r3, [pc, #388]	; (800b120 <UART_SetConfig+0x2d4>)
 800af9a:	fba3 2302 	umull	r2, r3, r3, r2
 800af9e:	095b      	lsrs	r3, r3, #5
 800afa0:	011c      	lsls	r4, r3, #4
 800afa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800afb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800afb4:	4642      	mov	r2, r8
 800afb6:	464b      	mov	r3, r9
 800afb8:	1891      	adds	r1, r2, r2
 800afba:	64b9      	str	r1, [r7, #72]	; 0x48
 800afbc:	415b      	adcs	r3, r3
 800afbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800afc4:	4641      	mov	r1, r8
 800afc6:	eb12 0a01 	adds.w	sl, r2, r1
 800afca:	4649      	mov	r1, r9
 800afcc:	eb43 0b01 	adc.w	fp, r3, r1
 800afd0:	f04f 0200 	mov.w	r2, #0
 800afd4:	f04f 0300 	mov.w	r3, #0
 800afd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afe4:	4692      	mov	sl, r2
 800afe6:	469b      	mov	fp, r3
 800afe8:	4643      	mov	r3, r8
 800afea:	eb1a 0303 	adds.w	r3, sl, r3
 800afee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aff2:	464b      	mov	r3, r9
 800aff4:	eb4b 0303 	adc.w	r3, fp, r3
 800aff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800affc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b008:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b00c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b010:	460b      	mov	r3, r1
 800b012:	18db      	adds	r3, r3, r3
 800b014:	643b      	str	r3, [r7, #64]	; 0x40
 800b016:	4613      	mov	r3, r2
 800b018:	eb42 0303 	adc.w	r3, r2, r3
 800b01c:	647b      	str	r3, [r7, #68]	; 0x44
 800b01e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b026:	f7f5 fe7f 	bl	8000d28 <__aeabi_uldivmod>
 800b02a:	4602      	mov	r2, r0
 800b02c:	460b      	mov	r3, r1
 800b02e:	4611      	mov	r1, r2
 800b030:	4b3b      	ldr	r3, [pc, #236]	; (800b120 <UART_SetConfig+0x2d4>)
 800b032:	fba3 2301 	umull	r2, r3, r3, r1
 800b036:	095b      	lsrs	r3, r3, #5
 800b038:	2264      	movs	r2, #100	; 0x64
 800b03a:	fb02 f303 	mul.w	r3, r2, r3
 800b03e:	1acb      	subs	r3, r1, r3
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b046:	4b36      	ldr	r3, [pc, #216]	; (800b120 <UART_SetConfig+0x2d4>)
 800b048:	fba3 2302 	umull	r2, r3, r3, r2
 800b04c:	095b      	lsrs	r3, r3, #5
 800b04e:	005b      	lsls	r3, r3, #1
 800b050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b054:	441c      	add	r4, r3
 800b056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b05a:	2200      	movs	r2, #0
 800b05c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b060:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b068:	4642      	mov	r2, r8
 800b06a:	464b      	mov	r3, r9
 800b06c:	1891      	adds	r1, r2, r2
 800b06e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b070:	415b      	adcs	r3, r3
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b078:	4641      	mov	r1, r8
 800b07a:	1851      	adds	r1, r2, r1
 800b07c:	6339      	str	r1, [r7, #48]	; 0x30
 800b07e:	4649      	mov	r1, r9
 800b080:	414b      	adcs	r3, r1
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
 800b084:	f04f 0200 	mov.w	r2, #0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b090:	4659      	mov	r1, fp
 800b092:	00cb      	lsls	r3, r1, #3
 800b094:	4651      	mov	r1, sl
 800b096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b09a:	4651      	mov	r1, sl
 800b09c:	00ca      	lsls	r2, r1, #3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	189b      	adds	r3, r3, r2
 800b0a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	460a      	mov	r2, r1
 800b0b0:	eb42 0303 	adc.w	r3, r2, r3
 800b0b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b0c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b0c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	18db      	adds	r3, r3, r3
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	eb42 0303 	adc.w	r3, r2, r3
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b0de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b0e2:	f7f5 fe21 	bl	8000d28 <__aeabi_uldivmod>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	; (800b120 <UART_SetConfig+0x2d4>)
 800b0ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b0f0:	095b      	lsrs	r3, r3, #5
 800b0f2:	2164      	movs	r1, #100	; 0x64
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	3332      	adds	r3, #50	; 0x32
 800b0fe:	4a08      	ldr	r2, [pc, #32]	; (800b120 <UART_SetConfig+0x2d4>)
 800b100:	fba2 2303 	umull	r2, r3, r2, r3
 800b104:	095b      	lsrs	r3, r3, #5
 800b106:	f003 0207 	and.w	r2, r3, #7
 800b10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4422      	add	r2, r4
 800b112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b114:	e106      	b.n	800b324 <UART_SetConfig+0x4d8>
 800b116:	bf00      	nop
 800b118:	40011000 	.word	0x40011000
 800b11c:	40011400 	.word	0x40011400
 800b120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b12e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b136:	4642      	mov	r2, r8
 800b138:	464b      	mov	r3, r9
 800b13a:	1891      	adds	r1, r2, r2
 800b13c:	6239      	str	r1, [r7, #32]
 800b13e:	415b      	adcs	r3, r3
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
 800b142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b146:	4641      	mov	r1, r8
 800b148:	1854      	adds	r4, r2, r1
 800b14a:	4649      	mov	r1, r9
 800b14c:	eb43 0501 	adc.w	r5, r3, r1
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 0300 	mov.w	r3, #0
 800b158:	00eb      	lsls	r3, r5, #3
 800b15a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b15e:	00e2      	lsls	r2, r4, #3
 800b160:	4614      	mov	r4, r2
 800b162:	461d      	mov	r5, r3
 800b164:	4643      	mov	r3, r8
 800b166:	18e3      	adds	r3, r4, r3
 800b168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b16c:	464b      	mov	r3, r9
 800b16e:	eb45 0303 	adc.w	r3, r5, r3
 800b172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	f04f 0300 	mov.w	r3, #0
 800b18e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b192:	4629      	mov	r1, r5
 800b194:	008b      	lsls	r3, r1, #2
 800b196:	4621      	mov	r1, r4
 800b198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b19c:	4621      	mov	r1, r4
 800b19e:	008a      	lsls	r2, r1, #2
 800b1a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b1a4:	f7f5 fdc0 	bl	8000d28 <__aeabi_uldivmod>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4b60      	ldr	r3, [pc, #384]	; (800b330 <UART_SetConfig+0x4e4>)
 800b1ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b1b2:	095b      	lsrs	r3, r3, #5
 800b1b4:	011c      	lsls	r4, r3, #4
 800b1b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b1c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b1c8:	4642      	mov	r2, r8
 800b1ca:	464b      	mov	r3, r9
 800b1cc:	1891      	adds	r1, r2, r2
 800b1ce:	61b9      	str	r1, [r7, #24]
 800b1d0:	415b      	adcs	r3, r3
 800b1d2:	61fb      	str	r3, [r7, #28]
 800b1d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1d8:	4641      	mov	r1, r8
 800b1da:	1851      	adds	r1, r2, r1
 800b1dc:	6139      	str	r1, [r7, #16]
 800b1de:	4649      	mov	r1, r9
 800b1e0:	414b      	adcs	r3, r1
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1f0:	4659      	mov	r1, fp
 800b1f2:	00cb      	lsls	r3, r1, #3
 800b1f4:	4651      	mov	r1, sl
 800b1f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1fa:	4651      	mov	r1, sl
 800b1fc:	00ca      	lsls	r2, r1, #3
 800b1fe:	4610      	mov	r0, r2
 800b200:	4619      	mov	r1, r3
 800b202:	4603      	mov	r3, r0
 800b204:	4642      	mov	r2, r8
 800b206:	189b      	adds	r3, r3, r2
 800b208:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b20c:	464b      	mov	r3, r9
 800b20e:	460a      	mov	r2, r1
 800b210:	eb42 0303 	adc.w	r3, r2, r3
 800b214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	67bb      	str	r3, [r7, #120]	; 0x78
 800b222:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b224:	f04f 0200 	mov.w	r2, #0
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b230:	4649      	mov	r1, r9
 800b232:	008b      	lsls	r3, r1, #2
 800b234:	4641      	mov	r1, r8
 800b236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b23a:	4641      	mov	r1, r8
 800b23c:	008a      	lsls	r2, r1, #2
 800b23e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b242:	f7f5 fd71 	bl	8000d28 <__aeabi_uldivmod>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4611      	mov	r1, r2
 800b24c:	4b38      	ldr	r3, [pc, #224]	; (800b330 <UART_SetConfig+0x4e4>)
 800b24e:	fba3 2301 	umull	r2, r3, r3, r1
 800b252:	095b      	lsrs	r3, r3, #5
 800b254:	2264      	movs	r2, #100	; 0x64
 800b256:	fb02 f303 	mul.w	r3, r2, r3
 800b25a:	1acb      	subs	r3, r1, r3
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	3332      	adds	r3, #50	; 0x32
 800b260:	4a33      	ldr	r2, [pc, #204]	; (800b330 <UART_SetConfig+0x4e4>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	095b      	lsrs	r3, r3, #5
 800b268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b26c:	441c      	add	r4, r3
 800b26e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b272:	2200      	movs	r2, #0
 800b274:	673b      	str	r3, [r7, #112]	; 0x70
 800b276:	677a      	str	r2, [r7, #116]	; 0x74
 800b278:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b27c:	4642      	mov	r2, r8
 800b27e:	464b      	mov	r3, r9
 800b280:	1891      	adds	r1, r2, r2
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	415b      	adcs	r3, r3
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b28c:	4641      	mov	r1, r8
 800b28e:	1851      	adds	r1, r2, r1
 800b290:	6039      	str	r1, [r7, #0]
 800b292:	4649      	mov	r1, r9
 800b294:	414b      	adcs	r3, r1
 800b296:	607b      	str	r3, [r7, #4]
 800b298:	f04f 0200 	mov.w	r2, #0
 800b29c:	f04f 0300 	mov.w	r3, #0
 800b2a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	00cb      	lsls	r3, r1, #3
 800b2a8:	4651      	mov	r1, sl
 800b2aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ae:	4651      	mov	r1, sl
 800b2b0:	00ca      	lsls	r2, r1, #3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	189b      	adds	r3, r3, r2
 800b2bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2be:	464b      	mov	r3, r9
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	eb42 0303 	adc.w	r3, r2, r3
 800b2c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	663b      	str	r3, [r7, #96]	; 0x60
 800b2d2:	667a      	str	r2, [r7, #100]	; 0x64
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	008b      	lsls	r3, r1, #2
 800b2e4:	4641      	mov	r1, r8
 800b2e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2ea:	4641      	mov	r1, r8
 800b2ec:	008a      	lsls	r2, r1, #2
 800b2ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b2f2:	f7f5 fd19 	bl	8000d28 <__aeabi_uldivmod>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <UART_SetConfig+0x4e4>)
 800b2fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b300:	095b      	lsrs	r3, r3, #5
 800b302:	2164      	movs	r1, #100	; 0x64
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	011b      	lsls	r3, r3, #4
 800b30c:	3332      	adds	r3, #50	; 0x32
 800b30e:	4a08      	ldr	r2, [pc, #32]	; (800b330 <UART_SetConfig+0x4e4>)
 800b310:	fba2 2303 	umull	r2, r3, r2, r3
 800b314:	095b      	lsrs	r3, r3, #5
 800b316:	f003 020f 	and.w	r2, r3, #15
 800b31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4422      	add	r2, r4
 800b322:	609a      	str	r2, [r3, #8]
}
 800b324:	bf00      	nop
 800b326:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b32a:	46bd      	mov	sp, r7
 800b32c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b330:	51eb851f 	.word	0x51eb851f

0800b334 <__cvt>:
 800b334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b338:	ec55 4b10 	vmov	r4, r5, d0
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	460e      	mov	r6, r1
 800b340:	4619      	mov	r1, r3
 800b342:	462b      	mov	r3, r5
 800b344:	bfbb      	ittet	lt
 800b346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b34a:	461d      	movlt	r5, r3
 800b34c:	2300      	movge	r3, #0
 800b34e:	232d      	movlt	r3, #45	; 0x2d
 800b350:	700b      	strb	r3, [r1, #0]
 800b352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b358:	4691      	mov	r9, r2
 800b35a:	f023 0820 	bic.w	r8, r3, #32
 800b35e:	bfbc      	itt	lt
 800b360:	4622      	movlt	r2, r4
 800b362:	4614      	movlt	r4, r2
 800b364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b368:	d005      	beq.n	800b376 <__cvt+0x42>
 800b36a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b36e:	d100      	bne.n	800b372 <__cvt+0x3e>
 800b370:	3601      	adds	r6, #1
 800b372:	2102      	movs	r1, #2
 800b374:	e000      	b.n	800b378 <__cvt+0x44>
 800b376:	2103      	movs	r1, #3
 800b378:	ab03      	add	r3, sp, #12
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	ab02      	add	r3, sp, #8
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	ec45 4b10 	vmov	d0, r4, r5
 800b384:	4653      	mov	r3, sl
 800b386:	4632      	mov	r2, r6
 800b388:	f000 ff36 	bl	800c1f8 <_dtoa_r>
 800b38c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b390:	4607      	mov	r7, r0
 800b392:	d102      	bne.n	800b39a <__cvt+0x66>
 800b394:	f019 0f01 	tst.w	r9, #1
 800b398:	d022      	beq.n	800b3e0 <__cvt+0xac>
 800b39a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b39e:	eb07 0906 	add.w	r9, r7, r6
 800b3a2:	d110      	bne.n	800b3c6 <__cvt+0x92>
 800b3a4:	783b      	ldrb	r3, [r7, #0]
 800b3a6:	2b30      	cmp	r3, #48	; 0x30
 800b3a8:	d10a      	bne.n	800b3c0 <__cvt+0x8c>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f5 fba9 	bl	8000b08 <__aeabi_dcmpeq>
 800b3b6:	b918      	cbnz	r0, 800b3c0 <__cvt+0x8c>
 800b3b8:	f1c6 0601 	rsb	r6, r6, #1
 800b3bc:	f8ca 6000 	str.w	r6, [sl]
 800b3c0:	f8da 3000 	ldr.w	r3, [sl]
 800b3c4:	4499      	add	r9, r3
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7f5 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 800b3d2:	b108      	cbz	r0, 800b3d8 <__cvt+0xa4>
 800b3d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3d8:	2230      	movs	r2, #48	; 0x30
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	454b      	cmp	r3, r9
 800b3de:	d307      	bcc.n	800b3f0 <__cvt+0xbc>
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3e4:	1bdb      	subs	r3, r3, r7
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	b004      	add	sp, #16
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	1c59      	adds	r1, r3, #1
 800b3f2:	9103      	str	r1, [sp, #12]
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	e7f0      	b.n	800b3da <__cvt+0xa6>

0800b3f8 <__exponent>:
 800b3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	bfb8      	it	lt
 800b400:	4249      	neglt	r1, r1
 800b402:	f803 2b02 	strb.w	r2, [r3], #2
 800b406:	bfb4      	ite	lt
 800b408:	222d      	movlt	r2, #45	; 0x2d
 800b40a:	222b      	movge	r2, #43	; 0x2b
 800b40c:	2909      	cmp	r1, #9
 800b40e:	7042      	strb	r2, [r0, #1]
 800b410:	dd2a      	ble.n	800b468 <__exponent+0x70>
 800b412:	f10d 0207 	add.w	r2, sp, #7
 800b416:	4617      	mov	r7, r2
 800b418:	260a      	movs	r6, #10
 800b41a:	4694      	mov	ip, r2
 800b41c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b420:	fb06 1415 	mls	r4, r6, r5, r1
 800b424:	3430      	adds	r4, #48	; 0x30
 800b426:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b42a:	460c      	mov	r4, r1
 800b42c:	2c63      	cmp	r4, #99	; 0x63
 800b42e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b432:	4629      	mov	r1, r5
 800b434:	dcf1      	bgt.n	800b41a <__exponent+0x22>
 800b436:	3130      	adds	r1, #48	; 0x30
 800b438:	f1ac 0402 	sub.w	r4, ip, #2
 800b43c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b440:	1c41      	adds	r1, r0, #1
 800b442:	4622      	mov	r2, r4
 800b444:	42ba      	cmp	r2, r7
 800b446:	d30a      	bcc.n	800b45e <__exponent+0x66>
 800b448:	f10d 0209 	add.w	r2, sp, #9
 800b44c:	eba2 020c 	sub.w	r2, r2, ip
 800b450:	42bc      	cmp	r4, r7
 800b452:	bf88      	it	hi
 800b454:	2200      	movhi	r2, #0
 800b456:	4413      	add	r3, r2
 800b458:	1a18      	subs	r0, r3, r0
 800b45a:	b003      	add	sp, #12
 800b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b45e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b462:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b466:	e7ed      	b.n	800b444 <__exponent+0x4c>
 800b468:	2330      	movs	r3, #48	; 0x30
 800b46a:	3130      	adds	r1, #48	; 0x30
 800b46c:	7083      	strb	r3, [r0, #2]
 800b46e:	70c1      	strb	r1, [r0, #3]
 800b470:	1d03      	adds	r3, r0, #4
 800b472:	e7f1      	b.n	800b458 <__exponent+0x60>

0800b474 <_printf_float>:
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	ed2d 8b02 	vpush	{d8}
 800b47c:	b08d      	sub	sp, #52	; 0x34
 800b47e:	460c      	mov	r4, r1
 800b480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b484:	4616      	mov	r6, r2
 800b486:	461f      	mov	r7, r3
 800b488:	4605      	mov	r5, r0
 800b48a:	f000 fd95 	bl	800bfb8 <_localeconv_r>
 800b48e:	f8d0 a000 	ldr.w	sl, [r0]
 800b492:	4650      	mov	r0, sl
 800b494:	f7f4 ff0c 	bl	80002b0 <strlen>
 800b498:	2300      	movs	r3, #0
 800b49a:	930a      	str	r3, [sp, #40]	; 0x28
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	9305      	str	r3, [sp, #20]
 800b4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4a8:	3307      	adds	r3, #7
 800b4aa:	f023 0307 	bic.w	r3, r3, #7
 800b4ae:	f103 0208 	add.w	r2, r3, #8
 800b4b2:	f8c8 2000 	str.w	r2, [r8]
 800b4b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4c4:	ee08 0a10 	vmov	s16, r0
 800b4c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b4cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4d0:	4b9e      	ldr	r3, [pc, #632]	; (800b74c <_printf_float+0x2d8>)
 800b4d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d6:	f7f5 fb49 	bl	8000b6c <__aeabi_dcmpun>
 800b4da:	bb88      	cbnz	r0, 800b540 <_printf_float+0xcc>
 800b4dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4e0:	4b9a      	ldr	r3, [pc, #616]	; (800b74c <_printf_float+0x2d8>)
 800b4e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4e6:	f7f5 fb23 	bl	8000b30 <__aeabi_dcmple>
 800b4ea:	bb48      	cbnz	r0, 800b540 <_printf_float+0xcc>
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	f7f5 fb12 	bl	8000b1c <__aeabi_dcmplt>
 800b4f8:	b110      	cbz	r0, 800b500 <_printf_float+0x8c>
 800b4fa:	232d      	movs	r3, #45	; 0x2d
 800b4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b500:	4a93      	ldr	r2, [pc, #588]	; (800b750 <_printf_float+0x2dc>)
 800b502:	4b94      	ldr	r3, [pc, #592]	; (800b754 <_printf_float+0x2e0>)
 800b504:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b508:	bf94      	ite	ls
 800b50a:	4690      	movls	r8, r2
 800b50c:	4698      	movhi	r8, r3
 800b50e:	2303      	movs	r3, #3
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	9b05      	ldr	r3, [sp, #20]
 800b514:	f023 0304 	bic.w	r3, r3, #4
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	f04f 0900 	mov.w	r9, #0
 800b51e:	9700      	str	r7, [sp, #0]
 800b520:	4633      	mov	r3, r6
 800b522:	aa0b      	add	r2, sp, #44	; 0x2c
 800b524:	4621      	mov	r1, r4
 800b526:	4628      	mov	r0, r5
 800b528:	f000 f9da 	bl	800b8e0 <_printf_common>
 800b52c:	3001      	adds	r0, #1
 800b52e:	f040 8090 	bne.w	800b652 <_printf_float+0x1de>
 800b532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b536:	b00d      	add	sp, #52	; 0x34
 800b538:	ecbd 8b02 	vpop	{d8}
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	4642      	mov	r2, r8
 800b542:	464b      	mov	r3, r9
 800b544:	4640      	mov	r0, r8
 800b546:	4649      	mov	r1, r9
 800b548:	f7f5 fb10 	bl	8000b6c <__aeabi_dcmpun>
 800b54c:	b140      	cbz	r0, 800b560 <_printf_float+0xec>
 800b54e:	464b      	mov	r3, r9
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfbc      	itt	lt
 800b554:	232d      	movlt	r3, #45	; 0x2d
 800b556:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b55a:	4a7f      	ldr	r2, [pc, #508]	; (800b758 <_printf_float+0x2e4>)
 800b55c:	4b7f      	ldr	r3, [pc, #508]	; (800b75c <_printf_float+0x2e8>)
 800b55e:	e7d1      	b.n	800b504 <_printf_float+0x90>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b566:	9206      	str	r2, [sp, #24]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	d13f      	bne.n	800b5ec <_printf_float+0x178>
 800b56c:	2306      	movs	r3, #6
 800b56e:	6063      	str	r3, [r4, #4]
 800b570:	9b05      	ldr	r3, [sp, #20]
 800b572:	6861      	ldr	r1, [r4, #4]
 800b574:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b578:	2300      	movs	r3, #0
 800b57a:	9303      	str	r3, [sp, #12]
 800b57c:	ab0a      	add	r3, sp, #40	; 0x28
 800b57e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b582:	ab09      	add	r3, sp, #36	; 0x24
 800b584:	ec49 8b10 	vmov	d0, r8, r9
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	6022      	str	r2, [r4, #0]
 800b58c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b590:	4628      	mov	r0, r5
 800b592:	f7ff fecf 	bl	800b334 <__cvt>
 800b596:	9b06      	ldr	r3, [sp, #24]
 800b598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b59a:	2b47      	cmp	r3, #71	; 0x47
 800b59c:	4680      	mov	r8, r0
 800b59e:	d108      	bne.n	800b5b2 <_printf_float+0x13e>
 800b5a0:	1cc8      	adds	r0, r1, #3
 800b5a2:	db02      	blt.n	800b5aa <_printf_float+0x136>
 800b5a4:	6863      	ldr	r3, [r4, #4]
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	dd41      	ble.n	800b62e <_printf_float+0x1ba>
 800b5aa:	f1ab 0302 	sub.w	r3, fp, #2
 800b5ae:	fa5f fb83 	uxtb.w	fp, r3
 800b5b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5b6:	d820      	bhi.n	800b5fa <_printf_float+0x186>
 800b5b8:	3901      	subs	r1, #1
 800b5ba:	465a      	mov	r2, fp
 800b5bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5c0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5c2:	f7ff ff19 	bl	800b3f8 <__exponent>
 800b5c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c8:	1813      	adds	r3, r2, r0
 800b5ca:	2a01      	cmp	r2, #1
 800b5cc:	4681      	mov	r9, r0
 800b5ce:	6123      	str	r3, [r4, #16]
 800b5d0:	dc02      	bgt.n	800b5d8 <_printf_float+0x164>
 800b5d2:	6822      	ldr	r2, [r4, #0]
 800b5d4:	07d2      	lsls	r2, r2, #31
 800b5d6:	d501      	bpl.n	800b5dc <_printf_float+0x168>
 800b5d8:	3301      	adds	r3, #1
 800b5da:	6123      	str	r3, [r4, #16]
 800b5dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d09c      	beq.n	800b51e <_printf_float+0xaa>
 800b5e4:	232d      	movs	r3, #45	; 0x2d
 800b5e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ea:	e798      	b.n	800b51e <_printf_float+0xaa>
 800b5ec:	9a06      	ldr	r2, [sp, #24]
 800b5ee:	2a47      	cmp	r2, #71	; 0x47
 800b5f0:	d1be      	bne.n	800b570 <_printf_float+0xfc>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1bc      	bne.n	800b570 <_printf_float+0xfc>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e7b9      	b.n	800b56e <_printf_float+0xfa>
 800b5fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5fe:	d118      	bne.n	800b632 <_printf_float+0x1be>
 800b600:	2900      	cmp	r1, #0
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	dd0b      	ble.n	800b61e <_printf_float+0x1aa>
 800b606:	6121      	str	r1, [r4, #16]
 800b608:	b913      	cbnz	r3, 800b610 <_printf_float+0x19c>
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	07d0      	lsls	r0, r2, #31
 800b60e:	d502      	bpl.n	800b616 <_printf_float+0x1a2>
 800b610:	3301      	adds	r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	6123      	str	r3, [r4, #16]
 800b616:	65a1      	str	r1, [r4, #88]	; 0x58
 800b618:	f04f 0900 	mov.w	r9, #0
 800b61c:	e7de      	b.n	800b5dc <_printf_float+0x168>
 800b61e:	b913      	cbnz	r3, 800b626 <_printf_float+0x1b2>
 800b620:	6822      	ldr	r2, [r4, #0]
 800b622:	07d2      	lsls	r2, r2, #31
 800b624:	d501      	bpl.n	800b62a <_printf_float+0x1b6>
 800b626:	3302      	adds	r3, #2
 800b628:	e7f4      	b.n	800b614 <_printf_float+0x1a0>
 800b62a:	2301      	movs	r3, #1
 800b62c:	e7f2      	b.n	800b614 <_printf_float+0x1a0>
 800b62e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b634:	4299      	cmp	r1, r3
 800b636:	db05      	blt.n	800b644 <_printf_float+0x1d0>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	6121      	str	r1, [r4, #16]
 800b63c:	07d8      	lsls	r0, r3, #31
 800b63e:	d5ea      	bpl.n	800b616 <_printf_float+0x1a2>
 800b640:	1c4b      	adds	r3, r1, #1
 800b642:	e7e7      	b.n	800b614 <_printf_float+0x1a0>
 800b644:	2900      	cmp	r1, #0
 800b646:	bfd4      	ite	le
 800b648:	f1c1 0202 	rsble	r2, r1, #2
 800b64c:	2201      	movgt	r2, #1
 800b64e:	4413      	add	r3, r2
 800b650:	e7e0      	b.n	800b614 <_printf_float+0x1a0>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	055a      	lsls	r2, r3, #21
 800b656:	d407      	bmi.n	800b668 <_printf_float+0x1f4>
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	4642      	mov	r2, r8
 800b65c:	4631      	mov	r1, r6
 800b65e:	4628      	mov	r0, r5
 800b660:	47b8      	blx	r7
 800b662:	3001      	adds	r0, #1
 800b664:	d12c      	bne.n	800b6c0 <_printf_float+0x24c>
 800b666:	e764      	b.n	800b532 <_printf_float+0xbe>
 800b668:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b66c:	f240 80e0 	bls.w	800b830 <_printf_float+0x3bc>
 800b670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b674:	2200      	movs	r2, #0
 800b676:	2300      	movs	r3, #0
 800b678:	f7f5 fa46 	bl	8000b08 <__aeabi_dcmpeq>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d034      	beq.n	800b6ea <_printf_float+0x276>
 800b680:	4a37      	ldr	r2, [pc, #220]	; (800b760 <_printf_float+0x2ec>)
 800b682:	2301      	movs	r3, #1
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	47b8      	blx	r7
 800b68a:	3001      	adds	r0, #1
 800b68c:	f43f af51 	beq.w	800b532 <_printf_float+0xbe>
 800b690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b694:	429a      	cmp	r2, r3
 800b696:	db02      	blt.n	800b69e <_printf_float+0x22a>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	07d8      	lsls	r0, r3, #31
 800b69c:	d510      	bpl.n	800b6c0 <_printf_float+0x24c>
 800b69e:	ee18 3a10 	vmov	r3, s16
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b8      	blx	r7
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f43f af41 	beq.w	800b532 <_printf_float+0xbe>
 800b6b0:	f04f 0800 	mov.w	r8, #0
 800b6b4:	f104 091a 	add.w	r9, r4, #26
 800b6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	4543      	cmp	r3, r8
 800b6be:	dc09      	bgt.n	800b6d4 <_printf_float+0x260>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	079b      	lsls	r3, r3, #30
 800b6c4:	f100 8107 	bmi.w	800b8d6 <_printf_float+0x462>
 800b6c8:	68e0      	ldr	r0, [r4, #12]
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	4298      	cmp	r0, r3
 800b6ce:	bfb8      	it	lt
 800b6d0:	4618      	movlt	r0, r3
 800b6d2:	e730      	b.n	800b536 <_printf_float+0xc2>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	464a      	mov	r2, r9
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4628      	mov	r0, r5
 800b6dc:	47b8      	blx	r7
 800b6de:	3001      	adds	r0, #1
 800b6e0:	f43f af27 	beq.w	800b532 <_printf_float+0xbe>
 800b6e4:	f108 0801 	add.w	r8, r8, #1
 800b6e8:	e7e6      	b.n	800b6b8 <_printf_float+0x244>
 800b6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	dc39      	bgt.n	800b764 <_printf_float+0x2f0>
 800b6f0:	4a1b      	ldr	r2, [pc, #108]	; (800b760 <_printf_float+0x2ec>)
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	47b8      	blx	r7
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	f43f af19 	beq.w	800b532 <_printf_float+0xbe>
 800b700:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b704:	4313      	orrs	r3, r2
 800b706:	d102      	bne.n	800b70e <_printf_float+0x29a>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	07d9      	lsls	r1, r3, #31
 800b70c:	d5d8      	bpl.n	800b6c0 <_printf_float+0x24c>
 800b70e:	ee18 3a10 	vmov	r3, s16
 800b712:	4652      	mov	r2, sl
 800b714:	4631      	mov	r1, r6
 800b716:	4628      	mov	r0, r5
 800b718:	47b8      	blx	r7
 800b71a:	3001      	adds	r0, #1
 800b71c:	f43f af09 	beq.w	800b532 <_printf_float+0xbe>
 800b720:	f04f 0900 	mov.w	r9, #0
 800b724:	f104 0a1a 	add.w	sl, r4, #26
 800b728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b72a:	425b      	negs	r3, r3
 800b72c:	454b      	cmp	r3, r9
 800b72e:	dc01      	bgt.n	800b734 <_printf_float+0x2c0>
 800b730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b732:	e792      	b.n	800b65a <_printf_float+0x1e6>
 800b734:	2301      	movs	r3, #1
 800b736:	4652      	mov	r2, sl
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	f43f aef7 	beq.w	800b532 <_printf_float+0xbe>
 800b744:	f109 0901 	add.w	r9, r9, #1
 800b748:	e7ee      	b.n	800b728 <_printf_float+0x2b4>
 800b74a:	bf00      	nop
 800b74c:	7fefffff 	.word	0x7fefffff
 800b750:	08013a3c 	.word	0x08013a3c
 800b754:	08013a40 	.word	0x08013a40
 800b758:	08013a44 	.word	0x08013a44
 800b75c:	08013a48 	.word	0x08013a48
 800b760:	08013b5e 	.word	0x08013b5e
 800b764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b768:	429a      	cmp	r2, r3
 800b76a:	bfa8      	it	ge
 800b76c:	461a      	movge	r2, r3
 800b76e:	2a00      	cmp	r2, #0
 800b770:	4691      	mov	r9, r2
 800b772:	dc37      	bgt.n	800b7e4 <_printf_float+0x370>
 800b774:	f04f 0b00 	mov.w	fp, #0
 800b778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b77c:	f104 021a 	add.w	r2, r4, #26
 800b780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	eba3 0309 	sub.w	r3, r3, r9
 800b788:	455b      	cmp	r3, fp
 800b78a:	dc33      	bgt.n	800b7f4 <_printf_float+0x380>
 800b78c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b790:	429a      	cmp	r2, r3
 800b792:	db3b      	blt.n	800b80c <_printf_float+0x398>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	07da      	lsls	r2, r3, #31
 800b798:	d438      	bmi.n	800b80c <_printf_float+0x398>
 800b79a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b79e:	eba2 0903 	sub.w	r9, r2, r3
 800b7a2:	9b05      	ldr	r3, [sp, #20]
 800b7a4:	1ad2      	subs	r2, r2, r3
 800b7a6:	4591      	cmp	r9, r2
 800b7a8:	bfa8      	it	ge
 800b7aa:	4691      	movge	r9, r2
 800b7ac:	f1b9 0f00 	cmp.w	r9, #0
 800b7b0:	dc35      	bgt.n	800b81e <_printf_float+0x3aa>
 800b7b2:	f04f 0800 	mov.w	r8, #0
 800b7b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7ba:	f104 0a1a 	add.w	sl, r4, #26
 800b7be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	eba3 0309 	sub.w	r3, r3, r9
 800b7c8:	4543      	cmp	r3, r8
 800b7ca:	f77f af79 	ble.w	800b6c0 <_printf_float+0x24c>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4652      	mov	r2, sl
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	47b8      	blx	r7
 800b7d8:	3001      	adds	r0, #1
 800b7da:	f43f aeaa 	beq.w	800b532 <_printf_float+0xbe>
 800b7de:	f108 0801 	add.w	r8, r8, #1
 800b7e2:	e7ec      	b.n	800b7be <_printf_float+0x34a>
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47b8      	blx	r7
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d1c0      	bne.n	800b774 <_printf_float+0x300>
 800b7f2:	e69e      	b.n	800b532 <_printf_float+0xbe>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	9205      	str	r2, [sp, #20]
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	f43f ae97 	beq.w	800b532 <_printf_float+0xbe>
 800b804:	9a05      	ldr	r2, [sp, #20]
 800b806:	f10b 0b01 	add.w	fp, fp, #1
 800b80a:	e7b9      	b.n	800b780 <_printf_float+0x30c>
 800b80c:	ee18 3a10 	vmov	r3, s16
 800b810:	4652      	mov	r2, sl
 800b812:	4631      	mov	r1, r6
 800b814:	4628      	mov	r0, r5
 800b816:	47b8      	blx	r7
 800b818:	3001      	adds	r0, #1
 800b81a:	d1be      	bne.n	800b79a <_printf_float+0x326>
 800b81c:	e689      	b.n	800b532 <_printf_float+0xbe>
 800b81e:	9a05      	ldr	r2, [sp, #20]
 800b820:	464b      	mov	r3, r9
 800b822:	4442      	add	r2, r8
 800b824:	4631      	mov	r1, r6
 800b826:	4628      	mov	r0, r5
 800b828:	47b8      	blx	r7
 800b82a:	3001      	adds	r0, #1
 800b82c:	d1c1      	bne.n	800b7b2 <_printf_float+0x33e>
 800b82e:	e680      	b.n	800b532 <_printf_float+0xbe>
 800b830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b832:	2a01      	cmp	r2, #1
 800b834:	dc01      	bgt.n	800b83a <_printf_float+0x3c6>
 800b836:	07db      	lsls	r3, r3, #31
 800b838:	d53a      	bpl.n	800b8b0 <_printf_float+0x43c>
 800b83a:	2301      	movs	r3, #1
 800b83c:	4642      	mov	r2, r8
 800b83e:	4631      	mov	r1, r6
 800b840:	4628      	mov	r0, r5
 800b842:	47b8      	blx	r7
 800b844:	3001      	adds	r0, #1
 800b846:	f43f ae74 	beq.w	800b532 <_printf_float+0xbe>
 800b84a:	ee18 3a10 	vmov	r3, s16
 800b84e:	4652      	mov	r2, sl
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	f43f ae6b 	beq.w	800b532 <_printf_float+0xbe>
 800b85c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b860:	2200      	movs	r2, #0
 800b862:	2300      	movs	r3, #0
 800b864:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b868:	f7f5 f94e 	bl	8000b08 <__aeabi_dcmpeq>
 800b86c:	b9d8      	cbnz	r0, 800b8a6 <_printf_float+0x432>
 800b86e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b872:	f108 0201 	add.w	r2, r8, #1
 800b876:	4631      	mov	r1, r6
 800b878:	4628      	mov	r0, r5
 800b87a:	47b8      	blx	r7
 800b87c:	3001      	adds	r0, #1
 800b87e:	d10e      	bne.n	800b89e <_printf_float+0x42a>
 800b880:	e657      	b.n	800b532 <_printf_float+0xbe>
 800b882:	2301      	movs	r3, #1
 800b884:	4652      	mov	r2, sl
 800b886:	4631      	mov	r1, r6
 800b888:	4628      	mov	r0, r5
 800b88a:	47b8      	blx	r7
 800b88c:	3001      	adds	r0, #1
 800b88e:	f43f ae50 	beq.w	800b532 <_printf_float+0xbe>
 800b892:	f108 0801 	add.w	r8, r8, #1
 800b896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b898:	3b01      	subs	r3, #1
 800b89a:	4543      	cmp	r3, r8
 800b89c:	dcf1      	bgt.n	800b882 <_printf_float+0x40e>
 800b89e:	464b      	mov	r3, r9
 800b8a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8a4:	e6da      	b.n	800b65c <_printf_float+0x1e8>
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	f104 0a1a 	add.w	sl, r4, #26
 800b8ae:	e7f2      	b.n	800b896 <_printf_float+0x422>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	e7df      	b.n	800b876 <_printf_float+0x402>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	464a      	mov	r2, r9
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f ae36 	beq.w	800b532 <_printf_float+0xbe>
 800b8c6:	f108 0801 	add.w	r8, r8, #1
 800b8ca:	68e3      	ldr	r3, [r4, #12]
 800b8cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8ce:	1a5b      	subs	r3, r3, r1
 800b8d0:	4543      	cmp	r3, r8
 800b8d2:	dcf0      	bgt.n	800b8b6 <_printf_float+0x442>
 800b8d4:	e6f8      	b.n	800b6c8 <_printf_float+0x254>
 800b8d6:	f04f 0800 	mov.w	r8, #0
 800b8da:	f104 0919 	add.w	r9, r4, #25
 800b8de:	e7f4      	b.n	800b8ca <_printf_float+0x456>

0800b8e0 <_printf_common>:
 800b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	4616      	mov	r6, r2
 800b8e6:	4699      	mov	r9, r3
 800b8e8:	688a      	ldr	r2, [r1, #8]
 800b8ea:	690b      	ldr	r3, [r1, #16]
 800b8ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	bfb8      	it	lt
 800b8f4:	4613      	movlt	r3, r2
 800b8f6:	6033      	str	r3, [r6, #0]
 800b8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	b10a      	cbz	r2, 800b906 <_printf_common+0x26>
 800b902:	3301      	adds	r3, #1
 800b904:	6033      	str	r3, [r6, #0]
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	0699      	lsls	r1, r3, #26
 800b90a:	bf42      	ittt	mi
 800b90c:	6833      	ldrmi	r3, [r6, #0]
 800b90e:	3302      	addmi	r3, #2
 800b910:	6033      	strmi	r3, [r6, #0]
 800b912:	6825      	ldr	r5, [r4, #0]
 800b914:	f015 0506 	ands.w	r5, r5, #6
 800b918:	d106      	bne.n	800b928 <_printf_common+0x48>
 800b91a:	f104 0a19 	add.w	sl, r4, #25
 800b91e:	68e3      	ldr	r3, [r4, #12]
 800b920:	6832      	ldr	r2, [r6, #0]
 800b922:	1a9b      	subs	r3, r3, r2
 800b924:	42ab      	cmp	r3, r5
 800b926:	dc26      	bgt.n	800b976 <_printf_common+0x96>
 800b928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b92c:	1e13      	subs	r3, r2, #0
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	bf18      	it	ne
 800b932:	2301      	movne	r3, #1
 800b934:	0692      	lsls	r2, r2, #26
 800b936:	d42b      	bmi.n	800b990 <_printf_common+0xb0>
 800b938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b93c:	4649      	mov	r1, r9
 800b93e:	4638      	mov	r0, r7
 800b940:	47c0      	blx	r8
 800b942:	3001      	adds	r0, #1
 800b944:	d01e      	beq.n	800b984 <_printf_common+0xa4>
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	6922      	ldr	r2, [r4, #16]
 800b94a:	f003 0306 	and.w	r3, r3, #6
 800b94e:	2b04      	cmp	r3, #4
 800b950:	bf02      	ittt	eq
 800b952:	68e5      	ldreq	r5, [r4, #12]
 800b954:	6833      	ldreq	r3, [r6, #0]
 800b956:	1aed      	subeq	r5, r5, r3
 800b958:	68a3      	ldr	r3, [r4, #8]
 800b95a:	bf0c      	ite	eq
 800b95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b960:	2500      	movne	r5, #0
 800b962:	4293      	cmp	r3, r2
 800b964:	bfc4      	itt	gt
 800b966:	1a9b      	subgt	r3, r3, r2
 800b968:	18ed      	addgt	r5, r5, r3
 800b96a:	2600      	movs	r6, #0
 800b96c:	341a      	adds	r4, #26
 800b96e:	42b5      	cmp	r5, r6
 800b970:	d11a      	bne.n	800b9a8 <_printf_common+0xc8>
 800b972:	2000      	movs	r0, #0
 800b974:	e008      	b.n	800b988 <_printf_common+0xa8>
 800b976:	2301      	movs	r3, #1
 800b978:	4652      	mov	r2, sl
 800b97a:	4649      	mov	r1, r9
 800b97c:	4638      	mov	r0, r7
 800b97e:	47c0      	blx	r8
 800b980:	3001      	adds	r0, #1
 800b982:	d103      	bne.n	800b98c <_printf_common+0xac>
 800b984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b98c:	3501      	adds	r5, #1
 800b98e:	e7c6      	b.n	800b91e <_printf_common+0x3e>
 800b990:	18e1      	adds	r1, r4, r3
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	2030      	movs	r0, #48	; 0x30
 800b996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b99a:	4422      	add	r2, r4
 800b99c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9a4:	3302      	adds	r3, #2
 800b9a6:	e7c7      	b.n	800b938 <_printf_common+0x58>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	47c0      	blx	r8
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d0e6      	beq.n	800b984 <_printf_common+0xa4>
 800b9b6:	3601      	adds	r6, #1
 800b9b8:	e7d9      	b.n	800b96e <_printf_common+0x8e>
	...

0800b9bc <_printf_i>:
 800b9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c0:	7e0f      	ldrb	r7, [r1, #24]
 800b9c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9c4:	2f78      	cmp	r7, #120	; 0x78
 800b9c6:	4691      	mov	r9, r2
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	469a      	mov	sl, r3
 800b9ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9d2:	d807      	bhi.n	800b9e4 <_printf_i+0x28>
 800b9d4:	2f62      	cmp	r7, #98	; 0x62
 800b9d6:	d80a      	bhi.n	800b9ee <_printf_i+0x32>
 800b9d8:	2f00      	cmp	r7, #0
 800b9da:	f000 80d4 	beq.w	800bb86 <_printf_i+0x1ca>
 800b9de:	2f58      	cmp	r7, #88	; 0x58
 800b9e0:	f000 80c0 	beq.w	800bb64 <_printf_i+0x1a8>
 800b9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9ec:	e03a      	b.n	800ba64 <_printf_i+0xa8>
 800b9ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9f2:	2b15      	cmp	r3, #21
 800b9f4:	d8f6      	bhi.n	800b9e4 <_printf_i+0x28>
 800b9f6:	a101      	add	r1, pc, #4	; (adr r1, 800b9fc <_printf_i+0x40>)
 800b9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9fc:	0800ba55 	.word	0x0800ba55
 800ba00:	0800ba69 	.word	0x0800ba69
 800ba04:	0800b9e5 	.word	0x0800b9e5
 800ba08:	0800b9e5 	.word	0x0800b9e5
 800ba0c:	0800b9e5 	.word	0x0800b9e5
 800ba10:	0800b9e5 	.word	0x0800b9e5
 800ba14:	0800ba69 	.word	0x0800ba69
 800ba18:	0800b9e5 	.word	0x0800b9e5
 800ba1c:	0800b9e5 	.word	0x0800b9e5
 800ba20:	0800b9e5 	.word	0x0800b9e5
 800ba24:	0800b9e5 	.word	0x0800b9e5
 800ba28:	0800bb6d 	.word	0x0800bb6d
 800ba2c:	0800ba95 	.word	0x0800ba95
 800ba30:	0800bb27 	.word	0x0800bb27
 800ba34:	0800b9e5 	.word	0x0800b9e5
 800ba38:	0800b9e5 	.word	0x0800b9e5
 800ba3c:	0800bb8f 	.word	0x0800bb8f
 800ba40:	0800b9e5 	.word	0x0800b9e5
 800ba44:	0800ba95 	.word	0x0800ba95
 800ba48:	0800b9e5 	.word	0x0800b9e5
 800ba4c:	0800b9e5 	.word	0x0800b9e5
 800ba50:	0800bb2f 	.word	0x0800bb2f
 800ba54:	682b      	ldr	r3, [r5, #0]
 800ba56:	1d1a      	adds	r2, r3, #4
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	602a      	str	r2, [r5, #0]
 800ba5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba64:	2301      	movs	r3, #1
 800ba66:	e09f      	b.n	800bba8 <_printf_i+0x1ec>
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	682b      	ldr	r3, [r5, #0]
 800ba6c:	0607      	lsls	r7, r0, #24
 800ba6e:	f103 0104 	add.w	r1, r3, #4
 800ba72:	6029      	str	r1, [r5, #0]
 800ba74:	d501      	bpl.n	800ba7a <_printf_i+0xbe>
 800ba76:	681e      	ldr	r6, [r3, #0]
 800ba78:	e003      	b.n	800ba82 <_printf_i+0xc6>
 800ba7a:	0646      	lsls	r6, r0, #25
 800ba7c:	d5fb      	bpl.n	800ba76 <_printf_i+0xba>
 800ba7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	da03      	bge.n	800ba8e <_printf_i+0xd2>
 800ba86:	232d      	movs	r3, #45	; 0x2d
 800ba88:	4276      	negs	r6, r6
 800ba8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba8e:	485a      	ldr	r0, [pc, #360]	; (800bbf8 <_printf_i+0x23c>)
 800ba90:	230a      	movs	r3, #10
 800ba92:	e012      	b.n	800baba <_printf_i+0xfe>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	6820      	ldr	r0, [r4, #0]
 800ba98:	1d19      	adds	r1, r3, #4
 800ba9a:	6029      	str	r1, [r5, #0]
 800ba9c:	0605      	lsls	r5, r0, #24
 800ba9e:	d501      	bpl.n	800baa4 <_printf_i+0xe8>
 800baa0:	681e      	ldr	r6, [r3, #0]
 800baa2:	e002      	b.n	800baaa <_printf_i+0xee>
 800baa4:	0641      	lsls	r1, r0, #25
 800baa6:	d5fb      	bpl.n	800baa0 <_printf_i+0xe4>
 800baa8:	881e      	ldrh	r6, [r3, #0]
 800baaa:	4853      	ldr	r0, [pc, #332]	; (800bbf8 <_printf_i+0x23c>)
 800baac:	2f6f      	cmp	r7, #111	; 0x6f
 800baae:	bf0c      	ite	eq
 800bab0:	2308      	moveq	r3, #8
 800bab2:	230a      	movne	r3, #10
 800bab4:	2100      	movs	r1, #0
 800bab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baba:	6865      	ldr	r5, [r4, #4]
 800babc:	60a5      	str	r5, [r4, #8]
 800babe:	2d00      	cmp	r5, #0
 800bac0:	bfa2      	ittt	ge
 800bac2:	6821      	ldrge	r1, [r4, #0]
 800bac4:	f021 0104 	bicge.w	r1, r1, #4
 800bac8:	6021      	strge	r1, [r4, #0]
 800baca:	b90e      	cbnz	r6, 800bad0 <_printf_i+0x114>
 800bacc:	2d00      	cmp	r5, #0
 800bace:	d04b      	beq.n	800bb68 <_printf_i+0x1ac>
 800bad0:	4615      	mov	r5, r2
 800bad2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bad6:	fb03 6711 	mls	r7, r3, r1, r6
 800bada:	5dc7      	ldrb	r7, [r0, r7]
 800badc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bae0:	4637      	mov	r7, r6
 800bae2:	42bb      	cmp	r3, r7
 800bae4:	460e      	mov	r6, r1
 800bae6:	d9f4      	bls.n	800bad2 <_printf_i+0x116>
 800bae8:	2b08      	cmp	r3, #8
 800baea:	d10b      	bne.n	800bb04 <_printf_i+0x148>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	07de      	lsls	r6, r3, #31
 800baf0:	d508      	bpl.n	800bb04 <_printf_i+0x148>
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	6861      	ldr	r1, [r4, #4]
 800baf6:	4299      	cmp	r1, r3
 800baf8:	bfde      	ittt	le
 800bafa:	2330      	movle	r3, #48	; 0x30
 800bafc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb04:	1b52      	subs	r2, r2, r5
 800bb06:	6122      	str	r2, [r4, #16]
 800bb08:	f8cd a000 	str.w	sl, [sp]
 800bb0c:	464b      	mov	r3, r9
 800bb0e:	aa03      	add	r2, sp, #12
 800bb10:	4621      	mov	r1, r4
 800bb12:	4640      	mov	r0, r8
 800bb14:	f7ff fee4 	bl	800b8e0 <_printf_common>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d14a      	bne.n	800bbb2 <_printf_i+0x1f6>
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb20:	b004      	add	sp, #16
 800bb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	f043 0320 	orr.w	r3, r3, #32
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	4833      	ldr	r0, [pc, #204]	; (800bbfc <_printf_i+0x240>)
 800bb30:	2778      	movs	r7, #120	; 0x78
 800bb32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	6829      	ldr	r1, [r5, #0]
 800bb3a:	061f      	lsls	r7, r3, #24
 800bb3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb40:	d402      	bmi.n	800bb48 <_printf_i+0x18c>
 800bb42:	065f      	lsls	r7, r3, #25
 800bb44:	bf48      	it	mi
 800bb46:	b2b6      	uxthmi	r6, r6
 800bb48:	07df      	lsls	r7, r3, #31
 800bb4a:	bf48      	it	mi
 800bb4c:	f043 0320 	orrmi.w	r3, r3, #32
 800bb50:	6029      	str	r1, [r5, #0]
 800bb52:	bf48      	it	mi
 800bb54:	6023      	strmi	r3, [r4, #0]
 800bb56:	b91e      	cbnz	r6, 800bb60 <_printf_i+0x1a4>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	f023 0320 	bic.w	r3, r3, #32
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	2310      	movs	r3, #16
 800bb62:	e7a7      	b.n	800bab4 <_printf_i+0xf8>
 800bb64:	4824      	ldr	r0, [pc, #144]	; (800bbf8 <_printf_i+0x23c>)
 800bb66:	e7e4      	b.n	800bb32 <_printf_i+0x176>
 800bb68:	4615      	mov	r5, r2
 800bb6a:	e7bd      	b.n	800bae8 <_printf_i+0x12c>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	6826      	ldr	r6, [r4, #0]
 800bb70:	6961      	ldr	r1, [r4, #20]
 800bb72:	1d18      	adds	r0, r3, #4
 800bb74:	6028      	str	r0, [r5, #0]
 800bb76:	0635      	lsls	r5, r6, #24
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	d501      	bpl.n	800bb80 <_printf_i+0x1c4>
 800bb7c:	6019      	str	r1, [r3, #0]
 800bb7e:	e002      	b.n	800bb86 <_printf_i+0x1ca>
 800bb80:	0670      	lsls	r0, r6, #25
 800bb82:	d5fb      	bpl.n	800bb7c <_printf_i+0x1c0>
 800bb84:	8019      	strh	r1, [r3, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	4615      	mov	r5, r2
 800bb8c:	e7bc      	b.n	800bb08 <_printf_i+0x14c>
 800bb8e:	682b      	ldr	r3, [r5, #0]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	602a      	str	r2, [r5, #0]
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	6862      	ldr	r2, [r4, #4]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f7f4 fb38 	bl	8000210 <memchr>
 800bba0:	b108      	cbz	r0, 800bba6 <_printf_i+0x1ea>
 800bba2:	1b40      	subs	r0, r0, r5
 800bba4:	6060      	str	r0, [r4, #4]
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb0:	e7aa      	b.n	800bb08 <_printf_i+0x14c>
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	4640      	mov	r0, r8
 800bbba:	47d0      	blx	sl
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d0ad      	beq.n	800bb1c <_printf_i+0x160>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	079b      	lsls	r3, r3, #30
 800bbc4:	d413      	bmi.n	800bbee <_printf_i+0x232>
 800bbc6:	68e0      	ldr	r0, [r4, #12]
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	4298      	cmp	r0, r3
 800bbcc:	bfb8      	it	lt
 800bbce:	4618      	movlt	r0, r3
 800bbd0:	e7a6      	b.n	800bb20 <_printf_i+0x164>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	4640      	mov	r0, r8
 800bbda:	47d0      	blx	sl
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d09d      	beq.n	800bb1c <_printf_i+0x160>
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	68e3      	ldr	r3, [r4, #12]
 800bbe4:	9903      	ldr	r1, [sp, #12]
 800bbe6:	1a5b      	subs	r3, r3, r1
 800bbe8:	42ab      	cmp	r3, r5
 800bbea:	dcf2      	bgt.n	800bbd2 <_printf_i+0x216>
 800bbec:	e7eb      	b.n	800bbc6 <_printf_i+0x20a>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	f104 0619 	add.w	r6, r4, #25
 800bbf4:	e7f5      	b.n	800bbe2 <_printf_i+0x226>
 800bbf6:	bf00      	nop
 800bbf8:	08013a4c 	.word	0x08013a4c
 800bbfc:	08013a5d 	.word	0x08013a5d

0800bc00 <sniprintf>:
 800bc00:	b40c      	push	{r2, r3}
 800bc02:	b530      	push	{r4, r5, lr}
 800bc04:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <sniprintf+0x64>)
 800bc06:	1e0c      	subs	r4, r1, #0
 800bc08:	681d      	ldr	r5, [r3, #0]
 800bc0a:	b09d      	sub	sp, #116	; 0x74
 800bc0c:	da08      	bge.n	800bc20 <sniprintf+0x20>
 800bc0e:	238b      	movs	r3, #139	; 0x8b
 800bc10:	602b      	str	r3, [r5, #0]
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc16:	b01d      	add	sp, #116	; 0x74
 800bc18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc1c:	b002      	add	sp, #8
 800bc1e:	4770      	bx	lr
 800bc20:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc24:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc28:	bf14      	ite	ne
 800bc2a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bc2e:	4623      	moveq	r3, r4
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	9307      	str	r3, [sp, #28]
 800bc34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc38:	9002      	str	r0, [sp, #8]
 800bc3a:	9006      	str	r0, [sp, #24]
 800bc3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc42:	ab21      	add	r3, sp, #132	; 0x84
 800bc44:	a902      	add	r1, sp, #8
 800bc46:	4628      	mov	r0, r5
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	f001 f96d 	bl	800cf28 <_svfiprintf_r>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	bfbc      	itt	lt
 800bc52:	238b      	movlt	r3, #139	; 0x8b
 800bc54:	602b      	strlt	r3, [r5, #0]
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	d0dd      	beq.n	800bc16 <sniprintf+0x16>
 800bc5a:	9b02      	ldr	r3, [sp, #8]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	e7d9      	b.n	800bc16 <sniprintf+0x16>
 800bc62:	bf00      	nop
 800bc64:	2000009c 	.word	0x2000009c

0800bc68 <siprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b500      	push	{lr}
 800bc6c:	b09c      	sub	sp, #112	; 0x70
 800bc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800bc70:	9002      	str	r0, [sp, #8]
 800bc72:	9006      	str	r0, [sp, #24]
 800bc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc78:	4809      	ldr	r0, [pc, #36]	; (800bca0 <siprintf+0x38>)
 800bc7a:	9107      	str	r1, [sp, #28]
 800bc7c:	9104      	str	r1, [sp, #16]
 800bc7e:	4909      	ldr	r1, [pc, #36]	; (800bca4 <siprintf+0x3c>)
 800bc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc84:	9105      	str	r1, [sp, #20]
 800bc86:	6800      	ldr	r0, [r0, #0]
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	a902      	add	r1, sp, #8
 800bc8c:	f001 f94c 	bl	800cf28 <_svfiprintf_r>
 800bc90:	9b02      	ldr	r3, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	b01c      	add	sp, #112	; 0x70
 800bc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc9c:	b003      	add	sp, #12
 800bc9e:	4770      	bx	lr
 800bca0:	2000009c 	.word	0x2000009c
 800bca4:	ffff0208 	.word	0xffff0208

0800bca8 <siscanf>:
 800bca8:	b40e      	push	{r1, r2, r3}
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	b09f      	sub	sp, #124	; 0x7c
 800bcae:	ac21      	add	r4, sp, #132	; 0x84
 800bcb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800bcb4:	f854 2b04 	ldr.w	r2, [r4], #4
 800bcb8:	9201      	str	r2, [sp, #4]
 800bcba:	f8ad 101c 	strh.w	r1, [sp, #28]
 800bcbe:	9004      	str	r0, [sp, #16]
 800bcc0:	9008      	str	r0, [sp, #32]
 800bcc2:	f7f4 faf5 	bl	80002b0 <strlen>
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <siscanf+0x50>)
 800bcc8:	9005      	str	r0, [sp, #20]
 800bcca:	9009      	str	r0, [sp, #36]	; 0x24
 800bccc:	930d      	str	r3, [sp, #52]	; 0x34
 800bcce:	480b      	ldr	r0, [pc, #44]	; (800bcfc <siscanf+0x54>)
 800bcd0:	9a01      	ldr	r2, [sp, #4]
 800bcd2:	6800      	ldr	r0, [r0, #0]
 800bcd4:	9403      	str	r4, [sp, #12]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9311      	str	r3, [sp, #68]	; 0x44
 800bcda:	9316      	str	r3, [sp, #88]	; 0x58
 800bcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800bce4:	a904      	add	r1, sp, #16
 800bce6:	4623      	mov	r3, r4
 800bce8:	f001 fa76 	bl	800d1d8 <__ssvfiscanf_r>
 800bcec:	b01f      	add	sp, #124	; 0x7c
 800bcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcf2:	b003      	add	sp, #12
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	0800bd23 	.word	0x0800bd23
 800bcfc:	2000009c 	.word	0x2000009c

0800bd00 <__sread>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	460c      	mov	r4, r1
 800bd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd08:	f000 f97c 	bl	800c004 <_read_r>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	bfab      	itete	ge
 800bd10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd12:	89a3      	ldrhlt	r3, [r4, #12]
 800bd14:	181b      	addge	r3, r3, r0
 800bd16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd1a:	bfac      	ite	ge
 800bd1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd1e:	81a3      	strhlt	r3, [r4, #12]
 800bd20:	bd10      	pop	{r4, pc}

0800bd22 <__seofread>:
 800bd22:	2000      	movs	r0, #0
 800bd24:	4770      	bx	lr

0800bd26 <__swrite>:
 800bd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2a:	461f      	mov	r7, r3
 800bd2c:	898b      	ldrh	r3, [r1, #12]
 800bd2e:	05db      	lsls	r3, r3, #23
 800bd30:	4605      	mov	r5, r0
 800bd32:	460c      	mov	r4, r1
 800bd34:	4616      	mov	r6, r2
 800bd36:	d505      	bpl.n	800bd44 <__swrite+0x1e>
 800bd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f000 f94e 	bl	800bfe0 <_lseek_r>
 800bd44:	89a3      	ldrh	r3, [r4, #12]
 800bd46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	4632      	mov	r2, r6
 800bd52:	463b      	mov	r3, r7
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd5a:	f000 b965 	b.w	800c028 <_write_r>

0800bd5e <__sseek>:
 800bd5e:	b510      	push	{r4, lr}
 800bd60:	460c      	mov	r4, r1
 800bd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd66:	f000 f93b 	bl	800bfe0 <_lseek_r>
 800bd6a:	1c43      	adds	r3, r0, #1
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	bf15      	itete	ne
 800bd70:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd7a:	81a3      	strheq	r3, [r4, #12]
 800bd7c:	bf18      	it	ne
 800bd7e:	81a3      	strhne	r3, [r4, #12]
 800bd80:	bd10      	pop	{r4, pc}

0800bd82 <__sclose>:
 800bd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd86:	f000 b91b 	b.w	800bfc0 <_close_r>
	...

0800bd8c <std>:
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	b510      	push	{r4, lr}
 800bd90:	4604      	mov	r4, r0
 800bd92:	e9c0 3300 	strd	r3, r3, [r0]
 800bd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd9a:	6083      	str	r3, [r0, #8]
 800bd9c:	8181      	strh	r1, [r0, #12]
 800bd9e:	6643      	str	r3, [r0, #100]	; 0x64
 800bda0:	81c2      	strh	r2, [r0, #14]
 800bda2:	6183      	str	r3, [r0, #24]
 800bda4:	4619      	mov	r1, r3
 800bda6:	2208      	movs	r2, #8
 800bda8:	305c      	adds	r0, #92	; 0x5c
 800bdaa:	f000 f8fd 	bl	800bfa8 <memset>
 800bdae:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <std+0x58>)
 800bdb0:	6263      	str	r3, [r4, #36]	; 0x24
 800bdb2:	4b0d      	ldr	r3, [pc, #52]	; (800bde8 <std+0x5c>)
 800bdb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdb6:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <std+0x60>)
 800bdb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <std+0x64>)
 800bdbc:	6323      	str	r3, [r4, #48]	; 0x30
 800bdbe:	4b0d      	ldr	r3, [pc, #52]	; (800bdf4 <std+0x68>)
 800bdc0:	6224      	str	r4, [r4, #32]
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d006      	beq.n	800bdd4 <std+0x48>
 800bdc6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bdca:	4294      	cmp	r4, r2
 800bdcc:	d002      	beq.n	800bdd4 <std+0x48>
 800bdce:	33d0      	adds	r3, #208	; 0xd0
 800bdd0:	429c      	cmp	r4, r3
 800bdd2:	d105      	bne.n	800bde0 <std+0x54>
 800bdd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bddc:	f000 b960 	b.w	800c0a0 <__retarget_lock_init_recursive>
 800bde0:	bd10      	pop	{r4, pc}
 800bde2:	bf00      	nop
 800bde4:	0800bd01 	.word	0x0800bd01
 800bde8:	0800bd27 	.word	0x0800bd27
 800bdec:	0800bd5f 	.word	0x0800bd5f
 800bdf0:	0800bd83 	.word	0x0800bd83
 800bdf4:	20008fd4 	.word	0x20008fd4

0800bdf8 <stdio_exit_handler>:
 800bdf8:	4a02      	ldr	r2, [pc, #8]	; (800be04 <stdio_exit_handler+0xc>)
 800bdfa:	4903      	ldr	r1, [pc, #12]	; (800be08 <stdio_exit_handler+0x10>)
 800bdfc:	4803      	ldr	r0, [pc, #12]	; (800be0c <stdio_exit_handler+0x14>)
 800bdfe:	f000 b869 	b.w	800bed4 <_fwalk_sglue>
 800be02:	bf00      	nop
 800be04:	20000044 	.word	0x20000044
 800be08:	0800dcbd 	.word	0x0800dcbd
 800be0c:	20000050 	.word	0x20000050

0800be10 <cleanup_stdio>:
 800be10:	6841      	ldr	r1, [r0, #4]
 800be12:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <cleanup_stdio+0x34>)
 800be14:	4299      	cmp	r1, r3
 800be16:	b510      	push	{r4, lr}
 800be18:	4604      	mov	r4, r0
 800be1a:	d001      	beq.n	800be20 <cleanup_stdio+0x10>
 800be1c:	f001 ff4e 	bl	800dcbc <_fflush_r>
 800be20:	68a1      	ldr	r1, [r4, #8]
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <cleanup_stdio+0x38>)
 800be24:	4299      	cmp	r1, r3
 800be26:	d002      	beq.n	800be2e <cleanup_stdio+0x1e>
 800be28:	4620      	mov	r0, r4
 800be2a:	f001 ff47 	bl	800dcbc <_fflush_r>
 800be2e:	68e1      	ldr	r1, [r4, #12]
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <cleanup_stdio+0x3c>)
 800be32:	4299      	cmp	r1, r3
 800be34:	d004      	beq.n	800be40 <cleanup_stdio+0x30>
 800be36:	4620      	mov	r0, r4
 800be38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be3c:	f001 bf3e 	b.w	800dcbc <_fflush_r>
 800be40:	bd10      	pop	{r4, pc}
 800be42:	bf00      	nop
 800be44:	20008fd4 	.word	0x20008fd4
 800be48:	2000903c 	.word	0x2000903c
 800be4c:	200090a4 	.word	0x200090a4

0800be50 <global_stdio_init.part.0>:
 800be50:	b510      	push	{r4, lr}
 800be52:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <global_stdio_init.part.0+0x30>)
 800be54:	4c0b      	ldr	r4, [pc, #44]	; (800be84 <global_stdio_init.part.0+0x34>)
 800be56:	4a0c      	ldr	r2, [pc, #48]	; (800be88 <global_stdio_init.part.0+0x38>)
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	4620      	mov	r0, r4
 800be5c:	2200      	movs	r2, #0
 800be5e:	2104      	movs	r1, #4
 800be60:	f7ff ff94 	bl	800bd8c <std>
 800be64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800be68:	2201      	movs	r2, #1
 800be6a:	2109      	movs	r1, #9
 800be6c:	f7ff ff8e 	bl	800bd8c <std>
 800be70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800be74:	2202      	movs	r2, #2
 800be76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be7a:	2112      	movs	r1, #18
 800be7c:	f7ff bf86 	b.w	800bd8c <std>
 800be80:	2000910c 	.word	0x2000910c
 800be84:	20008fd4 	.word	0x20008fd4
 800be88:	0800bdf9 	.word	0x0800bdf9

0800be8c <__sfp_lock_acquire>:
 800be8c:	4801      	ldr	r0, [pc, #4]	; (800be94 <__sfp_lock_acquire+0x8>)
 800be8e:	f000 b908 	b.w	800c0a2 <__retarget_lock_acquire_recursive>
 800be92:	bf00      	nop
 800be94:	20009115 	.word	0x20009115

0800be98 <__sfp_lock_release>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sfp_lock_release+0x8>)
 800be9a:	f000 b903 	b.w	800c0a4 <__retarget_lock_release_recursive>
 800be9e:	bf00      	nop
 800bea0:	20009115 	.word	0x20009115

0800bea4 <__sinit>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	4604      	mov	r4, r0
 800bea8:	f7ff fff0 	bl	800be8c <__sfp_lock_acquire>
 800beac:	6a23      	ldr	r3, [r4, #32]
 800beae:	b11b      	cbz	r3, 800beb8 <__sinit+0x14>
 800beb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb4:	f7ff bff0 	b.w	800be98 <__sfp_lock_release>
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <__sinit+0x28>)
 800beba:	6223      	str	r3, [r4, #32]
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <__sinit+0x2c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f5      	bne.n	800beb0 <__sinit+0xc>
 800bec4:	f7ff ffc4 	bl	800be50 <global_stdio_init.part.0>
 800bec8:	e7f2      	b.n	800beb0 <__sinit+0xc>
 800beca:	bf00      	nop
 800becc:	0800be11 	.word	0x0800be11
 800bed0:	2000910c 	.word	0x2000910c

0800bed4 <_fwalk_sglue>:
 800bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed8:	4607      	mov	r7, r0
 800beda:	4688      	mov	r8, r1
 800bedc:	4614      	mov	r4, r2
 800bede:	2600      	movs	r6, #0
 800bee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bee4:	f1b9 0901 	subs.w	r9, r9, #1
 800bee8:	d505      	bpl.n	800bef6 <_fwalk_sglue+0x22>
 800beea:	6824      	ldr	r4, [r4, #0]
 800beec:	2c00      	cmp	r4, #0
 800beee:	d1f7      	bne.n	800bee0 <_fwalk_sglue+0xc>
 800bef0:	4630      	mov	r0, r6
 800bef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef6:	89ab      	ldrh	r3, [r5, #12]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d907      	bls.n	800bf0c <_fwalk_sglue+0x38>
 800befc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf00:	3301      	adds	r3, #1
 800bf02:	d003      	beq.n	800bf0c <_fwalk_sglue+0x38>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4638      	mov	r0, r7
 800bf08:	47c0      	blx	r8
 800bf0a:	4306      	orrs	r6, r0
 800bf0c:	3568      	adds	r5, #104	; 0x68
 800bf0e:	e7e9      	b.n	800bee4 <_fwalk_sglue+0x10>

0800bf10 <_vsniprintf_r>:
 800bf10:	b530      	push	{r4, r5, lr}
 800bf12:	4614      	mov	r4, r2
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	b09b      	sub	sp, #108	; 0x6c
 800bf18:	4605      	mov	r5, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	da05      	bge.n	800bf2a <_vsniprintf_r+0x1a>
 800bf1e:	238b      	movs	r3, #139	; 0x8b
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf26:	b01b      	add	sp, #108	; 0x6c
 800bf28:	bd30      	pop	{r4, r5, pc}
 800bf2a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bf2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf32:	bf14      	ite	ne
 800bf34:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bf38:	4623      	moveq	r3, r4
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf42:	9100      	str	r1, [sp, #0]
 800bf44:	9104      	str	r1, [sp, #16]
 800bf46:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf4a:	4669      	mov	r1, sp
 800bf4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf4e:	f000 ffeb 	bl	800cf28 <_svfiprintf_r>
 800bf52:	1c43      	adds	r3, r0, #1
 800bf54:	bfbc      	itt	lt
 800bf56:	238b      	movlt	r3, #139	; 0x8b
 800bf58:	602b      	strlt	r3, [r5, #0]
 800bf5a:	2c00      	cmp	r4, #0
 800bf5c:	d0e3      	beq.n	800bf26 <_vsniprintf_r+0x16>
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	2200      	movs	r2, #0
 800bf62:	701a      	strb	r2, [r3, #0]
 800bf64:	e7df      	b.n	800bf26 <_vsniprintf_r+0x16>
	...

0800bf68 <vsniprintf>:
 800bf68:	b507      	push	{r0, r1, r2, lr}
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	460a      	mov	r2, r1
 800bf70:	4601      	mov	r1, r0
 800bf72:	4803      	ldr	r0, [pc, #12]	; (800bf80 <vsniprintf+0x18>)
 800bf74:	6800      	ldr	r0, [r0, #0]
 800bf76:	f7ff ffcb 	bl	800bf10 <_vsniprintf_r>
 800bf7a:	b003      	add	sp, #12
 800bf7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf80:	2000009c 	.word	0x2000009c

0800bf84 <iprintf>:
 800bf84:	b40f      	push	{r0, r1, r2, r3}
 800bf86:	b507      	push	{r0, r1, r2, lr}
 800bf88:	4906      	ldr	r1, [pc, #24]	; (800bfa4 <iprintf+0x20>)
 800bf8a:	ab04      	add	r3, sp, #16
 800bf8c:	6808      	ldr	r0, [r1, #0]
 800bf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf92:	6881      	ldr	r1, [r0, #8]
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	f001 fac1 	bl	800d51c <_vfiprintf_r>
 800bf9a:	b003      	add	sp, #12
 800bf9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa0:	b004      	add	sp, #16
 800bfa2:	4770      	bx	lr
 800bfa4:	2000009c 	.word	0x2000009c

0800bfa8 <memset>:
 800bfa8:	4402      	add	r2, r0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d100      	bne.n	800bfb2 <memset+0xa>
 800bfb0:	4770      	bx	lr
 800bfb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bfb6:	e7f9      	b.n	800bfac <memset+0x4>

0800bfb8 <_localeconv_r>:
 800bfb8:	4800      	ldr	r0, [pc, #0]	; (800bfbc <_localeconv_r+0x4>)
 800bfba:	4770      	bx	lr
 800bfbc:	20000190 	.word	0x20000190

0800bfc0 <_close_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d06      	ldr	r5, [pc, #24]	; (800bfdc <_close_r+0x1c>)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4608      	mov	r0, r1
 800bfca:	602b      	str	r3, [r5, #0]
 800bfcc:	f7f8 fb4d 	bl	800466a <_close>
 800bfd0:	1c43      	adds	r3, r0, #1
 800bfd2:	d102      	bne.n	800bfda <_close_r+0x1a>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	b103      	cbz	r3, 800bfda <_close_r+0x1a>
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
 800bfdc:	20009110 	.word	0x20009110

0800bfe0 <_lseek_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d07      	ldr	r5, [pc, #28]	; (800c000 <_lseek_r+0x20>)
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4611      	mov	r1, r2
 800bfea:	2200      	movs	r2, #0
 800bfec:	602a      	str	r2, [r5, #0]
 800bfee:	461a      	mov	r2, r3
 800bff0:	f7f8 fb62 	bl	80046b8 <_lseek>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_lseek_r+0x1e>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_lseek_r+0x1e>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20009110 	.word	0x20009110

0800c004 <_read_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d07      	ldr	r5, [pc, #28]	; (800c024 <_read_r+0x20>)
 800c008:	4604      	mov	r4, r0
 800c00a:	4608      	mov	r0, r1
 800c00c:	4611      	mov	r1, r2
 800c00e:	2200      	movs	r2, #0
 800c010:	602a      	str	r2, [r5, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	f7f8 faf0 	bl	80045f8 <_read>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d102      	bne.n	800c022 <_read_r+0x1e>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	b103      	cbz	r3, 800c022 <_read_r+0x1e>
 800c020:	6023      	str	r3, [r4, #0]
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	20009110 	.word	0x20009110

0800c028 <_write_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d07      	ldr	r5, [pc, #28]	; (800c048 <_write_r+0x20>)
 800c02c:	4604      	mov	r4, r0
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	2200      	movs	r2, #0
 800c034:	602a      	str	r2, [r5, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	f7f8 fafb 	bl	8004632 <_write>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_write_r+0x1e>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_write_r+0x1e>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	20009110 	.word	0x20009110

0800c04c <__errno>:
 800c04c:	4b01      	ldr	r3, [pc, #4]	; (800c054 <__errno+0x8>)
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	2000009c 	.word	0x2000009c

0800c058 <__libc_init_array>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	4d0d      	ldr	r5, [pc, #52]	; (800c090 <__libc_init_array+0x38>)
 800c05c:	4c0d      	ldr	r4, [pc, #52]	; (800c094 <__libc_init_array+0x3c>)
 800c05e:	1b64      	subs	r4, r4, r5
 800c060:	10a4      	asrs	r4, r4, #2
 800c062:	2600      	movs	r6, #0
 800c064:	42a6      	cmp	r6, r4
 800c066:	d109      	bne.n	800c07c <__libc_init_array+0x24>
 800c068:	4d0b      	ldr	r5, [pc, #44]	; (800c098 <__libc_init_array+0x40>)
 800c06a:	4c0c      	ldr	r4, [pc, #48]	; (800c09c <__libc_init_array+0x44>)
 800c06c:	f003 f954 	bl	800f318 <_init>
 800c070:	1b64      	subs	r4, r4, r5
 800c072:	10a4      	asrs	r4, r4, #2
 800c074:	2600      	movs	r6, #0
 800c076:	42a6      	cmp	r6, r4
 800c078:	d105      	bne.n	800c086 <__libc_init_array+0x2e>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c080:	4798      	blx	r3
 800c082:	3601      	adds	r6, #1
 800c084:	e7ee      	b.n	800c064 <__libc_init_array+0xc>
 800c086:	f855 3b04 	ldr.w	r3, [r5], #4
 800c08a:	4798      	blx	r3
 800c08c:	3601      	adds	r6, #1
 800c08e:	e7f2      	b.n	800c076 <__libc_init_array+0x1e>
 800c090:	08013dd0 	.word	0x08013dd0
 800c094:	08013dd0 	.word	0x08013dd0
 800c098:	08013dd0 	.word	0x08013dd0
 800c09c:	08013dd4 	.word	0x08013dd4

0800c0a0 <__retarget_lock_init_recursive>:
 800c0a0:	4770      	bx	lr

0800c0a2 <__retarget_lock_acquire_recursive>:
 800c0a2:	4770      	bx	lr

0800c0a4 <__retarget_lock_release_recursive>:
 800c0a4:	4770      	bx	lr
	...

0800c0a8 <__assert_func>:
 800c0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0aa:	4614      	mov	r4, r2
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <__assert_func+0x2c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	68d8      	ldr	r0, [r3, #12]
 800c0b6:	b14c      	cbz	r4, 800c0cc <__assert_func+0x24>
 800c0b8:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <__assert_func+0x30>)
 800c0ba:	9100      	str	r1, [sp, #0]
 800c0bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0c0:	4906      	ldr	r1, [pc, #24]	; (800c0dc <__assert_func+0x34>)
 800c0c2:	462b      	mov	r3, r5
 800c0c4:	f002 f9aa 	bl	800e41c <fiprintf>
 800c0c8:	f002 fc6e 	bl	800e9a8 <abort>
 800c0cc:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <__assert_func+0x38>)
 800c0ce:	461c      	mov	r4, r3
 800c0d0:	e7f3      	b.n	800c0ba <__assert_func+0x12>
 800c0d2:	bf00      	nop
 800c0d4:	2000009c 	.word	0x2000009c
 800c0d8:	08013a6e 	.word	0x08013a6e
 800c0dc:	08013a7b 	.word	0x08013a7b
 800c0e0:	08013aa9 	.word	0x08013aa9

0800c0e4 <quorem>:
 800c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	6903      	ldr	r3, [r0, #16]
 800c0ea:	690c      	ldr	r4, [r1, #16]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	db7e      	blt.n	800c1f0 <quorem+0x10c>
 800c0f2:	3c01      	subs	r4, #1
 800c0f4:	f101 0814 	add.w	r8, r1, #20
 800c0f8:	f100 0514 	add.w	r5, r0, #20
 800c0fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c106:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10a:	3301      	adds	r3, #1
 800c10c:	429a      	cmp	r2, r3
 800c10e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c116:	fbb2 f6f3 	udiv	r6, r2, r3
 800c11a:	d331      	bcc.n	800c180 <quorem+0x9c>
 800c11c:	f04f 0e00 	mov.w	lr, #0
 800c120:	4640      	mov	r0, r8
 800c122:	46ac      	mov	ip, r5
 800c124:	46f2      	mov	sl, lr
 800c126:	f850 2b04 	ldr.w	r2, [r0], #4
 800c12a:	b293      	uxth	r3, r2
 800c12c:	fb06 e303 	mla	r3, r6, r3, lr
 800c130:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c134:	0c1a      	lsrs	r2, r3, #16
 800c136:	b29b      	uxth	r3, r3
 800c138:	ebaa 0303 	sub.w	r3, sl, r3
 800c13c:	f8dc a000 	ldr.w	sl, [ip]
 800c140:	fa13 f38a 	uxtah	r3, r3, sl
 800c144:	fb06 220e 	mla	r2, r6, lr, r2
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	9b00      	ldr	r3, [sp, #0]
 800c14c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c150:	b292      	uxth	r2, r2
 800c152:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c15a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c15e:	4581      	cmp	r9, r0
 800c160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c164:	f84c 3b04 	str.w	r3, [ip], #4
 800c168:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c16c:	d2db      	bcs.n	800c126 <quorem+0x42>
 800c16e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c172:	b92b      	cbnz	r3, 800c180 <quorem+0x9c>
 800c174:	9b01      	ldr	r3, [sp, #4]
 800c176:	3b04      	subs	r3, #4
 800c178:	429d      	cmp	r5, r3
 800c17a:	461a      	mov	r2, r3
 800c17c:	d32c      	bcc.n	800c1d8 <quorem+0xf4>
 800c17e:	613c      	str	r4, [r7, #16]
 800c180:	4638      	mov	r0, r7
 800c182:	f002 f84b 	bl	800e21c <__mcmp>
 800c186:	2800      	cmp	r0, #0
 800c188:	db22      	blt.n	800c1d0 <quorem+0xec>
 800c18a:	3601      	adds	r6, #1
 800c18c:	4629      	mov	r1, r5
 800c18e:	2000      	movs	r0, #0
 800c190:	f858 2b04 	ldr.w	r2, [r8], #4
 800c194:	f8d1 c000 	ldr.w	ip, [r1]
 800c198:	b293      	uxth	r3, r2
 800c19a:	1ac3      	subs	r3, r0, r3
 800c19c:	0c12      	lsrs	r2, r2, #16
 800c19e:	fa13 f38c 	uxtah	r3, r3, ip
 800c1a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c1a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b0:	45c1      	cmp	r9, r8
 800c1b2:	f841 3b04 	str.w	r3, [r1], #4
 800c1b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c1ba:	d2e9      	bcs.n	800c190 <quorem+0xac>
 800c1bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1c4:	b922      	cbnz	r2, 800c1d0 <quorem+0xec>
 800c1c6:	3b04      	subs	r3, #4
 800c1c8:	429d      	cmp	r5, r3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	d30a      	bcc.n	800c1e4 <quorem+0x100>
 800c1ce:	613c      	str	r4, [r7, #16]
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	b003      	add	sp, #12
 800c1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	6812      	ldr	r2, [r2, #0]
 800c1da:	3b04      	subs	r3, #4
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	d1ce      	bne.n	800c17e <quorem+0x9a>
 800c1e0:	3c01      	subs	r4, #1
 800c1e2:	e7c9      	b.n	800c178 <quorem+0x94>
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	3b04      	subs	r3, #4
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d1f0      	bne.n	800c1ce <quorem+0xea>
 800c1ec:	3c01      	subs	r4, #1
 800c1ee:	e7eb      	b.n	800c1c8 <quorem+0xe4>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7ee      	b.n	800c1d2 <quorem+0xee>
 800c1f4:	0000      	movs	r0, r0
	...

0800c1f8 <_dtoa_r>:
 800c1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	ed2d 8b04 	vpush	{d8-d9}
 800c200:	69c5      	ldr	r5, [r0, #28]
 800c202:	b093      	sub	sp, #76	; 0x4c
 800c204:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c208:	ec57 6b10 	vmov	r6, r7, d0
 800c20c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c210:	9107      	str	r1, [sp, #28]
 800c212:	4604      	mov	r4, r0
 800c214:	920a      	str	r2, [sp, #40]	; 0x28
 800c216:	930d      	str	r3, [sp, #52]	; 0x34
 800c218:	b975      	cbnz	r5, 800c238 <_dtoa_r+0x40>
 800c21a:	2010      	movs	r0, #16
 800c21c:	f001 fa98 	bl	800d750 <malloc>
 800c220:	4602      	mov	r2, r0
 800c222:	61e0      	str	r0, [r4, #28]
 800c224:	b920      	cbnz	r0, 800c230 <_dtoa_r+0x38>
 800c226:	4bae      	ldr	r3, [pc, #696]	; (800c4e0 <_dtoa_r+0x2e8>)
 800c228:	21ef      	movs	r1, #239	; 0xef
 800c22a:	48ae      	ldr	r0, [pc, #696]	; (800c4e4 <_dtoa_r+0x2ec>)
 800c22c:	f7ff ff3c 	bl	800c0a8 <__assert_func>
 800c230:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c234:	6005      	str	r5, [r0, #0]
 800c236:	60c5      	str	r5, [r0, #12]
 800c238:	69e3      	ldr	r3, [r4, #28]
 800c23a:	6819      	ldr	r1, [r3, #0]
 800c23c:	b151      	cbz	r1, 800c254 <_dtoa_r+0x5c>
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	604a      	str	r2, [r1, #4]
 800c242:	2301      	movs	r3, #1
 800c244:	4093      	lsls	r3, r2
 800c246:	608b      	str	r3, [r1, #8]
 800c248:	4620      	mov	r0, r4
 800c24a:	f001 fdab 	bl	800dda4 <_Bfree>
 800c24e:	69e3      	ldr	r3, [r4, #28]
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	1e3b      	subs	r3, r7, #0
 800c256:	bfbb      	ittet	lt
 800c258:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c25c:	9303      	strlt	r3, [sp, #12]
 800c25e:	2300      	movge	r3, #0
 800c260:	2201      	movlt	r2, #1
 800c262:	bfac      	ite	ge
 800c264:	f8c8 3000 	strge.w	r3, [r8]
 800c268:	f8c8 2000 	strlt.w	r2, [r8]
 800c26c:	4b9e      	ldr	r3, [pc, #632]	; (800c4e8 <_dtoa_r+0x2f0>)
 800c26e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c272:	ea33 0308 	bics.w	r3, r3, r8
 800c276:	d11b      	bne.n	800c2b0 <_dtoa_r+0xb8>
 800c278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c27a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c284:	4333      	orrs	r3, r6
 800c286:	f000 8593 	beq.w	800cdb0 <_dtoa_r+0xbb8>
 800c28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c28c:	b963      	cbnz	r3, 800c2a8 <_dtoa_r+0xb0>
 800c28e:	4b97      	ldr	r3, [pc, #604]	; (800c4ec <_dtoa_r+0x2f4>)
 800c290:	e027      	b.n	800c2e2 <_dtoa_r+0xea>
 800c292:	4b97      	ldr	r3, [pc, #604]	; (800c4f0 <_dtoa_r+0x2f8>)
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	3308      	adds	r3, #8
 800c298:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	9800      	ldr	r0, [sp, #0]
 800c29e:	b013      	add	sp, #76	; 0x4c
 800c2a0:	ecbd 8b04 	vpop	{d8-d9}
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a8:	4b90      	ldr	r3, [pc, #576]	; (800c4ec <_dtoa_r+0x2f4>)
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	3303      	adds	r3, #3
 800c2ae:	e7f3      	b.n	800c298 <_dtoa_r+0xa0>
 800c2b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	ec51 0b17 	vmov	r0, r1, d7
 800c2ba:	eeb0 8a47 	vmov.f32	s16, s14
 800c2be:	eef0 8a67 	vmov.f32	s17, s15
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f7f4 fc20 	bl	8000b08 <__aeabi_dcmpeq>
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	b160      	cbz	r0, 800c2e6 <_dtoa_r+0xee>
 800c2cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 8568 	beq.w	800cdaa <_dtoa_r+0xbb2>
 800c2da:	4b86      	ldr	r3, [pc, #536]	; (800c4f4 <_dtoa_r+0x2fc>)
 800c2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	e7da      	b.n	800c29c <_dtoa_r+0xa4>
 800c2e6:	aa10      	add	r2, sp, #64	; 0x40
 800c2e8:	a911      	add	r1, sp, #68	; 0x44
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c2f0:	eef0 0a68 	vmov.f32	s1, s17
 800c2f4:	f002 f838 	bl	800e368 <__d2b>
 800c2f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	2d00      	cmp	r5, #0
 800c300:	d07f      	beq.n	800c402 <_dtoa_r+0x20a>
 800c302:	ee18 3a90 	vmov	r3, s17
 800c306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c30a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c30e:	ec51 0b18 	vmov	r0, r1, d8
 800c312:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c316:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c31a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c31e:	4619      	mov	r1, r3
 800c320:	2200      	movs	r2, #0
 800c322:	4b75      	ldr	r3, [pc, #468]	; (800c4f8 <_dtoa_r+0x300>)
 800c324:	f7f3 ffd0 	bl	80002c8 <__aeabi_dsub>
 800c328:	a367      	add	r3, pc, #412	; (adr r3, 800c4c8 <_dtoa_r+0x2d0>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f4 f983 	bl	8000638 <__aeabi_dmul>
 800c332:	a367      	add	r3, pc, #412	; (adr r3, 800c4d0 <_dtoa_r+0x2d8>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f7f3 ffc8 	bl	80002cc <__adddf3>
 800c33c:	4606      	mov	r6, r0
 800c33e:	4628      	mov	r0, r5
 800c340:	460f      	mov	r7, r1
 800c342:	f7f4 f90f 	bl	8000564 <__aeabi_i2d>
 800c346:	a364      	add	r3, pc, #400	; (adr r3, 800c4d8 <_dtoa_r+0x2e0>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f7f4 f974 	bl	8000638 <__aeabi_dmul>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f3 ffb8 	bl	80002cc <__adddf3>
 800c35c:	4606      	mov	r6, r0
 800c35e:	460f      	mov	r7, r1
 800c360:	f7f4 fc1a 	bl	8000b98 <__aeabi_d2iz>
 800c364:	2200      	movs	r2, #0
 800c366:	4683      	mov	fp, r0
 800c368:	2300      	movs	r3, #0
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	f7f4 fbd5 	bl	8000b1c <__aeabi_dcmplt>
 800c372:	b148      	cbz	r0, 800c388 <_dtoa_r+0x190>
 800c374:	4658      	mov	r0, fp
 800c376:	f7f4 f8f5 	bl	8000564 <__aeabi_i2d>
 800c37a:	4632      	mov	r2, r6
 800c37c:	463b      	mov	r3, r7
 800c37e:	f7f4 fbc3 	bl	8000b08 <__aeabi_dcmpeq>
 800c382:	b908      	cbnz	r0, 800c388 <_dtoa_r+0x190>
 800c384:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c388:	f1bb 0f16 	cmp.w	fp, #22
 800c38c:	d857      	bhi.n	800c43e <_dtoa_r+0x246>
 800c38e:	4b5b      	ldr	r3, [pc, #364]	; (800c4fc <_dtoa_r+0x304>)
 800c390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	ec51 0b18 	vmov	r0, r1, d8
 800c39c:	f7f4 fbbe 	bl	8000b1c <__aeabi_dcmplt>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d04e      	beq.n	800c442 <_dtoa_r+0x24a>
 800c3a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ae:	1b5b      	subs	r3, r3, r5
 800c3b0:	1e5a      	subs	r2, r3, #1
 800c3b2:	bf45      	ittet	mi
 800c3b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c3b8:	9305      	strmi	r3, [sp, #20]
 800c3ba:	2300      	movpl	r3, #0
 800c3bc:	2300      	movmi	r3, #0
 800c3be:	9206      	str	r2, [sp, #24]
 800c3c0:	bf54      	ite	pl
 800c3c2:	9305      	strpl	r3, [sp, #20]
 800c3c4:	9306      	strmi	r3, [sp, #24]
 800c3c6:	f1bb 0f00 	cmp.w	fp, #0
 800c3ca:	db3c      	blt.n	800c446 <_dtoa_r+0x24e>
 800c3cc:	9b06      	ldr	r3, [sp, #24]
 800c3ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c3d2:	445b      	add	r3, fp
 800c3d4:	9306      	str	r3, [sp, #24]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9308      	str	r3, [sp, #32]
 800c3da:	9b07      	ldr	r3, [sp, #28]
 800c3dc:	2b09      	cmp	r3, #9
 800c3de:	d868      	bhi.n	800c4b2 <_dtoa_r+0x2ba>
 800c3e0:	2b05      	cmp	r3, #5
 800c3e2:	bfc4      	itt	gt
 800c3e4:	3b04      	subgt	r3, #4
 800c3e6:	9307      	strgt	r3, [sp, #28]
 800c3e8:	9b07      	ldr	r3, [sp, #28]
 800c3ea:	f1a3 0302 	sub.w	r3, r3, #2
 800c3ee:	bfcc      	ite	gt
 800c3f0:	2500      	movgt	r5, #0
 800c3f2:	2501      	movle	r5, #1
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	f200 8085 	bhi.w	800c504 <_dtoa_r+0x30c>
 800c3fa:	e8df f003 	tbb	[pc, r3]
 800c3fe:	3b2e      	.short	0x3b2e
 800c400:	5839      	.short	0x5839
 800c402:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c406:	441d      	add	r5, r3
 800c408:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	bfc1      	itttt	gt
 800c410:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c414:	fa08 f803 	lslgt.w	r8, r8, r3
 800c418:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c41c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c420:	bfd6      	itet	le
 800c422:	f1c3 0320 	rsble	r3, r3, #32
 800c426:	ea48 0003 	orrgt.w	r0, r8, r3
 800c42a:	fa06 f003 	lslle.w	r0, r6, r3
 800c42e:	f7f4 f889 	bl	8000544 <__aeabi_ui2d>
 800c432:	2201      	movs	r2, #1
 800c434:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c438:	3d01      	subs	r5, #1
 800c43a:	920e      	str	r2, [sp, #56]	; 0x38
 800c43c:	e76f      	b.n	800c31e <_dtoa_r+0x126>
 800c43e:	2301      	movs	r3, #1
 800c440:	e7b3      	b.n	800c3aa <_dtoa_r+0x1b2>
 800c442:	900c      	str	r0, [sp, #48]	; 0x30
 800c444:	e7b2      	b.n	800c3ac <_dtoa_r+0x1b4>
 800c446:	9b05      	ldr	r3, [sp, #20]
 800c448:	eba3 030b 	sub.w	r3, r3, fp
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	f1cb 0300 	rsb	r3, fp, #0
 800c452:	9308      	str	r3, [sp, #32]
 800c454:	2300      	movs	r3, #0
 800c456:	930b      	str	r3, [sp, #44]	; 0x2c
 800c458:	e7bf      	b.n	800c3da <_dtoa_r+0x1e2>
 800c45a:	2300      	movs	r3, #0
 800c45c:	9309      	str	r3, [sp, #36]	; 0x24
 800c45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c460:	2b00      	cmp	r3, #0
 800c462:	dc52      	bgt.n	800c50a <_dtoa_r+0x312>
 800c464:	2301      	movs	r3, #1
 800c466:	9301      	str	r3, [sp, #4]
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	461a      	mov	r2, r3
 800c46c:	920a      	str	r2, [sp, #40]	; 0x28
 800c46e:	e00b      	b.n	800c488 <_dtoa_r+0x290>
 800c470:	2301      	movs	r3, #1
 800c472:	e7f3      	b.n	800c45c <_dtoa_r+0x264>
 800c474:	2300      	movs	r3, #0
 800c476:	9309      	str	r3, [sp, #36]	; 0x24
 800c478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c47a:	445b      	add	r3, fp
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	3301      	adds	r3, #1
 800c480:	2b01      	cmp	r3, #1
 800c482:	9304      	str	r3, [sp, #16]
 800c484:	bfb8      	it	lt
 800c486:	2301      	movlt	r3, #1
 800c488:	69e0      	ldr	r0, [r4, #28]
 800c48a:	2100      	movs	r1, #0
 800c48c:	2204      	movs	r2, #4
 800c48e:	f102 0614 	add.w	r6, r2, #20
 800c492:	429e      	cmp	r6, r3
 800c494:	d93d      	bls.n	800c512 <_dtoa_r+0x31a>
 800c496:	6041      	str	r1, [r0, #4]
 800c498:	4620      	mov	r0, r4
 800c49a:	f001 fc43 	bl	800dd24 <_Balloc>
 800c49e:	9000      	str	r0, [sp, #0]
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d139      	bne.n	800c518 <_dtoa_r+0x320>
 800c4a4:	4b16      	ldr	r3, [pc, #88]	; (800c500 <_dtoa_r+0x308>)
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	f240 11af 	movw	r1, #431	; 0x1af
 800c4ac:	e6bd      	b.n	800c22a <_dtoa_r+0x32>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e7e1      	b.n	800c476 <_dtoa_r+0x27e>
 800c4b2:	2501      	movs	r5, #1
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9307      	str	r3, [sp, #28]
 800c4b8:	9509      	str	r5, [sp, #36]	; 0x24
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4be:	9301      	str	r3, [sp, #4]
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	2312      	movs	r3, #18
 800c4c6:	e7d1      	b.n	800c46c <_dtoa_r+0x274>
 800c4c8:	636f4361 	.word	0x636f4361
 800c4cc:	3fd287a7 	.word	0x3fd287a7
 800c4d0:	8b60c8b3 	.word	0x8b60c8b3
 800c4d4:	3fc68a28 	.word	0x3fc68a28
 800c4d8:	509f79fb 	.word	0x509f79fb
 800c4dc:	3fd34413 	.word	0x3fd34413
 800c4e0:	08013ab7 	.word	0x08013ab7
 800c4e4:	08013ace 	.word	0x08013ace
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	08013ab3 	.word	0x08013ab3
 800c4f0:	08013aaa 	.word	0x08013aaa
 800c4f4:	08013b5f 	.word	0x08013b5f
 800c4f8:	3ff80000 	.word	0x3ff80000
 800c4fc:	08013be8 	.word	0x08013be8
 800c500:	08013b26 	.word	0x08013b26
 800c504:	2301      	movs	r3, #1
 800c506:	9309      	str	r3, [sp, #36]	; 0x24
 800c508:	e7d7      	b.n	800c4ba <_dtoa_r+0x2c2>
 800c50a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c50c:	9301      	str	r3, [sp, #4]
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	e7ba      	b.n	800c488 <_dtoa_r+0x290>
 800c512:	3101      	adds	r1, #1
 800c514:	0052      	lsls	r2, r2, #1
 800c516:	e7ba      	b.n	800c48e <_dtoa_r+0x296>
 800c518:	69e3      	ldr	r3, [r4, #28]
 800c51a:	9a00      	ldr	r2, [sp, #0]
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	2b0e      	cmp	r3, #14
 800c522:	f200 80a8 	bhi.w	800c676 <_dtoa_r+0x47e>
 800c526:	2d00      	cmp	r5, #0
 800c528:	f000 80a5 	beq.w	800c676 <_dtoa_r+0x47e>
 800c52c:	f1bb 0f00 	cmp.w	fp, #0
 800c530:	dd38      	ble.n	800c5a4 <_dtoa_r+0x3ac>
 800c532:	4bc0      	ldr	r3, [pc, #768]	; (800c834 <_dtoa_r+0x63c>)
 800c534:	f00b 020f 	and.w	r2, fp, #15
 800c538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c53c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c540:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c544:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c548:	d019      	beq.n	800c57e <_dtoa_r+0x386>
 800c54a:	4bbb      	ldr	r3, [pc, #748]	; (800c838 <_dtoa_r+0x640>)
 800c54c:	ec51 0b18 	vmov	r0, r1, d8
 800c550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c554:	f7f4 f99a 	bl	800088c <__aeabi_ddiv>
 800c558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c55c:	f008 080f 	and.w	r8, r8, #15
 800c560:	2503      	movs	r5, #3
 800c562:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c838 <_dtoa_r+0x640>
 800c566:	f1b8 0f00 	cmp.w	r8, #0
 800c56a:	d10a      	bne.n	800c582 <_dtoa_r+0x38a>
 800c56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c570:	4632      	mov	r2, r6
 800c572:	463b      	mov	r3, r7
 800c574:	f7f4 f98a 	bl	800088c <__aeabi_ddiv>
 800c578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c57c:	e02b      	b.n	800c5d6 <_dtoa_r+0x3de>
 800c57e:	2502      	movs	r5, #2
 800c580:	e7ef      	b.n	800c562 <_dtoa_r+0x36a>
 800c582:	f018 0f01 	tst.w	r8, #1
 800c586:	d008      	beq.n	800c59a <_dtoa_r+0x3a2>
 800c588:	4630      	mov	r0, r6
 800c58a:	4639      	mov	r1, r7
 800c58c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c590:	f7f4 f852 	bl	8000638 <__aeabi_dmul>
 800c594:	3501      	adds	r5, #1
 800c596:	4606      	mov	r6, r0
 800c598:	460f      	mov	r7, r1
 800c59a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c59e:	f109 0908 	add.w	r9, r9, #8
 800c5a2:	e7e0      	b.n	800c566 <_dtoa_r+0x36e>
 800c5a4:	f000 809f 	beq.w	800c6e6 <_dtoa_r+0x4ee>
 800c5a8:	f1cb 0600 	rsb	r6, fp, #0
 800c5ac:	4ba1      	ldr	r3, [pc, #644]	; (800c834 <_dtoa_r+0x63c>)
 800c5ae:	4fa2      	ldr	r7, [pc, #648]	; (800c838 <_dtoa_r+0x640>)
 800c5b0:	f006 020f 	and.w	r2, r6, #15
 800c5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	ec51 0b18 	vmov	r0, r1, d8
 800c5c0:	f7f4 f83a 	bl	8000638 <__aeabi_dmul>
 800c5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5c8:	1136      	asrs	r6, r6, #4
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2502      	movs	r5, #2
 800c5ce:	2e00      	cmp	r6, #0
 800c5d0:	d17e      	bne.n	800c6d0 <_dtoa_r+0x4d8>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1d0      	bne.n	800c578 <_dtoa_r+0x380>
 800c5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8084 	beq.w	800c6ea <_dtoa_r+0x4f2>
 800c5e2:	4b96      	ldr	r3, [pc, #600]	; (800c83c <_dtoa_r+0x644>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	f7f4 fa97 	bl	8000b1c <__aeabi_dcmplt>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d07b      	beq.n	800c6ea <_dtoa_r+0x4f2>
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d078      	beq.n	800c6ea <_dtoa_r+0x4f2>
 800c5f8:	9b01      	ldr	r3, [sp, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd39      	ble.n	800c672 <_dtoa_r+0x47a>
 800c5fe:	4b90      	ldr	r3, [pc, #576]	; (800c840 <_dtoa_r+0x648>)
 800c600:	2200      	movs	r2, #0
 800c602:	4640      	mov	r0, r8
 800c604:	4649      	mov	r1, r9
 800c606:	f7f4 f817 	bl	8000638 <__aeabi_dmul>
 800c60a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c60e:	9e01      	ldr	r6, [sp, #4]
 800c610:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c614:	3501      	adds	r5, #1
 800c616:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c61a:	4628      	mov	r0, r5
 800c61c:	f7f3 ffa2 	bl	8000564 <__aeabi_i2d>
 800c620:	4642      	mov	r2, r8
 800c622:	464b      	mov	r3, r9
 800c624:	f7f4 f808 	bl	8000638 <__aeabi_dmul>
 800c628:	4b86      	ldr	r3, [pc, #536]	; (800c844 <_dtoa_r+0x64c>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	f7f3 fe4e 	bl	80002cc <__adddf3>
 800c630:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c638:	9303      	str	r3, [sp, #12]
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	d158      	bne.n	800c6f0 <_dtoa_r+0x4f8>
 800c63e:	4b82      	ldr	r3, [pc, #520]	; (800c848 <_dtoa_r+0x650>)
 800c640:	2200      	movs	r2, #0
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 fe3f 	bl	80002c8 <__aeabi_dsub>
 800c64a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c64e:	4680      	mov	r8, r0
 800c650:	4689      	mov	r9, r1
 800c652:	f7f4 fa81 	bl	8000b58 <__aeabi_dcmpgt>
 800c656:	2800      	cmp	r0, #0
 800c658:	f040 8296 	bne.w	800cb88 <_dtoa_r+0x990>
 800c65c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c660:	4640      	mov	r0, r8
 800c662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c666:	4649      	mov	r1, r9
 800c668:	f7f4 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	f040 8289 	bne.w	800cb84 <_dtoa_r+0x98c>
 800c672:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c676:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f2c0 814e 	blt.w	800c91a <_dtoa_r+0x722>
 800c67e:	f1bb 0f0e 	cmp.w	fp, #14
 800c682:	f300 814a 	bgt.w	800c91a <_dtoa_r+0x722>
 800c686:	4b6b      	ldr	r3, [pc, #428]	; (800c834 <_dtoa_r+0x63c>)
 800c688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c68c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c692:	2b00      	cmp	r3, #0
 800c694:	f280 80dc 	bge.w	800c850 <_dtoa_r+0x658>
 800c698:	9b04      	ldr	r3, [sp, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f300 80d8 	bgt.w	800c850 <_dtoa_r+0x658>
 800c6a0:	f040 826f 	bne.w	800cb82 <_dtoa_r+0x98a>
 800c6a4:	4b68      	ldr	r3, [pc, #416]	; (800c848 <_dtoa_r+0x650>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	f7f3 ffc4 	bl	8000638 <__aeabi_dmul>
 800c6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6b4:	f7f4 fa46 	bl	8000b44 <__aeabi_dcmpge>
 800c6b8:	9e04      	ldr	r6, [sp, #16]
 800c6ba:	4637      	mov	r7, r6
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f040 8245 	bne.w	800cb4c <_dtoa_r+0x954>
 800c6c2:	9d00      	ldr	r5, [sp, #0]
 800c6c4:	2331      	movs	r3, #49	; 0x31
 800c6c6:	f805 3b01 	strb.w	r3, [r5], #1
 800c6ca:	f10b 0b01 	add.w	fp, fp, #1
 800c6ce:	e241      	b.n	800cb54 <_dtoa_r+0x95c>
 800c6d0:	07f2      	lsls	r2, r6, #31
 800c6d2:	d505      	bpl.n	800c6e0 <_dtoa_r+0x4e8>
 800c6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d8:	f7f3 ffae 	bl	8000638 <__aeabi_dmul>
 800c6dc:	3501      	adds	r5, #1
 800c6de:	2301      	movs	r3, #1
 800c6e0:	1076      	asrs	r6, r6, #1
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	e773      	b.n	800c5ce <_dtoa_r+0x3d6>
 800c6e6:	2502      	movs	r5, #2
 800c6e8:	e775      	b.n	800c5d6 <_dtoa_r+0x3de>
 800c6ea:	9e04      	ldr	r6, [sp, #16]
 800c6ec:	465f      	mov	r7, fp
 800c6ee:	e792      	b.n	800c616 <_dtoa_r+0x41e>
 800c6f0:	9900      	ldr	r1, [sp, #0]
 800c6f2:	4b50      	ldr	r3, [pc, #320]	; (800c834 <_dtoa_r+0x63c>)
 800c6f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6f8:	4431      	add	r1, r6
 800c6fa:	9102      	str	r1, [sp, #8]
 800c6fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6fe:	eeb0 9a47 	vmov.f32	s18, s14
 800c702:	eef0 9a67 	vmov.f32	s19, s15
 800c706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c70e:	2900      	cmp	r1, #0
 800c710:	d044      	beq.n	800c79c <_dtoa_r+0x5a4>
 800c712:	494e      	ldr	r1, [pc, #312]	; (800c84c <_dtoa_r+0x654>)
 800c714:	2000      	movs	r0, #0
 800c716:	f7f4 f8b9 	bl	800088c <__aeabi_ddiv>
 800c71a:	ec53 2b19 	vmov	r2, r3, d9
 800c71e:	f7f3 fdd3 	bl	80002c8 <__aeabi_dsub>
 800c722:	9d00      	ldr	r5, [sp, #0]
 800c724:	ec41 0b19 	vmov	d9, r0, r1
 800c728:	4649      	mov	r1, r9
 800c72a:	4640      	mov	r0, r8
 800c72c:	f7f4 fa34 	bl	8000b98 <__aeabi_d2iz>
 800c730:	4606      	mov	r6, r0
 800c732:	f7f3 ff17 	bl	8000564 <__aeabi_i2d>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4640      	mov	r0, r8
 800c73c:	4649      	mov	r1, r9
 800c73e:	f7f3 fdc3 	bl	80002c8 <__aeabi_dsub>
 800c742:	3630      	adds	r6, #48	; 0x30
 800c744:	f805 6b01 	strb.w	r6, [r5], #1
 800c748:	ec53 2b19 	vmov	r2, r3, d9
 800c74c:	4680      	mov	r8, r0
 800c74e:	4689      	mov	r9, r1
 800c750:	f7f4 f9e4 	bl	8000b1c <__aeabi_dcmplt>
 800c754:	2800      	cmp	r0, #0
 800c756:	d164      	bne.n	800c822 <_dtoa_r+0x62a>
 800c758:	4642      	mov	r2, r8
 800c75a:	464b      	mov	r3, r9
 800c75c:	4937      	ldr	r1, [pc, #220]	; (800c83c <_dtoa_r+0x644>)
 800c75e:	2000      	movs	r0, #0
 800c760:	f7f3 fdb2 	bl	80002c8 <__aeabi_dsub>
 800c764:	ec53 2b19 	vmov	r2, r3, d9
 800c768:	f7f4 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f040 80b6 	bne.w	800c8de <_dtoa_r+0x6e6>
 800c772:	9b02      	ldr	r3, [sp, #8]
 800c774:	429d      	cmp	r5, r3
 800c776:	f43f af7c 	beq.w	800c672 <_dtoa_r+0x47a>
 800c77a:	4b31      	ldr	r3, [pc, #196]	; (800c840 <_dtoa_r+0x648>)
 800c77c:	ec51 0b19 	vmov	r0, r1, d9
 800c780:	2200      	movs	r2, #0
 800c782:	f7f3 ff59 	bl	8000638 <__aeabi_dmul>
 800c786:	4b2e      	ldr	r3, [pc, #184]	; (800c840 <_dtoa_r+0x648>)
 800c788:	ec41 0b19 	vmov	d9, r0, r1
 800c78c:	2200      	movs	r2, #0
 800c78e:	4640      	mov	r0, r8
 800c790:	4649      	mov	r1, r9
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	4680      	mov	r8, r0
 800c798:	4689      	mov	r9, r1
 800c79a:	e7c5      	b.n	800c728 <_dtoa_r+0x530>
 800c79c:	ec51 0b17 	vmov	r0, r1, d7
 800c7a0:	f7f3 ff4a 	bl	8000638 <__aeabi_dmul>
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	9d00      	ldr	r5, [sp, #0]
 800c7a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7aa:	ec41 0b19 	vmov	d9, r0, r1
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	f7f4 f9f1 	bl	8000b98 <__aeabi_d2iz>
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	f7f3 fed4 	bl	8000564 <__aeabi_i2d>
 800c7bc:	3630      	adds	r6, #48	; 0x30
 800c7be:	4602      	mov	r2, r0
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	f7f3 fd7f 	bl	80002c8 <__aeabi_dsub>
 800c7ca:	f805 6b01 	strb.w	r6, [r5], #1
 800c7ce:	9b02      	ldr	r3, [sp, #8]
 800c7d0:	429d      	cmp	r5, r3
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	4689      	mov	r9, r1
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	d124      	bne.n	800c826 <_dtoa_r+0x62e>
 800c7dc:	4b1b      	ldr	r3, [pc, #108]	; (800c84c <_dtoa_r+0x654>)
 800c7de:	ec51 0b19 	vmov	r0, r1, d9
 800c7e2:	f7f3 fd73 	bl	80002cc <__adddf3>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	4649      	mov	r1, r9
 800c7ee:	f7f4 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d173      	bne.n	800c8de <_dtoa_r+0x6e6>
 800c7f6:	ec53 2b19 	vmov	r2, r3, d9
 800c7fa:	4914      	ldr	r1, [pc, #80]	; (800c84c <_dtoa_r+0x654>)
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f7f3 fd63 	bl	80002c8 <__aeabi_dsub>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4640      	mov	r0, r8
 800c808:	4649      	mov	r1, r9
 800c80a:	f7f4 f987 	bl	8000b1c <__aeabi_dcmplt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f43f af2f 	beq.w	800c672 <_dtoa_r+0x47a>
 800c814:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c816:	1e6b      	subs	r3, r5, #1
 800c818:	930f      	str	r3, [sp, #60]	; 0x3c
 800c81a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c81e:	2b30      	cmp	r3, #48	; 0x30
 800c820:	d0f8      	beq.n	800c814 <_dtoa_r+0x61c>
 800c822:	46bb      	mov	fp, r7
 800c824:	e04a      	b.n	800c8bc <_dtoa_r+0x6c4>
 800c826:	4b06      	ldr	r3, [pc, #24]	; (800c840 <_dtoa_r+0x648>)
 800c828:	f7f3 ff06 	bl	8000638 <__aeabi_dmul>
 800c82c:	4680      	mov	r8, r0
 800c82e:	4689      	mov	r9, r1
 800c830:	e7bd      	b.n	800c7ae <_dtoa_r+0x5b6>
 800c832:	bf00      	nop
 800c834:	08013be8 	.word	0x08013be8
 800c838:	08013bc0 	.word	0x08013bc0
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	40240000 	.word	0x40240000
 800c844:	401c0000 	.word	0x401c0000
 800c848:	40140000 	.word	0x40140000
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c854:	9d00      	ldr	r5, [sp, #0]
 800c856:	4642      	mov	r2, r8
 800c858:	464b      	mov	r3, r9
 800c85a:	4630      	mov	r0, r6
 800c85c:	4639      	mov	r1, r7
 800c85e:	f7f4 f815 	bl	800088c <__aeabi_ddiv>
 800c862:	f7f4 f999 	bl	8000b98 <__aeabi_d2iz>
 800c866:	9001      	str	r0, [sp, #4]
 800c868:	f7f3 fe7c 	bl	8000564 <__aeabi_i2d>
 800c86c:	4642      	mov	r2, r8
 800c86e:	464b      	mov	r3, r9
 800c870:	f7f3 fee2 	bl	8000638 <__aeabi_dmul>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f3 fd24 	bl	80002c8 <__aeabi_dsub>
 800c880:	9e01      	ldr	r6, [sp, #4]
 800c882:	9f04      	ldr	r7, [sp, #16]
 800c884:	3630      	adds	r6, #48	; 0x30
 800c886:	f805 6b01 	strb.w	r6, [r5], #1
 800c88a:	9e00      	ldr	r6, [sp, #0]
 800c88c:	1bae      	subs	r6, r5, r6
 800c88e:	42b7      	cmp	r7, r6
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	d134      	bne.n	800c900 <_dtoa_r+0x708>
 800c896:	f7f3 fd19 	bl	80002cc <__adddf3>
 800c89a:	4642      	mov	r2, r8
 800c89c:	464b      	mov	r3, r9
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	f7f4 f959 	bl	8000b58 <__aeabi_dcmpgt>
 800c8a6:	b9c8      	cbnz	r0, 800c8dc <_dtoa_r+0x6e4>
 800c8a8:	4642      	mov	r2, r8
 800c8aa:	464b      	mov	r3, r9
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f4 f92a 	bl	8000b08 <__aeabi_dcmpeq>
 800c8b4:	b110      	cbz	r0, 800c8bc <_dtoa_r+0x6c4>
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	07db      	lsls	r3, r3, #31
 800c8ba:	d40f      	bmi.n	800c8dc <_dtoa_r+0x6e4>
 800c8bc:	4651      	mov	r1, sl
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f001 fa70 	bl	800dda4 <_Bfree>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8c8:	702b      	strb	r3, [r5, #0]
 800c8ca:	f10b 0301 	add.w	r3, fp, #1
 800c8ce:	6013      	str	r3, [r2, #0]
 800c8d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f43f ace2 	beq.w	800c29c <_dtoa_r+0xa4>
 800c8d8:	601d      	str	r5, [r3, #0]
 800c8da:	e4df      	b.n	800c29c <_dtoa_r+0xa4>
 800c8dc:	465f      	mov	r7, fp
 800c8de:	462b      	mov	r3, r5
 800c8e0:	461d      	mov	r5, r3
 800c8e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8e6:	2a39      	cmp	r2, #57	; 0x39
 800c8e8:	d106      	bne.n	800c8f8 <_dtoa_r+0x700>
 800c8ea:	9a00      	ldr	r2, [sp, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d1f7      	bne.n	800c8e0 <_dtoa_r+0x6e8>
 800c8f0:	9900      	ldr	r1, [sp, #0]
 800c8f2:	2230      	movs	r2, #48	; 0x30
 800c8f4:	3701      	adds	r7, #1
 800c8f6:	700a      	strb	r2, [r1, #0]
 800c8f8:	781a      	ldrb	r2, [r3, #0]
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	701a      	strb	r2, [r3, #0]
 800c8fe:	e790      	b.n	800c822 <_dtoa_r+0x62a>
 800c900:	4ba3      	ldr	r3, [pc, #652]	; (800cb90 <_dtoa_r+0x998>)
 800c902:	2200      	movs	r2, #0
 800c904:	f7f3 fe98 	bl	8000638 <__aeabi_dmul>
 800c908:	2200      	movs	r2, #0
 800c90a:	2300      	movs	r3, #0
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	f7f4 f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 800c914:	2800      	cmp	r0, #0
 800c916:	d09e      	beq.n	800c856 <_dtoa_r+0x65e>
 800c918:	e7d0      	b.n	800c8bc <_dtoa_r+0x6c4>
 800c91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	f000 80ca 	beq.w	800cab6 <_dtoa_r+0x8be>
 800c922:	9a07      	ldr	r2, [sp, #28]
 800c924:	2a01      	cmp	r2, #1
 800c926:	f300 80ad 	bgt.w	800ca84 <_dtoa_r+0x88c>
 800c92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	f000 80a5 	beq.w	800ca7c <_dtoa_r+0x884>
 800c932:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c936:	9e08      	ldr	r6, [sp, #32]
 800c938:	9d05      	ldr	r5, [sp, #20]
 800c93a:	9a05      	ldr	r2, [sp, #20]
 800c93c:	441a      	add	r2, r3
 800c93e:	9205      	str	r2, [sp, #20]
 800c940:	9a06      	ldr	r2, [sp, #24]
 800c942:	2101      	movs	r1, #1
 800c944:	441a      	add	r2, r3
 800c946:	4620      	mov	r0, r4
 800c948:	9206      	str	r2, [sp, #24]
 800c94a:	f001 fae1 	bl	800df10 <__i2b>
 800c94e:	4607      	mov	r7, r0
 800c950:	b165      	cbz	r5, 800c96c <_dtoa_r+0x774>
 800c952:	9b06      	ldr	r3, [sp, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	dd09      	ble.n	800c96c <_dtoa_r+0x774>
 800c958:	42ab      	cmp	r3, r5
 800c95a:	9a05      	ldr	r2, [sp, #20]
 800c95c:	bfa8      	it	ge
 800c95e:	462b      	movge	r3, r5
 800c960:	1ad2      	subs	r2, r2, r3
 800c962:	9205      	str	r2, [sp, #20]
 800c964:	9a06      	ldr	r2, [sp, #24]
 800c966:	1aed      	subs	r5, r5, r3
 800c968:	1ad3      	subs	r3, r2, r3
 800c96a:	9306      	str	r3, [sp, #24]
 800c96c:	9b08      	ldr	r3, [sp, #32]
 800c96e:	b1f3      	cbz	r3, 800c9ae <_dtoa_r+0x7b6>
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	2b00      	cmp	r3, #0
 800c974:	f000 80a3 	beq.w	800cabe <_dtoa_r+0x8c6>
 800c978:	2e00      	cmp	r6, #0
 800c97a:	dd10      	ble.n	800c99e <_dtoa_r+0x7a6>
 800c97c:	4639      	mov	r1, r7
 800c97e:	4632      	mov	r2, r6
 800c980:	4620      	mov	r0, r4
 800c982:	f001 fb85 	bl	800e090 <__pow5mult>
 800c986:	4652      	mov	r2, sl
 800c988:	4601      	mov	r1, r0
 800c98a:	4607      	mov	r7, r0
 800c98c:	4620      	mov	r0, r4
 800c98e:	f001 fad5 	bl	800df3c <__multiply>
 800c992:	4651      	mov	r1, sl
 800c994:	4680      	mov	r8, r0
 800c996:	4620      	mov	r0, r4
 800c998:	f001 fa04 	bl	800dda4 <_Bfree>
 800c99c:	46c2      	mov	sl, r8
 800c99e:	9b08      	ldr	r3, [sp, #32]
 800c9a0:	1b9a      	subs	r2, r3, r6
 800c9a2:	d004      	beq.n	800c9ae <_dtoa_r+0x7b6>
 800c9a4:	4651      	mov	r1, sl
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f001 fb72 	bl	800e090 <__pow5mult>
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f001 faad 	bl	800df10 <__i2b>
 800c9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	f340 8081 	ble.w	800cac2 <_dtoa_r+0x8ca>
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f001 fb63 	bl	800e090 <__pow5mult>
 800c9ca:	9b07      	ldr	r3, [sp, #28]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	dd7a      	ble.n	800cac8 <_dtoa_r+0x8d0>
 800c9d2:	f04f 0800 	mov.w	r8, #0
 800c9d6:	6933      	ldr	r3, [r6, #16]
 800c9d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9dc:	6918      	ldr	r0, [r3, #16]
 800c9de:	f001 fa49 	bl	800de74 <__hi0bits>
 800c9e2:	f1c0 0020 	rsb	r0, r0, #32
 800c9e6:	9b06      	ldr	r3, [sp, #24]
 800c9e8:	4418      	add	r0, r3
 800c9ea:	f010 001f 	ands.w	r0, r0, #31
 800c9ee:	f000 8094 	beq.w	800cb1a <_dtoa_r+0x922>
 800c9f2:	f1c0 0320 	rsb	r3, r0, #32
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	f340 8085 	ble.w	800cb06 <_dtoa_r+0x90e>
 800c9fc:	9b05      	ldr	r3, [sp, #20]
 800c9fe:	f1c0 001c 	rsb	r0, r0, #28
 800ca02:	4403      	add	r3, r0
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	9b06      	ldr	r3, [sp, #24]
 800ca08:	4403      	add	r3, r0
 800ca0a:	4405      	add	r5, r0
 800ca0c:	9306      	str	r3, [sp, #24]
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	dd05      	ble.n	800ca20 <_dtoa_r+0x828>
 800ca14:	4651      	mov	r1, sl
 800ca16:	461a      	mov	r2, r3
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f001 fb93 	bl	800e144 <__lshift>
 800ca1e:	4682      	mov	sl, r0
 800ca20:	9b06      	ldr	r3, [sp, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dd05      	ble.n	800ca32 <_dtoa_r+0x83a>
 800ca26:	4631      	mov	r1, r6
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f001 fb8a 	bl	800e144 <__lshift>
 800ca30:	4606      	mov	r6, r0
 800ca32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d072      	beq.n	800cb1e <_dtoa_r+0x926>
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4650      	mov	r0, sl
 800ca3c:	f001 fbee 	bl	800e21c <__mcmp>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	da6c      	bge.n	800cb1e <_dtoa_r+0x926>
 800ca44:	2300      	movs	r3, #0
 800ca46:	4651      	mov	r1, sl
 800ca48:	220a      	movs	r2, #10
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f001 f9cc 	bl	800dde8 <__multadd>
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ca56:	4682      	mov	sl, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 81b0 	beq.w	800cdbe <_dtoa_r+0xbc6>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4639      	mov	r1, r7
 800ca62:	220a      	movs	r2, #10
 800ca64:	4620      	mov	r0, r4
 800ca66:	f001 f9bf 	bl	800dde8 <__multadd>
 800ca6a:	9b01      	ldr	r3, [sp, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	4607      	mov	r7, r0
 800ca70:	f300 8096 	bgt.w	800cba0 <_dtoa_r+0x9a8>
 800ca74:	9b07      	ldr	r3, [sp, #28]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	dc59      	bgt.n	800cb2e <_dtoa_r+0x936>
 800ca7a:	e091      	b.n	800cba0 <_dtoa_r+0x9a8>
 800ca7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca82:	e758      	b.n	800c936 <_dtoa_r+0x73e>
 800ca84:	9b04      	ldr	r3, [sp, #16]
 800ca86:	1e5e      	subs	r6, r3, #1
 800ca88:	9b08      	ldr	r3, [sp, #32]
 800ca8a:	42b3      	cmp	r3, r6
 800ca8c:	bfbf      	itttt	lt
 800ca8e:	9b08      	ldrlt	r3, [sp, #32]
 800ca90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ca92:	9608      	strlt	r6, [sp, #32]
 800ca94:	1af3      	sublt	r3, r6, r3
 800ca96:	bfb4      	ite	lt
 800ca98:	18d2      	addlt	r2, r2, r3
 800ca9a:	1b9e      	subge	r6, r3, r6
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	bfbc      	itt	lt
 800caa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800caa2:	2600      	movlt	r6, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	bfb7      	itett	lt
 800caa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800caac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cab0:	1a9d      	sublt	r5, r3, r2
 800cab2:	2300      	movlt	r3, #0
 800cab4:	e741      	b.n	800c93a <_dtoa_r+0x742>
 800cab6:	9e08      	ldr	r6, [sp, #32]
 800cab8:	9d05      	ldr	r5, [sp, #20]
 800caba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cabc:	e748      	b.n	800c950 <_dtoa_r+0x758>
 800cabe:	9a08      	ldr	r2, [sp, #32]
 800cac0:	e770      	b.n	800c9a4 <_dtoa_r+0x7ac>
 800cac2:	9b07      	ldr	r3, [sp, #28]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	dc19      	bgt.n	800cafc <_dtoa_r+0x904>
 800cac8:	9b02      	ldr	r3, [sp, #8]
 800caca:	b9bb      	cbnz	r3, 800cafc <_dtoa_r+0x904>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cad2:	b99b      	cbnz	r3, 800cafc <_dtoa_r+0x904>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cada:	0d1b      	lsrs	r3, r3, #20
 800cadc:	051b      	lsls	r3, r3, #20
 800cade:	b183      	cbz	r3, 800cb02 <_dtoa_r+0x90a>
 800cae0:	9b05      	ldr	r3, [sp, #20]
 800cae2:	3301      	adds	r3, #1
 800cae4:	9305      	str	r3, [sp, #20]
 800cae6:	9b06      	ldr	r3, [sp, #24]
 800cae8:	3301      	adds	r3, #1
 800caea:	9306      	str	r3, [sp, #24]
 800caec:	f04f 0801 	mov.w	r8, #1
 800caf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f47f af6f 	bne.w	800c9d6 <_dtoa_r+0x7de>
 800caf8:	2001      	movs	r0, #1
 800cafa:	e774      	b.n	800c9e6 <_dtoa_r+0x7ee>
 800cafc:	f04f 0800 	mov.w	r8, #0
 800cb00:	e7f6      	b.n	800caf0 <_dtoa_r+0x8f8>
 800cb02:	4698      	mov	r8, r3
 800cb04:	e7f4      	b.n	800caf0 <_dtoa_r+0x8f8>
 800cb06:	d082      	beq.n	800ca0e <_dtoa_r+0x816>
 800cb08:	9a05      	ldr	r2, [sp, #20]
 800cb0a:	331c      	adds	r3, #28
 800cb0c:	441a      	add	r2, r3
 800cb0e:	9205      	str	r2, [sp, #20]
 800cb10:	9a06      	ldr	r2, [sp, #24]
 800cb12:	441a      	add	r2, r3
 800cb14:	441d      	add	r5, r3
 800cb16:	9206      	str	r2, [sp, #24]
 800cb18:	e779      	b.n	800ca0e <_dtoa_r+0x816>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	e7f4      	b.n	800cb08 <_dtoa_r+0x910>
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dc37      	bgt.n	800cb94 <_dtoa_r+0x99c>
 800cb24:	9b07      	ldr	r3, [sp, #28]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	dd34      	ble.n	800cb94 <_dtoa_r+0x99c>
 800cb2a:	9b04      	ldr	r3, [sp, #16]
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	b963      	cbnz	r3, 800cb4c <_dtoa_r+0x954>
 800cb32:	4631      	mov	r1, r6
 800cb34:	2205      	movs	r2, #5
 800cb36:	4620      	mov	r0, r4
 800cb38:	f001 f956 	bl	800dde8 <__multadd>
 800cb3c:	4601      	mov	r1, r0
 800cb3e:	4606      	mov	r6, r0
 800cb40:	4650      	mov	r0, sl
 800cb42:	f001 fb6b 	bl	800e21c <__mcmp>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	f73f adbb 	bgt.w	800c6c2 <_dtoa_r+0x4ca>
 800cb4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb4e:	9d00      	ldr	r5, [sp, #0]
 800cb50:	ea6f 0b03 	mvn.w	fp, r3
 800cb54:	f04f 0800 	mov.w	r8, #0
 800cb58:	4631      	mov	r1, r6
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f001 f922 	bl	800dda4 <_Bfree>
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	f43f aeab 	beq.w	800c8bc <_dtoa_r+0x6c4>
 800cb66:	f1b8 0f00 	cmp.w	r8, #0
 800cb6a:	d005      	beq.n	800cb78 <_dtoa_r+0x980>
 800cb6c:	45b8      	cmp	r8, r7
 800cb6e:	d003      	beq.n	800cb78 <_dtoa_r+0x980>
 800cb70:	4641      	mov	r1, r8
 800cb72:	4620      	mov	r0, r4
 800cb74:	f001 f916 	bl	800dda4 <_Bfree>
 800cb78:	4639      	mov	r1, r7
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f001 f912 	bl	800dda4 <_Bfree>
 800cb80:	e69c      	b.n	800c8bc <_dtoa_r+0x6c4>
 800cb82:	2600      	movs	r6, #0
 800cb84:	4637      	mov	r7, r6
 800cb86:	e7e1      	b.n	800cb4c <_dtoa_r+0x954>
 800cb88:	46bb      	mov	fp, r7
 800cb8a:	4637      	mov	r7, r6
 800cb8c:	e599      	b.n	800c6c2 <_dtoa_r+0x4ca>
 800cb8e:	bf00      	nop
 800cb90:	40240000 	.word	0x40240000
 800cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80c8 	beq.w	800cd2c <_dtoa_r+0xb34>
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	2d00      	cmp	r5, #0
 800cba2:	dd05      	ble.n	800cbb0 <_dtoa_r+0x9b8>
 800cba4:	4639      	mov	r1, r7
 800cba6:	462a      	mov	r2, r5
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f001 facb 	bl	800e144 <__lshift>
 800cbae:	4607      	mov	r7, r0
 800cbb0:	f1b8 0f00 	cmp.w	r8, #0
 800cbb4:	d05b      	beq.n	800cc6e <_dtoa_r+0xa76>
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f001 f8b3 	bl	800dd24 <_Balloc>
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	b928      	cbnz	r0, 800cbce <_dtoa_r+0x9d6>
 800cbc2:	4b83      	ldr	r3, [pc, #524]	; (800cdd0 <_dtoa_r+0xbd8>)
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cbca:	f7ff bb2e 	b.w	800c22a <_dtoa_r+0x32>
 800cbce:	693a      	ldr	r2, [r7, #16]
 800cbd0:	3202      	adds	r2, #2
 800cbd2:	0092      	lsls	r2, r2, #2
 800cbd4:	f107 010c 	add.w	r1, r7, #12
 800cbd8:	300c      	adds	r0, #12
 800cbda:	f001 fed7 	bl	800e98c <memcpy>
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f001 faae 	bl	800e144 <__lshift>
 800cbe8:	9b00      	ldr	r3, [sp, #0]
 800cbea:	3301      	adds	r3, #1
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	9308      	str	r3, [sp, #32]
 800cbf6:	9b02      	ldr	r3, [sp, #8]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	46b8      	mov	r8, r7
 800cbfe:	9306      	str	r3, [sp, #24]
 800cc00:	4607      	mov	r7, r0
 800cc02:	9b04      	ldr	r3, [sp, #16]
 800cc04:	4631      	mov	r1, r6
 800cc06:	3b01      	subs	r3, #1
 800cc08:	4650      	mov	r0, sl
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	f7ff fa6a 	bl	800c0e4 <quorem>
 800cc10:	4641      	mov	r1, r8
 800cc12:	9002      	str	r0, [sp, #8]
 800cc14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc18:	4650      	mov	r0, sl
 800cc1a:	f001 faff 	bl	800e21c <__mcmp>
 800cc1e:	463a      	mov	r2, r7
 800cc20:	9005      	str	r0, [sp, #20]
 800cc22:	4631      	mov	r1, r6
 800cc24:	4620      	mov	r0, r4
 800cc26:	f001 fb15 	bl	800e254 <__mdiff>
 800cc2a:	68c2      	ldr	r2, [r0, #12]
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	bb02      	cbnz	r2, 800cc72 <_dtoa_r+0xa7a>
 800cc30:	4601      	mov	r1, r0
 800cc32:	4650      	mov	r0, sl
 800cc34:	f001 faf2 	bl	800e21c <__mcmp>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc40:	f001 f8b0 	bl	800dda4 <_Bfree>
 800cc44:	9b07      	ldr	r3, [sp, #28]
 800cc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc48:	9d04      	ldr	r5, [sp, #16]
 800cc4a:	ea43 0102 	orr.w	r1, r3, r2
 800cc4e:	9b06      	ldr	r3, [sp, #24]
 800cc50:	4319      	orrs	r1, r3
 800cc52:	d110      	bne.n	800cc76 <_dtoa_r+0xa7e>
 800cc54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc58:	d029      	beq.n	800ccae <_dtoa_r+0xab6>
 800cc5a:	9b05      	ldr	r3, [sp, #20]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd02      	ble.n	800cc66 <_dtoa_r+0xa6e>
 800cc60:	9b02      	ldr	r3, [sp, #8]
 800cc62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	f883 9000 	strb.w	r9, [r3]
 800cc6c:	e774      	b.n	800cb58 <_dtoa_r+0x960>
 800cc6e:	4638      	mov	r0, r7
 800cc70:	e7ba      	b.n	800cbe8 <_dtoa_r+0x9f0>
 800cc72:	2201      	movs	r2, #1
 800cc74:	e7e1      	b.n	800cc3a <_dtoa_r+0xa42>
 800cc76:	9b05      	ldr	r3, [sp, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	db04      	blt.n	800cc86 <_dtoa_r+0xa8e>
 800cc7c:	9907      	ldr	r1, [sp, #28]
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	9906      	ldr	r1, [sp, #24]
 800cc82:	430b      	orrs	r3, r1
 800cc84:	d120      	bne.n	800ccc8 <_dtoa_r+0xad0>
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	dded      	ble.n	800cc66 <_dtoa_r+0xa6e>
 800cc8a:	4651      	mov	r1, sl
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f001 fa58 	bl	800e144 <__lshift>
 800cc94:	4631      	mov	r1, r6
 800cc96:	4682      	mov	sl, r0
 800cc98:	f001 fac0 	bl	800e21c <__mcmp>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	dc03      	bgt.n	800cca8 <_dtoa_r+0xab0>
 800cca0:	d1e1      	bne.n	800cc66 <_dtoa_r+0xa6e>
 800cca2:	f019 0f01 	tst.w	r9, #1
 800cca6:	d0de      	beq.n	800cc66 <_dtoa_r+0xa6e>
 800cca8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ccac:	d1d8      	bne.n	800cc60 <_dtoa_r+0xa68>
 800ccae:	9a01      	ldr	r2, [sp, #4]
 800ccb0:	2339      	movs	r3, #57	; 0x39
 800ccb2:	7013      	strb	r3, [r2, #0]
 800ccb4:	462b      	mov	r3, r5
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccbe:	2a39      	cmp	r2, #57	; 0x39
 800ccc0:	d06c      	beq.n	800cd9c <_dtoa_r+0xba4>
 800ccc2:	3201      	adds	r2, #1
 800ccc4:	701a      	strb	r2, [r3, #0]
 800ccc6:	e747      	b.n	800cb58 <_dtoa_r+0x960>
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	dd07      	ble.n	800ccdc <_dtoa_r+0xae4>
 800cccc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ccd0:	d0ed      	beq.n	800ccae <_dtoa_r+0xab6>
 800ccd2:	9a01      	ldr	r2, [sp, #4]
 800ccd4:	f109 0301 	add.w	r3, r9, #1
 800ccd8:	7013      	strb	r3, [r2, #0]
 800ccda:	e73d      	b.n	800cb58 <_dtoa_r+0x960>
 800ccdc:	9b04      	ldr	r3, [sp, #16]
 800ccde:	9a08      	ldr	r2, [sp, #32]
 800cce0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d043      	beq.n	800cd70 <_dtoa_r+0xb78>
 800cce8:	4651      	mov	r1, sl
 800ccea:	2300      	movs	r3, #0
 800ccec:	220a      	movs	r2, #10
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f001 f87a 	bl	800dde8 <__multadd>
 800ccf4:	45b8      	cmp	r8, r7
 800ccf6:	4682      	mov	sl, r0
 800ccf8:	f04f 0300 	mov.w	r3, #0
 800ccfc:	f04f 020a 	mov.w	r2, #10
 800cd00:	4641      	mov	r1, r8
 800cd02:	4620      	mov	r0, r4
 800cd04:	d107      	bne.n	800cd16 <_dtoa_r+0xb1e>
 800cd06:	f001 f86f 	bl	800dde8 <__multadd>
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	4607      	mov	r7, r0
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	3301      	adds	r3, #1
 800cd12:	9304      	str	r3, [sp, #16]
 800cd14:	e775      	b.n	800cc02 <_dtoa_r+0xa0a>
 800cd16:	f001 f867 	bl	800dde8 <__multadd>
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	220a      	movs	r2, #10
 800cd22:	4620      	mov	r0, r4
 800cd24:	f001 f860 	bl	800dde8 <__multadd>
 800cd28:	4607      	mov	r7, r0
 800cd2a:	e7f0      	b.n	800cd0e <_dtoa_r+0xb16>
 800cd2c:	9b04      	ldr	r3, [sp, #16]
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	9d00      	ldr	r5, [sp, #0]
 800cd32:	4631      	mov	r1, r6
 800cd34:	4650      	mov	r0, sl
 800cd36:	f7ff f9d5 	bl	800c0e4 <quorem>
 800cd3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd3e:	9b00      	ldr	r3, [sp, #0]
 800cd40:	f805 9b01 	strb.w	r9, [r5], #1
 800cd44:	1aea      	subs	r2, r5, r3
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	dd07      	ble.n	800cd5c <_dtoa_r+0xb64>
 800cd4c:	4651      	mov	r1, sl
 800cd4e:	2300      	movs	r3, #0
 800cd50:	220a      	movs	r2, #10
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 f848 	bl	800dde8 <__multadd>
 800cd58:	4682      	mov	sl, r0
 800cd5a:	e7ea      	b.n	800cd32 <_dtoa_r+0xb3a>
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfc8      	it	gt
 800cd62:	461d      	movgt	r5, r3
 800cd64:	9b00      	ldr	r3, [sp, #0]
 800cd66:	bfd8      	it	le
 800cd68:	2501      	movle	r5, #1
 800cd6a:	441d      	add	r5, r3
 800cd6c:	f04f 0800 	mov.w	r8, #0
 800cd70:	4651      	mov	r1, sl
 800cd72:	2201      	movs	r2, #1
 800cd74:	4620      	mov	r0, r4
 800cd76:	f001 f9e5 	bl	800e144 <__lshift>
 800cd7a:	4631      	mov	r1, r6
 800cd7c:	4682      	mov	sl, r0
 800cd7e:	f001 fa4d 	bl	800e21c <__mcmp>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	dc96      	bgt.n	800ccb4 <_dtoa_r+0xabc>
 800cd86:	d102      	bne.n	800cd8e <_dtoa_r+0xb96>
 800cd88:	f019 0f01 	tst.w	r9, #1
 800cd8c:	d192      	bne.n	800ccb4 <_dtoa_r+0xabc>
 800cd8e:	462b      	mov	r3, r5
 800cd90:	461d      	mov	r5, r3
 800cd92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd96:	2a30      	cmp	r2, #48	; 0x30
 800cd98:	d0fa      	beq.n	800cd90 <_dtoa_r+0xb98>
 800cd9a:	e6dd      	b.n	800cb58 <_dtoa_r+0x960>
 800cd9c:	9a00      	ldr	r2, [sp, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d189      	bne.n	800ccb6 <_dtoa_r+0xabe>
 800cda2:	f10b 0b01 	add.w	fp, fp, #1
 800cda6:	2331      	movs	r3, #49	; 0x31
 800cda8:	e796      	b.n	800ccd8 <_dtoa_r+0xae0>
 800cdaa:	4b0a      	ldr	r3, [pc, #40]	; (800cdd4 <_dtoa_r+0xbdc>)
 800cdac:	f7ff ba99 	b.w	800c2e2 <_dtoa_r+0xea>
 800cdb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f47f aa6d 	bne.w	800c292 <_dtoa_r+0x9a>
 800cdb8:	4b07      	ldr	r3, [pc, #28]	; (800cdd8 <_dtoa_r+0xbe0>)
 800cdba:	f7ff ba92 	b.w	800c2e2 <_dtoa_r+0xea>
 800cdbe:	9b01      	ldr	r3, [sp, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dcb5      	bgt.n	800cd30 <_dtoa_r+0xb38>
 800cdc4:	9b07      	ldr	r3, [sp, #28]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	f73f aeb1 	bgt.w	800cb2e <_dtoa_r+0x936>
 800cdcc:	e7b0      	b.n	800cd30 <_dtoa_r+0xb38>
 800cdce:	bf00      	nop
 800cdd0:	08013b26 	.word	0x08013b26
 800cdd4:	08013b5e 	.word	0x08013b5e
 800cdd8:	08013aaa 	.word	0x08013aaa

0800cddc <_free_r>:
 800cddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdde:	2900      	cmp	r1, #0
 800cde0:	d044      	beq.n	800ce6c <_free_r+0x90>
 800cde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde6:	9001      	str	r0, [sp, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f1a1 0404 	sub.w	r4, r1, #4
 800cdee:	bfb8      	it	lt
 800cdf0:	18e4      	addlt	r4, r4, r3
 800cdf2:	f000 ff8b 	bl	800dd0c <__malloc_lock>
 800cdf6:	4a1e      	ldr	r2, [pc, #120]	; (800ce70 <_free_r+0x94>)
 800cdf8:	9801      	ldr	r0, [sp, #4]
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	b933      	cbnz	r3, 800ce0c <_free_r+0x30>
 800cdfe:	6063      	str	r3, [r4, #4]
 800ce00:	6014      	str	r4, [r2, #0]
 800ce02:	b003      	add	sp, #12
 800ce04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce08:	f000 bf86 	b.w	800dd18 <__malloc_unlock>
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	d908      	bls.n	800ce22 <_free_r+0x46>
 800ce10:	6825      	ldr	r5, [r4, #0]
 800ce12:	1961      	adds	r1, r4, r5
 800ce14:	428b      	cmp	r3, r1
 800ce16:	bf01      	itttt	eq
 800ce18:	6819      	ldreq	r1, [r3, #0]
 800ce1a:	685b      	ldreq	r3, [r3, #4]
 800ce1c:	1949      	addeq	r1, r1, r5
 800ce1e:	6021      	streq	r1, [r4, #0]
 800ce20:	e7ed      	b.n	800cdfe <_free_r+0x22>
 800ce22:	461a      	mov	r2, r3
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	b10b      	cbz	r3, 800ce2c <_free_r+0x50>
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d9fa      	bls.n	800ce22 <_free_r+0x46>
 800ce2c:	6811      	ldr	r1, [r2, #0]
 800ce2e:	1855      	adds	r5, r2, r1
 800ce30:	42a5      	cmp	r5, r4
 800ce32:	d10b      	bne.n	800ce4c <_free_r+0x70>
 800ce34:	6824      	ldr	r4, [r4, #0]
 800ce36:	4421      	add	r1, r4
 800ce38:	1854      	adds	r4, r2, r1
 800ce3a:	42a3      	cmp	r3, r4
 800ce3c:	6011      	str	r1, [r2, #0]
 800ce3e:	d1e0      	bne.n	800ce02 <_free_r+0x26>
 800ce40:	681c      	ldr	r4, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	6053      	str	r3, [r2, #4]
 800ce46:	440c      	add	r4, r1
 800ce48:	6014      	str	r4, [r2, #0]
 800ce4a:	e7da      	b.n	800ce02 <_free_r+0x26>
 800ce4c:	d902      	bls.n	800ce54 <_free_r+0x78>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	e7d6      	b.n	800ce02 <_free_r+0x26>
 800ce54:	6825      	ldr	r5, [r4, #0]
 800ce56:	1961      	adds	r1, r4, r5
 800ce58:	428b      	cmp	r3, r1
 800ce5a:	bf04      	itt	eq
 800ce5c:	6819      	ldreq	r1, [r3, #0]
 800ce5e:	685b      	ldreq	r3, [r3, #4]
 800ce60:	6063      	str	r3, [r4, #4]
 800ce62:	bf04      	itt	eq
 800ce64:	1949      	addeq	r1, r1, r5
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	6054      	str	r4, [r2, #4]
 800ce6a:	e7ca      	b.n	800ce02 <_free_r+0x26>
 800ce6c:	b003      	add	sp, #12
 800ce6e:	bd30      	pop	{r4, r5, pc}
 800ce70:	20009118 	.word	0x20009118

0800ce74 <__ssputs_r>:
 800ce74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce78:	688e      	ldr	r6, [r1, #8]
 800ce7a:	461f      	mov	r7, r3
 800ce7c:	42be      	cmp	r6, r7
 800ce7e:	680b      	ldr	r3, [r1, #0]
 800ce80:	4682      	mov	sl, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	4690      	mov	r8, r2
 800ce86:	d82c      	bhi.n	800cee2 <__ssputs_r+0x6e>
 800ce88:	898a      	ldrh	r2, [r1, #12]
 800ce8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce8e:	d026      	beq.n	800cede <__ssputs_r+0x6a>
 800ce90:	6965      	ldr	r5, [r4, #20]
 800ce92:	6909      	ldr	r1, [r1, #16]
 800ce94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce98:	eba3 0901 	sub.w	r9, r3, r1
 800ce9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cea0:	1c7b      	adds	r3, r7, #1
 800cea2:	444b      	add	r3, r9
 800cea4:	106d      	asrs	r5, r5, #1
 800cea6:	429d      	cmp	r5, r3
 800cea8:	bf38      	it	cc
 800ceaa:	461d      	movcc	r5, r3
 800ceac:	0553      	lsls	r3, r2, #21
 800ceae:	d527      	bpl.n	800cf00 <__ssputs_r+0x8c>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f000 fc75 	bl	800d7a0 <_malloc_r>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	b360      	cbz	r0, 800cf14 <__ssputs_r+0xa0>
 800ceba:	6921      	ldr	r1, [r4, #16]
 800cebc:	464a      	mov	r2, r9
 800cebe:	f001 fd65 	bl	800e98c <memcpy>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cecc:	81a3      	strh	r3, [r4, #12]
 800cece:	6126      	str	r6, [r4, #16]
 800ced0:	6165      	str	r5, [r4, #20]
 800ced2:	444e      	add	r6, r9
 800ced4:	eba5 0509 	sub.w	r5, r5, r9
 800ced8:	6026      	str	r6, [r4, #0]
 800ceda:	60a5      	str	r5, [r4, #8]
 800cedc:	463e      	mov	r6, r7
 800cede:	42be      	cmp	r6, r7
 800cee0:	d900      	bls.n	800cee4 <__ssputs_r+0x70>
 800cee2:	463e      	mov	r6, r7
 800cee4:	6820      	ldr	r0, [r4, #0]
 800cee6:	4632      	mov	r2, r6
 800cee8:	4641      	mov	r1, r8
 800ceea:	f001 fd03 	bl	800e8f4 <memmove>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	1b9b      	subs	r3, r3, r6
 800cef2:	60a3      	str	r3, [r4, #8]
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	4433      	add	r3, r6
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	2000      	movs	r0, #0
 800cefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf00:	462a      	mov	r2, r5
 800cf02:	f001 fad7 	bl	800e4b4 <_realloc_r>
 800cf06:	4606      	mov	r6, r0
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1e0      	bne.n	800cece <__ssputs_r+0x5a>
 800cf0c:	6921      	ldr	r1, [r4, #16]
 800cf0e:	4650      	mov	r0, sl
 800cf10:	f7ff ff64 	bl	800cddc <_free_r>
 800cf14:	230c      	movs	r3, #12
 800cf16:	f8ca 3000 	str.w	r3, [sl]
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf20:	81a3      	strh	r3, [r4, #12]
 800cf22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf26:	e7e9      	b.n	800cefc <__ssputs_r+0x88>

0800cf28 <_svfiprintf_r>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	4698      	mov	r8, r3
 800cf2e:	898b      	ldrh	r3, [r1, #12]
 800cf30:	061b      	lsls	r3, r3, #24
 800cf32:	b09d      	sub	sp, #116	; 0x74
 800cf34:	4607      	mov	r7, r0
 800cf36:	460d      	mov	r5, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	d50e      	bpl.n	800cf5a <_svfiprintf_r+0x32>
 800cf3c:	690b      	ldr	r3, [r1, #16]
 800cf3e:	b963      	cbnz	r3, 800cf5a <_svfiprintf_r+0x32>
 800cf40:	2140      	movs	r1, #64	; 0x40
 800cf42:	f000 fc2d 	bl	800d7a0 <_malloc_r>
 800cf46:	6028      	str	r0, [r5, #0]
 800cf48:	6128      	str	r0, [r5, #16]
 800cf4a:	b920      	cbnz	r0, 800cf56 <_svfiprintf_r+0x2e>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf54:	e0d0      	b.n	800d0f8 <_svfiprintf_r+0x1d0>
 800cf56:	2340      	movs	r3, #64	; 0x40
 800cf58:	616b      	str	r3, [r5, #20]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5e:	2320      	movs	r3, #32
 800cf60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf64:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf68:	2330      	movs	r3, #48	; 0x30
 800cf6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d110 <_svfiprintf_r+0x1e8>
 800cf6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf72:	f04f 0901 	mov.w	r9, #1
 800cf76:	4623      	mov	r3, r4
 800cf78:	469a      	mov	sl, r3
 800cf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf7e:	b10a      	cbz	r2, 800cf84 <_svfiprintf_r+0x5c>
 800cf80:	2a25      	cmp	r2, #37	; 0x25
 800cf82:	d1f9      	bne.n	800cf78 <_svfiprintf_r+0x50>
 800cf84:	ebba 0b04 	subs.w	fp, sl, r4
 800cf88:	d00b      	beq.n	800cfa2 <_svfiprintf_r+0x7a>
 800cf8a:	465b      	mov	r3, fp
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff ff6f 	bl	800ce74 <__ssputs_r>
 800cf96:	3001      	adds	r0, #1
 800cf98:	f000 80a9 	beq.w	800d0ee <_svfiprintf_r+0x1c6>
 800cf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf9e:	445a      	add	r2, fp
 800cfa0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80a1 	beq.w	800d0ee <_svfiprintf_r+0x1c6>
 800cfac:	2300      	movs	r3, #0
 800cfae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfb6:	f10a 0a01 	add.w	sl, sl, #1
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	9307      	str	r3, [sp, #28]
 800cfbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc2:	931a      	str	r3, [sp, #104]	; 0x68
 800cfc4:	4654      	mov	r4, sl
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfcc:	4850      	ldr	r0, [pc, #320]	; (800d110 <_svfiprintf_r+0x1e8>)
 800cfce:	f7f3 f91f 	bl	8000210 <memchr>
 800cfd2:	9a04      	ldr	r2, [sp, #16]
 800cfd4:	b9d8      	cbnz	r0, 800d00e <_svfiprintf_r+0xe6>
 800cfd6:	06d0      	lsls	r0, r2, #27
 800cfd8:	bf44      	itt	mi
 800cfda:	2320      	movmi	r3, #32
 800cfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe0:	0711      	lsls	r1, r2, #28
 800cfe2:	bf44      	itt	mi
 800cfe4:	232b      	movmi	r3, #43	; 0x2b
 800cfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfea:	f89a 3000 	ldrb.w	r3, [sl]
 800cfee:	2b2a      	cmp	r3, #42	; 0x2a
 800cff0:	d015      	beq.n	800d01e <_svfiprintf_r+0xf6>
 800cff2:	9a07      	ldr	r2, [sp, #28]
 800cff4:	4654      	mov	r4, sl
 800cff6:	2000      	movs	r0, #0
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4621      	mov	r1, r4
 800cffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d002:	3b30      	subs	r3, #48	; 0x30
 800d004:	2b09      	cmp	r3, #9
 800d006:	d94d      	bls.n	800d0a4 <_svfiprintf_r+0x17c>
 800d008:	b1b0      	cbz	r0, 800d038 <_svfiprintf_r+0x110>
 800d00a:	9207      	str	r2, [sp, #28]
 800d00c:	e014      	b.n	800d038 <_svfiprintf_r+0x110>
 800d00e:	eba0 0308 	sub.w	r3, r0, r8
 800d012:	fa09 f303 	lsl.w	r3, r9, r3
 800d016:	4313      	orrs	r3, r2
 800d018:	9304      	str	r3, [sp, #16]
 800d01a:	46a2      	mov	sl, r4
 800d01c:	e7d2      	b.n	800cfc4 <_svfiprintf_r+0x9c>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	1d19      	adds	r1, r3, #4
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	9103      	str	r1, [sp, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfbb      	ittet	lt
 800d02a:	425b      	neglt	r3, r3
 800d02c:	f042 0202 	orrlt.w	r2, r2, #2
 800d030:	9307      	strge	r3, [sp, #28]
 800d032:	9307      	strlt	r3, [sp, #28]
 800d034:	bfb8      	it	lt
 800d036:	9204      	strlt	r2, [sp, #16]
 800d038:	7823      	ldrb	r3, [r4, #0]
 800d03a:	2b2e      	cmp	r3, #46	; 0x2e
 800d03c:	d10c      	bne.n	800d058 <_svfiprintf_r+0x130>
 800d03e:	7863      	ldrb	r3, [r4, #1]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d134      	bne.n	800d0ae <_svfiprintf_r+0x186>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	1d1a      	adds	r2, r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	9203      	str	r2, [sp, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfb8      	it	lt
 800d050:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d054:	3402      	adds	r4, #2
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d120 <_svfiprintf_r+0x1f8>
 800d05c:	7821      	ldrb	r1, [r4, #0]
 800d05e:	2203      	movs	r2, #3
 800d060:	4650      	mov	r0, sl
 800d062:	f7f3 f8d5 	bl	8000210 <memchr>
 800d066:	b138      	cbz	r0, 800d078 <_svfiprintf_r+0x150>
 800d068:	9b04      	ldr	r3, [sp, #16]
 800d06a:	eba0 000a 	sub.w	r0, r0, sl
 800d06e:	2240      	movs	r2, #64	; 0x40
 800d070:	4082      	lsls	r2, r0
 800d072:	4313      	orrs	r3, r2
 800d074:	3401      	adds	r4, #1
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	4825      	ldr	r0, [pc, #148]	; (800d114 <_svfiprintf_r+0x1ec>)
 800d07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d082:	2206      	movs	r2, #6
 800d084:	f7f3 f8c4 	bl	8000210 <memchr>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d038      	beq.n	800d0fe <_svfiprintf_r+0x1d6>
 800d08c:	4b22      	ldr	r3, [pc, #136]	; (800d118 <_svfiprintf_r+0x1f0>)
 800d08e:	bb1b      	cbnz	r3, 800d0d8 <_svfiprintf_r+0x1b0>
 800d090:	9b03      	ldr	r3, [sp, #12]
 800d092:	3307      	adds	r3, #7
 800d094:	f023 0307 	bic.w	r3, r3, #7
 800d098:	3308      	adds	r3, #8
 800d09a:	9303      	str	r3, [sp, #12]
 800d09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09e:	4433      	add	r3, r6
 800d0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0a2:	e768      	b.n	800cf76 <_svfiprintf_r+0x4e>
 800d0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	2001      	movs	r0, #1
 800d0ac:	e7a6      	b.n	800cffc <_svfiprintf_r+0xd4>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	f04f 0c0a 	mov.w	ip, #10
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c0:	3a30      	subs	r2, #48	; 0x30
 800d0c2:	2a09      	cmp	r2, #9
 800d0c4:	d903      	bls.n	800d0ce <_svfiprintf_r+0x1a6>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0c6      	beq.n	800d058 <_svfiprintf_r+0x130>
 800d0ca:	9105      	str	r1, [sp, #20]
 800d0cc:	e7c4      	b.n	800d058 <_svfiprintf_r+0x130>
 800d0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e7f0      	b.n	800d0ba <_svfiprintf_r+0x192>
 800d0d8:	ab03      	add	r3, sp, #12
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	462a      	mov	r2, r5
 800d0de:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d0e0:	a904      	add	r1, sp, #16
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	f7fe f9c6 	bl	800b474 <_printf_float>
 800d0e8:	1c42      	adds	r2, r0, #1
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	d1d6      	bne.n	800d09c <_svfiprintf_r+0x174>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	065b      	lsls	r3, r3, #25
 800d0f2:	f53f af2d 	bmi.w	800cf50 <_svfiprintf_r+0x28>
 800d0f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0f8:	b01d      	add	sp, #116	; 0x74
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	ab03      	add	r3, sp, #12
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	462a      	mov	r2, r5
 800d104:	4b05      	ldr	r3, [pc, #20]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d106:	a904      	add	r1, sp, #16
 800d108:	4638      	mov	r0, r7
 800d10a:	f7fe fc57 	bl	800b9bc <_printf_i>
 800d10e:	e7eb      	b.n	800d0e8 <_svfiprintf_r+0x1c0>
 800d110:	08013b37 	.word	0x08013b37
 800d114:	08013b41 	.word	0x08013b41
 800d118:	0800b475 	.word	0x0800b475
 800d11c:	0800ce75 	.word	0x0800ce75
 800d120:	08013b3d 	.word	0x08013b3d

0800d124 <_sungetc_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	1c4b      	adds	r3, r1, #1
 800d128:	4614      	mov	r4, r2
 800d12a:	d103      	bne.n	800d134 <_sungetc_r+0x10>
 800d12c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d130:	4628      	mov	r0, r5
 800d132:	bd38      	pop	{r3, r4, r5, pc}
 800d134:	8993      	ldrh	r3, [r2, #12]
 800d136:	f023 0320 	bic.w	r3, r3, #32
 800d13a:	8193      	strh	r3, [r2, #12]
 800d13c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d13e:	6852      	ldr	r2, [r2, #4]
 800d140:	b2cd      	uxtb	r5, r1
 800d142:	b18b      	cbz	r3, 800d168 <_sungetc_r+0x44>
 800d144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d146:	4293      	cmp	r3, r2
 800d148:	dd08      	ble.n	800d15c <_sungetc_r+0x38>
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	1e5a      	subs	r2, r3, #1
 800d14e:	6022      	str	r2, [r4, #0]
 800d150:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	3301      	adds	r3, #1
 800d158:	6063      	str	r3, [r4, #4]
 800d15a:	e7e9      	b.n	800d130 <_sungetc_r+0xc>
 800d15c:	4621      	mov	r1, r4
 800d15e:	f001 f96f 	bl	800e440 <__submore>
 800d162:	2800      	cmp	r0, #0
 800d164:	d0f1      	beq.n	800d14a <_sungetc_r+0x26>
 800d166:	e7e1      	b.n	800d12c <_sungetc_r+0x8>
 800d168:	6921      	ldr	r1, [r4, #16]
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	b151      	cbz	r1, 800d184 <_sungetc_r+0x60>
 800d16e:	4299      	cmp	r1, r3
 800d170:	d208      	bcs.n	800d184 <_sungetc_r+0x60>
 800d172:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d176:	42a9      	cmp	r1, r5
 800d178:	d104      	bne.n	800d184 <_sungetc_r+0x60>
 800d17a:	3b01      	subs	r3, #1
 800d17c:	3201      	adds	r2, #1
 800d17e:	6023      	str	r3, [r4, #0]
 800d180:	6062      	str	r2, [r4, #4]
 800d182:	e7d5      	b.n	800d130 <_sungetc_r+0xc>
 800d184:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d18c:	6363      	str	r3, [r4, #52]	; 0x34
 800d18e:	2303      	movs	r3, #3
 800d190:	63a3      	str	r3, [r4, #56]	; 0x38
 800d192:	4623      	mov	r3, r4
 800d194:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	2301      	movs	r3, #1
 800d19c:	e7dc      	b.n	800d158 <_sungetc_r+0x34>

0800d19e <__ssrefill_r>:
 800d19e:	b510      	push	{r4, lr}
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d1a4:	b169      	cbz	r1, 800d1c2 <__ssrefill_r+0x24>
 800d1a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1aa:	4299      	cmp	r1, r3
 800d1ac:	d001      	beq.n	800d1b2 <__ssrefill_r+0x14>
 800d1ae:	f7ff fe15 	bl	800cddc <_free_r>
 800d1b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1ba:	b113      	cbz	r3, 800d1c2 <__ssrefill_r+0x24>
 800d1bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d1be:	6023      	str	r3, [r4, #0]
 800d1c0:	bd10      	pop	{r4, pc}
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	89a3      	ldrh	r3, [r4, #12]
 800d1cc:	f043 0320 	orr.w	r3, r3, #32
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1d6:	e7f3      	b.n	800d1c0 <__ssrefill_r+0x22>

0800d1d8 <__ssvfiscanf_r>:
 800d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1dc:	460c      	mov	r4, r1
 800d1de:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d1e8:	49a6      	ldr	r1, [pc, #664]	; (800d484 <__ssvfiscanf_r+0x2ac>)
 800d1ea:	91a0      	str	r1, [sp, #640]	; 0x280
 800d1ec:	f10d 0804 	add.w	r8, sp, #4
 800d1f0:	49a5      	ldr	r1, [pc, #660]	; (800d488 <__ssvfiscanf_r+0x2b0>)
 800d1f2:	4fa6      	ldr	r7, [pc, #664]	; (800d48c <__ssvfiscanf_r+0x2b4>)
 800d1f4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d490 <__ssvfiscanf_r+0x2b8>
 800d1f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	91a1      	str	r1, [sp, #644]	; 0x284
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	7813      	ldrb	r3, [r2, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 815a 	beq.w	800d4be <__ssvfiscanf_r+0x2e6>
 800d20a:	5cf9      	ldrb	r1, [r7, r3]
 800d20c:	f011 0108 	ands.w	r1, r1, #8
 800d210:	f102 0501 	add.w	r5, r2, #1
 800d214:	d019      	beq.n	800d24a <__ssvfiscanf_r+0x72>
 800d216:	6863      	ldr	r3, [r4, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dd0f      	ble.n	800d23c <__ssvfiscanf_r+0x64>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	781a      	ldrb	r2, [r3, #0]
 800d220:	5cba      	ldrb	r2, [r7, r2]
 800d222:	0712      	lsls	r2, r2, #28
 800d224:	d401      	bmi.n	800d22a <__ssvfiscanf_r+0x52>
 800d226:	462a      	mov	r2, r5
 800d228:	e7eb      	b.n	800d202 <__ssvfiscanf_r+0x2a>
 800d22a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d22c:	3201      	adds	r2, #1
 800d22e:	9245      	str	r2, [sp, #276]	; 0x114
 800d230:	6862      	ldr	r2, [r4, #4]
 800d232:	3301      	adds	r3, #1
 800d234:	3a01      	subs	r2, #1
 800d236:	6062      	str	r2, [r4, #4]
 800d238:	6023      	str	r3, [r4, #0]
 800d23a:	e7ec      	b.n	800d216 <__ssvfiscanf_r+0x3e>
 800d23c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d23e:	4621      	mov	r1, r4
 800d240:	4630      	mov	r0, r6
 800d242:	4798      	blx	r3
 800d244:	2800      	cmp	r0, #0
 800d246:	d0e9      	beq.n	800d21c <__ssvfiscanf_r+0x44>
 800d248:	e7ed      	b.n	800d226 <__ssvfiscanf_r+0x4e>
 800d24a:	2b25      	cmp	r3, #37	; 0x25
 800d24c:	d012      	beq.n	800d274 <__ssvfiscanf_r+0x9c>
 800d24e:	469a      	mov	sl, r3
 800d250:	6863      	ldr	r3, [r4, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f340 8091 	ble.w	800d37a <__ssvfiscanf_r+0x1a2>
 800d258:	6822      	ldr	r2, [r4, #0]
 800d25a:	7813      	ldrb	r3, [r2, #0]
 800d25c:	4553      	cmp	r3, sl
 800d25e:	f040 812e 	bne.w	800d4be <__ssvfiscanf_r+0x2e6>
 800d262:	6863      	ldr	r3, [r4, #4]
 800d264:	3b01      	subs	r3, #1
 800d266:	6063      	str	r3, [r4, #4]
 800d268:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d26a:	3201      	adds	r2, #1
 800d26c:	3301      	adds	r3, #1
 800d26e:	6022      	str	r2, [r4, #0]
 800d270:	9345      	str	r3, [sp, #276]	; 0x114
 800d272:	e7d8      	b.n	800d226 <__ssvfiscanf_r+0x4e>
 800d274:	9141      	str	r1, [sp, #260]	; 0x104
 800d276:	9143      	str	r1, [sp, #268]	; 0x10c
 800d278:	7853      	ldrb	r3, [r2, #1]
 800d27a:	2b2a      	cmp	r3, #42	; 0x2a
 800d27c:	bf02      	ittt	eq
 800d27e:	2310      	moveq	r3, #16
 800d280:	1c95      	addeq	r5, r2, #2
 800d282:	9341      	streq	r3, [sp, #260]	; 0x104
 800d284:	220a      	movs	r2, #10
 800d286:	46aa      	mov	sl, r5
 800d288:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d28c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d290:	2b09      	cmp	r3, #9
 800d292:	d91c      	bls.n	800d2ce <__ssvfiscanf_r+0xf6>
 800d294:	487e      	ldr	r0, [pc, #504]	; (800d490 <__ssvfiscanf_r+0x2b8>)
 800d296:	2203      	movs	r2, #3
 800d298:	f7f2 ffba 	bl	8000210 <memchr>
 800d29c:	b138      	cbz	r0, 800d2ae <__ssvfiscanf_r+0xd6>
 800d29e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d2a0:	eba0 0009 	sub.w	r0, r0, r9
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	4083      	lsls	r3, r0
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	9341      	str	r3, [sp, #260]	; 0x104
 800d2ac:	4655      	mov	r5, sl
 800d2ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2b2:	2b78      	cmp	r3, #120	; 0x78
 800d2b4:	d806      	bhi.n	800d2c4 <__ssvfiscanf_r+0xec>
 800d2b6:	2b57      	cmp	r3, #87	; 0x57
 800d2b8:	d810      	bhi.n	800d2dc <__ssvfiscanf_r+0x104>
 800d2ba:	2b25      	cmp	r3, #37	; 0x25
 800d2bc:	d0c7      	beq.n	800d24e <__ssvfiscanf_r+0x76>
 800d2be:	d857      	bhi.n	800d370 <__ssvfiscanf_r+0x198>
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d065      	beq.n	800d390 <__ssvfiscanf_r+0x1b8>
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800d2c8:	230a      	movs	r3, #10
 800d2ca:	9342      	str	r3, [sp, #264]	; 0x108
 800d2cc:	e076      	b.n	800d3bc <__ssvfiscanf_r+0x1e4>
 800d2ce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d2d0:	fb02 1103 	mla	r1, r2, r3, r1
 800d2d4:	3930      	subs	r1, #48	; 0x30
 800d2d6:	9143      	str	r1, [sp, #268]	; 0x10c
 800d2d8:	4655      	mov	r5, sl
 800d2da:	e7d4      	b.n	800d286 <__ssvfiscanf_r+0xae>
 800d2dc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d2e0:	2a20      	cmp	r2, #32
 800d2e2:	d8ef      	bhi.n	800d2c4 <__ssvfiscanf_r+0xec>
 800d2e4:	a101      	add	r1, pc, #4	; (adr r1, 800d2ec <__ssvfiscanf_r+0x114>)
 800d2e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d2ea:	bf00      	nop
 800d2ec:	0800d39f 	.word	0x0800d39f
 800d2f0:	0800d2c5 	.word	0x0800d2c5
 800d2f4:	0800d2c5 	.word	0x0800d2c5
 800d2f8:	0800d3fd 	.word	0x0800d3fd
 800d2fc:	0800d2c5 	.word	0x0800d2c5
 800d300:	0800d2c5 	.word	0x0800d2c5
 800d304:	0800d2c5 	.word	0x0800d2c5
 800d308:	0800d2c5 	.word	0x0800d2c5
 800d30c:	0800d2c5 	.word	0x0800d2c5
 800d310:	0800d2c5 	.word	0x0800d2c5
 800d314:	0800d2c5 	.word	0x0800d2c5
 800d318:	0800d413 	.word	0x0800d413
 800d31c:	0800d3f9 	.word	0x0800d3f9
 800d320:	0800d377 	.word	0x0800d377
 800d324:	0800d377 	.word	0x0800d377
 800d328:	0800d377 	.word	0x0800d377
 800d32c:	0800d2c5 	.word	0x0800d2c5
 800d330:	0800d3b5 	.word	0x0800d3b5
 800d334:	0800d2c5 	.word	0x0800d2c5
 800d338:	0800d2c5 	.word	0x0800d2c5
 800d33c:	0800d2c5 	.word	0x0800d2c5
 800d340:	0800d2c5 	.word	0x0800d2c5
 800d344:	0800d423 	.word	0x0800d423
 800d348:	0800d3f1 	.word	0x0800d3f1
 800d34c:	0800d397 	.word	0x0800d397
 800d350:	0800d2c5 	.word	0x0800d2c5
 800d354:	0800d2c5 	.word	0x0800d2c5
 800d358:	0800d41f 	.word	0x0800d41f
 800d35c:	0800d2c5 	.word	0x0800d2c5
 800d360:	0800d3f9 	.word	0x0800d3f9
 800d364:	0800d2c5 	.word	0x0800d2c5
 800d368:	0800d2c5 	.word	0x0800d2c5
 800d36c:	0800d39f 	.word	0x0800d39f
 800d370:	3b45      	subs	r3, #69	; 0x45
 800d372:	2b02      	cmp	r3, #2
 800d374:	d8a6      	bhi.n	800d2c4 <__ssvfiscanf_r+0xec>
 800d376:	2305      	movs	r3, #5
 800d378:	e01f      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d37a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d37c:	4621      	mov	r1, r4
 800d37e:	4630      	mov	r0, r6
 800d380:	4798      	blx	r3
 800d382:	2800      	cmp	r0, #0
 800d384:	f43f af68 	beq.w	800d258 <__ssvfiscanf_r+0x80>
 800d388:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d38a:	2800      	cmp	r0, #0
 800d38c:	f040 808d 	bne.w	800d4aa <__ssvfiscanf_r+0x2d2>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d394:	e08f      	b.n	800d4b6 <__ssvfiscanf_r+0x2de>
 800d396:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d398:	f042 0220 	orr.w	r2, r2, #32
 800d39c:	9241      	str	r2, [sp, #260]	; 0x104
 800d39e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d3a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a4:	9241      	str	r2, [sp, #260]	; 0x104
 800d3a6:	2210      	movs	r2, #16
 800d3a8:	2b6f      	cmp	r3, #111	; 0x6f
 800d3aa:	9242      	str	r2, [sp, #264]	; 0x108
 800d3ac:	bf34      	ite	cc
 800d3ae:	2303      	movcc	r3, #3
 800d3b0:	2304      	movcs	r3, #4
 800d3b2:	e002      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9342      	str	r3, [sp, #264]	; 0x108
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	9347      	str	r3, [sp, #284]	; 0x11c
 800d3bc:	6863      	ldr	r3, [r4, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	dd3d      	ble.n	800d43e <__ssvfiscanf_r+0x266>
 800d3c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d3c4:	0659      	lsls	r1, r3, #25
 800d3c6:	d404      	bmi.n	800d3d2 <__ssvfiscanf_r+0x1fa>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	781a      	ldrb	r2, [r3, #0]
 800d3cc:	5cba      	ldrb	r2, [r7, r2]
 800d3ce:	0712      	lsls	r2, r2, #28
 800d3d0:	d43c      	bmi.n	800d44c <__ssvfiscanf_r+0x274>
 800d3d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	dc4b      	bgt.n	800d470 <__ssvfiscanf_r+0x298>
 800d3d8:	466b      	mov	r3, sp
 800d3da:	4622      	mov	r2, r4
 800d3dc:	a941      	add	r1, sp, #260	; 0x104
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f000 fa5e 	bl	800d8a0 <_scanf_chars>
 800d3e4:	2801      	cmp	r0, #1
 800d3e6:	d06a      	beq.n	800d4be <__ssvfiscanf_r+0x2e6>
 800d3e8:	2802      	cmp	r0, #2
 800d3ea:	f47f af1c 	bne.w	800d226 <__ssvfiscanf_r+0x4e>
 800d3ee:	e7cb      	b.n	800d388 <__ssvfiscanf_r+0x1b0>
 800d3f0:	2308      	movs	r3, #8
 800d3f2:	9342      	str	r3, [sp, #264]	; 0x108
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	e7e0      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	e7d5      	b.n	800d3a8 <__ssvfiscanf_r+0x1d0>
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	4640      	mov	r0, r8
 800d400:	f000 fb9c 	bl	800db3c <__sccl>
 800d404:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40a:	9341      	str	r3, [sp, #260]	; 0x104
 800d40c:	4605      	mov	r5, r0
 800d40e:	2301      	movs	r3, #1
 800d410:	e7d3      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d412:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d418:	9341      	str	r3, [sp, #260]	; 0x104
 800d41a:	2300      	movs	r3, #0
 800d41c:	e7cd      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d41e:	2302      	movs	r3, #2
 800d420:	e7cb      	b.n	800d3ba <__ssvfiscanf_r+0x1e2>
 800d422:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d424:	06c3      	lsls	r3, r0, #27
 800d426:	f53f aefe 	bmi.w	800d226 <__ssvfiscanf_r+0x4e>
 800d42a:	9b00      	ldr	r3, [sp, #0]
 800d42c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d42e:	1d19      	adds	r1, r3, #4
 800d430:	9100      	str	r1, [sp, #0]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	07c0      	lsls	r0, r0, #31
 800d436:	bf4c      	ite	mi
 800d438:	801a      	strhmi	r2, [r3, #0]
 800d43a:	601a      	strpl	r2, [r3, #0]
 800d43c:	e6f3      	b.n	800d226 <__ssvfiscanf_r+0x4e>
 800d43e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d440:	4621      	mov	r1, r4
 800d442:	4630      	mov	r0, r6
 800d444:	4798      	blx	r3
 800d446:	2800      	cmp	r0, #0
 800d448:	d0bb      	beq.n	800d3c2 <__ssvfiscanf_r+0x1ea>
 800d44a:	e79d      	b.n	800d388 <__ssvfiscanf_r+0x1b0>
 800d44c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d44e:	3201      	adds	r2, #1
 800d450:	9245      	str	r2, [sp, #276]	; 0x114
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	3a01      	subs	r2, #1
 800d456:	2a00      	cmp	r2, #0
 800d458:	6062      	str	r2, [r4, #4]
 800d45a:	dd02      	ble.n	800d462 <__ssvfiscanf_r+0x28a>
 800d45c:	3301      	adds	r3, #1
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	e7b2      	b.n	800d3c8 <__ssvfiscanf_r+0x1f0>
 800d462:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d464:	4621      	mov	r1, r4
 800d466:	4630      	mov	r0, r6
 800d468:	4798      	blx	r3
 800d46a:	2800      	cmp	r0, #0
 800d46c:	d0ac      	beq.n	800d3c8 <__ssvfiscanf_r+0x1f0>
 800d46e:	e78b      	b.n	800d388 <__ssvfiscanf_r+0x1b0>
 800d470:	2b04      	cmp	r3, #4
 800d472:	dc0f      	bgt.n	800d494 <__ssvfiscanf_r+0x2bc>
 800d474:	466b      	mov	r3, sp
 800d476:	4622      	mov	r2, r4
 800d478:	a941      	add	r1, sp, #260	; 0x104
 800d47a:	4630      	mov	r0, r6
 800d47c:	f000 fa6a 	bl	800d954 <_scanf_i>
 800d480:	e7b0      	b.n	800d3e4 <__ssvfiscanf_r+0x20c>
 800d482:	bf00      	nop
 800d484:	0800d125 	.word	0x0800d125
 800d488:	0800d19f 	.word	0x0800d19f
 800d48c:	08013cc7 	.word	0x08013cc7
 800d490:	08013b3d 	.word	0x08013b3d
 800d494:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <__ssvfiscanf_r+0x2ec>)
 800d496:	2b00      	cmp	r3, #0
 800d498:	f43f aec5 	beq.w	800d226 <__ssvfiscanf_r+0x4e>
 800d49c:	466b      	mov	r3, sp
 800d49e:	4622      	mov	r2, r4
 800d4a0:	a941      	add	r1, sp, #260	; 0x104
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f3af 8000 	nop.w
 800d4a8:	e79c      	b.n	800d3e4 <__ssvfiscanf_r+0x20c>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d4b0:	bf18      	it	ne
 800d4b2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d4b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4be:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d4c0:	e7f9      	b.n	800d4b6 <__ssvfiscanf_r+0x2de>
 800d4c2:	bf00      	nop
 800d4c4:	00000000 	.word	0x00000000

0800d4c8 <__sfputc_r>:
 800d4c8:	6893      	ldr	r3, [r2, #8]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	b410      	push	{r4}
 800d4d0:	6093      	str	r3, [r2, #8]
 800d4d2:	da08      	bge.n	800d4e6 <__sfputc_r+0x1e>
 800d4d4:	6994      	ldr	r4, [r2, #24]
 800d4d6:	42a3      	cmp	r3, r4
 800d4d8:	db01      	blt.n	800d4de <__sfputc_r+0x16>
 800d4da:	290a      	cmp	r1, #10
 800d4dc:	d103      	bne.n	800d4e6 <__sfputc_r+0x1e>
 800d4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4e2:	f001 b90f 	b.w	800e704 <__swbuf_r>
 800d4e6:	6813      	ldr	r3, [r2, #0]
 800d4e8:	1c58      	adds	r0, r3, #1
 800d4ea:	6010      	str	r0, [r2, #0]
 800d4ec:	7019      	strb	r1, [r3, #0]
 800d4ee:	4608      	mov	r0, r1
 800d4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <__sfputs_r>:
 800d4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	460f      	mov	r7, r1
 800d4fc:	4614      	mov	r4, r2
 800d4fe:	18d5      	adds	r5, r2, r3
 800d500:	42ac      	cmp	r4, r5
 800d502:	d101      	bne.n	800d508 <__sfputs_r+0x12>
 800d504:	2000      	movs	r0, #0
 800d506:	e007      	b.n	800d518 <__sfputs_r+0x22>
 800d508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d50c:	463a      	mov	r2, r7
 800d50e:	4630      	mov	r0, r6
 800d510:	f7ff ffda 	bl	800d4c8 <__sfputc_r>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d1f3      	bne.n	800d500 <__sfputs_r+0xa>
 800d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d51c <_vfiprintf_r>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	460d      	mov	r5, r1
 800d522:	b09d      	sub	sp, #116	; 0x74
 800d524:	4614      	mov	r4, r2
 800d526:	4698      	mov	r8, r3
 800d528:	4606      	mov	r6, r0
 800d52a:	b118      	cbz	r0, 800d534 <_vfiprintf_r+0x18>
 800d52c:	6a03      	ldr	r3, [r0, #32]
 800d52e:	b90b      	cbnz	r3, 800d534 <_vfiprintf_r+0x18>
 800d530:	f7fe fcb8 	bl	800bea4 <__sinit>
 800d534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d536:	07d9      	lsls	r1, r3, #31
 800d538:	d405      	bmi.n	800d546 <_vfiprintf_r+0x2a>
 800d53a:	89ab      	ldrh	r3, [r5, #12]
 800d53c:	059a      	lsls	r2, r3, #22
 800d53e:	d402      	bmi.n	800d546 <_vfiprintf_r+0x2a>
 800d540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d542:	f7fe fdae 	bl	800c0a2 <__retarget_lock_acquire_recursive>
 800d546:	89ab      	ldrh	r3, [r5, #12]
 800d548:	071b      	lsls	r3, r3, #28
 800d54a:	d501      	bpl.n	800d550 <_vfiprintf_r+0x34>
 800d54c:	692b      	ldr	r3, [r5, #16]
 800d54e:	b99b      	cbnz	r3, 800d578 <_vfiprintf_r+0x5c>
 800d550:	4629      	mov	r1, r5
 800d552:	4630      	mov	r0, r6
 800d554:	f001 f914 	bl	800e780 <__swsetup_r>
 800d558:	b170      	cbz	r0, 800d578 <_vfiprintf_r+0x5c>
 800d55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d55c:	07dc      	lsls	r4, r3, #31
 800d55e:	d504      	bpl.n	800d56a <_vfiprintf_r+0x4e>
 800d560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d564:	b01d      	add	sp, #116	; 0x74
 800d566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56a:	89ab      	ldrh	r3, [r5, #12]
 800d56c:	0598      	lsls	r0, r3, #22
 800d56e:	d4f7      	bmi.n	800d560 <_vfiprintf_r+0x44>
 800d570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d572:	f7fe fd97 	bl	800c0a4 <__retarget_lock_release_recursive>
 800d576:	e7f3      	b.n	800d560 <_vfiprintf_r+0x44>
 800d578:	2300      	movs	r3, #0
 800d57a:	9309      	str	r3, [sp, #36]	; 0x24
 800d57c:	2320      	movs	r3, #32
 800d57e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d582:	f8cd 800c 	str.w	r8, [sp, #12]
 800d586:	2330      	movs	r3, #48	; 0x30
 800d588:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d73c <_vfiprintf_r+0x220>
 800d58c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d590:	f04f 0901 	mov.w	r9, #1
 800d594:	4623      	mov	r3, r4
 800d596:	469a      	mov	sl, r3
 800d598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d59c:	b10a      	cbz	r2, 800d5a2 <_vfiprintf_r+0x86>
 800d59e:	2a25      	cmp	r2, #37	; 0x25
 800d5a0:	d1f9      	bne.n	800d596 <_vfiprintf_r+0x7a>
 800d5a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d5a6:	d00b      	beq.n	800d5c0 <_vfiprintf_r+0xa4>
 800d5a8:	465b      	mov	r3, fp
 800d5aa:	4622      	mov	r2, r4
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7ff ffa1 	bl	800d4f6 <__sfputs_r>
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	f000 80a9 	beq.w	800d70c <_vfiprintf_r+0x1f0>
 800d5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5bc:	445a      	add	r2, fp
 800d5be:	9209      	str	r2, [sp, #36]	; 0x24
 800d5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f000 80a1 	beq.w	800d70c <_vfiprintf_r+0x1f0>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d4:	f10a 0a01 	add.w	sl, sl, #1
 800d5d8:	9304      	str	r3, [sp, #16]
 800d5da:	9307      	str	r3, [sp, #28]
 800d5dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d5e2:	4654      	mov	r4, sl
 800d5e4:	2205      	movs	r2, #5
 800d5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ea:	4854      	ldr	r0, [pc, #336]	; (800d73c <_vfiprintf_r+0x220>)
 800d5ec:	f7f2 fe10 	bl	8000210 <memchr>
 800d5f0:	9a04      	ldr	r2, [sp, #16]
 800d5f2:	b9d8      	cbnz	r0, 800d62c <_vfiprintf_r+0x110>
 800d5f4:	06d1      	lsls	r1, r2, #27
 800d5f6:	bf44      	itt	mi
 800d5f8:	2320      	movmi	r3, #32
 800d5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5fe:	0713      	lsls	r3, r2, #28
 800d600:	bf44      	itt	mi
 800d602:	232b      	movmi	r3, #43	; 0x2b
 800d604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d608:	f89a 3000 	ldrb.w	r3, [sl]
 800d60c:	2b2a      	cmp	r3, #42	; 0x2a
 800d60e:	d015      	beq.n	800d63c <_vfiprintf_r+0x120>
 800d610:	9a07      	ldr	r2, [sp, #28]
 800d612:	4654      	mov	r4, sl
 800d614:	2000      	movs	r0, #0
 800d616:	f04f 0c0a 	mov.w	ip, #10
 800d61a:	4621      	mov	r1, r4
 800d61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d620:	3b30      	subs	r3, #48	; 0x30
 800d622:	2b09      	cmp	r3, #9
 800d624:	d94d      	bls.n	800d6c2 <_vfiprintf_r+0x1a6>
 800d626:	b1b0      	cbz	r0, 800d656 <_vfiprintf_r+0x13a>
 800d628:	9207      	str	r2, [sp, #28]
 800d62a:	e014      	b.n	800d656 <_vfiprintf_r+0x13a>
 800d62c:	eba0 0308 	sub.w	r3, r0, r8
 800d630:	fa09 f303 	lsl.w	r3, r9, r3
 800d634:	4313      	orrs	r3, r2
 800d636:	9304      	str	r3, [sp, #16]
 800d638:	46a2      	mov	sl, r4
 800d63a:	e7d2      	b.n	800d5e2 <_vfiprintf_r+0xc6>
 800d63c:	9b03      	ldr	r3, [sp, #12]
 800d63e:	1d19      	adds	r1, r3, #4
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	9103      	str	r1, [sp, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	bfbb      	ittet	lt
 800d648:	425b      	neglt	r3, r3
 800d64a:	f042 0202 	orrlt.w	r2, r2, #2
 800d64e:	9307      	strge	r3, [sp, #28]
 800d650:	9307      	strlt	r3, [sp, #28]
 800d652:	bfb8      	it	lt
 800d654:	9204      	strlt	r2, [sp, #16]
 800d656:	7823      	ldrb	r3, [r4, #0]
 800d658:	2b2e      	cmp	r3, #46	; 0x2e
 800d65a:	d10c      	bne.n	800d676 <_vfiprintf_r+0x15a>
 800d65c:	7863      	ldrb	r3, [r4, #1]
 800d65e:	2b2a      	cmp	r3, #42	; 0x2a
 800d660:	d134      	bne.n	800d6cc <_vfiprintf_r+0x1b0>
 800d662:	9b03      	ldr	r3, [sp, #12]
 800d664:	1d1a      	adds	r2, r3, #4
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	9203      	str	r2, [sp, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bfb8      	it	lt
 800d66e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d672:	3402      	adds	r4, #2
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d74c <_vfiprintf_r+0x230>
 800d67a:	7821      	ldrb	r1, [r4, #0]
 800d67c:	2203      	movs	r2, #3
 800d67e:	4650      	mov	r0, sl
 800d680:	f7f2 fdc6 	bl	8000210 <memchr>
 800d684:	b138      	cbz	r0, 800d696 <_vfiprintf_r+0x17a>
 800d686:	9b04      	ldr	r3, [sp, #16]
 800d688:	eba0 000a 	sub.w	r0, r0, sl
 800d68c:	2240      	movs	r2, #64	; 0x40
 800d68e:	4082      	lsls	r2, r0
 800d690:	4313      	orrs	r3, r2
 800d692:	3401      	adds	r4, #1
 800d694:	9304      	str	r3, [sp, #16]
 800d696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69a:	4829      	ldr	r0, [pc, #164]	; (800d740 <_vfiprintf_r+0x224>)
 800d69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6a0:	2206      	movs	r2, #6
 800d6a2:	f7f2 fdb5 	bl	8000210 <memchr>
 800d6a6:	2800      	cmp	r0, #0
 800d6a8:	d03f      	beq.n	800d72a <_vfiprintf_r+0x20e>
 800d6aa:	4b26      	ldr	r3, [pc, #152]	; (800d744 <_vfiprintf_r+0x228>)
 800d6ac:	bb1b      	cbnz	r3, 800d6f6 <_vfiprintf_r+0x1da>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	3307      	adds	r3, #7
 800d6b2:	f023 0307 	bic.w	r3, r3, #7
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	9303      	str	r3, [sp, #12]
 800d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6bc:	443b      	add	r3, r7
 800d6be:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c0:	e768      	b.n	800d594 <_vfiprintf_r+0x78>
 800d6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6c6:	460c      	mov	r4, r1
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	e7a6      	b.n	800d61a <_vfiprintf_r+0xfe>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	3401      	adds	r4, #1
 800d6d0:	9305      	str	r3, [sp, #20]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	f04f 0c0a 	mov.w	ip, #10
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6de:	3a30      	subs	r2, #48	; 0x30
 800d6e0:	2a09      	cmp	r2, #9
 800d6e2:	d903      	bls.n	800d6ec <_vfiprintf_r+0x1d0>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d0c6      	beq.n	800d676 <_vfiprintf_r+0x15a>
 800d6e8:	9105      	str	r1, [sp, #20]
 800d6ea:	e7c4      	b.n	800d676 <_vfiprintf_r+0x15a>
 800d6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e7f0      	b.n	800d6d8 <_vfiprintf_r+0x1bc>
 800d6f6:	ab03      	add	r3, sp, #12
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	4b12      	ldr	r3, [pc, #72]	; (800d748 <_vfiprintf_r+0x22c>)
 800d6fe:	a904      	add	r1, sp, #16
 800d700:	4630      	mov	r0, r6
 800d702:	f7fd feb7 	bl	800b474 <_printf_float>
 800d706:	4607      	mov	r7, r0
 800d708:	1c78      	adds	r0, r7, #1
 800d70a:	d1d6      	bne.n	800d6ba <_vfiprintf_r+0x19e>
 800d70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d70e:	07d9      	lsls	r1, r3, #31
 800d710:	d405      	bmi.n	800d71e <_vfiprintf_r+0x202>
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	059a      	lsls	r2, r3, #22
 800d716:	d402      	bmi.n	800d71e <_vfiprintf_r+0x202>
 800d718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d71a:	f7fe fcc3 	bl	800c0a4 <__retarget_lock_release_recursive>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	065b      	lsls	r3, r3, #25
 800d722:	f53f af1d 	bmi.w	800d560 <_vfiprintf_r+0x44>
 800d726:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d728:	e71c      	b.n	800d564 <_vfiprintf_r+0x48>
 800d72a:	ab03      	add	r3, sp, #12
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	462a      	mov	r2, r5
 800d730:	4b05      	ldr	r3, [pc, #20]	; (800d748 <_vfiprintf_r+0x22c>)
 800d732:	a904      	add	r1, sp, #16
 800d734:	4630      	mov	r0, r6
 800d736:	f7fe f941 	bl	800b9bc <_printf_i>
 800d73a:	e7e4      	b.n	800d706 <_vfiprintf_r+0x1ea>
 800d73c:	08013b37 	.word	0x08013b37
 800d740:	08013b41 	.word	0x08013b41
 800d744:	0800b475 	.word	0x0800b475
 800d748:	0800d4f7 	.word	0x0800d4f7
 800d74c:	08013b3d 	.word	0x08013b3d

0800d750 <malloc>:
 800d750:	4b02      	ldr	r3, [pc, #8]	; (800d75c <malloc+0xc>)
 800d752:	4601      	mov	r1, r0
 800d754:	6818      	ldr	r0, [r3, #0]
 800d756:	f000 b823 	b.w	800d7a0 <_malloc_r>
 800d75a:	bf00      	nop
 800d75c:	2000009c 	.word	0x2000009c

0800d760 <sbrk_aligned>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	4e0e      	ldr	r6, [pc, #56]	; (800d79c <sbrk_aligned+0x3c>)
 800d764:	460c      	mov	r4, r1
 800d766:	6831      	ldr	r1, [r6, #0]
 800d768:	4605      	mov	r5, r0
 800d76a:	b911      	cbnz	r1, 800d772 <sbrk_aligned+0x12>
 800d76c:	f001 f8fe 	bl	800e96c <_sbrk_r>
 800d770:	6030      	str	r0, [r6, #0]
 800d772:	4621      	mov	r1, r4
 800d774:	4628      	mov	r0, r5
 800d776:	f001 f8f9 	bl	800e96c <_sbrk_r>
 800d77a:	1c43      	adds	r3, r0, #1
 800d77c:	d00a      	beq.n	800d794 <sbrk_aligned+0x34>
 800d77e:	1cc4      	adds	r4, r0, #3
 800d780:	f024 0403 	bic.w	r4, r4, #3
 800d784:	42a0      	cmp	r0, r4
 800d786:	d007      	beq.n	800d798 <sbrk_aligned+0x38>
 800d788:	1a21      	subs	r1, r4, r0
 800d78a:	4628      	mov	r0, r5
 800d78c:	f001 f8ee 	bl	800e96c <_sbrk_r>
 800d790:	3001      	adds	r0, #1
 800d792:	d101      	bne.n	800d798 <sbrk_aligned+0x38>
 800d794:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d798:	4620      	mov	r0, r4
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	2000911c 	.word	0x2000911c

0800d7a0 <_malloc_r>:
 800d7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a4:	1ccd      	adds	r5, r1, #3
 800d7a6:	f025 0503 	bic.w	r5, r5, #3
 800d7aa:	3508      	adds	r5, #8
 800d7ac:	2d0c      	cmp	r5, #12
 800d7ae:	bf38      	it	cc
 800d7b0:	250c      	movcc	r5, #12
 800d7b2:	2d00      	cmp	r5, #0
 800d7b4:	4607      	mov	r7, r0
 800d7b6:	db01      	blt.n	800d7bc <_malloc_r+0x1c>
 800d7b8:	42a9      	cmp	r1, r5
 800d7ba:	d905      	bls.n	800d7c8 <_malloc_r+0x28>
 800d7bc:	230c      	movs	r3, #12
 800d7be:	603b      	str	r3, [r7, #0]
 800d7c0:	2600      	movs	r6, #0
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d89c <_malloc_r+0xfc>
 800d7cc:	f000 fa9e 	bl	800dd0c <__malloc_lock>
 800d7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d7d4:	461c      	mov	r4, r3
 800d7d6:	bb5c      	cbnz	r4, 800d830 <_malloc_r+0x90>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4638      	mov	r0, r7
 800d7dc:	f7ff ffc0 	bl	800d760 <sbrk_aligned>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	d155      	bne.n	800d892 <_malloc_r+0xf2>
 800d7e6:	f8d8 4000 	ldr.w	r4, [r8]
 800d7ea:	4626      	mov	r6, r4
 800d7ec:	2e00      	cmp	r6, #0
 800d7ee:	d145      	bne.n	800d87c <_malloc_r+0xdc>
 800d7f0:	2c00      	cmp	r4, #0
 800d7f2:	d048      	beq.n	800d886 <_malloc_r+0xe6>
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	eb04 0903 	add.w	r9, r4, r3
 800d7fe:	f001 f8b5 	bl	800e96c <_sbrk_r>
 800d802:	4581      	cmp	r9, r0
 800d804:	d13f      	bne.n	800d886 <_malloc_r+0xe6>
 800d806:	6821      	ldr	r1, [r4, #0]
 800d808:	1a6d      	subs	r5, r5, r1
 800d80a:	4629      	mov	r1, r5
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff ffa7 	bl	800d760 <sbrk_aligned>
 800d812:	3001      	adds	r0, #1
 800d814:	d037      	beq.n	800d886 <_malloc_r+0xe6>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	442b      	add	r3, r5
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	f8d8 3000 	ldr.w	r3, [r8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d038      	beq.n	800d896 <_malloc_r+0xf6>
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	42a2      	cmp	r2, r4
 800d828:	d12b      	bne.n	800d882 <_malloc_r+0xe2>
 800d82a:	2200      	movs	r2, #0
 800d82c:	605a      	str	r2, [r3, #4]
 800d82e:	e00f      	b.n	800d850 <_malloc_r+0xb0>
 800d830:	6822      	ldr	r2, [r4, #0]
 800d832:	1b52      	subs	r2, r2, r5
 800d834:	d41f      	bmi.n	800d876 <_malloc_r+0xd6>
 800d836:	2a0b      	cmp	r2, #11
 800d838:	d917      	bls.n	800d86a <_malloc_r+0xca>
 800d83a:	1961      	adds	r1, r4, r5
 800d83c:	42a3      	cmp	r3, r4
 800d83e:	6025      	str	r5, [r4, #0]
 800d840:	bf18      	it	ne
 800d842:	6059      	strne	r1, [r3, #4]
 800d844:	6863      	ldr	r3, [r4, #4]
 800d846:	bf08      	it	eq
 800d848:	f8c8 1000 	streq.w	r1, [r8]
 800d84c:	5162      	str	r2, [r4, r5]
 800d84e:	604b      	str	r3, [r1, #4]
 800d850:	4638      	mov	r0, r7
 800d852:	f104 060b 	add.w	r6, r4, #11
 800d856:	f000 fa5f 	bl	800dd18 <__malloc_unlock>
 800d85a:	f026 0607 	bic.w	r6, r6, #7
 800d85e:	1d23      	adds	r3, r4, #4
 800d860:	1af2      	subs	r2, r6, r3
 800d862:	d0ae      	beq.n	800d7c2 <_malloc_r+0x22>
 800d864:	1b9b      	subs	r3, r3, r6
 800d866:	50a3      	str	r3, [r4, r2]
 800d868:	e7ab      	b.n	800d7c2 <_malloc_r+0x22>
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	6862      	ldr	r2, [r4, #4]
 800d86e:	d1dd      	bne.n	800d82c <_malloc_r+0x8c>
 800d870:	f8c8 2000 	str.w	r2, [r8]
 800d874:	e7ec      	b.n	800d850 <_malloc_r+0xb0>
 800d876:	4623      	mov	r3, r4
 800d878:	6864      	ldr	r4, [r4, #4]
 800d87a:	e7ac      	b.n	800d7d6 <_malloc_r+0x36>
 800d87c:	4634      	mov	r4, r6
 800d87e:	6876      	ldr	r6, [r6, #4]
 800d880:	e7b4      	b.n	800d7ec <_malloc_r+0x4c>
 800d882:	4613      	mov	r3, r2
 800d884:	e7cc      	b.n	800d820 <_malloc_r+0x80>
 800d886:	230c      	movs	r3, #12
 800d888:	603b      	str	r3, [r7, #0]
 800d88a:	4638      	mov	r0, r7
 800d88c:	f000 fa44 	bl	800dd18 <__malloc_unlock>
 800d890:	e797      	b.n	800d7c2 <_malloc_r+0x22>
 800d892:	6025      	str	r5, [r4, #0]
 800d894:	e7dc      	b.n	800d850 <_malloc_r+0xb0>
 800d896:	605b      	str	r3, [r3, #4]
 800d898:	deff      	udf	#255	; 0xff
 800d89a:	bf00      	nop
 800d89c:	20009118 	.word	0x20009118

0800d8a0 <_scanf_chars>:
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	4615      	mov	r5, r2
 800d8a6:	688a      	ldr	r2, [r1, #8]
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	b932      	cbnz	r2, 800d8bc <_scanf_chars+0x1c>
 800d8ae:	698a      	ldr	r2, [r1, #24]
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	bf0c      	ite	eq
 800d8b4:	2201      	moveq	r2, #1
 800d8b6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800d8ba:	608a      	str	r2, [r1, #8]
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d950 <_scanf_chars+0xb0>
 800d8c2:	06d1      	lsls	r1, r2, #27
 800d8c4:	bf5f      	itttt	pl
 800d8c6:	681a      	ldrpl	r2, [r3, #0]
 800d8c8:	1d11      	addpl	r1, r2, #4
 800d8ca:	6019      	strpl	r1, [r3, #0]
 800d8cc:	6816      	ldrpl	r6, [r2, #0]
 800d8ce:	2700      	movs	r7, #0
 800d8d0:	69a0      	ldr	r0, [r4, #24]
 800d8d2:	b188      	cbz	r0, 800d8f8 <_scanf_chars+0x58>
 800d8d4:	2801      	cmp	r0, #1
 800d8d6:	d107      	bne.n	800d8e8 <_scanf_chars+0x48>
 800d8d8:	682a      	ldr	r2, [r5, #0]
 800d8da:	7811      	ldrb	r1, [r2, #0]
 800d8dc:	6962      	ldr	r2, [r4, #20]
 800d8de:	5c52      	ldrb	r2, [r2, r1]
 800d8e0:	b952      	cbnz	r2, 800d8f8 <_scanf_chars+0x58>
 800d8e2:	2f00      	cmp	r7, #0
 800d8e4:	d031      	beq.n	800d94a <_scanf_chars+0xaa>
 800d8e6:	e022      	b.n	800d92e <_scanf_chars+0x8e>
 800d8e8:	2802      	cmp	r0, #2
 800d8ea:	d120      	bne.n	800d92e <_scanf_chars+0x8e>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d8f4:	071b      	lsls	r3, r3, #28
 800d8f6:	d41a      	bmi.n	800d92e <_scanf_chars+0x8e>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	06da      	lsls	r2, r3, #27
 800d8fc:	bf5e      	ittt	pl
 800d8fe:	682b      	ldrpl	r3, [r5, #0]
 800d900:	781b      	ldrbpl	r3, [r3, #0]
 800d902:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d906:	682a      	ldr	r2, [r5, #0]
 800d908:	686b      	ldr	r3, [r5, #4]
 800d90a:	3201      	adds	r2, #1
 800d90c:	602a      	str	r2, [r5, #0]
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	3b01      	subs	r3, #1
 800d912:	3a01      	subs	r2, #1
 800d914:	606b      	str	r3, [r5, #4]
 800d916:	3701      	adds	r7, #1
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	b142      	cbz	r2, 800d92e <_scanf_chars+0x8e>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	dcd7      	bgt.n	800d8d0 <_scanf_chars+0x30>
 800d920:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d924:	4629      	mov	r1, r5
 800d926:	4640      	mov	r0, r8
 800d928:	4798      	blx	r3
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d0d0      	beq.n	800d8d0 <_scanf_chars+0x30>
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	f013 0310 	ands.w	r3, r3, #16
 800d934:	d105      	bne.n	800d942 <_scanf_chars+0xa2>
 800d936:	68e2      	ldr	r2, [r4, #12]
 800d938:	3201      	adds	r2, #1
 800d93a:	60e2      	str	r2, [r4, #12]
 800d93c:	69a2      	ldr	r2, [r4, #24]
 800d93e:	b102      	cbz	r2, 800d942 <_scanf_chars+0xa2>
 800d940:	7033      	strb	r3, [r6, #0]
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	443b      	add	r3, r7
 800d946:	6123      	str	r3, [r4, #16]
 800d948:	2000      	movs	r0, #0
 800d94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94e:	bf00      	nop
 800d950:	08013cc7 	.word	0x08013cc7

0800d954 <_scanf_i>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	4698      	mov	r8, r3
 800d95a:	4b74      	ldr	r3, [pc, #464]	; (800db2c <_scanf_i+0x1d8>)
 800d95c:	460c      	mov	r4, r1
 800d95e:	4682      	mov	sl, r0
 800d960:	4616      	mov	r6, r2
 800d962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d966:	b087      	sub	sp, #28
 800d968:	ab03      	add	r3, sp, #12
 800d96a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d96e:	4b70      	ldr	r3, [pc, #448]	; (800db30 <_scanf_i+0x1dc>)
 800d970:	69a1      	ldr	r1, [r4, #24]
 800d972:	4a70      	ldr	r2, [pc, #448]	; (800db34 <_scanf_i+0x1e0>)
 800d974:	2903      	cmp	r1, #3
 800d976:	bf18      	it	ne
 800d978:	461a      	movne	r2, r3
 800d97a:	68a3      	ldr	r3, [r4, #8]
 800d97c:	9201      	str	r2, [sp, #4]
 800d97e:	1e5a      	subs	r2, r3, #1
 800d980:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d984:	bf88      	it	hi
 800d986:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d98a:	4627      	mov	r7, r4
 800d98c:	bf82      	ittt	hi
 800d98e:	eb03 0905 	addhi.w	r9, r3, r5
 800d992:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d996:	60a3      	strhi	r3, [r4, #8]
 800d998:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d99c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d9a0:	bf98      	it	ls
 800d9a2:	f04f 0900 	movls.w	r9, #0
 800d9a6:	6023      	str	r3, [r4, #0]
 800d9a8:	463d      	mov	r5, r7
 800d9aa:	f04f 0b00 	mov.w	fp, #0
 800d9ae:	6831      	ldr	r1, [r6, #0]
 800d9b0:	ab03      	add	r3, sp, #12
 800d9b2:	7809      	ldrb	r1, [r1, #0]
 800d9b4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	f7f2 fc29 	bl	8000210 <memchr>
 800d9be:	b328      	cbz	r0, 800da0c <_scanf_i+0xb8>
 800d9c0:	f1bb 0f01 	cmp.w	fp, #1
 800d9c4:	d159      	bne.n	800da7a <_scanf_i+0x126>
 800d9c6:	6862      	ldr	r2, [r4, #4]
 800d9c8:	b92a      	cbnz	r2, 800d9d6 <_scanf_i+0x82>
 800d9ca:	6822      	ldr	r2, [r4, #0]
 800d9cc:	2308      	movs	r3, #8
 800d9ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9d2:	6063      	str	r3, [r4, #4]
 800d9d4:	6022      	str	r2, [r4, #0]
 800d9d6:	6822      	ldr	r2, [r4, #0]
 800d9d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d9dc:	6022      	str	r2, [r4, #0]
 800d9de:	68a2      	ldr	r2, [r4, #8]
 800d9e0:	1e51      	subs	r1, r2, #1
 800d9e2:	60a1      	str	r1, [r4, #8]
 800d9e4:	b192      	cbz	r2, 800da0c <_scanf_i+0xb8>
 800d9e6:	6832      	ldr	r2, [r6, #0]
 800d9e8:	1c51      	adds	r1, r2, #1
 800d9ea:	6031      	str	r1, [r6, #0]
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	f805 2b01 	strb.w	r2, [r5], #1
 800d9f2:	6872      	ldr	r2, [r6, #4]
 800d9f4:	3a01      	subs	r2, #1
 800d9f6:	2a00      	cmp	r2, #0
 800d9f8:	6072      	str	r2, [r6, #4]
 800d9fa:	dc07      	bgt.n	800da0c <_scanf_i+0xb8>
 800d9fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800da00:	4631      	mov	r1, r6
 800da02:	4650      	mov	r0, sl
 800da04:	4790      	blx	r2
 800da06:	2800      	cmp	r0, #0
 800da08:	f040 8085 	bne.w	800db16 <_scanf_i+0x1c2>
 800da0c:	f10b 0b01 	add.w	fp, fp, #1
 800da10:	f1bb 0f03 	cmp.w	fp, #3
 800da14:	d1cb      	bne.n	800d9ae <_scanf_i+0x5a>
 800da16:	6863      	ldr	r3, [r4, #4]
 800da18:	b90b      	cbnz	r3, 800da1e <_scanf_i+0xca>
 800da1a:	230a      	movs	r3, #10
 800da1c:	6063      	str	r3, [r4, #4]
 800da1e:	6863      	ldr	r3, [r4, #4]
 800da20:	4945      	ldr	r1, [pc, #276]	; (800db38 <_scanf_i+0x1e4>)
 800da22:	6960      	ldr	r0, [r4, #20]
 800da24:	1ac9      	subs	r1, r1, r3
 800da26:	f000 f889 	bl	800db3c <__sccl>
 800da2a:	f04f 0b00 	mov.w	fp, #0
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	6822      	ldr	r2, [r4, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d03d      	beq.n	800dab2 <_scanf_i+0x15e>
 800da36:	6831      	ldr	r1, [r6, #0]
 800da38:	6960      	ldr	r0, [r4, #20]
 800da3a:	f891 c000 	ldrb.w	ip, [r1]
 800da3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800da42:	2800      	cmp	r0, #0
 800da44:	d035      	beq.n	800dab2 <_scanf_i+0x15e>
 800da46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800da4a:	d124      	bne.n	800da96 <_scanf_i+0x142>
 800da4c:	0510      	lsls	r0, r2, #20
 800da4e:	d522      	bpl.n	800da96 <_scanf_i+0x142>
 800da50:	f10b 0b01 	add.w	fp, fp, #1
 800da54:	f1b9 0f00 	cmp.w	r9, #0
 800da58:	d003      	beq.n	800da62 <_scanf_i+0x10e>
 800da5a:	3301      	adds	r3, #1
 800da5c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800da60:	60a3      	str	r3, [r4, #8]
 800da62:	6873      	ldr	r3, [r6, #4]
 800da64:	3b01      	subs	r3, #1
 800da66:	2b00      	cmp	r3, #0
 800da68:	6073      	str	r3, [r6, #4]
 800da6a:	dd1b      	ble.n	800daa4 <_scanf_i+0x150>
 800da6c:	6833      	ldr	r3, [r6, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	3b01      	subs	r3, #1
 800da76:	60a3      	str	r3, [r4, #8]
 800da78:	e7d9      	b.n	800da2e <_scanf_i+0xda>
 800da7a:	f1bb 0f02 	cmp.w	fp, #2
 800da7e:	d1ae      	bne.n	800d9de <_scanf_i+0x8a>
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800da86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800da8a:	d1bf      	bne.n	800da0c <_scanf_i+0xb8>
 800da8c:	2310      	movs	r3, #16
 800da8e:	6063      	str	r3, [r4, #4]
 800da90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da94:	e7a2      	b.n	800d9dc <_scanf_i+0x88>
 800da96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800da9a:	6022      	str	r2, [r4, #0]
 800da9c:	780b      	ldrb	r3, [r1, #0]
 800da9e:	f805 3b01 	strb.w	r3, [r5], #1
 800daa2:	e7de      	b.n	800da62 <_scanf_i+0x10e>
 800daa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800daa8:	4631      	mov	r1, r6
 800daaa:	4650      	mov	r0, sl
 800daac:	4798      	blx	r3
 800daae:	2800      	cmp	r0, #0
 800dab0:	d0df      	beq.n	800da72 <_scanf_i+0x11e>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	05d9      	lsls	r1, r3, #23
 800dab6:	d50d      	bpl.n	800dad4 <_scanf_i+0x180>
 800dab8:	42bd      	cmp	r5, r7
 800daba:	d909      	bls.n	800dad0 <_scanf_i+0x17c>
 800dabc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dac4:	4632      	mov	r2, r6
 800dac6:	4650      	mov	r0, sl
 800dac8:	4798      	blx	r3
 800daca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800dace:	464d      	mov	r5, r9
 800dad0:	42bd      	cmp	r5, r7
 800dad2:	d028      	beq.n	800db26 <_scanf_i+0x1d2>
 800dad4:	6822      	ldr	r2, [r4, #0]
 800dad6:	f012 0210 	ands.w	r2, r2, #16
 800dada:	d113      	bne.n	800db04 <_scanf_i+0x1b0>
 800dadc:	702a      	strb	r2, [r5, #0]
 800dade:	6863      	ldr	r3, [r4, #4]
 800dae0:	9e01      	ldr	r6, [sp, #4]
 800dae2:	4639      	mov	r1, r7
 800dae4:	4650      	mov	r0, sl
 800dae6:	47b0      	blx	r6
 800dae8:	f8d8 3000 	ldr.w	r3, [r8]
 800daec:	6821      	ldr	r1, [r4, #0]
 800daee:	1d1a      	adds	r2, r3, #4
 800daf0:	f8c8 2000 	str.w	r2, [r8]
 800daf4:	f011 0f20 	tst.w	r1, #32
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	d00f      	beq.n	800db1c <_scanf_i+0x1c8>
 800dafc:	6018      	str	r0, [r3, #0]
 800dafe:	68e3      	ldr	r3, [r4, #12]
 800db00:	3301      	adds	r3, #1
 800db02:	60e3      	str	r3, [r4, #12]
 800db04:	6923      	ldr	r3, [r4, #16]
 800db06:	1bed      	subs	r5, r5, r7
 800db08:	445d      	add	r5, fp
 800db0a:	442b      	add	r3, r5
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	2000      	movs	r0, #0
 800db10:	b007      	add	sp, #28
 800db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db16:	f04f 0b00 	mov.w	fp, #0
 800db1a:	e7ca      	b.n	800dab2 <_scanf_i+0x15e>
 800db1c:	07ca      	lsls	r2, r1, #31
 800db1e:	bf4c      	ite	mi
 800db20:	8018      	strhmi	r0, [r3, #0]
 800db22:	6018      	strpl	r0, [r3, #0]
 800db24:	e7eb      	b.n	800dafe <_scanf_i+0x1aa>
 800db26:	2001      	movs	r0, #1
 800db28:	e7f2      	b.n	800db10 <_scanf_i+0x1bc>
 800db2a:	bf00      	nop
 800db2c:	0800f95c 	.word	0x0800f95c
 800db30:	0800e701 	.word	0x0800e701
 800db34:	0800e619 	.word	0x0800e619
 800db38:	08013b58 	.word	0x08013b58

0800db3c <__sccl>:
 800db3c:	b570      	push	{r4, r5, r6, lr}
 800db3e:	780b      	ldrb	r3, [r1, #0]
 800db40:	4604      	mov	r4, r0
 800db42:	2b5e      	cmp	r3, #94	; 0x5e
 800db44:	bf0b      	itete	eq
 800db46:	784b      	ldrbeq	r3, [r1, #1]
 800db48:	1c4a      	addne	r2, r1, #1
 800db4a:	1c8a      	addeq	r2, r1, #2
 800db4c:	2100      	movne	r1, #0
 800db4e:	bf08      	it	eq
 800db50:	2101      	moveq	r1, #1
 800db52:	3801      	subs	r0, #1
 800db54:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800db58:	f800 1f01 	strb.w	r1, [r0, #1]!
 800db5c:	42a8      	cmp	r0, r5
 800db5e:	d1fb      	bne.n	800db58 <__sccl+0x1c>
 800db60:	b90b      	cbnz	r3, 800db66 <__sccl+0x2a>
 800db62:	1e50      	subs	r0, r2, #1
 800db64:	bd70      	pop	{r4, r5, r6, pc}
 800db66:	f081 0101 	eor.w	r1, r1, #1
 800db6a:	54e1      	strb	r1, [r4, r3]
 800db6c:	4610      	mov	r0, r2
 800db6e:	4602      	mov	r2, r0
 800db70:	f812 5b01 	ldrb.w	r5, [r2], #1
 800db74:	2d2d      	cmp	r5, #45	; 0x2d
 800db76:	d005      	beq.n	800db84 <__sccl+0x48>
 800db78:	2d5d      	cmp	r5, #93	; 0x5d
 800db7a:	d016      	beq.n	800dbaa <__sccl+0x6e>
 800db7c:	2d00      	cmp	r5, #0
 800db7e:	d0f1      	beq.n	800db64 <__sccl+0x28>
 800db80:	462b      	mov	r3, r5
 800db82:	e7f2      	b.n	800db6a <__sccl+0x2e>
 800db84:	7846      	ldrb	r6, [r0, #1]
 800db86:	2e5d      	cmp	r6, #93	; 0x5d
 800db88:	d0fa      	beq.n	800db80 <__sccl+0x44>
 800db8a:	42b3      	cmp	r3, r6
 800db8c:	dcf8      	bgt.n	800db80 <__sccl+0x44>
 800db8e:	3002      	adds	r0, #2
 800db90:	461a      	mov	r2, r3
 800db92:	3201      	adds	r2, #1
 800db94:	4296      	cmp	r6, r2
 800db96:	54a1      	strb	r1, [r4, r2]
 800db98:	dcfb      	bgt.n	800db92 <__sccl+0x56>
 800db9a:	1af2      	subs	r2, r6, r3
 800db9c:	3a01      	subs	r2, #1
 800db9e:	1c5d      	adds	r5, r3, #1
 800dba0:	42b3      	cmp	r3, r6
 800dba2:	bfa8      	it	ge
 800dba4:	2200      	movge	r2, #0
 800dba6:	18ab      	adds	r3, r5, r2
 800dba8:	e7e1      	b.n	800db6e <__sccl+0x32>
 800dbaa:	4610      	mov	r0, r2
 800dbac:	e7da      	b.n	800db64 <__sccl+0x28>
	...

0800dbb0 <__sflush_r>:
 800dbb0:	898a      	ldrh	r2, [r1, #12]
 800dbb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	0710      	lsls	r0, r2, #28
 800dbba:	460c      	mov	r4, r1
 800dbbc:	d458      	bmi.n	800dc70 <__sflush_r+0xc0>
 800dbbe:	684b      	ldr	r3, [r1, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	dc05      	bgt.n	800dbd0 <__sflush_r+0x20>
 800dbc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dc02      	bgt.n	800dbd0 <__sflush_r+0x20>
 800dbca:	2000      	movs	r0, #0
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbd2:	2e00      	cmp	r6, #0
 800dbd4:	d0f9      	beq.n	800dbca <__sflush_r+0x1a>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbdc:	682f      	ldr	r7, [r5, #0]
 800dbde:	6a21      	ldr	r1, [r4, #32]
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	d032      	beq.n	800dc4a <__sflush_r+0x9a>
 800dbe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	075a      	lsls	r2, r3, #29
 800dbea:	d505      	bpl.n	800dbf8 <__sflush_r+0x48>
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	1ac0      	subs	r0, r0, r3
 800dbf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbf2:	b10b      	cbz	r3, 800dbf8 <__sflush_r+0x48>
 800dbf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbf6:	1ac0      	subs	r0, r0, r3
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbfe:	6a21      	ldr	r1, [r4, #32]
 800dc00:	4628      	mov	r0, r5
 800dc02:	47b0      	blx	r6
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	89a3      	ldrh	r3, [r4, #12]
 800dc08:	d106      	bne.n	800dc18 <__sflush_r+0x68>
 800dc0a:	6829      	ldr	r1, [r5, #0]
 800dc0c:	291d      	cmp	r1, #29
 800dc0e:	d82b      	bhi.n	800dc68 <__sflush_r+0xb8>
 800dc10:	4a29      	ldr	r2, [pc, #164]	; (800dcb8 <__sflush_r+0x108>)
 800dc12:	410a      	asrs	r2, r1
 800dc14:	07d6      	lsls	r6, r2, #31
 800dc16:	d427      	bmi.n	800dc68 <__sflush_r+0xb8>
 800dc18:	2200      	movs	r2, #0
 800dc1a:	6062      	str	r2, [r4, #4]
 800dc1c:	04d9      	lsls	r1, r3, #19
 800dc1e:	6922      	ldr	r2, [r4, #16]
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	d504      	bpl.n	800dc2e <__sflush_r+0x7e>
 800dc24:	1c42      	adds	r2, r0, #1
 800dc26:	d101      	bne.n	800dc2c <__sflush_r+0x7c>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b903      	cbnz	r3, 800dc2e <__sflush_r+0x7e>
 800dc2c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc30:	602f      	str	r7, [r5, #0]
 800dc32:	2900      	cmp	r1, #0
 800dc34:	d0c9      	beq.n	800dbca <__sflush_r+0x1a>
 800dc36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc3a:	4299      	cmp	r1, r3
 800dc3c:	d002      	beq.n	800dc44 <__sflush_r+0x94>
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f7ff f8cc 	bl	800cddc <_free_r>
 800dc44:	2000      	movs	r0, #0
 800dc46:	6360      	str	r0, [r4, #52]	; 0x34
 800dc48:	e7c0      	b.n	800dbcc <__sflush_r+0x1c>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	47b0      	blx	r6
 800dc50:	1c41      	adds	r1, r0, #1
 800dc52:	d1c8      	bne.n	800dbe6 <__sflush_r+0x36>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0c5      	beq.n	800dbe6 <__sflush_r+0x36>
 800dc5a:	2b1d      	cmp	r3, #29
 800dc5c:	d001      	beq.n	800dc62 <__sflush_r+0xb2>
 800dc5e:	2b16      	cmp	r3, #22
 800dc60:	d101      	bne.n	800dc66 <__sflush_r+0xb6>
 800dc62:	602f      	str	r7, [r5, #0]
 800dc64:	e7b1      	b.n	800dbca <__sflush_r+0x1a>
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6c:	81a3      	strh	r3, [r4, #12]
 800dc6e:	e7ad      	b.n	800dbcc <__sflush_r+0x1c>
 800dc70:	690f      	ldr	r7, [r1, #16]
 800dc72:	2f00      	cmp	r7, #0
 800dc74:	d0a9      	beq.n	800dbca <__sflush_r+0x1a>
 800dc76:	0793      	lsls	r3, r2, #30
 800dc78:	680e      	ldr	r6, [r1, #0]
 800dc7a:	bf08      	it	eq
 800dc7c:	694b      	ldreq	r3, [r1, #20]
 800dc7e:	600f      	str	r7, [r1, #0]
 800dc80:	bf18      	it	ne
 800dc82:	2300      	movne	r3, #0
 800dc84:	eba6 0807 	sub.w	r8, r6, r7
 800dc88:	608b      	str	r3, [r1, #8]
 800dc8a:	f1b8 0f00 	cmp.w	r8, #0
 800dc8e:	dd9c      	ble.n	800dbca <__sflush_r+0x1a>
 800dc90:	6a21      	ldr	r1, [r4, #32]
 800dc92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc94:	4643      	mov	r3, r8
 800dc96:	463a      	mov	r2, r7
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	dc06      	bgt.n	800dcae <__sflush_r+0xfe>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcac:	e78e      	b.n	800dbcc <__sflush_r+0x1c>
 800dcae:	4407      	add	r7, r0
 800dcb0:	eba8 0800 	sub.w	r8, r8, r0
 800dcb4:	e7e9      	b.n	800dc8a <__sflush_r+0xda>
 800dcb6:	bf00      	nop
 800dcb8:	dfbffffe 	.word	0xdfbffffe

0800dcbc <_fflush_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	690b      	ldr	r3, [r1, #16]
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	b913      	cbnz	r3, 800dccc <_fflush_r+0x10>
 800dcc6:	2500      	movs	r5, #0
 800dcc8:	4628      	mov	r0, r5
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	b118      	cbz	r0, 800dcd6 <_fflush_r+0x1a>
 800dcce:	6a03      	ldr	r3, [r0, #32]
 800dcd0:	b90b      	cbnz	r3, 800dcd6 <_fflush_r+0x1a>
 800dcd2:	f7fe f8e7 	bl	800bea4 <__sinit>
 800dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0f3      	beq.n	800dcc6 <_fflush_r+0xa>
 800dcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dce0:	07d0      	lsls	r0, r2, #31
 800dce2:	d404      	bmi.n	800dcee <_fflush_r+0x32>
 800dce4:	0599      	lsls	r1, r3, #22
 800dce6:	d402      	bmi.n	800dcee <_fflush_r+0x32>
 800dce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcea:	f7fe f9da 	bl	800c0a2 <__retarget_lock_acquire_recursive>
 800dcee:	4628      	mov	r0, r5
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	f7ff ff5d 	bl	800dbb0 <__sflush_r>
 800dcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcf8:	07da      	lsls	r2, r3, #31
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	d4e4      	bmi.n	800dcc8 <_fflush_r+0xc>
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	059b      	lsls	r3, r3, #22
 800dd02:	d4e1      	bmi.n	800dcc8 <_fflush_r+0xc>
 800dd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd06:	f7fe f9cd 	bl	800c0a4 <__retarget_lock_release_recursive>
 800dd0a:	e7dd      	b.n	800dcc8 <_fflush_r+0xc>

0800dd0c <__malloc_lock>:
 800dd0c:	4801      	ldr	r0, [pc, #4]	; (800dd14 <__malloc_lock+0x8>)
 800dd0e:	f7fe b9c8 	b.w	800c0a2 <__retarget_lock_acquire_recursive>
 800dd12:	bf00      	nop
 800dd14:	20009114 	.word	0x20009114

0800dd18 <__malloc_unlock>:
 800dd18:	4801      	ldr	r0, [pc, #4]	; (800dd20 <__malloc_unlock+0x8>)
 800dd1a:	f7fe b9c3 	b.w	800c0a4 <__retarget_lock_release_recursive>
 800dd1e:	bf00      	nop
 800dd20:	20009114 	.word	0x20009114

0800dd24 <_Balloc>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	69c6      	ldr	r6, [r0, #28]
 800dd28:	4604      	mov	r4, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	b976      	cbnz	r6, 800dd4c <_Balloc+0x28>
 800dd2e:	2010      	movs	r0, #16
 800dd30:	f7ff fd0e 	bl	800d750 <malloc>
 800dd34:	4602      	mov	r2, r0
 800dd36:	61e0      	str	r0, [r4, #28]
 800dd38:	b920      	cbnz	r0, 800dd44 <_Balloc+0x20>
 800dd3a:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <_Balloc+0x78>)
 800dd3c:	4818      	ldr	r0, [pc, #96]	; (800dda0 <_Balloc+0x7c>)
 800dd3e:	216b      	movs	r1, #107	; 0x6b
 800dd40:	f7fe f9b2 	bl	800c0a8 <__assert_func>
 800dd44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd48:	6006      	str	r6, [r0, #0]
 800dd4a:	60c6      	str	r6, [r0, #12]
 800dd4c:	69e6      	ldr	r6, [r4, #28]
 800dd4e:	68f3      	ldr	r3, [r6, #12]
 800dd50:	b183      	cbz	r3, 800dd74 <_Balloc+0x50>
 800dd52:	69e3      	ldr	r3, [r4, #28]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd5a:	b9b8      	cbnz	r0, 800dd8c <_Balloc+0x68>
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	fa01 f605 	lsl.w	r6, r1, r5
 800dd62:	1d72      	adds	r2, r6, #5
 800dd64:	0092      	lsls	r2, r2, #2
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fe25 	bl	800e9b6 <_calloc_r>
 800dd6c:	b160      	cbz	r0, 800dd88 <_Balloc+0x64>
 800dd6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd72:	e00e      	b.n	800dd92 <_Balloc+0x6e>
 800dd74:	2221      	movs	r2, #33	; 0x21
 800dd76:	2104      	movs	r1, #4
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 fe1c 	bl	800e9b6 <_calloc_r>
 800dd7e:	69e3      	ldr	r3, [r4, #28]
 800dd80:	60f0      	str	r0, [r6, #12]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1e4      	bne.n	800dd52 <_Balloc+0x2e>
 800dd88:	2000      	movs	r0, #0
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	6802      	ldr	r2, [r0, #0]
 800dd8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd92:	2300      	movs	r3, #0
 800dd94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd98:	e7f7      	b.n	800dd8a <_Balloc+0x66>
 800dd9a:	bf00      	nop
 800dd9c:	08013ab7 	.word	0x08013ab7
 800dda0:	08013b63 	.word	0x08013b63

0800dda4 <_Bfree>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	69c6      	ldr	r6, [r0, #28]
 800dda8:	4605      	mov	r5, r0
 800ddaa:	460c      	mov	r4, r1
 800ddac:	b976      	cbnz	r6, 800ddcc <_Bfree+0x28>
 800ddae:	2010      	movs	r0, #16
 800ddb0:	f7ff fcce 	bl	800d750 <malloc>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	61e8      	str	r0, [r5, #28]
 800ddb8:	b920      	cbnz	r0, 800ddc4 <_Bfree+0x20>
 800ddba:	4b09      	ldr	r3, [pc, #36]	; (800dde0 <_Bfree+0x3c>)
 800ddbc:	4809      	ldr	r0, [pc, #36]	; (800dde4 <_Bfree+0x40>)
 800ddbe:	218f      	movs	r1, #143	; 0x8f
 800ddc0:	f7fe f972 	bl	800c0a8 <__assert_func>
 800ddc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddc8:	6006      	str	r6, [r0, #0]
 800ddca:	60c6      	str	r6, [r0, #12]
 800ddcc:	b13c      	cbz	r4, 800ddde <_Bfree+0x3a>
 800ddce:	69eb      	ldr	r3, [r5, #28]
 800ddd0:	6862      	ldr	r2, [r4, #4]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddd8:	6021      	str	r1, [r4, #0]
 800ddda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	08013ab7 	.word	0x08013ab7
 800dde4:	08013b63 	.word	0x08013b63

0800dde8 <__multadd>:
 800dde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddec:	690d      	ldr	r5, [r1, #16]
 800ddee:	4607      	mov	r7, r0
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	461e      	mov	r6, r3
 800ddf4:	f101 0c14 	add.w	ip, r1, #20
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f8dc 3000 	ldr.w	r3, [ip]
 800ddfe:	b299      	uxth	r1, r3
 800de00:	fb02 6101 	mla	r1, r2, r1, r6
 800de04:	0c1e      	lsrs	r6, r3, #16
 800de06:	0c0b      	lsrs	r3, r1, #16
 800de08:	fb02 3306 	mla	r3, r2, r6, r3
 800de0c:	b289      	uxth	r1, r1
 800de0e:	3001      	adds	r0, #1
 800de10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de14:	4285      	cmp	r5, r0
 800de16:	f84c 1b04 	str.w	r1, [ip], #4
 800de1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de1e:	dcec      	bgt.n	800ddfa <__multadd+0x12>
 800de20:	b30e      	cbz	r6, 800de66 <__multadd+0x7e>
 800de22:	68a3      	ldr	r3, [r4, #8]
 800de24:	42ab      	cmp	r3, r5
 800de26:	dc19      	bgt.n	800de5c <__multadd+0x74>
 800de28:	6861      	ldr	r1, [r4, #4]
 800de2a:	4638      	mov	r0, r7
 800de2c:	3101      	adds	r1, #1
 800de2e:	f7ff ff79 	bl	800dd24 <_Balloc>
 800de32:	4680      	mov	r8, r0
 800de34:	b928      	cbnz	r0, 800de42 <__multadd+0x5a>
 800de36:	4602      	mov	r2, r0
 800de38:	4b0c      	ldr	r3, [pc, #48]	; (800de6c <__multadd+0x84>)
 800de3a:	480d      	ldr	r0, [pc, #52]	; (800de70 <__multadd+0x88>)
 800de3c:	21ba      	movs	r1, #186	; 0xba
 800de3e:	f7fe f933 	bl	800c0a8 <__assert_func>
 800de42:	6922      	ldr	r2, [r4, #16]
 800de44:	3202      	adds	r2, #2
 800de46:	f104 010c 	add.w	r1, r4, #12
 800de4a:	0092      	lsls	r2, r2, #2
 800de4c:	300c      	adds	r0, #12
 800de4e:	f000 fd9d 	bl	800e98c <memcpy>
 800de52:	4621      	mov	r1, r4
 800de54:	4638      	mov	r0, r7
 800de56:	f7ff ffa5 	bl	800dda4 <_Bfree>
 800de5a:	4644      	mov	r4, r8
 800de5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de60:	3501      	adds	r5, #1
 800de62:	615e      	str	r6, [r3, #20]
 800de64:	6125      	str	r5, [r4, #16]
 800de66:	4620      	mov	r0, r4
 800de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6c:	08013b26 	.word	0x08013b26
 800de70:	08013b63 	.word	0x08013b63

0800de74 <__hi0bits>:
 800de74:	0c03      	lsrs	r3, r0, #16
 800de76:	041b      	lsls	r3, r3, #16
 800de78:	b9d3      	cbnz	r3, 800deb0 <__hi0bits+0x3c>
 800de7a:	0400      	lsls	r0, r0, #16
 800de7c:	2310      	movs	r3, #16
 800de7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800de82:	bf04      	itt	eq
 800de84:	0200      	lsleq	r0, r0, #8
 800de86:	3308      	addeq	r3, #8
 800de88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de8c:	bf04      	itt	eq
 800de8e:	0100      	lsleq	r0, r0, #4
 800de90:	3304      	addeq	r3, #4
 800de92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de96:	bf04      	itt	eq
 800de98:	0080      	lsleq	r0, r0, #2
 800de9a:	3302      	addeq	r3, #2
 800de9c:	2800      	cmp	r0, #0
 800de9e:	db05      	blt.n	800deac <__hi0bits+0x38>
 800dea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dea4:	f103 0301 	add.w	r3, r3, #1
 800dea8:	bf08      	it	eq
 800deaa:	2320      	moveq	r3, #32
 800deac:	4618      	mov	r0, r3
 800deae:	4770      	bx	lr
 800deb0:	2300      	movs	r3, #0
 800deb2:	e7e4      	b.n	800de7e <__hi0bits+0xa>

0800deb4 <__lo0bits>:
 800deb4:	6803      	ldr	r3, [r0, #0]
 800deb6:	f013 0207 	ands.w	r2, r3, #7
 800deba:	d00c      	beq.n	800ded6 <__lo0bits+0x22>
 800debc:	07d9      	lsls	r1, r3, #31
 800debe:	d422      	bmi.n	800df06 <__lo0bits+0x52>
 800dec0:	079a      	lsls	r2, r3, #30
 800dec2:	bf49      	itett	mi
 800dec4:	085b      	lsrmi	r3, r3, #1
 800dec6:	089b      	lsrpl	r3, r3, #2
 800dec8:	6003      	strmi	r3, [r0, #0]
 800deca:	2201      	movmi	r2, #1
 800decc:	bf5c      	itt	pl
 800dece:	6003      	strpl	r3, [r0, #0]
 800ded0:	2202      	movpl	r2, #2
 800ded2:	4610      	mov	r0, r2
 800ded4:	4770      	bx	lr
 800ded6:	b299      	uxth	r1, r3
 800ded8:	b909      	cbnz	r1, 800dede <__lo0bits+0x2a>
 800deda:	0c1b      	lsrs	r3, r3, #16
 800dedc:	2210      	movs	r2, #16
 800dede:	b2d9      	uxtb	r1, r3
 800dee0:	b909      	cbnz	r1, 800dee6 <__lo0bits+0x32>
 800dee2:	3208      	adds	r2, #8
 800dee4:	0a1b      	lsrs	r3, r3, #8
 800dee6:	0719      	lsls	r1, r3, #28
 800dee8:	bf04      	itt	eq
 800deea:	091b      	lsreq	r3, r3, #4
 800deec:	3204      	addeq	r2, #4
 800deee:	0799      	lsls	r1, r3, #30
 800def0:	bf04      	itt	eq
 800def2:	089b      	lsreq	r3, r3, #2
 800def4:	3202      	addeq	r2, #2
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	d403      	bmi.n	800df02 <__lo0bits+0x4e>
 800defa:	085b      	lsrs	r3, r3, #1
 800defc:	f102 0201 	add.w	r2, r2, #1
 800df00:	d003      	beq.n	800df0a <__lo0bits+0x56>
 800df02:	6003      	str	r3, [r0, #0]
 800df04:	e7e5      	b.n	800ded2 <__lo0bits+0x1e>
 800df06:	2200      	movs	r2, #0
 800df08:	e7e3      	b.n	800ded2 <__lo0bits+0x1e>
 800df0a:	2220      	movs	r2, #32
 800df0c:	e7e1      	b.n	800ded2 <__lo0bits+0x1e>
	...

0800df10 <__i2b>:
 800df10:	b510      	push	{r4, lr}
 800df12:	460c      	mov	r4, r1
 800df14:	2101      	movs	r1, #1
 800df16:	f7ff ff05 	bl	800dd24 <_Balloc>
 800df1a:	4602      	mov	r2, r0
 800df1c:	b928      	cbnz	r0, 800df2a <__i2b+0x1a>
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <__i2b+0x24>)
 800df20:	4805      	ldr	r0, [pc, #20]	; (800df38 <__i2b+0x28>)
 800df22:	f240 1145 	movw	r1, #325	; 0x145
 800df26:	f7fe f8bf 	bl	800c0a8 <__assert_func>
 800df2a:	2301      	movs	r3, #1
 800df2c:	6144      	str	r4, [r0, #20]
 800df2e:	6103      	str	r3, [r0, #16]
 800df30:	bd10      	pop	{r4, pc}
 800df32:	bf00      	nop
 800df34:	08013b26 	.word	0x08013b26
 800df38:	08013b63 	.word	0x08013b63

0800df3c <__multiply>:
 800df3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df40:	4691      	mov	r9, r2
 800df42:	690a      	ldr	r2, [r1, #16]
 800df44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df48:	429a      	cmp	r2, r3
 800df4a:	bfb8      	it	lt
 800df4c:	460b      	movlt	r3, r1
 800df4e:	460c      	mov	r4, r1
 800df50:	bfbc      	itt	lt
 800df52:	464c      	movlt	r4, r9
 800df54:	4699      	movlt	r9, r3
 800df56:	6927      	ldr	r7, [r4, #16]
 800df58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df5c:	68a3      	ldr	r3, [r4, #8]
 800df5e:	6861      	ldr	r1, [r4, #4]
 800df60:	eb07 060a 	add.w	r6, r7, sl
 800df64:	42b3      	cmp	r3, r6
 800df66:	b085      	sub	sp, #20
 800df68:	bfb8      	it	lt
 800df6a:	3101      	addlt	r1, #1
 800df6c:	f7ff feda 	bl	800dd24 <_Balloc>
 800df70:	b930      	cbnz	r0, 800df80 <__multiply+0x44>
 800df72:	4602      	mov	r2, r0
 800df74:	4b44      	ldr	r3, [pc, #272]	; (800e088 <__multiply+0x14c>)
 800df76:	4845      	ldr	r0, [pc, #276]	; (800e08c <__multiply+0x150>)
 800df78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800df7c:	f7fe f894 	bl	800c0a8 <__assert_func>
 800df80:	f100 0514 	add.w	r5, r0, #20
 800df84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df88:	462b      	mov	r3, r5
 800df8a:	2200      	movs	r2, #0
 800df8c:	4543      	cmp	r3, r8
 800df8e:	d321      	bcc.n	800dfd4 <__multiply+0x98>
 800df90:	f104 0314 	add.w	r3, r4, #20
 800df94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df98:	f109 0314 	add.w	r3, r9, #20
 800df9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dfa0:	9202      	str	r2, [sp, #8]
 800dfa2:	1b3a      	subs	r2, r7, r4
 800dfa4:	3a15      	subs	r2, #21
 800dfa6:	f022 0203 	bic.w	r2, r2, #3
 800dfaa:	3204      	adds	r2, #4
 800dfac:	f104 0115 	add.w	r1, r4, #21
 800dfb0:	428f      	cmp	r7, r1
 800dfb2:	bf38      	it	cc
 800dfb4:	2204      	movcc	r2, #4
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9a02      	ldr	r2, [sp, #8]
 800dfba:	9303      	str	r3, [sp, #12]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d80c      	bhi.n	800dfda <__multiply+0x9e>
 800dfc0:	2e00      	cmp	r6, #0
 800dfc2:	dd03      	ble.n	800dfcc <__multiply+0x90>
 800dfc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d05b      	beq.n	800e084 <__multiply+0x148>
 800dfcc:	6106      	str	r6, [r0, #16]
 800dfce:	b005      	add	sp, #20
 800dfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd4:	f843 2b04 	str.w	r2, [r3], #4
 800dfd8:	e7d8      	b.n	800df8c <__multiply+0x50>
 800dfda:	f8b3 a000 	ldrh.w	sl, [r3]
 800dfde:	f1ba 0f00 	cmp.w	sl, #0
 800dfe2:	d024      	beq.n	800e02e <__multiply+0xf2>
 800dfe4:	f104 0e14 	add.w	lr, r4, #20
 800dfe8:	46a9      	mov	r9, r5
 800dfea:	f04f 0c00 	mov.w	ip, #0
 800dfee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dff2:	f8d9 1000 	ldr.w	r1, [r9]
 800dff6:	fa1f fb82 	uxth.w	fp, r2
 800dffa:	b289      	uxth	r1, r1
 800dffc:	fb0a 110b 	mla	r1, sl, fp, r1
 800e000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e004:	f8d9 2000 	ldr.w	r2, [r9]
 800e008:	4461      	add	r1, ip
 800e00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e00e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e016:	b289      	uxth	r1, r1
 800e018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e01c:	4577      	cmp	r7, lr
 800e01e:	f849 1b04 	str.w	r1, [r9], #4
 800e022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e026:	d8e2      	bhi.n	800dfee <__multiply+0xb2>
 800e028:	9a01      	ldr	r2, [sp, #4]
 800e02a:	f845 c002 	str.w	ip, [r5, r2]
 800e02e:	9a03      	ldr	r2, [sp, #12]
 800e030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e034:	3304      	adds	r3, #4
 800e036:	f1b9 0f00 	cmp.w	r9, #0
 800e03a:	d021      	beq.n	800e080 <__multiply+0x144>
 800e03c:	6829      	ldr	r1, [r5, #0]
 800e03e:	f104 0c14 	add.w	ip, r4, #20
 800e042:	46ae      	mov	lr, r5
 800e044:	f04f 0a00 	mov.w	sl, #0
 800e048:	f8bc b000 	ldrh.w	fp, [ip]
 800e04c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e050:	fb09 220b 	mla	r2, r9, fp, r2
 800e054:	4452      	add	r2, sl
 800e056:	b289      	uxth	r1, r1
 800e058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e05c:	f84e 1b04 	str.w	r1, [lr], #4
 800e060:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e064:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e068:	f8be 1000 	ldrh.w	r1, [lr]
 800e06c:	fb09 110a 	mla	r1, r9, sl, r1
 800e070:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e074:	4567      	cmp	r7, ip
 800e076:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e07a:	d8e5      	bhi.n	800e048 <__multiply+0x10c>
 800e07c:	9a01      	ldr	r2, [sp, #4]
 800e07e:	50a9      	str	r1, [r5, r2]
 800e080:	3504      	adds	r5, #4
 800e082:	e799      	b.n	800dfb8 <__multiply+0x7c>
 800e084:	3e01      	subs	r6, #1
 800e086:	e79b      	b.n	800dfc0 <__multiply+0x84>
 800e088:	08013b26 	.word	0x08013b26
 800e08c:	08013b63 	.word	0x08013b63

0800e090 <__pow5mult>:
 800e090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e094:	4615      	mov	r5, r2
 800e096:	f012 0203 	ands.w	r2, r2, #3
 800e09a:	4606      	mov	r6, r0
 800e09c:	460f      	mov	r7, r1
 800e09e:	d007      	beq.n	800e0b0 <__pow5mult+0x20>
 800e0a0:	4c25      	ldr	r4, [pc, #148]	; (800e138 <__pow5mult+0xa8>)
 800e0a2:	3a01      	subs	r2, #1
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0aa:	f7ff fe9d 	bl	800dde8 <__multadd>
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	10ad      	asrs	r5, r5, #2
 800e0b2:	d03d      	beq.n	800e130 <__pow5mult+0xa0>
 800e0b4:	69f4      	ldr	r4, [r6, #28]
 800e0b6:	b97c      	cbnz	r4, 800e0d8 <__pow5mult+0x48>
 800e0b8:	2010      	movs	r0, #16
 800e0ba:	f7ff fb49 	bl	800d750 <malloc>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	61f0      	str	r0, [r6, #28]
 800e0c2:	b928      	cbnz	r0, 800e0d0 <__pow5mult+0x40>
 800e0c4:	4b1d      	ldr	r3, [pc, #116]	; (800e13c <__pow5mult+0xac>)
 800e0c6:	481e      	ldr	r0, [pc, #120]	; (800e140 <__pow5mult+0xb0>)
 800e0c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e0cc:	f7fd ffec 	bl	800c0a8 <__assert_func>
 800e0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0d4:	6004      	str	r4, [r0, #0]
 800e0d6:	60c4      	str	r4, [r0, #12]
 800e0d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0e0:	b94c      	cbnz	r4, 800e0f6 <__pow5mult+0x66>
 800e0e2:	f240 2171 	movw	r1, #625	; 0x271
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ff12 	bl	800df10 <__i2b>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	6003      	str	r3, [r0, #0]
 800e0f6:	f04f 0900 	mov.w	r9, #0
 800e0fa:	07eb      	lsls	r3, r5, #31
 800e0fc:	d50a      	bpl.n	800e114 <__pow5mult+0x84>
 800e0fe:	4639      	mov	r1, r7
 800e100:	4622      	mov	r2, r4
 800e102:	4630      	mov	r0, r6
 800e104:	f7ff ff1a 	bl	800df3c <__multiply>
 800e108:	4639      	mov	r1, r7
 800e10a:	4680      	mov	r8, r0
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7ff fe49 	bl	800dda4 <_Bfree>
 800e112:	4647      	mov	r7, r8
 800e114:	106d      	asrs	r5, r5, #1
 800e116:	d00b      	beq.n	800e130 <__pow5mult+0xa0>
 800e118:	6820      	ldr	r0, [r4, #0]
 800e11a:	b938      	cbnz	r0, 800e12c <__pow5mult+0x9c>
 800e11c:	4622      	mov	r2, r4
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff ff0b 	bl	800df3c <__multiply>
 800e126:	6020      	str	r0, [r4, #0]
 800e128:	f8c0 9000 	str.w	r9, [r0]
 800e12c:	4604      	mov	r4, r0
 800e12e:	e7e4      	b.n	800e0fa <__pow5mult+0x6a>
 800e130:	4638      	mov	r0, r7
 800e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e136:	bf00      	nop
 800e138:	08013cb0 	.word	0x08013cb0
 800e13c:	08013ab7 	.word	0x08013ab7
 800e140:	08013b63 	.word	0x08013b63

0800e144 <__lshift>:
 800e144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e148:	460c      	mov	r4, r1
 800e14a:	6849      	ldr	r1, [r1, #4]
 800e14c:	6923      	ldr	r3, [r4, #16]
 800e14e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e152:	68a3      	ldr	r3, [r4, #8]
 800e154:	4607      	mov	r7, r0
 800e156:	4691      	mov	r9, r2
 800e158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e15c:	f108 0601 	add.w	r6, r8, #1
 800e160:	42b3      	cmp	r3, r6
 800e162:	db0b      	blt.n	800e17c <__lshift+0x38>
 800e164:	4638      	mov	r0, r7
 800e166:	f7ff fddd 	bl	800dd24 <_Balloc>
 800e16a:	4605      	mov	r5, r0
 800e16c:	b948      	cbnz	r0, 800e182 <__lshift+0x3e>
 800e16e:	4602      	mov	r2, r0
 800e170:	4b28      	ldr	r3, [pc, #160]	; (800e214 <__lshift+0xd0>)
 800e172:	4829      	ldr	r0, [pc, #164]	; (800e218 <__lshift+0xd4>)
 800e174:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e178:	f7fd ff96 	bl	800c0a8 <__assert_func>
 800e17c:	3101      	adds	r1, #1
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	e7ee      	b.n	800e160 <__lshift+0x1c>
 800e182:	2300      	movs	r3, #0
 800e184:	f100 0114 	add.w	r1, r0, #20
 800e188:	f100 0210 	add.w	r2, r0, #16
 800e18c:	4618      	mov	r0, r3
 800e18e:	4553      	cmp	r3, sl
 800e190:	db33      	blt.n	800e1fa <__lshift+0xb6>
 800e192:	6920      	ldr	r0, [r4, #16]
 800e194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e198:	f104 0314 	add.w	r3, r4, #20
 800e19c:	f019 091f 	ands.w	r9, r9, #31
 800e1a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1a8:	d02b      	beq.n	800e202 <__lshift+0xbe>
 800e1aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e1ae:	468a      	mov	sl, r1
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	6818      	ldr	r0, [r3, #0]
 800e1b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e1b8:	4310      	orrs	r0, r2
 800e1ba:	f84a 0b04 	str.w	r0, [sl], #4
 800e1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c2:	459c      	cmp	ip, r3
 800e1c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e1c8:	d8f3      	bhi.n	800e1b2 <__lshift+0x6e>
 800e1ca:	ebac 0304 	sub.w	r3, ip, r4
 800e1ce:	3b15      	subs	r3, #21
 800e1d0:	f023 0303 	bic.w	r3, r3, #3
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	f104 0015 	add.w	r0, r4, #21
 800e1da:	4584      	cmp	ip, r0
 800e1dc:	bf38      	it	cc
 800e1de:	2304      	movcc	r3, #4
 800e1e0:	50ca      	str	r2, [r1, r3]
 800e1e2:	b10a      	cbz	r2, 800e1e8 <__lshift+0xa4>
 800e1e4:	f108 0602 	add.w	r6, r8, #2
 800e1e8:	3e01      	subs	r6, #1
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	612e      	str	r6, [r5, #16]
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	f7ff fdd8 	bl	800dda4 <_Bfree>
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1fe:	3301      	adds	r3, #1
 800e200:	e7c5      	b.n	800e18e <__lshift+0x4a>
 800e202:	3904      	subs	r1, #4
 800e204:	f853 2b04 	ldr.w	r2, [r3], #4
 800e208:	f841 2f04 	str.w	r2, [r1, #4]!
 800e20c:	459c      	cmp	ip, r3
 800e20e:	d8f9      	bhi.n	800e204 <__lshift+0xc0>
 800e210:	e7ea      	b.n	800e1e8 <__lshift+0xa4>
 800e212:	bf00      	nop
 800e214:	08013b26 	.word	0x08013b26
 800e218:	08013b63 	.word	0x08013b63

0800e21c <__mcmp>:
 800e21c:	b530      	push	{r4, r5, lr}
 800e21e:	6902      	ldr	r2, [r0, #16]
 800e220:	690c      	ldr	r4, [r1, #16]
 800e222:	1b12      	subs	r2, r2, r4
 800e224:	d10e      	bne.n	800e244 <__mcmp+0x28>
 800e226:	f100 0314 	add.w	r3, r0, #20
 800e22a:	3114      	adds	r1, #20
 800e22c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e23c:	42a5      	cmp	r5, r4
 800e23e:	d003      	beq.n	800e248 <__mcmp+0x2c>
 800e240:	d305      	bcc.n	800e24e <__mcmp+0x32>
 800e242:	2201      	movs	r2, #1
 800e244:	4610      	mov	r0, r2
 800e246:	bd30      	pop	{r4, r5, pc}
 800e248:	4283      	cmp	r3, r0
 800e24a:	d3f3      	bcc.n	800e234 <__mcmp+0x18>
 800e24c:	e7fa      	b.n	800e244 <__mcmp+0x28>
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e252:	e7f7      	b.n	800e244 <__mcmp+0x28>

0800e254 <__mdiff>:
 800e254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e258:	460c      	mov	r4, r1
 800e25a:	4606      	mov	r6, r0
 800e25c:	4611      	mov	r1, r2
 800e25e:	4620      	mov	r0, r4
 800e260:	4690      	mov	r8, r2
 800e262:	f7ff ffdb 	bl	800e21c <__mcmp>
 800e266:	1e05      	subs	r5, r0, #0
 800e268:	d110      	bne.n	800e28c <__mdiff+0x38>
 800e26a:	4629      	mov	r1, r5
 800e26c:	4630      	mov	r0, r6
 800e26e:	f7ff fd59 	bl	800dd24 <_Balloc>
 800e272:	b930      	cbnz	r0, 800e282 <__mdiff+0x2e>
 800e274:	4b3a      	ldr	r3, [pc, #232]	; (800e360 <__mdiff+0x10c>)
 800e276:	4602      	mov	r2, r0
 800e278:	f240 2137 	movw	r1, #567	; 0x237
 800e27c:	4839      	ldr	r0, [pc, #228]	; (800e364 <__mdiff+0x110>)
 800e27e:	f7fd ff13 	bl	800c0a8 <__assert_func>
 800e282:	2301      	movs	r3, #1
 800e284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	bfa4      	itt	ge
 800e28e:	4643      	movge	r3, r8
 800e290:	46a0      	movge	r8, r4
 800e292:	4630      	mov	r0, r6
 800e294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e298:	bfa6      	itte	ge
 800e29a:	461c      	movge	r4, r3
 800e29c:	2500      	movge	r5, #0
 800e29e:	2501      	movlt	r5, #1
 800e2a0:	f7ff fd40 	bl	800dd24 <_Balloc>
 800e2a4:	b920      	cbnz	r0, 800e2b0 <__mdiff+0x5c>
 800e2a6:	4b2e      	ldr	r3, [pc, #184]	; (800e360 <__mdiff+0x10c>)
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	f240 2145 	movw	r1, #581	; 0x245
 800e2ae:	e7e5      	b.n	800e27c <__mdiff+0x28>
 800e2b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e2b4:	6926      	ldr	r6, [r4, #16]
 800e2b6:	60c5      	str	r5, [r0, #12]
 800e2b8:	f104 0914 	add.w	r9, r4, #20
 800e2bc:	f108 0514 	add.w	r5, r8, #20
 800e2c0:	f100 0e14 	add.w	lr, r0, #20
 800e2c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e2c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e2cc:	f108 0210 	add.w	r2, r8, #16
 800e2d0:	46f2      	mov	sl, lr
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e2d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e2dc:	fa11 f88b 	uxtah	r8, r1, fp
 800e2e0:	b299      	uxth	r1, r3
 800e2e2:	0c1b      	lsrs	r3, r3, #16
 800e2e4:	eba8 0801 	sub.w	r8, r8, r1
 800e2e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e2ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e2f0:	fa1f f888 	uxth.w	r8, r8
 800e2f4:	1419      	asrs	r1, r3, #16
 800e2f6:	454e      	cmp	r6, r9
 800e2f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e2fc:	f84a 3b04 	str.w	r3, [sl], #4
 800e300:	d8e8      	bhi.n	800e2d4 <__mdiff+0x80>
 800e302:	1b33      	subs	r3, r6, r4
 800e304:	3b15      	subs	r3, #21
 800e306:	f023 0303 	bic.w	r3, r3, #3
 800e30a:	3304      	adds	r3, #4
 800e30c:	3415      	adds	r4, #21
 800e30e:	42a6      	cmp	r6, r4
 800e310:	bf38      	it	cc
 800e312:	2304      	movcc	r3, #4
 800e314:	441d      	add	r5, r3
 800e316:	4473      	add	r3, lr
 800e318:	469e      	mov	lr, r3
 800e31a:	462e      	mov	r6, r5
 800e31c:	4566      	cmp	r6, ip
 800e31e:	d30e      	bcc.n	800e33e <__mdiff+0xea>
 800e320:	f10c 0203 	add.w	r2, ip, #3
 800e324:	1b52      	subs	r2, r2, r5
 800e326:	f022 0203 	bic.w	r2, r2, #3
 800e32a:	3d03      	subs	r5, #3
 800e32c:	45ac      	cmp	ip, r5
 800e32e:	bf38      	it	cc
 800e330:	2200      	movcc	r2, #0
 800e332:	4413      	add	r3, r2
 800e334:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e338:	b17a      	cbz	r2, 800e35a <__mdiff+0x106>
 800e33a:	6107      	str	r7, [r0, #16]
 800e33c:	e7a4      	b.n	800e288 <__mdiff+0x34>
 800e33e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e342:	fa11 f288 	uxtah	r2, r1, r8
 800e346:	1414      	asrs	r4, r2, #16
 800e348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e34c:	b292      	uxth	r2, r2
 800e34e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e352:	f84e 2b04 	str.w	r2, [lr], #4
 800e356:	1421      	asrs	r1, r4, #16
 800e358:	e7e0      	b.n	800e31c <__mdiff+0xc8>
 800e35a:	3f01      	subs	r7, #1
 800e35c:	e7ea      	b.n	800e334 <__mdiff+0xe0>
 800e35e:	bf00      	nop
 800e360:	08013b26 	.word	0x08013b26
 800e364:	08013b63 	.word	0x08013b63

0800e368 <__d2b>:
 800e368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e36c:	460f      	mov	r7, r1
 800e36e:	2101      	movs	r1, #1
 800e370:	ec59 8b10 	vmov	r8, r9, d0
 800e374:	4616      	mov	r6, r2
 800e376:	f7ff fcd5 	bl	800dd24 <_Balloc>
 800e37a:	4604      	mov	r4, r0
 800e37c:	b930      	cbnz	r0, 800e38c <__d2b+0x24>
 800e37e:	4602      	mov	r2, r0
 800e380:	4b24      	ldr	r3, [pc, #144]	; (800e414 <__d2b+0xac>)
 800e382:	4825      	ldr	r0, [pc, #148]	; (800e418 <__d2b+0xb0>)
 800e384:	f240 310f 	movw	r1, #783	; 0x30f
 800e388:	f7fd fe8e 	bl	800c0a8 <__assert_func>
 800e38c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e394:	bb2d      	cbnz	r5, 800e3e2 <__d2b+0x7a>
 800e396:	9301      	str	r3, [sp, #4]
 800e398:	f1b8 0300 	subs.w	r3, r8, #0
 800e39c:	d026      	beq.n	800e3ec <__d2b+0x84>
 800e39e:	4668      	mov	r0, sp
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	f7ff fd87 	bl	800deb4 <__lo0bits>
 800e3a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e3aa:	b1e8      	cbz	r0, 800e3e8 <__d2b+0x80>
 800e3ac:	f1c0 0320 	rsb	r3, r0, #32
 800e3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e3b4:	430b      	orrs	r3, r1
 800e3b6:	40c2      	lsrs	r2, r0
 800e3b8:	6163      	str	r3, [r4, #20]
 800e3ba:	9201      	str	r2, [sp, #4]
 800e3bc:	9b01      	ldr	r3, [sp, #4]
 800e3be:	61a3      	str	r3, [r4, #24]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	bf14      	ite	ne
 800e3c4:	2202      	movne	r2, #2
 800e3c6:	2201      	moveq	r2, #1
 800e3c8:	6122      	str	r2, [r4, #16]
 800e3ca:	b1bd      	cbz	r5, 800e3fc <__d2b+0x94>
 800e3cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e3d0:	4405      	add	r5, r0
 800e3d2:	603d      	str	r5, [r7, #0]
 800e3d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e3d8:	6030      	str	r0, [r6, #0]
 800e3da:	4620      	mov	r0, r4
 800e3dc:	b003      	add	sp, #12
 800e3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3e6:	e7d6      	b.n	800e396 <__d2b+0x2e>
 800e3e8:	6161      	str	r1, [r4, #20]
 800e3ea:	e7e7      	b.n	800e3bc <__d2b+0x54>
 800e3ec:	a801      	add	r0, sp, #4
 800e3ee:	f7ff fd61 	bl	800deb4 <__lo0bits>
 800e3f2:	9b01      	ldr	r3, [sp, #4]
 800e3f4:	6163      	str	r3, [r4, #20]
 800e3f6:	3020      	adds	r0, #32
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	e7e5      	b.n	800e3c8 <__d2b+0x60>
 800e3fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e400:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e404:	6038      	str	r0, [r7, #0]
 800e406:	6918      	ldr	r0, [r3, #16]
 800e408:	f7ff fd34 	bl	800de74 <__hi0bits>
 800e40c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e410:	e7e2      	b.n	800e3d8 <__d2b+0x70>
 800e412:	bf00      	nop
 800e414:	08013b26 	.word	0x08013b26
 800e418:	08013b63 	.word	0x08013b63

0800e41c <fiprintf>:
 800e41c:	b40e      	push	{r1, r2, r3}
 800e41e:	b503      	push	{r0, r1, lr}
 800e420:	4601      	mov	r1, r0
 800e422:	ab03      	add	r3, sp, #12
 800e424:	4805      	ldr	r0, [pc, #20]	; (800e43c <fiprintf+0x20>)
 800e426:	f853 2b04 	ldr.w	r2, [r3], #4
 800e42a:	6800      	ldr	r0, [r0, #0]
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	f7ff f875 	bl	800d51c <_vfiprintf_r>
 800e432:	b002      	add	sp, #8
 800e434:	f85d eb04 	ldr.w	lr, [sp], #4
 800e438:	b003      	add	sp, #12
 800e43a:	4770      	bx	lr
 800e43c:	2000009c 	.word	0x2000009c

0800e440 <__submore>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	460c      	mov	r4, r1
 800e446:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e44c:	4299      	cmp	r1, r3
 800e44e:	d11d      	bne.n	800e48c <__submore+0x4c>
 800e450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e454:	f7ff f9a4 	bl	800d7a0 <_malloc_r>
 800e458:	b918      	cbnz	r0, 800e462 <__submore+0x22>
 800e45a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e466:	63a3      	str	r3, [r4, #56]	; 0x38
 800e468:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e46c:	6360      	str	r0, [r4, #52]	; 0x34
 800e46e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e472:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e476:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e47a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e47e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e482:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e486:	6020      	str	r0, [r4, #0]
 800e488:	2000      	movs	r0, #0
 800e48a:	e7e8      	b.n	800e45e <__submore+0x1e>
 800e48c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e48e:	0077      	lsls	r7, r6, #1
 800e490:	463a      	mov	r2, r7
 800e492:	f000 f80f 	bl	800e4b4 <_realloc_r>
 800e496:	4605      	mov	r5, r0
 800e498:	2800      	cmp	r0, #0
 800e49a:	d0de      	beq.n	800e45a <__submore+0x1a>
 800e49c:	eb00 0806 	add.w	r8, r0, r6
 800e4a0:	4601      	mov	r1, r0
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	f000 fa71 	bl	800e98c <memcpy>
 800e4aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e4ae:	f8c4 8000 	str.w	r8, [r4]
 800e4b2:	e7e9      	b.n	800e488 <__submore+0x48>

0800e4b4 <_realloc_r>:
 800e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	4614      	mov	r4, r2
 800e4bc:	460e      	mov	r6, r1
 800e4be:	b921      	cbnz	r1, 800e4ca <_realloc_r+0x16>
 800e4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	f7ff b96b 	b.w	800d7a0 <_malloc_r>
 800e4ca:	b92a      	cbnz	r2, 800e4d8 <_realloc_r+0x24>
 800e4cc:	f7fe fc86 	bl	800cddc <_free_r>
 800e4d0:	4625      	mov	r5, r4
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d8:	f000 fa95 	bl	800ea06 <_malloc_usable_size_r>
 800e4dc:	4284      	cmp	r4, r0
 800e4de:	4607      	mov	r7, r0
 800e4e0:	d802      	bhi.n	800e4e8 <_realloc_r+0x34>
 800e4e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4e6:	d812      	bhi.n	800e50e <_realloc_r+0x5a>
 800e4e8:	4621      	mov	r1, r4
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	f7ff f958 	bl	800d7a0 <_malloc_r>
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d0ed      	beq.n	800e4d2 <_realloc_r+0x1e>
 800e4f6:	42bc      	cmp	r4, r7
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	bf28      	it	cs
 800e4fe:	463a      	movcs	r2, r7
 800e500:	f000 fa44 	bl	800e98c <memcpy>
 800e504:	4631      	mov	r1, r6
 800e506:	4640      	mov	r0, r8
 800e508:	f7fe fc68 	bl	800cddc <_free_r>
 800e50c:	e7e1      	b.n	800e4d2 <_realloc_r+0x1e>
 800e50e:	4635      	mov	r5, r6
 800e510:	e7df      	b.n	800e4d2 <_realloc_r+0x1e>
	...

0800e514 <_strtol_l.constprop.0>:
 800e514:	2b01      	cmp	r3, #1
 800e516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e51a:	d001      	beq.n	800e520 <_strtol_l.constprop.0+0xc>
 800e51c:	2b24      	cmp	r3, #36	; 0x24
 800e51e:	d906      	bls.n	800e52e <_strtol_l.constprop.0+0x1a>
 800e520:	f7fd fd94 	bl	800c04c <__errno>
 800e524:	2316      	movs	r3, #22
 800e526:	6003      	str	r3, [r0, #0]
 800e528:	2000      	movs	r0, #0
 800e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e614 <_strtol_l.constprop.0+0x100>
 800e532:	460d      	mov	r5, r1
 800e534:	462e      	mov	r6, r5
 800e536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e53a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e53e:	f017 0708 	ands.w	r7, r7, #8
 800e542:	d1f7      	bne.n	800e534 <_strtol_l.constprop.0+0x20>
 800e544:	2c2d      	cmp	r4, #45	; 0x2d
 800e546:	d132      	bne.n	800e5ae <_strtol_l.constprop.0+0x9a>
 800e548:	782c      	ldrb	r4, [r5, #0]
 800e54a:	2701      	movs	r7, #1
 800e54c:	1cb5      	adds	r5, r6, #2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d05b      	beq.n	800e60a <_strtol_l.constprop.0+0xf6>
 800e552:	2b10      	cmp	r3, #16
 800e554:	d109      	bne.n	800e56a <_strtol_l.constprop.0+0x56>
 800e556:	2c30      	cmp	r4, #48	; 0x30
 800e558:	d107      	bne.n	800e56a <_strtol_l.constprop.0+0x56>
 800e55a:	782c      	ldrb	r4, [r5, #0]
 800e55c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e560:	2c58      	cmp	r4, #88	; 0x58
 800e562:	d14d      	bne.n	800e600 <_strtol_l.constprop.0+0xec>
 800e564:	786c      	ldrb	r4, [r5, #1]
 800e566:	2310      	movs	r3, #16
 800e568:	3502      	adds	r5, #2
 800e56a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e56e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e572:	f04f 0e00 	mov.w	lr, #0
 800e576:	fbb8 f9f3 	udiv	r9, r8, r3
 800e57a:	4676      	mov	r6, lr
 800e57c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e580:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e584:	f1bc 0f09 	cmp.w	ip, #9
 800e588:	d816      	bhi.n	800e5b8 <_strtol_l.constprop.0+0xa4>
 800e58a:	4664      	mov	r4, ip
 800e58c:	42a3      	cmp	r3, r4
 800e58e:	dd24      	ble.n	800e5da <_strtol_l.constprop.0+0xc6>
 800e590:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e594:	d008      	beq.n	800e5a8 <_strtol_l.constprop.0+0x94>
 800e596:	45b1      	cmp	r9, r6
 800e598:	d31c      	bcc.n	800e5d4 <_strtol_l.constprop.0+0xc0>
 800e59a:	d101      	bne.n	800e5a0 <_strtol_l.constprop.0+0x8c>
 800e59c:	45a2      	cmp	sl, r4
 800e59e:	db19      	blt.n	800e5d4 <_strtol_l.constprop.0+0xc0>
 800e5a0:	fb06 4603 	mla	r6, r6, r3, r4
 800e5a4:	f04f 0e01 	mov.w	lr, #1
 800e5a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5ac:	e7e8      	b.n	800e580 <_strtol_l.constprop.0+0x6c>
 800e5ae:	2c2b      	cmp	r4, #43	; 0x2b
 800e5b0:	bf04      	itt	eq
 800e5b2:	782c      	ldrbeq	r4, [r5, #0]
 800e5b4:	1cb5      	addeq	r5, r6, #2
 800e5b6:	e7ca      	b.n	800e54e <_strtol_l.constprop.0+0x3a>
 800e5b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e5bc:	f1bc 0f19 	cmp.w	ip, #25
 800e5c0:	d801      	bhi.n	800e5c6 <_strtol_l.constprop.0+0xb2>
 800e5c2:	3c37      	subs	r4, #55	; 0x37
 800e5c4:	e7e2      	b.n	800e58c <_strtol_l.constprop.0+0x78>
 800e5c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e5ca:	f1bc 0f19 	cmp.w	ip, #25
 800e5ce:	d804      	bhi.n	800e5da <_strtol_l.constprop.0+0xc6>
 800e5d0:	3c57      	subs	r4, #87	; 0x57
 800e5d2:	e7db      	b.n	800e58c <_strtol_l.constprop.0+0x78>
 800e5d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e5d8:	e7e6      	b.n	800e5a8 <_strtol_l.constprop.0+0x94>
 800e5da:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800e5de:	d105      	bne.n	800e5ec <_strtol_l.constprop.0+0xd8>
 800e5e0:	2322      	movs	r3, #34	; 0x22
 800e5e2:	6003      	str	r3, [r0, #0]
 800e5e4:	4646      	mov	r6, r8
 800e5e6:	b942      	cbnz	r2, 800e5fa <_strtol_l.constprop.0+0xe6>
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	e79e      	b.n	800e52a <_strtol_l.constprop.0+0x16>
 800e5ec:	b107      	cbz	r7, 800e5f0 <_strtol_l.constprop.0+0xdc>
 800e5ee:	4276      	negs	r6, r6
 800e5f0:	2a00      	cmp	r2, #0
 800e5f2:	d0f9      	beq.n	800e5e8 <_strtol_l.constprop.0+0xd4>
 800e5f4:	f1be 0f00 	cmp.w	lr, #0
 800e5f8:	d000      	beq.n	800e5fc <_strtol_l.constprop.0+0xe8>
 800e5fa:	1e69      	subs	r1, r5, #1
 800e5fc:	6011      	str	r1, [r2, #0]
 800e5fe:	e7f3      	b.n	800e5e8 <_strtol_l.constprop.0+0xd4>
 800e600:	2430      	movs	r4, #48	; 0x30
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1b1      	bne.n	800e56a <_strtol_l.constprop.0+0x56>
 800e606:	2308      	movs	r3, #8
 800e608:	e7af      	b.n	800e56a <_strtol_l.constprop.0+0x56>
 800e60a:	2c30      	cmp	r4, #48	; 0x30
 800e60c:	d0a5      	beq.n	800e55a <_strtol_l.constprop.0+0x46>
 800e60e:	230a      	movs	r3, #10
 800e610:	e7ab      	b.n	800e56a <_strtol_l.constprop.0+0x56>
 800e612:	bf00      	nop
 800e614:	08013cc7 	.word	0x08013cc7

0800e618 <_strtol_r>:
 800e618:	f7ff bf7c 	b.w	800e514 <_strtol_l.constprop.0>

0800e61c <_strtoul_l.constprop.0>:
 800e61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e620:	4f36      	ldr	r7, [pc, #216]	; (800e6fc <_strtoul_l.constprop.0+0xe0>)
 800e622:	4686      	mov	lr, r0
 800e624:	460d      	mov	r5, r1
 800e626:	4628      	mov	r0, r5
 800e628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e62c:	5d3e      	ldrb	r6, [r7, r4]
 800e62e:	f016 0608 	ands.w	r6, r6, #8
 800e632:	d1f8      	bne.n	800e626 <_strtoul_l.constprop.0+0xa>
 800e634:	2c2d      	cmp	r4, #45	; 0x2d
 800e636:	d130      	bne.n	800e69a <_strtoul_l.constprop.0+0x7e>
 800e638:	782c      	ldrb	r4, [r5, #0]
 800e63a:	2601      	movs	r6, #1
 800e63c:	1c85      	adds	r5, r0, #2
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d057      	beq.n	800e6f2 <_strtoul_l.constprop.0+0xd6>
 800e642:	2b10      	cmp	r3, #16
 800e644:	d109      	bne.n	800e65a <_strtoul_l.constprop.0+0x3e>
 800e646:	2c30      	cmp	r4, #48	; 0x30
 800e648:	d107      	bne.n	800e65a <_strtoul_l.constprop.0+0x3e>
 800e64a:	7828      	ldrb	r0, [r5, #0]
 800e64c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e650:	2858      	cmp	r0, #88	; 0x58
 800e652:	d149      	bne.n	800e6e8 <_strtoul_l.constprop.0+0xcc>
 800e654:	786c      	ldrb	r4, [r5, #1]
 800e656:	2310      	movs	r3, #16
 800e658:	3502      	adds	r5, #2
 800e65a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e65e:	2700      	movs	r7, #0
 800e660:	fbb8 f8f3 	udiv	r8, r8, r3
 800e664:	fb03 f908 	mul.w	r9, r3, r8
 800e668:	ea6f 0909 	mvn.w	r9, r9
 800e66c:	4638      	mov	r0, r7
 800e66e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e672:	f1bc 0f09 	cmp.w	ip, #9
 800e676:	d815      	bhi.n	800e6a4 <_strtoul_l.constprop.0+0x88>
 800e678:	4664      	mov	r4, ip
 800e67a:	42a3      	cmp	r3, r4
 800e67c:	dd23      	ble.n	800e6c6 <_strtoul_l.constprop.0+0xaa>
 800e67e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800e682:	d007      	beq.n	800e694 <_strtoul_l.constprop.0+0x78>
 800e684:	4580      	cmp	r8, r0
 800e686:	d31b      	bcc.n	800e6c0 <_strtoul_l.constprop.0+0xa4>
 800e688:	d101      	bne.n	800e68e <_strtoul_l.constprop.0+0x72>
 800e68a:	45a1      	cmp	r9, r4
 800e68c:	db18      	blt.n	800e6c0 <_strtoul_l.constprop.0+0xa4>
 800e68e:	fb00 4003 	mla	r0, r0, r3, r4
 800e692:	2701      	movs	r7, #1
 800e694:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e698:	e7e9      	b.n	800e66e <_strtoul_l.constprop.0+0x52>
 800e69a:	2c2b      	cmp	r4, #43	; 0x2b
 800e69c:	bf04      	itt	eq
 800e69e:	782c      	ldrbeq	r4, [r5, #0]
 800e6a0:	1c85      	addeq	r5, r0, #2
 800e6a2:	e7cc      	b.n	800e63e <_strtoul_l.constprop.0+0x22>
 800e6a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e6a8:	f1bc 0f19 	cmp.w	ip, #25
 800e6ac:	d801      	bhi.n	800e6b2 <_strtoul_l.constprop.0+0x96>
 800e6ae:	3c37      	subs	r4, #55	; 0x37
 800e6b0:	e7e3      	b.n	800e67a <_strtoul_l.constprop.0+0x5e>
 800e6b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6b6:	f1bc 0f19 	cmp.w	ip, #25
 800e6ba:	d804      	bhi.n	800e6c6 <_strtoul_l.constprop.0+0xaa>
 800e6bc:	3c57      	subs	r4, #87	; 0x57
 800e6be:	e7dc      	b.n	800e67a <_strtoul_l.constprop.0+0x5e>
 800e6c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6c4:	e7e6      	b.n	800e694 <_strtoul_l.constprop.0+0x78>
 800e6c6:	1c7b      	adds	r3, r7, #1
 800e6c8:	d106      	bne.n	800e6d8 <_strtoul_l.constprop.0+0xbc>
 800e6ca:	2322      	movs	r3, #34	; 0x22
 800e6cc:	f8ce 3000 	str.w	r3, [lr]
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	b932      	cbnz	r2, 800e6e2 <_strtoul_l.constprop.0+0xc6>
 800e6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d8:	b106      	cbz	r6, 800e6dc <_strtoul_l.constprop.0+0xc0>
 800e6da:	4240      	negs	r0, r0
 800e6dc:	2a00      	cmp	r2, #0
 800e6de:	d0f9      	beq.n	800e6d4 <_strtoul_l.constprop.0+0xb8>
 800e6e0:	b107      	cbz	r7, 800e6e4 <_strtoul_l.constprop.0+0xc8>
 800e6e2:	1e69      	subs	r1, r5, #1
 800e6e4:	6011      	str	r1, [r2, #0]
 800e6e6:	e7f5      	b.n	800e6d4 <_strtoul_l.constprop.0+0xb8>
 800e6e8:	2430      	movs	r4, #48	; 0x30
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1b5      	bne.n	800e65a <_strtoul_l.constprop.0+0x3e>
 800e6ee:	2308      	movs	r3, #8
 800e6f0:	e7b3      	b.n	800e65a <_strtoul_l.constprop.0+0x3e>
 800e6f2:	2c30      	cmp	r4, #48	; 0x30
 800e6f4:	d0a9      	beq.n	800e64a <_strtoul_l.constprop.0+0x2e>
 800e6f6:	230a      	movs	r3, #10
 800e6f8:	e7af      	b.n	800e65a <_strtoul_l.constprop.0+0x3e>
 800e6fa:	bf00      	nop
 800e6fc:	08013cc7 	.word	0x08013cc7

0800e700 <_strtoul_r>:
 800e700:	f7ff bf8c 	b.w	800e61c <_strtoul_l.constprop.0>

0800e704 <__swbuf_r>:
 800e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e706:	460e      	mov	r6, r1
 800e708:	4614      	mov	r4, r2
 800e70a:	4605      	mov	r5, r0
 800e70c:	b118      	cbz	r0, 800e716 <__swbuf_r+0x12>
 800e70e:	6a03      	ldr	r3, [r0, #32]
 800e710:	b90b      	cbnz	r3, 800e716 <__swbuf_r+0x12>
 800e712:	f7fd fbc7 	bl	800bea4 <__sinit>
 800e716:	69a3      	ldr	r3, [r4, #24]
 800e718:	60a3      	str	r3, [r4, #8]
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	071a      	lsls	r2, r3, #28
 800e71e:	d525      	bpl.n	800e76c <__swbuf_r+0x68>
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	b31b      	cbz	r3, 800e76c <__swbuf_r+0x68>
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	6922      	ldr	r2, [r4, #16]
 800e728:	1a98      	subs	r0, r3, r2
 800e72a:	6963      	ldr	r3, [r4, #20]
 800e72c:	b2f6      	uxtb	r6, r6
 800e72e:	4283      	cmp	r3, r0
 800e730:	4637      	mov	r7, r6
 800e732:	dc04      	bgt.n	800e73e <__swbuf_r+0x3a>
 800e734:	4621      	mov	r1, r4
 800e736:	4628      	mov	r0, r5
 800e738:	f7ff fac0 	bl	800dcbc <_fflush_r>
 800e73c:	b9e0      	cbnz	r0, 800e778 <__swbuf_r+0x74>
 800e73e:	68a3      	ldr	r3, [r4, #8]
 800e740:	3b01      	subs	r3, #1
 800e742:	60a3      	str	r3, [r4, #8]
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	6022      	str	r2, [r4, #0]
 800e74a:	701e      	strb	r6, [r3, #0]
 800e74c:	6962      	ldr	r2, [r4, #20]
 800e74e:	1c43      	adds	r3, r0, #1
 800e750:	429a      	cmp	r2, r3
 800e752:	d004      	beq.n	800e75e <__swbuf_r+0x5a>
 800e754:	89a3      	ldrh	r3, [r4, #12]
 800e756:	07db      	lsls	r3, r3, #31
 800e758:	d506      	bpl.n	800e768 <__swbuf_r+0x64>
 800e75a:	2e0a      	cmp	r6, #10
 800e75c:	d104      	bne.n	800e768 <__swbuf_r+0x64>
 800e75e:	4621      	mov	r1, r4
 800e760:	4628      	mov	r0, r5
 800e762:	f7ff faab 	bl	800dcbc <_fflush_r>
 800e766:	b938      	cbnz	r0, 800e778 <__swbuf_r+0x74>
 800e768:	4638      	mov	r0, r7
 800e76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e76c:	4621      	mov	r1, r4
 800e76e:	4628      	mov	r0, r5
 800e770:	f000 f806 	bl	800e780 <__swsetup_r>
 800e774:	2800      	cmp	r0, #0
 800e776:	d0d5      	beq.n	800e724 <__swbuf_r+0x20>
 800e778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e77c:	e7f4      	b.n	800e768 <__swbuf_r+0x64>
	...

0800e780 <__swsetup_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	4b2a      	ldr	r3, [pc, #168]	; (800e82c <__swsetup_r+0xac>)
 800e784:	4605      	mov	r5, r0
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	460c      	mov	r4, r1
 800e78a:	b118      	cbz	r0, 800e794 <__swsetup_r+0x14>
 800e78c:	6a03      	ldr	r3, [r0, #32]
 800e78e:	b90b      	cbnz	r3, 800e794 <__swsetup_r+0x14>
 800e790:	f7fd fb88 	bl	800bea4 <__sinit>
 800e794:	89a3      	ldrh	r3, [r4, #12]
 800e796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e79a:	0718      	lsls	r0, r3, #28
 800e79c:	d422      	bmi.n	800e7e4 <__swsetup_r+0x64>
 800e79e:	06d9      	lsls	r1, r3, #27
 800e7a0:	d407      	bmi.n	800e7b2 <__swsetup_r+0x32>
 800e7a2:	2309      	movs	r3, #9
 800e7a4:	602b      	str	r3, [r5, #0]
 800e7a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7aa:	81a3      	strh	r3, [r4, #12]
 800e7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7b0:	e034      	b.n	800e81c <__swsetup_r+0x9c>
 800e7b2:	0758      	lsls	r0, r3, #29
 800e7b4:	d512      	bpl.n	800e7dc <__swsetup_r+0x5c>
 800e7b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7b8:	b141      	cbz	r1, 800e7cc <__swsetup_r+0x4c>
 800e7ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7be:	4299      	cmp	r1, r3
 800e7c0:	d002      	beq.n	800e7c8 <__swsetup_r+0x48>
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f7fe fb0a 	bl	800cddc <_free_r>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	6363      	str	r3, [r4, #52]	; 0x34
 800e7cc:	89a3      	ldrh	r3, [r4, #12]
 800e7ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7d2:	81a3      	strh	r3, [r4, #12]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	6063      	str	r3, [r4, #4]
 800e7d8:	6923      	ldr	r3, [r4, #16]
 800e7da:	6023      	str	r3, [r4, #0]
 800e7dc:	89a3      	ldrh	r3, [r4, #12]
 800e7de:	f043 0308 	orr.w	r3, r3, #8
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	b94b      	cbnz	r3, 800e7fc <__swsetup_r+0x7c>
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7f2:	d003      	beq.n	800e7fc <__swsetup_r+0x7c>
 800e7f4:	4621      	mov	r1, r4
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f000 f840 	bl	800e87c <__smakebuf_r>
 800e7fc:	89a0      	ldrh	r0, [r4, #12]
 800e7fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e802:	f010 0301 	ands.w	r3, r0, #1
 800e806:	d00a      	beq.n	800e81e <__swsetup_r+0x9e>
 800e808:	2300      	movs	r3, #0
 800e80a:	60a3      	str	r3, [r4, #8]
 800e80c:	6963      	ldr	r3, [r4, #20]
 800e80e:	425b      	negs	r3, r3
 800e810:	61a3      	str	r3, [r4, #24]
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	b943      	cbnz	r3, 800e828 <__swsetup_r+0xa8>
 800e816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e81a:	d1c4      	bne.n	800e7a6 <__swsetup_r+0x26>
 800e81c:	bd38      	pop	{r3, r4, r5, pc}
 800e81e:	0781      	lsls	r1, r0, #30
 800e820:	bf58      	it	pl
 800e822:	6963      	ldrpl	r3, [r4, #20]
 800e824:	60a3      	str	r3, [r4, #8]
 800e826:	e7f4      	b.n	800e812 <__swsetup_r+0x92>
 800e828:	2000      	movs	r0, #0
 800e82a:	e7f7      	b.n	800e81c <__swsetup_r+0x9c>
 800e82c:	2000009c 	.word	0x2000009c

0800e830 <__swhatbuf_r>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	460c      	mov	r4, r1
 800e834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e838:	2900      	cmp	r1, #0
 800e83a:	b096      	sub	sp, #88	; 0x58
 800e83c:	4615      	mov	r5, r2
 800e83e:	461e      	mov	r6, r3
 800e840:	da0d      	bge.n	800e85e <__swhatbuf_r+0x2e>
 800e842:	89a3      	ldrh	r3, [r4, #12]
 800e844:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e848:	f04f 0100 	mov.w	r1, #0
 800e84c:	bf0c      	ite	eq
 800e84e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e852:	2340      	movne	r3, #64	; 0x40
 800e854:	2000      	movs	r0, #0
 800e856:	6031      	str	r1, [r6, #0]
 800e858:	602b      	str	r3, [r5, #0]
 800e85a:	b016      	add	sp, #88	; 0x58
 800e85c:	bd70      	pop	{r4, r5, r6, pc}
 800e85e:	466a      	mov	r2, sp
 800e860:	f000 f862 	bl	800e928 <_fstat_r>
 800e864:	2800      	cmp	r0, #0
 800e866:	dbec      	blt.n	800e842 <__swhatbuf_r+0x12>
 800e868:	9901      	ldr	r1, [sp, #4]
 800e86a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e86e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e872:	4259      	negs	r1, r3
 800e874:	4159      	adcs	r1, r3
 800e876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e87a:	e7eb      	b.n	800e854 <__swhatbuf_r+0x24>

0800e87c <__smakebuf_r>:
 800e87c:	898b      	ldrh	r3, [r1, #12]
 800e87e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e880:	079d      	lsls	r5, r3, #30
 800e882:	4606      	mov	r6, r0
 800e884:	460c      	mov	r4, r1
 800e886:	d507      	bpl.n	800e898 <__smakebuf_r+0x1c>
 800e888:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	6123      	str	r3, [r4, #16]
 800e890:	2301      	movs	r3, #1
 800e892:	6163      	str	r3, [r4, #20]
 800e894:	b002      	add	sp, #8
 800e896:	bd70      	pop	{r4, r5, r6, pc}
 800e898:	ab01      	add	r3, sp, #4
 800e89a:	466a      	mov	r2, sp
 800e89c:	f7ff ffc8 	bl	800e830 <__swhatbuf_r>
 800e8a0:	9900      	ldr	r1, [sp, #0]
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f7fe ff7b 	bl	800d7a0 <_malloc_r>
 800e8aa:	b948      	cbnz	r0, 800e8c0 <__smakebuf_r+0x44>
 800e8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b0:	059a      	lsls	r2, r3, #22
 800e8b2:	d4ef      	bmi.n	800e894 <__smakebuf_r+0x18>
 800e8b4:	f023 0303 	bic.w	r3, r3, #3
 800e8b8:	f043 0302 	orr.w	r3, r3, #2
 800e8bc:	81a3      	strh	r3, [r4, #12]
 800e8be:	e7e3      	b.n	800e888 <__smakebuf_r+0xc>
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	6020      	str	r0, [r4, #0]
 800e8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8c8:	81a3      	strh	r3, [r4, #12]
 800e8ca:	9b00      	ldr	r3, [sp, #0]
 800e8cc:	6163      	str	r3, [r4, #20]
 800e8ce:	9b01      	ldr	r3, [sp, #4]
 800e8d0:	6120      	str	r0, [r4, #16]
 800e8d2:	b15b      	cbz	r3, 800e8ec <__smakebuf_r+0x70>
 800e8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f000 f837 	bl	800e94c <_isatty_r>
 800e8de:	b128      	cbz	r0, 800e8ec <__smakebuf_r+0x70>
 800e8e0:	89a3      	ldrh	r3, [r4, #12]
 800e8e2:	f023 0303 	bic.w	r3, r3, #3
 800e8e6:	f043 0301 	orr.w	r3, r3, #1
 800e8ea:	81a3      	strh	r3, [r4, #12]
 800e8ec:	89a3      	ldrh	r3, [r4, #12]
 800e8ee:	431d      	orrs	r5, r3
 800e8f0:	81a5      	strh	r5, [r4, #12]
 800e8f2:	e7cf      	b.n	800e894 <__smakebuf_r+0x18>

0800e8f4 <memmove>:
 800e8f4:	4288      	cmp	r0, r1
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	eb01 0402 	add.w	r4, r1, r2
 800e8fc:	d902      	bls.n	800e904 <memmove+0x10>
 800e8fe:	4284      	cmp	r4, r0
 800e900:	4623      	mov	r3, r4
 800e902:	d807      	bhi.n	800e914 <memmove+0x20>
 800e904:	1e43      	subs	r3, r0, #1
 800e906:	42a1      	cmp	r1, r4
 800e908:	d008      	beq.n	800e91c <memmove+0x28>
 800e90a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e90e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e912:	e7f8      	b.n	800e906 <memmove+0x12>
 800e914:	4402      	add	r2, r0
 800e916:	4601      	mov	r1, r0
 800e918:	428a      	cmp	r2, r1
 800e91a:	d100      	bne.n	800e91e <memmove+0x2a>
 800e91c:	bd10      	pop	{r4, pc}
 800e91e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e926:	e7f7      	b.n	800e918 <memmove+0x24>

0800e928 <_fstat_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4d07      	ldr	r5, [pc, #28]	; (800e948 <_fstat_r+0x20>)
 800e92c:	2300      	movs	r3, #0
 800e92e:	4604      	mov	r4, r0
 800e930:	4608      	mov	r0, r1
 800e932:	4611      	mov	r1, r2
 800e934:	602b      	str	r3, [r5, #0]
 800e936:	f7f5 fea4 	bl	8004682 <_fstat>
 800e93a:	1c43      	adds	r3, r0, #1
 800e93c:	d102      	bne.n	800e944 <_fstat_r+0x1c>
 800e93e:	682b      	ldr	r3, [r5, #0]
 800e940:	b103      	cbz	r3, 800e944 <_fstat_r+0x1c>
 800e942:	6023      	str	r3, [r4, #0]
 800e944:	bd38      	pop	{r3, r4, r5, pc}
 800e946:	bf00      	nop
 800e948:	20009110 	.word	0x20009110

0800e94c <_isatty_r>:
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	4d06      	ldr	r5, [pc, #24]	; (800e968 <_isatty_r+0x1c>)
 800e950:	2300      	movs	r3, #0
 800e952:	4604      	mov	r4, r0
 800e954:	4608      	mov	r0, r1
 800e956:	602b      	str	r3, [r5, #0]
 800e958:	f7f5 fea3 	bl	80046a2 <_isatty>
 800e95c:	1c43      	adds	r3, r0, #1
 800e95e:	d102      	bne.n	800e966 <_isatty_r+0x1a>
 800e960:	682b      	ldr	r3, [r5, #0]
 800e962:	b103      	cbz	r3, 800e966 <_isatty_r+0x1a>
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	bd38      	pop	{r3, r4, r5, pc}
 800e968:	20009110 	.word	0x20009110

0800e96c <_sbrk_r>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	4d06      	ldr	r5, [pc, #24]	; (800e988 <_sbrk_r+0x1c>)
 800e970:	2300      	movs	r3, #0
 800e972:	4604      	mov	r4, r0
 800e974:	4608      	mov	r0, r1
 800e976:	602b      	str	r3, [r5, #0]
 800e978:	f7f5 feac 	bl	80046d4 <_sbrk>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	d102      	bne.n	800e986 <_sbrk_r+0x1a>
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	b103      	cbz	r3, 800e986 <_sbrk_r+0x1a>
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	bd38      	pop	{r3, r4, r5, pc}
 800e988:	20009110 	.word	0x20009110

0800e98c <memcpy>:
 800e98c:	440a      	add	r2, r1
 800e98e:	4291      	cmp	r1, r2
 800e990:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e994:	d100      	bne.n	800e998 <memcpy+0xc>
 800e996:	4770      	bx	lr
 800e998:	b510      	push	{r4, lr}
 800e99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	d1f9      	bne.n	800e99a <memcpy+0xe>
 800e9a6:	bd10      	pop	{r4, pc}

0800e9a8 <abort>:
 800e9a8:	b508      	push	{r3, lr}
 800e9aa:	2006      	movs	r0, #6
 800e9ac:	f000 f868 	bl	800ea80 <raise>
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	f7f5 fe17 	bl	80045e4 <_exit>

0800e9b6 <_calloc_r>:
 800e9b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9b8:	fba1 2402 	umull	r2, r4, r1, r2
 800e9bc:	b94c      	cbnz	r4, 800e9d2 <_calloc_r+0x1c>
 800e9be:	4611      	mov	r1, r2
 800e9c0:	9201      	str	r2, [sp, #4]
 800e9c2:	f7fe feed 	bl	800d7a0 <_malloc_r>
 800e9c6:	9a01      	ldr	r2, [sp, #4]
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	b930      	cbnz	r0, 800e9da <_calloc_r+0x24>
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	b003      	add	sp, #12
 800e9d0:	bd30      	pop	{r4, r5, pc}
 800e9d2:	220c      	movs	r2, #12
 800e9d4:	6002      	str	r2, [r0, #0]
 800e9d6:	2500      	movs	r5, #0
 800e9d8:	e7f8      	b.n	800e9cc <_calloc_r+0x16>
 800e9da:	4621      	mov	r1, r4
 800e9dc:	f7fd fae4 	bl	800bfa8 <memset>
 800e9e0:	e7f4      	b.n	800e9cc <_calloc_r+0x16>

0800e9e2 <__ascii_mbtowc>:
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	b901      	cbnz	r1, 800e9e8 <__ascii_mbtowc+0x6>
 800e9e6:	a901      	add	r1, sp, #4
 800e9e8:	b142      	cbz	r2, 800e9fc <__ascii_mbtowc+0x1a>
 800e9ea:	b14b      	cbz	r3, 800ea00 <__ascii_mbtowc+0x1e>
 800e9ec:	7813      	ldrb	r3, [r2, #0]
 800e9ee:	600b      	str	r3, [r1, #0]
 800e9f0:	7812      	ldrb	r2, [r2, #0]
 800e9f2:	1e10      	subs	r0, r2, #0
 800e9f4:	bf18      	it	ne
 800e9f6:	2001      	movne	r0, #1
 800e9f8:	b002      	add	sp, #8
 800e9fa:	4770      	bx	lr
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	e7fb      	b.n	800e9f8 <__ascii_mbtowc+0x16>
 800ea00:	f06f 0001 	mvn.w	r0, #1
 800ea04:	e7f8      	b.n	800e9f8 <__ascii_mbtowc+0x16>

0800ea06 <_malloc_usable_size_r>:
 800ea06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea0a:	1f18      	subs	r0, r3, #4
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfbc      	itt	lt
 800ea10:	580b      	ldrlt	r3, [r1, r0]
 800ea12:	18c0      	addlt	r0, r0, r3
 800ea14:	4770      	bx	lr

0800ea16 <__ascii_wctomb>:
 800ea16:	b149      	cbz	r1, 800ea2c <__ascii_wctomb+0x16>
 800ea18:	2aff      	cmp	r2, #255	; 0xff
 800ea1a:	bf85      	ittet	hi
 800ea1c:	238a      	movhi	r3, #138	; 0x8a
 800ea1e:	6003      	strhi	r3, [r0, #0]
 800ea20:	700a      	strbls	r2, [r1, #0]
 800ea22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ea26:	bf98      	it	ls
 800ea28:	2001      	movls	r0, #1
 800ea2a:	4770      	bx	lr
 800ea2c:	4608      	mov	r0, r1
 800ea2e:	4770      	bx	lr

0800ea30 <_raise_r>:
 800ea30:	291f      	cmp	r1, #31
 800ea32:	b538      	push	{r3, r4, r5, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	460d      	mov	r5, r1
 800ea38:	d904      	bls.n	800ea44 <_raise_r+0x14>
 800ea3a:	2316      	movs	r3, #22
 800ea3c:	6003      	str	r3, [r0, #0]
 800ea3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea46:	b112      	cbz	r2, 800ea4e <_raise_r+0x1e>
 800ea48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea4c:	b94b      	cbnz	r3, 800ea62 <_raise_r+0x32>
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 f830 	bl	800eab4 <_getpid_r>
 800ea54:	462a      	mov	r2, r5
 800ea56:	4601      	mov	r1, r0
 800ea58:	4620      	mov	r0, r4
 800ea5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea5e:	f000 b817 	b.w	800ea90 <_kill_r>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d00a      	beq.n	800ea7c <_raise_r+0x4c>
 800ea66:	1c59      	adds	r1, r3, #1
 800ea68:	d103      	bne.n	800ea72 <_raise_r+0x42>
 800ea6a:	2316      	movs	r3, #22
 800ea6c:	6003      	str	r3, [r0, #0]
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e7e7      	b.n	800ea42 <_raise_r+0x12>
 800ea72:	2400      	movs	r4, #0
 800ea74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea78:	4628      	mov	r0, r5
 800ea7a:	4798      	blx	r3
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	e7e0      	b.n	800ea42 <_raise_r+0x12>

0800ea80 <raise>:
 800ea80:	4b02      	ldr	r3, [pc, #8]	; (800ea8c <raise+0xc>)
 800ea82:	4601      	mov	r1, r0
 800ea84:	6818      	ldr	r0, [r3, #0]
 800ea86:	f7ff bfd3 	b.w	800ea30 <_raise_r>
 800ea8a:	bf00      	nop
 800ea8c:	2000009c 	.word	0x2000009c

0800ea90 <_kill_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d07      	ldr	r5, [pc, #28]	; (800eab0 <_kill_r+0x20>)
 800ea94:	2300      	movs	r3, #0
 800ea96:	4604      	mov	r4, r0
 800ea98:	4608      	mov	r0, r1
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	f7f5 fd91 	bl	80045c4 <_kill>
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	d102      	bne.n	800eaac <_kill_r+0x1c>
 800eaa6:	682b      	ldr	r3, [r5, #0]
 800eaa8:	b103      	cbz	r3, 800eaac <_kill_r+0x1c>
 800eaaa:	6023      	str	r3, [r4, #0]
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop
 800eab0:	20009110 	.word	0x20009110

0800eab4 <_getpid_r>:
 800eab4:	f7f5 bd7e 	b.w	80045b4 <_getpid>

0800eab8 <acos>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	ed2d 8b02 	vpush	{d8}
 800eabe:	ec55 4b10 	vmov	r4, r5, d0
 800eac2:	f000 f82d 	bl	800eb20 <__ieee754_acos>
 800eac6:	4622      	mov	r2, r4
 800eac8:	462b      	mov	r3, r5
 800eaca:	4620      	mov	r0, r4
 800eacc:	4629      	mov	r1, r5
 800eace:	eeb0 8a40 	vmov.f32	s16, s0
 800ead2:	eef0 8a60 	vmov.f32	s17, s1
 800ead6:	f7f2 f849 	bl	8000b6c <__aeabi_dcmpun>
 800eada:	b9a8      	cbnz	r0, 800eb08 <acos+0x50>
 800eadc:	ec45 4b10 	vmov	d0, r4, r5
 800eae0:	f000 faaa 	bl	800f038 <fabs>
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <acos+0x60>)
 800eae6:	ec51 0b10 	vmov	r0, r1, d0
 800eaea:	2200      	movs	r2, #0
 800eaec:	f7f2 f834 	bl	8000b58 <__aeabi_dcmpgt>
 800eaf0:	b150      	cbz	r0, 800eb08 <acos+0x50>
 800eaf2:	f7fd faab 	bl	800c04c <__errno>
 800eaf6:	ecbd 8b02 	vpop	{d8}
 800eafa:	2321      	movs	r3, #33	; 0x21
 800eafc:	6003      	str	r3, [r0, #0]
 800eafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb02:	4806      	ldr	r0, [pc, #24]	; (800eb1c <acos+0x64>)
 800eb04:	f000 bc00 	b.w	800f308 <nan>
 800eb08:	eeb0 0a48 	vmov.f32	s0, s16
 800eb0c:	eef0 0a68 	vmov.f32	s1, s17
 800eb10:	ecbd 8b02 	vpop	{d8}
 800eb14:	bd38      	pop	{r3, r4, r5, pc}
 800eb16:	bf00      	nop
 800eb18:	3ff00000 	.word	0x3ff00000
 800eb1c:	08013aa9 	.word	0x08013aa9

0800eb20 <__ieee754_acos>:
 800eb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	ec55 4b10 	vmov	r4, r5, d0
 800eb28:	49b7      	ldr	r1, [pc, #732]	; (800ee08 <__ieee754_acos+0x2e8>)
 800eb2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eb2e:	428b      	cmp	r3, r1
 800eb30:	dd1b      	ble.n	800eb6a <__ieee754_acos+0x4a>
 800eb32:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800eb36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb3a:	4323      	orrs	r3, r4
 800eb3c:	d106      	bne.n	800eb4c <__ieee754_acos+0x2c>
 800eb3e:	2d00      	cmp	r5, #0
 800eb40:	f300 8211 	bgt.w	800ef66 <__ieee754_acos+0x446>
 800eb44:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800eda0 <__ieee754_acos+0x280>
 800eb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	ee10 2a10 	vmov	r2, s0
 800eb50:	462b      	mov	r3, r5
 800eb52:	ee10 0a10 	vmov	r0, s0
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fbb6 	bl	80002c8 <__aeabi_dsub>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	460b      	mov	r3, r1
 800eb60:	f7f1 fe94 	bl	800088c <__aeabi_ddiv>
 800eb64:	ec41 0b10 	vmov	d0, r0, r1
 800eb68:	e7ee      	b.n	800eb48 <__ieee754_acos+0x28>
 800eb6a:	49a8      	ldr	r1, [pc, #672]	; (800ee0c <__ieee754_acos+0x2ec>)
 800eb6c:	428b      	cmp	r3, r1
 800eb6e:	f300 8087 	bgt.w	800ec80 <__ieee754_acos+0x160>
 800eb72:	4aa7      	ldr	r2, [pc, #668]	; (800ee10 <__ieee754_acos+0x2f0>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	f340 81f9 	ble.w	800ef6c <__ieee754_acos+0x44c>
 800eb7a:	ee10 2a10 	vmov	r2, s0
 800eb7e:	ee10 0a10 	vmov	r0, s0
 800eb82:	462b      	mov	r3, r5
 800eb84:	4629      	mov	r1, r5
 800eb86:	f7f1 fd57 	bl	8000638 <__aeabi_dmul>
 800eb8a:	a387      	add	r3, pc, #540	; (adr r3, 800eda8 <__ieee754_acos+0x288>)
 800eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb90:	4606      	mov	r6, r0
 800eb92:	460f      	mov	r7, r1
 800eb94:	f7f1 fd50 	bl	8000638 <__aeabi_dmul>
 800eb98:	a385      	add	r3, pc, #532	; (adr r3, 800edb0 <__ieee754_acos+0x290>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	f7f1 fb95 	bl	80002cc <__adddf3>
 800eba2:	4632      	mov	r2, r6
 800eba4:	463b      	mov	r3, r7
 800eba6:	f7f1 fd47 	bl	8000638 <__aeabi_dmul>
 800ebaa:	a383      	add	r3, pc, #524	; (adr r3, 800edb8 <__ieee754_acos+0x298>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	f7f1 fb8a 	bl	80002c8 <__aeabi_dsub>
 800ebb4:	4632      	mov	r2, r6
 800ebb6:	463b      	mov	r3, r7
 800ebb8:	f7f1 fd3e 	bl	8000638 <__aeabi_dmul>
 800ebbc:	a380      	add	r3, pc, #512	; (adr r3, 800edc0 <__ieee754_acos+0x2a0>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb83 	bl	80002cc <__adddf3>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	463b      	mov	r3, r7
 800ebca:	f7f1 fd35 	bl	8000638 <__aeabi_dmul>
 800ebce:	a37e      	add	r3, pc, #504	; (adr r3, 800edc8 <__ieee754_acos+0x2a8>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	f7f1 fb78 	bl	80002c8 <__aeabi_dsub>
 800ebd8:	4632      	mov	r2, r6
 800ebda:	463b      	mov	r3, r7
 800ebdc:	f7f1 fd2c 	bl	8000638 <__aeabi_dmul>
 800ebe0:	a37b      	add	r3, pc, #492	; (adr r3, 800edd0 <__ieee754_acos+0x2b0>)
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	f7f1 fb71 	bl	80002cc <__adddf3>
 800ebea:	4632      	mov	r2, r6
 800ebec:	463b      	mov	r3, r7
 800ebee:	f7f1 fd23 	bl	8000638 <__aeabi_dmul>
 800ebf2:	a379      	add	r3, pc, #484	; (adr r3, 800edd8 <__ieee754_acos+0x2b8>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	4689      	mov	r9, r1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7f1 fd1a 	bl	8000638 <__aeabi_dmul>
 800ec04:	a376      	add	r3, pc, #472	; (adr r3, 800ede0 <__ieee754_acos+0x2c0>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	f7f1 fb5d 	bl	80002c8 <__aeabi_dsub>
 800ec0e:	4632      	mov	r2, r6
 800ec10:	463b      	mov	r3, r7
 800ec12:	f7f1 fd11 	bl	8000638 <__aeabi_dmul>
 800ec16:	a374      	add	r3, pc, #464	; (adr r3, 800ede8 <__ieee754_acos+0x2c8>)
 800ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1c:	f7f1 fb56 	bl	80002cc <__adddf3>
 800ec20:	4632      	mov	r2, r6
 800ec22:	463b      	mov	r3, r7
 800ec24:	f7f1 fd08 	bl	8000638 <__aeabi_dmul>
 800ec28:	a371      	add	r3, pc, #452	; (adr r3, 800edf0 <__ieee754_acos+0x2d0>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fb4b 	bl	80002c8 <__aeabi_dsub>
 800ec32:	4632      	mov	r2, r6
 800ec34:	463b      	mov	r3, r7
 800ec36:	f7f1 fcff 	bl	8000638 <__aeabi_dmul>
 800ec3a:	4b76      	ldr	r3, [pc, #472]	; (800ee14 <__ieee754_acos+0x2f4>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f7f1 fb45 	bl	80002cc <__adddf3>
 800ec42:	4602      	mov	r2, r0
 800ec44:	460b      	mov	r3, r1
 800ec46:	4640      	mov	r0, r8
 800ec48:	4649      	mov	r1, r9
 800ec4a:	f7f1 fe1f 	bl	800088c <__aeabi_ddiv>
 800ec4e:	4622      	mov	r2, r4
 800ec50:	462b      	mov	r3, r5
 800ec52:	f7f1 fcf1 	bl	8000638 <__aeabi_dmul>
 800ec56:	4602      	mov	r2, r0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	a167      	add	r1, pc, #412	; (adr r1, 800edf8 <__ieee754_acos+0x2d8>)
 800ec5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec60:	f7f1 fb32 	bl	80002c8 <__aeabi_dsub>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4620      	mov	r0, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	f7f1 fb2c 	bl	80002c8 <__aeabi_dsub>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	a162      	add	r1, pc, #392	; (adr r1, 800ee00 <__ieee754_acos+0x2e0>)
 800ec76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec7a:	f7f1 fb25 	bl	80002c8 <__aeabi_dsub>
 800ec7e:	e771      	b.n	800eb64 <__ieee754_acos+0x44>
 800ec80:	2d00      	cmp	r5, #0
 800ec82:	f280 80cb 	bge.w	800ee1c <__ieee754_acos+0x2fc>
 800ec86:	ee10 0a10 	vmov	r0, s0
 800ec8a:	4b62      	ldr	r3, [pc, #392]	; (800ee14 <__ieee754_acos+0x2f4>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4629      	mov	r1, r5
 800ec90:	f7f1 fb1c 	bl	80002cc <__adddf3>
 800ec94:	4b60      	ldr	r3, [pc, #384]	; (800ee18 <__ieee754_acos+0x2f8>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	f7f1 fcce 	bl	8000638 <__aeabi_dmul>
 800ec9c:	a342      	add	r3, pc, #264	; (adr r3, 800eda8 <__ieee754_acos+0x288>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	4604      	mov	r4, r0
 800eca4:	460d      	mov	r5, r1
 800eca6:	f7f1 fcc7 	bl	8000638 <__aeabi_dmul>
 800ecaa:	a341      	add	r3, pc, #260	; (adr r3, 800edb0 <__ieee754_acos+0x290>)
 800ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb0:	f7f1 fb0c 	bl	80002cc <__adddf3>
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	462b      	mov	r3, r5
 800ecb8:	f7f1 fcbe 	bl	8000638 <__aeabi_dmul>
 800ecbc:	a33e      	add	r3, pc, #248	; (adr r3, 800edb8 <__ieee754_acos+0x298>)
 800ecbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc2:	f7f1 fb01 	bl	80002c8 <__aeabi_dsub>
 800ecc6:	4622      	mov	r2, r4
 800ecc8:	462b      	mov	r3, r5
 800ecca:	f7f1 fcb5 	bl	8000638 <__aeabi_dmul>
 800ecce:	a33c      	add	r3, pc, #240	; (adr r3, 800edc0 <__ieee754_acos+0x2a0>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	f7f1 fafa 	bl	80002cc <__adddf3>
 800ecd8:	4622      	mov	r2, r4
 800ecda:	462b      	mov	r3, r5
 800ecdc:	f7f1 fcac 	bl	8000638 <__aeabi_dmul>
 800ece0:	a339      	add	r3, pc, #228	; (adr r3, 800edc8 <__ieee754_acos+0x2a8>)
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	f7f1 faef 	bl	80002c8 <__aeabi_dsub>
 800ecea:	4622      	mov	r2, r4
 800ecec:	462b      	mov	r3, r5
 800ecee:	f7f1 fca3 	bl	8000638 <__aeabi_dmul>
 800ecf2:	a337      	add	r3, pc, #220	; (adr r3, 800edd0 <__ieee754_acos+0x2b0>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	f7f1 fae8 	bl	80002cc <__adddf3>
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	462b      	mov	r3, r5
 800ed00:	f7f1 fc9a 	bl	8000638 <__aeabi_dmul>
 800ed04:	ec45 4b10 	vmov	d0, r4, r5
 800ed08:	4680      	mov	r8, r0
 800ed0a:	4689      	mov	r9, r1
 800ed0c:	f000 f99e 	bl	800f04c <__ieee754_sqrt>
 800ed10:	a331      	add	r3, pc, #196	; (adr r3, 800edd8 <__ieee754_acos+0x2b8>)
 800ed12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed16:	4620      	mov	r0, r4
 800ed18:	4629      	mov	r1, r5
 800ed1a:	ec57 6b10 	vmov	r6, r7, d0
 800ed1e:	f7f1 fc8b 	bl	8000638 <__aeabi_dmul>
 800ed22:	a32f      	add	r3, pc, #188	; (adr r3, 800ede0 <__ieee754_acos+0x2c0>)
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	f7f1 face 	bl	80002c8 <__aeabi_dsub>
 800ed2c:	4622      	mov	r2, r4
 800ed2e:	462b      	mov	r3, r5
 800ed30:	f7f1 fc82 	bl	8000638 <__aeabi_dmul>
 800ed34:	a32c      	add	r3, pc, #176	; (adr r3, 800ede8 <__ieee754_acos+0x2c8>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f7f1 fac7 	bl	80002cc <__adddf3>
 800ed3e:	4622      	mov	r2, r4
 800ed40:	462b      	mov	r3, r5
 800ed42:	f7f1 fc79 	bl	8000638 <__aeabi_dmul>
 800ed46:	a32a      	add	r3, pc, #168	; (adr r3, 800edf0 <__ieee754_acos+0x2d0>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 fabc 	bl	80002c8 <__aeabi_dsub>
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	f7f1 fc70 	bl	8000638 <__aeabi_dmul>
 800ed58:	4b2e      	ldr	r3, [pc, #184]	; (800ee14 <__ieee754_acos+0x2f4>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f7f1 fab6 	bl	80002cc <__adddf3>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fd90 	bl	800088c <__aeabi_ddiv>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	463b      	mov	r3, r7
 800ed70:	f7f1 fc62 	bl	8000638 <__aeabi_dmul>
 800ed74:	a320      	add	r3, pc, #128	; (adr r3, 800edf8 <__ieee754_acos+0x2d8>)
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	f7f1 faa5 	bl	80002c8 <__aeabi_dsub>
 800ed7e:	4632      	mov	r2, r6
 800ed80:	463b      	mov	r3, r7
 800ed82:	f7f1 faa3 	bl	80002cc <__adddf3>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	f7f1 fa9f 	bl	80002cc <__adddf3>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	a103      	add	r1, pc, #12	; (adr r1, 800eda0 <__ieee754_acos+0x280>)
 800ed94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed98:	e76f      	b.n	800ec7a <__ieee754_acos+0x15a>
 800ed9a:	bf00      	nop
 800ed9c:	f3af 8000 	nop.w
 800eda0:	54442d18 	.word	0x54442d18
 800eda4:	400921fb 	.word	0x400921fb
 800eda8:	0dfdf709 	.word	0x0dfdf709
 800edac:	3f023de1 	.word	0x3f023de1
 800edb0:	7501b288 	.word	0x7501b288
 800edb4:	3f49efe0 	.word	0x3f49efe0
 800edb8:	b5688f3b 	.word	0xb5688f3b
 800edbc:	3fa48228 	.word	0x3fa48228
 800edc0:	0e884455 	.word	0x0e884455
 800edc4:	3fc9c155 	.word	0x3fc9c155
 800edc8:	03eb6f7d 	.word	0x03eb6f7d
 800edcc:	3fd4d612 	.word	0x3fd4d612
 800edd0:	55555555 	.word	0x55555555
 800edd4:	3fc55555 	.word	0x3fc55555
 800edd8:	b12e9282 	.word	0xb12e9282
 800eddc:	3fb3b8c5 	.word	0x3fb3b8c5
 800ede0:	1b8d0159 	.word	0x1b8d0159
 800ede4:	3fe6066c 	.word	0x3fe6066c
 800ede8:	9c598ac8 	.word	0x9c598ac8
 800edec:	40002ae5 	.word	0x40002ae5
 800edf0:	1c8a2d4b 	.word	0x1c8a2d4b
 800edf4:	40033a27 	.word	0x40033a27
 800edf8:	33145c07 	.word	0x33145c07
 800edfc:	3c91a626 	.word	0x3c91a626
 800ee00:	54442d18 	.word	0x54442d18
 800ee04:	3ff921fb 	.word	0x3ff921fb
 800ee08:	3fefffff 	.word	0x3fefffff
 800ee0c:	3fdfffff 	.word	0x3fdfffff
 800ee10:	3c600000 	.word	0x3c600000
 800ee14:	3ff00000 	.word	0x3ff00000
 800ee18:	3fe00000 	.word	0x3fe00000
 800ee1c:	ee10 2a10 	vmov	r2, s0
 800ee20:	462b      	mov	r3, r5
 800ee22:	496d      	ldr	r1, [pc, #436]	; (800efd8 <__ieee754_acos+0x4b8>)
 800ee24:	2000      	movs	r0, #0
 800ee26:	f7f1 fa4f 	bl	80002c8 <__aeabi_dsub>
 800ee2a:	4b6c      	ldr	r3, [pc, #432]	; (800efdc <__ieee754_acos+0x4bc>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f7f1 fc03 	bl	8000638 <__aeabi_dmul>
 800ee32:	4604      	mov	r4, r0
 800ee34:	460d      	mov	r5, r1
 800ee36:	ec45 4b10 	vmov	d0, r4, r5
 800ee3a:	f000 f907 	bl	800f04c <__ieee754_sqrt>
 800ee3e:	a34e      	add	r3, pc, #312	; (adr r3, 800ef78 <__ieee754_acos+0x458>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	4620      	mov	r0, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	ec59 8b10 	vmov	r8, r9, d0
 800ee4c:	f7f1 fbf4 	bl	8000638 <__aeabi_dmul>
 800ee50:	a34b      	add	r3, pc, #300	; (adr r3, 800ef80 <__ieee754_acos+0x460>)
 800ee52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee56:	f7f1 fa39 	bl	80002cc <__adddf3>
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	462b      	mov	r3, r5
 800ee5e:	f7f1 fbeb 	bl	8000638 <__aeabi_dmul>
 800ee62:	a349      	add	r3, pc, #292	; (adr r3, 800ef88 <__ieee754_acos+0x468>)
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	f7f1 fa2e 	bl	80002c8 <__aeabi_dsub>
 800ee6c:	4622      	mov	r2, r4
 800ee6e:	462b      	mov	r3, r5
 800ee70:	f7f1 fbe2 	bl	8000638 <__aeabi_dmul>
 800ee74:	a346      	add	r3, pc, #280	; (adr r3, 800ef90 <__ieee754_acos+0x470>)
 800ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7a:	f7f1 fa27 	bl	80002cc <__adddf3>
 800ee7e:	4622      	mov	r2, r4
 800ee80:	462b      	mov	r3, r5
 800ee82:	f7f1 fbd9 	bl	8000638 <__aeabi_dmul>
 800ee86:	a344      	add	r3, pc, #272	; (adr r3, 800ef98 <__ieee754_acos+0x478>)
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f7f1 fa1c 	bl	80002c8 <__aeabi_dsub>
 800ee90:	4622      	mov	r2, r4
 800ee92:	462b      	mov	r3, r5
 800ee94:	f7f1 fbd0 	bl	8000638 <__aeabi_dmul>
 800ee98:	a341      	add	r3, pc, #260	; (adr r3, 800efa0 <__ieee754_acos+0x480>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fa15 	bl	80002cc <__adddf3>
 800eea2:	4622      	mov	r2, r4
 800eea4:	462b      	mov	r3, r5
 800eea6:	f7f1 fbc7 	bl	8000638 <__aeabi_dmul>
 800eeaa:	a33f      	add	r3, pc, #252	; (adr r3, 800efa8 <__ieee754_acos+0x488>)
 800eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb0:	4682      	mov	sl, r0
 800eeb2:	468b      	mov	fp, r1
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	f7f1 fbbe 	bl	8000638 <__aeabi_dmul>
 800eebc:	a33c      	add	r3, pc, #240	; (adr r3, 800efb0 <__ieee754_acos+0x490>)
 800eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec2:	f7f1 fa01 	bl	80002c8 <__aeabi_dsub>
 800eec6:	4622      	mov	r2, r4
 800eec8:	462b      	mov	r3, r5
 800eeca:	f7f1 fbb5 	bl	8000638 <__aeabi_dmul>
 800eece:	a33a      	add	r3, pc, #232	; (adr r3, 800efb8 <__ieee754_acos+0x498>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f7f1 f9fa 	bl	80002cc <__adddf3>
 800eed8:	4622      	mov	r2, r4
 800eeda:	462b      	mov	r3, r5
 800eedc:	f7f1 fbac 	bl	8000638 <__aeabi_dmul>
 800eee0:	a337      	add	r3, pc, #220	; (adr r3, 800efc0 <__ieee754_acos+0x4a0>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	f7f1 f9ef 	bl	80002c8 <__aeabi_dsub>
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	f7f1 fba3 	bl	8000638 <__aeabi_dmul>
 800eef2:	4b39      	ldr	r3, [pc, #228]	; (800efd8 <__ieee754_acos+0x4b8>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	f7f1 f9e9 	bl	80002cc <__adddf3>
 800eefa:	4602      	mov	r2, r0
 800eefc:	460b      	mov	r3, r1
 800eefe:	4650      	mov	r0, sl
 800ef00:	4659      	mov	r1, fp
 800ef02:	f7f1 fcc3 	bl	800088c <__aeabi_ddiv>
 800ef06:	4642      	mov	r2, r8
 800ef08:	464b      	mov	r3, r9
 800ef0a:	f7f1 fb95 	bl	8000638 <__aeabi_dmul>
 800ef0e:	2600      	movs	r6, #0
 800ef10:	4682      	mov	sl, r0
 800ef12:	468b      	mov	fp, r1
 800ef14:	4632      	mov	r2, r6
 800ef16:	464b      	mov	r3, r9
 800ef18:	4630      	mov	r0, r6
 800ef1a:	4649      	mov	r1, r9
 800ef1c:	f7f1 fb8c 	bl	8000638 <__aeabi_dmul>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4620      	mov	r0, r4
 800ef26:	4629      	mov	r1, r5
 800ef28:	f7f1 f9ce 	bl	80002c8 <__aeabi_dsub>
 800ef2c:	4632      	mov	r2, r6
 800ef2e:	4604      	mov	r4, r0
 800ef30:	460d      	mov	r5, r1
 800ef32:	464b      	mov	r3, r9
 800ef34:	4640      	mov	r0, r8
 800ef36:	4649      	mov	r1, r9
 800ef38:	f7f1 f9c8 	bl	80002cc <__adddf3>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4620      	mov	r0, r4
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7f1 fca2 	bl	800088c <__aeabi_ddiv>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4650      	mov	r0, sl
 800ef4e:	4659      	mov	r1, fp
 800ef50:	f7f1 f9bc 	bl	80002cc <__adddf3>
 800ef54:	4632      	mov	r2, r6
 800ef56:	464b      	mov	r3, r9
 800ef58:	f7f1 f9b8 	bl	80002cc <__adddf3>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	f7f1 f9b4 	bl	80002cc <__adddf3>
 800ef64:	e5fe      	b.n	800eb64 <__ieee754_acos+0x44>
 800ef66:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800efc8 <__ieee754_acos+0x4a8>
 800ef6a:	e5ed      	b.n	800eb48 <__ieee754_acos+0x28>
 800ef6c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800efd0 <__ieee754_acos+0x4b0>
 800ef70:	e5ea      	b.n	800eb48 <__ieee754_acos+0x28>
 800ef72:	bf00      	nop
 800ef74:	f3af 8000 	nop.w
 800ef78:	0dfdf709 	.word	0x0dfdf709
 800ef7c:	3f023de1 	.word	0x3f023de1
 800ef80:	7501b288 	.word	0x7501b288
 800ef84:	3f49efe0 	.word	0x3f49efe0
 800ef88:	b5688f3b 	.word	0xb5688f3b
 800ef8c:	3fa48228 	.word	0x3fa48228
 800ef90:	0e884455 	.word	0x0e884455
 800ef94:	3fc9c155 	.word	0x3fc9c155
 800ef98:	03eb6f7d 	.word	0x03eb6f7d
 800ef9c:	3fd4d612 	.word	0x3fd4d612
 800efa0:	55555555 	.word	0x55555555
 800efa4:	3fc55555 	.word	0x3fc55555
 800efa8:	b12e9282 	.word	0xb12e9282
 800efac:	3fb3b8c5 	.word	0x3fb3b8c5
 800efb0:	1b8d0159 	.word	0x1b8d0159
 800efb4:	3fe6066c 	.word	0x3fe6066c
 800efb8:	9c598ac8 	.word	0x9c598ac8
 800efbc:	40002ae5 	.word	0x40002ae5
 800efc0:	1c8a2d4b 	.word	0x1c8a2d4b
 800efc4:	40033a27 	.word	0x40033a27
	...
 800efd0:	54442d18 	.word	0x54442d18
 800efd4:	3ff921fb 	.word	0x3ff921fb
 800efd8:	3ff00000 	.word	0x3ff00000
 800efdc:	3fe00000 	.word	0x3fe00000

0800efe0 <sqrt>:
 800efe0:	b538      	push	{r3, r4, r5, lr}
 800efe2:	ed2d 8b02 	vpush	{d8}
 800efe6:	ec55 4b10 	vmov	r4, r5, d0
 800efea:	f000 f82f 	bl	800f04c <__ieee754_sqrt>
 800efee:	4622      	mov	r2, r4
 800eff0:	462b      	mov	r3, r5
 800eff2:	4620      	mov	r0, r4
 800eff4:	4629      	mov	r1, r5
 800eff6:	eeb0 8a40 	vmov.f32	s16, s0
 800effa:	eef0 8a60 	vmov.f32	s17, s1
 800effe:	f7f1 fdb5 	bl	8000b6c <__aeabi_dcmpun>
 800f002:	b990      	cbnz	r0, 800f02a <sqrt+0x4a>
 800f004:	2200      	movs	r2, #0
 800f006:	2300      	movs	r3, #0
 800f008:	4620      	mov	r0, r4
 800f00a:	4629      	mov	r1, r5
 800f00c:	f7f1 fd86 	bl	8000b1c <__aeabi_dcmplt>
 800f010:	b158      	cbz	r0, 800f02a <sqrt+0x4a>
 800f012:	f7fd f81b 	bl	800c04c <__errno>
 800f016:	2321      	movs	r3, #33	; 0x21
 800f018:	6003      	str	r3, [r0, #0]
 800f01a:	2200      	movs	r2, #0
 800f01c:	2300      	movs	r3, #0
 800f01e:	4610      	mov	r0, r2
 800f020:	4619      	mov	r1, r3
 800f022:	f7f1 fc33 	bl	800088c <__aeabi_ddiv>
 800f026:	ec41 0b18 	vmov	d8, r0, r1
 800f02a:	eeb0 0a48 	vmov.f32	s0, s16
 800f02e:	eef0 0a68 	vmov.f32	s1, s17
 800f032:	ecbd 8b02 	vpop	{d8}
 800f036:	bd38      	pop	{r3, r4, r5, pc}

0800f038 <fabs>:
 800f038:	ec51 0b10 	vmov	r0, r1, d0
 800f03c:	ee10 2a10 	vmov	r2, s0
 800f040:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f044:	ec43 2b10 	vmov	d0, r2, r3
 800f048:	4770      	bx	lr
	...

0800f04c <__ieee754_sqrt>:
 800f04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f050:	ec55 4b10 	vmov	r4, r5, d0
 800f054:	4e67      	ldr	r6, [pc, #412]	; (800f1f4 <__ieee754_sqrt+0x1a8>)
 800f056:	43ae      	bics	r6, r5
 800f058:	ee10 0a10 	vmov	r0, s0
 800f05c:	ee10 2a10 	vmov	r2, s0
 800f060:	4629      	mov	r1, r5
 800f062:	462b      	mov	r3, r5
 800f064:	d10d      	bne.n	800f082 <__ieee754_sqrt+0x36>
 800f066:	f7f1 fae7 	bl	8000638 <__aeabi_dmul>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4620      	mov	r0, r4
 800f070:	4629      	mov	r1, r5
 800f072:	f7f1 f92b 	bl	80002cc <__adddf3>
 800f076:	4604      	mov	r4, r0
 800f078:	460d      	mov	r5, r1
 800f07a:	ec45 4b10 	vmov	d0, r4, r5
 800f07e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f082:	2d00      	cmp	r5, #0
 800f084:	dc0b      	bgt.n	800f09e <__ieee754_sqrt+0x52>
 800f086:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f08a:	4326      	orrs	r6, r4
 800f08c:	d0f5      	beq.n	800f07a <__ieee754_sqrt+0x2e>
 800f08e:	b135      	cbz	r5, 800f09e <__ieee754_sqrt+0x52>
 800f090:	f7f1 f91a 	bl	80002c8 <__aeabi_dsub>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	f7f1 fbf8 	bl	800088c <__aeabi_ddiv>
 800f09c:	e7eb      	b.n	800f076 <__ieee754_sqrt+0x2a>
 800f09e:	1509      	asrs	r1, r1, #20
 800f0a0:	f000 808d 	beq.w	800f1be <__ieee754_sqrt+0x172>
 800f0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0a8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0b0:	07c9      	lsls	r1, r1, #31
 800f0b2:	bf5c      	itt	pl
 800f0b4:	005b      	lslpl	r3, r3, #1
 800f0b6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f0ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f0be:	bf58      	it	pl
 800f0c0:	0052      	lslpl	r2, r2, #1
 800f0c2:	2500      	movs	r5, #0
 800f0c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f0c8:	1076      	asrs	r6, r6, #1
 800f0ca:	0052      	lsls	r2, r2, #1
 800f0cc:	f04f 0e16 	mov.w	lr, #22
 800f0d0:	46ac      	mov	ip, r5
 800f0d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f0d6:	eb0c 0001 	add.w	r0, ip, r1
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bfde      	ittt	le
 800f0de:	1a1b      	suble	r3, r3, r0
 800f0e0:	eb00 0c01 	addle.w	ip, r0, r1
 800f0e4:	186d      	addle	r5, r5, r1
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	f1be 0e01 	subs.w	lr, lr, #1
 800f0ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f0f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f0f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f0f8:	d1ed      	bne.n	800f0d6 <__ieee754_sqrt+0x8a>
 800f0fa:	4674      	mov	r4, lr
 800f0fc:	2720      	movs	r7, #32
 800f0fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f102:	4563      	cmp	r3, ip
 800f104:	eb01 000e 	add.w	r0, r1, lr
 800f108:	dc02      	bgt.n	800f110 <__ieee754_sqrt+0xc4>
 800f10a:	d113      	bne.n	800f134 <__ieee754_sqrt+0xe8>
 800f10c:	4290      	cmp	r0, r2
 800f10e:	d811      	bhi.n	800f134 <__ieee754_sqrt+0xe8>
 800f110:	2800      	cmp	r0, #0
 800f112:	eb00 0e01 	add.w	lr, r0, r1
 800f116:	da57      	bge.n	800f1c8 <__ieee754_sqrt+0x17c>
 800f118:	f1be 0f00 	cmp.w	lr, #0
 800f11c:	db54      	blt.n	800f1c8 <__ieee754_sqrt+0x17c>
 800f11e:	f10c 0801 	add.w	r8, ip, #1
 800f122:	eba3 030c 	sub.w	r3, r3, ip
 800f126:	4290      	cmp	r0, r2
 800f128:	bf88      	it	hi
 800f12a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800f12e:	1a12      	subs	r2, r2, r0
 800f130:	440c      	add	r4, r1
 800f132:	46c4      	mov	ip, r8
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	3f01      	subs	r7, #1
 800f138:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f13c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f140:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f144:	d1dd      	bne.n	800f102 <__ieee754_sqrt+0xb6>
 800f146:	4313      	orrs	r3, r2
 800f148:	d01b      	beq.n	800f182 <__ieee754_sqrt+0x136>
 800f14a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f1f8 <__ieee754_sqrt+0x1ac>
 800f14e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f1fc <__ieee754_sqrt+0x1b0>
 800f152:	e9da 0100 	ldrd	r0, r1, [sl]
 800f156:	e9db 2300 	ldrd	r2, r3, [fp]
 800f15a:	f7f1 f8b5 	bl	80002c8 <__aeabi_dsub>
 800f15e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f162:	4602      	mov	r2, r0
 800f164:	460b      	mov	r3, r1
 800f166:	4640      	mov	r0, r8
 800f168:	4649      	mov	r1, r9
 800f16a:	f7f1 fce1 	bl	8000b30 <__aeabi_dcmple>
 800f16e:	b140      	cbz	r0, 800f182 <__ieee754_sqrt+0x136>
 800f170:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800f174:	e9da 0100 	ldrd	r0, r1, [sl]
 800f178:	e9db 2300 	ldrd	r2, r3, [fp]
 800f17c:	d126      	bne.n	800f1cc <__ieee754_sqrt+0x180>
 800f17e:	3501      	adds	r5, #1
 800f180:	463c      	mov	r4, r7
 800f182:	106a      	asrs	r2, r5, #1
 800f184:	0863      	lsrs	r3, r4, #1
 800f186:	07e9      	lsls	r1, r5, #31
 800f188:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f18c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f190:	bf48      	it	mi
 800f192:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f196:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f19a:	461c      	mov	r4, r3
 800f19c:	e76d      	b.n	800f07a <__ieee754_sqrt+0x2e>
 800f19e:	0ad3      	lsrs	r3, r2, #11
 800f1a0:	3815      	subs	r0, #21
 800f1a2:	0552      	lsls	r2, r2, #21
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d0fa      	beq.n	800f19e <__ieee754_sqrt+0x152>
 800f1a8:	02dc      	lsls	r4, r3, #11
 800f1aa:	d50a      	bpl.n	800f1c2 <__ieee754_sqrt+0x176>
 800f1ac:	f1c1 0420 	rsb	r4, r1, #32
 800f1b0:	fa22 f404 	lsr.w	r4, r2, r4
 800f1b4:	1e4d      	subs	r5, r1, #1
 800f1b6:	408a      	lsls	r2, r1
 800f1b8:	4323      	orrs	r3, r4
 800f1ba:	1b41      	subs	r1, r0, r5
 800f1bc:	e772      	b.n	800f0a4 <__ieee754_sqrt+0x58>
 800f1be:	4608      	mov	r0, r1
 800f1c0:	e7f0      	b.n	800f1a4 <__ieee754_sqrt+0x158>
 800f1c2:	005b      	lsls	r3, r3, #1
 800f1c4:	3101      	adds	r1, #1
 800f1c6:	e7ef      	b.n	800f1a8 <__ieee754_sqrt+0x15c>
 800f1c8:	46e0      	mov	r8, ip
 800f1ca:	e7aa      	b.n	800f122 <__ieee754_sqrt+0xd6>
 800f1cc:	f7f1 f87e 	bl	80002cc <__adddf3>
 800f1d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	4640      	mov	r0, r8
 800f1da:	4649      	mov	r1, r9
 800f1dc:	f7f1 fc9e 	bl	8000b1c <__aeabi_dcmplt>
 800f1e0:	b120      	cbz	r0, 800f1ec <__ieee754_sqrt+0x1a0>
 800f1e2:	1ca0      	adds	r0, r4, #2
 800f1e4:	bf08      	it	eq
 800f1e6:	3501      	addeq	r5, #1
 800f1e8:	3402      	adds	r4, #2
 800f1ea:	e7ca      	b.n	800f182 <__ieee754_sqrt+0x136>
 800f1ec:	3401      	adds	r4, #1
 800f1ee:	f024 0401 	bic.w	r4, r4, #1
 800f1f2:	e7c6      	b.n	800f182 <__ieee754_sqrt+0x136>
 800f1f4:	7ff00000 	.word	0x7ff00000
 800f1f8:	20000210 	.word	0x20000210
 800f1fc:	20000218 	.word	0x20000218

0800f200 <round>:
 800f200:	ec53 2b10 	vmov	r2, r3, d0
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f20a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800f20e:	2813      	cmp	r0, #19
 800f210:	ee10 5a10 	vmov	r5, s0
 800f214:	4619      	mov	r1, r3
 800f216:	dc18      	bgt.n	800f24a <round+0x4a>
 800f218:	2800      	cmp	r0, #0
 800f21a:	da09      	bge.n	800f230 <round+0x30>
 800f21c:	3001      	adds	r0, #1
 800f21e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800f222:	d103      	bne.n	800f22c <round+0x2c>
 800f224:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f228:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f22c:	2300      	movs	r3, #0
 800f22e:	e02a      	b.n	800f286 <round+0x86>
 800f230:	4c16      	ldr	r4, [pc, #88]	; (800f28c <round+0x8c>)
 800f232:	4104      	asrs	r4, r0
 800f234:	ea03 0604 	and.w	r6, r3, r4
 800f238:	4316      	orrs	r6, r2
 800f23a:	d011      	beq.n	800f260 <round+0x60>
 800f23c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f240:	4103      	asrs	r3, r0
 800f242:	440b      	add	r3, r1
 800f244:	ea23 0104 	bic.w	r1, r3, r4
 800f248:	e7f0      	b.n	800f22c <round+0x2c>
 800f24a:	2833      	cmp	r0, #51	; 0x33
 800f24c:	dd0b      	ble.n	800f266 <round+0x66>
 800f24e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f252:	d105      	bne.n	800f260 <round+0x60>
 800f254:	ee10 0a10 	vmov	r0, s0
 800f258:	f7f1 f838 	bl	80002cc <__adddf3>
 800f25c:	4602      	mov	r2, r0
 800f25e:	460b      	mov	r3, r1
 800f260:	ec43 2b10 	vmov	d0, r2, r3
 800f264:	bd70      	pop	{r4, r5, r6, pc}
 800f266:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800f26a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f26e:	40f4      	lsrs	r4, r6
 800f270:	4214      	tst	r4, r2
 800f272:	d0f5      	beq.n	800f260 <round+0x60>
 800f274:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800f278:	2301      	movs	r3, #1
 800f27a:	4083      	lsls	r3, r0
 800f27c:	195b      	adds	r3, r3, r5
 800f27e:	bf28      	it	cs
 800f280:	3101      	addcs	r1, #1
 800f282:	ea23 0304 	bic.w	r3, r3, r4
 800f286:	461a      	mov	r2, r3
 800f288:	460b      	mov	r3, r1
 800f28a:	e7e9      	b.n	800f260 <round+0x60>
 800f28c:	000fffff 	.word	0x000fffff

0800f290 <trunc>:
 800f290:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800f294:	ec5c bb10 	vmov	fp, ip, d0
 800f298:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800f29c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800f2a0:	2913      	cmp	r1, #19
 800f2a2:	4664      	mov	r4, ip
 800f2a4:	dc11      	bgt.n	800f2ca <trunc+0x3a>
 800f2a6:	2900      	cmp	r1, #0
 800f2a8:	bfa7      	ittee	ge
 800f2aa:	4b15      	ldrge	r3, [pc, #84]	; (800f300 <trunc+0x70>)
 800f2ac:	fa43 f101 	asrge.w	r1, r3, r1
 800f2b0:	2200      	movlt	r2, #0
 800f2b2:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800f2b6:	bfa4      	itt	ge
 800f2b8:	2200      	movge	r2, #0
 800f2ba:	ea01 030c 	andge.w	r3, r1, ip
 800f2be:	4693      	mov	fp, r2
 800f2c0:	469c      	mov	ip, r3
 800f2c2:	ec4c bb10 	vmov	d0, fp, ip
 800f2c6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800f2ca:	2933      	cmp	r1, #51	; 0x33
 800f2cc:	dd0d      	ble.n	800f2ea <trunc+0x5a>
 800f2ce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f2d2:	d1f6      	bne.n	800f2c2 <trunc+0x32>
 800f2d4:	4663      	mov	r3, ip
 800f2d6:	ee10 2a10 	vmov	r2, s0
 800f2da:	ee10 0a10 	vmov	r0, s0
 800f2de:	4621      	mov	r1, r4
 800f2e0:	f7f0 fff4 	bl	80002cc <__adddf3>
 800f2e4:	4683      	mov	fp, r0
 800f2e6:	468c      	mov	ip, r1
 800f2e8:	e7eb      	b.n	800f2c2 <trunc+0x32>
 800f2ea:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2f2:	40c3      	lsrs	r3, r0
 800f2f4:	ea2b 0603 	bic.w	r6, fp, r3
 800f2f8:	46b3      	mov	fp, r6
 800f2fa:	46a4      	mov	ip, r4
 800f2fc:	e7e1      	b.n	800f2c2 <trunc+0x32>
 800f2fe:	bf00      	nop
 800f300:	fff00000 	.word	0xfff00000
 800f304:	00000000 	.word	0x00000000

0800f308 <nan>:
 800f308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f310 <nan+0x8>
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	00000000 	.word	0x00000000
 800f314:	7ff80000 	.word	0x7ff80000

0800f318 <_init>:
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	bf00      	nop
 800f31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f31e:	bc08      	pop	{r3}
 800f320:	469e      	mov	lr, r3
 800f322:	4770      	bx	lr

0800f324 <_fini>:
 800f324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f326:	bf00      	nop
 800f328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32a:	bc08      	pop	{r3}
 800f32c:	469e      	mov	lr, r3
 800f32e:	4770      	bx	lr
