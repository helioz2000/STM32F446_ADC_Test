
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ec8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004de8  08011098  08011098  00021098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e80  08015e80  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08015e80  08015e80  00025e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e88  08015e88  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e88  08015e88  00025e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e8c  08015e8c  00025e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08015e90  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009cb4  20000228  080160b8  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009edc  080160b8  00039edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a45f  00000000  00000000  0003029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fcd  00000000  00000000  0004a6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0004e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bc  00000000  00000000  0004fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a1e  00000000  00000000  000511a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002070d  00000000  00000000  00078bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5d1d  00000000  00000000  000992cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d5c  00000000  00000000  0017efec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00186d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011080 	.word	0x08011080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08011080 	.word	0x08011080

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0bc      	b.n	80011c2 <calc_process_dma_buffer+0x19e>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4956      	ldr	r1, [pc, #344]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	4951      	ldr	r1, [pc, #324]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	494c      	ldr	r1, [pc, #304]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4947      	ldr	r1, [pc, #284]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4942      	ldr	r1, [pc, #264]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	493c      	ldr	r1, [pc, #240]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	492c      	ldr	r1, [pc, #176]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4927      	ldr	r1, [pc, #156]	; (80011cc <calc_process_dma_buffer+0x1a8>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	82fb      	strh	r3, [r7, #22]
 8001144:	e030      	b.n	80011a8 <calc_process_dma_buffer+0x184>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 8001146:	8af9      	ldrh	r1, [r7, #22]
 8001148:	7c7a      	ldrb	r2, [r7, #17]
 800114a:	8a7b      	ldrh	r3, [r7, #18]
 800114c:	4c20      	ldr	r4, [pc, #128]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 8001154:	fb05 f000 	mul.w	r0, r5, r0
 8001158:	4401      	add	r1, r0
 800115a:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800115e:	491d      	ldr	r1, [pc, #116]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001160:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001164:	fb00 f202 	mul.w	r2, r0, r2
 8001168:	4413      	add	r3, r2
 800116a:	4622      	mov	r2, r4
 800116c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001170:	8afb      	ldrh	r3, [r7, #22]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	7c3a      	ldrb	r2, [r7, #16]
 8001176:	8a7b      	ldrh	r3, [r7, #18]
 8001178:	1c58      	adds	r0, r3, #1
 800117a:	8278      	strh	r0, [r7, #18]
 800117c:	461d      	mov	r5, r3
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <calc_process_dma_buffer+0x1ac>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 8001186:	fb04 f303 	mul.w	r3, r4, r3
 800118a:	440b      	add	r3, r1
 800118c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <calc_process_dma_buffer+0x1b0>)
 8001192:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	442b      	add	r3, r5
 800119c:	4602      	mov	r2, r0
 800119e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011a2:	8afb      	ldrh	r3, [r7, #22]
 80011a4:	3302      	adds	r3, #2
 80011a6:	82fb      	strh	r3, [r7, #22]
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	89fb      	ldrh	r3, [r7, #14]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d9ca      	bls.n	8001146 <calc_process_dma_buffer+0x122>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f93c 	bl	8001430 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f938 	bl	8001430 <calc_downsample>
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000244 	.word	0x20000244
 80011d0:	200024d0 	.word	0x200024d0
 80011d4:	20005950 	.word	0x20005950

080011d8 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	f200 8117 	bhi.w	800141c <calc_zero_detector+0x244>
	uint8_t detected = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	0fda      	lsrs	r2, r3, #31
 80011fa:	4413      	add	r3, r2
 80011fc:	105b      	asrs	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0fda      	lsrs	r2, r3, #31
 800120a:	4413      	add	r3, r2
 800120c:	105b      	asrs	r3, r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e0df      	b.n	80013de <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	4981      	ldr	r1, [pc, #516]	; (8001428 <calc_zero_detector+0x250>)
 8001222:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001226:	fb03 f202 	mul.w	r2, r3, r2
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4413      	add	r3, r2
 800122e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4293      	cmp	r3, r2
 8001238:	f300 80ce 	bgt.w	80013d8 <calc_zero_detector+0x200>
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	497a      	ldr	r1, [pc, #488]	; (8001428 <calc_zero_detector+0x250>)
 8001240:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001244:	fb03 f202 	mul.w	r2, r3, r2
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4293      	cmp	r3, r2
 8001256:	f2c0 80bf 	blt.w	80013d8 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4972      	ldr	r1, [pc, #456]	; (8001428 <calc_zero_detector+0x250>)
 800125e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001262:	fb03 f202 	mul.w	r2, r3, r2
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4413      	add	r3, r2
 800126a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4293      	cmp	r3, r2
 8001274:	da3d      	bge.n	80012f2 <calc_zero_detector+0x11a>
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3b01      	subs	r3, #1
 800127c:	496a      	ldr	r1, [pc, #424]	; (8001428 <calc_zero_detector+0x250>)
 800127e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800128c:	461a      	mov	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4293      	cmp	r3, r2
 8001292:	db2e      	blt.n	80012f2 <calc_zero_detector+0x11a>
				detected++;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	3301      	adds	r3, #1
 8001298:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd11      	ble.n	80012c4 <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3b02      	subs	r3, #2
 80012a6:	4960      	ldr	r1, [pc, #384]	; (8001428 <calc_zero_detector+0x250>)
 80012a8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012ac:	fb00 f202 	mul.w	r2, r0, r2
 80012b0:	4413      	add	r3, r2
 80012b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	dd02      	ble.n	80012c4 <calc_zero_detector+0xec>
						detected++;
 80012be:	7ffb      	ldrb	r3, [r7, #31]
 80012c0:	3301      	adds	r3, #1
 80012c2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3302      	adds	r3, #2
 80012c8:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012cc:	d211      	bcs.n	80012f2 <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3302      	adds	r3, #2
 80012d4:	4954      	ldr	r1, [pc, #336]	; (8001428 <calc_zero_detector+0x250>)
 80012d6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012da:	fb00 f202 	mul.w	r2, r0, r2
 80012de:	4413      	add	r3, r2
 80012e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4293      	cmp	r3, r2
 80012ea:	da02      	bge.n	80012f2 <calc_zero_detector+0x11a>
						detected++;
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	3301      	adds	r3, #1
 80012f0:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d90f      	bls.n	8001318 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	494c      	ldr	r1, [pc, #304]	; (800142c <calc_zero_detector+0x254>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]
				detected = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	3301      	adds	r3, #1
 8001314:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 8001316:	e05f      	b.n	80013d8 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4942      	ldr	r1, [pc, #264]	; (8001428 <calc_zero_detector+0x250>)
 8001320:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4413      	add	r3, r2
 800132c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001330:	461a      	mov	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4293      	cmp	r3, r2
 8001336:	dd4f      	ble.n	80013d8 <calc_zero_detector+0x200>
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3b01      	subs	r3, #1
 800133e:	493a      	ldr	r1, [pc, #232]	; (8001428 <calc_zero_detector+0x250>)
 8001340:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001344:	fb00 f202 	mul.w	r2, r0, r2
 8001348:	4413      	add	r3, r2
 800134a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4293      	cmp	r3, r2
 8001354:	dc40      	bgt.n	80013d8 <calc_zero_detector+0x200>
				detected++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd11      	ble.n	8001386 <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	3b02      	subs	r3, #2
 8001368:	492f      	ldr	r1, [pc, #188]	; (8001428 <calc_zero_detector+0x250>)
 800136a:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136e:	fb00 f202 	mul.w	r2, r0, r2
 8001372:	4413      	add	r3, r2
 8001374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001378:	461a      	mov	r2, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4293      	cmp	r3, r2
 800137e:	dc02      	bgt.n	8001386 <calc_zero_detector+0x1ae>
						detected++;
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	3301      	adds	r3, #1
 8001384:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	3302      	adds	r3, #2
 800138a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800138e:	d211      	bcs.n	80013b4 <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <calc_zero_detector+0x250>)
 8001398:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800139c:	fb00 f202 	mul.w	r2, r0, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4293      	cmp	r3, r2
 80013ac:	dd02      	ble.n	80013b4 <calc_zero_detector+0x1dc>
						detected++;
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	3301      	adds	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d90c      	bls.n	80013d4 <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <calc_zero_detector+0x254>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3308      	adds	r3, #8
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	3301      	adds	r3, #1
 80013d2:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3301      	adds	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013e4:	f4ff af1b 	bcc.w	800121e <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 80013e8:	7fbb      	ldrb	r3, [r7, #30]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d917      	bls.n	800141e <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <calc_zero_detector+0x254>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3308      	adds	r3, #8
 80013fe:	f06f 0208 	mvn.w	r2, #8
 8001402:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	4909      	ldr	r1, [pc, #36]	; (800142c <calc_zero_detector+0x254>)
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3304      	adds	r3, #4
 8001414:	f06f 0208 	mvn.w	r2, #8
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e000      	b.n	800141e <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800141c:	bf00      	nop
	}
}
 800141e:	3724      	adds	r7, #36	; 0x24
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20007390 	.word	0x20007390
 800142c:	20000244 	.word	0x20000244

08001430 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing) for both channel
 */
void calc_downsample(uint8_t bufnum) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 800143a:	2300      	movs	r3, #0
 800143c:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b03      	cmp	r3, #3
 8001442:	f200 80f1 	bhi.w	8001628 <calc_downsample+0x1f8>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e083      	b.n	8001554 <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4978      	ldr	r1, [pc, #480]	; (8001630 <calc_downsample+0x200>)
 8001450:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001454:	fb03 f202 	mul.w	r2, r3, r2
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4413      	add	r3, r2
 800145c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001460:	461c      	mov	r4, r3
 8001462:	79fa      	ldrb	r2, [r7, #7]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	3b01      	subs	r3, #1
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <calc_downsample+0x200>)
 800146a:	f44f 7052 	mov.w	r0, #840	; 0x348
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	4413      	add	r3, r2
 8001474:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001478:	4423      	add	r3, r4
 800147a:	79f9      	ldrb	r1, [r7, #7]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	3201      	adds	r2, #1
 8001480:	486b      	ldr	r0, [pc, #428]	; (8001630 <calc_downsample+0x200>)
 8001482:	f44f 7452 	mov.w	r4, #840	; 0x348
 8001486:	fb04 f101 	mul.w	r1, r4, r1
 800148a:	440a      	add	r2, r1
 800148c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8001490:	4413      	add	r3, r2
 8001492:	4a68      	ldr	r2, [pc, #416]	; (8001634 <calc_downsample+0x204>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad1      	subs	r1, r2, r3
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	b28c      	uxth	r4, r1
 80014a2:	4965      	ldr	r1, [pc, #404]	; (8001638 <calc_downsample+0x208>)
 80014a4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014a8:	fb00 f202 	mul.w	r2, r0, r2
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4961      	ldr	r1, [pc, #388]	; (800163c <calc_downsample+0x20c>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	82bb      	strh	r3, [r7, #20]
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	8bfb      	ldrh	r3, [r7, #30]
 80014ca:	495b      	ldr	r1, [pc, #364]	; (8001638 <calc_downsample+0x208>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014da:	827b      	strh	r3, [r7, #18]
 80014dc:	8a7a      	ldrh	r2, [r7, #18]
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	4293      	cmp	r3, r2
 80014e2:	bf28      	it	cs
 80014e4:	4613      	movcs	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4953      	ldr	r1, [pc, #332]	; (800163c <calc_downsample+0x20c>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	4602      	mov	r2, r0
 80014fa:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	494f      	ldr	r1, [pc, #316]	; (800163c <calc_downsample+0x20c>)
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3302      	adds	r3, #2
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	823b      	strh	r3, [r7, #16]
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	8bfb      	ldrh	r3, [r7, #30]
 8001514:	4948      	ldr	r1, [pc, #288]	; (8001638 <calc_downsample+0x208>)
 8001516:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800151a:	fb00 f202 	mul.w	r2, r0, r2
 800151e:	4413      	add	r3, r2
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	89fa      	ldrh	r2, [r7, #14]
 8001528:	8a3b      	ldrh	r3, [r7, #16]
 800152a:	4293      	cmp	r3, r2
 800152c:	bf38      	it	cc
 800152e:	4613      	movcc	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79fa      	ldrb	r2, [r7, #7]
 8001534:	b298      	uxth	r0, r3
 8001536:	4941      	ldr	r1, [pc, #260]	; (800163c <calc_downsample+0x20c>)
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	3302      	adds	r3, #2
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001548:	8bfb      	ldrh	r3, [r7, #30]
 800154a:	3301      	adds	r3, #1
 800154c:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3302      	adds	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f240 3245 	movw	r2, #837	; 0x345
 800155a:	4293      	cmp	r3, r2
 800155c:	f67f af76 	bls.w	800144c <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <calc_downsample+0x200>)
 8001564:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <calc_downsample+0x200>)
 800157a:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4403      	add	r3, r0
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	4618      	mov	r0, r3
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	83f9      	strh	r1, [r7, #30]
 800159c:	461c      	mov	r4, r3
 800159e:	b280      	uxth	r0, r0
 80015a0:	4925      	ldr	r1, [pc, #148]	; (8001638 <calc_downsample+0x208>)
 80015a2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4423      	add	r3, r4
 80015ac:	4602      	mov	r2, r0
 80015ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015b8:	d20a      	bcs.n	80015d0 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	491e      	ldr	r1, [pc, #120]	; (8001638 <calc_downsample+0x208>)
 80015c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015c4:	fb00 f202 	mul.w	r2, r0, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	2200      	movs	r2, #0
 80015cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	491a      	ldr	r1, [pc, #104]	; (800163c <calc_downsample+0x20c>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3302      	adds	r3, #2
 80015e0:	8819      	ldrh	r1, [r3, #0]
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	4815      	ldr	r0, [pc, #84]	; (800163c <calc_downsample+0x20c>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <calc_downsample+0x20c>)
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	18c1      	adds	r1, r0, r3
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <calc_downsample+0x210>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdd9 	bl	80011d8 <calc_zero_detector>
 8001626:	e000      	b.n	800162a <calc_downsample+0x1fa>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001628:	bf00      	nop
}
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	20005950 	.word	0x20005950
 8001634:	55555556 	.word	0x55555556
 8001638:	20007390 	.word	0x20007390
 800163c:	20000244 	.word	0x20000244
 8001640:	cccccccd 	.word	0xcccccccd

08001644 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e039      	b.n	80016c4 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	4a74      	ldr	r2, [pc, #464]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4972      	ldr	r1, [pc, #456]	; (8001828 <calc_filter_measurements+0x1e4>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	4a70      	ldr	r2, [pc, #448]	; (800182c <calc_filter_measurements+0x1e8>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	496e      	ldr	r1, [pc, #440]	; (800182c <calc_filter_measurements+0x1e8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	4a6b      	ldr	r2, [pc, #428]	; (8001830 <calc_filter_measurements+0x1ec>)
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4969      	ldr	r1, [pc, #420]	; (8001830 <calc_filter_measurements+0x1ec>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	4a67      	ldr	r2, [pc, #412]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a62      	ldr	r2, [pc, #392]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4960      	ldr	r1, [pc, #384]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	ddc2      	ble.n	8001650 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 80016ca:	4b5c      	ldr	r3, [pc, #368]	; (800183c <calc_filter_measurements+0x1f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a56      	ldr	r2, [pc, #344]	; (8001828 <calc_filter_measurements+0x1e4>)
 80016d0:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <calc_filter_measurements+0x1fc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a55      	ldr	r2, [pc, #340]	; (800182c <calc_filter_measurements+0x1e8>)
 80016d8:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 80016da:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <calc_filter_measurements+0x200>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a54      	ldr	r2, [pc, #336]	; (8001830 <calc_filter_measurements+0x1ec>)
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 80016e2:	4b59      	ldr	r3, [pc, #356]	; (8001848 <calc_filter_measurements+0x204>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a53      	ldr	r2, [pc, #332]	; (8001834 <calc_filter_measurements+0x1f0>)
 80016e8:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <calc_filter_measurements+0x208>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <calc_filter_measurements+0x1f4>)
 80016f0:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 80016f2:	4b57      	ldr	r3, [pc, #348]	; (8001850 <calc_filter_measurements+0x20c>)
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <calc_filter_measurements+0x210>)
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <calc_filter_measurements+0x214>)
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <calc_filter_measurements+0x218>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <calc_filter_measurements+0x21c>)
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e048      	b.n	80017b2 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001720:	4a41      	ldr	r2, [pc, #260]	; (8001828 <calc_filter_measurements+0x1e4>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b48      	ldr	r3, [pc, #288]	; (8001850 <calc_filter_measurements+0x20c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <calc_filter_measurements+0x20c>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <calc_filter_measurements+0x1e8>)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <calc_filter_measurements+0x210>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b40      	ldr	r3, [pc, #256]	; (8001854 <calc_filter_measurements+0x210>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <calc_filter_measurements+0x1ec>)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <calc_filter_measurements+0x214>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <calc_filter_measurements+0x214>)
 8001770:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 8001774:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <calc_filter_measurements+0x1f0>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <calc_filter_measurements+0x218>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <calc_filter_measurements+0x218>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 8001790:	4a29      	ldr	r2, [pc, #164]	; (8001838 <calc_filter_measurements+0x1f4>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <calc_filter_measurements+0x21c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <calc_filter_measurements+0x21c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	ddb3      	ble.n	8001720 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <calc_filter_measurements+0x20c>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <calc_filter_measurements+0x20c>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <calc_filter_measurements+0x210>)
 80017ce:	ed93 7a00 	vldr	s14, [r3]
 80017d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <calc_filter_measurements+0x210>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <calc_filter_measurements+0x214>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <calc_filter_measurements+0x214>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <calc_filter_measurements+0x218>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80017fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <calc_filter_measurements+0x218>)
 8001804:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <calc_filter_measurements+0x21c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <calc_filter_measurements+0x21c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20000298 	.word	0x20000298
 800182c:	200002c0 	.word	0x200002c0
 8001830:	200002e8 	.word	0x200002e8
 8001834:	20000310 	.word	0x20000310
 8001838:	20000338 	.word	0x20000338
 800183c:	20000360 	.word	0x20000360
 8001840:	20000364 	.word	0x20000364
 8001844:	20000368 	.word	0x20000368
 8001848:	2000036c 	.word	0x2000036c
 800184c:	20000370 	.word	0x20000370
 8001850:	200080b0 	.word	0x200080b0
 8001854:	200080b4 	.word	0x200080b4
 8001858:	200080b8 	.word	0x200080b8
 800185c:	200080bc 	.word	0x200080bc
 8001860:	200080c0 	.word	0x200080c0

08001864 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	ed2d 8b02 	vpush	{d8}
 800186c:	b0a8      	sub	sp, #160	; 0xa0
 800186e:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	int16_t v_reading;			// always positive, we are using the positive half wave
	int16_t i_reading;			// could be negative if current is leading or lagging
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t i1_zero;
	float w=0, va=0;
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	673b      	str	r3, [r7, #112]	; 0x70
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 80018b2:	4bb3      	ldr	r3, [pc, #716]	; (8001b80 <calc_measurements+0x31c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da05      	bge.n	80018c6 <calc_measurements+0x62>
		meter_readings_invalid = 1;
 80018ba:	4bb2      	ldr	r3, [pc, #712]	; (8001b84 <calc_measurements+0x320>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	e2b0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 80018c6:	4bae      	ldr	r3, [pc, #696]	; (8001b80 <calc_measurements+0x31c>)
 80018c8:	885b      	ldrh	r3, [r3, #2]
 80018ca:	461a      	mov	r2, r3
 80018cc:	4bac      	ldr	r3, [pc, #688]	; (8001b80 <calc_measurements+0x31c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dc05      	bgt.n	80018e6 <calc_measurements+0x82>
		meter_readings_invalid = 1;
 80018da:	4baa      	ldr	r3, [pc, #680]	; (8001b84 <calc_measurements+0x320>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e4:	e2a0      	b.n	8001e28 <calc_measurements+0x5c4>
	}

	meter_readings_invalid = 0;		// readings are valid
 80018e6:	4aa7      	ldr	r2, [pc, #668]	; (8001b84 <calc_measurements+0x320>)
 80018e8:	2300      	movs	r3, #0
 80018ea:	7013      	strb	r3, [r2, #0]

	v_zero = (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) / 2;
 80018ec:	4ba4      	ldr	r3, [pc, #656]	; (8001b80 <calc_measurements+0x31c>)
 80018ee:	885b      	ldrh	r3, [r3, #2]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <calc_measurements+0x31c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	0fd3      	lsrs	r3, r2, #31
 80018fa:	4413      	add	r3, r2
 80018fc:	105b      	asrs	r3, r3, #1
 80018fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	i1_zero = (sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min) / 2;
 8001902:	4b9f      	ldr	r3, [pc, #636]	; (8001b80 <calc_measurements+0x31c>)
 8001904:	8adb      	ldrh	r3, [r3, #22]
 8001906:	461a      	mov	r2, r3
 8001908:	4b9d      	ldr	r3, [pc, #628]	; (8001b80 <calc_measurements+0x31c>)
 800190a:	8a9b      	ldrh	r3, [r3, #20]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	0fd3      	lsrs	r3, r2, #31
 8001910:	4413      	add	r3, r2
 8001912:	105b      	asrs	r3, r3, #1
 8001914:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	// Calculate values using the positive half of the sine wave

	// add up squared measurements
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <calc_measurements+0x31c>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <calc_measurements+0x31c>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	429a      	cmp	r2, r3
 8001922:	f280 8091 	bge.w	8001a48 <calc_measurements+0x1e4>
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001926:	4b96      	ldr	r3, [pc, #600]	; (8001b80 <calc_measurements+0x31c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800192e:	e083      	b.n	8001a38 <calc_measurements+0x1d4>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001930:	4a95      	ldr	r2, [pc, #596]	; (8001b88 <calc_measurements+0x324>)
 8001932:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001936:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800193a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001946:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800194a:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	17da      	asrs	r2, r3, #31
 8001954:	461c      	mov	r4, r3
 8001956:	4615      	mov	r5, r2
 8001958:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800195c:	eb12 0a04 	adds.w	sl, r2, r4
 8001960:	eb43 0b05 	adc.w	fp, r3, r5
 8001964:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <calc_measurements+0x324>)
 800196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001972:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001976:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001982:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001986:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800198a:	fb02 f303 	mul.w	r3, r2, r3
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	4698      	mov	r8, r3
 8001992:	4691      	mov	r9, r2
 8001994:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001998:	eb12 0108 	adds.w	r1, r2, r8
 800199c:	6239      	str	r1, [r7, #32]
 800199e:	eb43 0309 	adc.w	r3, r3, r9
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
 80019a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 80019ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 80019b6:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fa88 	bl	8001ed0 <calc_adc_raw_to_V>
 80019c0:	eeb0 8a40 	vmov.f32	s16, s0
 80019c4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa9f 	bl	8001f0c <calc_adc_raw_to_A>
 80019ce:	eef0 7a40 	vmov.f32	s15, s0
 80019d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80019d6:	ee17 0a90 	vmov	r0, s15
 80019da:	f7fe fdd5 	bl	8000588 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 80019e6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0a      	blt.n	8001a04 <calc_measurements+0x1a0>
				i1_va_acc += va_instant;
 80019ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80019f6:	f7fe fc69 	bl	80002cc <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a02:	e014      	b.n	8001a2e <calc_measurements+0x1ca>
			} else {
				i1_w_acc += abs(va_instant);
 8001a04:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a08:	f7ff f8c6 	bl	8000b98 <__aeabi_d2iz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fda5 	bl	8000564 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a22:	f7fe fc53 	bl	80002cc <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a32:	3301      	adds	r3, #1
 8001a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a38:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <calc_measurements+0x31c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001a40:	429a      	cmp	r2, r3
 8001a42:	f6ff af75 	blt.w	8001930 <calc_measurements+0xcc>
 8001a46:	e134      	b.n	8001cb2 <calc_measurements+0x44e>
			}
		}
	} else {
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <calc_measurements+0x31c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a50:	e08b      	b.n	8001b6a <calc_measurements+0x306>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001a52:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <calc_measurements+0x324>)
 8001a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a5c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001a68:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001a6c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	17da      	asrs	r2, r3, #31
 8001a76:	653b      	str	r3, [r7, #80]	; 0x50
 8001a78:	657a      	str	r2, [r7, #84]	; 0x54
 8001a7a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a7e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a82:	4621      	mov	r1, r4
 8001a84:	1851      	adds	r1, r2, r1
 8001a86:	61b9      	str	r1, [r7, #24]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	414b      	adcs	r3, r1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a92:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001a96:	4a3c      	ldr	r2, [pc, #240]	; (8001b88 <calc_measurements+0x324>)
 8001a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001aa0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aa4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001ab0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001ab4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	17da      	asrs	r2, r3, #31
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ac2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ac6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001aca:	4621      	mov	r1, r4
 8001acc:	1851      	adds	r1, r2, r1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	414b      	adcs	r3, r1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ada:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001ade:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001ae8:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f9ef 	bl	8001ed0 <calc_adc_raw_to_V>
 8001af2:	eeb0 8a40 	vmov.f32	s16, s0
 8001af6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fa06 	bl	8001f0c <calc_adc_raw_to_A>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b08:	ee17 0a90 	vmov	r0, s15
 8001b0c:	f7fe fd3c 	bl	8000588 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001b18:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <calc_measurements+0x2d2>
				i1_va_acc += va_instant;
 8001b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b24:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001b28:	f7fe fbd0 	bl	80002cc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001b34:	e014      	b.n	8001b60 <calc_measurements+0x2fc>
			} else {
				i1_w_acc += abs(va_instant);
 8001b36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b3a:	f7ff f82d 	bl	8000b98 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bfb8      	it	lt
 8001b44:	425b      	neglt	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd0c 	bl	8000564 <__aeabi_i2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b54:	f7fe fbba 	bl	80002cc <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	3301      	adds	r3, #1
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001b72:	f4ff af6e 	bcc.w	8001a52 <calc_measurements+0x1ee>
			}
		}
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001b76:	2314      	movs	r3, #20
 8001b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001b7c:	e092      	b.n	8001ca4 <calc_measurements+0x440>
 8001b7e:	bf00      	nop
 8001b80:	20000244 	.word	0x20000244
 8001b84:	20000294 	.word	0x20000294
 8001b88:	20007390 	.word	0x20007390
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001b8c:	4aaa      	ldr	r2, [pc, #680]	; (8001e38 <calc_measurements+0x5d4>)
 8001b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b96:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			v_sq_acc += v_reading * v_reading;
 8001ba2:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001ba6:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	17da      	asrs	r2, r3, #31
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8001bb4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001bb8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	1851      	adds	r1, r2, r1
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	414b      	adcs	r3, r1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bcc:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001bd0:	4a99      	ldr	r2, [pc, #612]	; (8001e38 <calc_measurements+0x5d4>)
 8001bd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001bda:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001bde:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			i1_sq_acc += i_reading * i_reading;
 8001bea:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001bee:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	17da      	asrs	r2, r3, #31
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c00:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c04:	4621      	mov	r1, r4
 8001c06:	1851      	adds	r1, r2, r1
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	414b      	adcs	r3, r1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c14:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001c18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001c22:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f952 	bl	8001ed0 <calc_adc_raw_to_V>
 8001c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8001c30:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f969 	bl	8001f0c <calc_adc_raw_to_A>
 8001c3a:	eef0 7a40 	vmov.f32	s15, s0
 8001c3e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fc9f 	bl	8000588 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001c52:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0a      	blt.n	8001c70 <calc_measurements+0x40c>
				i1_va_acc += va_instant;
 8001c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c62:	f7fe fb33 	bl	80002cc <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001c6e:	e014      	b.n	8001c9a <calc_measurements+0x436>
			} else {
				i1_w_acc += abs(va_instant);
 8001c70:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c74:	f7fe ff90 	bl	8000b98 <__aeabi_d2iz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bfb8      	it	lt
 8001c7e:	425b      	neglt	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc6f 	bl	8000564 <__aeabi_i2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c8e:	f7fe fb1d 	bl	80002cc <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ca4:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <calc_measurements+0x5d8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f6ff af6d 	blt.w	8001b8c <calc_measurements+0x328>
			}
		}
	}

	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001cb2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cba:	637a      	str	r2, [r7, #52]	; 0x34
 8001cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cc4:	f7fe ffe0 	bl	8000c88 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fc84 	bl	80005dc <__aeabi_l2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	ec43 2b10 	vmov	d0, r2, r3
 8001cdc:	f00f f834 	bl	8010d48 <sqrt>
 8001ce0:	ec53 2b10 	vmov	r2, r3, d0
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe ff56 	bl	8000b98 <__aeabi_d2iz>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f8ed 	bl	8001ed0 <calc_adc_raw_to_V>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b51      	ldr	r3, [pc, #324]	; (8001e40 <calc_measurements+0x5dc>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
	i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001d00:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d04:	2200      	movs	r2, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d0e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d12:	f7fe ffb9 	bl	8000c88 <__aeabi_ldivmod>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fc5d 	bl	80005dc <__aeabi_l2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f00f f80d 	bl	8010d48 <sqrt>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff2f 	bl	8000b98 <__aeabi_d2iz>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f8e4 	bl	8001f0c <calc_adc_raw_to_A>
 8001d44:	eef0 7a40 	vmov.f32	s15, s0
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <calc_measurements+0x5e0>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
	if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d5a:	f7fe fefd 	bl	8000b58 <__aeabi_dcmpgt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <calc_measurements+0x526>
 8001d64:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbfb 	bl	8000564 <__aeabi_i2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d76:	f7fe fd89 	bl	800088c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff31 	bl	8000be8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d96:	f7fe fedf 	bl	8000b58 <__aeabi_dcmpgt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <calc_measurements+0x562>
 8001da0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbdd 	bl	8000564 <__aeabi_i2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001db2:	f7fe fd6b 	bl	800088c <__aeabi_ddiv>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff13 	bl	8000be8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
	va1_measured = v_measured * i1_measured;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <calc_measurements+0x5dc>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <calc_measurements+0x5e0>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <calc_measurements+0x5e4>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	if (w > 0) {
 8001ddc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	dd09      	ble.n	8001dfe <calc_measurements+0x59a>
		w1_measured = va - w;
 8001dea:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001dee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <calc_measurements+0x5e8>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
 8001dfc:	e003      	b.n	8001e06 <calc_measurements+0x5a2>
	} else {
		w1_measured = va1_measured;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <calc_measurements+0x5e4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <calc_measurements+0x5e8>)
 8001e04:	6013      	str	r3, [r2, #0]
	}
	pf1_measured = w1_measured / va1_measured;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <calc_measurements+0x5e8>)
 8001e08:	edd3 6a00 	vldr	s13, [r3]
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <calc_measurements+0x5e4>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <calc_measurements+0x5ec>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <calc_measurements+0x5d8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	731a      	strb	r2, [r3, #12]

	// add measurements to filter
	calc_filter_measurements();
 8001e22:	f7ff fc0f 	bl	8001644 <calc_filter_measurements>

	return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	37a0      	adds	r7, #160	; 0xa0
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	ecbd 8b02 	vpop	{d8}
 8001e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	20007390 	.word	0x20007390
 8001e3c:	20000244 	.word	0x20000244
 8001e40:	20000360 	.word	0x20000360
 8001e44:	20000364 	.word	0x20000364
 8001e48:	20000368 	.word	0x20000368
 8001e4c:	2000036c 	.word	0x2000036c
 8001e50:	20000370 	.word	0x20000370

08001e54 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f816 	bl	8001e94 <calc_adc_raw_to_mv_float>
 8001e68:	ee10 3a10 	vmov	r3, s0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b10 	vmov	d0, r2, r3
 8001e7a:	f00f f875 	bl	8010f68 <round>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe87 	bl	8000b98 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eaa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ec8 <calc_adc_raw_to_mv_float+0x34>
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ecc <calc_adc_raw_to_mv_float+0x38>
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001eba:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	457ff000 	.word	0x457ff000
 8001ecc:	454e4000 	.word	0x454e4000

08001ed0 <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f04 <calc_adc_raw_to_V+0x34>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f08 <calc_adc_raw_to_V+0x38>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	457ff000 	.word	0x457ff000
 8001f08:	44480000 	.word	0x44480000

08001f0c <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f40 <calc_adc_raw_to_A+0x34>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f44 <calc_adc_raw_to_A+0x38>
 8001f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	457ff000 	.word	0x457ff000
 8001f44:	43480000 	.word	0x43480000

08001f48 <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <cmd_error+0x18>)
 8001f54:	f002 fe14 	bl	8004b80 <term_print>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08011098 	.word	0x08011098

08001f64 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b74      	cmp	r3, #116	; 0x74
 8001f74:	d014      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f76:	2b74      	cmp	r3, #116	; 0x74
 8001f78:	dc17      	bgt.n	8001faa <cmd_t+0x46>
 8001f7a:	2b54      	cmp	r3, #84	; 0x54
 8001f7c:	d010      	beq.n	8001fa0 <cmd_t+0x3c>
 8001f7e:	2b54      	cmp	r3, #84	; 0x54
 8001f80:	dc13      	bgt.n	8001faa <cmd_t+0x46>
 8001f82:	2b30      	cmp	r3, #48	; 0x30
 8001f84:	d002      	beq.n	8001f8c <cmd_t+0x28>
 8001f86:	2b31      	cmp	r3, #49	; 0x31
 8001f88:	d005      	beq.n	8001f96 <cmd_t+0x32>
 8001f8a:	e00e      	b.n	8001faa <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <cmd_t+0x58>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00b      	b.n	8001fae <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <cmd_t+0x58>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
		return 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e006      	b.n	8001fae <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <cmd_t+0x58>)
 8001fa2:	2209      	movs	r2, #9
 8001fa4:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e001      	b.n	8001fae <cmd_t+0x4a>
	}
	return -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200024b8 	.word	0x200024b8

08001fc0 <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <cmd_p+0x38>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00b fd6e 	bl	800dab4 <siscanf>
 8001fd8:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d002      	beq.n	8001fe6 <cmd_p+0x26>
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe4:	e004      	b.n	8001ff0 <cmd_p+0x30>
	new_time_period = value;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <cmd_p+0x3c>)
 8001fec:	801a      	strh	r2, [r3, #0]
	return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	080110b0 	.word	0x080110b0
 8001ffc:	200024ba 	.word	0x200024ba

08002000 <cmd_led>:

int cmd_led(int cmd) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	dd05      	ble.n	800201a <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <cmd_led+0x30>)
 8002014:	f007 f804 	bl	8009020 <HAL_GPIO_WritePin>
 8002018:	e004      	b.n	8002024 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	2120      	movs	r1, #32
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_led+0x30>)
 8002020:	f006 fffe 	bl	8009020 <HAL_GPIO_WritePin>
	}
	return(0);
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020000 	.word	0x40020000

08002034 <cmd_help>:


int cmd_help(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002038:	4813      	ldr	r0, [pc, #76]	; (8002088 <cmd_help+0x54>)
 800203a:	f002 fda1 	bl	8004b80 <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 800203e:	4813      	ldr	r0, [pc, #76]	; (800208c <cmd_help+0x58>)
 8002040:	f002 fd9e 	bl	8004b80 <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002044:	4812      	ldr	r0, [pc, #72]	; (8002090 <cmd_help+0x5c>)
 8002046:	f002 fd9b 	bl	8004b80 <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 800204a:	4812      	ldr	r0, [pc, #72]	; (8002094 <cmd_help+0x60>)
 800204c:	f002 fd98 	bl	8004b80 <term_print>
#endif
	term_print("E: Toggle ESP mode\r\n");
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <cmd_help+0x64>)
 8002052:	f002 fd95 	bl	8004b80 <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <cmd_help+0x68>)
 8002058:	f002 fd92 	bl	8004b80 <term_print>
	term_print("M show measurements using all channels");
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <cmd_help+0x6c>)
 800205e:	f002 fd8f 	bl	8004b80 <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <cmd_help+0x70>)
 8002064:	f002 fd8c 	bl	8004b80 <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <cmd_help+0x74>)
 800206a:	f002 fd89 	bl	8004b80 <term_print>
	term_print("R: Restart ADC conversion\r\n");
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <cmd_help+0x78>)
 8002070:	f002 fd86 	bl	8004b80 <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002074:	480e      	ldr	r0, [pc, #56]	; (80020b0 <cmd_help+0x7c>)
 8002076:	f002 fd83 	bl	8004b80 <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 800207a:	480e      	ldr	r0, [pc, #56]	; (80020b4 <cmd_help+0x80>)
 800207c:	f002 fd80 	bl	8004b80 <term_print>
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	080110b4 	.word	0x080110b4
 800208c:	080110c8 	.word	0x080110c8
 8002090:	08011100 	.word	0x08011100
 8002094:	08011134 	.word	0x08011134
 8002098:	08011160 	.word	0x08011160
 800209c:	08011178 	.word	0x08011178
 80020a0:	08011194 	.word	0x08011194
 80020a4:	080111bc 	.word	0x080111bc
 80020a8:	08011204 	.word	0x08011204
 80020ac:	08011238 	.word	0x08011238
 80020b0:	08011254 	.word	0x08011254
 80020b4:	08011294 	.word	0x08011294

080020b8 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	int retval = -1;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c4:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	3b3f      	subs	r3, #63	; 0x3f
 80020cc:	2b35      	cmp	r3, #53	; 0x35
 80020ce:	f200 80d8 	bhi.w	8002282 <cmd_process+0x1ca>
 80020d2:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <cmd_process+0x20>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	0800227d 	.word	0x0800227d
 80020dc:	08002283 	.word	0x08002283
 80020e0:	08002283 	.word	0x08002283
 80020e4:	08002283 	.word	0x08002283
 80020e8:	080021b1 	.word	0x080021b1
 80020ec:	080021c7 	.word	0x080021c7
 80020f0:	080021ef 	.word	0x080021ef
 80020f4:	08002283 	.word	0x08002283
 80020f8:	08002283 	.word	0x08002283
 80020fc:	0800227d 	.word	0x0800227d
 8002100:	08002283 	.word	0x08002283
 8002104:	08002283 	.word	0x08002283
 8002108:	08002283 	.word	0x08002283
 800210c:	0800220d 	.word	0x0800220d
 8002110:	0800221f 	.word	0x0800221f
 8002114:	08002283 	.word	0x08002283
 8002118:	08002283 	.word	0x08002283
 800211c:	08002247 	.word	0x08002247
 8002120:	08002283 	.word	0x08002283
 8002124:	08002251 	.word	0x08002251
 8002128:	0800225d 	.word	0x0800225d
 800212c:	08002273 	.word	0x08002273
 8002130:	08002283 	.word	0x08002283
 8002134:	08002283 	.word	0x08002283
 8002138:	08002283 	.word	0x08002283
 800213c:	08002283 	.word	0x08002283
 8002140:	08002283 	.word	0x08002283
 8002144:	08002283 	.word	0x08002283
 8002148:	08002283 	.word	0x08002283
 800214c:	08002283 	.word	0x08002283
 8002150:	08002283 	.word	0x08002283
 8002154:	08002283 	.word	0x08002283
 8002158:	08002283 	.word	0x08002283
 800215c:	08002283 	.word	0x08002283
 8002160:	08002283 	.word	0x08002283
 8002164:	08002283 	.word	0x08002283
 8002168:	080021b1 	.word	0x080021b1
 800216c:	080021c7 	.word	0x080021c7
 8002170:	080021ef 	.word	0x080021ef
 8002174:	08002283 	.word	0x08002283
 8002178:	08002283 	.word	0x08002283
 800217c:	0800227d 	.word	0x0800227d
 8002180:	08002283 	.word	0x08002283
 8002184:	08002283 	.word	0x08002283
 8002188:	08002283 	.word	0x08002283
 800218c:	0800220d 	.word	0x0800220d
 8002190:	0800221f 	.word	0x0800221f
 8002194:	08002283 	.word	0x08002283
 8002198:	08002283 	.word	0x08002283
 800219c:	08002247 	.word	0x08002247
 80021a0:	08002283 	.word	0x08002283
 80021a4:	08002251 	.word	0x08002251
 80021a8:	0800225d 	.word	0x0800225d
 80021ac:	08002273 	.word	0x08002273
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3301      	adds	r3, #1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3b31      	subs	r3, #49	; 0x31
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fef2 	bl	8004fa4 <term_csv_buffer>
		retval = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
		break;
 80021c4:	e05d      	b.n	8002282 <cmd_process+0x1ca>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe f872 	bl	80002b0 <strlen>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d908      	bls.n	80021e4 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	3b31      	subs	r3, #49	; 0x31
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 f86f 	bl	80032c0 <display_show_curve>
 80021e2:	e001      	b.n	80021e8 <cmd_process+0x130>
		} else {
			display_show_curves();
 80021e4:	f001 f838 	bl	8003258 <display_show_curves>
		}
		retval = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
		break;
 80021ec:	e049      	b.n	8002282 <cmd_process+0x1ca>
#endif
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 80021ee:	4b27      	ldr	r3, [pc, #156]	; (800228c <cmd_process+0x1d4>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <cmd_process+0x146>
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <cmd_process+0x1d4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 80021fc:	e041      	b.n	8002282 <cmd_process+0x1ca>
			esp_mode = 1;
 80021fe:	4b23      	ldr	r3, [pc, #140]	; (800228c <cmd_process+0x1d4>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 8002204:	4822      	ldr	r0, [pc, #136]	; (8002290 <cmd_process+0x1d8>)
 8002206:	f002 fcbb 	bl	8004b80 <term_print>
		break;
 800220a:	e03a      	b.n	8002282 <cmd_process+0x1ca>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3b2f      	subs	r3, #47	; 0x2f
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fef3 	bl	8002000 <cmd_led>
 800221a:	60f8      	str	r0, [r7, #12]
		break;
 800221c:	e031      	b.n	8002282 <cmd_process+0x1ca>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f846 	bl	80002b0 <strlen>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	d908      	bls.n	800223c <cmd_process+0x184>
		    term_show_channel(cmd_str[1] - 0x31);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3301      	adds	r3, #1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3b31      	subs	r3, #49	; 0x31
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fdcb 	bl	8004dd0 <term_show_channel>
 800223a:	e001      	b.n	8002240 <cmd_process+0x188>
		} else {
			term_show_measurements();
 800223c:	f002 fd54 	bl	8004ce8 <term_show_measurements>
		}
		retval = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
		break;
 8002244:	e01d      	b.n	8002282 <cmd_process+0x1ca>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff feba 	bl	8001fc0 <cmd_p>
 800224c:	60f8      	str	r0, [r7, #12]
		break;
 800224e:	e018      	b.n	8002282 <cmd_process+0x1ca>
	case 'R':
	case 'r':
		adc_restart = 1;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <cmd_process+0x1dc>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
		break;
 800225a:	e012      	b.n	8002282 <cmd_process+0x1ca>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3301      	adds	r3, #1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	3b31      	subs	r3, #49	; 0x31
 8002264:	b2db      	uxtb	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fce6 	bl	8004c38 <term_show_buffer>
		retval = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
		break;
 8002270:	e007      	b.n	8002282 <cmd_process+0x1ca>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe76 	bl	8001f64 <cmd_t>
 8002278:	60f8      	str	r0, [r7, #12]
		break;
 800227a:	e002      	b.n	8002282 <cmd_process+0x1ca>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 800227c:	f7ff feda 	bl	8002034 <cmd_help>
 8002280:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200024b9 	.word	0x200024b9
 8002290:	080112c8 	.word	0x080112c8
 8002294:	200024b7 	.word	0x200024b7

08002298 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe f805 	bl	80002b0 <strlen>
 80022a6:	4603      	mov	r3, r0
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <CMD_Handler+0x3c>)
 80022ac:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <CMD_Handler+0x3c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fe46 	bl	8001f48 <cmd_error>
		return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c0:	e003      	b.n	80022ca <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fef8 	bl	80020b8 <cmd_process>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000374 	.word	0x20000374

080022d8 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80022dc:	2302      	movs	r3, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fc10 	bl	8005b04 <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80022e4:	2302      	movs	r3, #2
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d002      	beq.n	80022f0 <display_init+0x18>
 80022ea:	2302      	movs	r3, #2
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d107      	bne.n	8002300 <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <display_init+0x3c>)
 80022f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022f6:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <display_init+0x40>)
 80022fa:	22f0      	movs	r2, #240	; 0xf0
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <display_init+0x40>)
 8002302:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002306:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <display_init+0x3c>)
 800230a:	22f0      	movs	r2, #240	; 0xf0
 800230c:	801a      	strh	r2, [r3, #0]
	}
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20001fea 	.word	0x20001fea
 8002318:	20001fec 	.word	0x20001fec

0800231c <display_splash_screen>:

void display_splash_screen() {
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	b087      	sub	sp, #28
 8002320:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 8002322:	2000      	movs	r0, #0
 8002324:	f003 fe44 	bl	8005fb0 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 8002328:	2302      	movs	r3, #2
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2300      	movs	r3, #0
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <display_splash_screen+0xe4>)
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <display_splash_screen+0xe8>)
 8002334:	2120      	movs	r1, #32
 8002336:	4834      	ldr	r0, [pc, #208]	; (8002408 <display_splash_screen+0xec>)
 8002338:	f00b fb5c 	bl	800d9f4 <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <display_splash_screen+0xf0>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	461c      	mov	r4, r3
 8002342:	4831      	ldr	r0, [pc, #196]	; (8002408 <display_splash_screen+0xec>)
 8002344:	f7fd ffb4 	bl	80002b0 <strlen>
 8002348:	4603      	mov	r3, r0
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <display_splash_screen+0xf4>)
 800234c:	8892      	ldrh	r2, [r2, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	1ae3      	subs	r3, r4, r3
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	b29c      	uxth	r4, r3
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <display_splash_screen+0xf8>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <display_splash_screen+0xf4>)
 8002360:	88db      	ldrh	r3, [r3, #6]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	0fda      	lsrs	r2, r3, #31
 8002366:	4413      	add	r3, r2
 8002368:	105b      	asrs	r3, r3, #1
 800236a:	b29d      	uxth	r5, r3
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <display_splash_screen+0xf4>)
 800236e:	2200      	movs	r2, #0
 8002370:	9204      	str	r2, [sp, #16]
 8002372:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002376:	9203      	str	r2, [sp, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	466e      	mov	r6, sp
 800237e:	1d1a      	adds	r2, r3, #4
 8002380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002384:	e886 0003 	stmia.w	r6, {r0, r1}
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <display_splash_screen+0xec>)
 800238c:	4629      	mov	r1, r5
 800238e:	4620      	mov	r0, r4
 8002390:	f004 fd80 	bl	8006e94 <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <display_splash_screen+0xf0>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	461c      	mov	r4, r3
 800239a:	481f      	ldr	r0, [pc, #124]	; (8002418 <display_splash_screen+0xfc>)
 800239c:	f7fd ff88 	bl	80002b0 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <display_splash_screen+0x100>)
 80023a4:	8892      	ldrh	r2, [r2, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	1ae3      	subs	r3, r4, r3
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	b29c      	uxth	r4, r3
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <display_splash_screen+0xf8>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <display_splash_screen+0xf4>)
 80023b8:	88db      	ldrh	r3, [r3, #6]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	0fda      	lsrs	r2, r3, #31
 80023be:	4413      	add	r3, r2
 80023c0:	105b      	asrs	r3, r3, #1
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3319      	adds	r3, #25
 80023c6:	b29d      	uxth	r5, r3
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <display_splash_screen+0x100>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	9204      	str	r2, [sp, #16]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	9203      	str	r2, [sp, #12]
 80023d4:	2201      	movs	r2, #1
 80023d6:	9202      	str	r2, [sp, #8]
 80023d8:	466e      	mov	r6, sp
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <display_splash_screen+0xfc>)
 80023e8:	4629      	mov	r1, r5
 80023ea:	4620      	mov	r0, r4
 80023ec:	f004 fd52 	bl	8006e94 <Displ_WString>

	Displ_BackLight('1');
 80023f0:	2031      	movs	r0, #49	; 0x31
 80023f2:	f004 fd8f 	bl	8006f14 <Displ_BackLight>
}
 80023f6:	bf00      	nop
 80023f8:	3704      	adds	r7, #4
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fe:	bf00      	nop
 8002400:	08015a14 	.word	0x08015a14
 8002404:	080112f0 	.word	0x080112f0
 8002408:	20001fc8 	.word	0x20001fc8
 800240c:	20001fea 	.word	0x20001fea
 8002410:	20000018 	.word	0x20000018
 8002414:	20001fec 	.word	0x20001fec
 8002418:	08015a18 	.word	0x08015a18
 800241c:	2000000c 	.word	0x2000000c

08002420 <display_screen1>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// main screen
void display_screen1() {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <display_screen1+0x220>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8122 	bne.w	8002674 <display_screen1+0x254>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <display_screen1+0x224>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8a7 	bl	8000588 <__aeabi_f2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	e9cd 2300 	strd	r2, r3, [sp]
 8002442:	4a81      	ldr	r2, [pc, #516]	; (8002648 <display_screen1+0x228>)
 8002444:	2120      	movs	r1, #32
 8002446:	4881      	ldr	r0, [pc, #516]	; (800264c <display_screen1+0x22c>)
 8002448:	f00b fad4 	bl	800d9f4 <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800244c:	4b80      	ldr	r3, [pc, #512]	; (8002650 <display_screen1+0x230>)
 800244e:	2200      	movs	r2, #0
 8002450:	9204      	str	r2, [sp, #16]
 8002452:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002456:	9203      	str	r2, [sp, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	9202      	str	r2, [sp, #8]
 800245c:	466c      	mov	r4, sp
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002464:	e884 0003 	stmia.w	r4, {r0, r1}
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <display_screen1+0x22c>)
 800246c:	2107      	movs	r1, #7
 800246e:	2009      	movs	r0, #9
 8002470:	f004 fd10 	bl	8006e94 <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 8002474:	4b77      	ldr	r3, [pc, #476]	; (8002654 <display_screen1+0x234>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f885 	bl	8000588 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	e9cd 2300 	strd	r2, r3, [sp]
 8002486:	4a74      	ldr	r2, [pc, #464]	; (8002658 <display_screen1+0x238>)
 8002488:	2120      	movs	r1, #32
 800248a:	4870      	ldr	r0, [pc, #448]	; (800264c <display_screen1+0x22c>)
 800248c:	f00b fab2 	bl	800d9f4 <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <display_screen1+0x230>)
 8002492:	2200      	movs	r2, #0
 8002494:	9204      	str	r2, [sp, #16]
 8002496:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800249a:	9203      	str	r2, [sp, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	9202      	str	r2, [sp, #8]
 80024a0:	466c      	mov	r4, sp
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <display_screen1+0x22c>)
 80024b0:	2107      	movs	r1, #7
 80024b2:	2078      	movs	r0, #120	; 0x78
 80024b4:	f004 fcee 	bl	8006e94 <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 80024b8:	4b68      	ldr	r3, [pc, #416]	; (800265c <display_screen1+0x23c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f863 	bl	8000588 <__aeabi_f2d>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	e9cd 2300 	strd	r2, r3, [sp]
 80024ca:	4a65      	ldr	r2, [pc, #404]	; (8002660 <display_screen1+0x240>)
 80024cc:	2120      	movs	r1, #32
 80024ce:	485f      	ldr	r0, [pc, #380]	; (800264c <display_screen1+0x22c>)
 80024d0:	f00b fa90 	bl	800d9f4 <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80024d4:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <display_screen1+0x230>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	9204      	str	r2, [sp, #16]
 80024da:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024de:	9203      	str	r2, [sp, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	9202      	str	r2, [sp, #8]
 80024e4:	466c      	mov	r4, sp
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <display_screen1+0x22c>)
 80024f4:	2130      	movs	r1, #48	; 0x30
 80024f6:	2009      	movs	r0, #9
 80024f8:	f004 fccc 	bl	8006e94 <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <display_screen1+0x244>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f841 	bl	8000588 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9cd 2300 	strd	r2, r3, [sp]
 800250e:	4a54      	ldr	r2, [pc, #336]	; (8002660 <display_screen1+0x240>)
 8002510:	2120      	movs	r1, #32
 8002512:	484e      	ldr	r0, [pc, #312]	; (800264c <display_screen1+0x22c>)
 8002514:	f00b fa6e 	bl	800d9f4 <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <display_screen1+0x230>)
 800251a:	2200      	movs	r2, #0
 800251c:	9204      	str	r2, [sp, #16]
 800251e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002522:	9203      	str	r2, [sp, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	466c      	mov	r4, sp
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002530:	e884 0003 	stmia.w	r4, {r0, r1}
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a45      	ldr	r2, [pc, #276]	; (800264c <display_screen1+0x22c>)
 8002538:	2159      	movs	r1, #89	; 0x59
 800253a:	2009      	movs	r0, #9
 800253c:	f004 fcaa 	bl	8006e94 <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf1) );
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <display_screen1+0x248>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	eef0 7ae7 	vabs.f32	s15, s15
 800254a:	ee17 0a90 	vmov	r0, s15
 800254e:	f7fe f81b 	bl	8000588 <__aeabi_f2d>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	e9cd 2300 	strd	r2, r3, [sp]
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <display_screen1+0x24c>)
 800255c:	2120      	movs	r1, #32
 800255e:	483b      	ldr	r0, [pc, #236]	; (800264c <display_screen1+0x22c>)
 8002560:	f00b fa48 	bl	800d9f4 <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 8002564:	4b3a      	ldr	r3, [pc, #232]	; (8002650 <display_screen1+0x230>)
 8002566:	2200      	movs	r2, #0
 8002568:	9204      	str	r2, [sp, #16]
 800256a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256e:	9203      	str	r2, [sp, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	466c      	mov	r4, sp
 8002576:	1d1a      	adds	r2, r3, #4
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <display_screen1+0x22c>)
 8002584:	2182      	movs	r1, #130	; 0x82
 8002586:	2009      	movs	r0, #9
 8002588:	f004 fc84 	bl	8006e94 <Displ_WString>
		// Angle
		if (metervalue_pf1 < 0) {
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <display_screen1+0x248>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d51b      	bpl.n	80025d4 <display_screen1+0x1b4>
			snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <display_screen1+0x248>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fff1 	bl	8000588 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	ec43 2b10 	vmov	d0, r2, r3
 80025ae:	f00e f935 	bl	801081c <acos>
 80025b2:	ec51 0b10 	vmov	r0, r1, d0
 80025b6:	a320      	add	r3, pc, #128	; (adr r3, 8002638 <display_screen1+0x218>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fe f83c 	bl	8000638 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	e9cd 2300 	strd	r2, r3, [sp]
 80025c8:	4a29      	ldr	r2, [pc, #164]	; (8002670 <display_screen1+0x250>)
 80025ca:	2120      	movs	r1, #32
 80025cc:	481f      	ldr	r0, [pc, #124]	; (800264c <display_screen1+0x22c>)
 80025ce:	f00b fa11 	bl	800d9f4 <sniprintf>
 80025d2:	e01a      	b.n	800260a <display_screen1+0x1ea>
		} else {
			snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <display_screen1+0x248>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffd5 	bl	8000588 <__aeabi_f2d>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ec43 2b10 	vmov	d0, r2, r3
 80025e6:	f00e f919 	bl	801081c <acos>
 80025ea:	ec51 0b10 	vmov	r0, r1, d0
 80025ee:	a312      	add	r3, pc, #72	; (adr r3, 8002638 <display_screen1+0x218>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f820 	bl	8000638 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <display_screen1+0x238>)
 8002602:	2120      	movs	r1, #32
 8002604:	4811      	ldr	r0, [pc, #68]	; (800264c <display_screen1+0x22c>)
 8002606:	f00b f9f5 	bl	800d9f4 <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <display_screen1+0x230>)
 800260c:	2200      	movs	r2, #0
 800260e:	9204      	str	r2, [sp, #16]
 8002610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002614:	9203      	str	r2, [sp, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	9202      	str	r2, [sp, #8]
 800261a:	466c      	mov	r4, sp
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002622:	e884 0003 	stmia.w	r4, {r0, r1}
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a08      	ldr	r2, [pc, #32]	; (800264c <display_screen1+0x22c>)
 800262a:	2182      	movs	r1, #130	; 0x82
 800262c:	208a      	movs	r0, #138	; 0x8a
 800262e:	f004 fc31 	bl	8006e94 <Displ_WString>
 8002632:	e097      	b.n	8002764 <display_screen1+0x344>
 8002634:	f3af 8000 	nop.w
 8002638:	1af05a77 	.word	0x1af05a77
 800263c:	404ca5dc 	.word	0x404ca5dc
 8002640:	20000294 	.word	0x20000294
 8002644:	200080b0 	.word	0x200080b0
 8002648:	0801130c 	.word	0x0801130c
 800264c:	20001fc8 	.word	0x20001fc8
 8002650:	20000024 	.word	0x20000024
 8002654:	200080b4 	.word	0x200080b4
 8002658:	08011314 	.word	0x08011314
 800265c:	200080b8 	.word	0x200080b8
 8002660:	0801131c 	.word	0x0801131c
 8002664:	200080bc 	.word	0x200080bc
 8002668:	200080c0 	.word	0x200080c0
 800266c:	08011324 	.word	0x08011324
 8002670:	0801132c 	.word	0x0801132c
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 8002674:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <display_screen1+0x350>)
 8002676:	2200      	movs	r2, #0
 8002678:	9204      	str	r2, [sp, #16]
 800267a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800267e:	9203      	str	r2, [sp, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	9202      	str	r2, [sp, #8]
 8002684:	466c      	mov	r4, sp
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <display_screen1+0x354>)
 8002694:	2107      	movs	r1, #7
 8002696:	2009      	movs	r0, #9
 8002698:	f004 fbfc 	bl	8006e94 <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <display_screen1+0x350>)
 800269e:	2200      	movs	r2, #0
 80026a0:	9204      	str	r2, [sp, #16]
 80026a2:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 80026a6:	9203      	str	r2, [sp, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	9202      	str	r2, [sp, #8]
 80026ac:	466c      	mov	r4, sp
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2f      	ldr	r2, [pc, #188]	; (8002778 <display_screen1+0x358>)
 80026bc:	2107      	movs	r1, #7
 80026be:	2078      	movs	r0, #120	; 0x78
 80026c0:	f004 fbe8 	bl	8006e94 <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <display_screen1+0x350>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	9204      	str	r2, [sp, #16]
 80026ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026ce:	9203      	str	r2, [sp, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	9202      	str	r2, [sp, #8]
 80026d4:	466c      	mov	r4, sp
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <display_screen1+0x35c>)
 80026e4:	2130      	movs	r1, #48	; 0x30
 80026e6:	2009      	movs	r0, #9
 80026e8:	f004 fbd4 	bl	8006e94 <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <display_screen1+0x350>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	9204      	str	r2, [sp, #16]
 80026f2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026f6:	9203      	str	r2, [sp, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	9202      	str	r2, [sp, #8]
 80026fc:	466c      	mov	r4, sp
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002704:	e884 0003 	stmia.w	r4, {r0, r1}
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <display_screen1+0x35c>)
 800270c:	2159      	movs	r1, #89	; 0x59
 800270e:	2009      	movs	r0, #9
 8002710:	f004 fbc0 	bl	8006e94 <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <display_screen1+0x350>)
 8002716:	2200      	movs	r2, #0
 8002718:	9204      	str	r2, [sp, #16]
 800271a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271e:	9203      	str	r2, [sp, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	9202      	str	r2, [sp, #8]
 8002724:	466c      	mov	r4, sp
 8002726:	1d1a      	adds	r2, r3, #4
 8002728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <display_screen1+0x360>)
 8002734:	2182      	movs	r1, #130	; 0x82
 8002736:	2009      	movs	r0, #9
 8002738:	f004 fbac 	bl	8006e94 <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <display_screen1+0x350>)
 800273e:	2200      	movs	r2, #0
 8002740:	9204      	str	r2, [sp, #16]
 8002742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002746:	9203      	str	r2, [sp, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	466c      	mov	r4, sp
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002754:	e884 0003 	stmia.w	r4, {r0, r1}
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <display_screen1+0x358>)
 800275c:	2182      	movs	r1, #130	; 0x82
 800275e:	208a      	movs	r0, #138	; 0x8a
 8002760:	f004 fb98 	bl	8006e94 <Displ_WString>
		}
	display_show_curves();
 8002764:	f000 fd78 	bl	8003258 <display_show_curves>
}
 8002768:	bf00      	nop
 800276a:	3704      	adds	r7, #4
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	20000024 	.word	0x20000024
 8002774:	08011334 	.word	0x08011334
 8002778:	08011338 	.word	0x08011338
 800277c:	08011340 	.word	0x08011340
 8002780:	08011348 	.word	0x08011348

08002784 <display_screen2>:

void display_screen2() {
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af06      	add	r7, sp, #24
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <display_update_meter+0x7c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	79fa      	ldrb	r2, [r7, #7]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d023      	beq.n	80027f0 <display_update_meter+0x5c>
		switch(screen) {
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <display_update_meter+0x20>
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <display_update_meter+0x26>
 80027b2:	e01a      	b.n	80027ea <display_update_meter+0x56>
		case 1:
			display_meter_mask();
 80027b4:	f000 f83e 	bl	8002834 <display_meter_mask>
			break;
 80027b8:	e017      	b.n	80027ea <display_update_meter+0x56>
		case 2:
			Displ_CLS(BLACK);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f003 fbf8 	bl	8005fb0 <Displ_CLS>
			Displ_WString(20, 20, "Screen 2" , Font24, 1, WHITE, BLACK);
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <display_update_meter+0x80>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	9204      	str	r2, [sp, #16]
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	9203      	str	r2, [sp, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	9202      	str	r2, [sp, #8]
 80027d0:	466c      	mov	r4, sp
 80027d2:	1d1a      	adds	r2, r3, #4
 80027d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <display_update_meter+0x84>)
 80027e0:	2114      	movs	r1, #20
 80027e2:	2014      	movs	r0, #20
 80027e4:	f004 fb56 	bl	8006e94 <Displ_WString>
			break;
 80027e8:	bf00      	nop

		}
		last_screen = screen;
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <display_update_meter+0x7c>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <display_update_meter+0x68>
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <display_update_meter+0x6e>
		break;
	case 2:
		display_screen2();
		break;
	}
}
 80027fa:	e005      	b.n	8002808 <display_update_meter+0x74>
		display_screen1();
 80027fc:	f7ff fe10 	bl	8002420 <display_screen1>
		break;
 8002800:	e002      	b.n	8002808 <display_update_meter+0x74>
		display_screen2();
 8002802:	f7ff ffbf 	bl	8002784 <display_screen2>
		break;
 8002806:	bf00      	nop
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	20001fe8 	.word	0x20001fe8
 8002814:	20000018 	.word	0x20000018
 8002818:	08011350 	.word	0x08011350

0800281c <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
	last_screen = 0;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <display_update_mask+0x14>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20001fe8 	.word	0x20001fe8

08002834 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b08b      	sub	sp, #44	; 0x2c
 8002838:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 800283e:	2328      	movs	r3, #40	; 0x28
 8002840:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8002842:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002846:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 8002848:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800284c:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 800284e:	2300      	movs	r3, #0
 8002850:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 fbab 	bl	8005fb0 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800285a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800285e:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <display_meter_mask+0x2c0>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	b29b      	uxth	r3, r3
 8002866:	b21a      	sxth	r2, r3
 8002868:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	2000      	movs	r0, #0
 8002874:	f003 fd85 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002878:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800287c:	89fa      	ldrh	r2, [r7, #14]
 800287e:	89bb      	ldrh	r3, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	b21a      	sxth	r2, r3
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	2200      	movs	r2, #0
 800288e:	2000      	movs	r0, #0
 8002890:	f003 fd77 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002894:	89fa      	ldrh	r2, [r7, #14]
 8002896:	89bb      	ldrh	r3, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	b219      	sxth	r1, r3
 800289e:	4b95      	ldr	r3, [pc, #596]	; (8002af4 <display_meter_mask+0x2c0>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b218      	sxth	r0, r3
 80028a8:	89fa      	ldrh	r2, [r7, #14]
 80028aa:	89bb      	ldrh	r3, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	4602      	mov	r2, r0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f003 fd61 	bl	8006382 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 80028c0:	4b8c      	ldr	r3, [pc, #560]	; (8002af4 <display_meter_mask+0x2c0>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b218      	sxth	r0, r3
 80028ca:	89fa      	ldrh	r2, [r7, #14]
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b219      	sxth	r1, r3
 80028d4:	4b87      	ldr	r3, [pc, #540]	; (8002af4 <display_meter_mask+0x2c0>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b21a      	sxth	r2, r3
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f003 fd4d 	bl	8006382 <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	3309      	adds	r3, #9
 80028ec:	b29c      	uxth	r4, r3
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <display_meter_mask+0x2c4>)
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	9204      	str	r2, [sp, #16]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	9203      	str	r2, [sp, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	466d      	mov	r5, sp
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002904:	e885 0003 	stmia.w	r5, {r0, r1}
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2256      	movs	r2, #86	; 0x56
 800290c:	4621      	mov	r1, r4
 800290e:	204b      	movs	r0, #75	; 0x4b
 8002910:	f004 f842 	bl	8006998 <Displ_WChar>
	font_col = ORANGE;
 8002914:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002918:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <display_meter_mask+0x2c0>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	3b1e      	subs	r3, #30
 8002920:	b29c      	uxth	r4, r3
 8002922:	4b75      	ldr	r3, [pc, #468]	; (8002af8 <display_meter_mask+0x2c4>)
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	9204      	str	r2, [sp, #16]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	9203      	str	r2, [sp, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	9202      	str	r2, [sp, #8]
 8002930:	466d      	mov	r5, sp
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2241      	movs	r2, #65	; 0x41
 8002940:	2109      	movs	r1, #9
 8002942:	4620      	mov	r0, r4
 8002944:	f004 f828 	bl	8006998 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002948:	89ba      	ldrh	r2, [r7, #12]
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	4413      	add	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002954:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002958:	813b      	strh	r3, [r7, #8]
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800295e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002962:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <display_meter_mask+0x2c0>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	b21a      	sxth	r2, r3
 800296c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	4603      	mov	r3, r0
 8002976:	2000      	movs	r0, #0
 8002978:	f003 fd03 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800297c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002980:	89fa      	ldrh	r2, [r7, #14]
 8002982:	89bb      	ldrh	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	b21a      	sxth	r2, r3
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	2000      	movs	r0, #0
 8002994:	f003 fcf5 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002998:	89fa      	ldrh	r2, [r7, #14]
 800299a:	89bb      	ldrh	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b219      	sxth	r1, r3
 80029a2:	4b54      	ldr	r3, [pc, #336]	; (8002af4 <display_meter_mask+0x2c0>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b218      	sxth	r0, r3
 80029ac:	89fa      	ldrh	r2, [r7, #14]
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	4602      	mov	r2, r0
 80029be:	2000      	movs	r0, #0
 80029c0:	f003 fcdf 	bl	8006382 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <display_meter_mask+0x2c0>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b218      	sxth	r0, r3
 80029ce:	89fa      	ldrh	r2, [r7, #14]
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b219      	sxth	r1, r3
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <display_meter_mask+0x2c0>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80029e6:	897b      	ldrh	r3, [r7, #10]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4623      	mov	r3, r4
 80029ec:	f003 fcc9 	bl	8006382 <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 80029f0:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <display_meter_mask+0x2c0>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3b50      	subs	r3, #80	; 0x50
 80029f6:	b29c      	uxth	r4, r3
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	3309      	adds	r3, #9
 80029fc:	b29d      	uxth	r5, r3
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <display_meter_mask+0x2c4>)
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	9204      	str	r2, [sp, #16]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	9203      	str	r2, [sp, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	9202      	str	r2, [sp, #8]
 8002a0c:	466e      	mov	r6, sp
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a14:	e886 0003 	stmia.w	r6, {r0, r1}
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a38      	ldr	r2, [pc, #224]	; (8002afc <display_meter_mask+0x2c8>)
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f004 fa38 	bl	8006e94 <Displ_WString>
	// W
	ypos += box_height+1;
 8002a24:	89ba      	ldrh	r2, [r7, #12]
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	4413      	add	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002a30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002a3a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a3e:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <display_meter_mask+0x2c0>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21a      	sxth	r2, r3
 8002a48:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	2000      	movs	r0, #0
 8002a54:	f003 fc95 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002a58:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a5c:	89fa      	ldrh	r2, [r7, #14]
 8002a5e:	89bb      	ldrh	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	897b      	ldrh	r3, [r7, #10]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f003 fc87 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a74:	89fa      	ldrh	r2, [r7, #14]
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b219      	sxth	r1, r3
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <display_meter_mask+0x2c0>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b218      	sxth	r0, r3
 8002a88:	89fa      	ldrh	r2, [r7, #14]
 8002a8a:	89bb      	ldrh	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b21a      	sxth	r2, r3
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	4602      	mov	r2, r0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f003 fc71 	bl	8006382 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <display_meter_mask+0x2c0>)
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b218      	sxth	r0, r3
 8002aaa:	89fa      	ldrh	r2, [r7, #14]
 8002aac:	89bb      	ldrh	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b219      	sxth	r1, r3
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <display_meter_mask+0x2c0>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ac2:	897b      	ldrh	r3, [r7, #10]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f003 fc5b 	bl	8006382 <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <display_meter_mask+0x2c0>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	3b50      	subs	r3, #80	; 0x50
 8002ad2:	b29c      	uxth	r4, r3
 8002ad4:	89fb      	ldrh	r3, [r7, #14]
 8002ad6:	3309      	adds	r3, #9
 8002ad8:	b29d      	uxth	r5, r3
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <display_meter_mask+0x2c4>)
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	9204      	str	r2, [sp, #16]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	9203      	str	r2, [sp, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	466e      	mov	r6, sp
 8002aea:	1d1a      	adds	r2, r3, #4
 8002aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af0:	e006      	b.n	8002b00 <display_meter_mask+0x2cc>
 8002af2:	bf00      	nop
 8002af4:	20001fea 	.word	0x20001fea
 8002af8:	20000018 	.word	0x20000018
 8002afc:	0801135c 	.word	0x0801135c
 8002b00:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2257      	movs	r2, #87	; 0x57
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f003 ff44 	bl	8006998 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002b10:	89ba      	ldrh	r2, [r7, #12]
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	4413      	add	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b20:	813b      	strh	r3, [r7, #8]
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002b26:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <display_meter_mask+0x478>)
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b38:	897b      	ldrh	r3, [r7, #10]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f003 fc1f 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002b44:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b48:	89fa      	ldrh	r2, [r7, #14]
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b21a      	sxth	r2, r3
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f003 fc11 	bl	8006382 <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b60:	89fa      	ldrh	r2, [r7, #14]
 8002b62:	89bb      	ldrh	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b219      	sxth	r1, r3
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <display_meter_mask+0x478>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	b218      	sxth	r0, r3
 8002b74:	89fa      	ldrh	r2, [r7, #14]
 8002b76:	89bb      	ldrh	r3, [r7, #12]
 8002b78:	4413      	add	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	4602      	mov	r2, r0
 8002b86:	2000      	movs	r0, #0
 8002b88:	f003 fbfb 	bl	8006382 <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002b8c:	4b47      	ldr	r3, [pc, #284]	; (8002cac <display_meter_mask+0x478>)
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	b218      	sxth	r0, r3
 8002b96:	89fa      	ldrh	r2, [r7, #14]
 8002b98:	89bb      	ldrh	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b219      	sxth	r1, r3
 8002ba0:	4b42      	ldr	r3, [pc, #264]	; (8002cac <display_meter_mask+0x478>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	f003 fbe5 	bl	8006382 <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	3309      	adds	r3, #9
 8002bbc:	b29c      	uxth	r4, r3
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <display_meter_mask+0x47c>)
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	9204      	str	r2, [sp, #16]
 8002bc4:	893a      	ldrh	r2, [r7, #8]
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	9202      	str	r2, [sp, #8]
 8002bcc:	466d      	mov	r5, sp
 8002bce:	1d1a      	adds	r2, r3, #4
 8002bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a36      	ldr	r2, [pc, #216]	; (8002cb4 <display_meter_mask+0x480>)
 8002bdc:	4621      	mov	r1, r4
 8002bde:	205f      	movs	r0, #95	; 0x5f
 8002be0:	f004 f958 	bl	8006e94 <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <display_meter_mask+0x478>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	3b16      	subs	r3, #22
 8002bea:	b29c      	uxth	r4, r3
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <display_meter_mask+0x484>)
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	9204      	str	r2, [sp, #16]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	9203      	str	r2, [sp, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2260      	movs	r2, #96	; 0x60
 8002c0a:	2182      	movs	r1, #130	; 0x82
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f003 fec3 	bl	8006998 <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002c12:	89ba      	ldrh	r2, [r7, #12]
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	4413      	add	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002c1e:	231f      	movs	r3, #31
 8002c20:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <display_meter_mask+0x488>)
 8002c24:	881a      	ldrh	r2, [r3, #0]
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <display_meter_mask+0x48c>)
 8002c38:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <display_meter_mask+0x48c>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	4413      	add	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <display_meter_mask+0x490>)
 8002c50:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002c52:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <display_meter_mask+0x478>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	b218      	sxth	r0, r3
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <display_meter_mask+0x488>)
 8002c5e:	881a      	ldrh	r2, [r3, #0]
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21c      	sxth	r4, r3
 8002c68:	2302      	movs	r3, #2
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	897a      	ldrh	r2, [r7, #10]
 8002c6e:	9201      	str	r2, [sp, #4]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4623      	mov	r3, r4
 8002c74:	4602      	mov	r2, r0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f003 fcb4 	bl	80065e4 <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <display_meter_mask+0x494>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b218      	sxth	r0, r3
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <display_meter_mask+0x490>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b219      	sxth	r1, r3
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <display_meter_mask+0x494>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	33d2      	adds	r3, #210	; 0xd2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b21a      	sxth	r2, r3
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <display_meter_mask+0x490>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002c9c:	9400      	str	r4, [sp, #0]
 8002c9e:	f003 fb70 	bl	8006382 <Displ_Line>
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20001fea 	.word	0x20001fea
 8002cb0:	20000018 	.word	0x20000018
 8002cb4:	08011360 	.word	0x08011360
 8002cb8:	20000024 	.word	0x20000024
 8002cbc:	20001fec 	.word	0x20001fec
 8002cc0:	20000008 	.word	0x20000008
 8002cc4:	200006c0 	.word	0x200006c0
 8002cc8:	2000000a 	.word	0x2000000a

08002ccc <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cd6:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cdc:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <display_align_curves+0xfc>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da20      	bge.n	8002d28 <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	e016      	b.n	8002d1a <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <display_align_curves+0x100>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002cf4:	4a36      	ldr	r2, [pc, #216]	; (8002dd0 <display_align_curves+0x104>)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002cfc:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <display_align_curves+0x100>)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <display_align_curves+0x104>)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d20:	d3e4      	bcc.n	8002cec <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002d22:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d26:	e049      	b.n	8002dbc <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <display_align_curves+0xfc>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	e019      	b.n	8002d64 <display_align_curves+0x98>
		dest_idx++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d36:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <display_align_curves+0x100>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <display_align_curves+0x104>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <display_align_curves+0x100>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d4e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <display_align_curves+0x104>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002d6a:	d3e1      	bcc.n	8002d30 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002d6c:	2314      	movs	r3, #20
 8002d6e:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e019      	b.n	8002daa <display_align_curves+0xde>
		dest_idx++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <display_align_curves+0x100>)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <display_align_curves+0x104>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <display_align_curves+0x100>)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8002d94:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <display_align_curves+0x104>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8002da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <display_align_curves+0xfc>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dbe0      	blt.n	8002d76 <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	20000244 	.word	0x20000244
 8002dcc:	20007390 	.word	0x20007390
 8002dd0:	200006c4 	.word	0x200006c4

08002dd4 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af06      	add	r7, sp, #24
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
 8002dde:	460b      	mov	r3, r1
 8002de0:	717b      	strb	r3, [r7, #5]
 8002de2:	4613      	mov	r3, r2
 8002de4:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8002de6:	797b      	ldrb	r3, [r7, #5]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <draw_curve+0x20>
 8002dec:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <draw_curve+0x1b0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <draw_curve+0x1b4>)
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	4b64      	ldr	r3, [pc, #400]	; (8002f8c <draw_curve+0x1b8>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b02      	subs	r3, #2
 8002e02:	b299      	uxth	r1, r3
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <draw_curve+0x1bc>)
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	2302      	movs	r3, #2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <draw_curve+0x1b8>)
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	2000      	movs	r0, #0
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	2002      	movs	r0, #2
 8002e1c:	f002 ff14 	bl	8005c48 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8002e20:	4b58      	ldr	r3, [pc, #352]	; (8002f84 <draw_curve+0x1b0>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d023      	beq.n	8002e70 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8002e28:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <draw_curve+0x1c0>)
 8002e2a:	889a      	ldrh	r2, [r3, #4]
 8002e2c:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <draw_curve+0x1c4>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	b29c      	uxth	r4, r3
 8002e34:	4b59      	ldr	r3, [pc, #356]	; (8002f9c <draw_curve+0x1c8>)
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <draw_curve+0x1c0>)
 8002e3a:	88db      	ldrh	r3, [r3, #6]
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29d      	uxth	r5, r3
 8002e44:	4b53      	ldr	r3, [pc, #332]	; (8002f94 <draw_curve+0x1c0>)
 8002e46:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002e4a:	9204      	str	r2, [sp, #16]
 8002e4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	9202      	str	r2, [sp, #8]
 8002e56:	466e      	mov	r6, sp
 8002e58:	1d1a      	adds	r2, r3, #4
 8002e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e5e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <draw_curve+0x1cc>)
 8002e66:	4629      	mov	r1, r5
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f004 f813 	bl	8006e94 <Displ_WString>
		return;
 8002e6e:	e086      	b.n	8002f7e <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8002e70:	793b      	ldrb	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d04c      	beq.n	8002f10 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <draw_curve+0x1c4>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b218      	sxth	r0, r3
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <draw_curve+0x1c8>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b219      	sxth	r1, r3
 8002e82:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <draw_curve+0x1c4>)
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <draw_curve+0x1d0>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	b21a      	sxth	r2, r3
 8002e90:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <draw_curve+0x1c8>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b21b      	sxth	r3, r3
 8002e96:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002e9a:	9400      	str	r4, [sp, #0]
 8002e9c:	f003 fa71 	bl	8006382 <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_len; x++) {
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e02d      	b.n	8002f02 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	; (8002f98 <draw_curve+0x1c4>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b218      	sxth	r0, r3
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <draw_curve+0x1c8>)
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	4939      	ldr	r1, [pc, #228]	; (8002fa8 <draw_curve+0x1d4>)
 8002ec2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b219      	sxth	r1, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <draw_curve+0x1c4>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	b21c      	sxth	r4, r3
 8002edc:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <draw_curve+0x1c8>)
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	4d31      	ldr	r5, [pc, #196]	; (8002fa8 <draw_curve+0x1d4>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	f003 fa43 	bl	8006382 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <draw_curve+0x1d0>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	dbcb      	blt.n	8002ea6 <draw_curve+0xd2>
 8002f0e:	e036      	b.n	8002f7e <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_len; x++) {
 8002f10:	2301      	movs	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	e02d      	b.n	8002f72 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <draw_curve+0x1c4>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b218      	sxth	r0, r3
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <draw_curve+0x1c8>)
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	491d      	ldr	r1, [pc, #116]	; (8002fa8 <draw_curve+0x1d4>)
 8002f32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b219      	sxth	r1, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <draw_curve+0x1c4>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b21c      	sxth	r4, r3
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <draw_curve+0x1c8>)
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	4d15      	ldr	r5, [pc, #84]	; (8002fa8 <draw_curve+0x1d4>)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	4622      	mov	r2, r4
 8002f68:	f003 fa0b 	bl	8006382 <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <draw_curve+0x1d0>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	dbcb      	blt.n	8002f16 <draw_curve+0x142>
		}
	}
}
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f84:	20000294 	.word	0x20000294
 8002f88:	20001fec 	.word	0x20001fec
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	20001fea 	.word	0x20001fea
 8002f94:	20000018 	.word	0x20000018
 8002f98:	2000000a 	.word	0x2000000a
 8002f9c:	200006c0 	.word	0x200006c0
 8002fa0:	08011364 	.word	0x08011364
 8002fa4:	20001fc4 	.word	0x20001fc4
 8002fa8:	20000378 	.word	0x20000378

08002fac <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum) {
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b093      	sub	sp, #76	; 0x4c
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
	int value;
	int scale_factor = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	647b      	str	r3, [r7, #68]	; 0x44
	int src_idx = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	643b      	str	r3, [r7, #64]	; 0x40
	int zero_value = ADC_FS_RAW / 2;	// zero should be half way if DC-Bias is accurate
 8002fbe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
	//	zero_value = (sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min) / 2;
	}

	//term_print("zero_value = %d\r\n", zero_value);

	float fScale = (float)curve_y_size / (float)sample_buf_meta[bufnum].max;
 8002fc4:	4b9e      	ldr	r3, [pc, #632]	; (8003240 <make_curve+0x294>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	499c      	ldr	r1, [pc, #624]	; (8003244 <make_curve+0x298>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3302      	adds	r3, #2
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if (fScale < 1) {
 8002ff2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003002:	d51f      	bpl.n	8003044 <make_curve+0x98>
		scale_factor = trunc(1/fScale)+1; // divisor
 8003004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003008:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800300c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003010:	ee16 0a90 	vmov	r0, s13
 8003014:	f7fd fab8 	bl	8000588 <__aeabi_f2d>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	ec43 2b10 	vmov	d0, r2, r3
 8003020:	f00d ffea 	bl	8010ff8 <trunc>
 8003024:	ec51 0b10 	vmov	r0, r1, d0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <make_curve+0x29c>)
 800302e:	f7fd f94d 	bl	80002cc <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f7fd fdad 	bl	8000b98 <__aeabi_d2iz>
 800303e:	4603      	mov	r3, r0
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
 8003042:	e010      	b.n	8003066 <make_curve+0xba>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 8003044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003046:	f7fd fa9f 	bl	8000588 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	ec43 2b10 	vmov	d0, r2, r3
 8003052:	f00d ffd1 	bl	8010ff8 <trunc>
 8003056:	ec53 2b10 	vmov	r2, r3, d0
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fd9b 	bl	8000b98 <__aeabi_d2iz>
 8003062:	4603      	mov	r3, r0
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;		// half the data points to fit screen size
 8003066:	f7ff fe31 	bl	8002ccc <display_align_curves>
 800306a:	4603      	mov	r3, r0
 800306c:	0fda      	lsrs	r2, r3, #31
 800306e:	4413      	add	r3, r2
 8003070:	105b      	asrs	r3, r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b75      	ldr	r3, [pc, #468]	; (800324c <make_curve+0x2a0>)
 8003076:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <make_curve+0x294>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	f1c3 0301 	rsb	r3, r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 8003086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800308a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800308e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d567      	bpl.n	8003168 <make_curve+0x1bc>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	496d      	ldr	r1, [pc, #436]	; (8003250 <make_curve+0x2a4>)
 800309c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80030a0:	fb03 f202 	mul.w	r2, r3, r2
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	4413      	add	r3, r2
 80030a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030ac:	461c      	mov	r4, r3
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	3301      	adds	r3, #1
 80030b4:	4966      	ldr	r1, [pc, #408]	; (8003250 <make_curve+0x2a4>)
 80030b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80030ba:	fb00 f202 	mul.w	r2, r0, r2
 80030be:	4413      	add	r3, r2
 80030c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030c4:	4423      	add	r3, r4
 80030c6:	0fda      	lsrs	r2, r3, #31
 80030c8:	4413      	add	r3, r2
 80030ca:	105b      	asrs	r3, r3, #1
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 80030ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	bfb8      	it	lt
 80030e8:	4613      	movlt	r3, r2
 80030ea:	4a5a      	ldr	r2, [pc, #360]	; (8003254 <make_curve+0x2a8>)
 80030ec:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80030ee:	2301      	movs	r3, #1
 80030f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f2:	e032      	b.n	800315a <make_curve+0x1ae>
			src_idx+=2;
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	3302      	adds	r3, #2
 80030f8:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4954      	ldr	r1, [pc, #336]	; (8003250 <make_curve+0x2a4>)
 80030fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003102:	fb03 f202 	mul.w	r2, r3, r2
 8003106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003108:	4413      	add	r3, r2
 800310a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800310e:	461c      	mov	r4, r3
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003114:	3301      	adds	r3, #1
 8003116:	494e      	ldr	r1, [pc, #312]	; (8003250 <make_curve+0x2a4>)
 8003118:	f44f 7048 	mov.w	r0, #800	; 0x320
 800311c:	fb00 f202 	mul.w	r2, r0, r2
 8003120:	4413      	add	r3, r2
 8003122:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003126:	4423      	add	r3, r4
 8003128:	0fda      	lsrs	r2, r3, #31
 800312a:	4413      	add	r3, r2
 800312c:	105b      	asrs	r3, r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	1ad2      	subs	r2, r2, r3
 8003136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003138:	fb92 f3f3 	sdiv	r3, r2, r3
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	bfb8      	it	lt
 800314a:	461a      	movlt	r2, r3
 800314c:	4941      	ldr	r1, [pc, #260]	; (8003254 <make_curve+0x2a8>)
 800314e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	3301      	adds	r3, #1
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <make_curve+0x2a0>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	4293      	cmp	r3, r2
 8003164:	dbc6      	blt.n	80030f4 <make_curve+0x148>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 8003166:	e066      	b.n	8003236 <make_curve+0x28a>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4939      	ldr	r1, [pc, #228]	; (8003250 <make_curve+0x2a4>)
 800316c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003170:	fb03 f202 	mul.w	r2, r3, r2
 8003174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003176:	4413      	add	r3, r2
 8003178:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800317c:	461c      	mov	r4, r3
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003182:	3301      	adds	r3, #1
 8003184:	4932      	ldr	r1, [pc, #200]	; (8003250 <make_curve+0x2a4>)
 8003186:	f44f 7048 	mov.w	r0, #800	; 0x320
 800318a:	fb00 f202 	mul.w	r2, r0, r2
 800318e:	4413      	add	r3, r2
 8003190:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003194:	4423      	add	r3, r4
 8003196:	0fda      	lsrs	r2, r3, #31
 8003198:	4413      	add	r3, r2
 800319a:	105b      	asrs	r3, r3, #1
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800319e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bfb8      	it	lt
 80031b8:	4613      	movlt	r3, r2
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <make_curve+0x2a8>)
 80031bc:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 80031be:	2301      	movs	r3, #1
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c2:	e032      	b.n	800322a <make_curve+0x27e>
			src_idx+=2;
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	3302      	adds	r3, #2
 80031c8:	643b      	str	r3, [r7, #64]	; 0x40
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4920      	ldr	r1, [pc, #128]	; (8003250 <make_curve+0x2a4>)
 80031ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031d2:	fb03 f202 	mul.w	r2, r3, r2
 80031d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d8:	4413      	add	r3, r2
 80031da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031de:	461c      	mov	r4, r3
 80031e0:	79fa      	ldrb	r2, [r7, #7]
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	3301      	adds	r3, #1
 80031e6:	491a      	ldr	r1, [pc, #104]	; (8003250 <make_curve+0x2a4>)
 80031e8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031ec:	fb00 f202 	mul.w	r2, r0, r2
 80031f0:	4413      	add	r3, r2
 80031f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031f6:	4423      	add	r3, r4
 80031f8:	0fda      	lsrs	r2, r3, #31
 80031fa:	4413      	add	r3, r2
 80031fc:	105b      	asrs	r3, r3, #1
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 8003200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	429a      	cmp	r2, r3
 8003218:	bfb8      	it	lt
 800321a:	461a      	movlt	r2, r3
 800321c:	490d      	ldr	r1, [pc, #52]	; (8003254 <make_curve+0x2a8>)
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	3301      	adds	r3, #1
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <make_curve+0x2a0>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	4293      	cmp	r3, r2
 8003234:	dbc6      	blt.n	80031c4 <make_curve+0x218>
}
 8003236:	bf00      	nop
 8003238:	374c      	adds	r7, #76	; 0x4c
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	20000008 	.word	0x20000008
 8003244:	20000244 	.word	0x20000244
 8003248:	3ff00000 	.word	0x3ff00000
 800324c:	20001fc4 	.word	0x20001fc4
 8003250:	200006c4 	.word	0x200006c4
 8003254:	20000378 	.word	0x20000378

08003258 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
	uint8_t dont_clear = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	e01e      	b.n	80032a6 <display_show_curves+0x4e>
		make_curve(i);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fe9d 	bl	8002fac <make_curve>
		draw_curve(channel_colour[i], dont_clear, (sample_buf_meta[i].zero_cross_pos >= 0));
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <display_show_curves+0x60>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800327a:	4910      	ldr	r1, [pc, #64]	; (80032bc <display_show_curves+0x64>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3304      	adds	r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	43db      	mvns	r3, r3
 800328e:	0fdb      	lsrs	r3, r3, #31
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	4619      	mov	r1, r3
 8003298:	f7ff fd9c 	bl	8002dd4 <draw_curve>
		dont_clear = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i<=NUM_I_SENSORS; i++) {
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	dddd      	ble.n	8003268 <display_show_curves+0x10>
	}
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000000 	.word	0x20000000
 80032bc:	20000244 	.word	0x20000244

080032c0 <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d81a      	bhi.n	8003306 <display_show_curve+0x46>

	make_curve(bufnum);
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe6a 	bl	8002fac <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <display_show_curve+0x50>)
 80032dc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80032e0:	79fa      	ldrb	r2, [r7, #7]
 80032e2:	490c      	ldr	r1, [pc, #48]	; (8003314 <display_show_curve+0x54>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	330c      	adds	r3, #12
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	2100      	movs	r1, #0
 8003300:	f7ff fd68 	bl	8002dd4 <draw_curve>
 8003304:	e000      	b.n	8003308 <display_show_curve+0x48>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8003306:	bf00      	nop

}
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000
 8003314:	20000244 	.word	0x20000244

08003318 <ee24_isConnected>:

uint8_t ee24_lock = 0;

//################################################################################################################
bool ee24_isConnected(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100)!=HAL_OK)
 800331c:	2364      	movs	r3, #100	; 0x64
 800331e:	2202      	movs	r2, #2
 8003320:	210a      	movs	r1, #10
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <ee24_isConnected+0x20>)
 8003324:	f006 f9a0 	bl	8009668 <HAL_I2C_IsDeviceReady>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <ee24_isConnected+0x1a>
    return false;
 800332e:	2300      	movs	r3, #0
 8003330:	e000      	b.n	8003334 <ee24_isConnected+0x1c>

  return true;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20002140 	.word	0x20002140

0800333c <ee24_read_byte>:
  }
}

//################################################################################################################
bool ee24_read_byte(uint8_t address, uint8_t *data)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af02      	add	r7, sp, #8
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]
  if (ee24_lock == 1)
 8003348:	4b10      	ldr	r3, [pc, #64]	; (800338c <ee24_read_byte+0x50>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <ee24_read_byte+0x18>
    return false;
 8003350:	2300      	movs	r3, #0
 8003352:	e016      	b.n	8003382 <ee24_read_byte+0x46>
  ee24_lock = 1;
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <ee24_read_byte+0x50>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]

  if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 1) != HAL_OK) {
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	b29a      	uxth	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	2301      	movs	r3, #1
 8003368:	210a      	movs	r1, #10
 800336a:	4809      	ldr	r0, [pc, #36]	; (8003390 <ee24_read_byte+0x54>)
 800336c:	f005 ffe8 	bl	8009340 <HAL_I2C_Mem_Read_DMA>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <ee24_read_byte+0x44>
	  ee24_lock = 0;
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <ee24_read_byte+0x50>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
	  return false;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <ee24_read_byte+0x46>
  }
  return true;
 8003380:	2301      	movs	r3, #1

}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20001fee 	.word	0x20001fee
 8003390:	20002140 	.word	0x20002140

08003394 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003398:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800339c:	490d      	ldr	r1, [pc, #52]	; (80033d4 <start_adcs+0x40>)
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <start_adcs+0x44>)
 80033a0:	f004 fbb2 	bl	8007b08 <HAL_ADC_Start_DMA>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 80033aa:	480c      	ldr	r0, [pc, #48]	; (80033dc <start_adcs+0x48>)
 80033ac:	f001 fbe8 	bl	8004b80 <term_print>
  	  Error_Handler();
 80033b0:	f000 ffa4 	bl	80042fc <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 80033b4:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 80033b8:	4909      	ldr	r1, [pc, #36]	; (80033e0 <start_adcs+0x4c>)
 80033ba:	480a      	ldr	r0, [pc, #40]	; (80033e4 <start_adcs+0x50>)
 80033bc:	f004 fba4 	bl	8007b08 <HAL_ADC_Start_DMA>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <start_adcs+0x54>)
 80033c8:	f001 fbda 	bl	8004b80 <term_print>
 	  Error_Handler();
 80033cc:	f000 ff96 	bl	80042fc <Error_Handler>
	}
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	200024d0 	.word	0x200024d0
 80033d8:	20001ff0 	.word	0x20001ff0
 80033dc:	08011370 	.word	0x08011370
 80033e0:	20003f10 	.word	0x20003f10
 80033e4:	20002038 	.word	0x20002038
 80033e8:	0801138c 	.word	0x0801138c

080033ec <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	460a      	mov	r2, r1
 80033f6:	80fb      	strh	r3, [r7, #6]
 80033f8:	4613      	mov	r3, r2
 80033fa:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 80033fc:	88fb      	ldrh	r3, [r7, #6]
 80033fe:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003402:	4293      	cmp	r3, r2
 8003404:	d803      	bhi.n	800340e <adjust_TIM2_period+0x22>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800340c:	d205      	bcs.n	800341a <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	4619      	mov	r1, r3
 8003412:	4808      	ldr	r0, [pc, #32]	; (8003434 <adjust_TIM2_period+0x48>)
 8003414:	f001 fbb4 	bl	8004b80 <term_print>
		return;
 8003418:	e008      	b.n	800342c <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 800341a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	4619      	mov	r1, r3
 8003426:	4804      	ldr	r0, [pc, #16]	; (8003438 <adjust_TIM2_period+0x4c>)
 8003428:	f001 fbaa 	bl	8004b80 <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	080113a8 	.word	0x080113a8
 8003438:	080113c8 	.word	0x080113c8

0800343c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003442:	f004 fa87 	bl	8007954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003446:	f000 fabb 	bl	80039c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800344a:	f000 fd2d 	bl	8003ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 800344e:	f000 fced 	bl	8003e2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003452:	f000 fc97 	bl	8003d84 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003456:	f000 fc49 	bl	8003cec <MX_TIM2_Init>
  MX_ADC1_Init();
 800345a:	f000 fb23 	bl	8003aa4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800345e:	f000 fb81 	bl	8003b64 <MX_ADC2_Init>
  MX_SPI2_Init();
 8003462:	f000 fc0d 	bl	8003c80 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8003466:	f000 fcb7 	bl	8003dd8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800346a:	f000 fbdb 	bl	8003c24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 800346e:	f7fe ff33 	bl	80022d8 <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 8003472:	2201      	movs	r2, #1
 8003474:	4997      	ldr	r1, [pc, #604]	; (80036d4 <main+0x298>)
 8003476:	4898      	ldr	r0, [pc, #608]	; (80036d8 <main+0x29c>)
 8003478:	f008 fe09 	bl	800c08e <HAL_UART_Receive_IT>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <main+0x4a>
    Error_Handler();
 8003482:	f000 ff3b 	bl	80042fc <Error_Handler>
  }
#ifdef USE_WIFI
  // Start ESP UART receive via interrupt
  if (HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) != HAL_OK) {
 8003486:	2201      	movs	r2, #1
 8003488:	4994      	ldr	r1, [pc, #592]	; (80036dc <main+0x2a0>)
 800348a:	4895      	ldr	r0, [pc, #596]	; (80036e0 <main+0x2a4>)
 800348c:	f008 fdff 	bl	800c08e <HAL_UART_Receive_IT>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <main+0x5e>
      Error_Handler();
 8003496:	f000 ff31 	bl	80042fc <Error_Handler>
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800349a:	4892      	ldr	r0, [pc, #584]	; (80036e4 <main+0x2a8>)
 800349c:	f008 f8dc 	bl	800b658 <HAL_TIM_Base_Start_IT>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <main+0x6e>
     Error_Handler();
 80034a6:	f000 ff29 	bl	80042fc <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 80034aa:	f7ff ff73 	bl	8003394 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 80034ae:	f7fe ff35 	bl	800231c <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 80034b2:	f004 fab5 	bl	8007a20 <HAL_GetTick>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80034bc:	4a8a      	ldr	r2, [pc, #552]	; (80036e8 <main+0x2ac>)
 80034be:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 80034c0:	4b8a      	ldr	r3, [pc, #552]	; (80036ec <main+0x2b0>)
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2302      	movs	r3, #2
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	4a89      	ldr	r2, [pc, #548]	; (80036f0 <main+0x2b4>)
 80034cc:	4989      	ldr	r1, [pc, #548]	; (80036f4 <main+0x2b8>)
 80034ce:	488a      	ldr	r0, [pc, #552]	; (80036f8 <main+0x2bc>)
 80034d0:	f00a fad0 	bl	800da74 <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80034d4:	4888      	ldr	r0, [pc, #544]	; (80036f8 <main+0x2bc>)
 80034d6:	f7fc feeb 	bl	80002b0 <strlen>
 80034da:	4603      	mov	r3, r0
 80034dc:	b29a      	uxth	r2, r3
 80034de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e2:	4985      	ldr	r1, [pc, #532]	; (80036f8 <main+0x2bc>)
 80034e4:	487c      	ldr	r0, [pc, #496]	; (80036d8 <main+0x29c>)
 80034e6:	f008 fd40 	bl	800bf6a <HAL_UART_Transmit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <main+0xb8>
	  Error_Handler();
 80034f0:	f000 ff04 	bl	80042fc <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 80034f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	4619      	mov	r1, r3
 80034fc:	487f      	ldr	r0, [pc, #508]	; (80036fc <main+0x2c0>)
 80034fe:	f001 fb3f 	bl	8004b80 <term_print>

#ifdef USE_WIFI
  // Enable ESP 01
  HAL_GPIO_WritePin (ESP01_EN_GPIO_Port, ESP01_EN_Pin, GPIO_PIN_SET);
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003508:	487d      	ldr	r0, [pc, #500]	; (8003700 <main+0x2c4>)
 800350a:	f005 fd89 	bl	8009020 <HAL_GPIO_WritePin>
  // Perform reset
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_RESET);
 800350e:	2200      	movs	r2, #0
 8003510:	2180      	movs	r1, #128	; 0x80
 8003512:	487c      	ldr	r0, [pc, #496]	; (8003704 <main+0x2c8>)
 8003514:	f005 fd84 	bl	8009020 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	f004 fa8d 	bl	8007a38 <HAL_Delay>
  HAL_GPIO_WritePin (ESP01_RST_GPIO_Port, ESP01_RST_Pin, GPIO_PIN_SET);
 800351e:	2201      	movs	r2, #1
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	4878      	ldr	r0, [pc, #480]	; (8003704 <main+0x2c8>)
 8003524:	f005 fd7c 	bl	8009020 <HAL_GPIO_WritePin>
  }*/
#endif

  // eeprom example code

  if (!ee24_isConnected()) {
 8003528:	f7ff fef6 	bl	8003318 <ee24_isConnected>
 800352c:	4603      	mov	r3, r0
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <main+0x104>
	  term_print("Error: EEPROM not found\r\n");
 8003538:	4873      	ldr	r0, [pc, #460]	; (8003708 <main+0x2cc>)
 800353a:	f001 fb21 	bl	8004b80 <term_print>
 800353e:	e003      	b.n	8003548 <main+0x10c>
  } else {
	  ee24_read_byte(0x00, (uint8_t *) eeprom_buf);
 8003540:	4972      	ldr	r1, [pc, #456]	; (800370c <main+0x2d0>)
 8003542:	2000      	movs	r0, #0
 8003544:	f7ff fefa 	bl	800333c <ee24_read_byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8003548:	f004 fa6a 	bl	8007a20 <HAL_GetTick>
 800354c:	4603      	mov	r3, r0
 800354e:	3364      	adds	r3, #100	; 0x64
 8003550:	4a6f      	ldr	r2, [pc, #444]	; (8003710 <main+0x2d4>)
 8003552:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 8003554:	f004 fa64 	bl	8007a20 <HAL_GetTick>
 8003558:	4603      	mov	r3, r0
 800355a:	33c8      	adds	r3, #200	; 0xc8
 800355c:	4a6d      	ldr	r2, [pc, #436]	; (8003714 <main+0x2d8>)
 800355e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 8003560:	f004 fa5e 	bl	8007a20 <HAL_GetTick>
 8003564:	4603      	mov	r3, r0
 8003566:	4a6c      	ldr	r2, [pc, #432]	; (8003718 <main+0x2dc>)
 8003568:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 800356a:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <main+0x2dc>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b6b      	ldr	r3, [pc, #428]	; (800371c <main+0x2e0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d21b      	bcs.n	80035ae <main+0x172>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 8003576:	4b68      	ldr	r3, [pc, #416]	; (8003718 <main+0x2dc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3364      	adds	r3, #100	; 0x64
 800357c:	4a64      	ldr	r2, [pc, #400]	; (8003710 <main+0x2d4>)
 800357e:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 8003580:	4b67      	ldr	r3, [pc, #412]	; (8003720 <main+0x2e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <main+0x15c>
 8003588:	4b63      	ldr	r3, [pc, #396]	; (8003718 <main+0x2dc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003590:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003594:	4a62      	ldr	r2, [pc, #392]	; (8003720 <main+0x2e4>)
 8003596:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 8003598:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <main+0x2dc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80035a0:	4a60      	ldr	r2, [pc, #384]	; (8003724 <main+0x2e8>)
 80035a2:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80035a4:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <main+0x2dc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	33c8      	adds	r3, #200	; 0xc8
 80035aa:	4a5a      	ldr	r2, [pc, #360]	; (8003714 <main+0x2d8>)
 80035ac:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80035ae:	4b5a      	ldr	r3, [pc, #360]	; (8003718 <main+0x2dc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	; (800371c <main+0x2e0>)
 80035b4:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80035b6:	4b58      	ldr	r3, [pc, #352]	; (8003718 <main+0x2dc>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <main+0x2d8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d316      	bcc.n	80035f0 <main+0x1b4>
		next_measurement_time += MEASUREMENT_INTERVAL;
 80035c2:	4b54      	ldr	r3, [pc, #336]	; (8003714 <main+0x2d8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	33c8      	adds	r3, #200	; 0xc8
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <main+0x2d8>)
 80035ca:	6013      	str	r3, [r2, #0]
		calc_measurements();
 80035cc:	f7fe f94a 	bl	8001864 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	484b      	ldr	r0, [pc, #300]	; (8003700 <main+0x2c4>)
 80035d4:	f005 fd0c 	bl	8008ff0 <HAL_GPIO_ReadPin>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d108      	bne.n	80035f0 <main+0x1b4>
 80035de:	4b52      	ldr	r3, [pc, #328]	; (8003728 <main+0x2ec>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <main+0x1b4>
			display_update_meter(display_screen);
 80035e6:	4b50      	ldr	r3, [pc, #320]	; (8003728 <main+0x2ec>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff f8d2 	bl	8002794 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 80035f0:	4b49      	ldr	r3, [pc, #292]	; (8003718 <main+0x2dc>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b46      	ldr	r3, [pc, #280]	; (8003710 <main+0x2d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f0c0 813b 	bcc.w	8003874 <main+0x438>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80035fe:	4b46      	ldr	r3, [pc, #280]	; (8003718 <main+0x2dc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3364      	adds	r3, #100	; 0x64
 8003604:	4a42      	ldr	r2, [pc, #264]	; (8003710 <main+0x2d4>)
 8003606:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <main+0x2ac>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <main+0x1fc>
			if (now_ticks >= display_splash_ticks) {
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <main+0x2dc>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <main+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d30d      	bcc.n	8003638 <main+0x1fc>
				display_splash_ticks = 0;
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <main+0x2ac>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <main+0x2ec>)
 8003624:	2201      	movs	r2, #1
 8003626:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003628:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <main+0x2dc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003630:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003634:	4a3a      	ldr	r2, [pc, #232]	; (8003720 <main+0x2e4>)
 8003636:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8003638:	4b3c      	ldr	r3, [pc, #240]	; (800372c <main+0x2f0>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d032      	beq.n	80036a8 <main+0x26c>
			if (esp_mode) {
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <main+0x2f4>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <main+0x25a>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 800364a:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <main+0x2f8>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b7e      	cmp	r3, #126	; 0x7e
 8003652:	d106      	bne.n	8003662 <main+0x226>
					esp_mode = 0;
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <main+0x2f4>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 800365a:	4837      	ldr	r0, [pc, #220]	; (8003738 <main+0x2fc>)
 800365c:	f001 fa90 	bl	8004b80 <term_print>
 8003660:	e01c      	b.n	800369c <main+0x260>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 8003662:	4a34      	ldr	r2, [pc, #208]	; (8003734 <main+0x2f8>)
 8003664:	4935      	ldr	r1, [pc, #212]	; (800373c <main+0x300>)
 8003666:	4824      	ldr	r0, [pc, #144]	; (80036f8 <main+0x2bc>)
 8003668:	f00a fa04 	bl	800da74 <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 800366c:	4822      	ldr	r0, [pc, #136]	; (80036f8 <main+0x2bc>)
 800366e:	f7fc fe1f 	bl	80002b0 <strlen>
 8003672:	4603      	mov	r3, r0
 8003674:	b29a      	uxth	r2, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	491f      	ldr	r1, [pc, #124]	; (80036f8 <main+0x2bc>)
 800367c:	4818      	ldr	r0, [pc, #96]	; (80036e0 <main+0x2a4>)
 800367e:	f008 fc74 	bl	800bf6a <HAL_UART_Transmit>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <main+0x250>
						Error_Handler();
 8003688:	f000 fe38 	bl	80042fc <Error_Handler>
					}
					term_print("%s", msg_buf);
 800368c:	491a      	ldr	r1, [pc, #104]	; (80036f8 <main+0x2bc>)
 800368e:	482c      	ldr	r0, [pc, #176]	; (8003740 <main+0x304>)
 8003690:	f001 fa76 	bl	8004b80 <term_print>
 8003694:	e002      	b.n	800369c <main+0x260>
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 8003696:	4827      	ldr	r0, [pc, #156]	; (8003734 <main+0x2f8>)
 8003698:	f7fe fdfe 	bl	8002298 <CMD_Handler>
			}
			cli_rx_count = 0;
 800369c:	4b29      	ldr	r3, [pc, #164]	; (8003744 <main+0x308>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 80036a2:	4b22      	ldr	r3, [pc, #136]	; (800372c <main+0x2f0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
		}

#ifdef USE_WIFI
		// Handle ESP UART communication
		if (esp_rx_count > 0) {		// do we have any RX data from the ESP?
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <main+0x30c>)
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d060      	beq.n	8003772 <main+0x336>
			if (esp_rx_count_last != esp_rx_count) { 	// has the RX count changed since last iteration?
 80036b0:	4b26      	ldr	r3, [pc, #152]	; (800374c <main+0x310>)
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <main+0x30c>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d004      	beq.n	80036c6 <main+0x28a>
				esp_rx_count_last = esp_rx_count;		// yes -> update last count, RX not finished yet
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <main+0x30c>)
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <main+0x310>)
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e055      	b.n	8003772 <main+0x336>
			} else {	// count hasn't changed since last iteration, we assume RX is completed
				if (!esp_mode) {
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <main+0x2f4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d140      	bne.n	8003750 <main+0x314>
					wifi_handle_esp_rx_data();
 80036ce:	f001 fc9f 	bl	8005010 <wifi_handle_esp_rx_data>
 80036d2:	e047      	b.n	8003764 <main+0x328>
 80036d4:	2000241e 	.word	0x2000241e
 80036d8:	20002294 	.word	0x20002294
 80036dc:	200024a1 	.word	0x200024a1
 80036e0:	200022d8 	.word	0x200022d8
 80036e4:	2000224c 	.word	0x2000224c
 80036e8:	200080c8 	.word	0x200080c8
 80036ec:	08015a18 	.word	0x08015a18
 80036f0:	08015a14 	.word	0x08015a14
 80036f4:	080113d8 	.word	0x080113d8
 80036f8:	2000231c 	.word	0x2000231c
 80036fc:	080113ec 	.word	0x080113ec
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	080113fc 	.word	0x080113fc
 800370c:	200024a4 	.word	0x200024a4
 8003710:	200080dc 	.word	0x200080dc
 8003714:	200080d8 	.word	0x200080d8
 8003718:	200080d0 	.word	0x200080d0
 800371c:	200080d4 	.word	0x200080d4
 8003720:	200080c4 	.word	0x200080c4
 8003724:	200080cc 	.word	0x200080cc
 8003728:	200024bc 	.word	0x200024bc
 800372c:	200024a0 	.word	0x200024a0
 8003730:	200024b9 	.word	0x200024b9
 8003734:	20002420 	.word	0x20002420
 8003738:	08011418 	.word	0x08011418
 800373c:	08011434 	.word	0x08011434
 8003740:	0801143c 	.word	0x0801143c
 8003744:	2000241c 	.word	0x2000241c
 8003748:	20008964 	.word	0x20008964
 800374c:	200024a2 	.word	0x200024a2
				} else {		// ESP in terminal mode
					esp_rx_buf[esp_rx_count] = 0;	// Set EOS
 8003750:	4b85      	ldr	r3, [pc, #532]	; (8003968 <main+0x52c>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b85      	ldr	r3, [pc, #532]	; (800396c <main+0x530>)
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]
					term_print("%s", esp_rx_buf);
 800375c:	4983      	ldr	r1, [pc, #524]	; (800396c <main+0x530>)
 800375e:	4884      	ldr	r0, [pc, #528]	; (8003970 <main+0x534>)
 8003760:	f001 fa0e 	bl	8004b80 <term_print>
				}
				esp_rx_count = 0;
 8003764:	4b80      	ldr	r3, [pc, #512]	; (8003968 <main+0x52c>)
 8003766:	2200      	movs	r2, #0
 8003768:	801a      	strh	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
 800376a:	4b7f      	ldr	r3, [pc, #508]	; (8003968 <main+0x52c>)
 800376c:	881a      	ldrh	r2, [r3, #0]
 800376e:	4b81      	ldr	r3, [pc, #516]	; (8003974 <main+0x538>)
 8003770:	801a      	strh	r2, [r3, #0]
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 8003772:	4b81      	ldr	r3, [pc, #516]	; (8003978 <main+0x53c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <main+0x348>
		  adc_restart = 0;
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <main+0x53c>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8003780:	f7ff fe08 	bl	8003394 <start_adcs>
		}

		if (new_time_period) {
 8003784:	4b7d      	ldr	r3, [pc, #500]	; (800397c <main+0x540>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <main+0x362>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 800378c:	4b7b      	ldr	r3, [pc, #492]	; (800397c <main+0x540>)
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fe2a 	bl	80033ec <adjust_TIM2_period>
		  new_time_period = 0;
 8003798:	4b78      	ldr	r3, [pc, #480]	; (800397c <main+0x540>)
 800379a:	2200      	movs	r2, #0
 800379c:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 800379e:	4b78      	ldr	r3, [pc, #480]	; (8003980 <main+0x544>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00f      	beq.n	80037c8 <main+0x38c>
			display_screen++;
 80037a8:	4b76      	ldr	r3, [pc, #472]	; (8003984 <main+0x548>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b74      	ldr	r3, [pc, #464]	; (8003984 <main+0x548>)
 80037b2:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 80037b4:	4b73      	ldr	r3, [pc, #460]	; (8003984 <main+0x548>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <main+0x386>
				display_screen = 1;
 80037bc:	4b71      	ldr	r3, [pc, #452]	; (8003984 <main+0x548>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 80037c2:	4b6f      	ldr	r3, [pc, #444]	; (8003980 <main+0x544>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <main+0x54c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <main+0x3ac>
 80037d0:	4b6e      	ldr	r3, [pc, #440]	; (800398c <main+0x550>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <main+0x54c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d305      	bcc.n	80037e8 <main+0x3ac>
			Displ_BackLight('0');
 80037dc:	2030      	movs	r0, #48	; 0x30
 80037de:	f003 fb99 	bl	8006f14 <Displ_BackLight>
	  		display_off_ticks = 0;
 80037e2:	4b69      	ldr	r3, [pc, #420]	; (8003988 <main+0x54c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 80037e8:	4b69      	ldr	r3, [pc, #420]	; (8003990 <main+0x554>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02b      	beq.n	8003848 <main+0x40c>
			if (tft_display == 9) {
 80037f0:	4b67      	ldr	r3, [pc, #412]	; (8003990 <main+0x554>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d10e      	bne.n	8003816 <main+0x3da>
				term_print("Running TFT performance test ...\r\n");
 80037f8:	4866      	ldr	r0, [pc, #408]	; (8003994 <main+0x558>)
 80037fa:	f001 f9c1 	bl	8004b80 <term_print>
				Displ_BackLight('1');
 80037fe:	2031      	movs	r0, #49	; 0x31
 8003800:	f003 fb88 	bl	8006f14 <Displ_BackLight>
				Displ_TestAll();
 8003804:	f004 f850 	bl	80078a8 <Displ_TestAll>
				Displ_BackLight('0');
 8003808:	2030      	movs	r0, #48	; 0x30
 800380a:	f003 fb83 	bl	8006f14 <Displ_BackLight>
				term_print("....completed\r\n");
 800380e:	4862      	ldr	r0, [pc, #392]	; (8003998 <main+0x55c>)
 8003810:	f001 f9b6 	bl	8004b80 <term_print>
 8003814:	e015      	b.n	8003842 <main+0x406>
			} else {
				if (tft_display == 1) {
 8003816:	4b5e      	ldr	r3, [pc, #376]	; (8003990 <main+0x554>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d103      	bne.n	8003826 <main+0x3ea>
					Displ_BackLight('0');
 800381e:	2030      	movs	r0, #48	; 0x30
 8003820:	f003 fb78 	bl	8006f14 <Displ_BackLight>
 8003824:	e00d      	b.n	8003842 <main+0x406>
				} else {
					Displ_BackLight('1');
 8003826:	2031      	movs	r0, #49	; 0x31
 8003828:	f003 fb74 	bl	8006f14 <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 800382c:	f004 f8f8 	bl	8007a20 <HAL_GetTick>
 8003830:	4603      	mov	r3, r0
 8003832:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003836:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800383a:	4a53      	ldr	r2, [pc, #332]	; (8003988 <main+0x54c>)
 800383c:	6013      	str	r3, [r2, #0]
					display_update_mask();
 800383e:	f7fe ffed 	bl	800281c <display_update_mask>
				}
			}
		tft_display = 0;
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <main+0x554>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8003848:	4b54      	ldr	r3, [pc, #336]	; (800399c <main+0x560>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <main+0x438>
			display_activate = 0;
 8003852:	4b52      	ldr	r3, [pc, #328]	; (800399c <main+0x560>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8003858:	f7fe ffe0 	bl	800281c <display_update_mask>
			Displ_BackLight('1');
 800385c:	2031      	movs	r0, #49	; 0x31
 800385e:	f003 fb59 	bl	8006f14 <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003862:	f004 f8dd 	bl	8007a20 <HAL_GetTick>
 8003866:	4603      	mov	r3, r0
 8003868:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800386c:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003870:	4a45      	ldr	r2, [pc, #276]	; (8003988 <main+0x54c>)
 8003872:	6013      	str	r3, [r2, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8003874:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <main+0x564>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	dc0b      	bgt.n	8003894 <main+0x458>
 800387c:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <main+0x568>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	dc07      	bgt.n	8003894 <main+0x458>
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <main+0x56c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	dc03      	bgt.n	8003894 <main+0x458>
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <main+0x570>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b01      	cmp	r3, #1
 8003892:	dd1b      	ble.n	80038cc <main+0x490>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <main+0x564>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	dd02      	ble.n	80038a2 <main+0x466>
 800389c:	4b40      	ldr	r3, [pc, #256]	; (80039a0 <main+0x564>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 80038a2:	4b40      	ldr	r3, [pc, #256]	; (80039a4 <main+0x568>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	dd02      	ble.n	80038b0 <main+0x474>
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <main+0x568>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 80038b0:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <main+0x56c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	dd02      	ble.n	80038be <main+0x482>
 80038b8:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <main+0x56c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <main+0x570>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	dd02      	ble.n	80038cc <main+0x490>
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <main+0x570>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 80038cc:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <main+0x564>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	dd0e      	ble.n	80038f2 <main+0x4b6>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 80038d4:	2100      	movs	r1, #0
 80038d6:	2000      	movs	r0, #0
 80038d8:	f7fd fba4 	bl	8001024 <calc_process_dma_buffer>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <main+0x4ac>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 80038e2:	4833      	ldr	r0, [pc, #204]	; (80039b0 <main+0x574>)
 80038e4:	f001 f94c 	bl	8004b80 <term_print>
			}
			adc1_dma_l_count--;
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <main+0x564>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <main+0x564>)
 80038f0:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 80038f2:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <main+0x568>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	dd0e      	ble.n	8003918 <main+0x4dc>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 80038fa:	2100      	movs	r1, #0
 80038fc:	2001      	movs	r0, #1
 80038fe:	f7fd fb91 	bl	8001024 <calc_process_dma_buffer>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <main+0x4d2>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8003908:	482a      	ldr	r0, [pc, #168]	; (80039b4 <main+0x578>)
 800390a:	f001 f939 	bl	8004b80 <term_print>
			}
			adc1_dma_h_count--;
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <main+0x568>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <main+0x568>)
 8003916:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <main+0x56c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dd0e      	ble.n	800393e <main+0x502>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003920:	2101      	movs	r1, #1
 8003922:	2000      	movs	r0, #0
 8003924:	f7fd fb7e 	bl	8001024 <calc_process_dma_buffer>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <main+0x4f8>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 800392e:	4822      	ldr	r0, [pc, #136]	; (80039b8 <main+0x57c>)
 8003930:	f001 f926 	bl	8004b80 <term_print>
			}
			adc2_dma_l_count--;
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <main+0x56c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3b01      	subs	r3, #1
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <main+0x56c>)
 800393c:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <main+0x570>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f77f ae0c 	ble.w	8003560 <main+0x124>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8003948:	2101      	movs	r1, #1
 800394a:	2001      	movs	r0, #1
 800394c:	f7fd fb6a 	bl	8001024 <calc_process_dma_buffer>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <main+0x520>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8003956:	4819      	ldr	r0, [pc, #100]	; (80039bc <main+0x580>)
 8003958:	f001 f912 	bl	8004b80 <term_print>
			}
			adc2_dma_h_count--;
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <main+0x570>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3b01      	subs	r3, #1
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <main+0x570>)
 8003964:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8003966:	e5fb      	b.n	8003560 <main+0x124>
 8003968:	20008964 	.word	0x20008964
 800396c:	200084e4 	.word	0x200084e4
 8003970:	0801143c 	.word	0x0801143c
 8003974:	200024a2 	.word	0x200024a2
 8003978:	200024b7 	.word	0x200024b7
 800397c:	200024ba 	.word	0x200024ba
 8003980:	200024b6 	.word	0x200024b6
 8003984:	200024bc 	.word	0x200024bc
 8003988:	200080c4 	.word	0x200080c4
 800398c:	200080d0 	.word	0x200080d0
 8003990:	200024b8 	.word	0x200024b8
 8003994:	08011440 	.word	0x08011440
 8003998:	08011464 	.word	0x08011464
 800399c:	200024b5 	.word	0x200024b5
 80039a0:	200024c0 	.word	0x200024c0
 80039a4:	200024c4 	.word	0x200024c4
 80039a8:	200024c8 	.word	0x200024c8
 80039ac:	200024cc 	.word	0x200024cc
 80039b0:	08011474 	.word	0x08011474
 80039b4:	0801149c 	.word	0x0801149c
 80039b8:	080114c4 	.word	0x080114c4
 80039bc:	080114ec 	.word	0x080114ec

080039c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b094      	sub	sp, #80	; 0x50
 80039c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039c6:	f107 031c 	add.w	r3, r7, #28
 80039ca:	2234      	movs	r2, #52	; 0x34
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f00a face 	bl	800df70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039d4:	f107 0308 	add.w	r3, r7, #8
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	2300      	movs	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <SystemClock_Config+0xdc>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <SystemClock_Config+0xdc>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6413      	str	r3, [r2, #64]	; 0x40
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <SystemClock_Config+0xdc>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <SystemClock_Config+0xe0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <SystemClock_Config+0xe0>)
 8003a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <SystemClock_Config+0xe0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a20:	2301      	movs	r3, #1
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a24:	2310      	movs	r3, #16
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a30:	2308      	movs	r3, #8
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003a34:	23b4      	movs	r3, #180	; 0xb4
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a40:	2302      	movs	r3, #2
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f006 fe3d 	bl	800a6c8 <HAL_RCC_OscConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a54:	f000 fc52 	bl	80042fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a58:	f006 fa9c 	bl	8009f94 <HAL_PWREx_EnableOverDrive>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003a62:	f000 fc4b 	bl	80042fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a66:	230f      	movs	r3, #15
 8003a68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	2105      	movs	r1, #5
 8003a84:	4618      	mov	r0, r3
 8003a86:	f006 fad5 	bl	800a034 <HAL_RCC_ClockConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003a90:	f000 fc34 	bl	80042fc <Error_Handler>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3750      	adds	r7, #80	; 0x50
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003aaa:	463b      	mov	r3, r7
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003ab6:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <MX_ADC1_Init+0xbc>)
 8003aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003abe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ac2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003acc:	2201      	movs	r2, #1
 8003ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003ae8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003af6:	2202      	movs	r2, #2
 8003af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b08:	4814      	ldr	r0, [pc, #80]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003b0a:	f003 ffb9 	bl	8007a80 <HAL_ADC_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003b14:	f000 fbf2 	bl	80042fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003b20:	2303      	movs	r3, #3
 8003b22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b24:	463b      	mov	r3, r7
 8003b26:	4619      	mov	r1, r3
 8003b28:	480c      	ldr	r0, [pc, #48]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003b2a:	f004 f8fd 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003b34:	f000 fbe2 	bl	80042fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003b38:	230a      	movs	r3, #10
 8003b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b40:	463b      	mov	r3, r7
 8003b42:	4619      	mov	r1, r3
 8003b44:	4805      	ldr	r0, [pc, #20]	; (8003b5c <MX_ADC1_Init+0xb8>)
 8003b46:	f004 f8ef 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003b50:	f000 fbd4 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20001ff0 	.word	0x20001ff0
 8003b60:	40012000 	.word	0x40012000

08003b64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <MX_ADC2_Init+0xbc>)
 8003b7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003b9e:	4b1f      	ldr	r3, [pc, #124]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003ba8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003bac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003bc8:	4814      	ldr	r0, [pc, #80]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bca:	f003 ff59 	bl	8007a80 <HAL_ADC_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003bd4:	f000 fb92 	bl	80042fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003be0:	2303      	movs	r3, #3
 8003be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003be4:	463b      	mov	r3, r7
 8003be6:	4619      	mov	r1, r3
 8003be8:	480c      	ldr	r0, [pc, #48]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003bea:	f004 f89d 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003bf4:	f000 fb82 	bl	80042fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003bf8:	230b      	movs	r3, #11
 8003bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c00:	463b      	mov	r3, r7
 8003c02:	4619      	mov	r1, r3
 8003c04:	4805      	ldr	r0, [pc, #20]	; (8003c1c <MX_ADC2_Init+0xb8>)
 8003c06:	f004 f88f 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003c10:	f000 fb74 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20002038 	.word	0x20002038
 8003c20:	40012100 	.word	0x40012100

08003c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <MX_I2C1_Init+0x54>)
 8003c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c30:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <MX_I2C1_Init+0x58>)
 8003c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c60:	4804      	ldr	r0, [pc, #16]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c62:	f005 fa29 	bl	80090b8 <HAL_I2C_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c6c:	f000 fb46 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20002140 	.word	0x20002140
 8003c78:	40005400 	.word	0x40005400
 8003c7c:	00061a80 	.word	0x00061a80

08003c80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003c86:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <MX_SPI2_Init+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003ccc:	220a      	movs	r2, #10
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003cd0:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <MX_SPI2_Init+0x64>)
 8003cd2:	f006 ff97 	bl	800ac04 <HAL_SPI_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003cdc:	f000 fb0e 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20002194 	.word	0x20002194
 8003ce8:	40003800 	.word	0x40003800

08003cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d00:	463b      	mov	r3, r7
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d1e:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d24:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d30:	4813      	ldr	r0, [pc, #76]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d32:	f007 fc41 	bl	800b5b8 <HAL_TIM_Base_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d3c:	f000 fade 	bl	80042fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	480c      	ldr	r0, [pc, #48]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d4e:	f007 fdfb 	bl	800b948 <HAL_TIM_ConfigClockSource>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d58:	f000 fad0 	bl	80042fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d64:	463b      	mov	r3, r7
 8003d66:	4619      	mov	r1, r3
 8003d68:	4805      	ldr	r0, [pc, #20]	; (8003d80 <MX_TIM2_Init+0x94>)
 8003d6a:	f008 f821 	bl	800bdb0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d74:	f000 fac2 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	2000224c 	.word	0x2000224c

08003d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <MX_USART2_UART_Init+0x50>)
 8003d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003daa:	220c      	movs	r2, #12
 8003dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003dba:	4805      	ldr	r0, [pc, #20]	; (8003dd0 <MX_USART2_UART_Init+0x4c>)
 8003dbc:	f008 f888 	bl	800bed0 <HAL_UART_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003dc6:	f000 fa99 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20002294 	.word	0x20002294
 8003dd4:	40004400 	.word	0x40004400

08003dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <MX_USART3_UART_Init+0x50>)
 8003de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dea:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003dfe:	220c      	movs	r2, #12
 8003e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e0e:	4805      	ldr	r0, [pc, #20]	; (8003e24 <MX_USART3_UART_Init+0x4c>)
 8003e10:	f008 f85e 	bl	800bed0 <HAL_UART_Init>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e1a:	f000 fa6f 	bl	80042fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200022d8 	.word	0x200022d8
 8003e28:	40004800 	.word	0x40004800

08003e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a13      	ldr	r2, [pc, #76]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <MX_DMA_Init+0x78>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	200f      	movs	r0, #15
 8003e70:	f004 fae5 	bl	800843e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003e74:	200f      	movs	r0, #15
 8003e76:	f004 fafe 	bl	8008476 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2038      	movs	r0, #56	; 0x38
 8003e80:	f004 fadd 	bl	800843e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003e84:	2038      	movs	r0, #56	; 0x38
 8003e86:	f004 faf6 	bl	8008476 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	203a      	movs	r0, #58	; 0x3a
 8003e90:	f004 fad5 	bl	800843e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003e94:	203a      	movs	r0, #58	; 0x3a
 8003e96:	f004 faee 	bl	8008476 <HAL_NVIC_EnableIRQ>

}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	4b61      	ldr	r3, [pc, #388]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a60      	ldr	r2, [pc, #384]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b5e      	ldr	r3, [pc, #376]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	4b5a      	ldr	r3, [pc, #360]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a59      	ldr	r2, [pc, #356]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b57      	ldr	r3, [pc, #348]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	4b53      	ldr	r3, [pc, #332]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b50      	ldr	r3, [pc, #320]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a4b      	ldr	r2, [pc, #300]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <MX_GPIO_Init+0x1a0>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8003f34:	4845      	ldr	r0, [pc, #276]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003f36:	f005 f873 	bl	8009020 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	4844      	ldr	r0, [pc, #272]	; (8004050 <MX_GPIO_Init+0x1a8>)
 8003f40:	f005 f86e 	bl	8009020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8003f44:	2201      	movs	r2, #1
 8003f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f4a:	4840      	ldr	r0, [pc, #256]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003f4c:	f005 f868 	bl	8009020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8003f50:	2200      	movs	r2, #0
 8003f52:	21c0      	movs	r1, #192	; 0xc0
 8003f54:	483f      	ldr	r0, [pc, #252]	; (8004054 <MX_GPIO_Init+0x1ac>)
 8003f56:	f005 f863 	bl	8009020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f6a:	f107 0314 	add.w	r3, r7, #20
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4837      	ldr	r0, [pc, #220]	; (8004050 <MX_GPIO_Init+0x1a8>)
 8003f72:	f004 fea9 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 8003f76:	f248 4360 	movw	r3, #33888	; 0x8460
 8003f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	482f      	ldr	r0, [pc, #188]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003f90:	f004 fe9a 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4828      	ldr	r0, [pc, #160]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003fac:	f004 fe8c 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4822      	ldr	r0, [pc, #136]	; (8004050 <MX_GPIO_Init+0x1a8>)
 8003fc8:	f004 fe7e 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8003fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4819      	ldr	r0, [pc, #100]	; (800404c <MX_GPIO_Init+0x1a4>)
 8003fe6:	f004 fe6f 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003fea:	2310      	movs	r3, #16
 8003fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003fee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4815      	ldr	r0, [pc, #84]	; (8004054 <MX_GPIO_Init+0x1ac>)
 8004000:	f004 fe62 	bl	8008cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 8004004:	23c0      	movs	r3, #192	; 0xc0
 8004006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004008:	2301      	movs	r3, #1
 800400a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	4619      	mov	r1, r3
 800401a:	480e      	ldr	r0, [pc, #56]	; (8004054 <MX_GPIO_Init+0x1ac>)
 800401c:	f004 fe54 	bl	8008cc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	200a      	movs	r0, #10
 8004026:	f004 fa0a 	bl	800843e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800402a:	200a      	movs	r0, #10
 800402c:	f004 fa23 	bl	8008476 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	2100      	movs	r1, #0
 8004034:	2028      	movs	r0, #40	; 0x28
 8004036:	f004 fa02 	bl	800843e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800403a:	2028      	movs	r0, #40	; 0x28
 800403c:	f004 fa1b 	bl	8008476 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004040:	bf00      	nop
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	40020000 	.word	0x40020000
 8004050:	40020800 	.word	0x40020800
 8004054:	40020400 	.word	0x40020400

08004058 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	ee24_lock = 0;
//	my_printf("HAL_I2C_MemTxCpltCallback");

}
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	ee24_lock = 0;
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_I2C_MemRxCpltCallback+0x20>)
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
	ee24_read_done = true;
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_I2C_MemRxCpltCallback+0x24>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
//	my_printf("HAL_I2C_MemRxCpltCallback");
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20001fee 	.word	0x20001fee
 800407c:	200024b4 	.word	0x200024b4

08004080 <HAL_GPIO_EXTI_Callback>:

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b10      	cmp	r3, #16
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_EXTI_Callback+0x18>
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004094:	d004      	beq.n	80040a0 <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8004096:	e007      	b.n	80040a8 <HAL_GPIO_EXTI_Callback+0x28>
		display_activate = 1;
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_GPIO_EXTI_Callback+0x34>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
		break;
 800409e:	e003      	b.n	80040a8 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_GPIO_EXTI_Callback+0x38>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
		break;
 80040a6:	bf00      	nop
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	200024b5 	.word	0x200024b5
 80040b8:	200024b6 	.word	0x200024b6

080040bc <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <HAL_ADC_ConvCpltCallback+0x34>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d105      	bne.n	80040d8 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_ADC_ConvCpltCallback+0x38>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <HAL_ADC_ConvCpltCallback+0x38>)
 80040d4:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 80040d6:	e004      	b.n	80040e2 <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 80040d8:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a06      	ldr	r2, [pc, #24]	; (80040f8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20001ff0 	.word	0x20001ff0
 80040f4:	200024c4 	.word	0x200024c4
 80040f8:	200024cc 	.word	0x200024cc

080040fc <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d105      	bne.n	8004118 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8004114:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 8004116:	e004      	b.n	8004122 <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a06      	ldr	r2, [pc, #24]	; (8004138 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8004120:	6013      	str	r3, [r2, #0]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20001ff0 	.word	0x20001ff0
 8004134:	200024c0 	.word	0x200024c0
 8004138:	200024c8 	.word	0x200024c8

0800413c <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_ADC_ErrorCallback+0x94>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d102      	bne.n	8004152 <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 800414c:	2301      	movs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e001      	b.n	8004156 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 8004152:	2302      	movs	r3, #2
 8004154:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	2b04      	cmp	r3, #4
 800415c:	d82c      	bhi.n	80041b8 <HAL_ADC_ErrorCallback+0x7c>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <HAL_ADC_ErrorCallback+0x28>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004179 	.word	0x08004179
 8004168:	08004189 	.word	0x08004189
 800416c:	08004199 	.word	0x08004199
 8004170:	080041b9 	.word	0x080041b9
 8004174:	080041a9 	.word	0x080041a9
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	461a      	mov	r2, r3
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4814      	ldr	r0, [pc, #80]	; (80041d4 <HAL_ADC_ErrorCallback+0x98>)
 8004182:	f000 fcfd 	bl	8004b80 <term_print>
		break;
 8004186:	e01e      	b.n	80041c6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	461a      	mov	r2, r3
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	4811      	ldr	r0, [pc, #68]	; (80041d8 <HAL_ADC_ErrorCallback+0x9c>)
 8004192:	f000 fcf5 	bl	8004b80 <term_print>
		break;
 8004196:	e016      	b.n	80041c6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	461a      	mov	r2, r3
 800419e:	68f9      	ldr	r1, [r7, #12]
 80041a0:	480e      	ldr	r0, [pc, #56]	; (80041dc <HAL_ADC_ErrorCallback+0xa0>)
 80041a2:	f000 fced 	bl	8004b80 <term_print>
		break;
 80041a6:	e00e      	b.n	80041c6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	461a      	mov	r2, r3
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	480b      	ldr	r0, [pc, #44]	; (80041e0 <HAL_ADC_ErrorCallback+0xa4>)
 80041b2:	f000 fce5 	bl	8004b80 <term_print>
		break;
 80041b6:	e006      	b.n	80041c6 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	4619      	mov	r1, r3
 80041be:	4809      	ldr	r0, [pc, #36]	; (80041e4 <HAL_ADC_ErrorCallback+0xa8>)
 80041c0:	f000 fcde 	bl	8004b80 <term_print>
	}
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20001ff0 	.word	0x20001ff0
 80041d4:	08011514 	.word	0x08011514
 80041d8:	08011530 	.word	0x08011530
 80041dc:	08011554 	.word	0x08011554
 80041e0:	08011574 	.word	0x08011574
 80041e4:	08011590 	.word	0x08011590

080041e8 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a37      	ldr	r2, [pc, #220]	; (80042d0 <HAL_UART_RxCpltCallback+0xe8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d13b      	bne.n	8004270 <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004200:	d902      	bls.n	8004208 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 8004204:	2200      	movs	r2, #0
 8004206:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8004208:	2201      	movs	r2, #1
 800420a:	4933      	ldr	r1, [pc, #204]	; (80042d8 <HAL_UART_RxCpltCallback+0xf0>)
 800420c:	4830      	ldr	r0, [pc, #192]	; (80042d0 <HAL_UART_RxCpltCallback+0xe8>)
 800420e:	f007 ff3e 	bl	800c08e <HAL_UART_Receive_IT>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d156      	bne.n	80042c6 <HAL_UART_RxCpltCallback+0xde>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_UART_RxCpltCallback+0xf0>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b0a      	cmp	r3, #10
 8004220:	d012      	beq.n	8004248 <HAL_UART_RxCpltCallback+0x60>
 8004222:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_UART_RxCpltCallback+0xf0>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b0d      	cmp	r3, #13
 800422a:	d00d      	beq.n	8004248 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	b291      	uxth	r1, r2
 8004236:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 8004238:	8011      	strh	r1, [r2, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_UART_RxCpltCallback+0xf0>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b2d9      	uxtb	r1, r3
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <HAL_UART_RxCpltCallback+0xf4>)
 8004244:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004246:	e03e      	b.n	80042c6 <HAL_UART_RxCpltCallback+0xde>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d039      	beq.n	80042c6 <HAL_UART_RxCpltCallback+0xde>
					cli_rx_cmd_ready = 1;
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_UART_RxCpltCallback+0xf8>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004258:	4b1e      	ldr	r3, [pc, #120]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	b291      	uxth	r1, r2
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_UART_RxCpltCallback+0xec>)
 8004264:	8011      	strh	r1, [r2, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <HAL_UART_RxCpltCallback+0xf4>)
 800426a:	2100      	movs	r1, #0
 800426c:	5499      	strb	r1, [r3, r2]
		return;
 800426e:	e02a      	b.n	80042c6 <HAL_UART_RxCpltCallback+0xde>
	}
#ifdef USE_WIFI
	// receive data from ESP
	if (huart == &ESP_UART) {
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_UART_RxCpltCallback+0xfc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d127      	bne.n	80042c8 <HAL_UART_RxCpltCallback+0xe0>
		if ( HAL_UART_Receive_IT(&ESP_UART, (uint8_t*)&esp_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 8004278:	2201      	movs	r2, #1
 800427a:	491b      	ldr	r1, [pc, #108]	; (80042e8 <HAL_UART_RxCpltCallback+0x100>)
 800427c:	4819      	ldr	r0, [pc, #100]	; (80042e4 <HAL_UART_RxCpltCallback+0xfc>)
 800427e:	f007 ff06 	bl	800c08e <HAL_UART_Receive_IT>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d117      	bne.n	80042b8 <HAL_UART_RxCpltCallback+0xd0>
			if (esp_rx_count >= ESP_RX_BUF_SIZE) {		// prevent RX buffer overrun
 8004288:	4b18      	ldr	r3, [pc, #96]	; (80042ec <HAL_UART_RxCpltCallback+0x104>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d305      	bcc.n	800429e <HAL_UART_RxCpltCallback+0xb6>
				esp_rx_count = 0;
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_UART_RxCpltCallback+0x104>)
 8004294:	2200      	movs	r2, #0
 8004296:	801a      	strh	r2, [r3, #0]
				esp_rx_buffer_overflow = true;				// set error flag
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <HAL_UART_RxCpltCallback+0x108>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
			}
			esp_rx_buf[esp_rx_count++] = esp_rx_byte;		// add received byte to RX buffer
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_UART_RxCpltCallback+0x104>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	b291      	uxth	r1, r2
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_UART_RxCpltCallback+0x104>)
 80042a8:	8011      	strh	r1, [r2, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_UART_RxCpltCallback+0x100>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b2d9      	uxtb	r1, r3
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_UART_RxCpltCallback+0x10c>)
 80042b4:	5499      	strb	r1, [r3, r2]
 80042b6:	e007      	b.n	80042c8 <HAL_UART_RxCpltCallback+0xe0>
		} else {	// this should never happen
			esp_rx_error_count++;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_UART_RxCpltCallback+0x110>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_UART_RxCpltCallback+0x110>)
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e000      	b.n	80042c8 <HAL_UART_RxCpltCallback+0xe0>
		return;
 80042c6:	bf00      	nop
		}
	}
#endif
}
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20002294 	.word	0x20002294
 80042d4:	2000241c 	.word	0x2000241c
 80042d8:	2000241e 	.word	0x2000241e
 80042dc:	20002420 	.word	0x20002420
 80042e0:	200024a0 	.word	0x200024a0
 80042e4:	200022d8 	.word	0x200022d8
 80042e8:	200024a1 	.word	0x200024a1
 80042ec:	20008964 	.word	0x20008964
 80042f0:	20008968 	.word	0x20008968
 80042f4:	200084e4 	.word	0x200084e4
 80042f8:	20008966 	.word	0x20008966

080042fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 8004300:	4802      	ldr	r0, [pc, #8]	; (800430c <Error_Handler+0x10>)
 8004302:	f009 fdd3 	bl	800deac <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004306:	b672      	cpsid	i
}
 8004308:	bf00      	nop
    __disable_irq();
    while (1)
 800430a:	e7fe      	b.n	800430a <Error_Handler+0xe>
 800430c:	080115b0 	.word	0x080115b0

08004310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <HAL_MspInit+0x4c>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	4a0f      	ldr	r2, [pc, #60]	; (800435c <HAL_MspInit+0x4c>)
 8004320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_MspInit+0x4c>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_MspInit+0x4c>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <HAL_MspInit+0x4c>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_MspInit+0x4c>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800434e:	2007      	movs	r0, #7
 8004350:	f004 f86a 	bl	8008428 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	; 0x38
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a79      	ldr	r2, [pc, #484]	; (8004564 <HAL_ADC_MspInit+0x204>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d173      	bne.n	800446a <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	623b      	str	r3, [r7, #32]
 8004386:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_ADC_MspInit+0x208>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_ADC_MspInit+0x208>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004390:	6453      	str	r3, [r2, #68]	; 0x44
 8004392:	4b75      	ldr	r3, [pc, #468]	; (8004568 <HAL_ADC_MspInit+0x208>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	623b      	str	r3, [r7, #32]
 800439c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	4b71      	ldr	r3, [pc, #452]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	4a70      	ldr	r2, [pc, #448]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	6313      	str	r3, [r2, #48]	; 0x30
 80043ae:	4b6e      	ldr	r3, [pc, #440]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a69      	ldr	r2, [pc, #420]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b67      	ldr	r3, [pc, #412]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043d6:	2301      	movs	r3, #1
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043da:	2303      	movs	r3, #3
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	4860      	ldr	r0, [pc, #384]	; (800456c <HAL_ADC_MspInit+0x20c>)
 80043ea:	f004 fc6d 	bl	8008cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043f2:	2303      	movs	r3, #3
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043fe:	4619      	mov	r1, r3
 8004400:	485b      	ldr	r0, [pc, #364]	; (8004570 <HAL_ADC_MspInit+0x210>)
 8004402:	f004 fc61 	bl	8008cc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004406:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004408:	4a5b      	ldr	r2, [pc, #364]	; (8004578 <HAL_ADC_MspInit+0x218>)
 800440a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_ADC_MspInit+0x214>)
 800440e:	2200      	movs	r2, #0
 8004410:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004412:	4b58      	ldr	r3, [pc, #352]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004418:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_ADC_MspInit+0x214>)
 800441a:	2200      	movs	r2, #0
 800441c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800441e:	4b55      	ldr	r3, [pc, #340]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004420:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004424:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800442c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004436:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800443c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800443e:	4b4d      	ldr	r3, [pc, #308]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004440:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004444:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004446:	4b4b      	ldr	r3, [pc, #300]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004448:	2200      	movs	r2, #0
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800444c:	4849      	ldr	r0, [pc, #292]	; (8004574 <HAL_ADC_MspInit+0x214>)
 800444e:	f004 f82d 	bl	80084ac <HAL_DMA_Init>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8004458:	f7ff ff50 	bl	80042fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a45      	ldr	r2, [pc, #276]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
 8004462:	4a44      	ldr	r2, [pc, #272]	; (8004574 <HAL_ADC_MspInit+0x214>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004468:	e078      	b.n	800455c <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a43      	ldr	r2, [pc, #268]	; (800457c <HAL_ADC_MspInit+0x21c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d173      	bne.n	800455c <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <HAL_ADC_MspInit+0x208>)
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	4a3a      	ldr	r2, [pc, #232]	; (8004568 <HAL_ADC_MspInit+0x208>)
 800447e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004482:	6453      	str	r3, [r2, #68]	; 0x44
 8004484:	4b38      	ldr	r3, [pc, #224]	; (8004568 <HAL_ADC_MspInit+0x208>)
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_ADC_MspInit+0x208>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a33      	ldr	r2, [pc, #204]	; (8004568 <HAL_ADC_MspInit+0x208>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b31      	ldr	r3, [pc, #196]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6313      	str	r3, [r2, #48]	; 0x30
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_ADC_MspInit+0x208>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044c8:	2302      	movs	r3, #2
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044cc:	2303      	movs	r3, #3
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d8:	4619      	mov	r1, r3
 80044da:	4824      	ldr	r0, [pc, #144]	; (800456c <HAL_ADC_MspInit+0x20c>)
 80044dc:	f004 fbf4 	bl	8008cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80044e0:	2302      	movs	r3, #2
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044e4:	2303      	movs	r3, #3
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f0:	4619      	mov	r1, r3
 80044f2:	481f      	ldr	r0, [pc, #124]	; (8004570 <HAL_ADC_MspInit+0x210>)
 80044f4:	f004 fbe8 	bl	8008cc8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_ADC_MspInit+0x220>)
 80044fa:	4a22      	ldr	r2, [pc, #136]	; (8004584 <HAL_ADC_MspInit+0x224>)
 80044fc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004504:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_ADC_MspInit+0x220>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004518:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_ADC_MspInit+0x220>)
 800451c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004520:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004528:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <HAL_ADC_MspInit+0x220>)
 800452c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004530:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004534:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004538:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_ADC_MspInit+0x220>)
 800453c:	2200      	movs	r2, #0
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004540:	480f      	ldr	r0, [pc, #60]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004542:	f003 ffb3 	bl	80084ac <HAL_DMA_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 800454c:	f7ff fed6 	bl	80042fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0b      	ldr	r2, [pc, #44]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <HAL_ADC_MspInit+0x220>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800455c:	bf00      	nop
 800455e:	3738      	adds	r7, #56	; 0x38
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40012000 	.word	0x40012000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020800 	.word	0x40020800
 8004570:	40020000 	.word	0x40020000
 8004574:	20002080 	.word	0x20002080
 8004578:	40026410 	.word	0x40026410
 800457c:	40012100 	.word	0x40012100
 8004580:	200020e0 	.word	0x200020e0
 8004584:	40026440 	.word	0x40026440

08004588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a19      	ldr	r2, [pc, #100]	; (800460c <HAL_I2C_MspInit+0x84>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d12c      	bne.n	8004604 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4a17      	ldr	r2, [pc, #92]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045cc:	2312      	movs	r3, #18
 80045ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d4:	2303      	movs	r3, #3
 80045d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045d8:	2304      	movs	r3, #4
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	4619      	mov	r1, r3
 80045e2:	480c      	ldr	r0, [pc, #48]	; (8004614 <HAL_I2C_MspInit+0x8c>)
 80045e4:	f004 fb70 	bl	8008cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	4a07      	ldr	r2, [pc, #28]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f6:	6413      	str	r3, [r2, #64]	; 0x40
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_I2C_MspInit+0x88>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004604:	bf00      	nop
 8004606:	3728      	adds	r7, #40	; 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40005400 	.word	0x40005400
 8004610:	40023800 	.word	0x40023800
 8004614:	40020400 	.word	0x40020400

08004618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a43      	ldr	r2, [pc, #268]	; (8004744 <HAL_SPI_MspInit+0x12c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d17f      	bne.n	800473a <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004648:	6413      	str	r3, [r2, #64]	; 0x40
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_SPI_MspInit+0x130>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b3b      	ldr	r3, [pc, #236]	; (8004748 <HAL_SPI_MspInit+0x130>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a3a      	ldr	r2, [pc, #232]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b38      	ldr	r3, [pc, #224]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a33      	ldr	r2, [pc, #204]	; (8004748 <HAL_SPI_MspInit+0x130>)
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_SPI_MspInit+0x130>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 800468e:	230c      	movs	r3, #12
 8004690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004692:	2302      	movs	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469a:	2303      	movs	r3, #3
 800469c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800469e:	2305      	movs	r3, #5
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4619      	mov	r1, r3
 80046a8:	4828      	ldr	r0, [pc, #160]	; (800474c <HAL_SPI_MspInit+0x134>)
 80046aa:	f004 fb0d 	bl	8008cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 80046ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b4:	2302      	movs	r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046bc:	2303      	movs	r3, #3
 80046be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046c0:	2305      	movs	r3, #5
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	4619      	mov	r1, r3
 80046ca:	4821      	ldr	r0, [pc, #132]	; (8004750 <HAL_SPI_MspInit+0x138>)
 80046cc:	f004 fafc 	bl	8008cc8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80046d0:	4b20      	ldr	r3, [pc, #128]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046d2:	4a21      	ldr	r2, [pc, #132]	; (8004758 <HAL_SPI_MspInit+0x140>)
 80046d4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80046d6:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046dc:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046f0:	4b18      	ldr	r3, [pc, #96]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046f6:	4b17      	ldr	r3, [pc, #92]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 80046fe:	2200      	movs	r2, #0
 8004700:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 8004704:	2200      	movs	r2, #0
 8004706:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 800470a:	2200      	movs	r2, #0
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800470e:	4811      	ldr	r0, [pc, #68]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 8004710:	f003 fecc 	bl	80084ac <HAL_DMA_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800471a:	f7ff fdef 	bl	80042fc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 8004722:	649a      	str	r2, [r3, #72]	; 0x48
 8004724:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <HAL_SPI_MspInit+0x13c>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	2100      	movs	r1, #0
 800472e:	2024      	movs	r0, #36	; 0x24
 8004730:	f003 fe85 	bl	800843e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004734:	2024      	movs	r0, #36	; 0x24
 8004736:	f003 fe9e 	bl	8008476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40003800 	.word	0x40003800
 8004748:	40023800 	.word	0x40023800
 800474c:	40020800 	.word	0x40020800
 8004750:	40020400 	.word	0x40020400
 8004754:	200021ec 	.word	0x200021ec
 8004758:	40026070 	.word	0x40026070

0800475c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d115      	bne.n	800479a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <HAL_TIM_Base_MspInit+0x48>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a0b      	ldr	r2, [pc, #44]	; (80047a4 <HAL_TIM_Base_MspInit+0x48>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_TIM_Base_MspInit+0x48>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	201c      	movs	r0, #28
 8004790:	f003 fe55 	bl	800843e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004794:	201c      	movs	r0, #28
 8004796:	f003 fe6e 	bl	8008476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 031c 	add.w	r3, r7, #28
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3a      	ldr	r2, [pc, #232]	; (80048b0 <HAL_UART_MspInit+0x108>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d134      	bne.n	8004834 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a38      	ldr	r2, [pc, #224]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	4a31      	ldr	r2, [pc, #196]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6313      	str	r3, [r2, #48]	; 0x30
 80047f6:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004802:	230c      	movs	r3, #12
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004806:	2302      	movs	r3, #2
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800480e:	2303      	movs	r3, #3
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004812:	2307      	movs	r3, #7
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004816:	f107 031c 	add.w	r3, r7, #28
 800481a:	4619      	mov	r1, r3
 800481c:	4826      	ldr	r0, [pc, #152]	; (80048b8 <HAL_UART_MspInit+0x110>)
 800481e:	f004 fa53 	bl	8008cc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004822:	2200      	movs	r2, #0
 8004824:	2100      	movs	r1, #0
 8004826:	2026      	movs	r0, #38	; 0x26
 8004828:	f003 fe09 	bl	800843e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800482c:	2026      	movs	r0, #38	; 0x26
 800482e:	f003 fe22 	bl	8008476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004832:	e039      	b.n	80048a8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_UART_MspInit+0x114>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d134      	bne.n	80048a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 8004848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
 800484e:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_UART_MspInit+0x10c>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004876:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004884:	2303      	movs	r3, #3
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004888:	2307      	movs	r3, #7
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	480b      	ldr	r0, [pc, #44]	; (80048c0 <HAL_UART_MspInit+0x118>)
 8004894:	f004 fa18 	bl	8008cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	2100      	movs	r1, #0
 800489c:	2027      	movs	r0, #39	; 0x27
 800489e:	f003 fdce 	bl	800843e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80048a2:	2027      	movs	r0, #39	; 0x27
 80048a4:	f003 fde7 	bl	8008476 <HAL_NVIC_EnableIRQ>
}
 80048a8:	bf00      	nop
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40004400 	.word	0x40004400
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40004800 	.word	0x40004800
 80048c0:	40020800 	.word	0x40020800

080048c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <NMI_Handler+0x4>

080048ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048ce:	e7fe      	b.n	80048ce <HardFault_Handler+0x4>

080048d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048d4:	e7fe      	b.n	80048d4 <MemManage_Handler+0x4>

080048d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048da:	e7fe      	b.n	80048da <BusFault_Handler+0x4>

080048dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048e0:	e7fe      	b.n	80048e0 <UsageFault_Handler+0x4>

080048e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004910:	f003 f872 	bl	80079f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}

08004918 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 800491c:	2010      	movs	r0, #16
 800491e:	f004 fbb3 	bl	8009088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800492c:	4802      	ldr	r0, [pc, #8]	; (8004938 <DMA1_Stream4_IRQHandler+0x10>)
 800492e:	f003 ff55 	bl	80087dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200021ec 	.word	0x200021ec

0800493c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004940:	4804      	ldr	r0, [pc, #16]	; (8004954 <TIM2_IRQHandler+0x18>)
 8004942:	f006 fef9 	bl	800b738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8004946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800494a:	4803      	ldr	r0, [pc, #12]	; (8004958 <TIM2_IRQHandler+0x1c>)
 800494c:	f004 fb81 	bl	8009052 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	2000224c 	.word	0x2000224c
 8004958:	40020000 	.word	0x40020000

0800495c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <SPI2_IRQHandler+0x10>)
 8004962:	f006 fbcb 	bl	800b0fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20002194 	.word	0x20002194

08004970 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <USART2_IRQHandler+0x10>)
 8004976:	f007 fbbb 	bl	800c0f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20002294 	.word	0x20002294

08004984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <USART3_IRQHandler+0x10>)
 800498a:	f007 fbb1 	bl	800c0f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	200022d8 	.word	0x200022d8

08004998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800499c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80049a0:	f004 fb72 	bl	8009088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <DMA2_Stream0_IRQHandler+0x10>)
 80049ae:	f003 ff15 	bl	80087dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20002080 	.word	0x20002080

080049bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <DMA2_Stream2_IRQHandler+0x10>)
 80049c2:	f003 ff0b 	bl	80087dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200020e0 	.word	0x200020e0

080049d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return 1;
 80049d4:	2301      	movs	r3, #1
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <_kill>:

int _kill(int pid, int sig)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049ea:	f009 fb23 	bl	800e034 <__errno>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2216      	movs	r2, #22
 80049f2:	601a      	str	r2, [r3, #0]
  return -1;
 80049f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <_exit>:

void _exit (int status)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffe7 	bl	80049e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a12:	e7fe      	b.n	8004a12 <_exit+0x12>

08004a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e00a      	b.n	8004a3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a26:	f3af 8000 	nop.w
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	60ba      	str	r2, [r7, #8]
 8004a32:	b2ca      	uxtb	r2, r1
 8004a34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	dbf0      	blt.n	8004a26 <_read+0x12>
  }

  return len;
 8004a44:	687b      	ldr	r3, [r7, #4]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e009      	b.n	8004a74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60ba      	str	r2, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	dbf1      	blt.n	8004a60 <_write+0x12>
  }
  return len;
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_close>:

int _close(int file)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aae:	605a      	str	r2, [r3, #4]
  return 0;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <_isatty>:

int _isatty(int file)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <_sbrk+0x5c>)
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <_sbrk+0x60>)
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <_sbrk+0x64>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <_sbrk+0x64>)
 8004b0e:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <_sbrk+0x68>)
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <_sbrk+0x64>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d207      	bcs.n	8004b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b20:	f009 fa88 	bl	800e034 <__errno>
 8004b24:	4603      	mov	r3, r0
 8004b26:	220c      	movs	r2, #12
 8004b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b2e:	e009      	b.n	8004b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_sbrk+0x64>)
 8004b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20020000 	.word	0x20020000
 8004b50:	00000400 	.word	0x00000400
 8004b54:	200080e0 	.word	0x200080e0
 8004b58:	20009ee0 	.word	0x20009ee0

08004b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <SystemInit+0x20>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <SystemInit+0x20>)
 8004b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004b80:	b40f      	push	{r0, r1, r2, r3}
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004b88:	f107 0314 	add.w	r3, r7, #20
 8004b8c:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b96:	480b      	ldr	r0, [pc, #44]	; (8004bc4 <term_print+0x44>)
 8004b98:	f009 f97a 	bl	800de90 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004b9c:	4809      	ldr	r0, [pc, #36]	; (8004bc4 <term_print+0x44>)
 8004b9e:	f7fb fb87 	bl	80002b0 <strlen>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004baa:	4906      	ldr	r1, [pc, #24]	; (8004bc4 <term_print+0x44>)
 8004bac:	4806      	ldr	r0, [pc, #24]	; (8004bc8 <term_print+0x48>)
 8004bae:	f007 f9dc 	bl	800bf6a <HAL_UART_Transmit>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbe:	b004      	add	sp, #16
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	200080e4 	.word	0x200080e4
 8004bc8:	20002294 	.word	0x20002294

08004bcc <term_print_hex>:
 * Print buffer content in hexadecimal format
 * parameter buf: buffer
 * parameter len: buffer length
 * parameter per_line: number of values to print per line (0=default)
 */
void term_print_hex(uint8_t* buf, unsigned len, uint8_t per_line) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
	if (per_line < 4) { per_line = 16; }
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d801      	bhi.n	8004be8 <term_print_hex+0x1c>
 8004be4:	2310      	movs	r3, #16
 8004be6:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < len; i++) {
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e016      	b.n	8004c1c <term_print_hex+0x50>
		term_print("%02X ", buf[i]);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	480d      	ldr	r0, [pc, #52]	; (8004c30 <term_print_hex+0x64>)
 8004bfa:	f7ff ffc1 	bl	8004b80 <term_print>
		if (++count > per_line) {
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	3301      	adds	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
 8004c04:	7dfa      	ldrb	r2, [r7, #23]
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d904      	bls.n	8004c16 <term_print_hex+0x4a>
			term_print("\r\n");
 8004c0c:	4809      	ldr	r0, [pc, #36]	; (8004c34 <term_print_hex+0x68>)
 8004c0e:	f7ff ffb7 	bl	8004b80 <term_print>
			count = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < len; i++) {
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d8e4      	bhi.n	8004bee <term_print_hex+0x22>
		}
	}
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	080115e4 	.word	0x080115e4
 8004c34:	080115ec 	.word	0x080115ec

08004c38 <term_show_buffer>:

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d838      	bhi.n	8004cc2 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	4619      	mov	r1, r3
 8004c54:	481d      	ldr	r0, [pc, #116]	; (8004ccc <term_show_buffer+0x94>)
 8004c56:	f7ff ff93 	bl	8004b80 <term_print>
	term_print("%3d: ", 0);
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	481c      	ldr	r0, [pc, #112]	; (8004cd0 <term_show_buffer+0x98>)
 8004c5e:	f7ff ff8f 	bl	8004b80 <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e020      	b.n	8004caa <term_show_buffer+0x72>
		if (count >= 20) {
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b13      	cmp	r3, #19
 8004c6c:	dd06      	ble.n	8004c7c <term_show_buffer+0x44>
			count =0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004c72:	8a7b      	ldrh	r3, [r7, #18]
 8004c74:	4619      	mov	r1, r3
 8004c76:	4817      	ldr	r0, [pc, #92]	; (8004cd4 <term_show_buffer+0x9c>)
 8004c78:	f7ff ff82 	bl	8004b80 <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <term_show_buffer+0xa0>)
 8004c80:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004c84:	fb03 f202 	mul.w	r2, r3, r2
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004c90:	4619      	mov	r1, r3
 8004c92:	4812      	ldr	r0, [pc, #72]	; (8004cdc <term_show_buffer+0xa4>)
 8004c94:	f7ff ff74 	bl	8004b80 <term_print>
		count++; address++;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004cb0:	d3da      	bcc.n	8004c68 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004cb2:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <term_show_buffer+0xa8>)
 8004cb4:	f7ff ff64 	bl	8004b80 <term_print>
	term_show_channel(bufnum);
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f888 	bl	8004dd0 <term_show_channel>
 8004cc0:	e000      	b.n	8004cc4 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004cc2:	bf00      	nop
}
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	080115f0 	.word	0x080115f0
 8004cd0:	080115fc 	.word	0x080115fc
 8004cd4:	08011604 	.word	0x08011604
 8004cd8:	20007390 	.word	0x20007390
 8004cdc:	0801160c 	.word	0x0801160c
 8004ce0:	080115ec 	.word	0x080115ec
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <term_show_measurements>:

void term_show_measurements() {
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b08e      	sub	sp, #56	; 0x38
 8004cee:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004cf0:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <term_show_measurements+0xc8>)
 8004cf2:	7b1b      	ldrb	r3, [r3, #12]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d008      	beq.n	8004d0a <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004cf8:	f7fc fdb4 	bl	8001864 <calc_measurements>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004d02:	482c      	ldr	r0, [pc, #176]	; (8004db4 <term_show_measurements+0xcc>)
 8004d04:	f7ff ff3c 	bl	8004b80 <term_print>
			return;
 8004d08:	e047      	b.n	8004d9a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <term_show_measurements+0xd0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fc3a 	bl	8000588 <__aeabi_f2d>
 8004d14:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <term_show_measurements+0xd4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fb fc33 	bl	8000588 <__aeabi_f2d>
 8004d22:	4604      	mov	r4, r0
 8004d24:	460d      	mov	r5, r1
 8004d26:	4b26      	ldr	r3, [pc, #152]	; (8004dc0 <term_show_measurements+0xd8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb fc2c 	bl	8000588 <__aeabi_f2d>
 8004d30:	4680      	mov	r8, r0
 8004d32:	4689      	mov	r9, r1
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <term_show_measurements+0xdc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb fc25 	bl	8000588 <__aeabi_f2d>
 8004d3e:	4682      	mov	sl, r0
 8004d40:	468b      	mov	fp, r1
 8004d42:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <term_show_measurements+0xe0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fc1e 	bl	8000588 <__aeabi_f2d>
 8004d4c:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <term_show_measurements+0xe0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb fc17 	bl	8000588 <__aeabi_f2d>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	ec43 2b10 	vmov	d0, r2, r3
 8004d62:	f00b fd5b 	bl	801081c <acos>
 8004d66:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004d6a:	a30f      	add	r3, pc, #60	; (adr r3, 8004da8 <term_show_measurements+0xc0>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fc62 	bl	8000638 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d7c:	ed97 7b00 	vldr	d7, [r7]
 8004d80:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d84:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004d88:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004d8c:	e9cd 4500 	strd	r4, r5, [sp]
 8004d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d94:	480d      	ldr	r0, [pc, #52]	; (8004dcc <term_show_measurements+0xe4>)
 8004d96:	f7ff fef3 	bl	8004b80 <term_print>
}
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da2:	bf00      	nop
 8004da4:	f3af 8000 	nop.w
 8004da8:	1af05a77 	.word	0x1af05a77
 8004dac:	404ca5dc 	.word	0x404ca5dc
 8004db0:	20000244 	.word	0x20000244
 8004db4:	08011614 	.word	0x08011614
 8004db8:	200080b0 	.word	0x200080b0
 8004dbc:	200080b4 	.word	0x200080b4
 8004dc0:	200080b8 	.word	0x200080b8
 8004dc4:	200080bc 	.word	0x200080bc
 8004dc8:	200080c0 	.word	0x200080c0
 8004dcc:	08011628 	.word	0x08011628

08004dd0 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	f200 80ce 	bhi.w	8004f7e <term_show_channel+0x1ae>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8004de2:	79fa      	ldrb	r2, [r7, #7]
 8004de4:	4968      	ldr	r1, [pc, #416]	; (8004f88 <term_show_channel+0x1b8>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	330c      	adds	r3, #12
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d050      	beq.n	8004e9a <term_show_channel+0xca>
		term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min  );
 8004df8:	79fa      	ldrb	r2, [r7, #7]
 8004dfa:	4963      	ldr	r1, [pc, #396]	; (8004f88 <term_show_channel+0x1b8>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	461c      	mov	r4, r3
 8004e0a:	79fa      	ldrb	r2, [r7, #7]
 8004e0c:	495e      	ldr	r1, [pc, #376]	; (8004f88 <term_show_channel+0x1b8>)
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3302      	adds	r3, #2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	461d      	mov	r5, r3
 8004e1e:	79fa      	ldrb	r2, [r7, #7]
 8004e20:	4959      	ldr	r1, [pc, #356]	; (8004f88 <term_show_channel+0x1b8>)
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	79fa      	ldrb	r2, [r7, #7]
 8004e34:	4954      	ldr	r1, [pc, #336]	; (8004f88 <term_show_channel+0x1b8>)
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	1ac3      	subs	r3, r0, r3
 8004e44:	462a      	mov	r2, r5
 8004e46:	4621      	mov	r1, r4
 8004e48:	4850      	ldr	r0, [pc, #320]	; (8004f8c <term_show_channel+0x1bc>)
 8004e4a:	f7ff fe99 	bl	8004b80 <term_print>
		term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004e4e:	79fa      	ldrb	r2, [r7, #7]
 8004e50:	494d      	ldr	r1, [pc, #308]	; (8004f88 <term_show_channel+0x1b8>)
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fc fff7 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004e66:	4604      	mov	r4, r0
 8004e68:	79fa      	ldrb	r2, [r7, #7]
 8004e6a:	4947      	ldr	r1, [pc, #284]	; (8004f88 <term_show_channel+0x1b8>)
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	3302      	adds	r3, #2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b21b      	sxth	r3, r3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fc ffe9 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	4621      	mov	r1, r4
 8004e88:	4841      	ldr	r0, [pc, #260]	; (8004f90 <term_show_channel+0x1c0>)
 8004e8a:	f7ff fe79 	bl	8004b80 <term_print>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	4619      	mov	r1, r3
 8004e92:	4840      	ldr	r0, [pc, #256]	; (8004f94 <term_show_channel+0x1c4>)
 8004e94:	f7ff fe74 	bl	8004b80 <term_print>
		return;
 8004e98:	e072      	b.n	8004f80 <term_show_channel+0x1b0>
	}
	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004e9a:	79fa      	ldrb	r2, [r7, #7]
 8004e9c:	493a      	ldr	r1, [pc, #232]	; (8004f88 <term_show_channel+0x1b8>)
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	440b      	add	r3, r1
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	4935      	ldr	r1, [pc, #212]	; (8004f88 <term_show_channel+0x1b8>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	1ac3      	subs	r3, r0, r3
 8004ec0:	60fb      	str	r3, [r7, #12]
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4834      	ldr	r0, [pc, #208]	; (8004f98 <term_show_channel+0x1c8>)
 8004ec8:	f7ff fe5a 	bl	8004b80 <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	492e      	ldr	r1, [pc, #184]	; (8004f88 <term_show_channel+0x1b8>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	3310      	adds	r3, #16
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fc ffb7 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	b21b      	sxth	r3, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc ffb1 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004ef2:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0fda      	lsrs	r2, r3, #31
 8004ef8:	4413      	add	r3, r2
 8004efa:	105b      	asrs	r3, r3, #1
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004efc:	b21b      	sxth	r3, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fc ffa8 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004f04:	4603      	mov	r3, r0
 8004f06:	462a      	mov	r2, r5
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4824      	ldr	r0, [pc, #144]	; (8004f9c <term_show_channel+0x1cc>)
 8004f0c:	f7ff fe38 	bl	8004b80 <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	491d      	ldr	r1, [pc, #116]	; (8004f88 <term_show_channel+0x1b8>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b21b      	sxth	r3, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc ff96 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	79fa      	ldrb	r2, [r7, #7]
 8004f2c:	4916      	ldr	r1, [pc, #88]	; (8004f88 <term_show_channel+0x1b8>)
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3302      	adds	r3, #2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc ff88 	bl	8001e54 <calc_adc_raw_to_mv_int>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4811      	ldr	r0, [pc, #68]	; (8004f90 <term_show_channel+0x1c0>)
 8004f4c:	f7ff fe18 	bl	8004b80 <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004f50:	79fa      	ldrb	r2, [r7, #7]
 8004f52:	490d      	ldr	r1, [pc, #52]	; (8004f88 <term_show_channel+0x1b8>)
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3304      	adds	r3, #4
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	79fa      	ldrb	r2, [r7, #7]
 8004f64:	4808      	ldr	r0, [pc, #32]	; (8004f88 <term_show_channel+0x1b8>)
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4403      	add	r3, r0
 8004f70:	3308      	adds	r3, #8
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	480a      	ldr	r0, [pc, #40]	; (8004fa0 <term_show_channel+0x1d0>)
 8004f78:	f7ff fe02 	bl	8004b80 <term_print>
 8004f7c:	e000      	b.n	8004f80 <term_show_channel+0x1b0>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004f7e:	bf00      	nop
}
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bdb0      	pop	{r4, r5, r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000244 	.word	0x20000244
 8004f8c:	08011658 	.word	0x08011658
 8004f90:	08011670 	.word	0x08011670
 8004f94:	08011688 	.word	0x08011688
 8004f98:	080116a8 	.word	0x080116a8
 8004f9c:	080116c4 	.word	0x080116c4
 8004fa0:	080116e8 	.word	0x080116e8

08004fa4 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d821      	bhi.n	8004ff8 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4811      	ldr	r0, [pc, #68]	; (8005000 <term_csv_buffer+0x5c>)
 8004fba:	f7ff fde1 	bl	8004b80 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e011      	b.n	8004fe8 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	490f      	ldr	r1, [pc, #60]	; (8005004 <term_csv_buffer+0x60>)
 8004fc8:	f44f 7252 	mov.w	r2, #840	; 0x348
 8004fcc:	fb03 f202 	mul.w	r2, r3, r2
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	480a      	ldr	r0, [pc, #40]	; (8005008 <term_csv_buffer+0x64>)
 8004fde:	f7ff fdcf 	bl	8004b80 <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 8004fee:	d3e9      	bcc.n	8004fc4 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 8004ff0:	4806      	ldr	r0, [pc, #24]	; (800500c <term_csv_buffer+0x68>)
 8004ff2:	f7ff fdc5 	bl	8004b80 <term_print>
 8004ff6:	e000      	b.n	8004ffa <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8004ff8:	bf00      	nop
}
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	080115f0 	.word	0x080115f0
 8005004:	20005950 	.word	0x20005950
 8005008:	08011708 	.word	0x08011708
 800500c:	08011710 	.word	0x08011710

08005010 <wifi_handle_esp_rx_data>:
 * @brief  Handle data received from ESP-01
 * @note   The first lot of data received from the ESP after reset is received with a different
 * 	       baudrate (76800) and is therefore unreadable. This function ignores the first RX.
 *         The ESP is init sequence is initiated as soon as the first lot of data is received.
 */
void wifi_handle_esp_rx_data() {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0

	if (esp_rx_error_count) {
 8005014:	4b1f      	ldr	r3, [pc, #124]	; (8005094 <wifi_handle_esp_rx_data+0x84>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <wifi_handle_esp_rx_data+0x2a>
		term_print("\r\nrx:%d error:%d\r\n", esp_rx_count, esp_rx_error_count);
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <wifi_handle_esp_rx_data+0x88>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	4619      	mov	r1, r3
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <wifi_handle_esp_rx_data+0x84>)
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	481b      	ldr	r0, [pc, #108]	; (800509c <wifi_handle_esp_rx_data+0x8c>)
 8005030:	f7ff fda6 	bl	8004b80 <term_print>
		esp_rx_error_count = 0;
 8005034:	4b17      	ldr	r3, [pc, #92]	; (8005094 <wifi_handle_esp_rx_data+0x84>)
 8005036:	2200      	movs	r2, #0
 8005038:	801a      	strh	r2, [r3, #0]
	}
	if (esp_rx_buffer_overflow) {
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <wifi_handle_esp_rx_data+0x90>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <wifi_handle_esp_rx_data+0x40>
		term_print("\r\nESP RX buffer overflow\r\n");
 8005044:	4817      	ldr	r0, [pc, #92]	; (80050a4 <wifi_handle_esp_rx_data+0x94>)
 8005046:	f7ff fd9b 	bl	8004b80 <term_print>
		esp_rx_buffer_overflow = false;
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <wifi_handle_esp_rx_data+0x90>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
	}
	if (!esp_first_rx) {
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <wifi_handle_esp_rx_data+0x98>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f083 0301 	eor.w	r3, r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <wifi_handle_esp_rx_data+0x62>
		//term_print("\r\nESP first RX\r\n");
		esp_first_rx = true;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <wifi_handle_esp_rx_data+0x98>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 8005064:	2032      	movs	r0, #50	; 0x32
 8005066:	f002 fce7 	bl	8007a38 <HAL_Delay>
		at_echo(false);		// turn echo off
 800506a:	2000      	movs	r0, #0
 800506c:	f000 f87e 	bl	800516c <at_echo>
	} else {
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
		//term_print("\r\n%s() - <%s>\r\n", __FUNCTION__, esp_rx_buf);
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
	}
}
 8005070:	e00d      	b.n	800508e <wifi_handle_esp_rx_data+0x7e>
		esp_rx_buf[esp_rx_count] = 0;		// set EOS
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <wifi_handle_esp_rx_data+0x88>)
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <wifi_handle_esp_rx_data+0x9c>)
 800507c:	2100      	movs	r1, #0
 800507e:	5499      	strb	r1, [r3, r2]
		evaluate_esp_response( (char*)esp_rx_buf, esp_rx_count);
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <wifi_handle_esp_rx_data+0x88>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	4808      	ldr	r0, [pc, #32]	; (80050ac <wifi_handle_esp_rx_data+0x9c>)
 800508a:	f000 fb99 	bl	80057c0 <evaluate_esp_response>
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20008966 	.word	0x20008966
 8005098:	20008964 	.word	0x20008964
 800509c:	08011738 	.word	0x08011738
 80050a0:	20008968 	.word	0x20008968
 80050a4:	0801174c 	.word	0x0801174c
 80050a8:	20008d6c 	.word	0x20008d6c
 80050ac:	200084e4 	.word	0x200084e4

080050b0 <cmd_sequence>:
 * @brief  ESP-01 init sequence commands
 * @note   Each step decrements the init step number.
 *         Command sent = step--
 *         OK response = step--
 */
void cmd_sequence() {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
	//term_print( "%s() - step: %d\r\n", __FUNCTION__, esp_cmd_step );
	switch (esp_cmd_step) {
 80050b4:	4b27      	ldr	r3, [pc, #156]	; (8005154 <cmd_sequence+0xa4>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d006      	beq.n	80050ca <cmd_sequence+0x1a>
 80050bc:	2b06      	cmp	r3, #6
 80050be:	dc47      	bgt.n	8005150 <cmd_sequence+0xa0>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d02e      	beq.n	8005122 <cmd_sequence+0x72>
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d016      	beq.n	80050f6 <cmd_sequence+0x46>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
		esp_cmd_step --;
		break;
	default:
	}
}
 80050c8:	e042      	b.n	8005150 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIFSR\r\n");		// get IP address
 80050ca:	4923      	ldr	r1, [pc, #140]	; (8005158 <cmd_sequence+0xa8>)
 80050cc:	4823      	ldr	r0, [pc, #140]	; (800515c <cmd_sequence+0xac>)
 80050ce:	f008 fcd1 	bl	800da74 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80050d2:	4822      	ldr	r0, [pc, #136]	; (800515c <cmd_sequence+0xac>)
 80050d4:	f7fb f8ec 	bl	80002b0 <strlen>
 80050d8:	4603      	mov	r3, r0
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050e0:	491e      	ldr	r1, [pc, #120]	; (800515c <cmd_sequence+0xac>)
 80050e2:	481f      	ldr	r0, [pc, #124]	; (8005160 <cmd_sequence+0xb0>)
 80050e4:	f006 ff41 	bl	800bf6a <HAL_UART_Transmit>
		esp_cmd_step --;
 80050e8:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <cmd_sequence+0xa4>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <cmd_sequence+0xa4>)
 80050f2:	701a      	strb	r2, [r3, #0]
		break;
 80050f4:	e02c      	b.n	8005150 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPMUX=1\r\n");	// start server
 80050f6:	491b      	ldr	r1, [pc, #108]	; (8005164 <cmd_sequence+0xb4>)
 80050f8:	4818      	ldr	r0, [pc, #96]	; (800515c <cmd_sequence+0xac>)
 80050fa:	f008 fcbb 	bl	800da74 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 80050fe:	4817      	ldr	r0, [pc, #92]	; (800515c <cmd_sequence+0xac>)
 8005100:	f7fb f8d6 	bl	80002b0 <strlen>
 8005104:	4603      	mov	r3, r0
 8005106:	b29a      	uxth	r2, r3
 8005108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510c:	4913      	ldr	r1, [pc, #76]	; (800515c <cmd_sequence+0xac>)
 800510e:	4814      	ldr	r0, [pc, #80]	; (8005160 <cmd_sequence+0xb0>)
 8005110:	f006 ff2b 	bl	800bf6a <HAL_UART_Transmit>
		esp_cmd_step --;
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <cmd_sequence+0xa4>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <cmd_sequence+0xa4>)
 800511e:	701a      	strb	r2, [r3, #0]
		break;
 8005120:	e016      	b.n	8005150 <cmd_sequence+0xa0>
		sprintf((char*)esp_tx_buf, "AT+CIPSERVER=1,%d\r\n", MODBUS_SERVER_PORT);	// start server
 8005122:	2250      	movs	r2, #80	; 0x50
 8005124:	4910      	ldr	r1, [pc, #64]	; (8005168 <cmd_sequence+0xb8>)
 8005126:	480d      	ldr	r0, [pc, #52]	; (800515c <cmd_sequence+0xac>)
 8005128:	f008 fca4 	bl	800da74 <siprintf>
		HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800512c:	480b      	ldr	r0, [pc, #44]	; (800515c <cmd_sequence+0xac>)
 800512e:	f7fb f8bf 	bl	80002b0 <strlen>
 8005132:	4603      	mov	r3, r0
 8005134:	b29a      	uxth	r2, r3
 8005136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513a:	4908      	ldr	r1, [pc, #32]	; (800515c <cmd_sequence+0xac>)
 800513c:	4808      	ldr	r0, [pc, #32]	; (8005160 <cmd_sequence+0xb0>)
 800513e:	f006 ff14 	bl	800bf6a <HAL_UART_Transmit>
		esp_cmd_step --;
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <cmd_sequence+0xa4>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	3b01      	subs	r3, #1
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b02      	ldr	r3, [pc, #8]	; (8005154 <cmd_sequence+0xa4>)
 800514c:	701a      	strb	r2, [r3, #0]
		break;
 800514e:	bf00      	nop
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20008d70 	.word	0x20008d70
 8005158:	08011778 	.word	0x08011778
 800515c:	200088e4 	.word	0x200088e4
 8005160:	200022d8 	.word	0x200022d8
 8005164:	08011784 	.word	0x08011784
 8005168:	08011794 	.word	0x08011794

0800516c <at_echo>:

/*
 * @brief  disable echo
 * @para   on_off  true to enable echo, false to disable
 */
void at_echo(bool on_off) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
	if (on_off == true) {
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <at_echo+0x1a>
		sprintf((char*)esp_tx_buf, "ATE1\r\n");	// enable echo
 800517c:	490b      	ldr	r1, [pc, #44]	; (80051ac <at_echo+0x40>)
 800517e:	480c      	ldr	r0, [pc, #48]	; (80051b0 <at_echo+0x44>)
 8005180:	f008 fc78 	bl	800da74 <siprintf>
 8005184:	e003      	b.n	800518e <at_echo+0x22>
	} else {
		sprintf((char*)esp_tx_buf, "ATE0\r\n");	// disable echo
 8005186:	490b      	ldr	r1, [pc, #44]	; (80051b4 <at_echo+0x48>)
 8005188:	4809      	ldr	r0, [pc, #36]	; (80051b0 <at_echo+0x44>)
 800518a:	f008 fc73 	bl	800da74 <siprintf>
	}
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800518e:	4808      	ldr	r0, [pc, #32]	; (80051b0 <at_echo+0x44>)
 8005190:	f7fb f88e 	bl	80002b0 <strlen>
 8005194:	4603      	mov	r3, r0
 8005196:	b29a      	uxth	r2, r3
 8005198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800519c:	4904      	ldr	r1, [pc, #16]	; (80051b0 <at_echo+0x44>)
 800519e:	4806      	ldr	r0, [pc, #24]	; (80051b8 <at_echo+0x4c>)
 80051a0:	f006 fee3 	bl	800bf6a <HAL_UART_Transmit>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	080117a8 	.word	0x080117a8
 80051b0:	200088e4 	.word	0x200088e4
 80051b4:	080117b0 	.word	0x080117b0
 80051b8:	200022d8 	.word	0x200022d8

080051bc <on_link>:

/*
 * @brief  perform functions on TCP Link Up/Down
 * @para   up_down  true = up, false = down
 */
void on_link(bool up_down) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
	if (up_down == true) {
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <on_link+0x24>
		term_print("%s - LINK UP\r\n", __FUNCTION__);
 80051cc:	490c      	ldr	r1, [pc, #48]	; (8005200 <on_link+0x44>)
 80051ce:	480d      	ldr	r0, [pc, #52]	; (8005204 <on_link+0x48>)
 80051d0:	f7ff fcd6 	bl	8004b80 <term_print>
		esp_cmd_step = 6;	// kick off commands
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <on_link+0x4c>)
 80051d6:	2206      	movs	r2, #6
 80051d8:	701a      	strb	r2, [r3, #0]
		cmd_sequence();
 80051da:	f7ff ff69 	bl	80050b0 <cmd_sequence>
	} else {
		strcpy(ip_addr_str, empty_ip);
		term_print("%s - LINK DOWN\r\n", __FUNCTION__);
	}
}
 80051de:	e00b      	b.n	80051f8 <on_link+0x3c>
		strcpy(ip_addr_str, empty_ip);
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <on_link+0x50>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <on_link+0x54>)
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f008 ff5d 	bl	800e0aa <strcpy>
		term_print("%s - LINK DOWN\r\n", __FUNCTION__);
 80051f0:	4903      	ldr	r1, [pc, #12]	; (8005200 <on_link+0x44>)
 80051f2:	4808      	ldr	r0, [pc, #32]	; (8005214 <on_link+0x58>)
 80051f4:	f7ff fcc4 	bl	8004b80 <term_print>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08015a54 	.word	0x08015a54
 8005204:	080117b8 	.word	0x080117b8
 8005208:	20008d70 	.word	0x20008d70
 800520c:	20000038 	.word	0x20000038
 8005210:	20000034 	.word	0x20000034
 8005214:	080117c8 	.word	0x080117c8

08005218 <set_connection_status>:

/*
 * @brief  Update connection status
 * @para   new_status  new connection status
 */
void set_connection_status(uint8_t new_status) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
	bool new_con = false;
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
	if (new_status == 2) { new_con = true; }
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d101      	bne.n	8005230 <set_connection_status+0x18>
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]

	if (new_con != esp_con_is_up) {
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <set_connection_status+0x38>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	429a      	cmp	r2, r3
 8005238:	d006      	beq.n	8005248 <set_connection_status+0x30>
		esp_con_is_up = new_con;
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <set_connection_status+0x38>)
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	7013      	strb	r3, [r2, #0]
		on_link( new_con );
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff ffba 	bl	80051bc <on_link>
	}
}
 8005248:	bf00      	nop
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20008d6f 	.word	0x20008d6f

08005254 <esp_client_connection>:
/*
 * @brief   Client connection messsage
 * @para    token  0,CONNECT or 0,DISCONNECT
 * @retval  -1 on failure
 */
int esp_client_connection(char* token) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	uint8_t client_num;
	if (token[1] != ',') { return -1; }
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b2c      	cmp	r3, #44	; 0x2c
 8005264:	d002      	beq.n	800526c <esp_client_connection+0x18>
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	e034      	b.n	80052d6 <esp_client_connection+0x82>
	client_num = token[0] - '0';
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	3b30      	subs	r3, #48	; 0x30
 8005272:	73fb      	strb	r3, [r7, #15]
	if (token[2] !=  'C') { return -1; }
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3302      	adds	r3, #2
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b43      	cmp	r3, #67	; 0x43
 800527c:	d002      	beq.n	8005284 <esp_client_connection+0x30>
 800527e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005282:	e028      	b.n	80052d6 <esp_client_connection+0x82>
	if (token[3] ==  'O') {		// CONNECT
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3303      	adds	r3, #3
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b4f      	cmp	r3, #79	; 0x4f
 800528c:	d10a      	bne.n	80052a4 <esp_client_connection+0x50>
		client_connection[client_num] = true;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <esp_client_connection+0x8c>)
 8005292:	2101      	movs	r1, #1
 8005294:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Connected\r\n", __FUNCTION__, client_num);
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	461a      	mov	r2, r3
 800529a:	4912      	ldr	r1, [pc, #72]	; (80052e4 <esp_client_connection+0x90>)
 800529c:	4812      	ldr	r0, [pc, #72]	; (80052e8 <esp_client_connection+0x94>)
 800529e:	f7ff fc6f 	bl	8004b80 <term_print>
 80052a2:	e017      	b.n	80052d4 <esp_client_connection+0x80>
	} else if (token[3] == 'L') {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3303      	adds	r3, #3
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b4c      	cmp	r3, #76	; 0x4c
 80052ac:	d10a      	bne.n	80052c4 <esp_client_connection+0x70>
		client_connection[client_num] = false;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <esp_client_connection+0x8c>)
 80052b2:	2100      	movs	r1, #0
 80052b4:	54d1      	strb	r1, [r2, r3]
		term_print("%s() - Client %d Disconnected\r\n", __FUNCTION__, client_num);
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	461a      	mov	r2, r3
 80052ba:	490a      	ldr	r1, [pc, #40]	; (80052e4 <esp_client_connection+0x90>)
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <esp_client_connection+0x98>)
 80052be:	f7ff fc5f 	bl	8004b80 <term_print>
 80052c2:	e007      	b.n	80052d4 <esp_client_connection+0x80>
	} else {
		term_print("%s() - Error:<<%s>>\r\n", __FUNCTION__, token);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4907      	ldr	r1, [pc, #28]	; (80052e4 <esp_client_connection+0x90>)
 80052c8:	4809      	ldr	r0, [pc, #36]	; (80052f0 <esp_client_connection+0x9c>)
 80052ca:	f7ff fc59 	bl	8004b80 <term_print>
		return -1;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d2:	e000      	b.n	80052d6 <esp_client_connection+0x82>
	}

	return 0;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20008d74 	.word	0x20008d74
 80052e4:	08015a5c 	.word	0x08015a5c
 80052e8:	080117dc 	.word	0x080117dc
 80052ec:	080117fc 	.word	0x080117fc
 80052f0:	0801181c 	.word	0x0801181c

080052f4 <esp_client_disconnect>:

int esp_client_disconnect(uint8_t connection) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
	// Disconnect client
	sprintf((char*)esp_tx_buf, "AT+CIPCLOSE=%d\r\n", connection);	// start server
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	461a      	mov	r2, r3
 8005302:	490a      	ldr	r1, [pc, #40]	; (800532c <esp_client_disconnect+0x38>)
 8005304:	480a      	ldr	r0, [pc, #40]	; (8005330 <esp_client_disconnect+0x3c>)
 8005306:	f008 fbb5 	bl	800da74 <siprintf>
	HAL_UART_Transmit(&ESP_UART, (uint8_t*)esp_tx_buf, strlen((char*)esp_tx_buf), 1000);
 800530a:	4809      	ldr	r0, [pc, #36]	; (8005330 <esp_client_disconnect+0x3c>)
 800530c:	f7fa ffd0 	bl	80002b0 <strlen>
 8005310:	4603      	mov	r3, r0
 8005312:	b29a      	uxth	r2, r3
 8005314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005318:	4905      	ldr	r1, [pc, #20]	; (8005330 <esp_client_disconnect+0x3c>)
 800531a:	4806      	ldr	r0, [pc, #24]	; (8005334 <esp_client_disconnect+0x40>)
 800531c:	f006 fe25 	bl	800bf6a <HAL_UART_Transmit>
	return 0;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	08011834 	.word	0x08011834
 8005330:	200088e4 	.word	0x200088e4
 8005334:	200022d8 	.word	0x200022d8

08005338 <process_incoming_data>:
 * @param   data        buffer containing received data
 * @param   len         length of data buffer
 * @param   connection  the origin connection
 * @retval  0 on success
 */
int process_incoming_data(uint8_t *data, unsigned len, uint8_t connection) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]

	term_print("%s() - %d bytes from connection %d\r\n", __FUNCTION__, len, connection);
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	490a      	ldr	r1, [pc, #40]	; (8005374 <process_incoming_data+0x3c>)
 800534c:	480a      	ldr	r0, [pc, #40]	; (8005378 <process_incoming_data+0x40>)
 800534e:	f7ff fc17 	bl	8004b80 <term_print>
	term_print_hex(data, len, 0);
 8005352:	2200      	movs	r2, #0
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff fc38 	bl	8004bcc <term_print_hex>
	term_print("\r\n");
 800535c:	4807      	ldr	r0, [pc, #28]	; (800537c <process_incoming_data+0x44>)
 800535e:	f7ff fc0f 	bl	8004b80 <term_print>

	// Disconnect client
	esp_client_disconnect(connection);
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ffc5 	bl	80052f4 <esp_client_disconnect>

	return 0;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	08015a74 	.word	0x08015a74
 8005378:	08011848 	.word	0x08011848
 800537c:	08011870 	.word	0x08011870

08005380 <process_esp_response_ipd>:
 * @brief  Process the ESP response containing data from a connected client
 * @param  response  ESP receive buffer
 * @param  len       length of receive buffer
 * @retval 0 on successful
 */
int process_esp_response_ipd(char* response, int len) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	uint8_t *data_start;
	char* token;
	char* token_ptr;
	int data_len = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
	uint8_t con;

	token = strtok_r(response, ",", &token_ptr);	// +IPD
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	461a      	mov	r2, r3
 8005394:	4922      	ldr	r1, [pc, #136]	; (8005420 <process_esp_response_ipd+0xa0>)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f008 fde7 	bl	800df6a <strtok_r>
 800539c:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <process_esp_response_ipd+0x2a>
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a8:	e036      	b.n	8005418 <process_esp_response_ipd+0x98>
	token = strtok_r(NULL,",", &token_ptr);	// connection number
 80053aa:	f107 030c 	add.w	r3, r7, #12
 80053ae:	461a      	mov	r2, r3
 80053b0:	491b      	ldr	r1, [pc, #108]	; (8005420 <process_esp_response_ipd+0xa0>)
 80053b2:	2000      	movs	r0, #0
 80053b4:	f008 fdd9 	bl	800df6a <strtok_r>
 80053b8:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <process_esp_response_ipd+0x46>
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053c4:	e028      	b.n	8005418 <process_esp_response_ipd+0x98>
	else { con = token[0] - '0'; }
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	3b30      	subs	r3, #48	; 0x30
 80053cc:	75fb      	strb	r3, [r7, #23]
	token = strtok_r(NULL, ":", &token_ptr);	// data length
 80053ce:	f107 030c 	add.w	r3, r7, #12
 80053d2:	461a      	mov	r2, r3
 80053d4:	4913      	ldr	r1, [pc, #76]	; (8005424 <process_esp_response_ipd+0xa4>)
 80053d6:	2000      	movs	r0, #0
 80053d8:	f008 fdc7 	bl	800df6a <strtok_r>
 80053dc:	61b8      	str	r0, [r7, #24]
	if (token == NULL) { return -1; }
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <process_esp_response_ipd+0x6a>
 80053e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e8:	e016      	b.n	8005418 <process_esp_response_ipd+0x98>
	data_len = atoi(token);
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f007 fde8 	bl	800cfc0 <atoi>
 80053f0:	61f8      	str	r0, [r7, #28]
	if ((data_len <= 0) || (data_len >= len)) { return -1; }	// sanity check on data length
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd03      	ble.n	8005400 <process_esp_response_ipd+0x80>
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	db02      	blt.n	8005406 <process_esp_response_ipd+0x86>
 8005400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005404:	e008      	b.n	8005418 <process_esp_response_ipd+0x98>
	//We have valid data
	data_start = (uint8_t*) token_ptr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	613b      	str	r3, [r7, #16]
	return (process_incoming_data(data_start, data_len, con));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	7dfa      	ldrb	r2, [r7, #23]
 800540e:	4619      	mov	r1, r3
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f7ff ff91 	bl	8005338 <process_incoming_data>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	08011874 	.word	0x08011874
 8005424:	08011878 	.word	0x08011878

08005428 <process_esp_response_wifi>:
 * @brief   Process ESP responses starting with "WIFI ....."
 * @para    token      the token (word) which comes after "WIFI" in the ESP response
 * @para    token_num  the number if the token in the ESP response (WIFI=1)
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_wifi(char* token, uint8_t token_num) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
	//term_print( "%s() - token%d = <%s>\r\n", __FUNCTION__, token_num, token );
	uint8_t con_status = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	73fb      	strb	r3, [r7, #15]
	int retval = -1;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800543c:	60bb      	str	r3, [r7, #8]
	if (strncmp(token, "CONNECTED", 9)==0) {	// "WIFI CONNECTED"
 800543e:	2209      	movs	r2, #9
 8005440:	4922      	ldr	r1, [pc, #136]	; (80054cc <process_esp_response_wifi+0xa4>)
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f008 fd44 	bl	800ded0 <strncmp>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <process_esp_response_wifi+0x32>
		//term_print( "%s() - CON\r\n", __FUNCTION__);
		retval = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = true;
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <process_esp_response_wifi+0xa8>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e01f      	b.n	800549a <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "GOT", 3)==0) {		// "WIFI GOT IP"
 800545a:	2203      	movs	r2, #3
 800545c:	491d      	ldr	r1, [pc, #116]	; (80054d4 <process_esp_response_wifi+0xac>)
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f008 fd36 	bl	800ded0 <strncmp>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <process_esp_response_wifi+0x4e>
		//term_print( "%s() - GOT\r\n", __FUNCTION__);
		retval = 1;		// ignore next token "IP"
 800546a:	2301      	movs	r3, #1
 800546c:	60bb      	str	r3, [r7, #8]
		esp_wifi_got_ip = true;
 800546e:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <process_esp_response_wifi+0xb0>)
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e011      	b.n	800549a <process_esp_response_wifi+0x72>
	} else if(strncmp(token, "DISCONNECTED", 12)==0) { // "WIFI DISCONNECTED"
 8005476:	220c      	movs	r2, #12
 8005478:	4918      	ldr	r1, [pc, #96]	; (80054dc <process_esp_response_wifi+0xb4>)
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f008 fd28 	bl	800ded0 <strncmp>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <process_esp_response_wifi+0x72>
		retval = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	60bb      	str	r3, [r7, #8]
		esp_wifi_connected = false;
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <process_esp_response_wifi+0xa8>)
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
		esp_wifi_got_ip = false;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <process_esp_response_wifi+0xb0>)
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 8005496:	2304      	movs	r3, #4
 8005498:	73fb      	strb	r3, [r7, #15]
	}
	if (esp_wifi_connected == true) {
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <process_esp_response_wifi+0xa8>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <process_esp_response_wifi+0x8c>
		if (esp_wifi_got_ip == true) {
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <process_esp_response_wifi+0xb0>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <process_esp_response_wifi+0x88>
			con_status = 2;
 80054aa:	2302      	movs	r3, #2
 80054ac:	73fb      	strb	r3, [r7, #15]
 80054ae:	e001      	b.n	80054b4 <process_esp_response_wifi+0x8c>
		} else {
			con_status = 3;
 80054b0:	2303      	movs	r3, #3
 80054b2:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (con_status != 0) {
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <process_esp_response_wifi+0x9a>
		set_connection_status(con_status);
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff feab 	bl	8005218 <set_connection_status>
	}
	//term_print( "%s() - CONNECTED=%d GOT IP=%d (retval=%d)\r\n", __FUNCTION__, esp_wifi_connected, esp_wifi_got_ip, retval );
	return retval;
 80054c2:	68bb      	ldr	r3, [r7, #8]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	0801187c 	.word	0x0801187c
 80054d0:	20008d6d 	.word	0x20008d6d
 80054d4:	08011888 	.word	0x08011888
 80054d8:	20008d6e 	.word	0x20008d6e
 80054dc:	0801188c 	.word	0x0801188c

080054e0 <process_esp_response_status>:
 * @brief   Process ESP status response "STATUS:2"
 * @para    token      the token (word) which starts with the word "STATUS"
 * @para    token_num  the number if the token in the ESP response, normally 1 for STATUS
 * @retval  -1 on failure, 0 or the number of tokens to be ignored
 */
int process_esp_response_status(char* token, uint8_t token_num) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
	int retval = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
	uint8_t con_status = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	72fb      	strb	r3, [r7, #11]
	if (strlen(token) != 8) { return -1; }
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fa fedb 	bl	80002b0 <strlen>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d002      	beq.n	8005506 <process_esp_response_status+0x26>
 8005500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005504:	e036      	b.n	8005574 <process_esp_response_status+0x94>
	if (token[6] != ':') { return -1; }
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3306      	adds	r3, #6
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b3a      	cmp	r3, #58	; 0x3a
 800550e:	d002      	beq.n	8005516 <process_esp_response_status+0x36>
 8005510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005514:	e02e      	b.n	8005574 <process_esp_response_status+0x94>
	switch(token[7]) {
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3307      	adds	r3, #7
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b34      	cmp	r3, #52	; 0x34
 800551e:	d015      	beq.n	800554c <process_esp_response_status+0x6c>
 8005520:	2b34      	cmp	r3, #52	; 0x34
 8005522:	dc1c      	bgt.n	800555e <process_esp_response_status+0x7e>
 8005524:	2b32      	cmp	r3, #50	; 0x32
 8005526:	d002      	beq.n	800552e <process_esp_response_status+0x4e>
 8005528:	2b33      	cmp	r3, #51	; 0x33
 800552a:	d009      	beq.n	8005540 <process_esp_response_status+0x60>
 800552c:	e017      	b.n	800555e <process_esp_response_status+0x7e>
	case '2':		// GOT IP
		esp_wifi_got_ip = true;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <process_esp_response_status+0x9c>)
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = true;
 8005534:	4b12      	ldr	r3, [pc, #72]	; (8005580 <process_esp_response_status+0xa0>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
		con_status = 2;
 800553a:	2302      	movs	r3, #2
 800553c:	72fb      	strb	r3, [r7, #11]
		break;
 800553e:	e011      	b.n	8005564 <process_esp_response_status+0x84>
	case '3':		// CONNECTED
		esp_wifi_connected = true;
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <process_esp_response_status+0xa0>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
		con_status = 3;
 8005546:	2303      	movs	r3, #3
 8005548:	72fb      	strb	r3, [r7, #11]
		break;
 800554a:	e00b      	b.n	8005564 <process_esp_response_status+0x84>
	case '4':		// DISCONNECTED
		esp_wifi_got_ip = false;
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <process_esp_response_status+0x9c>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
		esp_wifi_connected = false;
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <process_esp_response_status+0xa0>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
		con_status = 4;
 8005558:	2304      	movs	r3, #4
 800555a:	72fb      	strb	r3, [r7, #11]
		break;
 800555c:	e002      	b.n	8005564 <process_esp_response_status+0x84>
	default:		// unknown status
		retval = -1;
 800555e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005562:	60fb      	str	r3, [r7, #12]
	}
	// advise connection status
	if (retval == 0) {
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <process_esp_response_status+0x92>
		set_connection_status(con_status);
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fe53 	bl	8005218 <set_connection_status>
	}
	return retval;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20008d6e 	.word	0x20008d6e
 8005580:	20008d6d 	.word	0x20008d6d

08005584 <process_esp_repsonse_plus>:
/*
 * @brief   Process line starting with '+'
 * @para    line     the response line
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_repsonse_plus(char* line) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 800558c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005590:	617b      	str	r3, [r7, #20]
	char* token_ptr;
	int len;

	//term_print( "%s() - <%s>\r\n", __FUNCTION__, line);

	token = strtok_r(line, ",", &token_ptr);
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	461a      	mov	r2, r3
 8005598:	4923      	ldr	r1, [pc, #140]	; (8005628 <process_esp_repsonse_plus+0xa4>)
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f008 fce5 	bl	800df6a <strtok_r>
 80055a0:	6138      	str	r0, [r7, #16]
	if (strncmp(token, "+CIFSR", 6)==0) {
 80055a2:	2206      	movs	r2, #6
 80055a4:	4921      	ldr	r1, [pc, #132]	; (800562c <process_esp_repsonse_plus+0xa8>)
 80055a6:	6938      	ldr	r0, [r7, #16]
 80055a8:	f008 fc92 	bl	800ded0 <strncmp>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d134      	bne.n	800561c <process_esp_repsonse_plus+0x98>
		if (line[10] == 'I') { 			// +CIFSR:STAIP,"192.168.0.xxx"
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	330a      	adds	r3, #10
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b49      	cmp	r3, #73	; 0x49
 80055ba:	d122      	bne.n	8005602 <process_esp_repsonse_plus+0x7e>
			len = strlen(token_ptr);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa fe76 	bl	80002b0 <strlen>
 80055c4:	4603      	mov	r3, r0
 80055c6:	60fb      	str	r3, [r7, #12]
			token_ptr[len-1] = 0;	// remove " at end of string
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
			token_ptr[0] = 0;		// remove " at start of string
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
			token_ptr++;			// advance ptr to start of IP string
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	3301      	adds	r3, #1
 80055de:	60bb      	str	r3, [r7, #8]
			strcpy(ip_addr_str, token_ptr);
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <process_esp_repsonse_plus+0xac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f008 fd5e 	bl	800e0aa <strcpy>
			term_print( "%s() - IP=<%s>(%s)\r\n", __FUNCTION__, ip_addr_str, token_ptr);
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <process_esp_repsonse_plus+0xac>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	490f      	ldr	r1, [pc, #60]	; (8005634 <process_esp_repsonse_plus+0xb0>)
 80055f6:	4810      	ldr	r0, [pc, #64]	; (8005638 <process_esp_repsonse_plus+0xb4>)
 80055f8:	f7ff fac2 	bl	8004b80 <term_print>
			retval = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e00c      	b.n	800561c <process_esp_repsonse_plus+0x98>
		} else if (line[10] == 'M') {	// +CIFSR:STAMAC,"bc:dd:c2:a1:25:79"
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	330a      	adds	r3, #10
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b4d      	cmp	r3, #77	; 0x4d
 800560a:	d107      	bne.n	800561c <process_esp_repsonse_plus+0x98>
			term_print( "%s() - %s %s\r\n", __FUNCTION__, token, token_ptr);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4908      	ldr	r1, [pc, #32]	; (8005634 <process_esp_repsonse_plus+0xb0>)
 8005612:	480a      	ldr	r0, [pc, #40]	; (800563c <process_esp_repsonse_plus+0xb8>)
 8005614:	f7ff fab4 	bl	8004b80 <term_print>
			retval = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
		}
	}
	return retval;
 800561c:	697b      	ldr	r3, [r7, #20]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	08011874 	.word	0x08011874
 800562c:	0801189c 	.word	0x0801189c
 8005630:	20000038 	.word	0x20000038
 8005634:	08015a8c 	.word	0x08015a8c
 8005638:	080118a4 	.word	0x080118a4
 800563c:	080118bc 	.word	0x080118bc

08005640 <process_esp_response_line>:
 * @brief   Process ESP response line"
 * @para    line     the response line
 * @para    line_num the line number
 * @retval  -1 on failure, 0 or the number of lines to be ignored
 */
int process_esp_response_line(char* line, uint8_t line_num) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
	int retval = -1;
 800564c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005650:	61fb      	str	r3, [r7, #28]
	char* token;
	char* token_ptr;
	uint8_t token_count = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
	const char s[1] = {' '};	// token separator
 8005656:	2320      	movs	r3, #32
 8005658:	723b      	strb	r3, [r7, #8]
	int ignore_tokens = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]

	//term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_num, line);

	if (line[0] == '+') {	// IP related info
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b2b      	cmp	r3, #43	; 0x2b
 8005664:	d104      	bne.n	8005670 <process_esp_response_line+0x30>
		return process_esp_repsonse_plus(line);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff ff8c 	bl	8005584 <process_esp_repsonse_plus>
 800566c:	4603      	mov	r3, r0
 800566e:	e094      	b.n	800579a <process_esp_response_line+0x15a>
	}

	// evaluate all tokens
	token = strtok_r(line, s, &token_ptr);
 8005670:	f107 020c 	add.w	r2, r7, #12
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f008 fc75 	bl	800df6a <strtok_r>
 8005680:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 8005682:	e085      	b.n	8005790 <process_esp_response_line+0x150>
		token_count++;
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	3301      	adds	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
		//term_print( "%s() - token %d = <%s>\r\n", __FUNCTION__, token_count, token);
		if (ignore_tokens > 0) {
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	dd03      	ble.n	8005698 <process_esp_response_line+0x58>
			ignore_tokens--;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	3b01      	subs	r3, #1
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e072      	b.n	800577e <process_esp_response_line+0x13e>
		} else {
			if (strncmp(token,"WIFI",4)==0) {
 8005698:	2204      	movs	r2, #4
 800569a:	4942      	ldr	r1, [pc, #264]	; (80057a4 <process_esp_response_line+0x164>)
 800569c:	69b8      	ldr	r0, [r7, #24]
 800569e:	f008 fc17 	bl	800ded0 <strncmp>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11a      	bne.n	80056de <process_esp_response_line+0x9e>
				//term_print( "%s() - found WIFI\r\n", __FUNCTION__);
				token = strtok_r(NULL, s, &token_ptr);
 80056a8:	f107 020c 	add.w	r2, r7, #12
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	4619      	mov	r1, r3
 80056b2:	2000      	movs	r0, #0
 80056b4:	f008 fc59 	bl	800df6a <strtok_r>
 80056b8:	61b8      	str	r0, [r7, #24]
				if (token != NULL) {
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d05e      	beq.n	800577e <process_esp_response_line+0x13e>
					token_count++;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	3301      	adds	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
					ignore_tokens = process_esp_response_wifi(token, token_count);
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	4619      	mov	r1, r3
 80056ca:	69b8      	ldr	r0, [r7, #24]
 80056cc:	f7ff feac 	bl	8005428 <process_esp_response_wifi>
 80056d0:	6138      	str	r0, [r7, #16]
					if (ignore_tokens >= 0) { retval = 0; }
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db52      	blt.n	800577e <process_esp_response_line+0x13e>
 80056d8:	2300      	movs	r3, #0
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e04f      	b.n	800577e <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"STATUS",6)==0){
 80056de:	2206      	movs	r2, #6
 80056e0:	4931      	ldr	r1, [pc, #196]	; (80057a8 <process_esp_response_line+0x168>)
 80056e2:	69b8      	ldr	r0, [r7, #24]
 80056e4:	f008 fbf4 	bl	800ded0 <strncmp>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <process_esp_response_line+0xc6>
				ignore_tokens = process_esp_response_status(token, token_count);
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	4619      	mov	r1, r3
 80056f2:	69b8      	ldr	r0, [r7, #24]
 80056f4:	f7ff fef4 	bl	80054e0 <process_esp_response_status>
 80056f8:	6138      	str	r0, [r7, #16]
				if (ignore_tokens >= 0) { retval = 1; }		// OK to follow
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	db3e      	blt.n	800577e <process_esp_response_line+0x13e>
 8005700:	2301      	movs	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e03b      	b.n	800577e <process_esp_response_line+0x13e>
			} else if (strncmp(token,"OK",2)==0) {
 8005706:	2202      	movs	r2, #2
 8005708:	4928      	ldr	r1, [pc, #160]	; (80057ac <process_esp_response_line+0x16c>)
 800570a:	69b8      	ldr	r0, [r7, #24]
 800570c:	f008 fbe0 	bl	800ded0 <strncmp>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d115      	bne.n	8005742 <process_esp_response_line+0x102>
				//term_print( "%s() - found OK\r\n", __FUNCTION__);
				if (esp_cmd_step) {
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <process_esp_response_line+0x170>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <process_esp_response_line+0xf6>
					if (--esp_cmd_step) {
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <process_esp_response_line+0x170>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	3b01      	subs	r3, #1
 8005724:	b2da      	uxtb	r2, r3
 8005726:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <process_esp_response_line+0x170>)
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <process_esp_response_line+0x170>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <process_esp_response_line+0xf6>
						cmd_sequence();
 8005732:	f7ff fcbd 	bl	80050b0 <cmd_sequence>
					}
				}
				if (token_count == 1) {
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d120      	bne.n	800577e <process_esp_response_line+0x13e>
					retval = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e01d      	b.n	800577e <process_esp_response_line+0x13e>
				}
			} else if (strncmp(token,"ATE0",4)==0) {		// echo of ATE0 command
 8005742:	2204      	movs	r2, #4
 8005744:	491b      	ldr	r1, [pc, #108]	; (80057b4 <process_esp_response_line+0x174>)
 8005746:	69b8      	ldr	r0, [r7, #24]
 8005748:	f008 fbc2 	bl	800ded0 <strncmp>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <process_esp_response_line+0x118>
				retval = 0;		// init_squence() will be triggered by OK
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e012      	b.n	800577e <process_esp_response_line+0x13e>
				//if (--esp_init_step) {
				//	init_sequence();
				//}
			} else if ((token[0]>='0') && (token[0]<='9')) {	// 0,CONNECT
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b2f      	cmp	r3, #47	; 0x2f
 800575e:	d908      	bls.n	8005772 <process_esp_response_line+0x132>
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b39      	cmp	r3, #57	; 0x39
 8005766:	d804      	bhi.n	8005772 <process_esp_response_line+0x132>
				retval = esp_client_connection(token);
 8005768:	69b8      	ldr	r0, [r7, #24]
 800576a:	f7ff fd73 	bl	8005254 <esp_client_connection>
 800576e:	61f8      	str	r0, [r7, #28]
 8005770:	e005      	b.n	800577e <process_esp_response_line+0x13e>
			} else {
				term_print( "%s() - unknown token%d=%s\r\n", __FUNCTION__, token_count, token);
 8005772:	7dfa      	ldrb	r2, [r7, #23]
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	4910      	ldr	r1, [pc, #64]	; (80057b8 <process_esp_response_line+0x178>)
 8005778:	4810      	ldr	r0, [pc, #64]	; (80057bc <process_esp_response_line+0x17c>)
 800577a:	f7ff fa01 	bl	8004b80 <term_print>
			}
		}
		token = strtok_r(NULL, s, &token_ptr);
 800577e:	f107 020c 	add.w	r2, r7, #12
 8005782:	f107 0308 	add.w	r3, r7, #8
 8005786:	4619      	mov	r1, r3
 8005788:	2000      	movs	r0, #0
 800578a:	f008 fbee 	bl	800df6a <strtok_r>
 800578e:	61b8      	str	r0, [r7, #24]
	while(token != NULL) {
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f47f af76 	bne.w	8005684 <process_esp_response_line+0x44>
	}
	//term_print( "%s() - retval=%d\r\n", __FUNCTION__, retval);
	return retval;
 8005798:	69fb      	ldr	r3, [r7, #28]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080118cc 	.word	0x080118cc
 80057a8:	080118d4 	.word	0x080118d4
 80057ac:	080118dc 	.word	0x080118dc
 80057b0:	20008d70 	.word	0x20008d70
 80057b4:	080118e0 	.word	0x080118e0
 80057b8:	08015aa8 	.word	0x08015aa8
 80057bc:	080118e8 	.word	0x080118e8

080057c0 <evaluate_esp_response>:

void evaluate_esp_response(char* response, int len) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	char *line;
	char *resp;
	char *token_ptr;
	uint8_t line_count = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	76fb      	strb	r3, [r7, #27]
	const char s[2] = {0x0D, 0x0A};		// line separator
 80057ce:	f640 230d 	movw	r3, #2573	; 0xa0d
 80057d2:	813b      	strh	r3, [r7, #8]
	int ignore_lines = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]

	// copy response to our own buffer
	resp = malloc(len+1);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f007 fec9 	bl	800d574 <malloc>
 80057e2:	4603      	mov	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]
	strncpy(resp, response, len);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	6938      	ldr	r0, [r7, #16]
 80057ee:	f008 fb81 	bl	800def4 <strncpy>
	resp[len] = 0;		// EOS
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
	term_print("%s() - %d bytes: %s\r\n", __FUNCTION__, strlen(resp), resp);
	term_print_hex((uint8_t*)resp, len, 0);
	term_print("\r\n");
	*/
	// did we receive data from a connected client? (CR LF +IPD,0,5:xxxxx)
	if ((resp[2]=='+')&&(resp[3]=='I')&&(resp[4]=='P')) {
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	3302      	adds	r3, #2
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b2b      	cmp	r3, #43	; 0x2b
 8005804:	d10e      	bne.n	8005824 <evaluate_esp_response+0x64>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3303      	adds	r3, #3
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b49      	cmp	r3, #73	; 0x49
 800580e:	d109      	bne.n	8005824 <evaluate_esp_response+0x64>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3304      	adds	r3, #4
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b50      	cmp	r3, #80	; 0x50
 8005818:	d104      	bne.n	8005824 <evaluate_esp_response+0x64>
		process_esp_response_ipd(resp, len);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff fdaf 	bl	8005380 <process_esp_response_ipd>
 8005822:	e035      	b.n	8005890 <evaluate_esp_response+0xd0>
		return;
	}

	// get first line from ESP response buffer
	line = strtok_r(resp, s, &token_ptr);
 8005824:	f107 020c 	add.w	r2, r7, #12
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	4619      	mov	r1, r3
 800582e:	6938      	ldr	r0, [r7, #16]
 8005830:	f008 fb9b 	bl	800df6a <strtok_r>
 8005834:	61f8      	str	r0, [r7, #28]

	// iterate through lines
	while( line != NULL ) {
 8005836:	e025      	b.n	8005884 <evaluate_esp_response+0xc4>
		line_count++;
 8005838:	7efb      	ldrb	r3, [r7, #27]
 800583a:	3301      	adds	r3, #1
 800583c:	76fb      	strb	r3, [r7, #27]
		//term_print( "%s() - %d:<%s>\r\n", __FUNCTION__, line_count, line);
		if (ignore_lines > 0) {
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dd03      	ble.n	800584c <evaluate_esp_response+0x8c>
			ignore_lines--;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3b01      	subs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e012      	b.n	8005872 <evaluate_esp_response+0xb2>
		} else {
			strcpy((char*)line_buf, line);
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	4812      	ldr	r0, [pc, #72]	; (8005898 <evaluate_esp_response+0xd8>)
 8005850:	f008 fc2b 	bl	800e0aa <strcpy>
			ignore_lines = process_esp_response_line(line_buf, line_count);
 8005854:	7efb      	ldrb	r3, [r7, #27]
 8005856:	4619      	mov	r1, r3
 8005858:	480f      	ldr	r0, [pc, #60]	; (8005898 <evaluate_esp_response+0xd8>)
 800585a:	f7ff fef1 	bl	8005640 <process_esp_response_line>
 800585e:	6178      	str	r0, [r7, #20]
			if (ignore_lines < 0) {
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b00      	cmp	r3, #0
 8005864:	da05      	bge.n	8005872 <evaluate_esp_response+0xb2>
				term_print( "%s() - Error[%d] <<%s>>\r\n", __FUNCTION__, line_count, line_buf);
 8005866:	7efa      	ldrb	r2, [r7, #27]
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <evaluate_esp_response+0xd8>)
 800586a:	490c      	ldr	r1, [pc, #48]	; (800589c <evaluate_esp_response+0xdc>)
 800586c:	480c      	ldr	r0, [pc, #48]	; (80058a0 <evaluate_esp_response+0xe0>)
 800586e:	f7ff f987 	bl	8004b80 <term_print>
			} else {
				//term_print( "%s() - Line%d ignore_lines=%d\r\n", __FUNCTION__, line_count, ignore_lines);
			}
		}
		line = strtok_r(NULL, s, &token_ptr);	// get next line
 8005872:	f107 020c 	add.w	r2, r7, #12
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4619      	mov	r1, r3
 800587c:	2000      	movs	r0, #0
 800587e:	f008 fb74 	bl	800df6a <strtok_r>
 8005882:	61f8      	str	r0, [r7, #28]
	while( line != NULL ) {
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d6      	bne.n	8005838 <evaluate_esp_response+0x78>
	}
	//term_print( "%s() - %d lines found\r\n", __FUNCTION__, line_count);
	free(resp);
 800588a:	6938      	ldr	r0, [r7, #16]
 800588c:	f007 fe7a 	bl	800d584 <free>
}
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000896c 	.word	0x2000896c
 800589c:	08015ac4 	.word	0x08015ac4
 80058a0:	08011904 	.word	0x08011904

080058a4 <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	480f      	ldr	r0, [pc, #60]	; (80058e8 <Displ_Select+0x44>)
 80058ac:	f003 fba0 	bl	8008ff0 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d015      	beq.n	80058e2 <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80058b6:	2201      	movs	r2, #1
 80058b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058bc:	480b      	ldr	r0, [pc, #44]	; (80058ec <Displ_Select+0x48>)
 80058be:	f003 fbaf 	bl	8009020 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <Displ_Select+0x4c>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	490a      	ldr	r1, [pc, #40]	; (80058f0 <Displ_Select+0x4c>)
 80058c8:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80058cc:	4013      	ands	r3, r2
 80058ce:	600b      	str	r3, [r1, #0]
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <Displ_Select+0x4c>)
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <Displ_Select+0x4c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	4802      	ldr	r0, [pc, #8]	; (80058e8 <Displ_Select+0x44>)
 80058de:	f003 fb9f 	bl	8009020 <HAL_GPIO_WritePin>
		}
	}
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40020800 	.word	0x40020800
 80058ec:	40020000 	.word	0x40020000
 80058f0:	40003800 	.word	0x40003800

080058f4 <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6039      	str	r1, [r7, #0]
 80058fc:	4611      	mov	r1, r2
 80058fe:	461a      	mov	r2, r3
 8005900:	4603      	mov	r3, r0
 8005902:	71fb      	strb	r3, [r7, #7]
 8005904:	460b      	mov	r3, r1
 8005906:	80bb      	strh	r3, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 800590c:	bf00      	nop
 800590e:	4b22      	ldr	r3, [pc, #136]	; (8005998 <Displ_Transmit+0xa4>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0fa      	beq.n	800590e <Displ_Transmit+0x1a>

	Displ_Select();
 8005918:	f7ff ffc4 	bl	80058a4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	461a      	mov	r2, r3
 8005920:	2180      	movs	r1, #128	; 0x80
 8005922:	481e      	ldr	r0, [pc, #120]	; (800599c <Displ_Transmit+0xa8>)
 8005924:	f003 fb7c 	bl	8009020 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8005928:	79bb      	ldrb	r3, [r7, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	4413      	add	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e00b      	b.n	8005954 <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	ba5b      	rev16	r3, r3
 8005946:	60bb      	str	r3, [r7, #8]
  return result;
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3304      	adds	r3, #4
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d3ef      	bcc.n	800593c <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	2b13      	cmp	r3, #19
 8005960:	d80d      	bhi.n	800597e <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <Displ_Transmit+0xa4>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8005968:	88ba      	ldrh	r2, [r7, #4]
 800596a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	480b      	ldr	r0, [pc, #44]	; (80059a0 <Displ_Transmit+0xac>)
 8005972:	f005 f9d0 	bl	800ad16 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <Displ_Transmit+0xa4>)
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 800597c:	e008      	b.n	8005990 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <Displ_Transmit+0xa4>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 8005984:	88bb      	ldrh	r3, [r7, #4]
 8005986:	461a      	mov	r2, r3
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4805      	ldr	r0, [pc, #20]	; (80059a0 <Displ_Transmit+0xac>)
 800598c:	f005 fb00 	bl	800af90 <HAL_SPI_Transmit_DMA>
	}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000003c 	.word	0x2000003c
 800599c:	40020000 	.word	0x40020000
 80059a0:	20002194 	.word	0x20002194

080059a4 <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80059ae:	1df9      	adds	r1, r7, #7
 80059b0:	2300      	movs	r3, #0
 80059b2:	2201      	movs	r2, #1
 80059b4:	2000      	movs	r0, #0
 80059b6:	f7ff ff9d 	bl	80058f4 <Displ_Transmit>
}
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	2001      	movs	r0, #1
 80059e0:	f7ff ff88 	bl	80058f4 <Displ_Transmit>
 80059e4:	e000      	b.n	80059e8 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80059e6:	bf00      	nop
}
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
	Displ_Select();
 80059f4:	f7ff ff56 	bl	80058a4 <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	4819      	ldr	r0, [pc, #100]	; (8005a64 <ILI9XXX_Init+0x74>)
 80059fe:	f003 fb0f 	bl	8009020 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f002 f818 	bl	8007a38 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2140      	movs	r1, #64	; 0x40
 8005a0c:	4815      	ldr	r0, [pc, #84]	; (8005a64 <ILI9XXX_Init+0x74>)
 8005a0e:	f003 fb07 	bl	8009020 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 8005a12:	20a5      	movs	r0, #165	; 0xa5
 8005a14:	f002 f810 	bl	8007a38 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005a18:	203a      	movs	r0, #58	; 0x3a
 8005a1a:	f7ff ffc3 	bl	80059a4 <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2101      	movs	r1, #1
 8005a22:	4811      	ldr	r0, [pc, #68]	; (8005a68 <ILI9XXX_Init+0x78>)
 8005a24:	f7ff ffcd 	bl	80059c2 <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005a28:	20b0      	movs	r0, #176	; 0xb0
 8005a2a:	f7ff ffbb 	bl	80059a4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2101      	movs	r1, #1
 8005a32:	480e      	ldr	r0, [pc, #56]	; (8005a6c <ILI9XXX_Init+0x7c>)
 8005a34:	f7ff ffc5 	bl	80059c2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005a38:	20b0      	movs	r0, #176	; 0xb0
 8005a3a:	f7ff ffb3 	bl	80059a4 <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2101      	movs	r1, #1
 8005a42:	480a      	ldr	r0, [pc, #40]	; (8005a6c <ILI9XXX_Init+0x7c>)
 8005a44:	f7ff ffbd 	bl	80059c2 <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005a48:	2011      	movs	r0, #17
 8005a4a:	f7ff ffab 	bl	80059a4 <Displ_WriteCommand>
	HAL_Delay(120);
 8005a4e:	2078      	movs	r0, #120	; 0x78
 8005a50:	f001 fff2 	bl	8007a38 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 8005a54:	2029      	movs	r0, #41	; 0x29
 8005a56:	f7ff ffa5 	bl	80059a4 <Displ_WriteCommand>
	HAL_Delay(5);
 8005a5a:	2005      	movs	r0, #5
 8005a5c:	f001 ffec 	bl	8007a38 <HAL_Delay>

}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40020400 	.word	0x40020400
 8005a68:	08011920 	.word	0x08011920
 8005a6c:	08011924 	.word	0x08011924

08005a70 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4623      	mov	r3, r4
 8005a80:	80fb      	strh	r3, [r7, #6]
 8005a82:	4603      	mov	r3, r0
 8005a84:	80bb      	strh	r3, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	807b      	strh	r3, [r7, #2]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	061a      	lsls	r2, r3, #24
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	0a12      	lsrs	r2, r2, #8
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <Displ_SetAddressWindow+0x90>)
 8005aae:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 8005ab0:	202a      	movs	r0, #42	; 0x2a
 8005ab2:	f7ff ff77 	bl	80059a4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4811      	ldr	r0, [pc, #68]	; (8005b00 <Displ_SetAddressWindow+0x90>)
 8005abc:	f7ff ff81 	bl	80059c2 <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 8005ac0:	883b      	ldrh	r3, [r7, #0]
 8005ac2:	061a      	lsls	r2, r3, #24
 8005ac4:	883b      	ldrh	r3, [r7, #0]
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005acc:	431a      	orrs	r2, r3
 8005ace:	88bb      	ldrh	r3, [r7, #4]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	88ba      	ldrh	r2, [r7, #4]
 8005ad8:	0a12      	lsrs	r2, r2, #8
 8005ada:	b292      	uxth	r2, r2
 8005adc:	431a      	orrs	r2, r3
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <Displ_SetAddressWindow+0x90>)
 8005ae0:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 8005ae2:	202b      	movs	r0, #43	; 0x2b
 8005ae4:	f7ff ff5e 	bl	80059a4 <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2104      	movs	r1, #4
 8005aec:	4804      	ldr	r0, [pc, #16]	; (8005b00 <Displ_SetAddressWindow+0x90>)
 8005aee:	f7ff ff68 	bl	80059c2 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8005af2:	202c      	movs	r0, #44	; 0x2c
 8005af4:	f7ff ff56 	bl	80059a4 <Displ_WriteCommand>
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd90      	pop	{r4, r7, pc}
 8005b00:	20009d84 	.word	0x20009d84

08005b04 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	4809      	ldr	r0, [pc, #36]	; (8005b38 <Displ_Init+0x34>)
 8005b14:	f003 fa84 	bl	8009020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b1e:	4807      	ldr	r0, [pc, #28]	; (8005b3c <Displ_Init+0x38>)
 8005b20:	f003 fa7e 	bl	8009020 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 8005b24:	f7ff ff64 	bl	80059f0 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f808 	bl	8005b40 <Displ_Orientation>
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40020800 	.word	0x40020800
 8005b3c:	40020000 	.word	0x40020000

08005b40 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d837      	bhi.n	8005bc0 <Displ_Orientation+0x80>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <Displ_Orientation+0x18>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b95 	.word	0x08005b95
 8005b64:	08005bab 	.word	0x08005bab
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <Displ_Orientation+0xa0>)
 8005b6a:	2288      	movs	r2, #136	; 0x88
 8005b6c:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <Displ_Orientation+0xa4>)
 8005b70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b74:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8005b76:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <Displ_Orientation+0xa8>)
 8005b78:	22f0      	movs	r2, #240	; 0xf0
 8005b7a:	801a      	strh	r2, [r3, #0]
			break;
 8005b7c:	e020      	b.n	8005bc0 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8005b7e:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <Displ_Orientation+0xa0>)
 8005b80:	22e8      	movs	r2, #232	; 0xe8
 8005b82:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8005b84:	4b17      	ldr	r3, [pc, #92]	; (8005be4 <Displ_Orientation+0xa4>)
 8005b86:	22f0      	movs	r2, #240	; 0xf0
 8005b88:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005b8a:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <Displ_Orientation+0xa8>)
 8005b8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b90:	801a      	strh	r2, [r3, #0]
			break;
 8005b92:	e015      	b.n	8005bc0 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 8005b94:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <Displ_Orientation+0xa0>)
 8005b96:	2248      	movs	r2, #72	; 0x48
 8005b98:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <Displ_Orientation+0xa4>)
 8005b9c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005ba0:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <Displ_Orientation+0xa8>)
 8005ba4:	22f0      	movs	r2, #240	; 0xf0
 8005ba6:	801a      	strh	r2, [r3, #0]
			break;
 8005ba8:	e00a      	b.n	8005bc0 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <Displ_Orientation+0xa0>)
 8005bac:	2228      	movs	r2, #40	; 0x28
 8005bae:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <Displ_Orientation+0xa4>)
 8005bb2:	22f0      	movs	r2, #240	; 0xf0
 8005bb4:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005bb6:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <Displ_Orientation+0xa8>)
 8005bb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005bbc:	801a      	strh	r2, [r3, #0]
			break;
 8005bbe:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 8005bc0:	2036      	movs	r0, #54	; 0x36
 8005bc2:	f7ff feef 	bl	80059a4 <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2101      	movs	r1, #1
 8005bca:	4805      	ldr	r0, [pc, #20]	; (8005be0 <Displ_Orientation+0xa0>)
 8005bcc:	f7ff fef9 	bl	80059c2 <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 8005bd0:	4a06      	ldr	r2, [pc, #24]	; (8005bec <Displ_Orientation+0xac>)
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	7013      	strb	r3, [r2, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20009d88 	.word	0x20009d88
 8005be4:	20008d82 	.word	0x20008d82
 8005be8:	20008d80 	.word	0x20008d80
 8005bec:	20008d7e 	.word	0x20008d7e

08005bf0 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a05      	ldr	r2, [pc, #20]	; (8005c14 <HAL_SPI_ErrorCallback+0x24>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d102      	bne.n	8005c08 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <HAL_SPI_ErrorCallback+0x28>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
	}
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40003800 	.word	0x40003800
 8005c18:	2000003c 	.word	0x2000003c

08005c1c <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <HAL_SPI_TxCpltCallback+0x24>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d102      	bne.n	8005c34 <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_SPI_TxCpltCallback+0x28>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40003800 	.word	0x40003800
 8005c44:	2000003c 	.word	0x2000003c

08005c48 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005c48:	b590      	push	{r4, r7, lr}
 8005c4a:	b08b      	sub	sp, #44	; 0x2c
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	80fb      	strh	r3, [r7, #6]
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80bb      	strh	r3, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	807b      	strh	r3, [r7, #2]
 8005c62:	4613      	mov	r3, r2
 8005c64:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	4a4f      	ldr	r2, [pc, #316]	; (8005da8 <Displ_FillArea+0x160>)
 8005c6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f280 8096 	bge.w	8005da0 <Displ_FillArea+0x158>
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	4a4d      	ldr	r2, [pc, #308]	; (8005dac <Displ_FillArea+0x164>)
 8005c78:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	f280 808f 	bge.w	8005da0 <Displ_FillArea+0x158>
 8005c82:	887b      	ldrh	r3, [r7, #2]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 808b 	beq.w	8005da0 <Displ_FillArea+0x158>
 8005c8a:	883b      	ldrh	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8087 	beq.w	8005da0 <Displ_FillArea+0x158>

	x1=x + w - 1;
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	887b      	ldrh	r3, [r7, #2]
 8005c96:	4413      	add	r3, r2
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8005c9c:	4b42      	ldr	r3, [pc, #264]	; (8005da8 <Displ_FillArea+0x160>)
 8005c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d903      	bls.n	8005cb2 <Displ_FillArea+0x6a>
		x1=_width;
 8005caa:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <Displ_FillArea+0x160>)
 8005cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb0:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 8005cb2:	88ba      	ldrh	r2, [r7, #4]
 8005cb4:	883b      	ldrh	r3, [r7, #0]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <Displ_FillArea+0x164>)
 8005cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d903      	bls.n	8005cd2 <Displ_FillArea+0x8a>
		y1=_height;
 8005cca:	4b38      	ldr	r3, [pc, #224]	; (8005dac <Displ_FillArea+0x164>)
 8005ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd0:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 8005cd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cd4:	0a1b      	lsrs	r3, r3, #8
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 8005ce8:	88bb      	ldrh	r3, [r7, #4]
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	88fa      	ldrh	r2, [r7, #6]
 8005cf2:	6a39      	ldr	r1, [r7, #32]
 8005cf4:	1a8a      	subs	r2, r1, r2
 8005cf6:	3201      	adds	r2, #1
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <Displ_FillArea+0x168>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d0a:	d204      	bcs.n	8005d16 <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	3301      	adds	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e002      	b.n	8005d1c <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 8005d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1a:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	e007      	b.n	8005d32 <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	617a      	str	r2, [r7, #20]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	3301      	adds	r3, #1
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
 8005d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3f3      	bcc.n	8005d22 <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	88b9      	ldrh	r1, [r7, #4]
 8005d44:	88f8      	ldrh	r0, [r7, #6]
 8005d46:	f7ff fe93 	bl	8005a70 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0a9b      	lsrs	r3, r3, #10
 8005d4e:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
 8005d54:	e00a      	b.n	8005d6c <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 8005d56:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <Displ_FillArea+0x168>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fe2e 	bl	80059c2 <Displ_WriteData>
	for  (k=0;k<times;k++) {
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	3301      	adds	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d3f0      	bcc.n	8005d56 <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <Displ_FillArea+0x168>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	005a      	lsls	r2, r3, #1
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	02db      	lsls	r3, r3, #11
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2200      	movs	r2, #0
 8005d84:	4619      	mov	r1, r3
 8005d86:	f7ff fe1c 	bl	80059c2 <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <Displ_FillArea+0x168>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <Displ_FillArea+0x16c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d101      	bne.n	8005d98 <Displ_FillArea+0x150>
 8005d94:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <Displ_FillArea+0x170>)
 8005d96:	e000      	b.n	8005d9a <Displ_FillArea+0x152>
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <Displ_FillArea+0x16c>)
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <Displ_FillArea+0x168>)
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e000      	b.n	8005da2 <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8005da0:	bf00      	nop

}
 8005da2:	372c      	adds	r7, #44	; 0x2c
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd90      	pop	{r4, r7, pc}
 8005da8:	20008d80 	.word	0x20008d80
 8005dac:	20008d82 	.word	0x20008d82
 8005db0:	20000040 	.word	0x20000040
 8005db4:	20008d84 	.word	0x20008d84
 8005db8:	20009584 	.word	0x20009584

08005dbc <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	80fb      	strh	r3, [r7, #6]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	80bb      	strh	r3, [r7, #4]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <Displ_Pixel+0x44>)
 8005dd2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	da0e      	bge.n	8005df8 <Displ_Pixel+0x3c>
 8005dda:	88bb      	ldrh	r3, [r7, #4]
 8005ddc:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <Displ_Pixel+0x48>)
 8005dde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	da08      	bge.n	8005df8 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 8005de6:	88b9      	ldrh	r1, [r7, #4]
 8005de8:	88f8      	ldrh	r0, [r7, #6]
 8005dea:	887b      	ldrh	r3, [r7, #2]
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2301      	movs	r3, #1
 8005df0:	2201      	movs	r2, #1
 8005df2:	f7ff ff29 	bl	8005c48 <Displ_FillArea>
 8005df6:	e000      	b.n	8005dfa <Displ_Pixel+0x3e>
        return;
 8005df8:	bf00      	nop

}
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20008d80 	.word	0x20008d80
 8005e04:	20008d82 	.word	0x20008d82

08005e08 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	80fb      	strh	r3, [r7, #6]
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80bb      	strh	r3, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	807b      	strh	r3, [r7, #2]
 8005e22:	4613      	mov	r3, r2
 8005e24:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	f1c3 0301 	rsb	r3, r3, #1
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005e30:	2301      	movs	r3, #1
 8005e32:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	461a      	mov	r2, r3
 8005e38:	03d2      	lsls	r2, r2, #15
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8005e42:	2300      	movs	r3, #0
 8005e44:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8005e46:	887b      	ldrh	r3, [r7, #2]
 8005e48:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005e4a:	88f8      	ldrh	r0, [r7, #6]
 8005e4c:	88ba      	ldrh	r2, [r7, #4]
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	4413      	add	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	883a      	ldrh	r2, [r7, #0]
 8005e56:	4619      	mov	r1, r3
 8005e58:	f7ff ffb0 	bl	8005dbc <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005e5c:	88f8      	ldrh	r0, [r7, #6]
 8005e5e:	88ba      	ldrh	r2, [r7, #4]
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	883a      	ldrh	r2, [r7, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f7ff ffa7 	bl	8005dbc <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	4413      	add	r3, r2
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	88b9      	ldrh	r1, [r7, #4]
 8005e78:	883a      	ldrh	r2, [r7, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ff9e 	bl	8005dbc <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	887b      	ldrh	r3, [r7, #2]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	88b9      	ldrh	r1, [r7, #4]
 8005e8a:	883a      	ldrh	r2, [r7, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff95 	bl	8005dbc <Displ_Pixel>

    while (x<y) {
 8005e92:	e081      	b.n	8005f98 <Displ_drawCircle+0x190>
        if (f >= 0) {
 8005e94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db0e      	blt.n	8005eba <Displ_drawCircle+0xb2>
            y--;
 8005e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005ea8:	8a7b      	ldrh	r3, [r7, #18]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8005eb0:	8afa      	ldrh	r2, [r7, #22]
 8005eb2:	8a7b      	ldrh	r3, [r7, #18]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8005eba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005ec6:	8abb      	ldrh	r3, [r7, #20]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8005ece:	8afa      	ldrh	r2, [r7, #22]
 8005ed0:	8abb      	ldrh	r3, [r7, #20]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	8a3b      	ldrh	r3, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	88ba      	ldrh	r2, [r7, #4]
 8005ee2:	89fb      	ldrh	r3, [r7, #14]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	883a      	ldrh	r2, [r7, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	f7ff ff66 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	8a3b      	ldrh	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	b298      	uxth	r0, r3
 8005ef8:	88ba      	ldrh	r2, [r7, #4]
 8005efa:	89fb      	ldrh	r3, [r7, #14]
 8005efc:	4413      	add	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	883a      	ldrh	r2, [r7, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	f7ff ff5a 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	8a3b      	ldrh	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b298      	uxth	r0, r3
 8005f10:	88ba      	ldrh	r2, [r7, #4]
 8005f12:	89fb      	ldrh	r3, [r7, #14]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	883a      	ldrh	r2, [r7, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f7ff ff4e 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005f20:	88fa      	ldrh	r2, [r7, #6]
 8005f22:	8a3b      	ldrh	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	b298      	uxth	r0, r3
 8005f28:	88ba      	ldrh	r2, [r7, #4]
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	883a      	ldrh	r2, [r7, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	f7ff ff42 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	88ba      	ldrh	r2, [r7, #4]
 8005f42:	8a3b      	ldrh	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	883a      	ldrh	r2, [r7, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f7ff ff36 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	b298      	uxth	r0, r3
 8005f58:	88ba      	ldrh	r2, [r7, #4]
 8005f5a:	8a3b      	ldrh	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	883a      	ldrh	r2, [r7, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	f7ff ff2a 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	89fb      	ldrh	r3, [r7, #14]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	b298      	uxth	r0, r3
 8005f70:	88ba      	ldrh	r2, [r7, #4]
 8005f72:	8a3b      	ldrh	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	883a      	ldrh	r2, [r7, #0]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f7ff ff1e 	bl	8005dbc <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	89fb      	ldrh	r3, [r7, #14]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	b298      	uxth	r0, r3
 8005f88:	88ba      	ldrh	r2, [r7, #4]
 8005f8a:	8a3b      	ldrh	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	883a      	ldrh	r2, [r7, #0]
 8005f92:	4619      	mov	r1, r3
 8005f94:	f7ff ff12 	bl	8005dbc <Displ_Pixel>
    while (x<y) {
 8005f98:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	f6ff af77 	blt.w	8005e94 <Displ_drawCircle+0x8c>
    }
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd90      	pop	{r4, r7, pc}

08005fb0 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <Displ_CLS+0x30>)
 8005fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <Displ_CLS+0x34>)
 8005fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fc8:	b299      	uxth	r1, r3
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f7ff fe38 	bl	8005c48 <Displ_FillArea>
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20008d80 	.word	0x20008d80
 8005fe4:	20008d82 	.word	0x20008d82

08005fe8 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4623      	mov	r3, r4
 8005ff8:	80fb      	strh	r3, [r7, #6]
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	80bb      	strh	r3, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	807b      	strh	r3, [r7, #2]
 8006002:	4613      	mov	r3, r2
 8006004:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 8006006:	887b      	ldrh	r3, [r7, #2]
 8006008:	f1c3 0301 	rsb	r3, r3, #1
 800600c:	b29b      	uxth	r3, r3
 800600e:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8006010:	2301      	movs	r3, #1
 8006012:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8006014:	887b      	ldrh	r3, [r7, #2]
 8006016:	461a      	mov	r2, r3
 8006018:	03d2      	lsls	r2, r2, #15
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	b29b      	uxth	r3, r3
 8006020:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 8006026:	887b      	ldrh	r3, [r7, #2]
 8006028:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 800602a:	e095      	b.n	8006158 <drawCircleHelper+0x170>
        if (f >= 0) {
 800602c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db0e      	blt.n	8006052 <drawCircleHelper+0x6a>
            y--;
 8006034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29b      	uxth	r3, r3
 800603e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8006040:	8a7b      	ldrh	r3, [r7, #18]
 8006042:	3302      	adds	r3, #2
 8006044:	b29b      	uxth	r3, r3
 8006046:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8006048:	8afa      	ldrh	r2, [r7, #22]
 800604a:	8a7b      	ldrh	r3, [r7, #18]
 800604c:	4413      	add	r3, r2
 800604e:	b29b      	uxth	r3, r3
 8006050:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8006052:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006056:	b29b      	uxth	r3, r3
 8006058:	3301      	adds	r3, #1
 800605a:	b29b      	uxth	r3, r3
 800605c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800605e:	8abb      	ldrh	r3, [r7, #20]
 8006060:	3302      	adds	r3, #2
 8006062:	b29b      	uxth	r3, r3
 8006064:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8006066:	8afa      	ldrh	r2, [r7, #22]
 8006068:	8abb      	ldrh	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d017      	beq.n	80060aa <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	8a3b      	ldrh	r3, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	b298      	uxth	r0, r3
 8006082:	88ba      	ldrh	r2, [r7, #4]
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	4413      	add	r3, r2
 8006088:	b29b      	uxth	r3, r3
 800608a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800608c:	4619      	mov	r1, r3
 800608e:	f7ff fe95 	bl	8005dbc <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	89fb      	ldrh	r3, [r7, #14]
 8006096:	4413      	add	r3, r2
 8006098:	b298      	uxth	r0, r3
 800609a:	88ba      	ldrh	r2, [r7, #4]
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7ff fe89 	bl	8005dbc <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80060aa:	787b      	ldrb	r3, [r7, #1]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d017      	beq.n	80060e4 <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	8a3b      	ldrh	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	b298      	uxth	r0, r3
 80060bc:	88ba      	ldrh	r2, [r7, #4]
 80060be:	89fb      	ldrh	r3, [r7, #14]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7ff fe78 	bl	8005dbc <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	89fb      	ldrh	r3, [r7, #14]
 80060d0:	4413      	add	r3, r2
 80060d2:	b298      	uxth	r0, r3
 80060d4:	88ba      	ldrh	r2, [r7, #4]
 80060d6:	8a3b      	ldrh	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80060de:	4619      	mov	r1, r3
 80060e0:	f7ff fe6c 	bl	8005dbc <Displ_Pixel>
        }
        if (cornername & 0x8) {
 80060e4:	787b      	ldrb	r3, [r7, #1]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d017      	beq.n	800611e <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	89fb      	ldrh	r3, [r7, #14]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	b298      	uxth	r0, r3
 80060f6:	88ba      	ldrh	r2, [r7, #4]
 80060f8:	8a3b      	ldrh	r3, [r7, #16]
 80060fa:	4413      	add	r3, r2
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006100:	4619      	mov	r1, r3
 8006102:	f7ff fe5b 	bl	8005dbc <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	8a3b      	ldrh	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	b298      	uxth	r0, r3
 800610e:	88ba      	ldrh	r2, [r7, #4]
 8006110:	89fb      	ldrh	r3, [r7, #14]
 8006112:	4413      	add	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006118:	4619      	mov	r1, r3
 800611a:	f7ff fe4f 	bl	8005dbc <Displ_Pixel>
        }
        if (cornername & 0x1) {
 800611e:	787b      	ldrb	r3, [r7, #1]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d017      	beq.n	8006158 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	b298      	uxth	r0, r3
 8006130:	88ba      	ldrh	r2, [r7, #4]
 8006132:	8a3b      	ldrh	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800613a:	4619      	mov	r1, r3
 800613c:	f7ff fe3e 	bl	8005dbc <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	8a3b      	ldrh	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	b298      	uxth	r0, r3
 8006148:	88ba      	ldrh	r2, [r7, #4]
 800614a:	89fb      	ldrh	r3, [r7, #14]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	b29b      	uxth	r3, r3
 8006150:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006152:	4619      	mov	r1, r3
 8006154:	f7ff fe32 	bl	8005dbc <Displ_Pixel>
    while (x<y) {
 8006158:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800615c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006160:	429a      	cmp	r2, r3
 8006162:	f6ff af63 	blt.w	800602c <drawCircleHelper+0x44>
        }
    }
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	bd90      	pop	{r4, r7, pc}

08006170 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b089      	sub	sp, #36	; 0x24
 8006174:	af02      	add	r7, sp, #8
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	4611      	mov	r1, r2
 800617c:	461a      	mov	r2, r3
 800617e:	4623      	mov	r3, r4
 8006180:	80fb      	strh	r3, [r7, #6]
 8006182:	4603      	mov	r3, r0
 8006184:	80bb      	strh	r3, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	807b      	strh	r3, [r7, #2]
 800618a:	4613      	mov	r3, r2
 800618c:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 800618e:	887b      	ldrh	r3, [r7, #2]
 8006190:	f1c3 0301 	rsb	r3, r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8006198:	2301      	movs	r3, #1
 800619a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	461a      	mov	r2, r3
 80061a0:	03d2      	lsls	r2, r2, #15
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80061ae:	887b      	ldrh	r3, [r7, #2]
 80061b0:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80061b2:	e0a7      	b.n	8006304 <fillCircleHelper+0x194>
    if (f >= 0) {
 80061b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db0e      	blt.n	80061da <fillCircleHelper+0x6a>
      y--;
 80061bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	3302      	adds	r3, #2
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80061d0:	8afa      	ldrh	r2, [r7, #22]
 80061d2:	8a7b      	ldrh	r3, [r7, #18]
 80061d4:	4413      	add	r3, r2
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80061da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3301      	adds	r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80061e6:	8abb      	ldrh	r3, [r7, #20]
 80061e8:	3302      	adds	r3, #2
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80061ee:	8afa      	ldrh	r2, [r7, #22]
 80061f0:	8abb      	ldrh	r3, [r7, #20]
 80061f2:	4413      	add	r3, r2
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80061f8:	787b      	ldrb	r3, [r7, #1]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d03d      	beq.n	800627e <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	8a3b      	ldrh	r3, [r7, #16]
 8006206:	4413      	add	r3, r2
 8006208:	b29b      	uxth	r3, r3
 800620a:	b218      	sxth	r0, r3
 800620c:	88ba      	ldrh	r2, [r7, #4]
 800620e:	89fb      	ldrh	r3, [r7, #14]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	b219      	sxth	r1, r3
 8006216:	88fa      	ldrh	r2, [r7, #6]
 8006218:	8a3b      	ldrh	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	b21c      	sxth	r4, r3
 8006220:	88ba      	ldrh	r2, [r7, #4]
 8006222:	89fb      	ldrh	r3, [r7, #14]
 8006224:	4413      	add	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800622a:	4413      	add	r3, r2
 800622c:	b29b      	uxth	r3, r3
 800622e:	3301      	adds	r3, #1
 8006230:	b29b      	uxth	r3, r3
 8006232:	b21a      	sxth	r2, r3
 8006234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	4622      	mov	r2, r4
 800623c:	f000 f8a1 	bl	8006382 <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	89fb      	ldrh	r3, [r7, #14]
 8006244:	4413      	add	r3, r2
 8006246:	b29b      	uxth	r3, r3
 8006248:	b218      	sxth	r0, r3
 800624a:	88ba      	ldrh	r2, [r7, #4]
 800624c:	8a3b      	ldrh	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	b29b      	uxth	r3, r3
 8006252:	b219      	sxth	r1, r3
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	89fb      	ldrh	r3, [r7, #14]
 8006258:	4413      	add	r3, r2
 800625a:	b29b      	uxth	r3, r3
 800625c:	b21c      	sxth	r4, r3
 800625e:	88ba      	ldrh	r2, [r7, #4]
 8006260:	8a3b      	ldrh	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	b29a      	uxth	r2, r3
 8006266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006268:	4413      	add	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	3301      	adds	r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	b21a      	sxth	r2, r3
 8006272:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	4622      	mov	r2, r4
 800627a:	f000 f882 	bl	8006382 <Displ_Line>
    }
    if (cornername & 0x2) {
 800627e:	787b      	ldrb	r3, [r7, #1]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d03d      	beq.n	8006304 <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	8a3b      	ldrh	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	b218      	sxth	r0, r3
 8006292:	88ba      	ldrh	r2, [r7, #4]
 8006294:	89fb      	ldrh	r3, [r7, #14]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	b29b      	uxth	r3, r3
 800629a:	b219      	sxth	r1, r3
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	8a3b      	ldrh	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b21c      	sxth	r4, r3
 80062a6:	88ba      	ldrh	r2, [r7, #4]
 80062a8:	89fb      	ldrh	r3, [r7, #14]
 80062aa:	4413      	add	r3, r2
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062b0:	4413      	add	r3, r2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	b21a      	sxth	r2, r3
 80062ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	4613      	mov	r3, r2
 80062c0:	4622      	mov	r2, r4
 80062c2:	f000 f85e 	bl	8006382 <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b218      	sxth	r0, r3
 80062d0:	88ba      	ldrh	r2, [r7, #4]
 80062d2:	8a3b      	ldrh	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	b219      	sxth	r1, r3
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b21c      	sxth	r4, r3
 80062e4:	88ba      	ldrh	r2, [r7, #4]
 80062e6:	8a3b      	ldrh	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062ee:	4413      	add	r3, r2
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3301      	adds	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	b21a      	sxth	r2, r3
 80062f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	4622      	mov	r2, r4
 8006300:	f000 f83f 	bl	8006382 <Displ_Line>
  while (x<y) {
 8006304:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800630c:	429a      	cmp	r2, r3
 800630e:	f6ff af51 	blt.w	80061b4 <fillCircleHelper+0x44>
    }
  }
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}

0800631c <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b085      	sub	sp, #20
 8006320:	af02      	add	r7, sp, #8
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	4611      	mov	r1, r2
 8006328:	461a      	mov	r2, r3
 800632a:	4623      	mov	r3, r4
 800632c:	80fb      	strh	r3, [r7, #6]
 800632e:	4603      	mov	r3, r0
 8006330:	80bb      	strh	r3, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	807b      	strh	r3, [r7, #2]
 8006336:	4613      	mov	r3, r2
 8006338:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 800633a:	88ba      	ldrh	r2, [r7, #4]
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	b29b      	uxth	r3, r3
 8006342:	b219      	sxth	r1, r3
 8006344:	88ba      	ldrh	r2, [r7, #4]
 8006346:	887b      	ldrh	r3, [r7, #2]
 8006348:	4413      	add	r3, r2
 800634a:	b29b      	uxth	r3, r3
 800634c:	b21c      	sxth	r4, r3
 800634e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006352:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006356:	883b      	ldrh	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4623      	mov	r3, r4
 800635c:	f000 f811 	bl	8006382 <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8006360:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006364:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006368:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800636c:	883b      	ldrh	r3, [r7, #0]
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2303      	movs	r3, #3
 8006376:	f7ff fefb 	bl	8006170 <fillCircleHelper>
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}

08006382 <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8006382:	b590      	push	{r4, r7, lr}
 8006384:	b08b      	sub	sp, #44	; 0x2c
 8006386:	af02      	add	r7, sp, #8
 8006388:	4604      	mov	r4, r0
 800638a:	4608      	mov	r0, r1
 800638c:	4611      	mov	r1, r2
 800638e:	461a      	mov	r2, r3
 8006390:	4623      	mov	r3, r4
 8006392:	80fb      	strh	r3, [r7, #6]
 8006394:	4603      	mov	r3, r0
 8006396:	80bb      	strh	r3, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
 800639c:	4613      	mov	r3, r2
 800639e:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 80063a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d123      	bne.n	80063f4 <Displ_Line+0x72>
    	if (y1>y0){
 80063ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80063b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	dd0e      	ble.n	80063d6 <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 80063b8:	88f8      	ldrh	r0, [r7, #6]
 80063ba:	88b9      	ldrh	r1, [r7, #4]
 80063bc:	883a      	ldrh	r2, [r7, #0]
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3301      	adds	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	2201      	movs	r2, #1
 80063d0:	f7ff fc3a 	bl	8005c48 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 80063d4:	e103      	b.n	80065de <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 80063d6:	88f8      	ldrh	r0, [r7, #6]
 80063d8:	8839      	ldrh	r1, [r7, #0]
 80063da:	88ba      	ldrh	r2, [r7, #4]
 80063dc:	883b      	ldrh	r3, [r7, #0]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	2201      	movs	r2, #1
 80063ee:	f7ff fc2b 	bl	8005c48 <Displ_FillArea>
    	return;
 80063f2:	e0f4      	b.n	80065de <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 80063f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80063f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d121      	bne.n	8006444 <Displ_Line+0xc2>
    	if (x1>x0)
 8006400:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006408:	429a      	cmp	r2, r3
 800640a:	dd0d      	ble.n	8006428 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 800640c:	88f8      	ldrh	r0, [r7, #6]
 800640e:	88b9      	ldrh	r1, [r7, #4]
 8006410:	887a      	ldrh	r2, [r7, #2]
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	b29b      	uxth	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2301      	movs	r3, #1
 8006422:	f7ff fc11 	bl	8005c48 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8006426:	e0da      	b.n	80065de <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8006428:	8878      	ldrh	r0, [r7, #2]
 800642a:	8839      	ldrh	r1, [r7, #0]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	887b      	ldrh	r3, [r7, #2]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	3301      	adds	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	2301      	movs	r3, #1
 800643e:	f7ff fc03 	bl	8005c48 <Displ_FillArea>
    	return;
 8006442:	e0cc      	b.n	80065de <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8006444:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006448:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	dd05      	ble.n	800645c <Displ_Line+0xda>
 8006450:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006454:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	e004      	b.n	8006466 <Displ_Line+0xe4>
 800645c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006460:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800646a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800646e:	4299      	cmp	r1, r3
 8006470:	dd05      	ble.n	800647e <Displ_Line+0xfc>
 8006472:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800647a:	1acb      	subs	r3, r1, r3
 800647c:	e004      	b.n	8006488 <Displ_Line+0x106>
 800647e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8006482:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006486:	1acb      	subs	r3, r1, r3
 8006488:	429a      	cmp	r2, r3
 800648a:	bfcc      	ite	gt
 800648c:	2301      	movgt	r3, #1
 800648e:	2300      	movle	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8006494:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	827b      	strh	r3, [r7, #18]
 80064a0:	88bb      	ldrh	r3, [r7, #4]
 80064a2:	80fb      	strh	r3, [r7, #6]
 80064a4:	8a7b      	ldrh	r3, [r7, #18]
 80064a6:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 80064a8:	887b      	ldrh	r3, [r7, #2]
 80064aa:	823b      	strh	r3, [r7, #16]
 80064ac:	883b      	ldrh	r3, [r7, #0]
 80064ae:	807b      	strh	r3, [r7, #2]
 80064b0:	8a3b      	ldrh	r3, [r7, #16]
 80064b2:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 80064b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064bc:	429a      	cmp	r2, r3
 80064be:	dd0b      	ble.n	80064d8 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	81fb      	strh	r3, [r7, #14]
 80064c4:	887b      	ldrh	r3, [r7, #2]
 80064c6:	80fb      	strh	r3, [r7, #6]
 80064c8:	89fb      	ldrh	r3, [r7, #14]
 80064ca:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	81bb      	strh	r3, [r7, #12]
 80064d0:	883b      	ldrh	r3, [r7, #0]
 80064d2:	80bb      	strh	r3, [r7, #4]
 80064d4:	89bb      	ldrh	r3, [r7, #12]
 80064d6:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 80064d8:	887a      	ldrh	r2, [r7, #2]
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 80064e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80064e6:	105b      	asrs	r3, r3, #1
 80064e8:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 80064ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80064ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	da07      	bge.n	8006506 <Displ_Line+0x184>
        dy = y1-y0;
 80064f6:	883a      	ldrh	r2, [r7, #0]
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8006500:	2301      	movs	r3, #1
 8006502:	837b      	strh	r3, [r7, #26]
 8006504:	e007      	b.n	8006516 <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8006506:	88ba      	ldrh	r2, [r7, #4]
 8006508:	883b      	ldrh	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	b29b      	uxth	r3, r3
 800650e:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8006510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006514:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8006516:	2300      	movs	r3, #0
 8006518:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	83bb      	strh	r3, [r7, #28]
 800651e:	e03a      	b.n	8006596 <Displ_Line+0x214>
    	l++;
 8006520:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006524:	b29b      	uxth	r3, r3
 8006526:	3301      	adds	r3, #1
 8006528:	b29b      	uxth	r3, r3
 800652a:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 800652c:	8b3a      	ldrh	r2, [r7, #24]
 800652e:	8afb      	ldrh	r3, [r7, #22]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	b29b      	uxth	r3, r3
 8006534:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8006536:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da25      	bge.n	800658a <Displ_Line+0x208>
        	if (steep) {
 800653e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8006546:	88b8      	ldrh	r0, [r7, #4]
 8006548:	88f9      	ldrh	r1, [r7, #6]
 800654a:	8bfa      	ldrh	r2, [r7, #30]
 800654c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	2201      	movs	r2, #1
 8006554:	f7ff fb78 	bl	8005c48 <Displ_FillArea>
 8006558:	e007      	b.n	800656a <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 800655a:	88f8      	ldrh	r0, [r7, #6]
 800655c:	88b9      	ldrh	r1, [r7, #4]
 800655e:	8bfa      	ldrh	r2, [r7, #30]
 8006560:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2301      	movs	r3, #1
 8006566:	f7ff fb6f 	bl	8005c48 <Displ_FillArea>
            }
            y0 += ystep;
 800656a:	88ba      	ldrh	r2, [r7, #4]
 800656c:	8b7b      	ldrh	r3, [r7, #26]
 800656e:	4413      	add	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	80bb      	strh	r3, [r7, #4]
            l=0;
 8006574:	2300      	movs	r3, #0
 8006576:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8006578:	8bbb      	ldrh	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8006580:	8b3a      	ldrh	r2, [r7, #24]
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	4413      	add	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 800658a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800658e:	b29b      	uxth	r3, r3
 8006590:	3301      	adds	r3, #1
 8006592:	b29b      	uxth	r3, r3
 8006594:	83bb      	strh	r3, [r7, #28]
 8006596:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800659a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800659e:	429a      	cmp	r2, r3
 80065a0:	ddbe      	ble.n	8006520 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 80065a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d019      	beq.n	80065de <Displ_Line+0x25c>
    	if (steep) {
 80065aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 80065b2:	88b8      	ldrh	r0, [r7, #4]
 80065b4:	88f9      	ldrh	r1, [r7, #6]
 80065b6:	8bfb      	ldrh	r3, [r7, #30]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	2201      	movs	r2, #1
 80065c4:	f7ff fb40 	bl	8005c48 <Displ_FillArea>
 80065c8:	e009      	b.n	80065de <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 80065ca:	88f8      	ldrh	r0, [r7, #6]
 80065cc:	88b9      	ldrh	r1, [r7, #4]
 80065ce:	8bfb      	ldrh	r3, [r7, #30]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	2301      	movs	r3, #1
 80065da:	f7ff fb35 	bl	8005c48 <Displ_FillArea>
    	}
    }
}
 80065de:	3724      	adds	r7, #36	; 0x24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd90      	pop	{r4, r7, pc}

080065e4 <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	80fb      	strh	r3, [r7, #6]
 80065f6:	4603      	mov	r3, r0
 80065f8:	80bb      	strh	r3, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	807b      	strh	r3, [r7, #2]
 80065fe:	4613      	mov	r3, r2
 8006600:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8006602:	88f8      	ldrh	r0, [r7, #6]
 8006604:	88b9      	ldrh	r1, [r7, #4]
 8006606:	887a      	ldrh	r2, [r7, #2]
 8006608:	8b3c      	ldrh	r4, [r7, #24]
 800660a:	8bbb      	ldrh	r3, [r7, #28]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4623      	mov	r3, r4
 8006610:	f7ff fb1a 	bl	8005c48 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8006614:	88f8      	ldrh	r0, [r7, #6]
 8006616:	88ba      	ldrh	r2, [r7, #4]
 8006618:	883b      	ldrh	r3, [r7, #0]
 800661a:	4413      	add	r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	8b3b      	ldrh	r3, [r7, #24]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	b299      	uxth	r1, r3
 8006624:	887a      	ldrh	r2, [r7, #2]
 8006626:	8b3c      	ldrh	r4, [r7, #24]
 8006628:	8bbb      	ldrh	r3, [r7, #28]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4623      	mov	r3, r4
 800662e:	f7ff fb0b 	bl	8005c48 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8006632:	88f8      	ldrh	r0, [r7, #6]
 8006634:	88b9      	ldrh	r1, [r7, #4]
 8006636:	8b3a      	ldrh	r2, [r7, #24]
 8006638:	883c      	ldrh	r4, [r7, #0]
 800663a:	8bbb      	ldrh	r3, [r7, #28]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4623      	mov	r3, r4
 8006640:	f7ff fb02 	bl	8005c48 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8006644:	88fa      	ldrh	r2, [r7, #6]
 8006646:	887b      	ldrh	r3, [r7, #2]
 8006648:	4413      	add	r3, r2
 800664a:	b29a      	uxth	r2, r3
 800664c:	8b3b      	ldrh	r3, [r7, #24]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	b298      	uxth	r0, r3
 8006652:	88b9      	ldrh	r1, [r7, #4]
 8006654:	8b3a      	ldrh	r2, [r7, #24]
 8006656:	883c      	ldrh	r4, [r7, #0]
 8006658:	8bbb      	ldrh	r3, [r7, #28]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	4623      	mov	r3, r4
 800665e:	f7ff faf3 	bl	8005c48 <Displ_FillArea>
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}

0800666a <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800666a:	b590      	push	{r4, r7, lr}
 800666c:	b085      	sub	sp, #20
 800666e:	af02      	add	r7, sp, #8
 8006670:	4604      	mov	r4, r0
 8006672:	4608      	mov	r0, r1
 8006674:	4611      	mov	r1, r2
 8006676:	461a      	mov	r2, r3
 8006678:	4623      	mov	r3, r4
 800667a:	80fb      	strh	r3, [r7, #6]
 800667c:	4603      	mov	r3, r0
 800667e:	80bb      	strh	r3, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
 8006684:	4613      	mov	r3, r2
 8006686:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8006688:	f9b7 4000 	ldrsh.w	r4, [r7]
 800668c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006690:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006694:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006698:	8c3b      	ldrh	r3, [r7, #32]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4623      	mov	r3, r4
 800669e:	f7ff fe70 	bl	8006382 <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 80066a2:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80066a6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80066aa:	f9b7 1000 	ldrsh.w	r1, [r7]
 80066ae:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80066b2:	8c3b      	ldrh	r3, [r7, #32]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4623      	mov	r3, r4
 80066b8:	f7ff fe63 	bl	8006382 <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 80066bc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80066c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066c4:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80066c8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80066cc:	8c3b      	ldrh	r3, [r7, #32]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7ff fe56 	bl	8006382 <Displ_Line>
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd90      	pop	{r4, r7, pc}

080066de <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80066de:	b590      	push	{r4, r7, lr}
 80066e0:	b091      	sub	sp, #68	; 0x44
 80066e2:	af02      	add	r7, sp, #8
 80066e4:	4604      	mov	r4, r0
 80066e6:	4608      	mov	r0, r1
 80066e8:	4611      	mov	r1, r2
 80066ea:	461a      	mov	r2, r3
 80066ec:	4623      	mov	r3, r4
 80066ee:	80fb      	strh	r3, [r7, #6]
 80066f0:	4603      	mov	r3, r0
 80066f2:	80bb      	strh	r3, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
 80066f8:	4613      	mov	r3, r2
 80066fa:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80066fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006700:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006704:	429a      	cmp	r2, r3
 8006706:	dd0b      	ble.n	8006720 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006708:	88bb      	ldrh	r3, [r7, #4]
 800670a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800670c:	883b      	ldrh	r3, [r7, #0]
 800670e:	80bb      	strh	r3, [r7, #4]
 8006710:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006712:	803b      	strh	r3, [r7, #0]
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006718:	887b      	ldrh	r3, [r7, #2]
 800671a:	80fb      	strh	r3, [r7, #6]
 800671c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671e:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8006720:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006724:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006728:	429a      	cmp	r2, r3
 800672a:	dd0f      	ble.n	800674c <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 800672c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006730:	847b      	strh	r3, [r7, #34]	; 0x22
 8006732:	883b      	ldrh	r3, [r7, #0]
 8006734:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800673a:	803b      	strh	r3, [r7, #0]
 800673c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006740:	843b      	strh	r3, [r7, #32]
 8006742:	887b      	ldrh	r3, [r7, #2]
 8006744:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006748:	8c3b      	ldrh	r3, [r7, #32]
 800674a:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 800674c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006750:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006754:	429a      	cmp	r2, r3
 8006756:	dd0b      	ble.n	8006770 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8006758:	88bb      	ldrh	r3, [r7, #4]
 800675a:	83fb      	strh	r3, [r7, #30]
 800675c:	883b      	ldrh	r3, [r7, #0]
 800675e:	80bb      	strh	r3, [r7, #4]
 8006760:	8bfb      	ldrh	r3, [r7, #30]
 8006762:	803b      	strh	r3, [r7, #0]
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	83bb      	strh	r3, [r7, #28]
 8006768:	887b      	ldrh	r3, [r7, #2]
 800676a:	80fb      	strh	r3, [r7, #6]
 800676c:	8bbb      	ldrh	r3, [r7, #28]
 800676e:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8006770:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006774:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006778:	429a      	cmp	r2, r3
 800677a:	d136      	bne.n	80067ea <Displ_fillTriangle+0x10c>
        a = b = x0;
 800677c:	88fb      	ldrh	r3, [r7, #6]
 800677e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006780:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006782:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8006784:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006788:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800678c:	429a      	cmp	r2, r3
 800678e:	da02      	bge.n	8006796 <Displ_fillTriangle+0xb8>
 8006790:	887b      	ldrh	r3, [r7, #2]
 8006792:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006794:	e007      	b.n	80067a6 <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8006796:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800679a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800679e:	429a      	cmp	r2, r3
 80067a0:	dd01      	ble.n	80067a6 <Displ_fillTriangle+0xc8>
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80067a6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80067aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80067ae:	429a      	cmp	r2, r3
 80067b0:	da03      	bge.n	80067ba <Displ_fillTriangle+0xdc>
 80067b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067b6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067b8:	e008      	b.n	80067cc <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 80067ba:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80067be:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80067c2:	429a      	cmp	r2, r3
 80067c4:	dd02      	ble.n	80067cc <Displ_fillTriangle+0xee>
 80067c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80067ca:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 80067cc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80067d0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80067d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067d8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80067dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4623      	mov	r3, r4
 80067e4:	f7ff fdcd 	bl	8006382 <Displ_Line>
        return;
 80067e8:	e0d2      	b.n	8006990 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 80067ea:	887a      	ldrh	r2, [r7, #2]
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80067f4:	883a      	ldrh	r2, [r7, #0]
 80067f6:	88bb      	ldrh	r3, [r7, #4]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80067fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800680a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800680e:	88bb      	ldrh	r3, [r7, #4]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	b29b      	uxth	r3, r3
 8006814:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8006816:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800681a:	887b      	ldrh	r3, [r7, #2]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	b29b      	uxth	r3, r3
 8006820:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8006822:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006826:	883b      	ldrh	r3, [r7, #0]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	b29b      	uxth	r3, r3
 800682c:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800682e:	2300      	movs	r3, #0
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8006836:	f9b7 2000 	ldrsh.w	r2, [r7]
 800683a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800683e:	429a      	cmp	r2, r3
 8006840:	d102      	bne.n	8006848 <Displ_fillTriangle+0x16a>
 8006842:	883b      	ldrh	r3, [r7, #0]
 8006844:	863b      	strh	r3, [r7, #48]	; 0x30
 8006846:	e003      	b.n	8006850 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8006848:	883b      	ldrh	r3, [r7, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	b29b      	uxth	r3, r3
 800684e:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8006850:	88bb      	ldrh	r3, [r7, #4]
 8006852:	867b      	strh	r3, [r7, #50]	; 0x32
 8006854:	e03d      	b.n	80068d2 <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 8006856:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800685a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800685c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006860:	b29a      	uxth	r2, r3
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	4413      	add	r3, r2
 8006866:	b29b      	uxth	r3, r3
 8006868:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800686a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	fb92 f3f3 	sdiv	r3, r2, r3
 8006874:	b29a      	uxth	r2, r3
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	4413      	add	r3, r2
 800687a:	b29b      	uxth	r3, r3
 800687c:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 800687e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006884:	4413      	add	r3, r2
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800688c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800688e:	4413      	add	r3, r2
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006892:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006896:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800689a:	429a      	cmp	r2, r3
 800689c:	dd05      	ble.n	80068aa <Displ_fillTriangle+0x1cc>
 800689e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068a0:	81bb      	strh	r3, [r7, #12]
 80068a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068a6:	89bb      	ldrh	r3, [r7, #12]
 80068a8:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80068aa:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80068ae:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80068b2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80068b6:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80068ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4623      	mov	r3, r4
 80068c2:	f7ff fd5e 	bl	8006382 <Displ_Line>
    for(y=y0; y<=last; y++) {
 80068c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3301      	adds	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80068d2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80068d6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80068da:	429a      	cmp	r2, r3
 80068dc:	ddbb      	ble.n	8006856 <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80068de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068e2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80068e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80068ea:	1a8a      	subs	r2, r1, r2
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80068f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80068f6:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80068fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80068fe:	1a8a      	subs	r2, r1, r2
 8006900:	fb02 f303 	mul.w	r3, r2, r3
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8006906:	e03d      	b.n	8006984 <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8006908:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800690c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006912:	b29a      	uxth	r2, r3
 8006914:	887b      	ldrh	r3, [r7, #2]
 8006916:	4413      	add	r3, r2
 8006918:	b29b      	uxth	r3, r3
 800691a:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 800691c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006922:	fb92 f3f3 	sdiv	r3, r2, r3
 8006926:	b29a      	uxth	r2, r3
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	4413      	add	r3, r2
 800692c:	b29b      	uxth	r3, r3
 800692e:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006936:	4413      	add	r3, r2
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 800693a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800693e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006940:	4413      	add	r3, r2
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8006944:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006948:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800694c:	429a      	cmp	r2, r3
 800694e:	dd05      	ble.n	800695c <Displ_fillTriangle+0x27e>
 8006950:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006952:	81fb      	strh	r3, [r7, #14]
 8006954:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006956:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 800695c:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006960:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8006964:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006968:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 800696c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4623      	mov	r3, r4
 8006974:	f7ff fd05 	bl	8006382 <Displ_Line>
    for(; y<=y2; y++) {
 8006978:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800697c:	b29b      	uxth	r3, r3
 800697e:	3301      	adds	r3, #1
 8006980:	b29b      	uxth	r3, r3
 8006982:	867b      	strh	r3, [r7, #50]	; 0x32
 8006984:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006988:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800698c:	429a      	cmp	r2, r3
 800698e:	ddbb      	ble.n	8006908 <Displ_fillTriangle+0x22a>
    }
}
 8006990:	373c      	adds	r7, #60	; 0x3c
 8006992:	46bd      	mov	sp, r7
 8006994:	bd90      	pop	{r4, r7, pc}
	...

08006998 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8006998:	b082      	sub	sp, #8
 800699a:	b590      	push	{r4, r7, lr}
 800699c:	b08f      	sub	sp, #60	; 0x3c
 800699e:	af02      	add	r7, sp, #8
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	4603      	mov	r3, r0
 80069a4:	80fb      	strh	r3, [r7, #6]
 80069a6:	460b      	mov	r3, r1
 80069a8:	80bb      	strh	r3, [r7, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80069ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069b2:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80069b4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d102      	bne.n	80069c2 <Displ_WChar+0x2a>
		wsize<<= 1;
 80069bc:	7efb      	ldrb	r3, [r7, #27]
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80069c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069ca:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80069d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	3b20      	subs	r3, #32
 80069da:	4619      	mov	r1, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80069e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d005      	beq.n	80069fa <Displ_WChar+0x62>
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d107      	bne.n	8006a02 <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 80069f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80069f6:	61fb      	str	r3, [r7, #28]
			break;
 80069f8:	e005      	b.n	8006a06 <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	61fb      	str	r3, [r7, #28]
			break;
 8006a00:	e001      	b.n	8006a06 <Displ_WChar+0x6e>
		default:
			mask=0x80;
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 8006a06:	4b68      	ldr	r3, [pc, #416]	; (8006ba8 <Displ_WChar+0x210>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006a0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	b21b      	sxth	r3, r3
 8006a22:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006a24:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	b21b      	sxth	r3, r3
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b21b      	sxth	r3, r3
 8006a3a:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a40:	e06f      	b.n	8006b22 <Displ_WChar+0x18a>
		b=0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 8006a46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d015      	beq.n	8006a7a <Displ_WChar+0xe2>
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d120      	bne.n	8006a94 <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	041a      	lsls	r2, r3, #16
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	3301      	adds	r3, #1
 8006a60:	6939      	ldr	r1, [r7, #16]
 8006a62:	440b      	add	r3, r1
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a6c:	3202      	adds	r2, #2
 8006a6e:	6939      	ldr	r1, [r7, #16]
 8006a70:	440a      	add	r2, r1
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006a78:	e011      	b.n	8006a9e <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a86:	3201      	adds	r2, #1
 8006a88:	6939      	ldr	r1, [r7, #16]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	7812      	ldrb	r2, [r2, #0]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006a92:	e004      	b.n	8006a9e <Displ_WChar+0x106>
			default:
				b=pos[i];
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	4413      	add	r3, r2
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e032      	b.n	8006b0a <Displ_WChar+0x172>
			if((b << j) & mask)  {
 8006aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d014      	beq.n	8006adc <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	623a      	str	r2, [r7, #32]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4413      	add	r3, r2
 8006abe:	897a      	ldrh	r2, [r7, #10]
 8006ac0:	801a      	strh	r2, [r3, #0]
				if (size==2){
 8006ac2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d11c      	bne.n	8006b04 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	623a      	str	r2, [r7, #32]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	897a      	ldrh	r2, [r7, #10]
 8006ad8:	801a      	strh	r2, [r3, #0]
 8006ada:	e013      	b.n	8006b04 <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	623a      	str	r2, [r7, #32]
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	893a      	ldrh	r2, [r7, #8]
 8006aea:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 8006aec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d107      	bne.n	8006b04 <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	623a      	str	r2, [r7, #32]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	893a      	ldrh	r2, [r7, #8]
 8006b02:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3301      	adds	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d3c6      	bcc.n	8006aa4 <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 8006b16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	4413      	add	r3, r2
 8006b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d38b      	bcc.n	8006a42 <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006b30:	7efb      	ldrb	r3, [r7, #27]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	4413      	add	r3, r2
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29c      	uxth	r4, r3
 8006b3e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006b42:	88bb      	ldrh	r3, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	88b9      	ldrh	r1, [r7, #4]
 8006b4e:	88f8      	ldrh	r0, [r7, #6]
 8006b50:	4622      	mov	r2, r4
 8006b52:	f7fe ff8d 	bl	8005a70 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b5c:	d90b      	bls.n	8006b76 <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8006b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	f240 33ad 	movw	r3, #941	; 0x3ad
 8006b6c:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <Displ_WChar+0x214>)
 8006b6e:	4910      	ldr	r1, [pc, #64]	; (8006bb0 <Displ_WChar+0x218>)
 8006b70:	4810      	ldr	r0, [pc, #64]	; (8006bb4 <Displ_WChar+0x21c>)
 8006b72:	f7fe f805 	bl	8004b80 <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 8006b76:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <Displ_WChar+0x210>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6a39      	ldr	r1, [r7, #32]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe ff1f 	bl	80059c2 <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <Displ_WChar+0x210>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <Displ_WChar+0x220>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <Displ_WChar+0x1fa>
 8006b8e:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <Displ_WChar+0x224>)
 8006b90:	e000      	b.n	8006b94 <Displ_WChar+0x1fc>
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <Displ_WChar+0x220>)
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <Displ_WChar+0x210>)
 8006b96:	6013      	str	r3, [r2, #0]

}
 8006b98:	bf00      	nop
 8006b9a:	3734      	adds	r7, #52	; 0x34
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006ba2:	b002      	add	sp, #8
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000040 	.word	0x20000040
 8006bac:	08015adc 	.word	0x08015adc
 8006bb0:	08011928 	.word	0x08011928
 8006bb4:	08011948 	.word	0x08011948
 8006bb8:	20008d84 	.word	0x20008d84
 8006bbc:	20009584 	.word	0x20009584

08006bc0 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4623      	mov	r3, r4
 8006bd0:	80fb      	strh	r3, [r7, #6]
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	80bb      	strh	r3, [r7, #4]
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	807b      	strh	r3, [r7, #2]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006bde:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006be2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfa8      	it	ge
 8006bea:	4613      	movge	r3, r2
 8006bec:	b21b      	sxth	r3, r3
 8006bee:	0fda      	lsrs	r2, r3, #31
 8006bf0:	4413      	add	r3, r2
 8006bf2:	105b      	asrs	r3, r3, #1
 8006bf4:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006bf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	dd01      	ble.n	8006c06 <Displ_drawRoundRect+0x46>
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	8c3b      	ldrh	r3, [r7, #32]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b218      	sxth	r0, r3
 8006c10:	88fa      	ldrh	r2, [r7, #6]
 8006c12:	887b      	ldrh	r3, [r7, #2]
 8006c14:	4413      	add	r3, r2
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	8c3b      	ldrh	r3, [r7, #32]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	b21a      	sxth	r2, r3
 8006c24:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006c28:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4623      	mov	r3, r4
 8006c32:	f7ff fba6 	bl	8006382 <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	8c3b      	ldrh	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	b218      	sxth	r0, r3
 8006c40:	88ba      	ldrh	r2, [r7, #4]
 8006c42:	883b      	ldrh	r3, [r7, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	b219      	sxth	r1, r3
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	887b      	ldrh	r3, [r7, #2]
 8006c52:	4413      	add	r3, r2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	8c3b      	ldrh	r3, [r7, #32]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	b21c      	sxth	r4, r3
 8006c62:	88ba      	ldrh	r2, [r7, #4]
 8006c64:	883b      	ldrh	r3, [r7, #0]
 8006c66:	4413      	add	r3, r2
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	b21a      	sxth	r2, r3
 8006c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	4622      	mov	r2, r4
 8006c78:	f7ff fb83 	bl	8006382 <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8006c7c:	88ba      	ldrh	r2, [r7, #4]
 8006c7e:	8c3b      	ldrh	r3, [r7, #32]
 8006c80:	4413      	add	r3, r2
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b219      	sxth	r1, r3
 8006c86:	88ba      	ldrh	r2, [r7, #4]
 8006c88:	883b      	ldrh	r3, [r7, #0]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	8c3b      	ldrh	r3, [r7, #32]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b21c      	sxth	r4, r3
 8006c9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c9e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	f7ff fb6b 	bl	8006382 <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	887b      	ldrh	r3, [r7, #2]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	b218      	sxth	r0, r3
 8006cba:	88ba      	ldrh	r2, [r7, #4]
 8006cbc:	8c3b      	ldrh	r3, [r7, #32]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b219      	sxth	r1, r3
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	887b      	ldrh	r3, [r7, #2]
 8006cc8:	4413      	add	r3, r2
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	b21c      	sxth	r4, r3
 8006cd2:	88ba      	ldrh	r2, [r7, #4]
 8006cd4:	883b      	ldrh	r3, [r7, #0]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	8c3b      	ldrh	r3, [r7, #32]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	b21a      	sxth	r2, r3
 8006ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	4622      	mov	r2, r4
 8006cee:	f7ff fb48 	bl	8006382 <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	8c3b      	ldrh	r3, [r7, #32]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	b218      	sxth	r0, r3
 8006cfc:	88ba      	ldrh	r2, [r7, #4]
 8006cfe:	8c3b      	ldrh	r3, [r7, #32]
 8006d00:	4413      	add	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	b219      	sxth	r1, r3
 8006d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	f7ff f96a 	bl	8005fe8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	887b      	ldrh	r3, [r7, #2]
 8006d18:	4413      	add	r3, r2
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	8c3b      	ldrh	r3, [r7, #32]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	b218      	sxth	r0, r3
 8006d28:	88ba      	ldrh	r2, [r7, #4]
 8006d2a:	8c3b      	ldrh	r3, [r7, #32]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	b219      	sxth	r1, r3
 8006d32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	f7ff f954 	bl	8005fe8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	887b      	ldrh	r3, [r7, #2]
 8006d44:	4413      	add	r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	8c3b      	ldrh	r3, [r7, #32]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	b218      	sxth	r0, r3
 8006d54:	88ba      	ldrh	r2, [r7, #4]
 8006d56:	883b      	ldrh	r3, [r7, #0]
 8006d58:	4413      	add	r3, r2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	8c3b      	ldrh	r3, [r7, #32]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	b219      	sxth	r1, r3
 8006d68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	2304      	movs	r3, #4
 8006d72:	f7ff f939 	bl	8005fe8 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	8c3b      	ldrh	r3, [r7, #32]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	b218      	sxth	r0, r3
 8006d80:	88ba      	ldrh	r2, [r7, #4]
 8006d82:	883b      	ldrh	r3, [r7, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	8c3b      	ldrh	r3, [r7, #32]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	b219      	sxth	r1, r3
 8006d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	f7ff f923 	bl	8005fe8 <drawCircleHelper>
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd90      	pop	{r4, r7, pc}

08006daa <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8006daa:	b590      	push	{r4, r7, lr}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af02      	add	r7, sp, #8
 8006db0:	4604      	mov	r4, r0
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	461a      	mov	r2, r3
 8006db8:	4623      	mov	r3, r4
 8006dba:	80fb      	strh	r3, [r7, #6]
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	80bb      	strh	r3, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	807b      	strh	r3, [r7, #2]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8006dc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006dcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	bfa8      	it	ge
 8006dd4:	4613      	movge	r3, r2
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	0fda      	lsrs	r2, r3, #31
 8006dda:	4413      	add	r3, r2
 8006ddc:	105b      	asrs	r3, r3, #1
 8006dde:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 8006de0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	dd01      	ble.n	8006df0 <Displ_fillRoundRect+0x46>
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	8c3b      	ldrh	r3, [r7, #32]
 8006df4:	4413      	add	r3, r2
 8006df6:	b298      	uxth	r0, r3
 8006df8:	88b9      	ldrh	r1, [r7, #4]
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	8c3b      	ldrh	r3, [r7, #32]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	883c      	ldrh	r4, [r7, #0]
 8006e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	f7fe ff1b 	bl	8005c48 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	887b      	ldrh	r3, [r7, #2]
 8006e16:	4413      	add	r3, r2
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	8c3b      	ldrh	r3, [r7, #32]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	b218      	sxth	r0, r3
 8006e26:	88ba      	ldrh	r2, [r7, #4]
 8006e28:	8c3b      	ldrh	r3, [r7, #32]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	b219      	sxth	r1, r3
 8006e30:	883a      	ldrh	r2, [r7, #0]
 8006e32:	8c3b      	ldrh	r3, [r7, #32]
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	b21b      	sxth	r3, r3
 8006e42:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006e46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4622      	mov	r2, r4
 8006e50:	f7ff f98e 	bl	8006170 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	8c3b      	ldrh	r3, [r7, #32]
 8006e58:	4413      	add	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	b218      	sxth	r0, r3
 8006e5e:	88ba      	ldrh	r2, [r7, #4]
 8006e60:	8c3b      	ldrh	r3, [r7, #32]
 8006e62:	4413      	add	r3, r2
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	b219      	sxth	r1, r3
 8006e68:	883a      	ldrh	r2, [r7, #0]
 8006e6a:	8c3b      	ldrh	r3, [r7, #32]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	b21b      	sxth	r3, r3
 8006e7a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e80:	9201      	str	r2, [sp, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2302      	movs	r3, #2
 8006e86:	4622      	mov	r2, r4
 8006e88:	f7ff f972 	bl	8006170 <fillCircleHelper>
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd90      	pop	{r4, r7, pc}

08006e94 <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8006e94:	b082      	sub	sp, #8
 8006e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e98:	b08b      	sub	sp, #44	; 0x2c
 8006e9a:	af06      	add	r7, sp, #24
 8006e9c:	603a      	str	r2, [r7, #0]
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	80fb      	strh	r3, [r7, #6]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 8006ea8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006eaa:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 8006eac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d922      	bls.n	8006efa <Displ_WString+0x66>
		delta<<=1;
 8006eb4:	89fb      	ldrh	r3, [r7, #14]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 8006eba:	e01e      	b.n	8006efa <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	88bd      	ldrh	r5, [r7, #4]
 8006ec2:	88fc      	ldrh	r4, [r7, #6]
 8006ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8006ed2:	9302      	str	r3, [sp, #8]
 8006ed4:	466e      	mov	r6, sp
 8006ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006ede:	e886 0003 	stmia.w	r6, {r0, r1}
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff fd56 	bl	8006998 <Displ_WChar>
        x += delta;
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	89fb      	ldrh	r3, [r7, #14]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	80fb      	strh	r3, [r7, #6]
        str++;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	603b      	str	r3, [r7, #0]
    while(*str) {
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1dc      	bne.n	8006ebc <Displ_WString+0x28>
    }
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006f0e:	b002      	add	sp, #8
 8006f10:	4770      	bx	lr
	...

08006f14 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b51      	cmp	r3, #81	; 0x51
 8006f22:	d00a      	beq.n	8006f3a <Displ_BackLight+0x26>
 8006f24:	2b51      	cmp	r3, #81	; 0x51
 8006f26:	dc16      	bgt.n	8006f56 <Displ_BackLight+0x42>
 8006f28:	2b46      	cmp	r3, #70	; 0x46
 8006f2a:	d008      	beq.n	8006f3e <Displ_BackLight+0x2a>
 8006f2c:	2b46      	cmp	r3, #70	; 0x46
 8006f2e:	dc12      	bgt.n	8006f56 <Displ_BackLight+0x42>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d00a      	beq.n	8006f4a <Displ_BackLight+0x36>
 8006f34:	2b31      	cmp	r3, #49	; 0x31
 8006f36:	d002      	beq.n	8006f3e <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006f38:	e00d      	b.n	8006f56 <Displ_BackLight+0x42>
		__NOP();
 8006f3a:	bf00      	nop
		break;
 8006f3c:	e00c      	b.n	8006f58 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8006f3e:	2201      	movs	r2, #1
 8006f40:	2140      	movs	r1, #64	; 0x40
 8006f42:	480a      	ldr	r0, [pc, #40]	; (8006f6c <Displ_BackLight+0x58>)
 8006f44:	f002 f86c 	bl	8009020 <HAL_GPIO_WritePin>
		break;
 8006f48:	e006      	b.n	8006f58 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	4807      	ldr	r0, [pc, #28]	; (8006f6c <Displ_BackLight+0x58>)
 8006f50:	f002 f866 	bl	8009020 <HAL_GPIO_WritePin>
		break;
 8006f54:	e000      	b.n	8006f58 <Displ_BackLight+0x44>
		break;
 8006f56:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8006f58:	2140      	movs	r1, #64	; 0x40
 8006f5a:	4804      	ldr	r0, [pc, #16]	; (8006f6c <Displ_BackLight+0x58>)
 8006f5c:	f002 f848 	bl	8008ff0 <HAL_GPIO_ReadPin>
 8006f60:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40020000 	.word	0x40020000

08006f70 <testLines>:




void testLines(uint16_t color)
{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b08b      	sub	sp, #44	; 0x2c
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	4603      	mov	r3, r0
 8006f78:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8006f7a:	4b7c      	ldr	r3, [pc, #496]	; (800716c <testLines+0x1fc>)
 8006f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f80:	617b      	str	r3, [r7, #20]
                  h = _height;
 8006f82:	4b7b      	ldr	r3, [pc, #492]	; (8007170 <testLines+0x200>)
 8006f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f88:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	f7ff f810 	bl	8005fb0 <Displ_CLS>

    x1 = y1 = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	e00f      	b.n	8006fc4 <testLines+0x54>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	b218      	sxth	r0, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	b219      	sxth	r1, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	b21a      	sxth	r2, r3
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	b21c      	sxth	r4, r3
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4623      	mov	r3, r4
 8006fba:	f7ff f9e2 	bl	8006382 <Displ_Line>
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3306      	adds	r3, #6
 8006fc2:	61fb      	str	r3, [r7, #28]
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	dbeb      	blt.n	8006fa4 <testLines+0x34>
    x2    = w - 1;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e00f      	b.n	8006ff8 <testLines+0x88>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	b218      	sxth	r0, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	b219      	sxth	r1, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	b21a      	sxth	r2, r3
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	b21c      	sxth	r4, r3
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4623      	mov	r3, r4
 8006fee:	f7ff f9c8 	bl	8006382 <Displ_Line>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	3306      	adds	r3, #6
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	dbeb      	blt.n	8006fd8 <testLines+0x68>

    Displ_CLS(BLACK);
 8007000:	2000      	movs	r0, #0
 8007002:	f7fe ffd5 	bl	8005fb0 <Displ_CLS>

    x1    = w - 1;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3b01      	subs	r3, #1
 800700a:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	3b01      	subs	r3, #1
 8007014:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	e00f      	b.n	800703c <testLines+0xcc>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	b218      	sxth	r0, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	b219      	sxth	r1, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	b21a      	sxth	r2, r3
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	b21c      	sxth	r4, r3
 800702c:	88fb      	ldrh	r3, [r7, #6]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4623      	mov	r3, r4
 8007032:	f7ff f9a6 	bl	8006382 <Displ_Line>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3306      	adds	r3, #6
 800703a:	61fb      	str	r3, [r7, #28]
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	429a      	cmp	r2, r3
 8007042:	dbeb      	blt.n	800701c <testLines+0xac>
    x2    = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007048:	2300      	movs	r3, #0
 800704a:	61bb      	str	r3, [r7, #24]
 800704c:	e00f      	b.n	800706e <testLines+0xfe>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	b218      	sxth	r0, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	b219      	sxth	r1, r3
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	b21a      	sxth	r2, r3
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	b21c      	sxth	r4, r3
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	4623      	mov	r3, r4
 8007064:	f7ff f98d 	bl	8006382 <Displ_Line>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	3306      	adds	r3, #6
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	429a      	cmp	r2, r3
 8007074:	dbeb      	blt.n	800704e <testLines+0xde>

    Displ_CLS(BLACK);
 8007076:	2000      	movs	r0, #0
 8007078:	f7fe ff9a 	bl	8005fb0 <Displ_CLS>

    x1    = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3b01      	subs	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e00f      	b.n	80070b0 <testLines+0x140>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	b218      	sxth	r0, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	b219      	sxth	r1, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	b21a      	sxth	r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b21c      	sxth	r4, r3
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4623      	mov	r3, r4
 80070a6:	f7ff f96c 	bl	8006382 <Displ_Line>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3306      	adds	r3, #6
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	dbeb      	blt.n	8007090 <testLines+0x120>
    x2    = w - 1;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80070be:	2300      	movs	r3, #0
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e00f      	b.n	80070e4 <testLines+0x174>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	b218      	sxth	r0, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	b219      	sxth	r1, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	b21a      	sxth	r2, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	b21c      	sxth	r4, r3
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	4623      	mov	r3, r4
 80070da:	f7ff f952 	bl	8006382 <Displ_Line>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	3306      	adds	r3, #6
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	dbeb      	blt.n	80070c4 <testLines+0x154>

    Displ_CLS(BLACK);
 80070ec:	2000      	movs	r0, #0
 80070ee:	f7fe ff5f 	bl	8005fb0 <Displ_CLS>

    x1    = w - 1;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e00f      	b.n	8007128 <testLines+0x1b8>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	b218      	sxth	r0, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	b219      	sxth	r1, r3
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	b21a      	sxth	r2, r3
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	b21c      	sxth	r4, r3
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4623      	mov	r3, r4
 800711e:	f7ff f930 	bl	8006382 <Displ_Line>
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3306      	adds	r3, #6
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	429a      	cmp	r2, r3
 800712e:	dbeb      	blt.n	8007108 <testLines+0x198>
    x2    = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e00f      	b.n	800715a <testLines+0x1ea>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	b218      	sxth	r0, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	b219      	sxth	r1, r3
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	b21a      	sxth	r2, r3
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	b21c      	sxth	r4, r3
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4623      	mov	r3, r4
 8007150:	f7ff f917 	bl	8006382 <Displ_Line>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	3306      	adds	r3, #6
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	dbeb      	blt.n	800713a <testLines+0x1ca>

}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	3724      	adds	r7, #36	; 0x24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd90      	pop	{r4, r7, pc}
 800716c:	20008d80 	.word	0x20008d80
 8007170:	20008d82 	.word	0x20008d82

08007174 <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af02      	add	r7, sp, #8
 800717a:	4603      	mov	r3, r0
 800717c:	460a      	mov	r2, r1
 800717e:	80fb      	strh	r3, [r7, #6]
 8007180:	4613      	mov	r3, r2
 8007182:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <testFastLines+0x94>)
 8007186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <testFastLines+0x98>)
 800718e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007192:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8007194:	2000      	movs	r0, #0
 8007196:	f7fe ff0b 	bl	8005fb0 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	e011      	b.n	80071c4 <testFastLines+0x50>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	b219      	sxth	r1, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b21a      	sxth	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	b218      	sxth	r0, r3
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4603      	mov	r3, r0
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7ff f8e2 	bl	8006382 <Displ_Line>
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3305      	adds	r3, #5
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	dbe9      	blt.n	80071a0 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e011      	b.n	80071f6 <testFastLines+0x82>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	b218      	sxth	r0, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	b21a      	sxth	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b219      	sxth	r1, r3
 80071e4:	88bb      	ldrh	r3, [r7, #4]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	460b      	mov	r3, r1
 80071ea:	2100      	movs	r1, #0
 80071ec:	f7ff f8c9 	bl	8006382 <Displ_Line>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3305      	adds	r3, #5
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	dbe9      	blt.n	80071d2 <testFastLines+0x5e>
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20008d80 	.word	0x20008d80
 800720c:	20008d82 	.word	0x20008d82

08007210 <testRects>:




void testRects(uint16_t color)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b08b      	sub	sp, #44	; 0x2c
 8007214:	af02      	add	r7, sp, #8
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 800721a:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <testRects+0xa0>)
 800721c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007220:	0fda      	lsrs	r2, r3, #31
 8007222:	4413      	add	r3, r2
 8007224:	105b      	asrs	r3, r3, #1
 8007226:	b21b      	sxth	r3, r3
 8007228:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 800722a:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <testRects+0xa4>)
 800722c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007230:	0fda      	lsrs	r2, r3, #31
 8007232:	4413      	add	r3, r2
 8007234:	105b      	asrs	r3, r3, #1
 8007236:	b21b      	sxth	r3, r3
 8007238:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 800723a:	2000      	movs	r0, #0
 800723c:	f7fe feb8 	bl	8005fb0 <Displ_CLS>
	n     = min(_width, _height);
 8007240:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <testRects+0xa4>)
 8007242:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <testRects+0xa0>)
 8007248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800724c:	4293      	cmp	r3, r2
 800724e:	bfa8      	it	ge
 8007250:	4613      	movge	r3, r2
 8007252:	b21b      	sxth	r3, r3
 8007254:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8007256:	2302      	movs	r3, #2
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	e020      	b.n	800729e <testRects+0x8e>
		i2 = i / 2;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	0fda      	lsrs	r2, r3, #31
 8007260:	4413      	add	r3, r2
 8007262:	105b      	asrs	r3, r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	b29b      	uxth	r3, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	b29b      	uxth	r3, r3
 8007272:	b218      	sxth	r0, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	b29b      	uxth	r3, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	b29b      	uxth	r3, r3
 8007280:	b219      	sxth	r1, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	b21a      	sxth	r2, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	b21c      	sxth	r4, r3
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	2301      	movs	r3, #1
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4623      	mov	r3, r4
 8007294:	f7ff f9a6 	bl	80065e4 <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3306      	adds	r3, #6
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	dbda      	blt.n	800725c <testRects+0x4c>
	}
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	3724      	adds	r7, #36	; 0x24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd90      	pop	{r4, r7, pc}
 80072b0:	20008d80 	.word	0x20008d80
 80072b4:	20008d82 	.word	0x20008d82

080072b8 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 80072b8:	b590      	push	{r4, r7, lr}
 80072ba:	b08b      	sub	sp, #44	; 0x2c
 80072bc:	af02      	add	r7, sp, #8
 80072be:	4603      	mov	r3, r0
 80072c0:	460a      	mov	r2, r1
 80072c2:	80fb      	strh	r3, [r7, #6]
 80072c4:	4613      	mov	r3, r2
 80072c6:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 80072c8:	4b30      	ldr	r3, [pc, #192]	; (800738c <testFilledRects+0xd4>)
 80072ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ce:	0fda      	lsrs	r2, r3, #31
 80072d0:	4413      	add	r3, r2
 80072d2:	105b      	asrs	r3, r3, #1
 80072d4:	b21b      	sxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 80072da:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <testFilledRects+0xd8>)
 80072dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e0:	0fda      	lsrs	r2, r3, #31
 80072e2:	4413      	add	r3, r2
 80072e4:	105b      	asrs	r3, r3, #1
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 80072ec:	2000      	movs	r0, #0
 80072ee:	f7fe fe5f 	bl	8005fb0 <Displ_CLS>
	n = min(_width, _height);
 80072f2:	4b27      	ldr	r3, [pc, #156]	; (8007390 <testFilledRects+0xd8>)
 80072f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <testFilledRects+0xd4>)
 80072fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072fe:	4293      	cmp	r3, r2
 8007300:	bfa8      	it	ge
 8007302:	4613      	movge	r3, r2
 8007304:	b21b      	sxth	r3, r3
 8007306:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	e035      	b.n	800737a <testFilledRects+0xc2>
		i2    = i / 2;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	0fda      	lsrs	r2, r3, #31
 8007312:	4413      	add	r3, r2
 8007314:	105b      	asrs	r3, r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	b29b      	uxth	r3, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	b298      	uxth	r0, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	b29b      	uxth	r3, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	b299      	uxth	r1, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	b29a      	uxth	r2, r3
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	b29c      	uxth	r4, r3
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4623      	mov	r3, r4
 800733e:	f7fe fc83 	bl	8005c48 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	b29b      	uxth	r3, r3
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	b218      	sxth	r0, r3
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	b29b      	uxth	r3, r3
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	b219      	sxth	r1, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	b21a      	sxth	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	b21c      	sxth	r4, r3
 8007366:	88bb      	ldrh	r3, [r7, #4]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	2301      	movs	r3, #1
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	4623      	mov	r3, r4
 8007370:	f7ff f938 	bl	80065e4 <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3b06      	subs	r3, #6
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	dcc6      	bgt.n	800730e <testFilledRects+0x56>
	}
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	3724      	adds	r7, #36	; 0x24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd90      	pop	{r4, r7, pc}
 800738a:	bf00      	nop
 800738c:	20008d80 	.word	0x20008d80
 8007390:	20008d82 	.word	0x20008d82

08007394 <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	460a      	mov	r2, r1
 800739e:	71fb      	strb	r3, [r7, #7]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 80073a4:	4b18      	ldr	r3, [pc, #96]	; (8007408 <testFilledCircles+0x74>)
 80073a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	4b17      	ldr	r3, [pc, #92]	; (800740c <testFilledCircles+0x78>)
 80073ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7fe fdf8 	bl	8005fb0 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e017      	b.n	80073f6 <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e00c      	b.n	80073e6 <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	b218      	sxth	r0, r3
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	b219      	sxth	r1, r3
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	b21a      	sxth	r2, r3
 80073d8:	88bb      	ldrh	r3, [r7, #4]
 80073da:	f7fe ff9f 	bl	800631c <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	dbee      	blt.n	80073cc <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4413      	add	r3, r2
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	dbe3      	blt.n	80073c6 <testFilledCircles+0x32>
        }
    }
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3720      	adds	r7, #32
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20008d80 	.word	0x20008d80
 800740c:	20008d82 	.word	0x20008d82

08007410 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	460a      	mov	r2, r1
 800741a:	71fb      	strb	r3, [r7, #7]
 800741c:	4613      	mov	r3, r2
 800741e:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <testCircles+0x7c>)
 8007428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742c:	461a      	mov	r2, r3
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	4413      	add	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8007434:	4b16      	ldr	r3, [pc, #88]	; (8007490 <testCircles+0x80>)
 8007436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800743a:	461a      	mov	r2, r3
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	4413      	add	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e017      	b.n	8007478 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e00c      	b.n	8007468 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	b218      	sxth	r0, r3
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	b219      	sxth	r1, r3
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	b21a      	sxth	r2, r3
 800745a:	88bb      	ldrh	r3, [r7, #4]
 800745c:	f7fe fcd4 	bl	8005e08 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4413      	add	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	dbee      	blt.n	800744e <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4413      	add	r3, r2
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	dbe3      	blt.n	8007448 <testCircles+0x38>
        }
    }
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20008d80 	.word	0x20008d80
 8007490:	20008d82 	.word	0x20008d82

08007494 <testTriangles>:




void testTriangles()
{
 8007494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007496:	b089      	sub	sp, #36	; 0x24
 8007498:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 800749a:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <testTriangles+0xc0>)
 800749c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074a0:	0fda      	lsrs	r2, r3, #31
 80074a2:	4413      	add	r3, r2
 80074a4:	105b      	asrs	r3, r3, #1
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <testTriangles+0xc4>)
 80074ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074b2:	0fda      	lsrs	r2, r3, #31
 80074b4:	4413      	add	r3, r2
 80074b6:	105b      	asrs	r3, r3, #1
 80074b8:	b21b      	sxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 80074be:	2000      	movs	r0, #0
 80074c0:	f7fe fd76 	bl	8005fb0 <Displ_CLS>
    n     = min(cx, cy);
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bfa8      	it	ge
 80074cc:	4613      	movge	r3, r2
 80074ce:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e035      	b.n	8007542 <testTriangles+0xae>
    	Displ_drawTriangle(
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80074e6:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 80074f4:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	4413      	add	r3, r2
 8007500:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8007502:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	b29b      	uxth	r3, r3
 800750c:	4413      	add	r3, r2
 800750e:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8007510:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	b291      	uxth	r1, r2
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	b292      	uxth	r2, r2
 800751a:	440a      	add	r2, r1
 800751c:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 800751e:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	10c9      	asrs	r1, r1, #3
 8007524:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8007526:	f001 011f 	and.w	r1, r1, #31
 800752a:	b289      	uxth	r1, r1
 800752c:	9102      	str	r1, [sp, #8]
 800752e:	9201      	str	r2, [sp, #4]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4633      	mov	r3, r6
 8007534:	462a      	mov	r2, r5
 8007536:	4621      	mov	r1, r4
 8007538:	f7ff f897 	bl	800666a <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3305      	adds	r3, #5
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	dbc5      	blt.n	80074d6 <testTriangles+0x42>
    }
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007554:	20008d80 	.word	0x20008d80
 8007558:	20008d82 	.word	0x20008d82

0800755c <testFilledTriangles>:





void testFilledTriangles() {
 800755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755e:	b089      	sub	sp, #36	; 0x24
 8007560:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8007562:	4b53      	ldr	r3, [pc, #332]	; (80076b0 <testFilledTriangles+0x154>)
 8007564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007568:	0fda      	lsrs	r2, r3, #31
 800756a:	4413      	add	r3, r2
 800756c:	105b      	asrs	r3, r3, #1
 800756e:	b21b      	sxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8007574:	4b4f      	ldr	r3, [pc, #316]	; (80076b4 <testFilledTriangles+0x158>)
 8007576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800757a:	0fda      	lsrs	r2, r3, #31
 800757c:	4413      	add	r3, r2
 800757e:	105b      	asrs	r3, r3, #1
 8007580:	b21b      	sxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8007586:	2000      	movs	r0, #0
 8007588:	f7fe fd12 	bl	8005fb0 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	4293      	cmp	r3, r2
 8007592:	bfa8      	it	ge
 8007594:	4613      	movge	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e080      	b.n	800769c <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	b21c      	sxth	r4, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	b21d      	sxth	r5, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	b21e      	sxth	r6, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	fa0f fc83 	sxth.w	ip, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4413      	add	r3, r2
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	b21b      	sxth	r3, r3
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	b291      	uxth	r1, r2
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	b292      	uxth	r2, r2
 80075e0:	440a      	add	r2, r1
 80075e2:	b292      	uxth	r2, r2
 80075e4:	b212      	sxth	r2, r2
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	00c9      	lsls	r1, r1, #3
 80075ea:	b209      	sxth	r1, r1
 80075ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80075f0:	b208      	sxth	r0, r1
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	10c9      	asrs	r1, r1, #3
 80075f6:	b209      	sxth	r1, r1
 80075f8:	f001 011f 	and.w	r1, r1, #31
 80075fc:	b209      	sxth	r1, r1
 80075fe:	4301      	orrs	r1, r0
 8007600:	b209      	sxth	r1, r1
 8007602:	b289      	uxth	r1, r1
 8007604:	9102      	str	r1, [sp, #8]
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	4663      	mov	r3, ip
 800760c:	4632      	mov	r2, r6
 800760e:	4629      	mov	r1, r5
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff f864 	bl	80066de <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	b21c      	sxth	r4, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	b29b      	uxth	r3, r3
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	b29b      	uxth	r3, r3
 8007626:	b21d      	sxth	r5, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	b29b      	uxth	r3, r3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	b29b      	uxth	r3, r3
 8007634:	b21e      	sxth	r6, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	b29b      	uxth	r3, r3
 800763e:	4413      	add	r3, r2
 8007640:	b29b      	uxth	r3, r3
 8007642:	fa0f fc83 	sxth.w	ip, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	b29a      	uxth	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	b29b      	uxth	r3, r3
 800764e:	4413      	add	r3, r2
 8007650:	b29b      	uxth	r3, r3
 8007652:	b21a      	sxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	b299      	uxth	r1, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	b29b      	uxth	r3, r3
 800765c:	440b      	add	r3, r1
 800765e:	b29b      	uxth	r3, r3
 8007660:	b219      	sxth	r1, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b21b      	sxth	r3, r3
 8007668:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800766c:	f023 0307 	bic.w	r3, r3, #7
 8007670:	b218      	sxth	r0, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	b21b      	sxth	r3, r3
 8007678:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800767c:	b21b      	sxth	r3, r3
 800767e:	4303      	orrs	r3, r0
 8007680:	b21b      	sxth	r3, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	9302      	str	r3, [sp, #8]
 8007686:	9101      	str	r1, [sp, #4]
 8007688:	9200      	str	r2, [sp, #0]
 800768a:	4663      	mov	r3, ip
 800768c:	4632      	mov	r2, r6
 800768e:	4629      	mov	r1, r5
 8007690:	4620      	mov	r0, r4
 8007692:	f7fe ffea 	bl	800666a <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b05      	subs	r3, #5
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b0a      	cmp	r3, #10
 80076a0:	f73f af7b 	bgt.w	800759a <testFilledTriangles+0x3e>
    }
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20008d80 	.word	0x20008d80
 80076b4:	20008d82 	.word	0x20008d82

080076b8 <testRoundRects>:





void testRoundRects() {
 80076b8:	b5b0      	push	{r4, r5, r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <testRoundRects+0xd4>)
 80076c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076c4:	0fda      	lsrs	r2, r3, #31
 80076c6:	4413      	add	r3, r2
 80076c8:	105b      	asrs	r3, r3, #1
 80076ca:	b21b      	sxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 80076d0:	4b2f      	ldr	r3, [pc, #188]	; (8007790 <testRoundRects+0xd8>)
 80076d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076d6:	0fda      	lsrs	r2, r3, #31
 80076d8:	4413      	add	r3, r2
 80076da:	105b      	asrs	r3, r3, #1
 80076dc:	b21b      	sxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 80076e2:	2000      	movs	r0, #0
 80076e4:	f7fe fc64 	bl	8005fb0 <Displ_CLS>
    w     = min(_width, _height);
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <testRoundRects+0xd8>)
 80076ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80076ee:	4b27      	ldr	r3, [pc, #156]	; (800778c <testRoundRects+0xd4>)
 80076f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bfa8      	it	ge
 80076f8:	4613      	movge	r3, r2
 80076fa:	b21b      	sxth	r3, r3
 80076fc:	60fb      	str	r3, [r7, #12]
    red = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8007702:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	fb92 f3f3 	sdiv	r3, r2, r3
 800770c:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
 8007712:	e031      	b.n	8007778 <testRoundRects+0xc0>
        i2 = i / 2;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	0fda      	lsrs	r2, r3, #31
 8007718:	4413      	add	r3, r2
 800771a:	105b      	asrs	r3, r3, #1
 800771c:	607b      	str	r3, [r7, #4]
        red += step;
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	b29b      	uxth	r3, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	b29b      	uxth	r3, r3
 8007732:	b218      	sxth	r0, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	b29b      	uxth	r3, r3
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	b219      	sxth	r1, r3
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	b21c      	sxth	r4, r3
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	b21d      	sxth	r5, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b00      	cmp	r3, #0
 800774e:	da00      	bge.n	8007752 <testRoundRects+0x9a>
 8007750:	3307      	adds	r3, #7
 8007752:	10db      	asrs	r3, r3, #3
 8007754:	b21a      	sxth	r2, r3
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007760:	f023 0307 	bic.w	r3, r3, #7
 8007764:	b29b      	uxth	r3, r3
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	9200      	str	r2, [sp, #0]
 800776a:	462b      	mov	r3, r5
 800776c:	4622      	mov	r2, r4
 800776e:	f7ff fa27 	bl	8006bc0 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3306      	adds	r3, #6
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	dbc9      	blt.n	8007714 <testRoundRects+0x5c>
    }
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bdb0      	pop	{r4, r5, r7, pc}
 800778a:	bf00      	nop
 800778c:	20008d80 	.word	0x20008d80
 8007790:	20008d82 	.word	0x20008d82

08007794 <testFilledRoundRects>:





void testFilledRoundRects() {
 8007794:	b5b0      	push	{r4, r5, r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 800779a:	4b36      	ldr	r3, [pc, #216]	; (8007874 <testFilledRoundRects+0xe0>)
 800779c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a0:	0fda      	lsrs	r2, r3, #31
 80077a2:	4413      	add	r3, r2
 80077a4:	105b      	asrs	r3, r3, #1
 80077a6:	b21b      	sxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 80077ac:	4b32      	ldr	r3, [pc, #200]	; (8007878 <testFilledRoundRects+0xe4>)
 80077ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077b2:	0fda      	lsrs	r2, r3, #31
 80077b4:	4413      	add	r3, r2
 80077b6:	105b      	asrs	r3, r3, #1
 80077b8:	b21b      	sxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 80077be:	2000      	movs	r0, #0
 80077c0:	f7fe fbf6 	bl	8005fb0 <Displ_CLS>
    green = 256;
 80077c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c8:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 80077ca:	4b2b      	ldr	r3, [pc, #172]	; (8007878 <testFilledRoundRects+0xe4>)
 80077cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80077d0:	4b28      	ldr	r3, [pc, #160]	; (8007874 <testFilledRoundRects+0xe0>)
 80077d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077d6:	4293      	cmp	r3, r2
 80077d8:	bfa8      	it	ge
 80077da:	4613      	movge	r3, r2
 80077dc:	b21b      	sxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80077e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e8:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 80077ea:	4b23      	ldr	r3, [pc, #140]	; (8007878 <testFilledRoundRects+0xe4>)
 80077ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80077f0:	4b20      	ldr	r3, [pc, #128]	; (8007874 <testFilledRoundRects+0xe0>)
 80077f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfa8      	it	ge
 80077fa:	4613      	movge	r3, r2
 80077fc:	b21b      	sxth	r3, r3
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e02f      	b.n	8007862 <testFilledRoundRects+0xce>
        i2 = i / 2;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	0fda      	lsrs	r2, r3, #31
 8007806:	4413      	add	r3, r2
 8007808:	105b      	asrs	r3, r3, #1
 800780a:	603b      	str	r3, [r7, #0]
        green -= step;
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	b29a      	uxth	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	b29b      	uxth	r3, r3
 8007820:	b218      	sxth	r0, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	b29a      	uxth	r2, r3
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	b29b      	uxth	r3, r3
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	b29b      	uxth	r3, r3
 800782e:	b219      	sxth	r1, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	b21c      	sxth	r4, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	b21d      	sxth	r5, r3
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	da00      	bge.n	8007840 <testFilledRoundRects+0xac>
 800783e:	3307      	adds	r3, #7
 8007840:	10db      	asrs	r3, r3, #3
 8007842:	b21b      	sxth	r3, r3
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	00d2      	lsls	r2, r2, #3
 8007848:	b292      	uxth	r2, r2
 800784a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 800784e:	b292      	uxth	r2, r2
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462b      	mov	r3, r5
 8007856:	4622      	mov	r2, r4
 8007858:	f7ff faa7 	bl	8006daa <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3b06      	subs	r3, #6
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b14      	cmp	r3, #20
 8007866:	dccc      	bgt.n	8007802 <testFilledRoundRects+0x6e>
    }
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bdb0      	pop	{r4, r5, r7, pc}
 8007872:	bf00      	nop
 8007874:	20008d80 	.word	0x20008d80
 8007878:	20008d82 	.word	0x20008d82

0800787c <testFillScreen>:




void testFillScreen()
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8007880:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8007884:	f7fe fb94 	bl	8005fb0 <Displ_CLS>
	Displ_CLS(GREEN);
 8007888:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800788c:	f7fe fb90 	bl	8005fb0 <Displ_CLS>
	Displ_CLS(BLUE);
 8007890:	201f      	movs	r0, #31
 8007892:	f7fe fb8d 	bl	8005fb0 <Displ_CLS>
	Displ_CLS(YELLOW);
 8007896:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800789a:	f7fe fb89 	bl	8005fb0 <Displ_CLS>
	Displ_CLS(BLACK);
 800789e:	2000      	movs	r0, #0
 80078a0:	f7fe fb86 	bl	8005fb0 <Displ_CLS>
}
 80078a4:	bf00      	nop
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <Displ_TestAll>:





void Displ_TestAll (){
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
	testFillScreen();
 80078ac:	f7ff ffe6 	bl	800787c <testFillScreen>
	testLines(CYAN);
 80078b0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80078b4:	f7ff fb5c 	bl	8006f70 <testLines>
	testFastLines(RED, BLUE);
 80078b8:	211f      	movs	r1, #31
 80078ba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80078be:	f7ff fc59 	bl	8007174 <testFastLines>
	testRects(GREEN);
 80078c2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80078c6:	f7ff fca3 	bl	8007210 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 80078ca:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80078ce:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80078d2:	f7ff fcf1 	bl	80072b8 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 80078d6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80078da:	200a      	movs	r0, #10
 80078dc:	f7ff fd5a 	bl	8007394 <testFilledCircles>
	testCircles(10, WHITE);
 80078e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80078e4:	200a      	movs	r0, #10
 80078e6:	f7ff fd93 	bl	8007410 <testCircles>
	testTriangles();
 80078ea:	f7ff fdd3 	bl	8007494 <testTriangles>
	testFilledTriangles();
 80078ee:	f7ff fe35 	bl	800755c <testFilledTriangles>
	testRoundRects();
 80078f2:	f7ff fee1 	bl	80076b8 <testRoundRects>
	testFilledRoundRects();
 80078f6:	f7ff ff4d 	bl	8007794 <testFilledRoundRects>
}
 80078fa:	bf00      	nop
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <Reset_Handler>:
 8007900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007938 <LoopFillZerobss+0x12>
 8007904:	480d      	ldr	r0, [pc, #52]	; (800793c <LoopFillZerobss+0x16>)
 8007906:	490e      	ldr	r1, [pc, #56]	; (8007940 <LoopFillZerobss+0x1a>)
 8007908:	4a0e      	ldr	r2, [pc, #56]	; (8007944 <LoopFillZerobss+0x1e>)
 800790a:	2300      	movs	r3, #0
 800790c:	e002      	b.n	8007914 <LoopCopyDataInit>

0800790e <CopyDataInit>:
 800790e:	58d4      	ldr	r4, [r2, r3]
 8007910:	50c4      	str	r4, [r0, r3]
 8007912:	3304      	adds	r3, #4

08007914 <LoopCopyDataInit>:
 8007914:	18c4      	adds	r4, r0, r3
 8007916:	428c      	cmp	r4, r1
 8007918:	d3f9      	bcc.n	800790e <CopyDataInit>
 800791a:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <LoopFillZerobss+0x22>)
 800791c:	4c0b      	ldr	r4, [pc, #44]	; (800794c <LoopFillZerobss+0x26>)
 800791e:	2300      	movs	r3, #0
 8007920:	e001      	b.n	8007926 <LoopFillZerobss>

08007922 <FillZerobss>:
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	3204      	adds	r2, #4

08007926 <LoopFillZerobss>:
 8007926:	42a2      	cmp	r2, r4
 8007928:	d3fb      	bcc.n	8007922 <FillZerobss>
 800792a:	f7fd f917 	bl	8004b5c <SystemInit>
 800792e:	f006 fb87 	bl	800e040 <__libc_init_array>
 8007932:	f7fb fd83 	bl	800343c <main>
 8007936:	4770      	bx	lr
 8007938:	20020000 	.word	0x20020000
 800793c:	20000000 	.word	0x20000000
 8007940:	20000228 	.word	0x20000228
 8007944:	08015e90 	.word	0x08015e90
 8007948:	20000228 	.word	0x20000228
 800794c:	20009edc 	.word	0x20009edc

08007950 <ADC_IRQHandler>:
 8007950:	e7fe      	b.n	8007950 <ADC_IRQHandler>
	...

08007954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007958:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <HAL_Init+0x40>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <HAL_Init+0x40>)
 800795e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_Init+0x40>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a0a      	ldr	r2, [pc, #40]	; (8007994 <HAL_Init+0x40>)
 800796a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800796e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007970:	4b08      	ldr	r3, [pc, #32]	; (8007994 <HAL_Init+0x40>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a07      	ldr	r2, [pc, #28]	; (8007994 <HAL_Init+0x40>)
 8007976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800797c:	2003      	movs	r0, #3
 800797e:	f000 fd53 	bl	8008428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007982:	2000      	movs	r0, #0
 8007984:	f000 f808 	bl	8007998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007988:	f7fc fcc2 	bl	8004310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40023c00 	.word	0x40023c00

08007998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <HAL_InitTick+0x54>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <HAL_InitTick+0x58>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	4619      	mov	r1, r3
 80079aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80079b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fd6b 	bl	8008492 <HAL_SYSTICK_Config>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e00e      	b.n	80079e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b0f      	cmp	r3, #15
 80079ca:	d80a      	bhi.n	80079e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079cc:	2200      	movs	r2, #0
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079d4:	f000 fd33 	bl	800843e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80079d8:	4a06      	ldr	r2, [pc, #24]	; (80079f4 <HAL_InitTick+0x5c>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	e000      	b.n	80079e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000030 	.word	0x20000030
 80079f0:	20000048 	.word	0x20000048
 80079f4:	20000044 	.word	0x20000044

080079f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <HAL_IncTick+0x20>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <HAL_IncTick+0x24>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4413      	add	r3, r2
 8007a08:	4a04      	ldr	r2, [pc, #16]	; (8007a1c <HAL_IncTick+0x24>)
 8007a0a:	6013      	str	r3, [r2, #0]
}
 8007a0c:	bf00      	nop
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000048 	.word	0x20000048
 8007a1c:	20009d8c 	.word	0x20009d8c

08007a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  return uwTick;
 8007a24:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <HAL_GetTick+0x14>)
 8007a26:	681b      	ldr	r3, [r3, #0]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20009d8c 	.word	0x20009d8c

08007a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a40:	f7ff ffee 	bl	8007a20 <HAL_GetTick>
 8007a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a50:	d005      	beq.n	8007a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <HAL_Delay+0x44>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a5e:	bf00      	nop
 8007a60:	f7ff ffde 	bl	8007a20 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d8f7      	bhi.n	8007a60 <HAL_Delay+0x28>
  {
  }
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20000048 	.word	0x20000048

08007a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e033      	b.n	8007afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7fc fc5e 	bl	8004360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d118      	bne.n	8007af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ac6:	f023 0302 	bic.w	r3, r3, #2
 8007aca:	f043 0202 	orr.w	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa5a 	bl	8007f8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0201 	orr.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
 8007aee:	e001      	b.n	8007af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_ADC_Start_DMA+0x1e>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e0e9      	b.n	8007cfa <HAL_ADC_Start_DMA+0x1f2>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d018      	beq.n	8007b6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007b4c:	4b6d      	ldr	r3, [pc, #436]	; (8007d04 <HAL_ADC_Start_DMA+0x1fc>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6d      	ldr	r2, [pc, #436]	; (8007d08 <HAL_ADC_Start_DMA+0x200>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	0c9a      	lsrs	r2, r3, #18
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007b60:	e002      	b.n	8007b68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f9      	bne.n	8007b62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b7c:	d107      	bne.n	8007b8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	f040 80a1 	bne.w	8007ce0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007bc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bdc:	d106      	bne.n	8007bec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be2:	f023 0206 	bic.w	r2, r3, #6
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
 8007bea:	e002      	b.n	8007bf2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007bfa:	4b44      	ldr	r3, [pc, #272]	; (8007d0c <HAL_ADC_Start_DMA+0x204>)
 8007bfc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	4a43      	ldr	r2, [pc, #268]	; (8007d10 <HAL_ADC_Start_DMA+0x208>)
 8007c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	4a42      	ldr	r2, [pc, #264]	; (8007d14 <HAL_ADC_Start_DMA+0x20c>)
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	4a41      	ldr	r2, [pc, #260]	; (8007d18 <HAL_ADC_Start_DMA+0x210>)
 8007c14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007c2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	334c      	adds	r3, #76	; 0x4c
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f000 fcda 	bl	8008608 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f003 031f 	and.w	r3, r3, #31
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d12a      	bne.n	8007cb6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a2d      	ldr	r2, [pc, #180]	; (8007d1c <HAL_ADC_Start_DMA+0x214>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d015      	beq.n	8007c96 <HAL_ADC_Start_DMA+0x18e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a2c      	ldr	r2, [pc, #176]	; (8007d20 <HAL_ADC_Start_DMA+0x218>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d105      	bne.n	8007c80 <HAL_ADC_Start_DMA+0x178>
 8007c74:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <HAL_ADC_Start_DMA+0x204>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 031f 	and.w	r3, r3, #31
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a27      	ldr	r2, [pc, #156]	; (8007d24 <HAL_ADC_Start_DMA+0x21c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d136      	bne.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
 8007c8a:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <HAL_ADC_Start_DMA+0x204>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d130      	bne.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d129      	bne.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	e020      	b.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <HAL_ADC_Start_DMA+0x214>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d11b      	bne.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d114      	bne.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007cdc:	609a      	str	r2, [r3, #8]
 8007cde:	e00b      	b.n	8007cf8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	f043 0210 	orr.w	r2, r3, #16
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	f043 0201 	orr.w	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000030 	.word	0x20000030
 8007d08:	431bde83 	.word	0x431bde83
 8007d0c:	40012300 	.word	0x40012300
 8007d10:	08008185 	.word	0x08008185
 8007d14:	0800823f 	.word	0x0800823f
 8007d18:	0800825b 	.word	0x0800825b
 8007d1c:	40012000 	.word	0x40012000
 8007d20:	40012100 	.word	0x40012100
 8007d24:	40012200 	.word	0x40012200

08007d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_ADC_ConfigChannel+0x1c>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e113      	b.n	8007f6c <HAL_ADC_ConfigChannel+0x244>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d925      	bls.n	8007da0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68d9      	ldr	r1, [r3, #12]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	4613      	mov	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	3b1e      	subs	r3, #30
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d70:	43da      	mvns	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	400a      	ands	r2, r1
 8007d78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68d9      	ldr	r1, [r3, #12]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4403      	add	r3, r0
 8007d92:	3b1e      	subs	r3, #30
 8007d94:	409a      	lsls	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	60da      	str	r2, [r3, #12]
 8007d9e:	e022      	b.n	8007de6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6919      	ldr	r1, [r3, #16]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	4613      	mov	r3, r2
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	4413      	add	r3, r2
 8007db4:	2207      	movs	r2, #7
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43da      	mvns	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	400a      	ands	r2, r1
 8007dc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6919      	ldr	r1, [r3, #16]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	4403      	add	r3, r0
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b06      	cmp	r3, #6
 8007dec:	d824      	bhi.n	8007e38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3b05      	subs	r3, #5
 8007e00:	221f      	movs	r2, #31
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43da      	mvns	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	400a      	ands	r2, r1
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	3b05      	subs	r3, #5
 8007e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34
 8007e36:	e04c      	b.n	8007ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b0c      	cmp	r3, #12
 8007e3e:	d824      	bhi.n	8007e8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	3b23      	subs	r3, #35	; 0x23
 8007e52:	221f      	movs	r2, #31
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	43da      	mvns	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	400a      	ands	r2, r1
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	4618      	mov	r0, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	3b23      	subs	r3, #35	; 0x23
 8007e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	631a      	str	r2, [r3, #48]	; 0x30
 8007e88:	e023      	b.n	8007ed2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	3b41      	subs	r3, #65	; 0x41
 8007e9c:	221f      	movs	r2, #31
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	43da      	mvns	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	400a      	ands	r2, r1
 8007eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	4618      	mov	r0, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	3b41      	subs	r3, #65	; 0x41
 8007ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ed2:	4b29      	ldr	r3, [pc, #164]	; (8007f78 <HAL_ADC_ConfigChannel+0x250>)
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a28      	ldr	r2, [pc, #160]	; (8007f7c <HAL_ADC_ConfigChannel+0x254>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10f      	bne.n	8007f00 <HAL_ADC_ConfigChannel+0x1d8>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b12      	cmp	r3, #18
 8007ee6:	d10b      	bne.n	8007f00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <HAL_ADC_ConfigChannel+0x254>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d12b      	bne.n	8007f62 <HAL_ADC_ConfigChannel+0x23a>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1c      	ldr	r2, [pc, #112]	; (8007f80 <HAL_ADC_ConfigChannel+0x258>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <HAL_ADC_ConfigChannel+0x1f4>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b11      	cmp	r3, #17
 8007f1a:	d122      	bne.n	8007f62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a11      	ldr	r2, [pc, #68]	; (8007f80 <HAL_ADC_ConfigChannel+0x258>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d111      	bne.n	8007f62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <HAL_ADC_ConfigChannel+0x25c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a11      	ldr	r2, [pc, #68]	; (8007f88 <HAL_ADC_ConfigChannel+0x260>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	0c9a      	lsrs	r2, r3, #18
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f54:	e002      	b.n	8007f5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f9      	bne.n	8007f56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40012300 	.word	0x40012300
 8007f7c:	40012000 	.word	0x40012000
 8007f80:	10000012 	.word	0x10000012
 8007f84:	20000030 	.word	0x20000030
 8007f88:	431bde83 	.word	0x431bde83

08007f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f94:	4b79      	ldr	r3, [pc, #484]	; (800817c <ADC_Init+0x1f0>)
 8007f96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	021a      	lsls	r2, r3, #8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6899      	ldr	r1, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801e:	4a58      	ldr	r2, [pc, #352]	; (8008180 <ADC_Init+0x1f4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d022      	beq.n	800806a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6899      	ldr	r1, [r3, #8]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6899      	ldr	r1, [r3, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	609a      	str	r2, [r3, #8]
 8008068:	e00f      	b.n	800808a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008088:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0202 	bic.w	r2, r2, #2
 8008098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6899      	ldr	r1, [r3, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7e1b      	ldrb	r3, [r3, #24]
 80080a4:	005a      	lsls	r2, r3, #1
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80080d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6859      	ldr	r1, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	3b01      	subs	r3, #1
 80080e4:	035a      	lsls	r2, r3, #13
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	e007      	b.n	8008100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800810e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	3b01      	subs	r3, #1
 800811c:	051a      	lsls	r2, r3, #20
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6899      	ldr	r1, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008142:	025a      	lsls	r2, r3, #9
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800815a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6899      	ldr	r1, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	029a      	lsls	r2, r3, #10
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
}
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	40012300 	.word	0x40012300
 8008180:	0f000001 	.word	0x0f000001

08008184 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	d13c      	bne.n	8008218 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d12b      	bne.n	8008210 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d127      	bne.n	8008210 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d006      	beq.n	80081dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d119      	bne.n	8008210 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0220 	bic.w	r2, r2, #32
 80081ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f043 0201 	orr.w	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7fb ff53 	bl	80040bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008216:	e00e      	b.n	8008236 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7fb ff89 	bl	800413c <HAL_ADC_ErrorCallback>
}
 800822a:	e004      	b.n	8008236 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7fb ff55 	bl	80040fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2240      	movs	r2, #64	; 0x40
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008272:	f043 0204 	orr.w	r2, r3, #4
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7fb ff5e 	bl	800413c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008298:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <__NVIC_SetPriorityGrouping+0x44>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082a4:	4013      	ands	r3, r2
 80082a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80082b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082ba:	4a04      	ldr	r2, [pc, #16]	; (80082cc <__NVIC_SetPriorityGrouping+0x44>)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	60d3      	str	r3, [r2, #12]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	e000ed00 	.word	0xe000ed00

080082d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <__NVIC_GetPriorityGrouping+0x18>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	f003 0307 	and.w	r3, r3, #7
}
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	e000ed00 	.word	0xe000ed00

080082ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db0b      	blt.n	8008316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	f003 021f 	and.w	r2, r3, #31
 8008304:	4907      	ldr	r1, [pc, #28]	; (8008324 <__NVIC_EnableIRQ+0x38>)
 8008306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	2001      	movs	r0, #1
 800830e:	fa00 f202 	lsl.w	r2, r0, r2
 8008312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	e000e100 	.word	0xe000e100

08008328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008338:	2b00      	cmp	r3, #0
 800833a:	db0a      	blt.n	8008352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	b2da      	uxtb	r2, r3
 8008340:	490c      	ldr	r1, [pc, #48]	; (8008374 <__NVIC_SetPriority+0x4c>)
 8008342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	440b      	add	r3, r1
 800834c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008350:	e00a      	b.n	8008368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	b2da      	uxtb	r2, r3
 8008356:	4908      	ldr	r1, [pc, #32]	; (8008378 <__NVIC_SetPriority+0x50>)
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	3b04      	subs	r3, #4
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	440b      	add	r3, r1
 8008366:	761a      	strb	r2, [r3, #24]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	e000e100 	.word	0xe000e100
 8008378:	e000ed00 	.word	0xe000ed00

0800837c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800837c:	b480      	push	{r7}
 800837e:	b089      	sub	sp, #36	; 0x24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f1c3 0307 	rsb	r3, r3, #7
 8008396:	2b04      	cmp	r3, #4
 8008398:	bf28      	it	cs
 800839a:	2304      	movcs	r3, #4
 800839c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	3304      	adds	r3, #4
 80083a2:	2b06      	cmp	r3, #6
 80083a4:	d902      	bls.n	80083ac <NVIC_EncodePriority+0x30>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	3b03      	subs	r3, #3
 80083aa:	e000      	b.n	80083ae <NVIC_EncodePriority+0x32>
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	43da      	mvns	r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	401a      	ands	r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	fa01 f303 	lsl.w	r3, r1, r3
 80083ce:	43d9      	mvns	r1, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083d4:	4313      	orrs	r3, r2
         );
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3724      	adds	r7, #36	; 0x24
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083f4:	d301      	bcc.n	80083fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083f6:	2301      	movs	r3, #1
 80083f8:	e00f      	b.n	800841a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083fa:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <SysTick_Config+0x40>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3b01      	subs	r3, #1
 8008400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008402:	210f      	movs	r1, #15
 8008404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008408:	f7ff ff8e 	bl	8008328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800840c:	4b05      	ldr	r3, [pc, #20]	; (8008424 <SysTick_Config+0x40>)
 800840e:	2200      	movs	r2, #0
 8008410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008412:	4b04      	ldr	r3, [pc, #16]	; (8008424 <SysTick_Config+0x40>)
 8008414:	2207      	movs	r2, #7
 8008416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	e000e010 	.word	0xe000e010

08008428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff ff29 	bl	8008288 <__NVIC_SetPriorityGrouping>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800843e:	b580      	push	{r7, lr}
 8008440:	b086      	sub	sp, #24
 8008442:	af00      	add	r7, sp, #0
 8008444:	4603      	mov	r3, r0
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008450:	f7ff ff3e 	bl	80082d0 <__NVIC_GetPriorityGrouping>
 8008454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	6978      	ldr	r0, [r7, #20]
 800845c:	f7ff ff8e 	bl	800837c <NVIC_EncodePriority>
 8008460:	4602      	mov	r2, r0
 8008462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff ff5d 	bl	8008328 <__NVIC_SetPriority>
}
 800846e:	bf00      	nop
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	4603      	mov	r3, r0
 800847e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008484:	4618      	mov	r0, r3
 8008486:	f7ff ff31 	bl	80082ec <__NVIC_EnableIRQ>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff ffa2 	bl	80083e4 <SysTick_Config>
 80084a0:	4603      	mov	r3, r0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80084b8:	f7ff fab2 	bl	8007a20 <HAL_GetTick>
 80084bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e099      	b.n	80085fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0201 	bic.w	r2, r2, #1
 80084e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084e8:	e00f      	b.n	800850a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084ea:	f7ff fa99 	bl	8007a20 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b05      	cmp	r3, #5
 80084f6:	d908      	bls.n	800850a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2203      	movs	r2, #3
 8008502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e078      	b.n	80085fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e8      	bne.n	80084ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4b38      	ldr	r3, [pc, #224]	; (8008604 <HAL_DMA_Init+0x158>)
 8008524:	4013      	ands	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800854e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b04      	cmp	r3, #4
 8008562:	d107      	bne.n	8008574 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	4313      	orrs	r3, r2
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f023 0307 	bic.w	r3, r3, #7
 800858a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	2b04      	cmp	r3, #4
 800859c:	d117      	bne.n	80085ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00e      	beq.n	80085ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fb0d 	bl	8008bd0 <DMA_CheckFifoParam>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d008      	beq.n	80085ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2240      	movs	r2, #64	; 0x40
 80085c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085ca:	2301      	movs	r3, #1
 80085cc:	e016      	b.n	80085fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fac4 	bl	8008b64 <DMA_CalcBaseAndBitshift>
 80085dc:	4603      	mov	r3, r0
 80085de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e4:	223f      	movs	r2, #63	; 0x3f
 80085e6:	409a      	lsls	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	f010803f 	.word	0xf010803f

08008608 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <HAL_DMA_Start_IT+0x26>
 800862a:	2302      	movs	r3, #2
 800862c:	e040      	b.n	80086b0 <HAL_DMA_Start_IT+0xa8>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b01      	cmp	r3, #1
 8008640:	d12f      	bne.n	80086a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	68b9      	ldr	r1, [r7, #8]
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fa56 	bl	8008b08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008660:	223f      	movs	r2, #63	; 0x3f
 8008662:	409a      	lsls	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0216 	orr.w	r2, r2, #22
 8008676:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0208 	orr.w	r2, r2, #8
 800868e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e005      	b.n	80086ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80086aa:	2302      	movs	r3, #2
 80086ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80086c6:	f7ff f9ab 	bl	8007a20 <HAL_GetTick>
 80086ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d008      	beq.n	80086ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2280      	movs	r2, #128	; 0x80
 80086dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e052      	b.n	8008790 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0216 	bic.w	r2, r2, #22
 80086f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695a      	ldr	r2, [r3, #20]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008708:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <HAL_DMA_Abort+0x62>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0208 	bic.w	r2, r2, #8
 8008728:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800873a:	e013      	b.n	8008764 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800873c:	f7ff f970 	bl	8007a20 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b05      	cmp	r3, #5
 8008748:	d90c      	bls.n	8008764 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2203      	movs	r2, #3
 8008754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e015      	b.n	8008790 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e4      	bne.n	800873c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008776:	223f      	movs	r2, #63	; 0x3f
 8008778:	409a      	lsls	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d004      	beq.n	80087b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2280      	movs	r2, #128	; 0x80
 80087b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e00c      	b.n	80087d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2205      	movs	r2, #5
 80087ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0201 	bic.w	r2, r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80087e8:	4b8e      	ldr	r3, [pc, #568]	; (8008a24 <HAL_DMA_IRQHandler+0x248>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a8e      	ldr	r2, [pc, #568]	; (8008a28 <HAL_DMA_IRQHandler+0x24c>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	0a9b      	lsrs	r3, r3, #10
 80087f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008806:	2208      	movs	r2, #8
 8008808:	409a      	lsls	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4013      	ands	r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d01a      	beq.n	8008848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0204 	bic.w	r2, r2, #4
 800882e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008834:	2208      	movs	r2, #8
 8008836:	409a      	lsls	r2, r3
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	f043 0201 	orr.w	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	2201      	movs	r2, #1
 800884e:	409a      	lsls	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d012      	beq.n	800887e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886a:	2201      	movs	r2, #1
 800886c:	409a      	lsls	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008876:	f043 0202 	orr.w	r2, r3, #2
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	2204      	movs	r2, #4
 8008884:	409a      	lsls	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4013      	ands	r3, r2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d012      	beq.n	80088b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a0:	2204      	movs	r2, #4
 80088a2:	409a      	lsls	r2, r3
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ac:	f043 0204 	orr.w	r2, r3, #4
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	2210      	movs	r2, #16
 80088ba:	409a      	lsls	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d043      	beq.n	800894c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d03c      	beq.n	800894c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	2210      	movs	r2, #16
 80088d8:	409a      	lsls	r2, r3
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d018      	beq.n	800891e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d108      	bne.n	800890c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d024      	beq.n	800894c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
 800890a:	e01f      	b.n	800894c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01b      	beq.n	800894c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	4798      	blx	r3
 800891c:	e016      	b.n	800894c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0208 	bic.w	r2, r2, #8
 800893a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	2220      	movs	r2, #32
 8008952:	409a      	lsls	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4013      	ands	r3, r2
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 808f 	beq.w	8008a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 8087 	beq.w	8008a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008972:	2220      	movs	r2, #32
 8008974:	409a      	lsls	r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b05      	cmp	r3, #5
 8008984:	d136      	bne.n	80089f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0216 	bic.w	r2, r2, #22
 8008994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695a      	ldr	r2, [r3, #20]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <HAL_DMA_IRQHandler+0x1da>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d007      	beq.n	80089c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0208 	bic.w	r2, r2, #8
 80089c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ca:	223f      	movs	r2, #63	; 0x3f
 80089cc:	409a      	lsls	r2, r3
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d07e      	beq.n	8008ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
        }
        return;
 80089f2:	e079      	b.n	8008ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01d      	beq.n	8008a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10d      	bne.n	8008a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d031      	beq.n	8008a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	e02c      	b.n	8008a7c <HAL_DMA_IRQHandler+0x2a0>
 8008a22:	bf00      	nop
 8008a24:	20000030 	.word	0x20000030
 8008a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d023      	beq.n	8008a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
 8008a3c:	e01e      	b.n	8008a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10f      	bne.n	8008a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0210 	bic.w	r2, r2, #16
 8008a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d032      	beq.n	8008aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d022      	beq.n	8008ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2205      	movs	r2, #5
 8008a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d307      	bcc.n	8008ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f2      	bne.n	8008aa8 <HAL_DMA_IRQHandler+0x2cc>
 8008ac2:	e000      	b.n	8008ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
 8008ae6:	e000      	b.n	8008aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8008ae8:	bf00      	nop
    }
  }
}
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d108      	bne.n	8008b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b46:	e007      	b.n	8008b58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	60da      	str	r2, [r3, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	3b10      	subs	r3, #16
 8008b74:	4a14      	ldr	r2, [pc, #80]	; (8008bc8 <DMA_CalcBaseAndBitshift+0x64>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	091b      	lsrs	r3, r3, #4
 8008b7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b7e:	4a13      	ldr	r2, [pc, #76]	; (8008bcc <DMA_CalcBaseAndBitshift+0x68>)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d909      	bls.n	8008ba6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	1d1a      	adds	r2, r3, #4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8008ba4:	e007      	b.n	8008bb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	aaaaaaab 	.word	0xaaaaaaab
 8008bcc:	08015ae8 	.word	0x08015ae8

08008bd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11f      	bne.n	8008c2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d856      	bhi.n	8008c9e <DMA_CheckFifoParam+0xce>
 8008bf0:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <DMA_CheckFifoParam+0x28>)
 8008bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf6:	bf00      	nop
 8008bf8:	08008c09 	.word	0x08008c09
 8008bfc:	08008c1b 	.word	0x08008c1b
 8008c00:	08008c09 	.word	0x08008c09
 8008c04:	08008c9f 	.word	0x08008c9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d046      	beq.n	8008ca2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c18:	e043      	b.n	8008ca2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c22:	d140      	bne.n	8008ca6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c28:	e03d      	b.n	8008ca6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	d121      	bne.n	8008c78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d837      	bhi.n	8008caa <DMA_CheckFifoParam+0xda>
 8008c3a:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <DMA_CheckFifoParam+0x70>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c51 	.word	0x08008c51
 8008c44:	08008c57 	.word	0x08008c57
 8008c48:	08008c51 	.word	0x08008c51
 8008c4c:	08008c69 	.word	0x08008c69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
      break;
 8008c54:	e030      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d025      	beq.n	8008cae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c66:	e022      	b.n	8008cae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c70:	d11f      	bne.n	8008cb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c76:	e01c      	b.n	8008cb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d903      	bls.n	8008c86 <DMA_CheckFifoParam+0xb6>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d003      	beq.n	8008c8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c84:	e018      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8a:	e015      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00e      	beq.n	8008cb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9c:	e00b      	b.n	8008cb6 <DMA_CheckFifoParam+0xe6>
      break;
 8008c9e:	bf00      	nop
 8008ca0:	e00a      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8008ca2:	bf00      	nop
 8008ca4:	e008      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e006      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8008caa:	bf00      	nop
 8008cac:	e004      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8008cae:	bf00      	nop
 8008cb0:	e002      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8008cb2:	bf00      	nop
 8008cb4:	e000      	b.n	8008cb8 <DMA_CheckFifoParam+0xe8>
      break;
 8008cb6:	bf00      	nop
    }
  } 
  
  return status; 
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop

08008cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b089      	sub	sp, #36	; 0x24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
 8008ce2:	e165      	b.n	8008fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	f040 8154 	bne.w	8008faa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d005      	beq.n	8008d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d130      	bne.n	8008d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	2203      	movs	r2, #3
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	43db      	mvns	r3, r3
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	4013      	ands	r3, r2
 8008d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d50:	2201      	movs	r2, #1
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	091b      	lsrs	r3, r3, #4
 8008d66:	f003 0201 	and.w	r2, r3, #1
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f003 0303 	and.w	r3, r3, #3
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d017      	beq.n	8008db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	2203      	movs	r2, #3
 8008d94:	fa02 f303 	lsl.w	r3, r2, r3
 8008d98:	43db      	mvns	r3, r3
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	005b      	lsls	r3, r3, #1
 8008da8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d123      	bne.n	8008e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	08da      	lsrs	r2, r3, #3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3208      	adds	r2, #8
 8008dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	220f      	movs	r2, #15
 8008ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8008de0:	43db      	mvns	r3, r3
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	4013      	ands	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	08da      	lsrs	r2, r3, #3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3208      	adds	r2, #8
 8008e06:	69b9      	ldr	r1, [r7, #24]
 8008e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	2203      	movs	r2, #3
 8008e18:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	4013      	ands	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f003 0203 	and.w	r2, r3, #3
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 80ae 	beq.w	8008faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	4b5d      	ldr	r3, [pc, #372]	; (8008fc8 <HAL_GPIO_Init+0x300>)
 8008e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e56:	4a5c      	ldr	r2, [pc, #368]	; (8008fc8 <HAL_GPIO_Init+0x300>)
 8008e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e5e:	4b5a      	ldr	r3, [pc, #360]	; (8008fc8 <HAL_GPIO_Init+0x300>)
 8008e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e6a:	4a58      	ldr	r2, [pc, #352]	; (8008fcc <HAL_GPIO_Init+0x304>)
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	089b      	lsrs	r3, r3, #2
 8008e70:	3302      	adds	r3, #2
 8008e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	220f      	movs	r2, #15
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	43db      	mvns	r3, r3
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a4f      	ldr	r2, [pc, #316]	; (8008fd0 <HAL_GPIO_Init+0x308>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d025      	beq.n	8008ee2 <HAL_GPIO_Init+0x21a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a4e      	ldr	r2, [pc, #312]	; (8008fd4 <HAL_GPIO_Init+0x30c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d01f      	beq.n	8008ede <HAL_GPIO_Init+0x216>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a4d      	ldr	r2, [pc, #308]	; (8008fd8 <HAL_GPIO_Init+0x310>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d019      	beq.n	8008eda <HAL_GPIO_Init+0x212>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a4c      	ldr	r2, [pc, #304]	; (8008fdc <HAL_GPIO_Init+0x314>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d013      	beq.n	8008ed6 <HAL_GPIO_Init+0x20e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a4b      	ldr	r2, [pc, #300]	; (8008fe0 <HAL_GPIO_Init+0x318>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00d      	beq.n	8008ed2 <HAL_GPIO_Init+0x20a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a4a      	ldr	r2, [pc, #296]	; (8008fe4 <HAL_GPIO_Init+0x31c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <HAL_GPIO_Init+0x206>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a49      	ldr	r2, [pc, #292]	; (8008fe8 <HAL_GPIO_Init+0x320>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d101      	bne.n	8008eca <HAL_GPIO_Init+0x202>
 8008ec6:	2306      	movs	r3, #6
 8008ec8:	e00c      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008eca:	2307      	movs	r3, #7
 8008ecc:	e00a      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008ece:	2305      	movs	r3, #5
 8008ed0:	e008      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	e006      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e004      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008eda:	2302      	movs	r3, #2
 8008edc:	e002      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <HAL_GPIO_Init+0x21c>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	f002 0203 	and.w	r2, r2, #3
 8008eea:	0092      	lsls	r2, r2, #2
 8008eec:	4093      	lsls	r3, r2
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ef4:	4935      	ldr	r1, [pc, #212]	; (8008fcc <HAL_GPIO_Init+0x304>)
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	089b      	lsrs	r3, r3, #2
 8008efa:	3302      	adds	r3, #2
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f02:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	43db      	mvns	r3, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f26:	4a31      	ldr	r2, [pc, #196]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4013      	ands	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f50:	4a26      	ldr	r2, [pc, #152]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f56:	4b25      	ldr	r3, [pc, #148]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	4013      	ands	r3, r2
 8008f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f7a:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f80:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008fa4:	4a11      	ldr	r2, [pc, #68]	; (8008fec <HAL_GPIO_Init+0x324>)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	3301      	adds	r3, #1
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	2b0f      	cmp	r3, #15
 8008fb4:	f67f ae96 	bls.w	8008ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	3724      	adds	r7, #36	; 0x24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	40023800 	.word	0x40023800
 8008fcc:	40013800 	.word	0x40013800
 8008fd0:	40020000 	.word	0x40020000
 8008fd4:	40020400 	.word	0x40020400
 8008fd8:	40020800 	.word	0x40020800
 8008fdc:	40020c00 	.word	0x40020c00
 8008fe0:	40021000 	.word	0x40021000
 8008fe4:	40021400 	.word	0x40021400
 8008fe8:	40021800 	.word	0x40021800
 8008fec:	40013c00 	.word	0x40013c00

08008ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	887b      	ldrh	r3, [r7, #2]
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
 800900c:	e001      	b.n	8009012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009012:	7bfb      	ldrb	r3, [r7, #15]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	807b      	strh	r3, [r7, #2]
 800902c:	4613      	mov	r3, r2
 800902e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009030:	787b      	ldrb	r3, [r7, #1]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009036:	887a      	ldrh	r2, [r7, #2]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800903c:	e003      	b.n	8009046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800903e:	887b      	ldrh	r3, [r7, #2]
 8009040:	041a      	lsls	r2, r3, #16
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	619a      	str	r2, [r3, #24]
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009064:	887a      	ldrh	r2, [r7, #2]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4013      	ands	r3, r2
 800906a:	041a      	lsls	r2, r3, #16
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	43d9      	mvns	r1, r3
 8009070:	887b      	ldrh	r3, [r7, #2]
 8009072:	400b      	ands	r3, r1
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	619a      	str	r2, [r3, #24]
}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009094:	695a      	ldr	r2, [r3, #20]
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	4013      	ands	r3, r2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d006      	beq.n	80090ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800909e:	4a05      	ldr	r2, [pc, #20]	; (80090b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fa ffea 	bl	8004080 <HAL_GPIO_EXTI_Callback>
  }
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	40013c00 	.word	0x40013c00

080090b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e12b      	b.n	8009322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7fb fa52 	bl	8004588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2224      	movs	r2, #36	; 0x24
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0201 	bic.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800910a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800911a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800911c:	f001 f87c 	bl	800a218 <HAL_RCC_GetPCLK1Freq>
 8009120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	4a81      	ldr	r2, [pc, #516]	; (800932c <HAL_I2C_Init+0x274>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d807      	bhi.n	800913c <HAL_I2C_Init+0x84>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a80      	ldr	r2, [pc, #512]	; (8009330 <HAL_I2C_Init+0x278>)
 8009130:	4293      	cmp	r3, r2
 8009132:	bf94      	ite	ls
 8009134:	2301      	movls	r3, #1
 8009136:	2300      	movhi	r3, #0
 8009138:	b2db      	uxtb	r3, r3
 800913a:	e006      	b.n	800914a <HAL_I2C_Init+0x92>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a7d      	ldr	r2, [pc, #500]	; (8009334 <HAL_I2C_Init+0x27c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	bf94      	ite	ls
 8009144:	2301      	movls	r3, #1
 8009146:	2300      	movhi	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e0e7      	b.n	8009322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a78      	ldr	r2, [pc, #480]	; (8009338 <HAL_I2C_Init+0x280>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	0c9b      	lsrs	r3, r3, #18
 800915c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	4a6a      	ldr	r2, [pc, #424]	; (800932c <HAL_I2C_Init+0x274>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d802      	bhi.n	800918c <HAL_I2C_Init+0xd4>
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	3301      	adds	r3, #1
 800918a:	e009      	b.n	80091a0 <HAL_I2C_Init+0xe8>
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009192:	fb02 f303 	mul.w	r3, r2, r3
 8009196:	4a69      	ldr	r2, [pc, #420]	; (800933c <HAL_I2C_Init+0x284>)
 8009198:	fba2 2303 	umull	r2, r3, r2, r3
 800919c:	099b      	lsrs	r3, r3, #6
 800919e:	3301      	adds	r3, #1
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6812      	ldr	r2, [r2, #0]
 80091a4:	430b      	orrs	r3, r1
 80091a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	495c      	ldr	r1, [pc, #368]	; (800932c <HAL_I2C_Init+0x274>)
 80091bc:	428b      	cmp	r3, r1
 80091be:	d819      	bhi.n	80091f4 <HAL_I2C_Init+0x13c>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	1e59      	subs	r1, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80091ce:	1c59      	adds	r1, r3, #1
 80091d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091d4:	400b      	ands	r3, r1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <HAL_I2C_Init+0x138>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	1e59      	subs	r1, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e8:	3301      	adds	r3, #1
 80091ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ee:	e051      	b.n	8009294 <HAL_I2C_Init+0x1dc>
 80091f0:	2304      	movs	r3, #4
 80091f2:	e04f      	b.n	8009294 <HAL_I2C_Init+0x1dc>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d111      	bne.n	8009220 <HAL_I2C_Init+0x168>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	1e58      	subs	r0, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6859      	ldr	r1, [r3, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	440b      	add	r3, r1
 800920a:	fbb0 f3f3 	udiv	r3, r0, r3
 800920e:	3301      	adds	r3, #1
 8009210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf0c      	ite	eq
 8009218:	2301      	moveq	r3, #1
 800921a:	2300      	movne	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	e012      	b.n	8009246 <HAL_I2C_Init+0x18e>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	1e58      	subs	r0, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6859      	ldr	r1, [r3, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	0099      	lsls	r1, r3, #2
 8009230:	440b      	add	r3, r1
 8009232:	fbb0 f3f3 	udiv	r3, r0, r3
 8009236:	3301      	adds	r3, #1
 8009238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800923c:	2b00      	cmp	r3, #0
 800923e:	bf0c      	ite	eq
 8009240:	2301      	moveq	r3, #1
 8009242:	2300      	movne	r3, #0
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <HAL_I2C_Init+0x196>
 800924a:	2301      	movs	r3, #1
 800924c:	e022      	b.n	8009294 <HAL_I2C_Init+0x1dc>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10e      	bne.n	8009274 <HAL_I2C_Init+0x1bc>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	1e58      	subs	r0, r3, #1
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6859      	ldr	r1, [r3, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	440b      	add	r3, r1
 8009264:	fbb0 f3f3 	udiv	r3, r0, r3
 8009268:	3301      	adds	r3, #1
 800926a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800926e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009272:	e00f      	b.n	8009294 <HAL_I2C_Init+0x1dc>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	1e58      	subs	r0, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6859      	ldr	r1, [r3, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	0099      	lsls	r1, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	fbb0 f3f3 	udiv	r3, r0, r3
 800928a:	3301      	adds	r3, #1
 800928c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	6809      	ldr	r1, [r1, #0]
 8009298:	4313      	orrs	r3, r2
 800929a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69da      	ldr	r2, [r3, #28]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	431a      	orrs	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	6911      	ldr	r1, [r2, #16]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	68d2      	ldr	r2, [r2, #12]
 80092ce:	4311      	orrs	r1, r2
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	431a      	orrs	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0201 	orr.w	r2, r2, #1
 8009302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2220      	movs	r2, #32
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	000186a0 	.word	0x000186a0
 8009330:	001e847f 	.word	0x001e847f
 8009334:	003d08ff 	.word	0x003d08ff
 8009338:	431bde83 	.word	0x431bde83
 800933c:	10624dd3 	.word	0x10624dd3

08009340 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08c      	sub	sp, #48	; 0x30
 8009344:	af02      	add	r7, sp, #8
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	461a      	mov	r2, r3
 800934e:	4603      	mov	r3, r0
 8009350:	817b      	strh	r3, [r7, #10]
 8009352:	460b      	mov	r3, r1
 8009354:	813b      	strh	r3, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800935a:	f7fe fb61 	bl	8007a20 <HAL_GetTick>
 800935e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b20      	cmp	r3, #32
 800936e:	f040 8176 	bne.w	800965e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009372:	4b95      	ldr	r3, [pc, #596]	; (80095c8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	08db      	lsrs	r3, r3, #3
 8009378:	4a94      	ldr	r2, [pc, #592]	; (80095cc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	0a1a      	lsrs	r2, r3, #8
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009a      	lsls	r2, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	3b01      	subs	r3, #1
 8009390:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d116      	bne.n	80093c6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b2:	f043 0220 	orr.w	r2, r3, #32
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e14c      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d0db      	beq.n	800938c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d101      	bne.n	80093e2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80093de:	2302      	movs	r3, #2
 80093e0:	e13e      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d007      	beq.n	8009408 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 0201 	orr.w	r2, r2, #1
 8009406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2222      	movs	r2, #34	; 0x22
 800941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2240      	movs	r2, #64	; 0x40
 8009424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4a62      	ldr	r2, [pc, #392]	; (80095d0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8009448:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800944a:	897a      	ldrh	r2, [r7, #10]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8009450:	893a      	ldrh	r2, [r7, #8]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8009456:	88fa      	ldrh	r2, [r7, #6]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80cc 	beq.w	8009604 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	2b00      	cmp	r3, #0
 8009472:	d02d      	beq.n	80094d0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	4a56      	ldr	r2, [pc, #344]	; (80095d4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800947a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	4a55      	ldr	r2, [pc, #340]	; (80095d8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8009482:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	2200      	movs	r2, #0
 800948a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	2200      	movs	r2, #0
 8009492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	2200      	movs	r2, #0
 800949a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a0:	2200      	movs	r2, #0
 80094a2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3310      	adds	r3, #16
 80094ae:	4619      	mov	r1, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	461a      	mov	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	f7ff f8a5 	bl	8008608 <HAL_DMA_Start_IT>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80094c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f040 8087 	bne.w	80095dc <HAL_I2C_Mem_Read_DMA+0x29c>
 80094ce:	e013      	b.n	80094f8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0b3      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80094f8:	88f8      	ldrh	r0, [r7, #6]
 80094fa:	893a      	ldrh	r2, [r7, #8]
 80094fc:	8979      	ldrh	r1, [r7, #10]
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	2323      	movs	r3, #35	; 0x23
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4603      	mov	r3, r0
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 fa03 	bl	8009914 <I2C_RequestMemoryRead>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d023      	beq.n	800955c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff f93d 	bl	8008798 <HAL_DMA_Abort_IT>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	2200      	movs	r2, #0
 800952a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800953a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0201 	bic.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e081      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009560:	2b01      	cmp	r3, #1
 8009562:	d108      	bne.n	8009576 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	e007      	b.n	8009586 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009584:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	61bb      	str	r3, [r7, #24]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095b2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095c2:	605a      	str	r2, [r3, #4]
 80095c4:	e049      	b.n	800965a <HAL_I2C_Mem_Read_DMA+0x31a>
 80095c6:	bf00      	nop
 80095c8:	20000030 	.word	0x20000030
 80095cc:	14f8b589 	.word	0x14f8b589
 80095d0:	ffff0000 	.word	0xffff0000
 80095d4:	08009ae5 	.word	0x08009ae5
 80095d8:	08009c8f 	.word	0x08009c8f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f043 0210 	orr.w	r2, r3, #16
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e02d      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8009604:	88f8      	ldrh	r0, [r7, #6]
 8009606:	893a      	ldrh	r2, [r7, #8]
 8009608:	8979      	ldrh	r1, [r7, #10]
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	2323      	movs	r3, #35	; 0x23
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	4603      	mov	r3, r0
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f97d 	bl	8009914 <I2C_RequestMemoryRead>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e01d      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	617b      	str	r3, [r7, #20]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009648:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	e000      	b.n	8009660 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800965e:	2302      	movs	r3, #2
  }
}
 8009660:	4618      	mov	r0, r3
 8009662:	3728      	adds	r7, #40	; 0x28
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08a      	sub	sp, #40	; 0x28
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	460b      	mov	r3, r1
 8009676:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009678:	f7fe f9d2 	bl	8007a20 <HAL_GetTick>
 800967c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b20      	cmp	r3, #32
 800968c:	f040 8111 	bne.w	80098b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2319      	movs	r3, #25
 8009696:	2201      	movs	r2, #1
 8009698:	4988      	ldr	r1, [pc, #544]	; (80098bc <HAL_I2C_IsDeviceReady+0x254>)
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fb34 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80096a6:	2302      	movs	r3, #2
 80096a8:	e104      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_I2C_IsDeviceReady+0x50>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e0fd      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d007      	beq.n	80096de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0201 	orr.w	r2, r2, #1
 80096dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2224      	movs	r2, #36	; 0x24
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4a70      	ldr	r2, [pc, #448]	; (80098c0 <HAL_I2C_IsDeviceReady+0x258>)
 8009700:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009710:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2200      	movs	r2, #0
 800971a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 faf2 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009738:	d103      	bne.n	8009742 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009740:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e0b6      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009746:	897b      	ldrh	r3, [r7, #10]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	461a      	mov	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009754:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009756:	f7fe f963 	bl	8007a20 <HAL_GetTick>
 800975a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	bf0c      	ite	eq
 800976a:	2301      	moveq	r3, #1
 800976c:	2300      	movne	r3, #0
 800976e:	b2db      	uxtb	r3, r3
 8009770:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800977c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009780:	bf0c      	ite	eq
 8009782:	2301      	moveq	r3, #1
 8009784:	2300      	movne	r3, #0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800978a:	e025      	b.n	80097d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800978c:	f7fe f948 	bl	8007a20 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d302      	bcc.n	80097a2 <HAL_I2C_IsDeviceReady+0x13a>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d103      	bne.n	80097aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	22a0      	movs	r2, #160	; 0xa0
 80097a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	bf0c      	ite	eq
 80097b8:	2301      	moveq	r3, #1
 80097ba:	2300      	movne	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ce:	bf0c      	ite	eq
 80097d0:	2301      	moveq	r3, #1
 80097d2:	2300      	movne	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2ba0      	cmp	r3, #160	; 0xa0
 80097e2:	d005      	beq.n	80097f0 <HAL_I2C_IsDeviceReady+0x188>
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_I2C_IsDeviceReady+0x188>
 80097ea:	7dbb      	ldrb	r3, [r7, #22]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0cd      	beq.n	800978c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b02      	cmp	r3, #2
 8009804:	d129      	bne.n	800985a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009814:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	2319      	movs	r3, #25
 8009832:	2201      	movs	r2, #1
 8009834:	4921      	ldr	r1, [pc, #132]	; (80098bc <HAL_I2C_IsDeviceReady+0x254>)
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fa66 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e036      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2220      	movs	r2, #32
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e02c      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009868:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009872:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2319      	movs	r3, #25
 800987a:	2201      	movs	r2, #1
 800987c:	490f      	ldr	r1, [pc, #60]	; (80098bc <HAL_I2C_IsDeviceReady+0x254>)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fa42 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e012      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	3301      	adds	r3, #1
 8009892:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	f4ff af32 	bcc.w	8009702 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80098b2:	2302      	movs	r3, #2
  }
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3720      	adds	r7, #32
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	00100002 	.word	0x00100002
 80098c0:	ffff0000 	.word	0xffff0000

080098c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	4608      	mov	r0, r1
 800991e:	4611      	mov	r1, r2
 8009920:	461a      	mov	r2, r3
 8009922:	4603      	mov	r3, r0
 8009924:	817b      	strh	r3, [r7, #10]
 8009926:	460b      	mov	r3, r1
 8009928:	813b      	strh	r3, [r7, #8]
 800992a:	4613      	mov	r3, r2
 800992c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800993c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800994c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	2200      	movs	r2, #0
 8009956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f9d4 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009974:	d103      	bne.n	800997e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800997c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e0aa      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009982:	897b      	ldrh	r3, [r7, #10]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	6a3a      	ldr	r2, [r7, #32]
 8009996:	4952      	ldr	r1, [pc, #328]	; (8009ae0 <I2C_RequestMemoryRead+0x1cc>)
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 fa0c 	bl	8009db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e097      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	617b      	str	r3, [r7, #20]
 80099bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c0:	6a39      	ldr	r1, [r7, #32]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 fa76 	bl	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d107      	bne.n	80099e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e076      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d105      	bne.n	80099fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099f0:	893b      	ldrh	r3, [r7, #8]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	611a      	str	r2, [r3, #16]
 80099fa:	e021      	b.n	8009a40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099fc:	893b      	ldrh	r3, [r7, #8]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0c:	6a39      	ldr	r1, [r7, #32]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fa50 	bl	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e050      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a36:	893b      	ldrh	r3, [r7, #8]
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a42:	6a39      	ldr	r1, [r7, #32]
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fa35 	bl	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00d      	beq.n	8009a6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d107      	bne.n	8009a68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e035      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 f93d 	bl	8009d08 <I2C_WaitOnFlagUntilTimeout>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa2:	d103      	bne.n	8009aac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e013      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ab0:	897b      	ldrh	r3, [r7, #10]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	4906      	ldr	r1, [pc, #24]	; (8009ae0 <I2C_RequestMemoryRead+0x1cc>)
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f975 	bl	8009db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e000      	b.n	8009ad8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	00010002 	.word	0x00010002

08009ae4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b00:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009b16:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b24:	2200      	movs	r2, #0
 8009b26:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	2200      	movs	r2, #0
 8009b36:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8009b38:	7cfb      	ldrb	r3, [r7, #19]
 8009b3a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009b3e:	2b21      	cmp	r3, #33	; 0x21
 8009b40:	d007      	beq.n	8009b52 <I2C_DMAXferCplt+0x6e>
 8009b42:	7cfb      	ldrb	r3, [r7, #19]
 8009b44:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8009b48:	2b22      	cmp	r3, #34	; 0x22
 8009b4a:	d131      	bne.n	8009bb0 <I2C_DMAXferCplt+0xcc>
 8009b4c:	7cbb      	ldrb	r3, [r7, #18]
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d12e      	bne.n	8009bb0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b60:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2200      	movs	r2, #0
 8009b66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009b68:	7cfb      	ldrb	r3, [r7, #19]
 8009b6a:	2b29      	cmp	r3, #41	; 0x29
 8009b6c:	d10a      	bne.n	8009b84 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2221      	movs	r2, #33	; 0x21
 8009b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2228      	movs	r2, #40	; 0x28
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009b7c:	6978      	ldr	r0, [r7, #20]
 8009b7e:	f7ff feab 	bl	80098d8 <HAL_I2C_SlaveTxCpltCallback>
 8009b82:	e00c      	b.n	8009b9e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009b84:	7cfb      	ldrb	r3, [r7, #19]
 8009b86:	2b2a      	cmp	r3, #42	; 0x2a
 8009b88:	d109      	bne.n	8009b9e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2222      	movs	r2, #34	; 0x22
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2228      	movs	r2, #40	; 0x28
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009b98:	6978      	ldr	r0, [r7, #20]
 8009b9a:	f7ff fea7 	bl	80098ec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009bac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009bae:	e06a      	b.n	8009c86 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d064      	beq.n	8009c86 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d107      	bne.n	8009bd6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bd4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009be4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009bec:	d009      	beq.n	8009c02 <I2C_DMAXferCplt+0x11e>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d006      	beq.n	8009c02 <I2C_DMAXferCplt+0x11e>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009bfa:	d002      	beq.n	8009c02 <I2C_DMAXferCplt+0x11e>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d107      	bne.n	8009c12 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c20:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c30:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8009c40:	6978      	ldr	r0, [r7, #20]
 8009c42:	f7ff fe5d 	bl	8009900 <HAL_I2C_ErrorCallback>
}
 8009c46:	e01e      	b.n	8009c86 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2220      	movs	r2, #32
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d10a      	bne.n	8009c72 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7fa f9f4 	bl	8004058 <HAL_I2C_MemRxCpltCallback>
}
 8009c70:	e009      	b.n	8009c86 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2212      	movs	r2, #18
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009c80:	6978      	ldr	r0, [r7, #20]
 8009c82:	f7ff fe1f 	bl	80098c4 <HAL_I2C_MasterRxCpltCallback>
}
 8009c86:	bf00      	nop
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d003      	beq.n	8009cac <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca8:	2200      	movs	r2, #0
 8009caa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	2200      	movs	r2, #0
 8009cba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7fe ff17 	bl	8008af0 <HAL_DMA_GetError>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d01b      	beq.n	8009d00 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f043 0210 	orr.w	r2, r3, #16
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fe00 	bl	8009900 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d18:	e025      	b.n	8009d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d20:	d021      	beq.n	8009d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d22:	f7fd fe7d 	bl	8007a20 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d116      	bne.n	8009d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2220      	movs	r2, #32
 8009d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	f043 0220 	orr.w	r2, r3, #32
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e023      	b.n	8009dae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	0c1b      	lsrs	r3, r3, #16
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d10d      	bne.n	8009d8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	43da      	mvns	r2, r3
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bf0c      	ite	eq
 8009d82:	2301      	moveq	r3, #1
 8009d84:	2300      	movne	r3, #0
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	461a      	mov	r2, r3
 8009d8a:	e00c      	b.n	8009da6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	43da      	mvns	r2, r3
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	4013      	ands	r3, r2
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	2300      	movne	r3, #0
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	79fb      	ldrb	r3, [r7, #7]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d0b6      	beq.n	8009d1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b084      	sub	sp, #16
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dc4:	e051      	b.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dd4:	d123      	bne.n	8009e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009de4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	f043 0204 	orr.w	r2, r3, #4
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e046      	b.n	8009eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e24:	d021      	beq.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e26:	f7fd fdfb 	bl	8007a20 <HAL_GetTick>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d302      	bcc.n	8009e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d116      	bne.n	8009e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2220      	movs	r2, #32
 8009e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f043 0220 	orr.w	r2, r3, #32
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e020      	b.n	8009eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	0c1b      	lsrs	r3, r3, #16
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d10c      	bne.n	8009e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	43da      	mvns	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf14      	ite	ne
 8009e86:	2301      	movne	r3, #1
 8009e88:	2300      	moveq	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	e00b      	b.n	8009ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	43da      	mvns	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bf14      	ite	ne
 8009ea0:	2301      	movne	r3, #1
 8009ea2:	2300      	moveq	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d18d      	bne.n	8009dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ec0:	e02d      	b.n	8009f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f000 f837 	bl	8009f36 <I2C_IsAcknowledgeFailed>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e02d      	b.n	8009f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed8:	d021      	beq.n	8009f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eda:	f7fd fda1 	bl	8007a20 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d302      	bcc.n	8009ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d116      	bne.n	8009f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0a:	f043 0220 	orr.w	r2, r3, #32
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e007      	b.n	8009f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d1ca      	bne.n	8009ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f4c:	d11b      	bne.n	8009f86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	f043 0204 	orr.w	r2, r3, #4
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e000      	b.n	8009f88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	603b      	str	r3, [r7, #0]
 8009fa2:	4b20      	ldr	r3, [pc, #128]	; (800a024 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	4a1f      	ldr	r2, [pc, #124]	; (800a024 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fac:	6413      	str	r3, [r2, #64]	; 0x40
 8009fae:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <HAL_PWREx_EnableOverDrive+0x90>)
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009fba:	4b1b      	ldr	r3, [pc, #108]	; (800a028 <HAL_PWREx_EnableOverDrive+0x94>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009fc0:	f7fd fd2e 	bl	8007a20 <HAL_GetTick>
 8009fc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009fc6:	e009      	b.n	8009fdc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009fc8:	f7fd fd2a 	bl	8007a20 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fd6:	d901      	bls.n	8009fdc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e01f      	b.n	800a01c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009fdc:	4b13      	ldr	r3, [pc, #76]	; (800a02c <HAL_PWREx_EnableOverDrive+0x98>)
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe8:	d1ee      	bne.n	8009fc8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009fec:	2201      	movs	r2, #1
 8009fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ff0:	f7fd fd16 	bl	8007a20 <HAL_GetTick>
 8009ff4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ff6:	e009      	b.n	800a00c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ff8:	f7fd fd12 	bl	8007a20 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a006:	d901      	bls.n	800a00c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e007      	b.n	800a01c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a00c:	4b07      	ldr	r3, [pc, #28]	; (800a02c <HAL_PWREx_EnableOverDrive+0x98>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a018:	d1ee      	bne.n	8009ff8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40023800 	.word	0x40023800
 800a028:	420e0040 	.word	0x420e0040
 800a02c:	40007000 	.word	0x40007000
 800a030:	420e0044 	.word	0x420e0044

0800a034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e0cc      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a048:	4b68      	ldr	r3, [pc, #416]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	429a      	cmp	r2, r3
 800a054:	d90c      	bls.n	800a070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a056:	4b65      	ldr	r3, [pc, #404]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	b2d2      	uxtb	r2, r2
 800a05c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a05e:	4b63      	ldr	r3, [pc, #396]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d001      	beq.n	800a070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0b8      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d020      	beq.n	800a0be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a088:	4b59      	ldr	r3, [pc, #356]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	4a58      	ldr	r2, [pc, #352]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a08e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a0a0:	4b53      	ldr	r3, [pc, #332]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	4a52      	ldr	r2, [pc, #328]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a0aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0ac:	4b50      	ldr	r3, [pc, #320]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	494d      	ldr	r1, [pc, #308]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d044      	beq.n	800a154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d107      	bne.n	800a0e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0d2:	4b47      	ldr	r3, [pc, #284]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d119      	bne.n	800a112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e07f      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d003      	beq.n	800a0f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d107      	bne.n	800a102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0f2:	4b3f      	ldr	r3, [pc, #252]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d109      	bne.n	800a112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e06f      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a102:	4b3b      	ldr	r3, [pc, #236]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0302 	and.w	r3, r3, #2
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e067      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a112:	4b37      	ldr	r3, [pc, #220]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f023 0203 	bic.w	r2, r3, #3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4934      	ldr	r1, [pc, #208]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a120:	4313      	orrs	r3, r2
 800a122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a124:	f7fd fc7c 	bl	8007a20 <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a12a:	e00a      	b.n	800a142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a12c:	f7fd fc78 	bl	8007a20 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e04f      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a142:	4b2b      	ldr	r3, [pc, #172]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 020c 	and.w	r2, r3, #12
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	429a      	cmp	r2, r3
 800a152:	d1eb      	bne.n	800a12c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a154:	4b25      	ldr	r3, [pc, #148]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 030f 	and.w	r3, r3, #15
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d20c      	bcs.n	800a17c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a162:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	b2d2      	uxtb	r2, r2
 800a168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a16a:	4b20      	ldr	r3, [pc, #128]	; (800a1ec <HAL_RCC_ClockConfig+0x1b8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d001      	beq.n	800a17c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e032      	b.n	800a1e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d008      	beq.n	800a19a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a188:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4916      	ldr	r1, [pc, #88]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a196:	4313      	orrs	r3, r2
 800a198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0308 	and.w	r3, r3, #8
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d009      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	490e      	ldr	r1, [pc, #56]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a1ba:	f000 f855 	bl	800a268 <HAL_RCC_GetSysClockFreq>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	; (800a1f0 <HAL_RCC_ClockConfig+0x1bc>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	091b      	lsrs	r3, r3, #4
 800a1c6:	f003 030f 	and.w	r3, r3, #15
 800a1ca:	490a      	ldr	r1, [pc, #40]	; (800a1f4 <HAL_RCC_ClockConfig+0x1c0>)
 800a1cc:	5ccb      	ldrb	r3, [r1, r3]
 800a1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d2:	4a09      	ldr	r2, [pc, #36]	; (800a1f8 <HAL_RCC_ClockConfig+0x1c4>)
 800a1d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a1d6:	4b09      	ldr	r3, [pc, #36]	; (800a1fc <HAL_RCC_ClockConfig+0x1c8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fd fbdc 	bl	8007998 <HAL_InitTick>

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40023c00 	.word	0x40023c00
 800a1f0:	40023800 	.word	0x40023800
 800a1f4:	08015a3c 	.word	0x08015a3c
 800a1f8:	20000030 	.word	0x20000030
 800a1fc:	20000044 	.word	0x20000044

0800a200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a200:	b480      	push	{r7}
 800a202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a204:	4b03      	ldr	r3, [pc, #12]	; (800a214 <HAL_RCC_GetHCLKFreq+0x14>)
 800a206:	681b      	ldr	r3, [r3, #0]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000030 	.word	0x20000030

0800a218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a21c:	f7ff fff0 	bl	800a200 <HAL_RCC_GetHCLKFreq>
 800a220:	4602      	mov	r2, r0
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	0a9b      	lsrs	r3, r3, #10
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	4903      	ldr	r1, [pc, #12]	; (800a23c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a22e:	5ccb      	ldrb	r3, [r1, r3]
 800a230:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a234:	4618      	mov	r0, r3
 800a236:	bd80      	pop	{r7, pc}
 800a238:	40023800 	.word	0x40023800
 800a23c:	08015a4c 	.word	0x08015a4c

0800a240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a244:	f7ff ffdc 	bl	800a200 <HAL_RCC_GetHCLKFreq>
 800a248:	4602      	mov	r2, r0
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	0b5b      	lsrs	r3, r3, #13
 800a250:	f003 0307 	and.w	r3, r3, #7
 800a254:	4903      	ldr	r1, [pc, #12]	; (800a264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a256:	5ccb      	ldrb	r3, [r1, r3]
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	40023800 	.word	0x40023800
 800a264:	08015a4c 	.word	0x08015a4c

0800a268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a26c:	b0ae      	sub	sp, #184	; 0xb8
 800a26e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a28e:	4bcb      	ldr	r3, [pc, #812]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	2b0c      	cmp	r3, #12
 800a298:	f200 8206 	bhi.w	800a6a8 <HAL_RCC_GetSysClockFreq+0x440>
 800a29c:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a2:	bf00      	nop
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a6a9 	.word	0x0800a6a9
 800a2ac:	0800a6a9 	.word	0x0800a6a9
 800a2b0:	0800a6a9 	.word	0x0800a6a9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	0800a6a9 	.word	0x0800a6a9
 800a2bc:	0800a6a9 	.word	0x0800a6a9
 800a2c0:	0800a6a9 	.word	0x0800a6a9
 800a2c4:	0800a2e9 	.word	0x0800a2e9
 800a2c8:	0800a6a9 	.word	0x0800a6a9
 800a2cc:	0800a6a9 	.word	0x0800a6a9
 800a2d0:	0800a6a9 	.word	0x0800a6a9
 800a2d4:	0800a4d9 	.word	0x0800a4d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a2d8:	4bb9      	ldr	r3, [pc, #740]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800a2da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800a2de:	e1e7      	b.n	800a6b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a2e0:	4bb8      	ldr	r3, [pc, #736]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800a2e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a2e6:	e1e3      	b.n	800a6b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a2e8:	4bb4      	ldr	r3, [pc, #720]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a2f4:	4bb1      	ldr	r3, [pc, #708]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d071      	beq.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a300:	4bae      	ldr	r3, [pc, #696]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	099b      	lsrs	r3, r3, #6
 800a306:	2200      	movs	r2, #0
 800a308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a30c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800a310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a31c:	2300      	movs	r3, #0
 800a31e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a326:	4622      	mov	r2, r4
 800a328:	462b      	mov	r3, r5
 800a32a:	f04f 0000 	mov.w	r0, #0
 800a32e:	f04f 0100 	mov.w	r1, #0
 800a332:	0159      	lsls	r1, r3, #5
 800a334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a338:	0150      	lsls	r0, r2, #5
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4621      	mov	r1, r4
 800a340:	1a51      	subs	r1, r2, r1
 800a342:	6439      	str	r1, [r7, #64]	; 0x40
 800a344:	4629      	mov	r1, r5
 800a346:	eb63 0301 	sbc.w	r3, r3, r1
 800a34a:	647b      	str	r3, [r7, #68]	; 0x44
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800a358:	4649      	mov	r1, r9
 800a35a:	018b      	lsls	r3, r1, #6
 800a35c:	4641      	mov	r1, r8
 800a35e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a362:	4641      	mov	r1, r8
 800a364:	018a      	lsls	r2, r1, #6
 800a366:	4641      	mov	r1, r8
 800a368:	1a51      	subs	r1, r2, r1
 800a36a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a36c:	4649      	mov	r1, r9
 800a36e:	eb63 0301 	sbc.w	r3, r3, r1
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	f04f 0300 	mov.w	r3, #0
 800a37c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800a380:	4649      	mov	r1, r9
 800a382:	00cb      	lsls	r3, r1, #3
 800a384:	4641      	mov	r1, r8
 800a386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a38a:	4641      	mov	r1, r8
 800a38c:	00ca      	lsls	r2, r1, #3
 800a38e:	4610      	mov	r0, r2
 800a390:	4619      	mov	r1, r3
 800a392:	4603      	mov	r3, r0
 800a394:	4622      	mov	r2, r4
 800a396:	189b      	adds	r3, r3, r2
 800a398:	633b      	str	r3, [r7, #48]	; 0x30
 800a39a:	462b      	mov	r3, r5
 800a39c:	460a      	mov	r2, r1
 800a39e:	eb42 0303 	adc.w	r3, r2, r3
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	f04f 0300 	mov.w	r3, #0
 800a3ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	024b      	lsls	r3, r1, #9
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	024a      	lsls	r2, r1, #9
 800a3be:	4610      	mov	r0, r2
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a3d4:	f7f6 fca8 	bl	8000d28 <__aeabi_uldivmod>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4613      	mov	r3, r2
 800a3de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3e2:	e067      	b.n	800a4b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3e4:	4b75      	ldr	r3, [pc, #468]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	099b      	lsrs	r3, r3, #6
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800a3f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3fe:	2300      	movs	r3, #0
 800a400:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a402:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800a406:	4622      	mov	r2, r4
 800a408:	462b      	mov	r3, r5
 800a40a:	f04f 0000 	mov.w	r0, #0
 800a40e:	f04f 0100 	mov.w	r1, #0
 800a412:	0159      	lsls	r1, r3, #5
 800a414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a418:	0150      	lsls	r0, r2, #5
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4621      	mov	r1, r4
 800a420:	1a51      	subs	r1, r2, r1
 800a422:	62b9      	str	r1, [r7, #40]	; 0x28
 800a424:	4629      	mov	r1, r5
 800a426:	eb63 0301 	sbc.w	r3, r3, r1
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a42c:	f04f 0200 	mov.w	r2, #0
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800a438:	4649      	mov	r1, r9
 800a43a:	018b      	lsls	r3, r1, #6
 800a43c:	4641      	mov	r1, r8
 800a43e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a442:	4641      	mov	r1, r8
 800a444:	018a      	lsls	r2, r1, #6
 800a446:	4641      	mov	r1, r8
 800a448:	ebb2 0a01 	subs.w	sl, r2, r1
 800a44c:	4649      	mov	r1, r9
 800a44e:	eb63 0b01 	sbc.w	fp, r3, r1
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a45e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a466:	4692      	mov	sl, r2
 800a468:	469b      	mov	fp, r3
 800a46a:	4623      	mov	r3, r4
 800a46c:	eb1a 0303 	adds.w	r3, sl, r3
 800a470:	623b      	str	r3, [r7, #32]
 800a472:	462b      	mov	r3, r5
 800a474:	eb4b 0303 	adc.w	r3, fp, r3
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
 800a47a:	f04f 0200 	mov.w	r2, #0
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800a486:	4629      	mov	r1, r5
 800a488:	028b      	lsls	r3, r1, #10
 800a48a:	4621      	mov	r1, r4
 800a48c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a490:	4621      	mov	r1, r4
 800a492:	028a      	lsls	r2, r1, #10
 800a494:	4610      	mov	r0, r2
 800a496:	4619      	mov	r1, r3
 800a498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a49c:	2200      	movs	r2, #0
 800a49e:	673b      	str	r3, [r7, #112]	; 0x70
 800a4a0:	677a      	str	r2, [r7, #116]	; 0x74
 800a4a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800a4a6:	f7f6 fc3f 	bl	8000d28 <__aeabi_uldivmod>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a4b4:	4b41      	ldr	r3, [pc, #260]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	0c1b      	lsrs	r3, r3, #16
 800a4ba:	f003 0303 	and.w	r3, r3, #3
 800a4be:	3301      	adds	r3, #1
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800a4c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a4d6:	e0eb      	b.n	800a6b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4d8:	4b38      	ldr	r3, [pc, #224]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4e4:	4b35      	ldr	r3, [pc, #212]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d06b      	beq.n	800a5c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4f0:	4b32      	ldr	r3, [pc, #200]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x354>)
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	099b      	lsrs	r3, r3, #6
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	663b      	str	r3, [r7, #96]	; 0x60
 800a504:	2300      	movs	r3, #0
 800a506:	667b      	str	r3, [r7, #100]	; 0x64
 800a508:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800a50c:	4622      	mov	r2, r4
 800a50e:	462b      	mov	r3, r5
 800a510:	f04f 0000 	mov.w	r0, #0
 800a514:	f04f 0100 	mov.w	r1, #0
 800a518:	0159      	lsls	r1, r3, #5
 800a51a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a51e:	0150      	lsls	r0, r2, #5
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4621      	mov	r1, r4
 800a526:	1a51      	subs	r1, r2, r1
 800a528:	61b9      	str	r1, [r7, #24]
 800a52a:	4629      	mov	r1, r5
 800a52c:	eb63 0301 	sbc.w	r3, r3, r1
 800a530:	61fb      	str	r3, [r7, #28]
 800a532:	f04f 0200 	mov.w	r2, #0
 800a536:	f04f 0300 	mov.w	r3, #0
 800a53a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a53e:	4659      	mov	r1, fp
 800a540:	018b      	lsls	r3, r1, #6
 800a542:	4651      	mov	r1, sl
 800a544:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a548:	4651      	mov	r1, sl
 800a54a:	018a      	lsls	r2, r1, #6
 800a54c:	4651      	mov	r1, sl
 800a54e:	ebb2 0801 	subs.w	r8, r2, r1
 800a552:	4659      	mov	r1, fp
 800a554:	eb63 0901 	sbc.w	r9, r3, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a564:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a568:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a56c:	4690      	mov	r8, r2
 800a56e:	4699      	mov	r9, r3
 800a570:	4623      	mov	r3, r4
 800a572:	eb18 0303 	adds.w	r3, r8, r3
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	462b      	mov	r3, r5
 800a57a:	eb49 0303 	adc.w	r3, r9, r3
 800a57e:	617b      	str	r3, [r7, #20]
 800a580:	f04f 0200 	mov.w	r2, #0
 800a584:	f04f 0300 	mov.w	r3, #0
 800a588:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a58c:	4629      	mov	r1, r5
 800a58e:	024b      	lsls	r3, r1, #9
 800a590:	4621      	mov	r1, r4
 800a592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a596:	4621      	mov	r1, r4
 800a598:	024a      	lsls	r2, r1, #9
 800a59a:	4610      	mov	r0, r2
 800a59c:	4619      	mov	r1, r3
 800a59e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a5a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5ac:	f7f6 fbbc 	bl	8000d28 <__aeabi_uldivmod>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5ba:	e065      	b.n	800a688 <HAL_RCC_GetSysClockFreq+0x420>
 800a5bc:	40023800 	.word	0x40023800
 800a5c0:	00f42400 	.word	0x00f42400
 800a5c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5c8:	4b3d      	ldr	r3, [pc, #244]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	099b      	lsrs	r3, r3, #6
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a5d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a5da:	2300      	movs	r3, #0
 800a5dc:	657b      	str	r3, [r7, #84]	; 0x54
 800a5de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a5e2:	4642      	mov	r2, r8
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	f04f 0000 	mov.w	r0, #0
 800a5ea:	f04f 0100 	mov.w	r1, #0
 800a5ee:	0159      	lsls	r1, r3, #5
 800a5f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5f4:	0150      	lsls	r0, r2, #5
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	1a51      	subs	r1, r2, r1
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	4649      	mov	r1, r9
 800a602:	eb63 0301 	sbc.w	r3, r3, r1
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a614:	4659      	mov	r1, fp
 800a616:	018b      	lsls	r3, r1, #6
 800a618:	4651      	mov	r1, sl
 800a61a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a61e:	4651      	mov	r1, sl
 800a620:	018a      	lsls	r2, r1, #6
 800a622:	4651      	mov	r1, sl
 800a624:	1a54      	subs	r4, r2, r1
 800a626:	4659      	mov	r1, fp
 800a628:	eb63 0501 	sbc.w	r5, r3, r1
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	00eb      	lsls	r3, r5, #3
 800a636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a63a:	00e2      	lsls	r2, r4, #3
 800a63c:	4614      	mov	r4, r2
 800a63e:	461d      	mov	r5, r3
 800a640:	4643      	mov	r3, r8
 800a642:	18e3      	adds	r3, r4, r3
 800a644:	603b      	str	r3, [r7, #0]
 800a646:	464b      	mov	r3, r9
 800a648:	eb45 0303 	adc.w	r3, r5, r3
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a65a:	4629      	mov	r1, r5
 800a65c:	028b      	lsls	r3, r1, #10
 800a65e:	4621      	mov	r1, r4
 800a660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a664:	4621      	mov	r1, r4
 800a666:	028a      	lsls	r2, r1, #10
 800a668:	4610      	mov	r0, r2
 800a66a:	4619      	mov	r1, r3
 800a66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a670:	2200      	movs	r2, #0
 800a672:	64bb      	str	r3, [r7, #72]	; 0x48
 800a674:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a676:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a67a:	f7f6 fb55 	bl	8000d28 <__aeabi_uldivmod>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4613      	mov	r3, r2
 800a684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	0f1b      	lsrs	r3, r3, #28
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a69a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a6a6:	e003      	b.n	800a6b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a6aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a6ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	37b8      	adds	r7, #184	; 0xb8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6be:	bf00      	nop
 800a6c0:	40023800 	.word	0x40023800
 800a6c4:	00f42400 	.word	0x00f42400

0800a6c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e28d      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 8083 	beq.w	800a7ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a6e8:	4b94      	ldr	r3, [pc, #592]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f003 030c 	and.w	r3, r3, #12
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d019      	beq.n	800a728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a6f4:	4b91      	ldr	r3, [pc, #580]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d106      	bne.n	800a70e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a700:	4b8e      	ldr	r3, [pc, #568]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a70c:	d00c      	beq.n	800a728 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a70e:	4b8b      	ldr	r3, [pc, #556]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a716:	2b0c      	cmp	r3, #12
 800a718:	d112      	bne.n	800a740 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a71a:	4b88      	ldr	r3, [pc, #544]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a726:	d10b      	bne.n	800a740 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a728:	4b84      	ldr	r3, [pc, #528]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d05b      	beq.n	800a7ec <HAL_RCC_OscConfig+0x124>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d157      	bne.n	800a7ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e25a      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a748:	d106      	bne.n	800a758 <HAL_RCC_OscConfig+0x90>
 800a74a:	4b7c      	ldr	r3, [pc, #496]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a7b      	ldr	r2, [pc, #492]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	e01d      	b.n	800a794 <HAL_RCC_OscConfig+0xcc>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a760:	d10c      	bne.n	800a77c <HAL_RCC_OscConfig+0xb4>
 800a762:	4b76      	ldr	r3, [pc, #472]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a75      	ldr	r2, [pc, #468]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	4b73      	ldr	r3, [pc, #460]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a72      	ldr	r2, [pc, #456]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	e00b      	b.n	800a794 <HAL_RCC_OscConfig+0xcc>
 800a77c:	4b6f      	ldr	r3, [pc, #444]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a6e      	ldr	r2, [pc, #440]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	4b6c      	ldr	r3, [pc, #432]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a6b      	ldr	r2, [pc, #428]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a78e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d013      	beq.n	800a7c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79c:	f7fd f940 	bl	8007a20 <HAL_GetTick>
 800a7a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7a2:	e008      	b.n	800a7b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7a4:	f7fd f93c 	bl	8007a20 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b64      	cmp	r3, #100	; 0x64
 800a7b0:	d901      	bls.n	800a7b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e21f      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7b6:	4b61      	ldr	r3, [pc, #388]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0f0      	beq.n	800a7a4 <HAL_RCC_OscConfig+0xdc>
 800a7c2:	e014      	b.n	800a7ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c4:	f7fd f92c 	bl	8007a20 <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7cc:	f7fd f928 	bl	8007a20 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b64      	cmp	r3, #100	; 0x64
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e20b      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7de:	4b57      	ldr	r3, [pc, #348]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f0      	bne.n	800a7cc <HAL_RCC_OscConfig+0x104>
 800a7ea:	e000      	b.n	800a7ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0302 	and.w	r3, r3, #2
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d06f      	beq.n	800a8da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a7fa:	4b50      	ldr	r3, [pc, #320]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 030c 	and.w	r3, r3, #12
 800a802:	2b00      	cmp	r3, #0
 800a804:	d017      	beq.n	800a836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a806:	4b4d      	ldr	r3, [pc, #308]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a80e:	2b08      	cmp	r3, #8
 800a810:	d105      	bne.n	800a81e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a812:	4b4a      	ldr	r3, [pc, #296]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a81e:	4b47      	ldr	r3, [pc, #284]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a826:	2b0c      	cmp	r3, #12
 800a828:	d11c      	bne.n	800a864 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a82a:	4b44      	ldr	r3, [pc, #272]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d116      	bne.n	800a864 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a836:	4b41      	ldr	r3, [pc, #260]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d005      	beq.n	800a84e <HAL_RCC_OscConfig+0x186>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d001      	beq.n	800a84e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e1d3      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a84e:	4b3b      	ldr	r3, [pc, #236]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4937      	ldr	r1, [pc, #220]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a862:	e03a      	b.n	800a8da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d020      	beq.n	800a8ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a86c:	4b34      	ldr	r3, [pc, #208]	; (800a940 <HAL_RCC_OscConfig+0x278>)
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a872:	f7fd f8d5 	bl	8007a20 <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a87a:	f7fd f8d1 	bl	8007a20 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e1b4      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a88c:	4b2b      	ldr	r3, [pc, #172]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0f0      	beq.n	800a87a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a898:	4b28      	ldr	r3, [pc, #160]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	4925      	ldr	r1, [pc, #148]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	600b      	str	r3, [r1, #0]
 800a8ac:	e015      	b.n	800a8da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8ae:	4b24      	ldr	r3, [pc, #144]	; (800a940 <HAL_RCC_OscConfig+0x278>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b4:	f7fd f8b4 	bl	8007a20 <HAL_GetTick>
 800a8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8ba:	e008      	b.n	800a8ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8bc:	f7fd f8b0 	bl	8007a20 <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d901      	bls.n	800a8ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e193      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8ce:	4b1b      	ldr	r3, [pc, #108]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f0      	bne.n	800a8bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d036      	beq.n	800a954 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d016      	beq.n	800a91c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8ee:	4b15      	ldr	r3, [pc, #84]	; (800a944 <HAL_RCC_OscConfig+0x27c>)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8f4:	f7fd f894 	bl	8007a20 <HAL_GetTick>
 800a8f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8fc:	f7fd f890 	bl	8007a20 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e173      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <HAL_RCC_OscConfig+0x274>)
 800a910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f0      	beq.n	800a8fc <HAL_RCC_OscConfig+0x234>
 800a91a:	e01b      	b.n	800a954 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <HAL_RCC_OscConfig+0x27c>)
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a922:	f7fd f87d 	bl	8007a20 <HAL_GetTick>
 800a926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a928:	e00e      	b.n	800a948 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a92a:	f7fd f879 	bl	8007a20 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	2b02      	cmp	r3, #2
 800a936:	d907      	bls.n	800a948 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a938:	2303      	movs	r3, #3
 800a93a:	e15c      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
 800a93c:	40023800 	.word	0x40023800
 800a940:	42470000 	.word	0x42470000
 800a944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a948:	4b8a      	ldr	r3, [pc, #552]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1ea      	bne.n	800a92a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8097 	beq.w	800aa90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a962:	2300      	movs	r3, #0
 800a964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a966:	4b83      	ldr	r3, [pc, #524]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10f      	bne.n	800a992 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a972:	2300      	movs	r3, #0
 800a974:	60bb      	str	r3, [r7, #8]
 800a976:	4b7f      	ldr	r3, [pc, #508]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	4a7e      	ldr	r2, [pc, #504]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a97c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a980:	6413      	str	r3, [r2, #64]	; 0x40
 800a982:	4b7c      	ldr	r3, [pc, #496]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a98a:	60bb      	str	r3, [r7, #8]
 800a98c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a992:	4b79      	ldr	r3, [pc, #484]	; (800ab78 <HAL_RCC_OscConfig+0x4b0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d118      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a99e:	4b76      	ldr	r3, [pc, #472]	; (800ab78 <HAL_RCC_OscConfig+0x4b0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a75      	ldr	r2, [pc, #468]	; (800ab78 <HAL_RCC_OscConfig+0x4b0>)
 800a9a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9aa:	f7fd f839 	bl	8007a20 <HAL_GetTick>
 800a9ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b0:	e008      	b.n	800a9c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9b2:	f7fd f835 	bl	8007a20 <HAL_GetTick>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	1ad3      	subs	r3, r2, r3
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d901      	bls.n	800a9c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e118      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9c4:	4b6c      	ldr	r3, [pc, #432]	; (800ab78 <HAL_RCC_OscConfig+0x4b0>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0f0      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d106      	bne.n	800a9e6 <HAL_RCC_OscConfig+0x31e>
 800a9d8:	4b66      	ldr	r3, [pc, #408]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9dc:	4a65      	ldr	r2, [pc, #404]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a9e4:	e01c      	b.n	800aa20 <HAL_RCC_OscConfig+0x358>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	d10c      	bne.n	800aa08 <HAL_RCC_OscConfig+0x340>
 800a9ee:	4b61      	ldr	r3, [pc, #388]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	4a60      	ldr	r2, [pc, #384]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a9f4:	f043 0304 	orr.w	r3, r3, #4
 800a9f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a9fa:	4b5e      	ldr	r3, [pc, #376]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	4a5d      	ldr	r2, [pc, #372]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa00:	f043 0301 	orr.w	r3, r3, #1
 800aa04:	6713      	str	r3, [r2, #112]	; 0x70
 800aa06:	e00b      	b.n	800aa20 <HAL_RCC_OscConfig+0x358>
 800aa08:	4b5a      	ldr	r3, [pc, #360]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa0c:	4a59      	ldr	r2, [pc, #356]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa0e:	f023 0301 	bic.w	r3, r3, #1
 800aa12:	6713      	str	r3, [r2, #112]	; 0x70
 800aa14:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa18:	4a56      	ldr	r2, [pc, #344]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa1a:	f023 0304 	bic.w	r3, r3, #4
 800aa1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d015      	beq.n	800aa54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa28:	f7fc fffa 	bl	8007a20 <HAL_GetTick>
 800aa2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa2e:	e00a      	b.n	800aa46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa30:	f7fc fff6 	bl	8007a20 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e0d7      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa46:	4b4b      	ldr	r3, [pc, #300]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4a:	f003 0302 	and.w	r3, r3, #2
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0ee      	beq.n	800aa30 <HAL_RCC_OscConfig+0x368>
 800aa52:	e014      	b.n	800aa7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa54:	f7fc ffe4 	bl	8007a20 <HAL_GetTick>
 800aa58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa5a:	e00a      	b.n	800aa72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa5c:	f7fc ffe0 	bl	8007a20 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e0c1      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa72:	4b40      	ldr	r3, [pc, #256]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1ee      	bne.n	800aa5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d105      	bne.n	800aa90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa84:	4b3b      	ldr	r3, [pc, #236]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa88:	4a3a      	ldr	r2, [pc, #232]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80ad 	beq.w	800abf4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa9a:	4b36      	ldr	r3, [pc, #216]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 030c 	and.w	r3, r3, #12
 800aaa2:	2b08      	cmp	r3, #8
 800aaa4:	d060      	beq.n	800ab68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d145      	bne.n	800ab3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaae:	4b33      	ldr	r3, [pc, #204]	; (800ab7c <HAL_RCC_OscConfig+0x4b4>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab4:	f7fc ffb4 	bl	8007a20 <HAL_GetTick>
 800aab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaba:	e008      	b.n	800aace <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aabc:	f7fc ffb0 	bl	8007a20 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d901      	bls.n	800aace <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e093      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aace:	4b29      	ldr	r3, [pc, #164]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f0      	bne.n	800aabc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69da      	ldr	r2, [r3, #28]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	431a      	orrs	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	019b      	lsls	r3, r3, #6
 800aaea:	431a      	orrs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf0:	085b      	lsrs	r3, r3, #1
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	041b      	lsls	r3, r3, #16
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	061b      	lsls	r3, r3, #24
 800aafe:	431a      	orrs	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab04:	071b      	lsls	r3, r3, #28
 800ab06:	491b      	ldr	r1, [pc, #108]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab0c:	4b1b      	ldr	r3, [pc, #108]	; (800ab7c <HAL_RCC_OscConfig+0x4b4>)
 800ab0e:	2201      	movs	r2, #1
 800ab10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab12:	f7fc ff85 	bl	8007a20 <HAL_GetTick>
 800ab16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab18:	e008      	b.n	800ab2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab1a:	f7fc ff81 	bl	8007a20 <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d901      	bls.n	800ab2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e064      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab2c:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0f0      	beq.n	800ab1a <HAL_RCC_OscConfig+0x452>
 800ab38:	e05c      	b.n	800abf4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab3a:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <HAL_RCC_OscConfig+0x4b4>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab40:	f7fc ff6e 	bl	8007a20 <HAL_GetTick>
 800ab44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab48:	f7fc ff6a 	bl	8007a20 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e04d      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <HAL_RCC_OscConfig+0x4ac>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1f0      	bne.n	800ab48 <HAL_RCC_OscConfig+0x480>
 800ab66:	e045      	b.n	800abf4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d107      	bne.n	800ab80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	e040      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
 800ab74:	40023800 	.word	0x40023800
 800ab78:	40007000 	.word	0x40007000
 800ab7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ab80:	4b1f      	ldr	r3, [pc, #124]	; (800ac00 <HAL_RCC_OscConfig+0x538>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d030      	beq.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d129      	bne.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d122      	bne.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800abb0:	4013      	ands	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800abb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800abb8:	4293      	cmp	r3, r2
 800abba:	d119      	bne.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc6:	085b      	lsrs	r3, r3, #1
 800abc8:	3b01      	subs	r3, #1
 800abca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abcc:	429a      	cmp	r2, r3
 800abce:	d10f      	bne.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800abdc:	429a      	cmp	r2, r3
 800abde:	d107      	bne.n	800abf0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abec:	429a      	cmp	r2, r3
 800abee:	d001      	beq.n	800abf4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	40023800 	.word	0x40023800

0800ac04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	e07b      	b.n	800ad0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d108      	bne.n	800ac30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac26:	d009      	beq.n	800ac3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	61da      	str	r2, [r3, #28]
 800ac2e:	e005      	b.n	800ac3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d106      	bne.n	800ac5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f9 fcde 	bl	8004618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac84:	431a      	orrs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	f003 0302 	and.w	r3, r3, #2
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	431a      	orrs	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acac:	431a      	orrs	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acb6:	431a      	orrs	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	ea42 0103 	orr.w	r1, r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	f003 0104 	and.w	r1, r3, #4
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	f003 0210 	and.w	r2, r3, #16
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b088      	sub	sp, #32
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	603b      	str	r3, [r7, #0]
 800ad22:	4613      	mov	r3, r2
 800ad24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d101      	bne.n	800ad38 <HAL_SPI_Transmit+0x22>
 800ad34:	2302      	movs	r3, #2
 800ad36:	e126      	b.n	800af86 <HAL_SPI_Transmit+0x270>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad40:	f7fc fe6e 	bl	8007a20 <HAL_GetTick>
 800ad44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d002      	beq.n	800ad5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad56:	2302      	movs	r3, #2
 800ad58:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad5a:	e10b      	b.n	800af74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_SPI_Transmit+0x52>
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad6c:	e102      	b.n	800af74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2203      	movs	r2, #3
 800ad72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	88fa      	ldrh	r2, [r7, #6]
 800ad86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	88fa      	ldrh	r2, [r7, #6]
 800ad8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adb4:	d10f      	bne.n	800add6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800add4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade0:	2b40      	cmp	r3, #64	; 0x40
 800ade2:	d007      	beq.n	800adf4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adfc:	d14b      	bne.n	800ae96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <HAL_SPI_Transmit+0xf6>
 800ae06:	8afb      	ldrh	r3, [r7, #22]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d13e      	bne.n	800ae8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae10:	881a      	ldrh	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1c:	1c9a      	adds	r2, r3, #2
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae30:	e02b      	b.n	800ae8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d112      	bne.n	800ae66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	881a      	ldrh	r2, [r3, #0]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae50:	1c9a      	adds	r2, r3, #2
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae64:	e011      	b.n	800ae8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae66:	f7fc fddb 	bl	8007a20 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d803      	bhi.n	800ae7e <HAL_SPI_Transmit+0x168>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae7c:	d102      	bne.n	800ae84 <HAL_SPI_Transmit+0x16e>
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae88:	e074      	b.n	800af74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d1ce      	bne.n	800ae32 <HAL_SPI_Transmit+0x11c>
 800ae94:	e04c      	b.n	800af30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <HAL_SPI_Transmit+0x18e>
 800ae9e:	8afb      	ldrh	r3, [r7, #22]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d140      	bne.n	800af26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	330c      	adds	r3, #12
 800aeae:	7812      	ldrb	r2, [r2, #0]
 800aeb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	3b01      	subs	r3, #1
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aeca:	e02c      	b.n	800af26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d113      	bne.n	800af02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	330c      	adds	r3, #12
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	3b01      	subs	r3, #1
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	86da      	strh	r2, [r3, #54]	; 0x36
 800af00:	e011      	b.n	800af26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af02:	f7fc fd8d 	bl	8007a20 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d803      	bhi.n	800af1a <HAL_SPI_Transmit+0x204>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af18:	d102      	bne.n	800af20 <HAL_SPI_Transmit+0x20a>
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af24:	e026      	b.n	800af74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1cd      	bne.n	800aecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af30:	69ba      	ldr	r2, [r7, #24]
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 fafd 	bl	800b534 <SPI_EndRxTxTransaction>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af4e:	2300      	movs	r3, #0
 800af50:	613b      	str	r3, [r7, #16]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e000      	b.n	800af74 <HAL_SPI_Transmit+0x25e>
  }

error:
 800af72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af84:	7ffb      	ldrb	r3, [r7, #31]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	4613      	mov	r3, r2
 800af9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d101      	bne.n	800afb0 <HAL_SPI_Transmit_DMA+0x20>
 800afac:	2302      	movs	r3, #2
 800afae:	e09b      	b.n	800b0e8 <HAL_SPI_Transmit_DMA+0x158>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d002      	beq.n	800afca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800afc4:	2302      	movs	r3, #2
 800afc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afc8:	e089      	b.n	800b0de <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d002      	beq.n	800afd6 <HAL_SPI_Transmit_DMA+0x46>
 800afd0:	88fb      	ldrh	r3, [r7, #6]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d102      	bne.n	800afdc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afda:	e080      	b.n	800b0de <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2203      	movs	r2, #3
 800afe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	88fa      	ldrh	r2, [r7, #6]
 800aff4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	88fa      	ldrh	r2, [r7, #6]
 800affa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b022:	d10f      	bne.n	800b044 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b032:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b042:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b048:	4a29      	ldr	r2, [pc, #164]	; (800b0f0 <HAL_SPI_Transmit_DMA+0x160>)
 800b04a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b050:	4a28      	ldr	r2, [pc, #160]	; (800b0f4 <HAL_SPI_Transmit_DMA+0x164>)
 800b052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b058:	4a27      	ldr	r2, [pc, #156]	; (800b0f8 <HAL_SPI_Transmit_DMA+0x168>)
 800b05a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b060:	2200      	movs	r2, #0
 800b062:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06c:	4619      	mov	r1, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	330c      	adds	r3, #12
 800b074:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b07a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b07c:	f7fd fac4 	bl	8008608 <HAL_DMA_Start_IT>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00c      	beq.n	800b0a0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08a:	f043 0210 	orr.w	r2, r3, #16
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b09e:	e01e      	b.n	800b0de <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d007      	beq.n	800b0be <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f042 0220 	orr.w	r2, r2, #32
 800b0cc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f042 0202 	orr.w	r2, r2, #2
 800b0dc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	0800b3a1 	.word	0x0800b3a1
 800b0f4:	0800b2f9 	.word	0x0800b2f9
 800b0f8:	0800b3bd 	.word	0x0800b3bd

0800b0fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10e      	bne.n	800b13c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	4798      	blx	r3
    return;
 800b13a:	e0ce      	b.n	800b2da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d009      	beq.n	800b15a <HAL_SPI_IRQHandler+0x5e>
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d004      	beq.n	800b15a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	4798      	blx	r3
    return;
 800b158:	e0bf      	b.n	800b2da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <HAL_SPI_IRQHandler+0x7e>
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d105      	bne.n	800b17a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 80b0 	beq.w	800b2da <HAL_SPI_IRQHandler+0x1de>
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 80aa 	beq.w	800b2da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d023      	beq.n	800b1d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d011      	beq.n	800b1c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a0:	f043 0204 	orr.w	r2, r3, #4
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	617b      	str	r3, [r7, #20]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	e00b      	b.n	800b1d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	693b      	ldr	r3, [r7, #16]
        return;
 800b1d6:	e080      	b.n	800b2da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f003 0320 	and.w	r3, r3, #32
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d014      	beq.n	800b20c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e6:	f043 0201 	orr.w	r2, r3, #1
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00c      	beq.n	800b230 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21a:	f043 0208 	orr.w	r2, r3, #8
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b222:	2300      	movs	r3, #0
 800b224:	60bb      	str	r3, [r7, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b234:	2b00      	cmp	r3, #0
 800b236:	d04f      	beq.n	800b2d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b246:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <HAL_SPI_IRQHandler+0x168>
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d034      	beq.n	800b2ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0203 	bic.w	r2, r2, #3
 800b272:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d011      	beq.n	800b2a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b280:	4a17      	ldr	r2, [pc, #92]	; (800b2e0 <HAL_SPI_IRQHandler+0x1e4>)
 800b282:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fd fa85 	bl	8008798 <HAL_DMA_Abort_IT>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b298:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d016      	beq.n	800b2d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ac:	4a0c      	ldr	r2, [pc, #48]	; (800b2e0 <HAL_SPI_IRQHandler+0x1e4>)
 800b2ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fd fa6f 	bl	8008798 <HAL_DMA_Abort_IT>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00a      	beq.n	800b2d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b2cc:	e003      	b.n	800b2d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7fa fc8e 	bl	8005bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b2d4:	e000      	b.n	800b2d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b2d6:	bf00      	nop
    return;
 800b2d8:	bf00      	nop
  }
}
 800b2da:	3720      	adds	r7, #32
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	0800b3fd 	.word	0x0800b3fd

0800b2e4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b086      	sub	sp, #24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b306:	f7fc fb8b 	bl	8007a20 <HAL_GetTick>
 800b30a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b31a:	d03b      	beq.n	800b394 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f022 0220 	bic.w	r2, r2, #32
 800b32a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685a      	ldr	r2, [r3, #4]
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0202 	bic.w	r2, r2, #2
 800b33a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	2164      	movs	r1, #100	; 0x64
 800b340:	6978      	ldr	r0, [r7, #20]
 800b342:	f000 f8f7 	bl	800b534 <SPI_EndRxTxTransaction>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b350:	f043 0220 	orr.w	r2, r3, #32
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10a      	bne.n	800b376 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2200      	movs	r2, #0
 800b37a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d003      	beq.n	800b394 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b38c:	6978      	ldr	r0, [r7, #20]
 800b38e:	f7fa fc2f 	bl	8005bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b392:	e002      	b.n	800b39a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b394:	6978      	ldr	r0, [r7, #20]
 800b396:	f7fa fc41 	bl	8005c1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff ff98 	bl	800b2e4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3b4:	bf00      	nop
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0203 	bic.w	r2, r2, #3
 800b3d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3de:	f043 0210 	orr.w	r2, r3, #16
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7fa fbfe 	bl	8005bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2200      	movs	r2, #0
 800b40e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f7fa fbea 	bl	8005bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b41c:	bf00      	nop
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	4613      	mov	r3, r2
 800b432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b434:	f7fc faf4 	bl	8007a20 <HAL_GetTick>
 800b438:	4602      	mov	r2, r0
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	1a9b      	subs	r3, r3, r2
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	4413      	add	r3, r2
 800b442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b444:	f7fc faec 	bl	8007a20 <HAL_GetTick>
 800b448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b44a:	4b39      	ldr	r3, [pc, #228]	; (800b530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	015b      	lsls	r3, r3, #5
 800b450:	0d1b      	lsrs	r3, r3, #20
 800b452:	69fa      	ldr	r2, [r7, #28]
 800b454:	fb02 f303 	mul.w	r3, r2, r3
 800b458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b45a:	e054      	b.n	800b506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b462:	d050      	beq.n	800b506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b464:	f7fc fadc 	bl	8007a20 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	429a      	cmp	r2, r3
 800b472:	d902      	bls.n	800b47a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d13d      	bne.n	800b4f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b492:	d111      	bne.n	800b4b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b49c:	d004      	beq.n	800b4a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4a6:	d107      	bne.n	800b4b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c0:	d10f      	bne.n	800b4e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e017      	b.n	800b526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	3b01      	subs	r3, #1
 800b504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4013      	ands	r3, r2
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	429a      	cmp	r2, r3
 800b514:	bf0c      	ite	eq
 800b516:	2301      	moveq	r3, #1
 800b518:	2300      	movne	r3, #0
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	429a      	cmp	r2, r3
 800b522:	d19b      	bne.n	800b45c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3720      	adds	r7, #32
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20000030 	.word	0x20000030

0800b534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af02      	add	r7, sp, #8
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b540:	4b1b      	ldr	r3, [pc, #108]	; (800b5b0 <SPI_EndRxTxTransaction+0x7c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a1b      	ldr	r2, [pc, #108]	; (800b5b4 <SPI_EndRxTxTransaction+0x80>)
 800b546:	fba2 2303 	umull	r2, r3, r2, r3
 800b54a:	0d5b      	lsrs	r3, r3, #21
 800b54c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b550:	fb02 f303 	mul.w	r3, r2, r3
 800b554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b55e:	d112      	bne.n	800b586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2200      	movs	r2, #0
 800b568:	2180      	movs	r1, #128	; 0x80
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff ff5a 	bl	800b424 <SPI_WaitFlagStateUntilTimeout>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d016      	beq.n	800b5a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57a:	f043 0220 	orr.w	r2, r3, #32
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e00f      	b.n	800b5a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00a      	beq.n	800b5a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	3b01      	subs	r3, #1
 800b590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59c:	2b80      	cmp	r3, #128	; 0x80
 800b59e:	d0f2      	beq.n	800b586 <SPI_EndRxTxTransaction+0x52>
 800b5a0:	e000      	b.n	800b5a4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b5a2:	bf00      	nop
  }

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20000030 	.word	0x20000030
 800b5b4:	165e9f81 	.word	0x165e9f81

0800b5b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e041      	b.n	800b64e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7f9 f8bc 	bl	800475c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	f000 faa0 	bl	800bb3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b666:	b2db      	uxtb	r3, r3
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d001      	beq.n	800b670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e04e      	b.n	800b70e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0201 	orr.w	r2, r2, #1
 800b686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a23      	ldr	r2, [pc, #140]	; (800b71c <HAL_TIM_Base_Start_IT+0xc4>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d022      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b69a:	d01d      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <HAL_TIM_Base_Start_IT+0xc8>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d018      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a1e      	ldr	r2, [pc, #120]	; (800b724 <HAL_TIM_Base_Start_IT+0xcc>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d013      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a1c      	ldr	r2, [pc, #112]	; (800b728 <HAL_TIM_Base_Start_IT+0xd0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00e      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a1b      	ldr	r2, [pc, #108]	; (800b72c <HAL_TIM_Base_Start_IT+0xd4>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d009      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a19      	ldr	r2, [pc, #100]	; (800b730 <HAL_TIM_Base_Start_IT+0xd8>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d004      	beq.n	800b6d8 <HAL_TIM_Base_Start_IT+0x80>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a18      	ldr	r2, [pc, #96]	; (800b734 <HAL_TIM_Base_Start_IT+0xdc>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d111      	bne.n	800b6fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b06      	cmp	r3, #6
 800b6e8:	d010      	beq.n	800b70c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f042 0201 	orr.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6fa:	e007      	b.n	800b70c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f042 0201 	orr.w	r2, r2, #1
 800b70a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	40010000 	.word	0x40010000
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40000c00 	.word	0x40000c00
 800b72c:	40010400 	.word	0x40010400
 800b730:	40014000 	.word	0x40014000
 800b734:	40001800 	.word	0x40001800

0800b738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f003 0302 	and.w	r3, r3, #2
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d122      	bne.n	800b794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d11b      	bne.n	800b794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f06f 0202 	mvn.w	r2, #2
 800b764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	f003 0303 	and.w	r3, r3, #3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f9bf 	bl	800bafe <HAL_TIM_IC_CaptureCallback>
 800b780:	e005      	b.n	800b78e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f9b1 	bl	800baea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f9c2 	bl	800bb12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0304 	and.w	r3, r3, #4
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d122      	bne.n	800b7e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b04      	cmp	r3, #4
 800b7ae:	d11b      	bne.n	800b7e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f06f 0204 	mvn.w	r2, #4
 800b7b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2202      	movs	r2, #2
 800b7be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f995 	bl	800bafe <HAL_TIM_IC_CaptureCallback>
 800b7d4:	e005      	b.n	800b7e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f987 	bl	800baea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f998 	bl	800bb12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b08      	cmp	r3, #8
 800b7f4:	d122      	bne.n	800b83c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b08      	cmp	r3, #8
 800b802:	d11b      	bne.n	800b83c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f06f 0208 	mvn.w	r2, #8
 800b80c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2204      	movs	r2, #4
 800b812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	f003 0303 	and.w	r3, r3, #3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f96b 	bl	800bafe <HAL_TIM_IC_CaptureCallback>
 800b828:	e005      	b.n	800b836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f95d 	bl	800baea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f96e 	bl	800bb12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	f003 0310 	and.w	r3, r3, #16
 800b846:	2b10      	cmp	r3, #16
 800b848:	d122      	bne.n	800b890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f003 0310 	and.w	r3, r3, #16
 800b854:	2b10      	cmp	r3, #16
 800b856:	d11b      	bne.n	800b890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f06f 0210 	mvn.w	r2, #16
 800b860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2208      	movs	r2, #8
 800b866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f941 	bl	800bafe <HAL_TIM_IC_CaptureCallback>
 800b87c:	e005      	b.n	800b88a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f933 	bl	800baea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f944 	bl	800bb12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d10e      	bne.n	800b8bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d107      	bne.n	800b8bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f06f 0201 	mvn.w	r2, #1
 800b8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f90d 	bl	800bad6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c6:	2b80      	cmp	r3, #128	; 0x80
 800b8c8:	d10e      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d4:	2b80      	cmp	r3, #128	; 0x80
 800b8d6:	d107      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 faea 	bl	800bebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f2:	2b40      	cmp	r3, #64	; 0x40
 800b8f4:	d10e      	bne.n	800b914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d107      	bne.n	800b914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f909 	bl	800bb26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b20      	cmp	r3, #32
 800b920:	d10e      	bne.n	800b940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f003 0320 	and.w	r3, r3, #32
 800b92c:	2b20      	cmp	r3, #32
 800b92e:	d107      	bne.n	800b940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f06f 0220 	mvn.w	r2, #32
 800b938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fab4 	bl	800bea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d101      	bne.n	800b964 <HAL_TIM_ConfigClockSource+0x1c>
 800b960:	2302      	movs	r3, #2
 800b962:	e0b4      	b.n	800bace <HAL_TIM_ConfigClockSource+0x186>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b98a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b99c:	d03e      	beq.n	800ba1c <HAL_TIM_ConfigClockSource+0xd4>
 800b99e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a2:	f200 8087 	bhi.w	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9aa:	f000 8086 	beq.w	800baba <HAL_TIM_ConfigClockSource+0x172>
 800b9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b2:	d87f      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9b4:	2b70      	cmp	r3, #112	; 0x70
 800b9b6:	d01a      	beq.n	800b9ee <HAL_TIM_ConfigClockSource+0xa6>
 800b9b8:	2b70      	cmp	r3, #112	; 0x70
 800b9ba:	d87b      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9bc:	2b60      	cmp	r3, #96	; 0x60
 800b9be:	d050      	beq.n	800ba62 <HAL_TIM_ConfigClockSource+0x11a>
 800b9c0:	2b60      	cmp	r3, #96	; 0x60
 800b9c2:	d877      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9c4:	2b50      	cmp	r3, #80	; 0x50
 800b9c6:	d03c      	beq.n	800ba42 <HAL_TIM_ConfigClockSource+0xfa>
 800b9c8:	2b50      	cmp	r3, #80	; 0x50
 800b9ca:	d873      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9cc:	2b40      	cmp	r3, #64	; 0x40
 800b9ce:	d058      	beq.n	800ba82 <HAL_TIM_ConfigClockSource+0x13a>
 800b9d0:	2b40      	cmp	r3, #64	; 0x40
 800b9d2:	d86f      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9d4:	2b30      	cmp	r3, #48	; 0x30
 800b9d6:	d064      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0x15a>
 800b9d8:	2b30      	cmp	r3, #48	; 0x30
 800b9da:	d86b      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9dc:	2b20      	cmp	r3, #32
 800b9de:	d060      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0x15a>
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d867      	bhi.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d05c      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0x15a>
 800b9e8:	2b10      	cmp	r3, #16
 800b9ea:	d05a      	beq.n	800baa2 <HAL_TIM_ConfigClockSource+0x15a>
 800b9ec:	e062      	b.n	800bab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	6899      	ldr	r1, [r3, #8]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	f000 f9b7 	bl	800bd70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	609a      	str	r2, [r3, #8]
      break;
 800ba1a:	e04f      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	6899      	ldr	r1, [r3, #8]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f000 f9a0 	bl	800bd70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba3e:	609a      	str	r2, [r3, #8]
      break;
 800ba40:	e03c      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	6859      	ldr	r1, [r3, #4]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f000 f914 	bl	800bc7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2150      	movs	r1, #80	; 0x50
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 f96d 	bl	800bd3a <TIM_ITRx_SetConfig>
      break;
 800ba60:	e02c      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	6859      	ldr	r1, [r3, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f000 f933 	bl	800bcda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2160      	movs	r1, #96	; 0x60
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 f95d 	bl	800bd3a <TIM_ITRx_SetConfig>
      break;
 800ba80:	e01c      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6859      	ldr	r1, [r3, #4]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f000 f8f4 	bl	800bc7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2140      	movs	r1, #64	; 0x40
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 f94d 	bl	800bd3a <TIM_ITRx_SetConfig>
      break;
 800baa0:	e00c      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f000 f944 	bl	800bd3a <TIM_ITRx_SetConfig>
      break;
 800bab2:	e003      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
      break;
 800bab8:	e000      	b.n	800babc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800baba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb06:	bf00      	nop
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb1a:	bf00      	nop
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb2e:	bf00      	nop
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
	...

0800bb3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a40      	ldr	r2, [pc, #256]	; (800bc50 <TIM_Base_SetConfig+0x114>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d013      	beq.n	800bb7c <TIM_Base_SetConfig+0x40>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb5a:	d00f      	beq.n	800bb7c <TIM_Base_SetConfig+0x40>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a3d      	ldr	r2, [pc, #244]	; (800bc54 <TIM_Base_SetConfig+0x118>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d00b      	beq.n	800bb7c <TIM_Base_SetConfig+0x40>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a3c      	ldr	r2, [pc, #240]	; (800bc58 <TIM_Base_SetConfig+0x11c>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d007      	beq.n	800bb7c <TIM_Base_SetConfig+0x40>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a3b      	ldr	r2, [pc, #236]	; (800bc5c <TIM_Base_SetConfig+0x120>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d003      	beq.n	800bb7c <TIM_Base_SetConfig+0x40>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a3a      	ldr	r2, [pc, #232]	; (800bc60 <TIM_Base_SetConfig+0x124>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d108      	bne.n	800bb8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a2f      	ldr	r2, [pc, #188]	; (800bc50 <TIM_Base_SetConfig+0x114>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d02b      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb9c:	d027      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a2c      	ldr	r2, [pc, #176]	; (800bc54 <TIM_Base_SetConfig+0x118>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d023      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a2b      	ldr	r2, [pc, #172]	; (800bc58 <TIM_Base_SetConfig+0x11c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d01f      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a2a      	ldr	r2, [pc, #168]	; (800bc5c <TIM_Base_SetConfig+0x120>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d01b      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a29      	ldr	r2, [pc, #164]	; (800bc60 <TIM_Base_SetConfig+0x124>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d017      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a28      	ldr	r2, [pc, #160]	; (800bc64 <TIM_Base_SetConfig+0x128>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d013      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a27      	ldr	r2, [pc, #156]	; (800bc68 <TIM_Base_SetConfig+0x12c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d00f      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a26      	ldr	r2, [pc, #152]	; (800bc6c <TIM_Base_SetConfig+0x130>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00b      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a25      	ldr	r2, [pc, #148]	; (800bc70 <TIM_Base_SetConfig+0x134>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d007      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a24      	ldr	r2, [pc, #144]	; (800bc74 <TIM_Base_SetConfig+0x138>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d003      	beq.n	800bbee <TIM_Base_SetConfig+0xb2>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a23      	ldr	r2, [pc, #140]	; (800bc78 <TIM_Base_SetConfig+0x13c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d108      	bne.n	800bc00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	68fa      	ldr	r2, [r7, #12]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <TIM_Base_SetConfig+0x114>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d003      	beq.n	800bc34 <TIM_Base_SetConfig+0xf8>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a0c      	ldr	r2, [pc, #48]	; (800bc60 <TIM_Base_SetConfig+0x124>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d103      	bne.n	800bc3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	691a      	ldr	r2, [r3, #16]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	615a      	str	r2, [r3, #20]
}
 800bc42:	bf00      	nop
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	40010000 	.word	0x40010000
 800bc54:	40000400 	.word	0x40000400
 800bc58:	40000800 	.word	0x40000800
 800bc5c:	40000c00 	.word	0x40000c00
 800bc60:	40010400 	.word	0x40010400
 800bc64:	40014000 	.word	0x40014000
 800bc68:	40014400 	.word	0x40014400
 800bc6c:	40014800 	.word	0x40014800
 800bc70:	40001800 	.word	0x40001800
 800bc74:	40001c00 	.word	0x40001c00
 800bc78:	40002000 	.word	0x40002000

0800bc7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	f023 0201 	bic.w	r2, r3, #1
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f023 030a 	bic.w	r3, r3, #10
 800bcb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	621a      	str	r2, [r3, #32]
}
 800bcce:	bf00      	nop
 800bcd0:	371c      	adds	r7, #28
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b087      	sub	sp, #28
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	f023 0210 	bic.w	r2, r3, #16
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a1b      	ldr	r3, [r3, #32]
 800bcfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	031b      	lsls	r3, r3, #12
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	621a      	str	r2, [r3, #32]
}
 800bd2e:	bf00      	nop
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	f043 0307 	orr.w	r3, r3, #7
 800bd5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	609a      	str	r2, [r3, #8]
}
 800bd64:	bf00      	nop
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	021a      	lsls	r2, r3, #8
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	431a      	orrs	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	609a      	str	r2, [r3, #8]
}
 800bda4:	bf00      	nop
 800bda6:	371c      	adds	r7, #28
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d101      	bne.n	800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	e05a      	b.n	800be7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a21      	ldr	r2, [pc, #132]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d022      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be14:	d01d      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a1d      	ldr	r2, [pc, #116]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d018      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d013      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1a      	ldr	r2, [pc, #104]	; (800be98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d00e      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a18      	ldr	r2, [pc, #96]	; (800be9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d009      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a17      	ldr	r2, [pc, #92]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d004      	beq.n	800be52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a15      	ldr	r2, [pc, #84]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d10c      	bne.n	800be6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	4313      	orrs	r3, r2
 800be62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2200      	movs	r2, #0
 800be78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	40010000 	.word	0x40010000
 800be90:	40000400 	.word	0x40000400
 800be94:	40000800 	.word	0x40000800
 800be98:	40000c00 	.word	0x40000c00
 800be9c:	40010400 	.word	0x40010400
 800bea0:	40014000 	.word	0x40014000
 800bea4:	40001800 	.word	0x40001800

0800bea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e03f      	b.n	800bf62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7f8 fc56 	bl	80047a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2224      	movs	r2, #36	; 0x24
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fddf 	bl	800cad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	695a      	ldr	r2, [r3, #20]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68da      	ldr	r2, [r3, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b08a      	sub	sp, #40	; 0x28
 800bf6e:	af02      	add	r7, sp, #8
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	603b      	str	r3, [r7, #0]
 800bf76:	4613      	mov	r3, r2
 800bf78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b20      	cmp	r3, #32
 800bf88:	d17c      	bne.n	800c084 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <HAL_UART_Transmit+0x2c>
 800bf90:	88fb      	ldrh	r3, [r7, #6]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e075      	b.n	800c086 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d101      	bne.n	800bfa8 <HAL_UART_Transmit+0x3e>
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	e06e      	b.n	800c086 <HAL_UART_Transmit+0x11c>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2221      	movs	r2, #33	; 0x21
 800bfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bfbe:	f7fb fd2f 	bl	8007a20 <HAL_GetTick>
 800bfc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	88fa      	ldrh	r2, [r7, #6]
 800bfc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	88fa      	ldrh	r2, [r7, #6]
 800bfce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd8:	d108      	bne.n	800bfec <HAL_UART_Transmit+0x82>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d104      	bne.n	800bfec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e003      	b.n	800bff4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bffc:	e02a      	b.n	800c054 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2200      	movs	r2, #0
 800c006:	2180      	movs	r1, #128	; 0x80
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 fb1f 	bl	800c64c <UART_WaitOnFlagUntilTimeout>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e036      	b.n	800c086 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10b      	bne.n	800c036 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c02c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	3302      	adds	r3, #2
 800c032:	61bb      	str	r3, [r7, #24]
 800c034:	e007      	b.n	800c046 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	3301      	adds	r3, #1
 800c044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b29a      	uxth	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c058:	b29b      	uxth	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1cf      	bne.n	800bffe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2200      	movs	r2, #0
 800c066:	2140      	movs	r1, #64	; 0x40
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 faef 	bl	800c64c <UART_WaitOnFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e006      	b.n	800c086 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2220      	movs	r2, #32
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	e000      	b.n	800c086 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c084:	2302      	movs	r3, #2
  }
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	4613      	mov	r3, r2
 800c09a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b20      	cmp	r3, #32
 800c0a6:	d11d      	bne.n	800c0e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <HAL_UART_Receive_IT+0x26>
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e016      	b.n	800c0e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_UART_Receive_IT+0x38>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e00f      	b.n	800c0e6 <HAL_UART_Receive_IT+0x58>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f000 fb24 	bl	800c728 <UART_Start_Receive_IT>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	e000      	b.n	800c0e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c0e4:	2302      	movs	r3, #2
  }
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b0ba      	sub	sp, #232	; 0xe8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c116:	2300      	movs	r3, #0
 800c118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c126:	f003 030f 	and.w	r3, r3, #15
 800c12a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c12e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10f      	bne.n	800c156 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c13a:	f003 0320 	and.w	r3, r3, #32
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d009      	beq.n	800c156 <HAL_UART_IRQHandler+0x66>
 800c142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fc07 	bl	800c962 <UART_Receive_IT>
      return;
 800c154:	e256      	b.n	800c604 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f000 80de 	beq.w	800c31c <HAL_UART_IRQHandler+0x22c>
 800c160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c170:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 80d1 	beq.w	800c31c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00b      	beq.n	800c19e <HAL_UART_IRQHandler+0xae>
 800c186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c196:	f043 0201 	orr.w	r2, r3, #1
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00b      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xd2>
 800c1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	f043 0202 	orr.w	r2, r3, #2
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00b      	beq.n	800c1e6 <HAL_UART_IRQHandler+0xf6>
 800c1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1de:	f043 0204 	orr.w	r2, r3, #4
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ea:	f003 0308 	and.w	r3, r3, #8
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d011      	beq.n	800c216 <HAL_UART_IRQHandler+0x126>
 800c1f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f6:	f003 0320 	and.w	r3, r3, #32
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d105      	bne.n	800c20a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d005      	beq.n	800c216 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	f043 0208 	orr.w	r2, r3, #8
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 81ed 	beq.w	800c5fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d008      	beq.n	800c23e <HAL_UART_IRQHandler+0x14e>
 800c22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c230:	f003 0320 	and.w	r3, r3, #32
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fb92 	bl	800c962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	bf0c      	ite	eq
 800c24c:	2301      	moveq	r3, #1
 800c24e:	2300      	movne	r3, #0
 800c250:	b2db      	uxtb	r3, r3
 800c252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25a:	f003 0308 	and.w	r3, r3, #8
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d103      	bne.n	800c26a <HAL_UART_IRQHandler+0x17a>
 800c262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04f      	beq.n	800c30a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa9a 	bl	800c7a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27a:	2b40      	cmp	r3, #64	; 0x40
 800c27c:	d141      	bne.n	800c302 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3314      	adds	r3, #20
 800c284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3314      	adds	r3, #20
 800c2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1d9      	bne.n	800c27e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d013      	beq.n	800c2fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d6:	4a7d      	ldr	r2, [pc, #500]	; (800c4cc <HAL_UART_IRQHandler+0x3dc>)
 800c2d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fc fa5a 	bl	8008798 <HAL_DMA_Abort_IT>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d016      	beq.n	800c318 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f8:	e00e      	b.n	800c318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f990 	bl	800c620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c300:	e00a      	b.n	800c318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f98c 	bl	800c620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c308:	e006      	b.n	800c318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f988 	bl	800c620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c316:	e170      	b.n	800c5fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c318:	bf00      	nop
    return;
 800c31a:	e16e      	b.n	800c5fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c320:	2b01      	cmp	r3, #1
 800c322:	f040 814a 	bne.w	800c5ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c32a:	f003 0310 	and.w	r3, r3, #16
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 8143 	beq.w	800c5ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c338:	f003 0310 	and.w	r3, r3, #16
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 813c 	beq.w	800c5ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c342:	2300      	movs	r3, #0
 800c344:	60bb      	str	r3, [r7, #8]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	60bb      	str	r3, [r7, #8]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	60bb      	str	r3, [r7, #8]
 800c356:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c362:	2b40      	cmp	r3, #64	; 0x40
 800c364:	f040 80b4 	bne.w	800c4d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c374:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 8140 	beq.w	800c5fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c386:	429a      	cmp	r2, r3
 800c388:	f080 8139 	bcs.w	800c5fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c392:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c39e:	f000 8088 	beq.w	800c4b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	330c      	adds	r3, #12
 800c3a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c3de:	e841 2300 	strex	r3, r2, [r1]
 800c3e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c3e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1d9      	bne.n	800c3a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3314      	adds	r3, #20
 800c3f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3f8:	e853 3f00 	ldrex	r3, [r3]
 800c3fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c400:	f023 0301 	bic.w	r3, r3, #1
 800c404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3314      	adds	r3, #20
 800c40e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c412:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c416:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c418:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c41a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e1      	bne.n	800c3ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3314      	adds	r3, #20
 800c430:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c43c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3314      	adds	r3, #20
 800c44a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c44e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c450:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c452:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c456:	e841 2300 	strex	r3, r2, [r1]
 800c45a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1e3      	bne.n	800c42a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2220      	movs	r2, #32
 800c466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	330c      	adds	r3, #12
 800c476:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47a:	e853 3f00 	ldrex	r3, [r3]
 800c47e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c482:	f023 0310 	bic.w	r3, r3, #16
 800c486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	330c      	adds	r3, #12
 800c490:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c494:	65ba      	str	r2, [r7, #88]	; 0x58
 800c496:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c49a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e3      	bne.n	800c470 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fc f903 	bl	80086b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f8b6 	bl	800c634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4c8:	e099      	b.n	800c5fe <HAL_UART_IRQHandler+0x50e>
 800c4ca:	bf00      	nop
 800c4cc:	0800c86b 	.word	0x0800c86b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 808b 	beq.w	800c602 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c4ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 8086 	beq.w	800c602 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	330c      	adds	r3, #12
 800c4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	e853 3f00 	ldrex	r3, [r3]
 800c504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c50c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	330c      	adds	r3, #12
 800c516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c51a:	647a      	str	r2, [r7, #68]	; 0x44
 800c51c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e3      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3314      	adds	r3, #20
 800c534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c538:	e853 3f00 	ldrex	r3, [r3]
 800c53c:	623b      	str	r3, [r7, #32]
   return(result);
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	f023 0301 	bic.w	r3, r3, #1
 800c544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3314      	adds	r3, #20
 800c54e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c552:	633a      	str	r2, [r7, #48]	; 0x30
 800c554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e3      	bne.n	800c52e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	330c      	adds	r3, #12
 800c57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	60fb      	str	r3, [r7, #12]
   return(result);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0310 	bic.w	r3, r3, #16
 800c58a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	330c      	adds	r3, #12
 800c594:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c598:	61fa      	str	r2, [r7, #28]
 800c59a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	69b9      	ldr	r1, [r7, #24]
 800c59e:	69fa      	ldr	r2, [r7, #28]
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e3      	bne.n	800c574 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f83e 	bl	800c634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c5b8:	e023      	b.n	800c602 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <HAL_UART_IRQHandler+0x4ea>
 800c5c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f95d 	bl	800c892 <UART_Transmit_IT>
    return;
 800c5d8:	e014      	b.n	800c604 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00e      	beq.n	800c604 <HAL_UART_IRQHandler+0x514>
 800c5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d008      	beq.n	800c604 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f99d 	bl	800c932 <UART_EndTransmit_IT>
    return;
 800c5f8:	e004      	b.n	800c604 <HAL_UART_IRQHandler+0x514>
    return;
 800c5fa:	bf00      	nop
 800c5fc:	e002      	b.n	800c604 <HAL_UART_IRQHandler+0x514>
      return;
 800c5fe:	bf00      	nop
 800c600:	e000      	b.n	800c604 <HAL_UART_IRQHandler+0x514>
      return;
 800c602:	bf00      	nop
  }
}
 800c604:	37e8      	adds	r7, #232	; 0xe8
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop

0800c60c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c628:	bf00      	nop
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b090      	sub	sp, #64	; 0x40
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	4613      	mov	r3, r2
 800c65a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c65c:	e050      	b.n	800c700 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c664:	d04c      	beq.n	800c700 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <UART_WaitOnFlagUntilTimeout+0x30>
 800c66c:	f7fb f9d8 	bl	8007a20 <HAL_GetTick>
 800c670:	4602      	mov	r2, r0
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c678:	429a      	cmp	r2, r3
 800c67a:	d241      	bcs.n	800c700 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	330c      	adds	r3, #12
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	e853 3f00 	ldrex	r3, [r3]
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	330c      	adds	r3, #12
 800c69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c69c:	637a      	str	r2, [r7, #52]	; 0x34
 800c69e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6a4:	e841 2300 	strex	r3, r2, [r1]
 800c6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1e5      	bne.n	800c67c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3314      	adds	r3, #20
 800c6b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	e853 3f00 	ldrex	r3, [r3]
 800c6be:	613b      	str	r3, [r7, #16]
   return(result);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f023 0301 	bic.w	r3, r3, #1
 800c6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	3314      	adds	r3, #20
 800c6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6d0:	623a      	str	r2, [r7, #32]
 800c6d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	69f9      	ldr	r1, [r7, #28]
 800c6d6:	6a3a      	ldr	r2, [r7, #32]
 800c6d8:	e841 2300 	strex	r3, r2, [r1]
 800c6dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e5      	bne.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e00f      	b.n	800c720 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	4013      	ands	r3, r2
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	bf0c      	ite	eq
 800c710:	2301      	moveq	r3, #1
 800c712:	2300      	movne	r3, #0
 800c714:	b2db      	uxtb	r3, r3
 800c716:	461a      	mov	r2, r3
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d09f      	beq.n	800c65e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3740      	adds	r7, #64	; 0x40
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	88fa      	ldrh	r2, [r7, #6]
 800c740:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	88fa      	ldrh	r2, [r7, #6]
 800c746:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2222      	movs	r2, #34	; 0x22
 800c752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d007      	beq.n	800c776 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68da      	ldr	r2, [r3, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c774:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	695a      	ldr	r2, [r3, #20]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f042 0201 	orr.w	r2, r2, #1
 800c784:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68da      	ldr	r2, [r3, #12]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f042 0220 	orr.w	r2, r2, #32
 800c794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b095      	sub	sp, #84	; 0x54
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	330c      	adds	r3, #12
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b6:	e853 3f00 	ldrex	r3, [r3]
 800c7ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	330c      	adds	r3, #12
 800c7ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7cc:	643a      	str	r2, [r7, #64]	; 0x40
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7d4:	e841 2300 	strex	r3, r2, [r1]
 800c7d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d1e5      	bne.n	800c7ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3314      	adds	r3, #20
 800c7e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	e853 3f00 	ldrex	r3, [r3]
 800c7ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	f023 0301 	bic.w	r3, r3, #1
 800c7f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	3314      	adds	r3, #20
 800c7fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c800:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c808:	e841 2300 	strex	r3, r2, [r1]
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1e5      	bne.n	800c7e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d119      	bne.n	800c850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	330c      	adds	r3, #12
 800c822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	f023 0310 	bic.w	r3, r3, #16
 800c832:	647b      	str	r3, [r7, #68]	; 0x44
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	330c      	adds	r3, #12
 800c83a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c83c:	61ba      	str	r2, [r7, #24]
 800c83e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6979      	ldr	r1, [r7, #20]
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	613b      	str	r3, [r7, #16]
   return(result);
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e5      	bne.n	800c81c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c85e:	bf00      	nop
 800c860:	3754      	adds	r7, #84	; 0x54
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b084      	sub	sp, #16
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f7ff fecb 	bl	800c620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c88a:	bf00      	nop
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b21      	cmp	r3, #33	; 0x21
 800c8a4:	d13e      	bne.n	800c924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8ae:	d114      	bne.n	800c8da <UART_Transmit_IT+0x48>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d110      	bne.n	800c8da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	1c9a      	adds	r2, r3, #2
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	621a      	str	r2, [r3, #32]
 800c8d8:	e008      	b.n	800c8ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	6211      	str	r1, [r2, #32]
 800c8e4:	781a      	ldrb	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10f      	bne.n	800c920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c90e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68da      	ldr	r2, [r3, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c91e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	e000      	b.n	800c926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c924:	2302      	movs	r3, #2
  }
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68da      	ldr	r2, [r3, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2220      	movs	r2, #32
 800c94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fe5a 	bl	800c60c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b08c      	sub	sp, #48	; 0x30
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b22      	cmp	r3, #34	; 0x22
 800c974:	f040 80ab 	bne.w	800cace <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c980:	d117      	bne.n	800c9b2 <UART_Receive_IT+0x50>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d113      	bne.n	800c9b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c992:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9aa:	1c9a      	adds	r2, r3, #2
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	629a      	str	r2, [r3, #40]	; 0x28
 800c9b0:	e026      	b.n	800ca00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9c4:	d007      	beq.n	800c9d6 <UART_Receive_IT+0x74>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10a      	bne.n	800c9e4 <UART_Receive_IT+0x82>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d106      	bne.n	800c9e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	e008      	b.n	800c9f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fa:	1c5a      	adds	r2, r3, #1
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d15a      	bne.n	800caca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68da      	ldr	r2, [r3, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f022 0220 	bic.w	r2, r2, #32
 800ca22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	695a      	ldr	r2, [r3, #20]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0201 	bic.w	r2, r2, #1
 800ca42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2220      	movs	r2, #32
 800ca48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d135      	bne.n	800cac0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	330c      	adds	r3, #12
 800ca60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	e853 3f00 	ldrex	r3, [r3]
 800ca68:	613b      	str	r3, [r7, #16]
   return(result);
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f023 0310 	bic.w	r3, r3, #16
 800ca70:	627b      	str	r3, [r7, #36]	; 0x24
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	330c      	adds	r3, #12
 800ca78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca7a:	623a      	str	r2, [r7, #32]
 800ca7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7e:	69f9      	ldr	r1, [r7, #28]
 800ca80:	6a3a      	ldr	r2, [r7, #32]
 800ca82:	e841 2300 	strex	r3, r2, [r1]
 800ca86:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e5      	bne.n	800ca5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0310 	and.w	r3, r3, #16
 800ca98:	2b10      	cmp	r3, #16
 800ca9a:	d10a      	bne.n	800cab2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff fdbb 	bl	800c634 <HAL_UARTEx_RxEventCallback>
 800cabe:	e002      	b.n	800cac6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7f7 fb91 	bl	80041e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	e002      	b.n	800cad0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	e000      	b.n	800cad0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cace:	2302      	movs	r3, #2
  }
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3730      	adds	r7, #48	; 0x30
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cadc:	b0c0      	sub	sp, #256	; 0x100
 800cade:	af00      	add	r7, sp, #0
 800cae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800caf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caf4:	68d9      	ldr	r1, [r3, #12]
 800caf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	ea40 0301 	orr.w	r3, r0, r1
 800cb00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	431a      	orrs	r2, r3
 800cb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cb30:	f021 010c 	bic.w	r1, r1, #12
 800cb34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb3e:	430b      	orrs	r3, r1
 800cb40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cb4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb52:	6999      	ldr	r1, [r3, #24]
 800cb54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	ea40 0301 	orr.w	r3, r0, r1
 800cb5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	4b8f      	ldr	r3, [pc, #572]	; (800cda4 <UART_SetConfig+0x2cc>)
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d005      	beq.n	800cb78 <UART_SetConfig+0xa0>
 800cb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	4b8d      	ldr	r3, [pc, #564]	; (800cda8 <UART_SetConfig+0x2d0>)
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d104      	bne.n	800cb82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fd fb62 	bl	800a240 <HAL_RCC_GetPCLK2Freq>
 800cb7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cb80:	e003      	b.n	800cb8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb82:	f7fd fb49 	bl	800a218 <HAL_RCC_GetPCLK1Freq>
 800cb86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb94:	f040 810c 	bne.w	800cdb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cbaa:	4622      	mov	r2, r4
 800cbac:	462b      	mov	r3, r5
 800cbae:	1891      	adds	r1, r2, r2
 800cbb0:	65b9      	str	r1, [r7, #88]	; 0x58
 800cbb2:	415b      	adcs	r3, r3
 800cbb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cbba:	4621      	mov	r1, r4
 800cbbc:	eb12 0801 	adds.w	r8, r2, r1
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	eb43 0901 	adc.w	r9, r3, r1
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	f04f 0300 	mov.w	r3, #0
 800cbce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cbd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cbd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cbda:	4690      	mov	r8, r2
 800cbdc:	4699      	mov	r9, r3
 800cbde:	4623      	mov	r3, r4
 800cbe0:	eb18 0303 	adds.w	r3, r8, r3
 800cbe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cbe8:	462b      	mov	r3, r5
 800cbea:	eb49 0303 	adc.w	r3, r9, r3
 800cbee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cbfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cc02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cc06:	460b      	mov	r3, r1
 800cc08:	18db      	adds	r3, r3, r3
 800cc0a:	653b      	str	r3, [r7, #80]	; 0x50
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	eb42 0303 	adc.w	r3, r2, r3
 800cc12:	657b      	str	r3, [r7, #84]	; 0x54
 800cc14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cc18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cc1c:	f7f4 f884 	bl	8000d28 <__aeabi_uldivmod>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4b61      	ldr	r3, [pc, #388]	; (800cdac <UART_SetConfig+0x2d4>)
 800cc26:	fba3 2302 	umull	r2, r3, r3, r2
 800cc2a:	095b      	lsrs	r3, r3, #5
 800cc2c:	011c      	lsls	r4, r3, #4
 800cc2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc32:	2200      	movs	r2, #0
 800cc34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cc38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cc3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cc40:	4642      	mov	r2, r8
 800cc42:	464b      	mov	r3, r9
 800cc44:	1891      	adds	r1, r2, r2
 800cc46:	64b9      	str	r1, [r7, #72]	; 0x48
 800cc48:	415b      	adcs	r3, r3
 800cc4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc50:	4641      	mov	r1, r8
 800cc52:	eb12 0a01 	adds.w	sl, r2, r1
 800cc56:	4649      	mov	r1, r9
 800cc58:	eb43 0b01 	adc.w	fp, r3, r1
 800cc5c:	f04f 0200 	mov.w	r2, #0
 800cc60:	f04f 0300 	mov.w	r3, #0
 800cc64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cc68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cc6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc70:	4692      	mov	sl, r2
 800cc72:	469b      	mov	fp, r3
 800cc74:	4643      	mov	r3, r8
 800cc76:	eb1a 0303 	adds.w	r3, sl, r3
 800cc7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cc7e:	464b      	mov	r3, r9
 800cc80:	eb4b 0303 	adc.w	r3, fp, r3
 800cc84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cc94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cc98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	18db      	adds	r3, r3, r3
 800cca0:	643b      	str	r3, [r7, #64]	; 0x40
 800cca2:	4613      	mov	r3, r2
 800cca4:	eb42 0303 	adc.w	r3, r2, r3
 800cca8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ccae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ccb2:	f7f4 f839 	bl	8000d28 <__aeabi_uldivmod>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4b3b      	ldr	r3, [pc, #236]	; (800cdac <UART_SetConfig+0x2d4>)
 800ccbe:	fba3 2301 	umull	r2, r3, r3, r1
 800ccc2:	095b      	lsrs	r3, r3, #5
 800ccc4:	2264      	movs	r2, #100	; 0x64
 800ccc6:	fb02 f303 	mul.w	r3, r2, r3
 800ccca:	1acb      	subs	r3, r1, r3
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ccd2:	4b36      	ldr	r3, [pc, #216]	; (800cdac <UART_SetConfig+0x2d4>)
 800ccd4:	fba3 2302 	umull	r2, r3, r3, r2
 800ccd8:	095b      	lsrs	r3, r3, #5
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cce0:	441c      	add	r4, r3
 800cce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cce6:	2200      	movs	r2, #0
 800cce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ccec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ccf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	464b      	mov	r3, r9
 800ccf8:	1891      	adds	r1, r2, r2
 800ccfa:	63b9      	str	r1, [r7, #56]	; 0x38
 800ccfc:	415b      	adcs	r3, r3
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd04:	4641      	mov	r1, r8
 800cd06:	1851      	adds	r1, r2, r1
 800cd08:	6339      	str	r1, [r7, #48]	; 0x30
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	414b      	adcs	r3, r1
 800cd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cd1c:	4659      	mov	r1, fp
 800cd1e:	00cb      	lsls	r3, r1, #3
 800cd20:	4651      	mov	r1, sl
 800cd22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd26:	4651      	mov	r1, sl
 800cd28:	00ca      	lsls	r2, r1, #3
 800cd2a:	4610      	mov	r0, r2
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4603      	mov	r3, r0
 800cd30:	4642      	mov	r2, r8
 800cd32:	189b      	adds	r3, r3, r2
 800cd34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd38:	464b      	mov	r3, r9
 800cd3a:	460a      	mov	r2, r1
 800cd3c:	eb42 0303 	adc.w	r3, r2, r3
 800cd40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cd50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cd54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cd58:	460b      	mov	r3, r1
 800cd5a:	18db      	adds	r3, r3, r3
 800cd5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd5e:	4613      	mov	r3, r2
 800cd60:	eb42 0303 	adc.w	r3, r2, r3
 800cd64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cd6e:	f7f3 ffdb 	bl	8000d28 <__aeabi_uldivmod>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <UART_SetConfig+0x2d4>)
 800cd78:	fba3 1302 	umull	r1, r3, r3, r2
 800cd7c:	095b      	lsrs	r3, r3, #5
 800cd7e:	2164      	movs	r1, #100	; 0x64
 800cd80:	fb01 f303 	mul.w	r3, r1, r3
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	3332      	adds	r3, #50	; 0x32
 800cd8a:	4a08      	ldr	r2, [pc, #32]	; (800cdac <UART_SetConfig+0x2d4>)
 800cd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	f003 0207 	and.w	r2, r3, #7
 800cd96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4422      	add	r2, r4
 800cd9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cda0:	e106      	b.n	800cfb0 <UART_SetConfig+0x4d8>
 800cda2:	bf00      	nop
 800cda4:	40011000 	.word	0x40011000
 800cda8:	40011400 	.word	0x40011400
 800cdac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cdb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cdba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cdbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cdc2:	4642      	mov	r2, r8
 800cdc4:	464b      	mov	r3, r9
 800cdc6:	1891      	adds	r1, r2, r2
 800cdc8:	6239      	str	r1, [r7, #32]
 800cdca:	415b      	adcs	r3, r3
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cdd2:	4641      	mov	r1, r8
 800cdd4:	1854      	adds	r4, r2, r1
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	eb43 0501 	adc.w	r5, r3, r1
 800cddc:	f04f 0200 	mov.w	r2, #0
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	00eb      	lsls	r3, r5, #3
 800cde6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cdea:	00e2      	lsls	r2, r4, #3
 800cdec:	4614      	mov	r4, r2
 800cdee:	461d      	mov	r5, r3
 800cdf0:	4643      	mov	r3, r8
 800cdf2:	18e3      	adds	r3, r4, r3
 800cdf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	eb45 0303 	adc.w	r3, r5, r3
 800cdfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ce12:	f04f 0200 	mov.w	r2, #0
 800ce16:	f04f 0300 	mov.w	r3, #0
 800ce1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ce1e:	4629      	mov	r1, r5
 800ce20:	008b      	lsls	r3, r1, #2
 800ce22:	4621      	mov	r1, r4
 800ce24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce28:	4621      	mov	r1, r4
 800ce2a:	008a      	lsls	r2, r1, #2
 800ce2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ce30:	f7f3 ff7a 	bl	8000d28 <__aeabi_uldivmod>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	4b60      	ldr	r3, [pc, #384]	; (800cfbc <UART_SetConfig+0x4e4>)
 800ce3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ce3e:	095b      	lsrs	r3, r3, #5
 800ce40:	011c      	lsls	r4, r3, #4
 800ce42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ce4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ce50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ce54:	4642      	mov	r2, r8
 800ce56:	464b      	mov	r3, r9
 800ce58:	1891      	adds	r1, r2, r2
 800ce5a:	61b9      	str	r1, [r7, #24]
 800ce5c:	415b      	adcs	r3, r3
 800ce5e:	61fb      	str	r3, [r7, #28]
 800ce60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce64:	4641      	mov	r1, r8
 800ce66:	1851      	adds	r1, r2, r1
 800ce68:	6139      	str	r1, [r7, #16]
 800ce6a:	4649      	mov	r1, r9
 800ce6c:	414b      	adcs	r3, r1
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	f04f 0200 	mov.w	r2, #0
 800ce74:	f04f 0300 	mov.w	r3, #0
 800ce78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ce7c:	4659      	mov	r1, fp
 800ce7e:	00cb      	lsls	r3, r1, #3
 800ce80:	4651      	mov	r1, sl
 800ce82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce86:	4651      	mov	r1, sl
 800ce88:	00ca      	lsls	r2, r1, #3
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4603      	mov	r3, r0
 800ce90:	4642      	mov	r2, r8
 800ce92:	189b      	adds	r3, r3, r2
 800ce94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ce98:	464b      	mov	r3, r9
 800ce9a:	460a      	mov	r2, r1
 800ce9c:	eb42 0303 	adc.w	r3, r2, r3
 800cea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	67bb      	str	r3, [r7, #120]	; 0x78
 800ceae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ceb0:	f04f 0200 	mov.w	r2, #0
 800ceb4:	f04f 0300 	mov.w	r3, #0
 800ceb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cebc:	4649      	mov	r1, r9
 800cebe:	008b      	lsls	r3, r1, #2
 800cec0:	4641      	mov	r1, r8
 800cec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cec6:	4641      	mov	r1, r8
 800cec8:	008a      	lsls	r2, r1, #2
 800ceca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cece:	f7f3 ff2b 	bl	8000d28 <__aeabi_uldivmod>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	4611      	mov	r1, r2
 800ced8:	4b38      	ldr	r3, [pc, #224]	; (800cfbc <UART_SetConfig+0x4e4>)
 800ceda:	fba3 2301 	umull	r2, r3, r3, r1
 800cede:	095b      	lsrs	r3, r3, #5
 800cee0:	2264      	movs	r2, #100	; 0x64
 800cee2:	fb02 f303 	mul.w	r3, r2, r3
 800cee6:	1acb      	subs	r3, r1, r3
 800cee8:	011b      	lsls	r3, r3, #4
 800ceea:	3332      	adds	r3, #50	; 0x32
 800ceec:	4a33      	ldr	r2, [pc, #204]	; (800cfbc <UART_SetConfig+0x4e4>)
 800ceee:	fba2 2303 	umull	r2, r3, r2, r3
 800cef2:	095b      	lsrs	r3, r3, #5
 800cef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cef8:	441c      	add	r4, r3
 800cefa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cefe:	2200      	movs	r2, #0
 800cf00:	673b      	str	r3, [r7, #112]	; 0x70
 800cf02:	677a      	str	r2, [r7, #116]	; 0x74
 800cf04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cf08:	4642      	mov	r2, r8
 800cf0a:	464b      	mov	r3, r9
 800cf0c:	1891      	adds	r1, r2, r2
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	415b      	adcs	r3, r3
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf18:	4641      	mov	r1, r8
 800cf1a:	1851      	adds	r1, r2, r1
 800cf1c:	6039      	str	r1, [r7, #0]
 800cf1e:	4649      	mov	r1, r9
 800cf20:	414b      	adcs	r3, r1
 800cf22:	607b      	str	r3, [r7, #4]
 800cf24:	f04f 0200 	mov.w	r2, #0
 800cf28:	f04f 0300 	mov.w	r3, #0
 800cf2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cf30:	4659      	mov	r1, fp
 800cf32:	00cb      	lsls	r3, r1, #3
 800cf34:	4651      	mov	r1, sl
 800cf36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf3a:	4651      	mov	r1, sl
 800cf3c:	00ca      	lsls	r2, r1, #3
 800cf3e:	4610      	mov	r0, r2
 800cf40:	4619      	mov	r1, r3
 800cf42:	4603      	mov	r3, r0
 800cf44:	4642      	mov	r2, r8
 800cf46:	189b      	adds	r3, r3, r2
 800cf48:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	460a      	mov	r2, r1
 800cf4e:	eb42 0303 	adc.w	r3, r2, r3
 800cf52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cf54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	663b      	str	r3, [r7, #96]	; 0x60
 800cf5e:	667a      	str	r2, [r7, #100]	; 0x64
 800cf60:	f04f 0200 	mov.w	r2, #0
 800cf64:	f04f 0300 	mov.w	r3, #0
 800cf68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	008b      	lsls	r3, r1, #2
 800cf70:	4641      	mov	r1, r8
 800cf72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf76:	4641      	mov	r1, r8
 800cf78:	008a      	lsls	r2, r1, #2
 800cf7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cf7e:	f7f3 fed3 	bl	8000d28 <__aeabi_uldivmod>
 800cf82:	4602      	mov	r2, r0
 800cf84:	460b      	mov	r3, r1
 800cf86:	4b0d      	ldr	r3, [pc, #52]	; (800cfbc <UART_SetConfig+0x4e4>)
 800cf88:	fba3 1302 	umull	r1, r3, r3, r2
 800cf8c:	095b      	lsrs	r3, r3, #5
 800cf8e:	2164      	movs	r1, #100	; 0x64
 800cf90:	fb01 f303 	mul.w	r3, r1, r3
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	011b      	lsls	r3, r3, #4
 800cf98:	3332      	adds	r3, #50	; 0x32
 800cf9a:	4a08      	ldr	r2, [pc, #32]	; (800cfbc <UART_SetConfig+0x4e4>)
 800cf9c:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa0:	095b      	lsrs	r3, r3, #5
 800cfa2:	f003 020f 	and.w	r2, r3, #15
 800cfa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4422      	add	r2, r4
 800cfae:	609a      	str	r2, [r3, #8]
}
 800cfb0:	bf00      	nop
 800cfb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfbc:	51eb851f 	.word	0x51eb851f

0800cfc0 <atoi>:
 800cfc0:	220a      	movs	r2, #10
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f000 bf10 	b.w	800dde8 <strtol>

0800cfc8 <__cvt>:
 800cfc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	ec55 4b10 	vmov	r4, r5, d0
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	460e      	mov	r6, r1
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	bfbb      	ittet	lt
 800cfda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cfde:	461d      	movlt	r5, r3
 800cfe0:	2300      	movge	r3, #0
 800cfe2:	232d      	movlt	r3, #45	; 0x2d
 800cfe4:	700b      	strb	r3, [r1, #0]
 800cfe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfec:	4691      	mov	r9, r2
 800cfee:	f023 0820 	bic.w	r8, r3, #32
 800cff2:	bfbc      	itt	lt
 800cff4:	4622      	movlt	r2, r4
 800cff6:	4614      	movlt	r4, r2
 800cff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cffc:	d005      	beq.n	800d00a <__cvt+0x42>
 800cffe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d002:	d100      	bne.n	800d006 <__cvt+0x3e>
 800d004:	3601      	adds	r6, #1
 800d006:	2102      	movs	r1, #2
 800d008:	e000      	b.n	800d00c <__cvt+0x44>
 800d00a:	2103      	movs	r1, #3
 800d00c:	ab03      	add	r3, sp, #12
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	ab02      	add	r3, sp, #8
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	ec45 4b10 	vmov	d0, r4, r5
 800d018:	4653      	mov	r3, sl
 800d01a:	4632      	mov	r2, r6
 800d01c:	f001 f8f4 	bl	800e208 <_dtoa_r>
 800d020:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d024:	4607      	mov	r7, r0
 800d026:	d102      	bne.n	800d02e <__cvt+0x66>
 800d028:	f019 0f01 	tst.w	r9, #1
 800d02c:	d022      	beq.n	800d074 <__cvt+0xac>
 800d02e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d032:	eb07 0906 	add.w	r9, r7, r6
 800d036:	d110      	bne.n	800d05a <__cvt+0x92>
 800d038:	783b      	ldrb	r3, [r7, #0]
 800d03a:	2b30      	cmp	r3, #48	; 0x30
 800d03c:	d10a      	bne.n	800d054 <__cvt+0x8c>
 800d03e:	2200      	movs	r2, #0
 800d040:	2300      	movs	r3, #0
 800d042:	4620      	mov	r0, r4
 800d044:	4629      	mov	r1, r5
 800d046:	f7f3 fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800d04a:	b918      	cbnz	r0, 800d054 <__cvt+0x8c>
 800d04c:	f1c6 0601 	rsb	r6, r6, #1
 800d050:	f8ca 6000 	str.w	r6, [sl]
 800d054:	f8da 3000 	ldr.w	r3, [sl]
 800d058:	4499      	add	r9, r3
 800d05a:	2200      	movs	r2, #0
 800d05c:	2300      	movs	r3, #0
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	f7f3 fd51 	bl	8000b08 <__aeabi_dcmpeq>
 800d066:	b108      	cbz	r0, 800d06c <__cvt+0xa4>
 800d068:	f8cd 900c 	str.w	r9, [sp, #12]
 800d06c:	2230      	movs	r2, #48	; 0x30
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	454b      	cmp	r3, r9
 800d072:	d307      	bcc.n	800d084 <__cvt+0xbc>
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d078:	1bdb      	subs	r3, r3, r7
 800d07a:	4638      	mov	r0, r7
 800d07c:	6013      	str	r3, [r2, #0]
 800d07e:	b004      	add	sp, #16
 800d080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d084:	1c59      	adds	r1, r3, #1
 800d086:	9103      	str	r1, [sp, #12]
 800d088:	701a      	strb	r2, [r3, #0]
 800d08a:	e7f0      	b.n	800d06e <__cvt+0xa6>

0800d08c <__exponent>:
 800d08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d08e:	4603      	mov	r3, r0
 800d090:	2900      	cmp	r1, #0
 800d092:	bfb8      	it	lt
 800d094:	4249      	neglt	r1, r1
 800d096:	f803 2b02 	strb.w	r2, [r3], #2
 800d09a:	bfb4      	ite	lt
 800d09c:	222d      	movlt	r2, #45	; 0x2d
 800d09e:	222b      	movge	r2, #43	; 0x2b
 800d0a0:	2909      	cmp	r1, #9
 800d0a2:	7042      	strb	r2, [r0, #1]
 800d0a4:	dd2a      	ble.n	800d0fc <__exponent+0x70>
 800d0a6:	f10d 0207 	add.w	r2, sp, #7
 800d0aa:	4617      	mov	r7, r2
 800d0ac:	260a      	movs	r6, #10
 800d0ae:	4694      	mov	ip, r2
 800d0b0:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0b4:	fb06 1415 	mls	r4, r6, r5, r1
 800d0b8:	3430      	adds	r4, #48	; 0x30
 800d0ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0be:	460c      	mov	r4, r1
 800d0c0:	2c63      	cmp	r4, #99	; 0x63
 800d0c2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	dcf1      	bgt.n	800d0ae <__exponent+0x22>
 800d0ca:	3130      	adds	r1, #48	; 0x30
 800d0cc:	f1ac 0402 	sub.w	r4, ip, #2
 800d0d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d0d4:	1c41      	adds	r1, r0, #1
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	42ba      	cmp	r2, r7
 800d0da:	d30a      	bcc.n	800d0f2 <__exponent+0x66>
 800d0dc:	f10d 0209 	add.w	r2, sp, #9
 800d0e0:	eba2 020c 	sub.w	r2, r2, ip
 800d0e4:	42bc      	cmp	r4, r7
 800d0e6:	bf88      	it	hi
 800d0e8:	2200      	movhi	r2, #0
 800d0ea:	4413      	add	r3, r2
 800d0ec:	1a18      	subs	r0, r3, r0
 800d0ee:	b003      	add	sp, #12
 800d0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d0f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d0fa:	e7ed      	b.n	800d0d8 <__exponent+0x4c>
 800d0fc:	2330      	movs	r3, #48	; 0x30
 800d0fe:	3130      	adds	r1, #48	; 0x30
 800d100:	7083      	strb	r3, [r0, #2]
 800d102:	70c1      	strb	r1, [r0, #3]
 800d104:	1d03      	adds	r3, r0, #4
 800d106:	e7f1      	b.n	800d0ec <__exponent+0x60>

0800d108 <_printf_float>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	ed2d 8b02 	vpush	{d8}
 800d110:	b08d      	sub	sp, #52	; 0x34
 800d112:	460c      	mov	r4, r1
 800d114:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d118:	4616      	mov	r6, r2
 800d11a:	461f      	mov	r7, r3
 800d11c:	4605      	mov	r5, r0
 800d11e:	f000 ff2f 	bl	800df80 <_localeconv_r>
 800d122:	f8d0 a000 	ldr.w	sl, [r0]
 800d126:	4650      	mov	r0, sl
 800d128:	f7f3 f8c2 	bl	80002b0 <strlen>
 800d12c:	2300      	movs	r3, #0
 800d12e:	930a      	str	r3, [sp, #40]	; 0x28
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	f8d8 3000 	ldr.w	r3, [r8]
 800d138:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d13c:	3307      	adds	r3, #7
 800d13e:	f023 0307 	bic.w	r3, r3, #7
 800d142:	f103 0208 	add.w	r2, r3, #8
 800d146:	f8c8 2000 	str.w	r2, [r8]
 800d14a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d14e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d152:	9307      	str	r3, [sp, #28]
 800d154:	f8cd 8018 	str.w	r8, [sp, #24]
 800d158:	ee08 0a10 	vmov	s16, r0
 800d15c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d164:	4b9e      	ldr	r3, [pc, #632]	; (800d3e0 <_printf_float+0x2d8>)
 800d166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d16a:	f7f3 fcff 	bl	8000b6c <__aeabi_dcmpun>
 800d16e:	bb88      	cbnz	r0, 800d1d4 <_printf_float+0xcc>
 800d170:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d174:	4b9a      	ldr	r3, [pc, #616]	; (800d3e0 <_printf_float+0x2d8>)
 800d176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d17a:	f7f3 fcd9 	bl	8000b30 <__aeabi_dcmple>
 800d17e:	bb48      	cbnz	r0, 800d1d4 <_printf_float+0xcc>
 800d180:	2200      	movs	r2, #0
 800d182:	2300      	movs	r3, #0
 800d184:	4640      	mov	r0, r8
 800d186:	4649      	mov	r1, r9
 800d188:	f7f3 fcc8 	bl	8000b1c <__aeabi_dcmplt>
 800d18c:	b110      	cbz	r0, 800d194 <_printf_float+0x8c>
 800d18e:	232d      	movs	r3, #45	; 0x2d
 800d190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d194:	4a93      	ldr	r2, [pc, #588]	; (800d3e4 <_printf_float+0x2dc>)
 800d196:	4b94      	ldr	r3, [pc, #592]	; (800d3e8 <_printf_float+0x2e0>)
 800d198:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d19c:	bf94      	ite	ls
 800d19e:	4690      	movls	r8, r2
 800d1a0:	4698      	movhi	r8, r3
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	6123      	str	r3, [r4, #16]
 800d1a6:	9b05      	ldr	r3, [sp, #20]
 800d1a8:	f023 0304 	bic.w	r3, r3, #4
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	f04f 0900 	mov.w	r9, #0
 800d1b2:	9700      	str	r7, [sp, #0]
 800d1b4:	4633      	mov	r3, r6
 800d1b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f000 fa8a 	bl	800d6d4 <_printf_common>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	f040 8090 	bne.w	800d2e6 <_printf_float+0x1de>
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ca:	b00d      	add	sp, #52	; 0x34
 800d1cc:	ecbd 8b02 	vpop	{d8}
 800d1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d4:	4642      	mov	r2, r8
 800d1d6:	464b      	mov	r3, r9
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 fcc6 	bl	8000b6c <__aeabi_dcmpun>
 800d1e0:	b140      	cbz	r0, 800d1f4 <_printf_float+0xec>
 800d1e2:	464b      	mov	r3, r9
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	bfbc      	itt	lt
 800d1e8:	232d      	movlt	r3, #45	; 0x2d
 800d1ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1ee:	4a7f      	ldr	r2, [pc, #508]	; (800d3ec <_printf_float+0x2e4>)
 800d1f0:	4b7f      	ldr	r3, [pc, #508]	; (800d3f0 <_printf_float+0x2e8>)
 800d1f2:	e7d1      	b.n	800d198 <_printf_float+0x90>
 800d1f4:	6863      	ldr	r3, [r4, #4]
 800d1f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1fa:	9206      	str	r2, [sp, #24]
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	d13f      	bne.n	800d280 <_printf_float+0x178>
 800d200:	2306      	movs	r3, #6
 800d202:	6063      	str	r3, [r4, #4]
 800d204:	9b05      	ldr	r3, [sp, #20]
 800d206:	6861      	ldr	r1, [r4, #4]
 800d208:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d20c:	2300      	movs	r3, #0
 800d20e:	9303      	str	r3, [sp, #12]
 800d210:	ab0a      	add	r3, sp, #40	; 0x28
 800d212:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d216:	ab09      	add	r3, sp, #36	; 0x24
 800d218:	ec49 8b10 	vmov	d0, r8, r9
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	6022      	str	r2, [r4, #0]
 800d220:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d224:	4628      	mov	r0, r5
 800d226:	f7ff fecf 	bl	800cfc8 <__cvt>
 800d22a:	9b06      	ldr	r3, [sp, #24]
 800d22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d22e:	2b47      	cmp	r3, #71	; 0x47
 800d230:	4680      	mov	r8, r0
 800d232:	d108      	bne.n	800d246 <_printf_float+0x13e>
 800d234:	1cc8      	adds	r0, r1, #3
 800d236:	db02      	blt.n	800d23e <_printf_float+0x136>
 800d238:	6863      	ldr	r3, [r4, #4]
 800d23a:	4299      	cmp	r1, r3
 800d23c:	dd41      	ble.n	800d2c2 <_printf_float+0x1ba>
 800d23e:	f1ab 0302 	sub.w	r3, fp, #2
 800d242:	fa5f fb83 	uxtb.w	fp, r3
 800d246:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d24a:	d820      	bhi.n	800d28e <_printf_float+0x186>
 800d24c:	3901      	subs	r1, #1
 800d24e:	465a      	mov	r2, fp
 800d250:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d254:	9109      	str	r1, [sp, #36]	; 0x24
 800d256:	f7ff ff19 	bl	800d08c <__exponent>
 800d25a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d25c:	1813      	adds	r3, r2, r0
 800d25e:	2a01      	cmp	r2, #1
 800d260:	4681      	mov	r9, r0
 800d262:	6123      	str	r3, [r4, #16]
 800d264:	dc02      	bgt.n	800d26c <_printf_float+0x164>
 800d266:	6822      	ldr	r2, [r4, #0]
 800d268:	07d2      	lsls	r2, r2, #31
 800d26a:	d501      	bpl.n	800d270 <_printf_float+0x168>
 800d26c:	3301      	adds	r3, #1
 800d26e:	6123      	str	r3, [r4, #16]
 800d270:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d274:	2b00      	cmp	r3, #0
 800d276:	d09c      	beq.n	800d1b2 <_printf_float+0xaa>
 800d278:	232d      	movs	r3, #45	; 0x2d
 800d27a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d27e:	e798      	b.n	800d1b2 <_printf_float+0xaa>
 800d280:	9a06      	ldr	r2, [sp, #24]
 800d282:	2a47      	cmp	r2, #71	; 0x47
 800d284:	d1be      	bne.n	800d204 <_printf_float+0xfc>
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1bc      	bne.n	800d204 <_printf_float+0xfc>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e7b9      	b.n	800d202 <_printf_float+0xfa>
 800d28e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d292:	d118      	bne.n	800d2c6 <_printf_float+0x1be>
 800d294:	2900      	cmp	r1, #0
 800d296:	6863      	ldr	r3, [r4, #4]
 800d298:	dd0b      	ble.n	800d2b2 <_printf_float+0x1aa>
 800d29a:	6121      	str	r1, [r4, #16]
 800d29c:	b913      	cbnz	r3, 800d2a4 <_printf_float+0x19c>
 800d29e:	6822      	ldr	r2, [r4, #0]
 800d2a0:	07d0      	lsls	r0, r2, #31
 800d2a2:	d502      	bpl.n	800d2aa <_printf_float+0x1a2>
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	440b      	add	r3, r1
 800d2a8:	6123      	str	r3, [r4, #16]
 800d2aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2ac:	f04f 0900 	mov.w	r9, #0
 800d2b0:	e7de      	b.n	800d270 <_printf_float+0x168>
 800d2b2:	b913      	cbnz	r3, 800d2ba <_printf_float+0x1b2>
 800d2b4:	6822      	ldr	r2, [r4, #0]
 800d2b6:	07d2      	lsls	r2, r2, #31
 800d2b8:	d501      	bpl.n	800d2be <_printf_float+0x1b6>
 800d2ba:	3302      	adds	r3, #2
 800d2bc:	e7f4      	b.n	800d2a8 <_printf_float+0x1a0>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e7f2      	b.n	800d2a8 <_printf_float+0x1a0>
 800d2c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2c8:	4299      	cmp	r1, r3
 800d2ca:	db05      	blt.n	800d2d8 <_printf_float+0x1d0>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	6121      	str	r1, [r4, #16]
 800d2d0:	07d8      	lsls	r0, r3, #31
 800d2d2:	d5ea      	bpl.n	800d2aa <_printf_float+0x1a2>
 800d2d4:	1c4b      	adds	r3, r1, #1
 800d2d6:	e7e7      	b.n	800d2a8 <_printf_float+0x1a0>
 800d2d8:	2900      	cmp	r1, #0
 800d2da:	bfd4      	ite	le
 800d2dc:	f1c1 0202 	rsble	r2, r1, #2
 800d2e0:	2201      	movgt	r2, #1
 800d2e2:	4413      	add	r3, r2
 800d2e4:	e7e0      	b.n	800d2a8 <_printf_float+0x1a0>
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	055a      	lsls	r2, r3, #21
 800d2ea:	d407      	bmi.n	800d2fc <_printf_float+0x1f4>
 800d2ec:	6923      	ldr	r3, [r4, #16]
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	47b8      	blx	r7
 800d2f6:	3001      	adds	r0, #1
 800d2f8:	d12c      	bne.n	800d354 <_printf_float+0x24c>
 800d2fa:	e764      	b.n	800d1c6 <_printf_float+0xbe>
 800d2fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d300:	f240 80e0 	bls.w	800d4c4 <_printf_float+0x3bc>
 800d304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d308:	2200      	movs	r2, #0
 800d30a:	2300      	movs	r3, #0
 800d30c:	f7f3 fbfc 	bl	8000b08 <__aeabi_dcmpeq>
 800d310:	2800      	cmp	r0, #0
 800d312:	d034      	beq.n	800d37e <_printf_float+0x276>
 800d314:	4a37      	ldr	r2, [pc, #220]	; (800d3f4 <_printf_float+0x2ec>)
 800d316:	2301      	movs	r3, #1
 800d318:	4631      	mov	r1, r6
 800d31a:	4628      	mov	r0, r5
 800d31c:	47b8      	blx	r7
 800d31e:	3001      	adds	r0, #1
 800d320:	f43f af51 	beq.w	800d1c6 <_printf_float+0xbe>
 800d324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d328:	429a      	cmp	r2, r3
 800d32a:	db02      	blt.n	800d332 <_printf_float+0x22a>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	07d8      	lsls	r0, r3, #31
 800d330:	d510      	bpl.n	800d354 <_printf_float+0x24c>
 800d332:	ee18 3a10 	vmov	r3, s16
 800d336:	4652      	mov	r2, sl
 800d338:	4631      	mov	r1, r6
 800d33a:	4628      	mov	r0, r5
 800d33c:	47b8      	blx	r7
 800d33e:	3001      	adds	r0, #1
 800d340:	f43f af41 	beq.w	800d1c6 <_printf_float+0xbe>
 800d344:	f04f 0800 	mov.w	r8, #0
 800d348:	f104 091a 	add.w	r9, r4, #26
 800d34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d34e:	3b01      	subs	r3, #1
 800d350:	4543      	cmp	r3, r8
 800d352:	dc09      	bgt.n	800d368 <_printf_float+0x260>
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	079b      	lsls	r3, r3, #30
 800d358:	f100 8107 	bmi.w	800d56a <_printf_float+0x462>
 800d35c:	68e0      	ldr	r0, [r4, #12]
 800d35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d360:	4298      	cmp	r0, r3
 800d362:	bfb8      	it	lt
 800d364:	4618      	movlt	r0, r3
 800d366:	e730      	b.n	800d1ca <_printf_float+0xc2>
 800d368:	2301      	movs	r3, #1
 800d36a:	464a      	mov	r2, r9
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f af27 	beq.w	800d1c6 <_printf_float+0xbe>
 800d378:	f108 0801 	add.w	r8, r8, #1
 800d37c:	e7e6      	b.n	800d34c <_printf_float+0x244>
 800d37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d380:	2b00      	cmp	r3, #0
 800d382:	dc39      	bgt.n	800d3f8 <_printf_float+0x2f0>
 800d384:	4a1b      	ldr	r2, [pc, #108]	; (800d3f4 <_printf_float+0x2ec>)
 800d386:	2301      	movs	r3, #1
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b8      	blx	r7
 800d38e:	3001      	adds	r0, #1
 800d390:	f43f af19 	beq.w	800d1c6 <_printf_float+0xbe>
 800d394:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d398:	4313      	orrs	r3, r2
 800d39a:	d102      	bne.n	800d3a2 <_printf_float+0x29a>
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	07d9      	lsls	r1, r3, #31
 800d3a0:	d5d8      	bpl.n	800d354 <_printf_float+0x24c>
 800d3a2:	ee18 3a10 	vmov	r3, s16
 800d3a6:	4652      	mov	r2, sl
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	47b8      	blx	r7
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	f43f af09 	beq.w	800d1c6 <_printf_float+0xbe>
 800d3b4:	f04f 0900 	mov.w	r9, #0
 800d3b8:	f104 0a1a 	add.w	sl, r4, #26
 800d3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3be:	425b      	negs	r3, r3
 800d3c0:	454b      	cmp	r3, r9
 800d3c2:	dc01      	bgt.n	800d3c8 <_printf_float+0x2c0>
 800d3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c6:	e792      	b.n	800d2ee <_printf_float+0x1e6>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4652      	mov	r2, sl
 800d3cc:	4631      	mov	r1, r6
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	47b8      	blx	r7
 800d3d2:	3001      	adds	r0, #1
 800d3d4:	f43f aef7 	beq.w	800d1c6 <_printf_float+0xbe>
 800d3d8:	f109 0901 	add.w	r9, r9, #1
 800d3dc:	e7ee      	b.n	800d3bc <_printf_float+0x2b4>
 800d3de:	bf00      	nop
 800d3e0:	7fefffff 	.word	0x7fefffff
 800d3e4:	08015af0 	.word	0x08015af0
 800d3e8:	08015af4 	.word	0x08015af4
 800d3ec:	08015af8 	.word	0x08015af8
 800d3f0:	08015afc 	.word	0x08015afc
 800d3f4:	08015d13 	.word	0x08015d13
 800d3f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	bfa8      	it	ge
 800d400:	461a      	movge	r2, r3
 800d402:	2a00      	cmp	r2, #0
 800d404:	4691      	mov	r9, r2
 800d406:	dc37      	bgt.n	800d478 <_printf_float+0x370>
 800d408:	f04f 0b00 	mov.w	fp, #0
 800d40c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d410:	f104 021a 	add.w	r2, r4, #26
 800d414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	eba3 0309 	sub.w	r3, r3, r9
 800d41c:	455b      	cmp	r3, fp
 800d41e:	dc33      	bgt.n	800d488 <_printf_float+0x380>
 800d420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d424:	429a      	cmp	r2, r3
 800d426:	db3b      	blt.n	800d4a0 <_printf_float+0x398>
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	07da      	lsls	r2, r3, #31
 800d42c:	d438      	bmi.n	800d4a0 <_printf_float+0x398>
 800d42e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d432:	eba2 0903 	sub.w	r9, r2, r3
 800d436:	9b05      	ldr	r3, [sp, #20]
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	4591      	cmp	r9, r2
 800d43c:	bfa8      	it	ge
 800d43e:	4691      	movge	r9, r2
 800d440:	f1b9 0f00 	cmp.w	r9, #0
 800d444:	dc35      	bgt.n	800d4b2 <_printf_float+0x3aa>
 800d446:	f04f 0800 	mov.w	r8, #0
 800d44a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d44e:	f104 0a1a 	add.w	sl, r4, #26
 800d452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d456:	1a9b      	subs	r3, r3, r2
 800d458:	eba3 0309 	sub.w	r3, r3, r9
 800d45c:	4543      	cmp	r3, r8
 800d45e:	f77f af79 	ble.w	800d354 <_printf_float+0x24c>
 800d462:	2301      	movs	r3, #1
 800d464:	4652      	mov	r2, sl
 800d466:	4631      	mov	r1, r6
 800d468:	4628      	mov	r0, r5
 800d46a:	47b8      	blx	r7
 800d46c:	3001      	adds	r0, #1
 800d46e:	f43f aeaa 	beq.w	800d1c6 <_printf_float+0xbe>
 800d472:	f108 0801 	add.w	r8, r8, #1
 800d476:	e7ec      	b.n	800d452 <_printf_float+0x34a>
 800d478:	4613      	mov	r3, r2
 800d47a:	4631      	mov	r1, r6
 800d47c:	4642      	mov	r2, r8
 800d47e:	4628      	mov	r0, r5
 800d480:	47b8      	blx	r7
 800d482:	3001      	adds	r0, #1
 800d484:	d1c0      	bne.n	800d408 <_printf_float+0x300>
 800d486:	e69e      	b.n	800d1c6 <_printf_float+0xbe>
 800d488:	2301      	movs	r3, #1
 800d48a:	4631      	mov	r1, r6
 800d48c:	4628      	mov	r0, r5
 800d48e:	9205      	str	r2, [sp, #20]
 800d490:	47b8      	blx	r7
 800d492:	3001      	adds	r0, #1
 800d494:	f43f ae97 	beq.w	800d1c6 <_printf_float+0xbe>
 800d498:	9a05      	ldr	r2, [sp, #20]
 800d49a:	f10b 0b01 	add.w	fp, fp, #1
 800d49e:	e7b9      	b.n	800d414 <_printf_float+0x30c>
 800d4a0:	ee18 3a10 	vmov	r3, s16
 800d4a4:	4652      	mov	r2, sl
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	d1be      	bne.n	800d42e <_printf_float+0x326>
 800d4b0:	e689      	b.n	800d1c6 <_printf_float+0xbe>
 800d4b2:	9a05      	ldr	r2, [sp, #20]
 800d4b4:	464b      	mov	r3, r9
 800d4b6:	4442      	add	r2, r8
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	47b8      	blx	r7
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d1c1      	bne.n	800d446 <_printf_float+0x33e>
 800d4c2:	e680      	b.n	800d1c6 <_printf_float+0xbe>
 800d4c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4c6:	2a01      	cmp	r2, #1
 800d4c8:	dc01      	bgt.n	800d4ce <_printf_float+0x3c6>
 800d4ca:	07db      	lsls	r3, r3, #31
 800d4cc:	d53a      	bpl.n	800d544 <_printf_float+0x43c>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4642      	mov	r2, r8
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	47b8      	blx	r7
 800d4d8:	3001      	adds	r0, #1
 800d4da:	f43f ae74 	beq.w	800d1c6 <_printf_float+0xbe>
 800d4de:	ee18 3a10 	vmov	r3, s16
 800d4e2:	4652      	mov	r2, sl
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b8      	blx	r7
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	f43f ae6b 	beq.w	800d1c6 <_printf_float+0xbe>
 800d4f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d4fc:	f7f3 fb04 	bl	8000b08 <__aeabi_dcmpeq>
 800d500:	b9d8      	cbnz	r0, 800d53a <_printf_float+0x432>
 800d502:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d506:	f108 0201 	add.w	r2, r8, #1
 800d50a:	4631      	mov	r1, r6
 800d50c:	4628      	mov	r0, r5
 800d50e:	47b8      	blx	r7
 800d510:	3001      	adds	r0, #1
 800d512:	d10e      	bne.n	800d532 <_printf_float+0x42a>
 800d514:	e657      	b.n	800d1c6 <_printf_float+0xbe>
 800d516:	2301      	movs	r3, #1
 800d518:	4652      	mov	r2, sl
 800d51a:	4631      	mov	r1, r6
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b8      	blx	r7
 800d520:	3001      	adds	r0, #1
 800d522:	f43f ae50 	beq.w	800d1c6 <_printf_float+0xbe>
 800d526:	f108 0801 	add.w	r8, r8, #1
 800d52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d52c:	3b01      	subs	r3, #1
 800d52e:	4543      	cmp	r3, r8
 800d530:	dcf1      	bgt.n	800d516 <_printf_float+0x40e>
 800d532:	464b      	mov	r3, r9
 800d534:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d538:	e6da      	b.n	800d2f0 <_printf_float+0x1e8>
 800d53a:	f04f 0800 	mov.w	r8, #0
 800d53e:	f104 0a1a 	add.w	sl, r4, #26
 800d542:	e7f2      	b.n	800d52a <_printf_float+0x422>
 800d544:	2301      	movs	r3, #1
 800d546:	4642      	mov	r2, r8
 800d548:	e7df      	b.n	800d50a <_printf_float+0x402>
 800d54a:	2301      	movs	r3, #1
 800d54c:	464a      	mov	r2, r9
 800d54e:	4631      	mov	r1, r6
 800d550:	4628      	mov	r0, r5
 800d552:	47b8      	blx	r7
 800d554:	3001      	adds	r0, #1
 800d556:	f43f ae36 	beq.w	800d1c6 <_printf_float+0xbe>
 800d55a:	f108 0801 	add.w	r8, r8, #1
 800d55e:	68e3      	ldr	r3, [r4, #12]
 800d560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d562:	1a5b      	subs	r3, r3, r1
 800d564:	4543      	cmp	r3, r8
 800d566:	dcf0      	bgt.n	800d54a <_printf_float+0x442>
 800d568:	e6f8      	b.n	800d35c <_printf_float+0x254>
 800d56a:	f04f 0800 	mov.w	r8, #0
 800d56e:	f104 0919 	add.w	r9, r4, #25
 800d572:	e7f4      	b.n	800d55e <_printf_float+0x456>

0800d574 <malloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	; (800d580 <malloc+0xc>)
 800d576:	4601      	mov	r1, r0
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f000 b82b 	b.w	800d5d4 <_malloc_r>
 800d57e:	bf00      	nop
 800d580:	200000a4 	.word	0x200000a4

0800d584 <free>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <free+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f001 bc2f 	b.w	800edec <_free_r>
 800d58e:	bf00      	nop
 800d590:	200000a4 	.word	0x200000a4

0800d594 <sbrk_aligned>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	4e0e      	ldr	r6, [pc, #56]	; (800d5d0 <sbrk_aligned+0x3c>)
 800d598:	460c      	mov	r4, r1
 800d59a:	6831      	ldr	r1, [r6, #0]
 800d59c:	4605      	mov	r5, r0
 800d59e:	b911      	cbnz	r1, 800d5a6 <sbrk_aligned+0x12>
 800d5a0:	f000 fd26 	bl	800dff0 <_sbrk_r>
 800d5a4:	6030      	str	r0, [r6, #0]
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f000 fd21 	bl	800dff0 <_sbrk_r>
 800d5ae:	1c43      	adds	r3, r0, #1
 800d5b0:	d00a      	beq.n	800d5c8 <sbrk_aligned+0x34>
 800d5b2:	1cc4      	adds	r4, r0, #3
 800d5b4:	f024 0403 	bic.w	r4, r4, #3
 800d5b8:	42a0      	cmp	r0, r4
 800d5ba:	d007      	beq.n	800d5cc <sbrk_aligned+0x38>
 800d5bc:	1a21      	subs	r1, r4, r0
 800d5be:	4628      	mov	r0, r5
 800d5c0:	f000 fd16 	bl	800dff0 <_sbrk_r>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d101      	bne.n	800d5cc <sbrk_aligned+0x38>
 800d5c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	20009d94 	.word	0x20009d94

0800d5d4 <_malloc_r>:
 800d5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d8:	1ccd      	adds	r5, r1, #3
 800d5da:	f025 0503 	bic.w	r5, r5, #3
 800d5de:	3508      	adds	r5, #8
 800d5e0:	2d0c      	cmp	r5, #12
 800d5e2:	bf38      	it	cc
 800d5e4:	250c      	movcc	r5, #12
 800d5e6:	2d00      	cmp	r5, #0
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	db01      	blt.n	800d5f0 <_malloc_r+0x1c>
 800d5ec:	42a9      	cmp	r1, r5
 800d5ee:	d905      	bls.n	800d5fc <_malloc_r+0x28>
 800d5f0:	230c      	movs	r3, #12
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	2600      	movs	r6, #0
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6d0 <_malloc_r+0xfc>
 800d600:	f000 fa2c 	bl	800da5c <__malloc_lock>
 800d604:	f8d8 3000 	ldr.w	r3, [r8]
 800d608:	461c      	mov	r4, r3
 800d60a:	bb5c      	cbnz	r4, 800d664 <_malloc_r+0x90>
 800d60c:	4629      	mov	r1, r5
 800d60e:	4638      	mov	r0, r7
 800d610:	f7ff ffc0 	bl	800d594 <sbrk_aligned>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	4604      	mov	r4, r0
 800d618:	d155      	bne.n	800d6c6 <_malloc_r+0xf2>
 800d61a:	f8d8 4000 	ldr.w	r4, [r8]
 800d61e:	4626      	mov	r6, r4
 800d620:	2e00      	cmp	r6, #0
 800d622:	d145      	bne.n	800d6b0 <_malloc_r+0xdc>
 800d624:	2c00      	cmp	r4, #0
 800d626:	d048      	beq.n	800d6ba <_malloc_r+0xe6>
 800d628:	6823      	ldr	r3, [r4, #0]
 800d62a:	4631      	mov	r1, r6
 800d62c:	4638      	mov	r0, r7
 800d62e:	eb04 0903 	add.w	r9, r4, r3
 800d632:	f000 fcdd 	bl	800dff0 <_sbrk_r>
 800d636:	4581      	cmp	r9, r0
 800d638:	d13f      	bne.n	800d6ba <_malloc_r+0xe6>
 800d63a:	6821      	ldr	r1, [r4, #0]
 800d63c:	1a6d      	subs	r5, r5, r1
 800d63e:	4629      	mov	r1, r5
 800d640:	4638      	mov	r0, r7
 800d642:	f7ff ffa7 	bl	800d594 <sbrk_aligned>
 800d646:	3001      	adds	r0, #1
 800d648:	d037      	beq.n	800d6ba <_malloc_r+0xe6>
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	442b      	add	r3, r5
 800d64e:	6023      	str	r3, [r4, #0]
 800d650:	f8d8 3000 	ldr.w	r3, [r8]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d038      	beq.n	800d6ca <_malloc_r+0xf6>
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	42a2      	cmp	r2, r4
 800d65c:	d12b      	bne.n	800d6b6 <_malloc_r+0xe2>
 800d65e:	2200      	movs	r2, #0
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	e00f      	b.n	800d684 <_malloc_r+0xb0>
 800d664:	6822      	ldr	r2, [r4, #0]
 800d666:	1b52      	subs	r2, r2, r5
 800d668:	d41f      	bmi.n	800d6aa <_malloc_r+0xd6>
 800d66a:	2a0b      	cmp	r2, #11
 800d66c:	d917      	bls.n	800d69e <_malloc_r+0xca>
 800d66e:	1961      	adds	r1, r4, r5
 800d670:	42a3      	cmp	r3, r4
 800d672:	6025      	str	r5, [r4, #0]
 800d674:	bf18      	it	ne
 800d676:	6059      	strne	r1, [r3, #4]
 800d678:	6863      	ldr	r3, [r4, #4]
 800d67a:	bf08      	it	eq
 800d67c:	f8c8 1000 	streq.w	r1, [r8]
 800d680:	5162      	str	r2, [r4, r5]
 800d682:	604b      	str	r3, [r1, #4]
 800d684:	4638      	mov	r0, r7
 800d686:	f104 060b 	add.w	r6, r4, #11
 800d68a:	f000 f9ed 	bl	800da68 <__malloc_unlock>
 800d68e:	f026 0607 	bic.w	r6, r6, #7
 800d692:	1d23      	adds	r3, r4, #4
 800d694:	1af2      	subs	r2, r6, r3
 800d696:	d0ae      	beq.n	800d5f6 <_malloc_r+0x22>
 800d698:	1b9b      	subs	r3, r3, r6
 800d69a:	50a3      	str	r3, [r4, r2]
 800d69c:	e7ab      	b.n	800d5f6 <_malloc_r+0x22>
 800d69e:	42a3      	cmp	r3, r4
 800d6a0:	6862      	ldr	r2, [r4, #4]
 800d6a2:	d1dd      	bne.n	800d660 <_malloc_r+0x8c>
 800d6a4:	f8c8 2000 	str.w	r2, [r8]
 800d6a8:	e7ec      	b.n	800d684 <_malloc_r+0xb0>
 800d6aa:	4623      	mov	r3, r4
 800d6ac:	6864      	ldr	r4, [r4, #4]
 800d6ae:	e7ac      	b.n	800d60a <_malloc_r+0x36>
 800d6b0:	4634      	mov	r4, r6
 800d6b2:	6876      	ldr	r6, [r6, #4]
 800d6b4:	e7b4      	b.n	800d620 <_malloc_r+0x4c>
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	e7cc      	b.n	800d654 <_malloc_r+0x80>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	603b      	str	r3, [r7, #0]
 800d6be:	4638      	mov	r0, r7
 800d6c0:	f000 f9d2 	bl	800da68 <__malloc_unlock>
 800d6c4:	e797      	b.n	800d5f6 <_malloc_r+0x22>
 800d6c6:	6025      	str	r5, [r4, #0]
 800d6c8:	e7dc      	b.n	800d684 <_malloc_r+0xb0>
 800d6ca:	605b      	str	r3, [r3, #4]
 800d6cc:	deff      	udf	#255	; 0xff
 800d6ce:	bf00      	nop
 800d6d0:	20009d90 	.word	0x20009d90

0800d6d4 <_printf_common>:
 800d6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d8:	4616      	mov	r6, r2
 800d6da:	4699      	mov	r9, r3
 800d6dc:	688a      	ldr	r2, [r1, #8]
 800d6de:	690b      	ldr	r3, [r1, #16]
 800d6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bfb8      	it	lt
 800d6e8:	4613      	movlt	r3, r2
 800d6ea:	6033      	str	r3, [r6, #0]
 800d6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b10a      	cbz	r2, 800d6fa <_printf_common+0x26>
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	0699      	lsls	r1, r3, #26
 800d6fe:	bf42      	ittt	mi
 800d700:	6833      	ldrmi	r3, [r6, #0]
 800d702:	3302      	addmi	r3, #2
 800d704:	6033      	strmi	r3, [r6, #0]
 800d706:	6825      	ldr	r5, [r4, #0]
 800d708:	f015 0506 	ands.w	r5, r5, #6
 800d70c:	d106      	bne.n	800d71c <_printf_common+0x48>
 800d70e:	f104 0a19 	add.w	sl, r4, #25
 800d712:	68e3      	ldr	r3, [r4, #12]
 800d714:	6832      	ldr	r2, [r6, #0]
 800d716:	1a9b      	subs	r3, r3, r2
 800d718:	42ab      	cmp	r3, r5
 800d71a:	dc26      	bgt.n	800d76a <_printf_common+0x96>
 800d71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d720:	1e13      	subs	r3, r2, #0
 800d722:	6822      	ldr	r2, [r4, #0]
 800d724:	bf18      	it	ne
 800d726:	2301      	movne	r3, #1
 800d728:	0692      	lsls	r2, r2, #26
 800d72a:	d42b      	bmi.n	800d784 <_printf_common+0xb0>
 800d72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d730:	4649      	mov	r1, r9
 800d732:	4638      	mov	r0, r7
 800d734:	47c0      	blx	r8
 800d736:	3001      	adds	r0, #1
 800d738:	d01e      	beq.n	800d778 <_printf_common+0xa4>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	6922      	ldr	r2, [r4, #16]
 800d73e:	f003 0306 	and.w	r3, r3, #6
 800d742:	2b04      	cmp	r3, #4
 800d744:	bf02      	ittt	eq
 800d746:	68e5      	ldreq	r5, [r4, #12]
 800d748:	6833      	ldreq	r3, [r6, #0]
 800d74a:	1aed      	subeq	r5, r5, r3
 800d74c:	68a3      	ldr	r3, [r4, #8]
 800d74e:	bf0c      	ite	eq
 800d750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d754:	2500      	movne	r5, #0
 800d756:	4293      	cmp	r3, r2
 800d758:	bfc4      	itt	gt
 800d75a:	1a9b      	subgt	r3, r3, r2
 800d75c:	18ed      	addgt	r5, r5, r3
 800d75e:	2600      	movs	r6, #0
 800d760:	341a      	adds	r4, #26
 800d762:	42b5      	cmp	r5, r6
 800d764:	d11a      	bne.n	800d79c <_printf_common+0xc8>
 800d766:	2000      	movs	r0, #0
 800d768:	e008      	b.n	800d77c <_printf_common+0xa8>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4652      	mov	r2, sl
 800d76e:	4649      	mov	r1, r9
 800d770:	4638      	mov	r0, r7
 800d772:	47c0      	blx	r8
 800d774:	3001      	adds	r0, #1
 800d776:	d103      	bne.n	800d780 <_printf_common+0xac>
 800d778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d780:	3501      	adds	r5, #1
 800d782:	e7c6      	b.n	800d712 <_printf_common+0x3e>
 800d784:	18e1      	adds	r1, r4, r3
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	2030      	movs	r0, #48	; 0x30
 800d78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d78e:	4422      	add	r2, r4
 800d790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d798:	3302      	adds	r3, #2
 800d79a:	e7c7      	b.n	800d72c <_printf_common+0x58>
 800d79c:	2301      	movs	r3, #1
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4649      	mov	r1, r9
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	47c0      	blx	r8
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d0e6      	beq.n	800d778 <_printf_common+0xa4>
 800d7aa:	3601      	adds	r6, #1
 800d7ac:	e7d9      	b.n	800d762 <_printf_common+0x8e>
	...

0800d7b0 <_printf_i>:
 800d7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	7e0f      	ldrb	r7, [r1, #24]
 800d7b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7b8:	2f78      	cmp	r7, #120	; 0x78
 800d7ba:	4691      	mov	r9, r2
 800d7bc:	4680      	mov	r8, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	469a      	mov	sl, r3
 800d7c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7c6:	d807      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7c8:	2f62      	cmp	r7, #98	; 0x62
 800d7ca:	d80a      	bhi.n	800d7e2 <_printf_i+0x32>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	f000 80d4 	beq.w	800d97a <_printf_i+0x1ca>
 800d7d2:	2f58      	cmp	r7, #88	; 0x58
 800d7d4:	f000 80c0 	beq.w	800d958 <_printf_i+0x1a8>
 800d7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7e0:	e03a      	b.n	800d858 <_printf_i+0xa8>
 800d7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7e6:	2b15      	cmp	r3, #21
 800d7e8:	d8f6      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7ea:	a101      	add	r1, pc, #4	; (adr r1, 800d7f0 <_printf_i+0x40>)
 800d7ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7f0:	0800d849 	.word	0x0800d849
 800d7f4:	0800d85d 	.word	0x0800d85d
 800d7f8:	0800d7d9 	.word	0x0800d7d9
 800d7fc:	0800d7d9 	.word	0x0800d7d9
 800d800:	0800d7d9 	.word	0x0800d7d9
 800d804:	0800d7d9 	.word	0x0800d7d9
 800d808:	0800d85d 	.word	0x0800d85d
 800d80c:	0800d7d9 	.word	0x0800d7d9
 800d810:	0800d7d9 	.word	0x0800d7d9
 800d814:	0800d7d9 	.word	0x0800d7d9
 800d818:	0800d7d9 	.word	0x0800d7d9
 800d81c:	0800d961 	.word	0x0800d961
 800d820:	0800d889 	.word	0x0800d889
 800d824:	0800d91b 	.word	0x0800d91b
 800d828:	0800d7d9 	.word	0x0800d7d9
 800d82c:	0800d7d9 	.word	0x0800d7d9
 800d830:	0800d983 	.word	0x0800d983
 800d834:	0800d7d9 	.word	0x0800d7d9
 800d838:	0800d889 	.word	0x0800d889
 800d83c:	0800d7d9 	.word	0x0800d7d9
 800d840:	0800d7d9 	.word	0x0800d7d9
 800d844:	0800d923 	.word	0x0800d923
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	1d1a      	adds	r2, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	602a      	str	r2, [r5, #0]
 800d850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d858:	2301      	movs	r3, #1
 800d85a:	e09f      	b.n	800d99c <_printf_i+0x1ec>
 800d85c:	6820      	ldr	r0, [r4, #0]
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	0607      	lsls	r7, r0, #24
 800d862:	f103 0104 	add.w	r1, r3, #4
 800d866:	6029      	str	r1, [r5, #0]
 800d868:	d501      	bpl.n	800d86e <_printf_i+0xbe>
 800d86a:	681e      	ldr	r6, [r3, #0]
 800d86c:	e003      	b.n	800d876 <_printf_i+0xc6>
 800d86e:	0646      	lsls	r6, r0, #25
 800d870:	d5fb      	bpl.n	800d86a <_printf_i+0xba>
 800d872:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d876:	2e00      	cmp	r6, #0
 800d878:	da03      	bge.n	800d882 <_printf_i+0xd2>
 800d87a:	232d      	movs	r3, #45	; 0x2d
 800d87c:	4276      	negs	r6, r6
 800d87e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d882:	485a      	ldr	r0, [pc, #360]	; (800d9ec <_printf_i+0x23c>)
 800d884:	230a      	movs	r3, #10
 800d886:	e012      	b.n	800d8ae <_printf_i+0xfe>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	6820      	ldr	r0, [r4, #0]
 800d88c:	1d19      	adds	r1, r3, #4
 800d88e:	6029      	str	r1, [r5, #0]
 800d890:	0605      	lsls	r5, r0, #24
 800d892:	d501      	bpl.n	800d898 <_printf_i+0xe8>
 800d894:	681e      	ldr	r6, [r3, #0]
 800d896:	e002      	b.n	800d89e <_printf_i+0xee>
 800d898:	0641      	lsls	r1, r0, #25
 800d89a:	d5fb      	bpl.n	800d894 <_printf_i+0xe4>
 800d89c:	881e      	ldrh	r6, [r3, #0]
 800d89e:	4853      	ldr	r0, [pc, #332]	; (800d9ec <_printf_i+0x23c>)
 800d8a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d8a2:	bf0c      	ite	eq
 800d8a4:	2308      	moveq	r3, #8
 800d8a6:	230a      	movne	r3, #10
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8ae:	6865      	ldr	r5, [r4, #4]
 800d8b0:	60a5      	str	r5, [r4, #8]
 800d8b2:	2d00      	cmp	r5, #0
 800d8b4:	bfa2      	ittt	ge
 800d8b6:	6821      	ldrge	r1, [r4, #0]
 800d8b8:	f021 0104 	bicge.w	r1, r1, #4
 800d8bc:	6021      	strge	r1, [r4, #0]
 800d8be:	b90e      	cbnz	r6, 800d8c4 <_printf_i+0x114>
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	d04b      	beq.n	800d95c <_printf_i+0x1ac>
 800d8c4:	4615      	mov	r5, r2
 800d8c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d8ce:	5dc7      	ldrb	r7, [r0, r7]
 800d8d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8d4:	4637      	mov	r7, r6
 800d8d6:	42bb      	cmp	r3, r7
 800d8d8:	460e      	mov	r6, r1
 800d8da:	d9f4      	bls.n	800d8c6 <_printf_i+0x116>
 800d8dc:	2b08      	cmp	r3, #8
 800d8de:	d10b      	bne.n	800d8f8 <_printf_i+0x148>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	07de      	lsls	r6, r3, #31
 800d8e4:	d508      	bpl.n	800d8f8 <_printf_i+0x148>
 800d8e6:	6923      	ldr	r3, [r4, #16]
 800d8e8:	6861      	ldr	r1, [r4, #4]
 800d8ea:	4299      	cmp	r1, r3
 800d8ec:	bfde      	ittt	le
 800d8ee:	2330      	movle	r3, #48	; 0x30
 800d8f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d8f8:	1b52      	subs	r2, r2, r5
 800d8fa:	6122      	str	r2, [r4, #16]
 800d8fc:	f8cd a000 	str.w	sl, [sp]
 800d900:	464b      	mov	r3, r9
 800d902:	aa03      	add	r2, sp, #12
 800d904:	4621      	mov	r1, r4
 800d906:	4640      	mov	r0, r8
 800d908:	f7ff fee4 	bl	800d6d4 <_printf_common>
 800d90c:	3001      	adds	r0, #1
 800d90e:	d14a      	bne.n	800d9a6 <_printf_i+0x1f6>
 800d910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d914:	b004      	add	sp, #16
 800d916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	f043 0320 	orr.w	r3, r3, #32
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	4833      	ldr	r0, [pc, #204]	; (800d9f0 <_printf_i+0x240>)
 800d924:	2778      	movs	r7, #120	; 0x78
 800d926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	6829      	ldr	r1, [r5, #0]
 800d92e:	061f      	lsls	r7, r3, #24
 800d930:	f851 6b04 	ldr.w	r6, [r1], #4
 800d934:	d402      	bmi.n	800d93c <_printf_i+0x18c>
 800d936:	065f      	lsls	r7, r3, #25
 800d938:	bf48      	it	mi
 800d93a:	b2b6      	uxthmi	r6, r6
 800d93c:	07df      	lsls	r7, r3, #31
 800d93e:	bf48      	it	mi
 800d940:	f043 0320 	orrmi.w	r3, r3, #32
 800d944:	6029      	str	r1, [r5, #0]
 800d946:	bf48      	it	mi
 800d948:	6023      	strmi	r3, [r4, #0]
 800d94a:	b91e      	cbnz	r6, 800d954 <_printf_i+0x1a4>
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	f023 0320 	bic.w	r3, r3, #32
 800d952:	6023      	str	r3, [r4, #0]
 800d954:	2310      	movs	r3, #16
 800d956:	e7a7      	b.n	800d8a8 <_printf_i+0xf8>
 800d958:	4824      	ldr	r0, [pc, #144]	; (800d9ec <_printf_i+0x23c>)
 800d95a:	e7e4      	b.n	800d926 <_printf_i+0x176>
 800d95c:	4615      	mov	r5, r2
 800d95e:	e7bd      	b.n	800d8dc <_printf_i+0x12c>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	6826      	ldr	r6, [r4, #0]
 800d964:	6961      	ldr	r1, [r4, #20]
 800d966:	1d18      	adds	r0, r3, #4
 800d968:	6028      	str	r0, [r5, #0]
 800d96a:	0635      	lsls	r5, r6, #24
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	d501      	bpl.n	800d974 <_printf_i+0x1c4>
 800d970:	6019      	str	r1, [r3, #0]
 800d972:	e002      	b.n	800d97a <_printf_i+0x1ca>
 800d974:	0670      	lsls	r0, r6, #25
 800d976:	d5fb      	bpl.n	800d970 <_printf_i+0x1c0>
 800d978:	8019      	strh	r1, [r3, #0]
 800d97a:	2300      	movs	r3, #0
 800d97c:	6123      	str	r3, [r4, #16]
 800d97e:	4615      	mov	r5, r2
 800d980:	e7bc      	b.n	800d8fc <_printf_i+0x14c>
 800d982:	682b      	ldr	r3, [r5, #0]
 800d984:	1d1a      	adds	r2, r3, #4
 800d986:	602a      	str	r2, [r5, #0]
 800d988:	681d      	ldr	r5, [r3, #0]
 800d98a:	6862      	ldr	r2, [r4, #4]
 800d98c:	2100      	movs	r1, #0
 800d98e:	4628      	mov	r0, r5
 800d990:	f7f2 fc3e 	bl	8000210 <memchr>
 800d994:	b108      	cbz	r0, 800d99a <_printf_i+0x1ea>
 800d996:	1b40      	subs	r0, r0, r5
 800d998:	6060      	str	r0, [r4, #4]
 800d99a:	6863      	ldr	r3, [r4, #4]
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a4:	e7aa      	b.n	800d8fc <_printf_i+0x14c>
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	462a      	mov	r2, r5
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	47d0      	blx	sl
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	d0ad      	beq.n	800d910 <_printf_i+0x160>
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	079b      	lsls	r3, r3, #30
 800d9b8:	d413      	bmi.n	800d9e2 <_printf_i+0x232>
 800d9ba:	68e0      	ldr	r0, [r4, #12]
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	4298      	cmp	r0, r3
 800d9c0:	bfb8      	it	lt
 800d9c2:	4618      	movlt	r0, r3
 800d9c4:	e7a6      	b.n	800d914 <_printf_i+0x164>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	47d0      	blx	sl
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d09d      	beq.n	800d910 <_printf_i+0x160>
 800d9d4:	3501      	adds	r5, #1
 800d9d6:	68e3      	ldr	r3, [r4, #12]
 800d9d8:	9903      	ldr	r1, [sp, #12]
 800d9da:	1a5b      	subs	r3, r3, r1
 800d9dc:	42ab      	cmp	r3, r5
 800d9de:	dcf2      	bgt.n	800d9c6 <_printf_i+0x216>
 800d9e0:	e7eb      	b.n	800d9ba <_printf_i+0x20a>
 800d9e2:	2500      	movs	r5, #0
 800d9e4:	f104 0619 	add.w	r6, r4, #25
 800d9e8:	e7f5      	b.n	800d9d6 <_printf_i+0x226>
 800d9ea:	bf00      	nop
 800d9ec:	08015b00 	.word	0x08015b00
 800d9f0:	08015b11 	.word	0x08015b11

0800d9f4 <sniprintf>:
 800d9f4:	b40c      	push	{r2, r3}
 800d9f6:	b530      	push	{r4, r5, lr}
 800d9f8:	4b17      	ldr	r3, [pc, #92]	; (800da58 <sniprintf+0x64>)
 800d9fa:	1e0c      	subs	r4, r1, #0
 800d9fc:	681d      	ldr	r5, [r3, #0]
 800d9fe:	b09d      	sub	sp, #116	; 0x74
 800da00:	da08      	bge.n	800da14 <sniprintf+0x20>
 800da02:	238b      	movs	r3, #139	; 0x8b
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da0a:	b01d      	add	sp, #116	; 0x74
 800da0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da10:	b002      	add	sp, #8
 800da12:	4770      	bx	lr
 800da14:	f44f 7302 	mov.w	r3, #520	; 0x208
 800da18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da1c:	bf14      	ite	ne
 800da1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800da22:	4623      	moveq	r3, r4
 800da24:	9304      	str	r3, [sp, #16]
 800da26:	9307      	str	r3, [sp, #28]
 800da28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da2c:	9002      	str	r0, [sp, #8]
 800da2e:	9006      	str	r0, [sp, #24]
 800da30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da36:	ab21      	add	r3, sp, #132	; 0x84
 800da38:	a902      	add	r1, sp, #8
 800da3a:	4628      	mov	r0, r5
 800da3c:	9301      	str	r3, [sp, #4]
 800da3e:	f001 fa7b 	bl	800ef38 <_svfiprintf_r>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	bfbc      	itt	lt
 800da46:	238b      	movlt	r3, #139	; 0x8b
 800da48:	602b      	strlt	r3, [r5, #0]
 800da4a:	2c00      	cmp	r4, #0
 800da4c:	d0dd      	beq.n	800da0a <sniprintf+0x16>
 800da4e:	9b02      	ldr	r3, [sp, #8]
 800da50:	2200      	movs	r2, #0
 800da52:	701a      	strb	r2, [r3, #0]
 800da54:	e7d9      	b.n	800da0a <sniprintf+0x16>
 800da56:	bf00      	nop
 800da58:	200000a4 	.word	0x200000a4

0800da5c <__malloc_lock>:
 800da5c:	4801      	ldr	r0, [pc, #4]	; (800da64 <__malloc_lock+0x8>)
 800da5e:	f000 bb14 	b.w	800e08a <__retarget_lock_acquire_recursive>
 800da62:	bf00      	nop
 800da64:	20009ed8 	.word	0x20009ed8

0800da68 <__malloc_unlock>:
 800da68:	4801      	ldr	r0, [pc, #4]	; (800da70 <__malloc_unlock+0x8>)
 800da6a:	f000 bb0f 	b.w	800e08c <__retarget_lock_release_recursive>
 800da6e:	bf00      	nop
 800da70:	20009ed8 	.word	0x20009ed8

0800da74 <siprintf>:
 800da74:	b40e      	push	{r1, r2, r3}
 800da76:	b500      	push	{lr}
 800da78:	b09c      	sub	sp, #112	; 0x70
 800da7a:	ab1d      	add	r3, sp, #116	; 0x74
 800da7c:	9002      	str	r0, [sp, #8]
 800da7e:	9006      	str	r0, [sp, #24]
 800da80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da84:	4809      	ldr	r0, [pc, #36]	; (800daac <siprintf+0x38>)
 800da86:	9107      	str	r1, [sp, #28]
 800da88:	9104      	str	r1, [sp, #16]
 800da8a:	4909      	ldr	r1, [pc, #36]	; (800dab0 <siprintf+0x3c>)
 800da8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da90:	9105      	str	r1, [sp, #20]
 800da92:	6800      	ldr	r0, [r0, #0]
 800da94:	9301      	str	r3, [sp, #4]
 800da96:	a902      	add	r1, sp, #8
 800da98:	f001 fa4e 	bl	800ef38 <_svfiprintf_r>
 800da9c:	9b02      	ldr	r3, [sp, #8]
 800da9e:	2200      	movs	r2, #0
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	b01c      	add	sp, #112	; 0x70
 800daa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daa8:	b003      	add	sp, #12
 800daaa:	4770      	bx	lr
 800daac:	200000a4 	.word	0x200000a4
 800dab0:	ffff0208 	.word	0xffff0208

0800dab4 <siscanf>:
 800dab4:	b40e      	push	{r1, r2, r3}
 800dab6:	b510      	push	{r4, lr}
 800dab8:	b09f      	sub	sp, #124	; 0x7c
 800daba:	ac21      	add	r4, sp, #132	; 0x84
 800dabc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800dac0:	f854 2b04 	ldr.w	r2, [r4], #4
 800dac4:	9201      	str	r2, [sp, #4]
 800dac6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800daca:	9004      	str	r0, [sp, #16]
 800dacc:	9008      	str	r0, [sp, #32]
 800dace:	f7f2 fbef 	bl	80002b0 <strlen>
 800dad2:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <siscanf+0x50>)
 800dad4:	9005      	str	r0, [sp, #20]
 800dad6:	9009      	str	r0, [sp, #36]	; 0x24
 800dad8:	930d      	str	r3, [sp, #52]	; 0x34
 800dada:	480b      	ldr	r0, [pc, #44]	; (800db08 <siscanf+0x54>)
 800dadc:	9a01      	ldr	r2, [sp, #4]
 800dade:	6800      	ldr	r0, [r0, #0]
 800dae0:	9403      	str	r4, [sp, #12]
 800dae2:	2300      	movs	r3, #0
 800dae4:	9311      	str	r3, [sp, #68]	; 0x44
 800dae6:	9316      	str	r3, [sp, #88]	; 0x58
 800dae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800daf0:	a904      	add	r1, sp, #16
 800daf2:	4623      	mov	r3, r4
 800daf4:	f001 fb78 	bl	800f1e8 <__ssvfiscanf_r>
 800daf8:	b01f      	add	sp, #124	; 0x7c
 800dafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dafe:	b003      	add	sp, #12
 800db00:	4770      	bx	lr
 800db02:	bf00      	nop
 800db04:	0800db2f 	.word	0x0800db2f
 800db08:	200000a4 	.word	0x200000a4

0800db0c <__sread>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	460c      	mov	r4, r1
 800db10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db14:	f000 fa5a 	bl	800dfcc <_read_r>
 800db18:	2800      	cmp	r0, #0
 800db1a:	bfab      	itete	ge
 800db1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db1e:	89a3      	ldrhlt	r3, [r4, #12]
 800db20:	181b      	addge	r3, r3, r0
 800db22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db26:	bfac      	ite	ge
 800db28:	6563      	strge	r3, [r4, #84]	; 0x54
 800db2a:	81a3      	strhlt	r3, [r4, #12]
 800db2c:	bd10      	pop	{r4, pc}

0800db2e <__seofread>:
 800db2e:	2000      	movs	r0, #0
 800db30:	4770      	bx	lr

0800db32 <__swrite>:
 800db32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db36:	461f      	mov	r7, r3
 800db38:	898b      	ldrh	r3, [r1, #12]
 800db3a:	05db      	lsls	r3, r3, #23
 800db3c:	4605      	mov	r5, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	4616      	mov	r6, r2
 800db42:	d505      	bpl.n	800db50 <__swrite+0x1e>
 800db44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db48:	2302      	movs	r3, #2
 800db4a:	2200      	movs	r2, #0
 800db4c:	f000 fa2c 	bl	800dfa8 <_lseek_r>
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	4632      	mov	r2, r6
 800db5e:	463b      	mov	r3, r7
 800db60:	4628      	mov	r0, r5
 800db62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db66:	f000 ba53 	b.w	800e010 <_write_r>

0800db6a <__sseek>:
 800db6a:	b510      	push	{r4, lr}
 800db6c:	460c      	mov	r4, r1
 800db6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db72:	f000 fa19 	bl	800dfa8 <_lseek_r>
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	89a3      	ldrh	r3, [r4, #12]
 800db7a:	bf15      	itete	ne
 800db7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db86:	81a3      	strheq	r3, [r4, #12]
 800db88:	bf18      	it	ne
 800db8a:	81a3      	strhne	r3, [r4, #12]
 800db8c:	bd10      	pop	{r4, pc}

0800db8e <__sclose>:
 800db8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db92:	f000 b9f9 	b.w	800df88 <_close_r>
	...

0800db98 <std>:
 800db98:	2300      	movs	r3, #0
 800db9a:	b510      	push	{r4, lr}
 800db9c:	4604      	mov	r4, r0
 800db9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dba6:	6083      	str	r3, [r0, #8]
 800dba8:	8181      	strh	r1, [r0, #12]
 800dbaa:	6643      	str	r3, [r0, #100]	; 0x64
 800dbac:	81c2      	strh	r2, [r0, #14]
 800dbae:	6183      	str	r3, [r0, #24]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	2208      	movs	r2, #8
 800dbb4:	305c      	adds	r0, #92	; 0x5c
 800dbb6:	f000 f9db 	bl	800df70 <memset>
 800dbba:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <std+0x58>)
 800dbbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <std+0x5c>)
 800dbc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbc2:	4b0d      	ldr	r3, [pc, #52]	; (800dbf8 <std+0x60>)
 800dbc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbc6:	4b0d      	ldr	r3, [pc, #52]	; (800dbfc <std+0x64>)
 800dbc8:	6323      	str	r3, [r4, #48]	; 0x30
 800dbca:	4b0d      	ldr	r3, [pc, #52]	; (800dc00 <std+0x68>)
 800dbcc:	6224      	str	r4, [r4, #32]
 800dbce:	429c      	cmp	r4, r3
 800dbd0:	d006      	beq.n	800dbe0 <std+0x48>
 800dbd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dbd6:	4294      	cmp	r4, r2
 800dbd8:	d002      	beq.n	800dbe0 <std+0x48>
 800dbda:	33d0      	adds	r3, #208	; 0xd0
 800dbdc:	429c      	cmp	r4, r3
 800dbde:	d105      	bne.n	800dbec <std+0x54>
 800dbe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe8:	f000 ba4e 	b.w	800e088 <__retarget_lock_init_recursive>
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	bf00      	nop
 800dbf0:	0800db0d 	.word	0x0800db0d
 800dbf4:	0800db33 	.word	0x0800db33
 800dbf8:	0800db6b 	.word	0x0800db6b
 800dbfc:	0800db8f 	.word	0x0800db8f
 800dc00:	20009d98 	.word	0x20009d98

0800dc04 <stdio_exit_handler>:
 800dc04:	4a02      	ldr	r2, [pc, #8]	; (800dc10 <stdio_exit_handler+0xc>)
 800dc06:	4903      	ldr	r1, [pc, #12]	; (800dc14 <stdio_exit_handler+0x10>)
 800dc08:	4803      	ldr	r0, [pc, #12]	; (800dc18 <stdio_exit_handler+0x14>)
 800dc0a:	f000 b8f7 	b.w	800ddfc <_fwalk_sglue>
 800dc0e:	bf00      	nop
 800dc10:	2000004c 	.word	0x2000004c
 800dc14:	0800fb7d 	.word	0x0800fb7d
 800dc18:	20000058 	.word	0x20000058

0800dc1c <cleanup_stdio>:
 800dc1c:	6841      	ldr	r1, [r0, #4]
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	; (800dc50 <cleanup_stdio+0x34>)
 800dc20:	4299      	cmp	r1, r3
 800dc22:	b510      	push	{r4, lr}
 800dc24:	4604      	mov	r4, r0
 800dc26:	d001      	beq.n	800dc2c <cleanup_stdio+0x10>
 800dc28:	f001 ffa8 	bl	800fb7c <_fflush_r>
 800dc2c:	68a1      	ldr	r1, [r4, #8]
 800dc2e:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <cleanup_stdio+0x38>)
 800dc30:	4299      	cmp	r1, r3
 800dc32:	d002      	beq.n	800dc3a <cleanup_stdio+0x1e>
 800dc34:	4620      	mov	r0, r4
 800dc36:	f001 ffa1 	bl	800fb7c <_fflush_r>
 800dc3a:	68e1      	ldr	r1, [r4, #12]
 800dc3c:	4b06      	ldr	r3, [pc, #24]	; (800dc58 <cleanup_stdio+0x3c>)
 800dc3e:	4299      	cmp	r1, r3
 800dc40:	d004      	beq.n	800dc4c <cleanup_stdio+0x30>
 800dc42:	4620      	mov	r0, r4
 800dc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc48:	f001 bf98 	b.w	800fb7c <_fflush_r>
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	bf00      	nop
 800dc50:	20009d98 	.word	0x20009d98
 800dc54:	20009e00 	.word	0x20009e00
 800dc58:	20009e68 	.word	0x20009e68

0800dc5c <global_stdio_init.part.0>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	4b0b      	ldr	r3, [pc, #44]	; (800dc8c <global_stdio_init.part.0+0x30>)
 800dc60:	4c0b      	ldr	r4, [pc, #44]	; (800dc90 <global_stdio_init.part.0+0x34>)
 800dc62:	4a0c      	ldr	r2, [pc, #48]	; (800dc94 <global_stdio_init.part.0+0x38>)
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	4620      	mov	r0, r4
 800dc68:	2200      	movs	r2, #0
 800dc6a:	2104      	movs	r1, #4
 800dc6c:	f7ff ff94 	bl	800db98 <std>
 800dc70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dc74:	2201      	movs	r2, #1
 800dc76:	2109      	movs	r1, #9
 800dc78:	f7ff ff8e 	bl	800db98 <std>
 800dc7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dc80:	2202      	movs	r2, #2
 800dc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc86:	2112      	movs	r1, #18
 800dc88:	f7ff bf86 	b.w	800db98 <std>
 800dc8c:	20009ed0 	.word	0x20009ed0
 800dc90:	20009d98 	.word	0x20009d98
 800dc94:	0800dc05 	.word	0x0800dc05

0800dc98 <__sfp_lock_acquire>:
 800dc98:	4801      	ldr	r0, [pc, #4]	; (800dca0 <__sfp_lock_acquire+0x8>)
 800dc9a:	f000 b9f6 	b.w	800e08a <__retarget_lock_acquire_recursive>
 800dc9e:	bf00      	nop
 800dca0:	20009ed9 	.word	0x20009ed9

0800dca4 <__sfp_lock_release>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__sfp_lock_release+0x8>)
 800dca6:	f000 b9f1 	b.w	800e08c <__retarget_lock_release_recursive>
 800dcaa:	bf00      	nop
 800dcac:	20009ed9 	.word	0x20009ed9

0800dcb0 <__sinit>:
 800dcb0:	b510      	push	{r4, lr}
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	f7ff fff0 	bl	800dc98 <__sfp_lock_acquire>
 800dcb8:	6a23      	ldr	r3, [r4, #32]
 800dcba:	b11b      	cbz	r3, 800dcc4 <__sinit+0x14>
 800dcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc0:	f7ff bff0 	b.w	800dca4 <__sfp_lock_release>
 800dcc4:	4b04      	ldr	r3, [pc, #16]	; (800dcd8 <__sinit+0x28>)
 800dcc6:	6223      	str	r3, [r4, #32]
 800dcc8:	4b04      	ldr	r3, [pc, #16]	; (800dcdc <__sinit+0x2c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1f5      	bne.n	800dcbc <__sinit+0xc>
 800dcd0:	f7ff ffc4 	bl	800dc5c <global_stdio_init.part.0>
 800dcd4:	e7f2      	b.n	800dcbc <__sinit+0xc>
 800dcd6:	bf00      	nop
 800dcd8:	0800dc1d 	.word	0x0800dc1d
 800dcdc:	20009ed0 	.word	0x20009ed0

0800dce0 <_strtol_l.constprop.0>:
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce6:	d001      	beq.n	800dcec <_strtol_l.constprop.0+0xc>
 800dce8:	2b24      	cmp	r3, #36	; 0x24
 800dcea:	d906      	bls.n	800dcfa <_strtol_l.constprop.0+0x1a>
 800dcec:	f000 f9a2 	bl	800e034 <__errno>
 800dcf0:	2316      	movs	r3, #22
 800dcf2:	6003      	str	r3, [r0, #0]
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dde0 <_strtol_l.constprop.0+0x100>
 800dcfe:	460d      	mov	r5, r1
 800dd00:	462e      	mov	r6, r5
 800dd02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd06:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800dd0a:	f017 0708 	ands.w	r7, r7, #8
 800dd0e:	d1f7      	bne.n	800dd00 <_strtol_l.constprop.0+0x20>
 800dd10:	2c2d      	cmp	r4, #45	; 0x2d
 800dd12:	d132      	bne.n	800dd7a <_strtol_l.constprop.0+0x9a>
 800dd14:	782c      	ldrb	r4, [r5, #0]
 800dd16:	2701      	movs	r7, #1
 800dd18:	1cb5      	adds	r5, r6, #2
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d05b      	beq.n	800ddd6 <_strtol_l.constprop.0+0xf6>
 800dd1e:	2b10      	cmp	r3, #16
 800dd20:	d109      	bne.n	800dd36 <_strtol_l.constprop.0+0x56>
 800dd22:	2c30      	cmp	r4, #48	; 0x30
 800dd24:	d107      	bne.n	800dd36 <_strtol_l.constprop.0+0x56>
 800dd26:	782c      	ldrb	r4, [r5, #0]
 800dd28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dd2c:	2c58      	cmp	r4, #88	; 0x58
 800dd2e:	d14d      	bne.n	800ddcc <_strtol_l.constprop.0+0xec>
 800dd30:	786c      	ldrb	r4, [r5, #1]
 800dd32:	2310      	movs	r3, #16
 800dd34:	3502      	adds	r5, #2
 800dd36:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dd3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dd3e:	f04f 0e00 	mov.w	lr, #0
 800dd42:	fbb8 f9f3 	udiv	r9, r8, r3
 800dd46:	4676      	mov	r6, lr
 800dd48:	fb03 8a19 	mls	sl, r3, r9, r8
 800dd4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dd50:	f1bc 0f09 	cmp.w	ip, #9
 800dd54:	d816      	bhi.n	800dd84 <_strtol_l.constprop.0+0xa4>
 800dd56:	4664      	mov	r4, ip
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	dd24      	ble.n	800dda6 <_strtol_l.constprop.0+0xc6>
 800dd5c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800dd60:	d008      	beq.n	800dd74 <_strtol_l.constprop.0+0x94>
 800dd62:	45b1      	cmp	r9, r6
 800dd64:	d31c      	bcc.n	800dda0 <_strtol_l.constprop.0+0xc0>
 800dd66:	d101      	bne.n	800dd6c <_strtol_l.constprop.0+0x8c>
 800dd68:	45a2      	cmp	sl, r4
 800dd6a:	db19      	blt.n	800dda0 <_strtol_l.constprop.0+0xc0>
 800dd6c:	fb06 4603 	mla	r6, r6, r3, r4
 800dd70:	f04f 0e01 	mov.w	lr, #1
 800dd74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd78:	e7e8      	b.n	800dd4c <_strtol_l.constprop.0+0x6c>
 800dd7a:	2c2b      	cmp	r4, #43	; 0x2b
 800dd7c:	bf04      	itt	eq
 800dd7e:	782c      	ldrbeq	r4, [r5, #0]
 800dd80:	1cb5      	addeq	r5, r6, #2
 800dd82:	e7ca      	b.n	800dd1a <_strtol_l.constprop.0+0x3a>
 800dd84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd88:	f1bc 0f19 	cmp.w	ip, #25
 800dd8c:	d801      	bhi.n	800dd92 <_strtol_l.constprop.0+0xb2>
 800dd8e:	3c37      	subs	r4, #55	; 0x37
 800dd90:	e7e2      	b.n	800dd58 <_strtol_l.constprop.0+0x78>
 800dd92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd96:	f1bc 0f19 	cmp.w	ip, #25
 800dd9a:	d804      	bhi.n	800dda6 <_strtol_l.constprop.0+0xc6>
 800dd9c:	3c57      	subs	r4, #87	; 0x57
 800dd9e:	e7db      	b.n	800dd58 <_strtol_l.constprop.0+0x78>
 800dda0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800dda4:	e7e6      	b.n	800dd74 <_strtol_l.constprop.0+0x94>
 800dda6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800ddaa:	d105      	bne.n	800ddb8 <_strtol_l.constprop.0+0xd8>
 800ddac:	2322      	movs	r3, #34	; 0x22
 800ddae:	6003      	str	r3, [r0, #0]
 800ddb0:	4646      	mov	r6, r8
 800ddb2:	b942      	cbnz	r2, 800ddc6 <_strtol_l.constprop.0+0xe6>
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	e79e      	b.n	800dcf6 <_strtol_l.constprop.0+0x16>
 800ddb8:	b107      	cbz	r7, 800ddbc <_strtol_l.constprop.0+0xdc>
 800ddba:	4276      	negs	r6, r6
 800ddbc:	2a00      	cmp	r2, #0
 800ddbe:	d0f9      	beq.n	800ddb4 <_strtol_l.constprop.0+0xd4>
 800ddc0:	f1be 0f00 	cmp.w	lr, #0
 800ddc4:	d000      	beq.n	800ddc8 <_strtol_l.constprop.0+0xe8>
 800ddc6:	1e69      	subs	r1, r5, #1
 800ddc8:	6011      	str	r1, [r2, #0]
 800ddca:	e7f3      	b.n	800ddb4 <_strtol_l.constprop.0+0xd4>
 800ddcc:	2430      	movs	r4, #48	; 0x30
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1b1      	bne.n	800dd36 <_strtol_l.constprop.0+0x56>
 800ddd2:	2308      	movs	r3, #8
 800ddd4:	e7af      	b.n	800dd36 <_strtol_l.constprop.0+0x56>
 800ddd6:	2c30      	cmp	r4, #48	; 0x30
 800ddd8:	d0a5      	beq.n	800dd26 <_strtol_l.constprop.0+0x46>
 800ddda:	230a      	movs	r3, #10
 800dddc:	e7ab      	b.n	800dd36 <_strtol_l.constprop.0+0x56>
 800ddde:	bf00      	nop
 800dde0:	08015b23 	.word	0x08015b23

0800dde4 <_strtol_r>:
 800dde4:	f7ff bf7c 	b.w	800dce0 <_strtol_l.constprop.0>

0800dde8 <strtol>:
 800dde8:	4613      	mov	r3, r2
 800ddea:	460a      	mov	r2, r1
 800ddec:	4601      	mov	r1, r0
 800ddee:	4802      	ldr	r0, [pc, #8]	; (800ddf8 <strtol+0x10>)
 800ddf0:	6800      	ldr	r0, [r0, #0]
 800ddf2:	f7ff bf75 	b.w	800dce0 <_strtol_l.constprop.0>
 800ddf6:	bf00      	nop
 800ddf8:	200000a4 	.word	0x200000a4

0800ddfc <_fwalk_sglue>:
 800ddfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de00:	4607      	mov	r7, r0
 800de02:	4688      	mov	r8, r1
 800de04:	4614      	mov	r4, r2
 800de06:	2600      	movs	r6, #0
 800de08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de0c:	f1b9 0901 	subs.w	r9, r9, #1
 800de10:	d505      	bpl.n	800de1e <_fwalk_sglue+0x22>
 800de12:	6824      	ldr	r4, [r4, #0]
 800de14:	2c00      	cmp	r4, #0
 800de16:	d1f7      	bne.n	800de08 <_fwalk_sglue+0xc>
 800de18:	4630      	mov	r0, r6
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d907      	bls.n	800de34 <_fwalk_sglue+0x38>
 800de24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de28:	3301      	adds	r3, #1
 800de2a:	d003      	beq.n	800de34 <_fwalk_sglue+0x38>
 800de2c:	4629      	mov	r1, r5
 800de2e:	4638      	mov	r0, r7
 800de30:	47c0      	blx	r8
 800de32:	4306      	orrs	r6, r0
 800de34:	3568      	adds	r5, #104	; 0x68
 800de36:	e7e9      	b.n	800de0c <_fwalk_sglue+0x10>

0800de38 <_vsniprintf_r>:
 800de38:	b530      	push	{r4, r5, lr}
 800de3a:	4614      	mov	r4, r2
 800de3c:	2c00      	cmp	r4, #0
 800de3e:	b09b      	sub	sp, #108	; 0x6c
 800de40:	4605      	mov	r5, r0
 800de42:	461a      	mov	r2, r3
 800de44:	da05      	bge.n	800de52 <_vsniprintf_r+0x1a>
 800de46:	238b      	movs	r3, #139	; 0x8b
 800de48:	6003      	str	r3, [r0, #0]
 800de4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de4e:	b01b      	add	sp, #108	; 0x6c
 800de50:	bd30      	pop	{r4, r5, pc}
 800de52:	f44f 7302 	mov.w	r3, #520	; 0x208
 800de56:	f8ad 300c 	strh.w	r3, [sp, #12]
 800de5a:	bf14      	ite	ne
 800de5c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800de60:	4623      	moveq	r3, r4
 800de62:	9302      	str	r3, [sp, #8]
 800de64:	9305      	str	r3, [sp, #20]
 800de66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de6a:	9100      	str	r1, [sp, #0]
 800de6c:	9104      	str	r1, [sp, #16]
 800de6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800de72:	4669      	mov	r1, sp
 800de74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de76:	f001 f85f 	bl	800ef38 <_svfiprintf_r>
 800de7a:	1c43      	adds	r3, r0, #1
 800de7c:	bfbc      	itt	lt
 800de7e:	238b      	movlt	r3, #139	; 0x8b
 800de80:	602b      	strlt	r3, [r5, #0]
 800de82:	2c00      	cmp	r4, #0
 800de84:	d0e3      	beq.n	800de4e <_vsniprintf_r+0x16>
 800de86:	9b00      	ldr	r3, [sp, #0]
 800de88:	2200      	movs	r2, #0
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	e7df      	b.n	800de4e <_vsniprintf_r+0x16>
	...

0800de90 <vsniprintf>:
 800de90:	b507      	push	{r0, r1, r2, lr}
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	4613      	mov	r3, r2
 800de96:	460a      	mov	r2, r1
 800de98:	4601      	mov	r1, r0
 800de9a:	4803      	ldr	r0, [pc, #12]	; (800dea8 <vsniprintf+0x18>)
 800de9c:	6800      	ldr	r0, [r0, #0]
 800de9e:	f7ff ffcb 	bl	800de38 <_vsniprintf_r>
 800dea2:	b003      	add	sp, #12
 800dea4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dea8:	200000a4 	.word	0x200000a4

0800deac <iprintf>:
 800deac:	b40f      	push	{r0, r1, r2, r3}
 800deae:	b507      	push	{r0, r1, r2, lr}
 800deb0:	4906      	ldr	r1, [pc, #24]	; (800decc <iprintf+0x20>)
 800deb2:	ab04      	add	r3, sp, #16
 800deb4:	6808      	ldr	r0, [r1, #0]
 800deb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deba:	6881      	ldr	r1, [r0, #8]
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	f001 fb35 	bl	800f52c <_vfiprintf_r>
 800dec2:	b003      	add	sp, #12
 800dec4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec8:	b004      	add	sp, #16
 800deca:	4770      	bx	lr
 800decc:	200000a4 	.word	0x200000a4

0800ded0 <strncmp>:
 800ded0:	b510      	push	{r4, lr}
 800ded2:	b16a      	cbz	r2, 800def0 <strncmp+0x20>
 800ded4:	3901      	subs	r1, #1
 800ded6:	1884      	adds	r4, r0, r2
 800ded8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dedc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d103      	bne.n	800deec <strncmp+0x1c>
 800dee4:	42a0      	cmp	r0, r4
 800dee6:	d001      	beq.n	800deec <strncmp+0x1c>
 800dee8:	2a00      	cmp	r2, #0
 800deea:	d1f5      	bne.n	800ded8 <strncmp+0x8>
 800deec:	1ad0      	subs	r0, r2, r3
 800deee:	bd10      	pop	{r4, pc}
 800def0:	4610      	mov	r0, r2
 800def2:	e7fc      	b.n	800deee <strncmp+0x1e>

0800def4 <strncpy>:
 800def4:	b510      	push	{r4, lr}
 800def6:	3901      	subs	r1, #1
 800def8:	4603      	mov	r3, r0
 800defa:	b132      	cbz	r2, 800df0a <strncpy+0x16>
 800defc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df00:	f803 4b01 	strb.w	r4, [r3], #1
 800df04:	3a01      	subs	r2, #1
 800df06:	2c00      	cmp	r4, #0
 800df08:	d1f7      	bne.n	800defa <strncpy+0x6>
 800df0a:	441a      	add	r2, r3
 800df0c:	2100      	movs	r1, #0
 800df0e:	4293      	cmp	r3, r2
 800df10:	d100      	bne.n	800df14 <strncpy+0x20>
 800df12:	bd10      	pop	{r4, pc}
 800df14:	f803 1b01 	strb.w	r1, [r3], #1
 800df18:	e7f9      	b.n	800df0e <strncpy+0x1a>

0800df1a <__strtok_r>:
 800df1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1c:	b908      	cbnz	r0, 800df22 <__strtok_r+0x8>
 800df1e:	6810      	ldr	r0, [r2, #0]
 800df20:	b188      	cbz	r0, 800df46 <__strtok_r+0x2c>
 800df22:	4604      	mov	r4, r0
 800df24:	4620      	mov	r0, r4
 800df26:	f814 5b01 	ldrb.w	r5, [r4], #1
 800df2a:	460f      	mov	r7, r1
 800df2c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800df30:	b91e      	cbnz	r6, 800df3a <__strtok_r+0x20>
 800df32:	b965      	cbnz	r5, 800df4e <__strtok_r+0x34>
 800df34:	6015      	str	r5, [r2, #0]
 800df36:	4628      	mov	r0, r5
 800df38:	e005      	b.n	800df46 <__strtok_r+0x2c>
 800df3a:	42b5      	cmp	r5, r6
 800df3c:	d1f6      	bne.n	800df2c <__strtok_r+0x12>
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1f0      	bne.n	800df24 <__strtok_r+0xa>
 800df42:	6014      	str	r4, [r2, #0]
 800df44:	7003      	strb	r3, [r0, #0]
 800df46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df48:	461c      	mov	r4, r3
 800df4a:	e00c      	b.n	800df66 <__strtok_r+0x4c>
 800df4c:	b915      	cbnz	r5, 800df54 <__strtok_r+0x3a>
 800df4e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df52:	460e      	mov	r6, r1
 800df54:	f816 5b01 	ldrb.w	r5, [r6], #1
 800df58:	42ab      	cmp	r3, r5
 800df5a:	d1f7      	bne.n	800df4c <__strtok_r+0x32>
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d0f3      	beq.n	800df48 <__strtok_r+0x2e>
 800df60:	2300      	movs	r3, #0
 800df62:	f804 3c01 	strb.w	r3, [r4, #-1]
 800df66:	6014      	str	r4, [r2, #0]
 800df68:	e7ed      	b.n	800df46 <__strtok_r+0x2c>

0800df6a <strtok_r>:
 800df6a:	2301      	movs	r3, #1
 800df6c:	f7ff bfd5 	b.w	800df1a <__strtok_r>

0800df70 <memset>:
 800df70:	4402      	add	r2, r0
 800df72:	4603      	mov	r3, r0
 800df74:	4293      	cmp	r3, r2
 800df76:	d100      	bne.n	800df7a <memset+0xa>
 800df78:	4770      	bx	lr
 800df7a:	f803 1b01 	strb.w	r1, [r3], #1
 800df7e:	e7f9      	b.n	800df74 <memset+0x4>

0800df80 <_localeconv_r>:
 800df80:	4800      	ldr	r0, [pc, #0]	; (800df84 <_localeconv_r+0x4>)
 800df82:	4770      	bx	lr
 800df84:	20000198 	.word	0x20000198

0800df88 <_close_r>:
 800df88:	b538      	push	{r3, r4, r5, lr}
 800df8a:	4d06      	ldr	r5, [pc, #24]	; (800dfa4 <_close_r+0x1c>)
 800df8c:	2300      	movs	r3, #0
 800df8e:	4604      	mov	r4, r0
 800df90:	4608      	mov	r0, r1
 800df92:	602b      	str	r3, [r5, #0]
 800df94:	f7f6 fd77 	bl	8004a86 <_close>
 800df98:	1c43      	adds	r3, r0, #1
 800df9a:	d102      	bne.n	800dfa2 <_close_r+0x1a>
 800df9c:	682b      	ldr	r3, [r5, #0]
 800df9e:	b103      	cbz	r3, 800dfa2 <_close_r+0x1a>
 800dfa0:	6023      	str	r3, [r4, #0]
 800dfa2:	bd38      	pop	{r3, r4, r5, pc}
 800dfa4:	20009ed4 	.word	0x20009ed4

0800dfa8 <_lseek_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4d07      	ldr	r5, [pc, #28]	; (800dfc8 <_lseek_r+0x20>)
 800dfac:	4604      	mov	r4, r0
 800dfae:	4608      	mov	r0, r1
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	602a      	str	r2, [r5, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f7f6 fd8c 	bl	8004ad4 <_lseek>
 800dfbc:	1c43      	adds	r3, r0, #1
 800dfbe:	d102      	bne.n	800dfc6 <_lseek_r+0x1e>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	b103      	cbz	r3, 800dfc6 <_lseek_r+0x1e>
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	20009ed4 	.word	0x20009ed4

0800dfcc <_read_r>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	4d07      	ldr	r5, [pc, #28]	; (800dfec <_read_r+0x20>)
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	4608      	mov	r0, r1
 800dfd4:	4611      	mov	r1, r2
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	602a      	str	r2, [r5, #0]
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f7f6 fd1a 	bl	8004a14 <_read>
 800dfe0:	1c43      	adds	r3, r0, #1
 800dfe2:	d102      	bne.n	800dfea <_read_r+0x1e>
 800dfe4:	682b      	ldr	r3, [r5, #0]
 800dfe6:	b103      	cbz	r3, 800dfea <_read_r+0x1e>
 800dfe8:	6023      	str	r3, [r4, #0]
 800dfea:	bd38      	pop	{r3, r4, r5, pc}
 800dfec:	20009ed4 	.word	0x20009ed4

0800dff0 <_sbrk_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d06      	ldr	r5, [pc, #24]	; (800e00c <_sbrk_r+0x1c>)
 800dff4:	2300      	movs	r3, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	4608      	mov	r0, r1
 800dffa:	602b      	str	r3, [r5, #0]
 800dffc:	f7f6 fd78 	bl	8004af0 <_sbrk>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_sbrk_r+0x1a>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_sbrk_r+0x1a>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	20009ed4 	.word	0x20009ed4

0800e010 <_write_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4d07      	ldr	r5, [pc, #28]	; (800e030 <_write_r+0x20>)
 800e014:	4604      	mov	r4, r0
 800e016:	4608      	mov	r0, r1
 800e018:	4611      	mov	r1, r2
 800e01a:	2200      	movs	r2, #0
 800e01c:	602a      	str	r2, [r5, #0]
 800e01e:	461a      	mov	r2, r3
 800e020:	f7f6 fd15 	bl	8004a4e <_write>
 800e024:	1c43      	adds	r3, r0, #1
 800e026:	d102      	bne.n	800e02e <_write_r+0x1e>
 800e028:	682b      	ldr	r3, [r5, #0]
 800e02a:	b103      	cbz	r3, 800e02e <_write_r+0x1e>
 800e02c:	6023      	str	r3, [r4, #0]
 800e02e:	bd38      	pop	{r3, r4, r5, pc}
 800e030:	20009ed4 	.word	0x20009ed4

0800e034 <__errno>:
 800e034:	4b01      	ldr	r3, [pc, #4]	; (800e03c <__errno+0x8>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	200000a4 	.word	0x200000a4

0800e040 <__libc_init_array>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4d0d      	ldr	r5, [pc, #52]	; (800e078 <__libc_init_array+0x38>)
 800e044:	4c0d      	ldr	r4, [pc, #52]	; (800e07c <__libc_init_array+0x3c>)
 800e046:	1b64      	subs	r4, r4, r5
 800e048:	10a4      	asrs	r4, r4, #2
 800e04a:	2600      	movs	r6, #0
 800e04c:	42a6      	cmp	r6, r4
 800e04e:	d109      	bne.n	800e064 <__libc_init_array+0x24>
 800e050:	4d0b      	ldr	r5, [pc, #44]	; (800e080 <__libc_init_array+0x40>)
 800e052:	4c0c      	ldr	r4, [pc, #48]	; (800e084 <__libc_init_array+0x44>)
 800e054:	f003 f814 	bl	8011080 <_init>
 800e058:	1b64      	subs	r4, r4, r5
 800e05a:	10a4      	asrs	r4, r4, #2
 800e05c:	2600      	movs	r6, #0
 800e05e:	42a6      	cmp	r6, r4
 800e060:	d105      	bne.n	800e06e <__libc_init_array+0x2e>
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	f855 3b04 	ldr.w	r3, [r5], #4
 800e068:	4798      	blx	r3
 800e06a:	3601      	adds	r6, #1
 800e06c:	e7ee      	b.n	800e04c <__libc_init_array+0xc>
 800e06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e072:	4798      	blx	r3
 800e074:	3601      	adds	r6, #1
 800e076:	e7f2      	b.n	800e05e <__libc_init_array+0x1e>
 800e078:	08015e88 	.word	0x08015e88
 800e07c:	08015e88 	.word	0x08015e88
 800e080:	08015e88 	.word	0x08015e88
 800e084:	08015e8c 	.word	0x08015e8c

0800e088 <__retarget_lock_init_recursive>:
 800e088:	4770      	bx	lr

0800e08a <__retarget_lock_acquire_recursive>:
 800e08a:	4770      	bx	lr

0800e08c <__retarget_lock_release_recursive>:
 800e08c:	4770      	bx	lr

0800e08e <memcpy>:
 800e08e:	440a      	add	r2, r1
 800e090:	4291      	cmp	r1, r2
 800e092:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e096:	d100      	bne.n	800e09a <memcpy+0xc>
 800e098:	4770      	bx	lr
 800e09a:	b510      	push	{r4, lr}
 800e09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0a4:	4291      	cmp	r1, r2
 800e0a6:	d1f9      	bne.n	800e09c <memcpy+0xe>
 800e0a8:	bd10      	pop	{r4, pc}

0800e0aa <strcpy>:
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0b0:	f803 2b01 	strb.w	r2, [r3], #1
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	d1f9      	bne.n	800e0ac <strcpy+0x2>
 800e0b8:	4770      	bx	lr
	...

0800e0bc <__assert_func>:
 800e0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0be:	4614      	mov	r4, r2
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	4b09      	ldr	r3, [pc, #36]	; (800e0e8 <__assert_func+0x2c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4605      	mov	r5, r0
 800e0c8:	68d8      	ldr	r0, [r3, #12]
 800e0ca:	b14c      	cbz	r4, 800e0e0 <__assert_func+0x24>
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <__assert_func+0x30>)
 800e0ce:	9100      	str	r1, [sp, #0]
 800e0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0d4:	4906      	ldr	r1, [pc, #24]	; (800e0f0 <__assert_func+0x34>)
 800e0d6:	462b      	mov	r3, r5
 800e0d8:	f002 f8f4 	bl	80102c4 <fiprintf>
 800e0dc:	f002 fb16 	bl	801070c <abort>
 800e0e0:	4b04      	ldr	r3, [pc, #16]	; (800e0f4 <__assert_func+0x38>)
 800e0e2:	461c      	mov	r4, r3
 800e0e4:	e7f3      	b.n	800e0ce <__assert_func+0x12>
 800e0e6:	bf00      	nop
 800e0e8:	200000a4 	.word	0x200000a4
 800e0ec:	08015c23 	.word	0x08015c23
 800e0f0:	08015c30 	.word	0x08015c30
 800e0f4:	08015c5e 	.word	0x08015c5e

0800e0f8 <quorem>:
 800e0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	6903      	ldr	r3, [r0, #16]
 800e0fe:	690c      	ldr	r4, [r1, #16]
 800e100:	42a3      	cmp	r3, r4
 800e102:	4607      	mov	r7, r0
 800e104:	db7e      	blt.n	800e204 <quorem+0x10c>
 800e106:	3c01      	subs	r4, #1
 800e108:	f101 0814 	add.w	r8, r1, #20
 800e10c:	f100 0514 	add.w	r5, r0, #20
 800e110:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e11a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e11e:	3301      	adds	r3, #1
 800e120:	429a      	cmp	r2, r3
 800e122:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e12a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e12e:	d331      	bcc.n	800e194 <quorem+0x9c>
 800e130:	f04f 0e00 	mov.w	lr, #0
 800e134:	4640      	mov	r0, r8
 800e136:	46ac      	mov	ip, r5
 800e138:	46f2      	mov	sl, lr
 800e13a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e13e:	b293      	uxth	r3, r2
 800e140:	fb06 e303 	mla	r3, r6, r3, lr
 800e144:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e148:	0c1a      	lsrs	r2, r3, #16
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	ebaa 0303 	sub.w	r3, sl, r3
 800e150:	f8dc a000 	ldr.w	sl, [ip]
 800e154:	fa13 f38a 	uxtah	r3, r3, sl
 800e158:	fb06 220e 	mla	r2, r6, lr, r2
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	9b00      	ldr	r3, [sp, #0]
 800e160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e164:	b292      	uxth	r2, r2
 800e166:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e16a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e16e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e172:	4581      	cmp	r9, r0
 800e174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e178:	f84c 3b04 	str.w	r3, [ip], #4
 800e17c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e180:	d2db      	bcs.n	800e13a <quorem+0x42>
 800e182:	f855 300b 	ldr.w	r3, [r5, fp]
 800e186:	b92b      	cbnz	r3, 800e194 <quorem+0x9c>
 800e188:	9b01      	ldr	r3, [sp, #4]
 800e18a:	3b04      	subs	r3, #4
 800e18c:	429d      	cmp	r5, r3
 800e18e:	461a      	mov	r2, r3
 800e190:	d32c      	bcc.n	800e1ec <quorem+0xf4>
 800e192:	613c      	str	r4, [r7, #16]
 800e194:	4638      	mov	r0, r7
 800e196:	f001 ff95 	bl	80100c4 <__mcmp>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	db22      	blt.n	800e1e4 <quorem+0xec>
 800e19e:	3601      	adds	r6, #1
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	2000      	movs	r0, #0
 800e1a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1a8:	f8d1 c000 	ldr.w	ip, [r1]
 800e1ac:	b293      	uxth	r3, r2
 800e1ae:	1ac3      	subs	r3, r0, r3
 800e1b0:	0c12      	lsrs	r2, r2, #16
 800e1b2:	fa13 f38c 	uxtah	r3, r3, ip
 800e1b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e1ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1c4:	45c1      	cmp	r9, r8
 800e1c6:	f841 3b04 	str.w	r3, [r1], #4
 800e1ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e1ce:	d2e9      	bcs.n	800e1a4 <quorem+0xac>
 800e1d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1d8:	b922      	cbnz	r2, 800e1e4 <quorem+0xec>
 800e1da:	3b04      	subs	r3, #4
 800e1dc:	429d      	cmp	r5, r3
 800e1de:	461a      	mov	r2, r3
 800e1e0:	d30a      	bcc.n	800e1f8 <quorem+0x100>
 800e1e2:	613c      	str	r4, [r7, #16]
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	b003      	add	sp, #12
 800e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	6812      	ldr	r2, [r2, #0]
 800e1ee:	3b04      	subs	r3, #4
 800e1f0:	2a00      	cmp	r2, #0
 800e1f2:	d1ce      	bne.n	800e192 <quorem+0x9a>
 800e1f4:	3c01      	subs	r4, #1
 800e1f6:	e7c9      	b.n	800e18c <quorem+0x94>
 800e1f8:	6812      	ldr	r2, [r2, #0]
 800e1fa:	3b04      	subs	r3, #4
 800e1fc:	2a00      	cmp	r2, #0
 800e1fe:	d1f0      	bne.n	800e1e2 <quorem+0xea>
 800e200:	3c01      	subs	r4, #1
 800e202:	e7eb      	b.n	800e1dc <quorem+0xe4>
 800e204:	2000      	movs	r0, #0
 800e206:	e7ee      	b.n	800e1e6 <quorem+0xee>

0800e208 <_dtoa_r>:
 800e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20c:	ed2d 8b04 	vpush	{d8-d9}
 800e210:	69c5      	ldr	r5, [r0, #28]
 800e212:	b093      	sub	sp, #76	; 0x4c
 800e214:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e218:	ec57 6b10 	vmov	r6, r7, d0
 800e21c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e220:	9107      	str	r1, [sp, #28]
 800e222:	4604      	mov	r4, r0
 800e224:	920a      	str	r2, [sp, #40]	; 0x28
 800e226:	930d      	str	r3, [sp, #52]	; 0x34
 800e228:	b975      	cbnz	r5, 800e248 <_dtoa_r+0x40>
 800e22a:	2010      	movs	r0, #16
 800e22c:	f7ff f9a2 	bl	800d574 <malloc>
 800e230:	4602      	mov	r2, r0
 800e232:	61e0      	str	r0, [r4, #28]
 800e234:	b920      	cbnz	r0, 800e240 <_dtoa_r+0x38>
 800e236:	4bae      	ldr	r3, [pc, #696]	; (800e4f0 <_dtoa_r+0x2e8>)
 800e238:	21ef      	movs	r1, #239	; 0xef
 800e23a:	48ae      	ldr	r0, [pc, #696]	; (800e4f4 <_dtoa_r+0x2ec>)
 800e23c:	f7ff ff3e 	bl	800e0bc <__assert_func>
 800e240:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e244:	6005      	str	r5, [r0, #0]
 800e246:	60c5      	str	r5, [r0, #12]
 800e248:	69e3      	ldr	r3, [r4, #28]
 800e24a:	6819      	ldr	r1, [r3, #0]
 800e24c:	b151      	cbz	r1, 800e264 <_dtoa_r+0x5c>
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	604a      	str	r2, [r1, #4]
 800e252:	2301      	movs	r3, #1
 800e254:	4093      	lsls	r3, r2
 800e256:	608b      	str	r3, [r1, #8]
 800e258:	4620      	mov	r0, r4
 800e25a:	f001 fcf7 	bl	800fc4c <_Bfree>
 800e25e:	69e3      	ldr	r3, [r4, #28]
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	1e3b      	subs	r3, r7, #0
 800e266:	bfbb      	ittet	lt
 800e268:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e26c:	9303      	strlt	r3, [sp, #12]
 800e26e:	2300      	movge	r3, #0
 800e270:	2201      	movlt	r2, #1
 800e272:	bfac      	ite	ge
 800e274:	f8c8 3000 	strge.w	r3, [r8]
 800e278:	f8c8 2000 	strlt.w	r2, [r8]
 800e27c:	4b9e      	ldr	r3, [pc, #632]	; (800e4f8 <_dtoa_r+0x2f0>)
 800e27e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e282:	ea33 0308 	bics.w	r3, r3, r8
 800e286:	d11b      	bne.n	800e2c0 <_dtoa_r+0xb8>
 800e288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e28a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e28e:	6013      	str	r3, [r2, #0]
 800e290:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e294:	4333      	orrs	r3, r6
 800e296:	f000 8593 	beq.w	800edc0 <_dtoa_r+0xbb8>
 800e29a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e29c:	b963      	cbnz	r3, 800e2b8 <_dtoa_r+0xb0>
 800e29e:	4b97      	ldr	r3, [pc, #604]	; (800e4fc <_dtoa_r+0x2f4>)
 800e2a0:	e027      	b.n	800e2f2 <_dtoa_r+0xea>
 800e2a2:	4b97      	ldr	r3, [pc, #604]	; (800e500 <_dtoa_r+0x2f8>)
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	9800      	ldr	r0, [sp, #0]
 800e2ae:	b013      	add	sp, #76	; 0x4c
 800e2b0:	ecbd 8b04 	vpop	{d8-d9}
 800e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b8:	4b90      	ldr	r3, [pc, #576]	; (800e4fc <_dtoa_r+0x2f4>)
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	3303      	adds	r3, #3
 800e2be:	e7f3      	b.n	800e2a8 <_dtoa_r+0xa0>
 800e2c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	ec51 0b17 	vmov	r0, r1, d7
 800e2ca:	eeb0 8a47 	vmov.f32	s16, s14
 800e2ce:	eef0 8a67 	vmov.f32	s17, s15
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f7f2 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 800e2d8:	4681      	mov	r9, r0
 800e2da:	b160      	cbz	r0, 800e2f6 <_dtoa_r+0xee>
 800e2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2de:	2301      	movs	r3, #1
 800e2e0:	6013      	str	r3, [r2, #0]
 800e2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 8568 	beq.w	800edba <_dtoa_r+0xbb2>
 800e2ea:	4b86      	ldr	r3, [pc, #536]	; (800e504 <_dtoa_r+0x2fc>)
 800e2ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	e7da      	b.n	800e2ac <_dtoa_r+0xa4>
 800e2f6:	aa10      	add	r2, sp, #64	; 0x40
 800e2f8:	a911      	add	r1, sp, #68	; 0x44
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	eeb0 0a48 	vmov.f32	s0, s16
 800e300:	eef0 0a68 	vmov.f32	s1, s17
 800e304:	f001 ff84 	bl	8010210 <__d2b>
 800e308:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e30c:	4682      	mov	sl, r0
 800e30e:	2d00      	cmp	r5, #0
 800e310:	d07f      	beq.n	800e412 <_dtoa_r+0x20a>
 800e312:	ee18 3a90 	vmov	r3, s17
 800e316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e31a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e31e:	ec51 0b18 	vmov	r0, r1, d8
 800e322:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e32a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e32e:	4619      	mov	r1, r3
 800e330:	2200      	movs	r2, #0
 800e332:	4b75      	ldr	r3, [pc, #468]	; (800e508 <_dtoa_r+0x300>)
 800e334:	f7f1 ffc8 	bl	80002c8 <__aeabi_dsub>
 800e338:	a367      	add	r3, pc, #412	; (adr r3, 800e4d8 <_dtoa_r+0x2d0>)
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	f7f2 f97b 	bl	8000638 <__aeabi_dmul>
 800e342:	a367      	add	r3, pc, #412	; (adr r3, 800e4e0 <_dtoa_r+0x2d8>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f7f1 ffc0 	bl	80002cc <__adddf3>
 800e34c:	4606      	mov	r6, r0
 800e34e:	4628      	mov	r0, r5
 800e350:	460f      	mov	r7, r1
 800e352:	f7f2 f907 	bl	8000564 <__aeabi_i2d>
 800e356:	a364      	add	r3, pc, #400	; (adr r3, 800e4e8 <_dtoa_r+0x2e0>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	f7f2 f96c 	bl	8000638 <__aeabi_dmul>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4630      	mov	r0, r6
 800e366:	4639      	mov	r1, r7
 800e368:	f7f1 ffb0 	bl	80002cc <__adddf3>
 800e36c:	4606      	mov	r6, r0
 800e36e:	460f      	mov	r7, r1
 800e370:	f7f2 fc12 	bl	8000b98 <__aeabi_d2iz>
 800e374:	2200      	movs	r2, #0
 800e376:	4683      	mov	fp, r0
 800e378:	2300      	movs	r3, #0
 800e37a:	4630      	mov	r0, r6
 800e37c:	4639      	mov	r1, r7
 800e37e:	f7f2 fbcd 	bl	8000b1c <__aeabi_dcmplt>
 800e382:	b148      	cbz	r0, 800e398 <_dtoa_r+0x190>
 800e384:	4658      	mov	r0, fp
 800e386:	f7f2 f8ed 	bl	8000564 <__aeabi_i2d>
 800e38a:	4632      	mov	r2, r6
 800e38c:	463b      	mov	r3, r7
 800e38e:	f7f2 fbbb 	bl	8000b08 <__aeabi_dcmpeq>
 800e392:	b908      	cbnz	r0, 800e398 <_dtoa_r+0x190>
 800e394:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e398:	f1bb 0f16 	cmp.w	fp, #22
 800e39c:	d857      	bhi.n	800e44e <_dtoa_r+0x246>
 800e39e:	4b5b      	ldr	r3, [pc, #364]	; (800e50c <_dtoa_r+0x304>)
 800e3a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a8:	ec51 0b18 	vmov	r0, r1, d8
 800e3ac:	f7f2 fbb6 	bl	8000b1c <__aeabi_dcmplt>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d04e      	beq.n	800e452 <_dtoa_r+0x24a>
 800e3b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800e3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3be:	1b5b      	subs	r3, r3, r5
 800e3c0:	1e5a      	subs	r2, r3, #1
 800e3c2:	bf45      	ittet	mi
 800e3c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800e3c8:	9305      	strmi	r3, [sp, #20]
 800e3ca:	2300      	movpl	r3, #0
 800e3cc:	2300      	movmi	r3, #0
 800e3ce:	9206      	str	r2, [sp, #24]
 800e3d0:	bf54      	ite	pl
 800e3d2:	9305      	strpl	r3, [sp, #20]
 800e3d4:	9306      	strmi	r3, [sp, #24]
 800e3d6:	f1bb 0f00 	cmp.w	fp, #0
 800e3da:	db3c      	blt.n	800e456 <_dtoa_r+0x24e>
 800e3dc:	9b06      	ldr	r3, [sp, #24]
 800e3de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e3e2:	445b      	add	r3, fp
 800e3e4:	9306      	str	r3, [sp, #24]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	9308      	str	r3, [sp, #32]
 800e3ea:	9b07      	ldr	r3, [sp, #28]
 800e3ec:	2b09      	cmp	r3, #9
 800e3ee:	d868      	bhi.n	800e4c2 <_dtoa_r+0x2ba>
 800e3f0:	2b05      	cmp	r3, #5
 800e3f2:	bfc4      	itt	gt
 800e3f4:	3b04      	subgt	r3, #4
 800e3f6:	9307      	strgt	r3, [sp, #28]
 800e3f8:	9b07      	ldr	r3, [sp, #28]
 800e3fa:	f1a3 0302 	sub.w	r3, r3, #2
 800e3fe:	bfcc      	ite	gt
 800e400:	2500      	movgt	r5, #0
 800e402:	2501      	movle	r5, #1
 800e404:	2b03      	cmp	r3, #3
 800e406:	f200 8085 	bhi.w	800e514 <_dtoa_r+0x30c>
 800e40a:	e8df f003 	tbb	[pc, r3]
 800e40e:	3b2e      	.short	0x3b2e
 800e410:	5839      	.short	0x5839
 800e412:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e416:	441d      	add	r5, r3
 800e418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e41c:	2b20      	cmp	r3, #32
 800e41e:	bfc1      	itttt	gt
 800e420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e424:	fa08 f803 	lslgt.w	r8, r8, r3
 800e428:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e42c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e430:	bfd6      	itet	le
 800e432:	f1c3 0320 	rsble	r3, r3, #32
 800e436:	ea48 0003 	orrgt.w	r0, r8, r3
 800e43a:	fa06 f003 	lslle.w	r0, r6, r3
 800e43e:	f7f2 f881 	bl	8000544 <__aeabi_ui2d>
 800e442:	2201      	movs	r2, #1
 800e444:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e448:	3d01      	subs	r5, #1
 800e44a:	920e      	str	r2, [sp, #56]	; 0x38
 800e44c:	e76f      	b.n	800e32e <_dtoa_r+0x126>
 800e44e:	2301      	movs	r3, #1
 800e450:	e7b3      	b.n	800e3ba <_dtoa_r+0x1b2>
 800e452:	900c      	str	r0, [sp, #48]	; 0x30
 800e454:	e7b2      	b.n	800e3bc <_dtoa_r+0x1b4>
 800e456:	9b05      	ldr	r3, [sp, #20]
 800e458:	eba3 030b 	sub.w	r3, r3, fp
 800e45c:	9305      	str	r3, [sp, #20]
 800e45e:	f1cb 0300 	rsb	r3, fp, #0
 800e462:	9308      	str	r3, [sp, #32]
 800e464:	2300      	movs	r3, #0
 800e466:	930b      	str	r3, [sp, #44]	; 0x2c
 800e468:	e7bf      	b.n	800e3ea <_dtoa_r+0x1e2>
 800e46a:	2300      	movs	r3, #0
 800e46c:	9309      	str	r3, [sp, #36]	; 0x24
 800e46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e470:	2b00      	cmp	r3, #0
 800e472:	dc52      	bgt.n	800e51a <_dtoa_r+0x312>
 800e474:	2301      	movs	r3, #1
 800e476:	9301      	str	r3, [sp, #4]
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	461a      	mov	r2, r3
 800e47c:	920a      	str	r2, [sp, #40]	; 0x28
 800e47e:	e00b      	b.n	800e498 <_dtoa_r+0x290>
 800e480:	2301      	movs	r3, #1
 800e482:	e7f3      	b.n	800e46c <_dtoa_r+0x264>
 800e484:	2300      	movs	r3, #0
 800e486:	9309      	str	r3, [sp, #36]	; 0x24
 800e488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e48a:	445b      	add	r3, fp
 800e48c:	9301      	str	r3, [sp, #4]
 800e48e:	3301      	adds	r3, #1
 800e490:	2b01      	cmp	r3, #1
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	bfb8      	it	lt
 800e496:	2301      	movlt	r3, #1
 800e498:	69e0      	ldr	r0, [r4, #28]
 800e49a:	2100      	movs	r1, #0
 800e49c:	2204      	movs	r2, #4
 800e49e:	f102 0614 	add.w	r6, r2, #20
 800e4a2:	429e      	cmp	r6, r3
 800e4a4:	d93d      	bls.n	800e522 <_dtoa_r+0x31a>
 800e4a6:	6041      	str	r1, [r0, #4]
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	f001 fb8f 	bl	800fbcc <_Balloc>
 800e4ae:	9000      	str	r0, [sp, #0]
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d139      	bne.n	800e528 <_dtoa_r+0x320>
 800e4b4:	4b16      	ldr	r3, [pc, #88]	; (800e510 <_dtoa_r+0x308>)
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	f240 11af 	movw	r1, #431	; 0x1af
 800e4bc:	e6bd      	b.n	800e23a <_dtoa_r+0x32>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e7e1      	b.n	800e486 <_dtoa_r+0x27e>
 800e4c2:	2501      	movs	r5, #1
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9307      	str	r3, [sp, #28]
 800e4c8:	9509      	str	r5, [sp, #36]	; 0x24
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	9304      	str	r3, [sp, #16]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	2312      	movs	r3, #18
 800e4d6:	e7d1      	b.n	800e47c <_dtoa_r+0x274>
 800e4d8:	636f4361 	.word	0x636f4361
 800e4dc:	3fd287a7 	.word	0x3fd287a7
 800e4e0:	8b60c8b3 	.word	0x8b60c8b3
 800e4e4:	3fc68a28 	.word	0x3fc68a28
 800e4e8:	509f79fb 	.word	0x509f79fb
 800e4ec:	3fd34413 	.word	0x3fd34413
 800e4f0:	08015c6c 	.word	0x08015c6c
 800e4f4:	08015c83 	.word	0x08015c83
 800e4f8:	7ff00000 	.word	0x7ff00000
 800e4fc:	08015c68 	.word	0x08015c68
 800e500:	08015c5f 	.word	0x08015c5f
 800e504:	08015d14 	.word	0x08015d14
 800e508:	3ff80000 	.word	0x3ff80000
 800e50c:	08015da0 	.word	0x08015da0
 800e510:	08015cdb 	.word	0x08015cdb
 800e514:	2301      	movs	r3, #1
 800e516:	9309      	str	r3, [sp, #36]	; 0x24
 800e518:	e7d7      	b.n	800e4ca <_dtoa_r+0x2c2>
 800e51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51c:	9301      	str	r3, [sp, #4]
 800e51e:	9304      	str	r3, [sp, #16]
 800e520:	e7ba      	b.n	800e498 <_dtoa_r+0x290>
 800e522:	3101      	adds	r1, #1
 800e524:	0052      	lsls	r2, r2, #1
 800e526:	e7ba      	b.n	800e49e <_dtoa_r+0x296>
 800e528:	69e3      	ldr	r3, [r4, #28]
 800e52a:	9a00      	ldr	r2, [sp, #0]
 800e52c:	601a      	str	r2, [r3, #0]
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	2b0e      	cmp	r3, #14
 800e532:	f200 80a8 	bhi.w	800e686 <_dtoa_r+0x47e>
 800e536:	2d00      	cmp	r5, #0
 800e538:	f000 80a5 	beq.w	800e686 <_dtoa_r+0x47e>
 800e53c:	f1bb 0f00 	cmp.w	fp, #0
 800e540:	dd38      	ble.n	800e5b4 <_dtoa_r+0x3ac>
 800e542:	4bc0      	ldr	r3, [pc, #768]	; (800e844 <_dtoa_r+0x63c>)
 800e544:	f00b 020f 	and.w	r2, fp, #15
 800e548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e54c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e550:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e554:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e558:	d019      	beq.n	800e58e <_dtoa_r+0x386>
 800e55a:	4bbb      	ldr	r3, [pc, #748]	; (800e848 <_dtoa_r+0x640>)
 800e55c:	ec51 0b18 	vmov	r0, r1, d8
 800e560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e564:	f7f2 f992 	bl	800088c <__aeabi_ddiv>
 800e568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e56c:	f008 080f 	and.w	r8, r8, #15
 800e570:	2503      	movs	r5, #3
 800e572:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e848 <_dtoa_r+0x640>
 800e576:	f1b8 0f00 	cmp.w	r8, #0
 800e57a:	d10a      	bne.n	800e592 <_dtoa_r+0x38a>
 800e57c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e580:	4632      	mov	r2, r6
 800e582:	463b      	mov	r3, r7
 800e584:	f7f2 f982 	bl	800088c <__aeabi_ddiv>
 800e588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e58c:	e02b      	b.n	800e5e6 <_dtoa_r+0x3de>
 800e58e:	2502      	movs	r5, #2
 800e590:	e7ef      	b.n	800e572 <_dtoa_r+0x36a>
 800e592:	f018 0f01 	tst.w	r8, #1
 800e596:	d008      	beq.n	800e5aa <_dtoa_r+0x3a2>
 800e598:	4630      	mov	r0, r6
 800e59a:	4639      	mov	r1, r7
 800e59c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e5a0:	f7f2 f84a 	bl	8000638 <__aeabi_dmul>
 800e5a4:	3501      	adds	r5, #1
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e5ae:	f109 0908 	add.w	r9, r9, #8
 800e5b2:	e7e0      	b.n	800e576 <_dtoa_r+0x36e>
 800e5b4:	f000 809f 	beq.w	800e6f6 <_dtoa_r+0x4ee>
 800e5b8:	f1cb 0600 	rsb	r6, fp, #0
 800e5bc:	4ba1      	ldr	r3, [pc, #644]	; (800e844 <_dtoa_r+0x63c>)
 800e5be:	4fa2      	ldr	r7, [pc, #648]	; (800e848 <_dtoa_r+0x640>)
 800e5c0:	f006 020f 	and.w	r2, r6, #15
 800e5c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5cc:	ec51 0b18 	vmov	r0, r1, d8
 800e5d0:	f7f2 f832 	bl	8000638 <__aeabi_dmul>
 800e5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5d8:	1136      	asrs	r6, r6, #4
 800e5da:	2300      	movs	r3, #0
 800e5dc:	2502      	movs	r5, #2
 800e5de:	2e00      	cmp	r6, #0
 800e5e0:	d17e      	bne.n	800e6e0 <_dtoa_r+0x4d8>
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d1d0      	bne.n	800e588 <_dtoa_r+0x380>
 800e5e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 8084 	beq.w	800e6fa <_dtoa_r+0x4f2>
 800e5f2:	4b96      	ldr	r3, [pc, #600]	; (800e84c <_dtoa_r+0x644>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f2 fa8f 	bl	8000b1c <__aeabi_dcmplt>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d07b      	beq.n	800e6fa <_dtoa_r+0x4f2>
 800e602:	9b04      	ldr	r3, [sp, #16]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d078      	beq.n	800e6fa <_dtoa_r+0x4f2>
 800e608:	9b01      	ldr	r3, [sp, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dd39      	ble.n	800e682 <_dtoa_r+0x47a>
 800e60e:	4b90      	ldr	r3, [pc, #576]	; (800e850 <_dtoa_r+0x648>)
 800e610:	2200      	movs	r2, #0
 800e612:	4640      	mov	r0, r8
 800e614:	4649      	mov	r1, r9
 800e616:	f7f2 f80f 	bl	8000638 <__aeabi_dmul>
 800e61a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e61e:	9e01      	ldr	r6, [sp, #4]
 800e620:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e624:	3501      	adds	r5, #1
 800e626:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e62a:	4628      	mov	r0, r5
 800e62c:	f7f1 ff9a 	bl	8000564 <__aeabi_i2d>
 800e630:	4642      	mov	r2, r8
 800e632:	464b      	mov	r3, r9
 800e634:	f7f2 f800 	bl	8000638 <__aeabi_dmul>
 800e638:	4b86      	ldr	r3, [pc, #536]	; (800e854 <_dtoa_r+0x64c>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	f7f1 fe46 	bl	80002cc <__adddf3>
 800e640:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e648:	9303      	str	r3, [sp, #12]
 800e64a:	2e00      	cmp	r6, #0
 800e64c:	d158      	bne.n	800e700 <_dtoa_r+0x4f8>
 800e64e:	4b82      	ldr	r3, [pc, #520]	; (800e858 <_dtoa_r+0x650>)
 800e650:	2200      	movs	r2, #0
 800e652:	4640      	mov	r0, r8
 800e654:	4649      	mov	r1, r9
 800e656:	f7f1 fe37 	bl	80002c8 <__aeabi_dsub>
 800e65a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e65e:	4680      	mov	r8, r0
 800e660:	4689      	mov	r9, r1
 800e662:	f7f2 fa79 	bl	8000b58 <__aeabi_dcmpgt>
 800e666:	2800      	cmp	r0, #0
 800e668:	f040 8296 	bne.w	800eb98 <_dtoa_r+0x990>
 800e66c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e670:	4640      	mov	r0, r8
 800e672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e676:	4649      	mov	r1, r9
 800e678:	f7f2 fa50 	bl	8000b1c <__aeabi_dcmplt>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	f040 8289 	bne.w	800eb94 <_dtoa_r+0x98c>
 800e682:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f2c0 814e 	blt.w	800e92a <_dtoa_r+0x722>
 800e68e:	f1bb 0f0e 	cmp.w	fp, #14
 800e692:	f300 814a 	bgt.w	800e92a <_dtoa_r+0x722>
 800e696:	4b6b      	ldr	r3, [pc, #428]	; (800e844 <_dtoa_r+0x63c>)
 800e698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e69c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f280 80dc 	bge.w	800e860 <_dtoa_r+0x658>
 800e6a8:	9b04      	ldr	r3, [sp, #16]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f300 80d8 	bgt.w	800e860 <_dtoa_r+0x658>
 800e6b0:	f040 826f 	bne.w	800eb92 <_dtoa_r+0x98a>
 800e6b4:	4b68      	ldr	r3, [pc, #416]	; (800e858 <_dtoa_r+0x650>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	f7f1 ffbc 	bl	8000638 <__aeabi_dmul>
 800e6c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6c4:	f7f2 fa3e 	bl	8000b44 <__aeabi_dcmpge>
 800e6c8:	9e04      	ldr	r6, [sp, #16]
 800e6ca:	4637      	mov	r7, r6
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f040 8245 	bne.w	800eb5c <_dtoa_r+0x954>
 800e6d2:	9d00      	ldr	r5, [sp, #0]
 800e6d4:	2331      	movs	r3, #49	; 0x31
 800e6d6:	f805 3b01 	strb.w	r3, [r5], #1
 800e6da:	f10b 0b01 	add.w	fp, fp, #1
 800e6de:	e241      	b.n	800eb64 <_dtoa_r+0x95c>
 800e6e0:	07f2      	lsls	r2, r6, #31
 800e6e2:	d505      	bpl.n	800e6f0 <_dtoa_r+0x4e8>
 800e6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6e8:	f7f1 ffa6 	bl	8000638 <__aeabi_dmul>
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	1076      	asrs	r6, r6, #1
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	e773      	b.n	800e5de <_dtoa_r+0x3d6>
 800e6f6:	2502      	movs	r5, #2
 800e6f8:	e775      	b.n	800e5e6 <_dtoa_r+0x3de>
 800e6fa:	9e04      	ldr	r6, [sp, #16]
 800e6fc:	465f      	mov	r7, fp
 800e6fe:	e792      	b.n	800e626 <_dtoa_r+0x41e>
 800e700:	9900      	ldr	r1, [sp, #0]
 800e702:	4b50      	ldr	r3, [pc, #320]	; (800e844 <_dtoa_r+0x63c>)
 800e704:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e708:	4431      	add	r1, r6
 800e70a:	9102      	str	r1, [sp, #8]
 800e70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e70e:	eeb0 9a47 	vmov.f32	s18, s14
 800e712:	eef0 9a67 	vmov.f32	s19, s15
 800e716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e71a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e71e:	2900      	cmp	r1, #0
 800e720:	d044      	beq.n	800e7ac <_dtoa_r+0x5a4>
 800e722:	494e      	ldr	r1, [pc, #312]	; (800e85c <_dtoa_r+0x654>)
 800e724:	2000      	movs	r0, #0
 800e726:	f7f2 f8b1 	bl	800088c <__aeabi_ddiv>
 800e72a:	ec53 2b19 	vmov	r2, r3, d9
 800e72e:	f7f1 fdcb 	bl	80002c8 <__aeabi_dsub>
 800e732:	9d00      	ldr	r5, [sp, #0]
 800e734:	ec41 0b19 	vmov	d9, r0, r1
 800e738:	4649      	mov	r1, r9
 800e73a:	4640      	mov	r0, r8
 800e73c:	f7f2 fa2c 	bl	8000b98 <__aeabi_d2iz>
 800e740:	4606      	mov	r6, r0
 800e742:	f7f1 ff0f 	bl	8000564 <__aeabi_i2d>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	4640      	mov	r0, r8
 800e74c:	4649      	mov	r1, r9
 800e74e:	f7f1 fdbb 	bl	80002c8 <__aeabi_dsub>
 800e752:	3630      	adds	r6, #48	; 0x30
 800e754:	f805 6b01 	strb.w	r6, [r5], #1
 800e758:	ec53 2b19 	vmov	r2, r3, d9
 800e75c:	4680      	mov	r8, r0
 800e75e:	4689      	mov	r9, r1
 800e760:	f7f2 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 800e764:	2800      	cmp	r0, #0
 800e766:	d164      	bne.n	800e832 <_dtoa_r+0x62a>
 800e768:	4642      	mov	r2, r8
 800e76a:	464b      	mov	r3, r9
 800e76c:	4937      	ldr	r1, [pc, #220]	; (800e84c <_dtoa_r+0x644>)
 800e76e:	2000      	movs	r0, #0
 800e770:	f7f1 fdaa 	bl	80002c8 <__aeabi_dsub>
 800e774:	ec53 2b19 	vmov	r2, r3, d9
 800e778:	f7f2 f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f040 80b6 	bne.w	800e8ee <_dtoa_r+0x6e6>
 800e782:	9b02      	ldr	r3, [sp, #8]
 800e784:	429d      	cmp	r5, r3
 800e786:	f43f af7c 	beq.w	800e682 <_dtoa_r+0x47a>
 800e78a:	4b31      	ldr	r3, [pc, #196]	; (800e850 <_dtoa_r+0x648>)
 800e78c:	ec51 0b19 	vmov	r0, r1, d9
 800e790:	2200      	movs	r2, #0
 800e792:	f7f1 ff51 	bl	8000638 <__aeabi_dmul>
 800e796:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <_dtoa_r+0x648>)
 800e798:	ec41 0b19 	vmov	d9, r0, r1
 800e79c:	2200      	movs	r2, #0
 800e79e:	4640      	mov	r0, r8
 800e7a0:	4649      	mov	r1, r9
 800e7a2:	f7f1 ff49 	bl	8000638 <__aeabi_dmul>
 800e7a6:	4680      	mov	r8, r0
 800e7a8:	4689      	mov	r9, r1
 800e7aa:	e7c5      	b.n	800e738 <_dtoa_r+0x530>
 800e7ac:	ec51 0b17 	vmov	r0, r1, d7
 800e7b0:	f7f1 ff42 	bl	8000638 <__aeabi_dmul>
 800e7b4:	9b02      	ldr	r3, [sp, #8]
 800e7b6:	9d00      	ldr	r5, [sp, #0]
 800e7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7ba:	ec41 0b19 	vmov	d9, r0, r1
 800e7be:	4649      	mov	r1, r9
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	f7f2 f9e9 	bl	8000b98 <__aeabi_d2iz>
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	f7f1 fecc 	bl	8000564 <__aeabi_i2d>
 800e7cc:	3630      	adds	r6, #48	; 0x30
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	460b      	mov	r3, r1
 800e7d2:	4640      	mov	r0, r8
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	f7f1 fd77 	bl	80002c8 <__aeabi_dsub>
 800e7da:	f805 6b01 	strb.w	r6, [r5], #1
 800e7de:	9b02      	ldr	r3, [sp, #8]
 800e7e0:	429d      	cmp	r5, r3
 800e7e2:	4680      	mov	r8, r0
 800e7e4:	4689      	mov	r9, r1
 800e7e6:	f04f 0200 	mov.w	r2, #0
 800e7ea:	d124      	bne.n	800e836 <_dtoa_r+0x62e>
 800e7ec:	4b1b      	ldr	r3, [pc, #108]	; (800e85c <_dtoa_r+0x654>)
 800e7ee:	ec51 0b19 	vmov	r0, r1, d9
 800e7f2:	f7f1 fd6b 	bl	80002cc <__adddf3>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	4649      	mov	r1, r9
 800e7fe:	f7f2 f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 800e802:	2800      	cmp	r0, #0
 800e804:	d173      	bne.n	800e8ee <_dtoa_r+0x6e6>
 800e806:	ec53 2b19 	vmov	r2, r3, d9
 800e80a:	4914      	ldr	r1, [pc, #80]	; (800e85c <_dtoa_r+0x654>)
 800e80c:	2000      	movs	r0, #0
 800e80e:	f7f1 fd5b 	bl	80002c8 <__aeabi_dsub>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4640      	mov	r0, r8
 800e818:	4649      	mov	r1, r9
 800e81a:	f7f2 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800e81e:	2800      	cmp	r0, #0
 800e820:	f43f af2f 	beq.w	800e682 <_dtoa_r+0x47a>
 800e824:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e826:	1e6b      	subs	r3, r5, #1
 800e828:	930f      	str	r3, [sp, #60]	; 0x3c
 800e82a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e82e:	2b30      	cmp	r3, #48	; 0x30
 800e830:	d0f8      	beq.n	800e824 <_dtoa_r+0x61c>
 800e832:	46bb      	mov	fp, r7
 800e834:	e04a      	b.n	800e8cc <_dtoa_r+0x6c4>
 800e836:	4b06      	ldr	r3, [pc, #24]	; (800e850 <_dtoa_r+0x648>)
 800e838:	f7f1 fefe 	bl	8000638 <__aeabi_dmul>
 800e83c:	4680      	mov	r8, r0
 800e83e:	4689      	mov	r9, r1
 800e840:	e7bd      	b.n	800e7be <_dtoa_r+0x5b6>
 800e842:	bf00      	nop
 800e844:	08015da0 	.word	0x08015da0
 800e848:	08015d78 	.word	0x08015d78
 800e84c:	3ff00000 	.word	0x3ff00000
 800e850:	40240000 	.word	0x40240000
 800e854:	401c0000 	.word	0x401c0000
 800e858:	40140000 	.word	0x40140000
 800e85c:	3fe00000 	.word	0x3fe00000
 800e860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e864:	9d00      	ldr	r5, [sp, #0]
 800e866:	4642      	mov	r2, r8
 800e868:	464b      	mov	r3, r9
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f2 f80d 	bl	800088c <__aeabi_ddiv>
 800e872:	f7f2 f991 	bl	8000b98 <__aeabi_d2iz>
 800e876:	9001      	str	r0, [sp, #4]
 800e878:	f7f1 fe74 	bl	8000564 <__aeabi_i2d>
 800e87c:	4642      	mov	r2, r8
 800e87e:	464b      	mov	r3, r9
 800e880:	f7f1 feda 	bl	8000638 <__aeabi_dmul>
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	4630      	mov	r0, r6
 800e88a:	4639      	mov	r1, r7
 800e88c:	f7f1 fd1c 	bl	80002c8 <__aeabi_dsub>
 800e890:	9e01      	ldr	r6, [sp, #4]
 800e892:	9f04      	ldr	r7, [sp, #16]
 800e894:	3630      	adds	r6, #48	; 0x30
 800e896:	f805 6b01 	strb.w	r6, [r5], #1
 800e89a:	9e00      	ldr	r6, [sp, #0]
 800e89c:	1bae      	subs	r6, r5, r6
 800e89e:	42b7      	cmp	r7, r6
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	d134      	bne.n	800e910 <_dtoa_r+0x708>
 800e8a6:	f7f1 fd11 	bl	80002cc <__adddf3>
 800e8aa:	4642      	mov	r2, r8
 800e8ac:	464b      	mov	r3, r9
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	f7f2 f951 	bl	8000b58 <__aeabi_dcmpgt>
 800e8b6:	b9c8      	cbnz	r0, 800e8ec <_dtoa_r+0x6e4>
 800e8b8:	4642      	mov	r2, r8
 800e8ba:	464b      	mov	r3, r9
 800e8bc:	4630      	mov	r0, r6
 800e8be:	4639      	mov	r1, r7
 800e8c0:	f7f2 f922 	bl	8000b08 <__aeabi_dcmpeq>
 800e8c4:	b110      	cbz	r0, 800e8cc <_dtoa_r+0x6c4>
 800e8c6:	9b01      	ldr	r3, [sp, #4]
 800e8c8:	07db      	lsls	r3, r3, #31
 800e8ca:	d40f      	bmi.n	800e8ec <_dtoa_r+0x6e4>
 800e8cc:	4651      	mov	r1, sl
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f001 f9bc 	bl	800fc4c <_Bfree>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8d8:	702b      	strb	r3, [r5, #0]
 800e8da:	f10b 0301 	add.w	r3, fp, #1
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f43f ace2 	beq.w	800e2ac <_dtoa_r+0xa4>
 800e8e8:	601d      	str	r5, [r3, #0]
 800e8ea:	e4df      	b.n	800e2ac <_dtoa_r+0xa4>
 800e8ec:	465f      	mov	r7, fp
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	461d      	mov	r5, r3
 800e8f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8f6:	2a39      	cmp	r2, #57	; 0x39
 800e8f8:	d106      	bne.n	800e908 <_dtoa_r+0x700>
 800e8fa:	9a00      	ldr	r2, [sp, #0]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d1f7      	bne.n	800e8f0 <_dtoa_r+0x6e8>
 800e900:	9900      	ldr	r1, [sp, #0]
 800e902:	2230      	movs	r2, #48	; 0x30
 800e904:	3701      	adds	r7, #1
 800e906:	700a      	strb	r2, [r1, #0]
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	3201      	adds	r2, #1
 800e90c:	701a      	strb	r2, [r3, #0]
 800e90e:	e790      	b.n	800e832 <_dtoa_r+0x62a>
 800e910:	4ba3      	ldr	r3, [pc, #652]	; (800eba0 <_dtoa_r+0x998>)
 800e912:	2200      	movs	r2, #0
 800e914:	f7f1 fe90 	bl	8000638 <__aeabi_dmul>
 800e918:	2200      	movs	r2, #0
 800e91a:	2300      	movs	r3, #0
 800e91c:	4606      	mov	r6, r0
 800e91e:	460f      	mov	r7, r1
 800e920:	f7f2 f8f2 	bl	8000b08 <__aeabi_dcmpeq>
 800e924:	2800      	cmp	r0, #0
 800e926:	d09e      	beq.n	800e866 <_dtoa_r+0x65e>
 800e928:	e7d0      	b.n	800e8cc <_dtoa_r+0x6c4>
 800e92a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	f000 80ca 	beq.w	800eac6 <_dtoa_r+0x8be>
 800e932:	9a07      	ldr	r2, [sp, #28]
 800e934:	2a01      	cmp	r2, #1
 800e936:	f300 80ad 	bgt.w	800ea94 <_dtoa_r+0x88c>
 800e93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	f000 80a5 	beq.w	800ea8c <_dtoa_r+0x884>
 800e942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e946:	9e08      	ldr	r6, [sp, #32]
 800e948:	9d05      	ldr	r5, [sp, #20]
 800e94a:	9a05      	ldr	r2, [sp, #20]
 800e94c:	441a      	add	r2, r3
 800e94e:	9205      	str	r2, [sp, #20]
 800e950:	9a06      	ldr	r2, [sp, #24]
 800e952:	2101      	movs	r1, #1
 800e954:	441a      	add	r2, r3
 800e956:	4620      	mov	r0, r4
 800e958:	9206      	str	r2, [sp, #24]
 800e95a:	f001 fa2d 	bl	800fdb8 <__i2b>
 800e95e:	4607      	mov	r7, r0
 800e960:	b165      	cbz	r5, 800e97c <_dtoa_r+0x774>
 800e962:	9b06      	ldr	r3, [sp, #24]
 800e964:	2b00      	cmp	r3, #0
 800e966:	dd09      	ble.n	800e97c <_dtoa_r+0x774>
 800e968:	42ab      	cmp	r3, r5
 800e96a:	9a05      	ldr	r2, [sp, #20]
 800e96c:	bfa8      	it	ge
 800e96e:	462b      	movge	r3, r5
 800e970:	1ad2      	subs	r2, r2, r3
 800e972:	9205      	str	r2, [sp, #20]
 800e974:	9a06      	ldr	r2, [sp, #24]
 800e976:	1aed      	subs	r5, r5, r3
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	9306      	str	r3, [sp, #24]
 800e97c:	9b08      	ldr	r3, [sp, #32]
 800e97e:	b1f3      	cbz	r3, 800e9be <_dtoa_r+0x7b6>
 800e980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 80a3 	beq.w	800eace <_dtoa_r+0x8c6>
 800e988:	2e00      	cmp	r6, #0
 800e98a:	dd10      	ble.n	800e9ae <_dtoa_r+0x7a6>
 800e98c:	4639      	mov	r1, r7
 800e98e:	4632      	mov	r2, r6
 800e990:	4620      	mov	r0, r4
 800e992:	f001 fad1 	bl	800ff38 <__pow5mult>
 800e996:	4652      	mov	r2, sl
 800e998:	4601      	mov	r1, r0
 800e99a:	4607      	mov	r7, r0
 800e99c:	4620      	mov	r0, r4
 800e99e:	f001 fa21 	bl	800fde4 <__multiply>
 800e9a2:	4651      	mov	r1, sl
 800e9a4:	4680      	mov	r8, r0
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f001 f950 	bl	800fc4c <_Bfree>
 800e9ac:	46c2      	mov	sl, r8
 800e9ae:	9b08      	ldr	r3, [sp, #32]
 800e9b0:	1b9a      	subs	r2, r3, r6
 800e9b2:	d004      	beq.n	800e9be <_dtoa_r+0x7b6>
 800e9b4:	4651      	mov	r1, sl
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f001 fabe 	bl	800ff38 <__pow5mult>
 800e9bc:	4682      	mov	sl, r0
 800e9be:	2101      	movs	r1, #1
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f001 f9f9 	bl	800fdb8 <__i2b>
 800e9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	f340 8081 	ble.w	800ead2 <_dtoa_r+0x8ca>
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	4601      	mov	r1, r0
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f001 faaf 	bl	800ff38 <__pow5mult>
 800e9da:	9b07      	ldr	r3, [sp, #28]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	4606      	mov	r6, r0
 800e9e0:	dd7a      	ble.n	800ead8 <_dtoa_r+0x8d0>
 800e9e2:	f04f 0800 	mov.w	r8, #0
 800e9e6:	6933      	ldr	r3, [r6, #16]
 800e9e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e9ec:	6918      	ldr	r0, [r3, #16]
 800e9ee:	f001 f995 	bl	800fd1c <__hi0bits>
 800e9f2:	f1c0 0020 	rsb	r0, r0, #32
 800e9f6:	9b06      	ldr	r3, [sp, #24]
 800e9f8:	4418      	add	r0, r3
 800e9fa:	f010 001f 	ands.w	r0, r0, #31
 800e9fe:	f000 8094 	beq.w	800eb2a <_dtoa_r+0x922>
 800ea02:	f1c0 0320 	rsb	r3, r0, #32
 800ea06:	2b04      	cmp	r3, #4
 800ea08:	f340 8085 	ble.w	800eb16 <_dtoa_r+0x90e>
 800ea0c:	9b05      	ldr	r3, [sp, #20]
 800ea0e:	f1c0 001c 	rsb	r0, r0, #28
 800ea12:	4403      	add	r3, r0
 800ea14:	9305      	str	r3, [sp, #20]
 800ea16:	9b06      	ldr	r3, [sp, #24]
 800ea18:	4403      	add	r3, r0
 800ea1a:	4405      	add	r5, r0
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	9b05      	ldr	r3, [sp, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dd05      	ble.n	800ea30 <_dtoa_r+0x828>
 800ea24:	4651      	mov	r1, sl
 800ea26:	461a      	mov	r2, r3
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f001 fadf 	bl	800ffec <__lshift>
 800ea2e:	4682      	mov	sl, r0
 800ea30:	9b06      	ldr	r3, [sp, #24]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dd05      	ble.n	800ea42 <_dtoa_r+0x83a>
 800ea36:	4631      	mov	r1, r6
 800ea38:	461a      	mov	r2, r3
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f001 fad6 	bl	800ffec <__lshift>
 800ea40:	4606      	mov	r6, r0
 800ea42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d072      	beq.n	800eb2e <_dtoa_r+0x926>
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4650      	mov	r0, sl
 800ea4c:	f001 fb3a 	bl	80100c4 <__mcmp>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	da6c      	bge.n	800eb2e <_dtoa_r+0x926>
 800ea54:	2300      	movs	r3, #0
 800ea56:	4651      	mov	r1, sl
 800ea58:	220a      	movs	r2, #10
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f001 f918 	bl	800fc90 <__multadd>
 800ea60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea66:	4682      	mov	sl, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f000 81b0 	beq.w	800edce <_dtoa_r+0xbc6>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	4639      	mov	r1, r7
 800ea72:	220a      	movs	r2, #10
 800ea74:	4620      	mov	r0, r4
 800ea76:	f001 f90b 	bl	800fc90 <__multadd>
 800ea7a:	9b01      	ldr	r3, [sp, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	4607      	mov	r7, r0
 800ea80:	f300 8096 	bgt.w	800ebb0 <_dtoa_r+0x9a8>
 800ea84:	9b07      	ldr	r3, [sp, #28]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	dc59      	bgt.n	800eb3e <_dtoa_r+0x936>
 800ea8a:	e091      	b.n	800ebb0 <_dtoa_r+0x9a8>
 800ea8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea92:	e758      	b.n	800e946 <_dtoa_r+0x73e>
 800ea94:	9b04      	ldr	r3, [sp, #16]
 800ea96:	1e5e      	subs	r6, r3, #1
 800ea98:	9b08      	ldr	r3, [sp, #32]
 800ea9a:	42b3      	cmp	r3, r6
 800ea9c:	bfbf      	itttt	lt
 800ea9e:	9b08      	ldrlt	r3, [sp, #32]
 800eaa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eaa2:	9608      	strlt	r6, [sp, #32]
 800eaa4:	1af3      	sublt	r3, r6, r3
 800eaa6:	bfb4      	ite	lt
 800eaa8:	18d2      	addlt	r2, r2, r3
 800eaaa:	1b9e      	subge	r6, r3, r6
 800eaac:	9b04      	ldr	r3, [sp, #16]
 800eaae:	bfbc      	itt	lt
 800eab0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eab2:	2600      	movlt	r6, #0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bfb7      	itett	lt
 800eab8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eabc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eac0:	1a9d      	sublt	r5, r3, r2
 800eac2:	2300      	movlt	r3, #0
 800eac4:	e741      	b.n	800e94a <_dtoa_r+0x742>
 800eac6:	9e08      	ldr	r6, [sp, #32]
 800eac8:	9d05      	ldr	r5, [sp, #20]
 800eaca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eacc:	e748      	b.n	800e960 <_dtoa_r+0x758>
 800eace:	9a08      	ldr	r2, [sp, #32]
 800ead0:	e770      	b.n	800e9b4 <_dtoa_r+0x7ac>
 800ead2:	9b07      	ldr	r3, [sp, #28]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	dc19      	bgt.n	800eb0c <_dtoa_r+0x904>
 800ead8:	9b02      	ldr	r3, [sp, #8]
 800eada:	b9bb      	cbnz	r3, 800eb0c <_dtoa_r+0x904>
 800eadc:	9b03      	ldr	r3, [sp, #12]
 800eade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eae2:	b99b      	cbnz	r3, 800eb0c <_dtoa_r+0x904>
 800eae4:	9b03      	ldr	r3, [sp, #12]
 800eae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaea:	0d1b      	lsrs	r3, r3, #20
 800eaec:	051b      	lsls	r3, r3, #20
 800eaee:	b183      	cbz	r3, 800eb12 <_dtoa_r+0x90a>
 800eaf0:	9b05      	ldr	r3, [sp, #20]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	9305      	str	r3, [sp, #20]
 800eaf6:	9b06      	ldr	r3, [sp, #24]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	9306      	str	r3, [sp, #24]
 800eafc:	f04f 0801 	mov.w	r8, #1
 800eb00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f47f af6f 	bne.w	800e9e6 <_dtoa_r+0x7de>
 800eb08:	2001      	movs	r0, #1
 800eb0a:	e774      	b.n	800e9f6 <_dtoa_r+0x7ee>
 800eb0c:	f04f 0800 	mov.w	r8, #0
 800eb10:	e7f6      	b.n	800eb00 <_dtoa_r+0x8f8>
 800eb12:	4698      	mov	r8, r3
 800eb14:	e7f4      	b.n	800eb00 <_dtoa_r+0x8f8>
 800eb16:	d082      	beq.n	800ea1e <_dtoa_r+0x816>
 800eb18:	9a05      	ldr	r2, [sp, #20]
 800eb1a:	331c      	adds	r3, #28
 800eb1c:	441a      	add	r2, r3
 800eb1e:	9205      	str	r2, [sp, #20]
 800eb20:	9a06      	ldr	r2, [sp, #24]
 800eb22:	441a      	add	r2, r3
 800eb24:	441d      	add	r5, r3
 800eb26:	9206      	str	r2, [sp, #24]
 800eb28:	e779      	b.n	800ea1e <_dtoa_r+0x816>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	e7f4      	b.n	800eb18 <_dtoa_r+0x910>
 800eb2e:	9b04      	ldr	r3, [sp, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	dc37      	bgt.n	800eba4 <_dtoa_r+0x99c>
 800eb34:	9b07      	ldr	r3, [sp, #28]
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	dd34      	ble.n	800eba4 <_dtoa_r+0x99c>
 800eb3a:	9b04      	ldr	r3, [sp, #16]
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	9b01      	ldr	r3, [sp, #4]
 800eb40:	b963      	cbnz	r3, 800eb5c <_dtoa_r+0x954>
 800eb42:	4631      	mov	r1, r6
 800eb44:	2205      	movs	r2, #5
 800eb46:	4620      	mov	r0, r4
 800eb48:	f001 f8a2 	bl	800fc90 <__multadd>
 800eb4c:	4601      	mov	r1, r0
 800eb4e:	4606      	mov	r6, r0
 800eb50:	4650      	mov	r0, sl
 800eb52:	f001 fab7 	bl	80100c4 <__mcmp>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	f73f adbb 	bgt.w	800e6d2 <_dtoa_r+0x4ca>
 800eb5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb5e:	9d00      	ldr	r5, [sp, #0]
 800eb60:	ea6f 0b03 	mvn.w	fp, r3
 800eb64:	f04f 0800 	mov.w	r8, #0
 800eb68:	4631      	mov	r1, r6
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f001 f86e 	bl	800fc4c <_Bfree>
 800eb70:	2f00      	cmp	r7, #0
 800eb72:	f43f aeab 	beq.w	800e8cc <_dtoa_r+0x6c4>
 800eb76:	f1b8 0f00 	cmp.w	r8, #0
 800eb7a:	d005      	beq.n	800eb88 <_dtoa_r+0x980>
 800eb7c:	45b8      	cmp	r8, r7
 800eb7e:	d003      	beq.n	800eb88 <_dtoa_r+0x980>
 800eb80:	4641      	mov	r1, r8
 800eb82:	4620      	mov	r0, r4
 800eb84:	f001 f862 	bl	800fc4c <_Bfree>
 800eb88:	4639      	mov	r1, r7
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f001 f85e 	bl	800fc4c <_Bfree>
 800eb90:	e69c      	b.n	800e8cc <_dtoa_r+0x6c4>
 800eb92:	2600      	movs	r6, #0
 800eb94:	4637      	mov	r7, r6
 800eb96:	e7e1      	b.n	800eb5c <_dtoa_r+0x954>
 800eb98:	46bb      	mov	fp, r7
 800eb9a:	4637      	mov	r7, r6
 800eb9c:	e599      	b.n	800e6d2 <_dtoa_r+0x4ca>
 800eb9e:	bf00      	nop
 800eba0:	40240000 	.word	0x40240000
 800eba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 80c8 	beq.w	800ed3c <_dtoa_r+0xb34>
 800ebac:	9b04      	ldr	r3, [sp, #16]
 800ebae:	9301      	str	r3, [sp, #4]
 800ebb0:	2d00      	cmp	r5, #0
 800ebb2:	dd05      	ble.n	800ebc0 <_dtoa_r+0x9b8>
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	462a      	mov	r2, r5
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f001 fa17 	bl	800ffec <__lshift>
 800ebbe:	4607      	mov	r7, r0
 800ebc0:	f1b8 0f00 	cmp.w	r8, #0
 800ebc4:	d05b      	beq.n	800ec7e <_dtoa_r+0xa76>
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f000 ffff 	bl	800fbcc <_Balloc>
 800ebce:	4605      	mov	r5, r0
 800ebd0:	b928      	cbnz	r0, 800ebde <_dtoa_r+0x9d6>
 800ebd2:	4b83      	ldr	r3, [pc, #524]	; (800ede0 <_dtoa_r+0xbd8>)
 800ebd4:	4602      	mov	r2, r0
 800ebd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ebda:	f7ff bb2e 	b.w	800e23a <_dtoa_r+0x32>
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	3202      	adds	r2, #2
 800ebe2:	0092      	lsls	r2, r2, #2
 800ebe4:	f107 010c 	add.w	r1, r7, #12
 800ebe8:	300c      	adds	r0, #12
 800ebea:	f7ff fa50 	bl	800e08e <memcpy>
 800ebee:	2201      	movs	r2, #1
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f001 f9fa 	bl	800ffec <__lshift>
 800ebf8:	9b00      	ldr	r3, [sp, #0]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	9304      	str	r3, [sp, #16]
 800ebfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec02:	4413      	add	r3, r2
 800ec04:	9308      	str	r3, [sp, #32]
 800ec06:	9b02      	ldr	r3, [sp, #8]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	46b8      	mov	r8, r7
 800ec0e:	9306      	str	r3, [sp, #24]
 800ec10:	4607      	mov	r7, r0
 800ec12:	9b04      	ldr	r3, [sp, #16]
 800ec14:	4631      	mov	r1, r6
 800ec16:	3b01      	subs	r3, #1
 800ec18:	4650      	mov	r0, sl
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	f7ff fa6c 	bl	800e0f8 <quorem>
 800ec20:	4641      	mov	r1, r8
 800ec22:	9002      	str	r0, [sp, #8]
 800ec24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ec28:	4650      	mov	r0, sl
 800ec2a:	f001 fa4b 	bl	80100c4 <__mcmp>
 800ec2e:	463a      	mov	r2, r7
 800ec30:	9005      	str	r0, [sp, #20]
 800ec32:	4631      	mov	r1, r6
 800ec34:	4620      	mov	r0, r4
 800ec36:	f001 fa61 	bl	80100fc <__mdiff>
 800ec3a:	68c2      	ldr	r2, [r0, #12]
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	bb02      	cbnz	r2, 800ec82 <_dtoa_r+0xa7a>
 800ec40:	4601      	mov	r1, r0
 800ec42:	4650      	mov	r0, sl
 800ec44:	f001 fa3e 	bl	80100c4 <__mcmp>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec50:	f000 fffc 	bl	800fc4c <_Bfree>
 800ec54:	9b07      	ldr	r3, [sp, #28]
 800ec56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec58:	9d04      	ldr	r5, [sp, #16]
 800ec5a:	ea43 0102 	orr.w	r1, r3, r2
 800ec5e:	9b06      	ldr	r3, [sp, #24]
 800ec60:	4319      	orrs	r1, r3
 800ec62:	d110      	bne.n	800ec86 <_dtoa_r+0xa7e>
 800ec64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ec68:	d029      	beq.n	800ecbe <_dtoa_r+0xab6>
 800ec6a:	9b05      	ldr	r3, [sp, #20]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	dd02      	ble.n	800ec76 <_dtoa_r+0xa6e>
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ec76:	9b01      	ldr	r3, [sp, #4]
 800ec78:	f883 9000 	strb.w	r9, [r3]
 800ec7c:	e774      	b.n	800eb68 <_dtoa_r+0x960>
 800ec7e:	4638      	mov	r0, r7
 800ec80:	e7ba      	b.n	800ebf8 <_dtoa_r+0x9f0>
 800ec82:	2201      	movs	r2, #1
 800ec84:	e7e1      	b.n	800ec4a <_dtoa_r+0xa42>
 800ec86:	9b05      	ldr	r3, [sp, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	db04      	blt.n	800ec96 <_dtoa_r+0xa8e>
 800ec8c:	9907      	ldr	r1, [sp, #28]
 800ec8e:	430b      	orrs	r3, r1
 800ec90:	9906      	ldr	r1, [sp, #24]
 800ec92:	430b      	orrs	r3, r1
 800ec94:	d120      	bne.n	800ecd8 <_dtoa_r+0xad0>
 800ec96:	2a00      	cmp	r2, #0
 800ec98:	dded      	ble.n	800ec76 <_dtoa_r+0xa6e>
 800ec9a:	4651      	mov	r1, sl
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f001 f9a4 	bl	800ffec <__lshift>
 800eca4:	4631      	mov	r1, r6
 800eca6:	4682      	mov	sl, r0
 800eca8:	f001 fa0c 	bl	80100c4 <__mcmp>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	dc03      	bgt.n	800ecb8 <_dtoa_r+0xab0>
 800ecb0:	d1e1      	bne.n	800ec76 <_dtoa_r+0xa6e>
 800ecb2:	f019 0f01 	tst.w	r9, #1
 800ecb6:	d0de      	beq.n	800ec76 <_dtoa_r+0xa6e>
 800ecb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ecbc:	d1d8      	bne.n	800ec70 <_dtoa_r+0xa68>
 800ecbe:	9a01      	ldr	r2, [sp, #4]
 800ecc0:	2339      	movs	r3, #57	; 0x39
 800ecc2:	7013      	strb	r3, [r2, #0]
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	461d      	mov	r5, r3
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ecce:	2a39      	cmp	r2, #57	; 0x39
 800ecd0:	d06c      	beq.n	800edac <_dtoa_r+0xba4>
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	701a      	strb	r2, [r3, #0]
 800ecd6:	e747      	b.n	800eb68 <_dtoa_r+0x960>
 800ecd8:	2a00      	cmp	r2, #0
 800ecda:	dd07      	ble.n	800ecec <_dtoa_r+0xae4>
 800ecdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ece0:	d0ed      	beq.n	800ecbe <_dtoa_r+0xab6>
 800ece2:	9a01      	ldr	r2, [sp, #4]
 800ece4:	f109 0301 	add.w	r3, r9, #1
 800ece8:	7013      	strb	r3, [r2, #0]
 800ecea:	e73d      	b.n	800eb68 <_dtoa_r+0x960>
 800ecec:	9b04      	ldr	r3, [sp, #16]
 800ecee:	9a08      	ldr	r2, [sp, #32]
 800ecf0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d043      	beq.n	800ed80 <_dtoa_r+0xb78>
 800ecf8:	4651      	mov	r1, sl
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	220a      	movs	r2, #10
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f000 ffc6 	bl	800fc90 <__multadd>
 800ed04:	45b8      	cmp	r8, r7
 800ed06:	4682      	mov	sl, r0
 800ed08:	f04f 0300 	mov.w	r3, #0
 800ed0c:	f04f 020a 	mov.w	r2, #10
 800ed10:	4641      	mov	r1, r8
 800ed12:	4620      	mov	r0, r4
 800ed14:	d107      	bne.n	800ed26 <_dtoa_r+0xb1e>
 800ed16:	f000 ffbb 	bl	800fc90 <__multadd>
 800ed1a:	4680      	mov	r8, r0
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	3301      	adds	r3, #1
 800ed22:	9304      	str	r3, [sp, #16]
 800ed24:	e775      	b.n	800ec12 <_dtoa_r+0xa0a>
 800ed26:	f000 ffb3 	bl	800fc90 <__multadd>
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	4680      	mov	r8, r0
 800ed2e:	2300      	movs	r3, #0
 800ed30:	220a      	movs	r2, #10
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 ffac 	bl	800fc90 <__multadd>
 800ed38:	4607      	mov	r7, r0
 800ed3a:	e7f0      	b.n	800ed1e <_dtoa_r+0xb16>
 800ed3c:	9b04      	ldr	r3, [sp, #16]
 800ed3e:	9301      	str	r3, [sp, #4]
 800ed40:	9d00      	ldr	r5, [sp, #0]
 800ed42:	4631      	mov	r1, r6
 800ed44:	4650      	mov	r0, sl
 800ed46:	f7ff f9d7 	bl	800e0f8 <quorem>
 800ed4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ed4e:	9b00      	ldr	r3, [sp, #0]
 800ed50:	f805 9b01 	strb.w	r9, [r5], #1
 800ed54:	1aea      	subs	r2, r5, r3
 800ed56:	9b01      	ldr	r3, [sp, #4]
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	dd07      	ble.n	800ed6c <_dtoa_r+0xb64>
 800ed5c:	4651      	mov	r1, sl
 800ed5e:	2300      	movs	r3, #0
 800ed60:	220a      	movs	r2, #10
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 ff94 	bl	800fc90 <__multadd>
 800ed68:	4682      	mov	sl, r0
 800ed6a:	e7ea      	b.n	800ed42 <_dtoa_r+0xb3a>
 800ed6c:	9b01      	ldr	r3, [sp, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	bfc8      	it	gt
 800ed72:	461d      	movgt	r5, r3
 800ed74:	9b00      	ldr	r3, [sp, #0]
 800ed76:	bfd8      	it	le
 800ed78:	2501      	movle	r5, #1
 800ed7a:	441d      	add	r5, r3
 800ed7c:	f04f 0800 	mov.w	r8, #0
 800ed80:	4651      	mov	r1, sl
 800ed82:	2201      	movs	r2, #1
 800ed84:	4620      	mov	r0, r4
 800ed86:	f001 f931 	bl	800ffec <__lshift>
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	f001 f999 	bl	80100c4 <__mcmp>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	dc96      	bgt.n	800ecc4 <_dtoa_r+0xabc>
 800ed96:	d102      	bne.n	800ed9e <_dtoa_r+0xb96>
 800ed98:	f019 0f01 	tst.w	r9, #1
 800ed9c:	d192      	bne.n	800ecc4 <_dtoa_r+0xabc>
 800ed9e:	462b      	mov	r3, r5
 800eda0:	461d      	mov	r5, r3
 800eda2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eda6:	2a30      	cmp	r2, #48	; 0x30
 800eda8:	d0fa      	beq.n	800eda0 <_dtoa_r+0xb98>
 800edaa:	e6dd      	b.n	800eb68 <_dtoa_r+0x960>
 800edac:	9a00      	ldr	r2, [sp, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d189      	bne.n	800ecc6 <_dtoa_r+0xabe>
 800edb2:	f10b 0b01 	add.w	fp, fp, #1
 800edb6:	2331      	movs	r3, #49	; 0x31
 800edb8:	e796      	b.n	800ece8 <_dtoa_r+0xae0>
 800edba:	4b0a      	ldr	r3, [pc, #40]	; (800ede4 <_dtoa_r+0xbdc>)
 800edbc:	f7ff ba99 	b.w	800e2f2 <_dtoa_r+0xea>
 800edc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	f47f aa6d 	bne.w	800e2a2 <_dtoa_r+0x9a>
 800edc8:	4b07      	ldr	r3, [pc, #28]	; (800ede8 <_dtoa_r+0xbe0>)
 800edca:	f7ff ba92 	b.w	800e2f2 <_dtoa_r+0xea>
 800edce:	9b01      	ldr	r3, [sp, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	dcb5      	bgt.n	800ed40 <_dtoa_r+0xb38>
 800edd4:	9b07      	ldr	r3, [sp, #28]
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	f73f aeb1 	bgt.w	800eb3e <_dtoa_r+0x936>
 800eddc:	e7b0      	b.n	800ed40 <_dtoa_r+0xb38>
 800edde:	bf00      	nop
 800ede0:	08015cdb 	.word	0x08015cdb
 800ede4:	08015d13 	.word	0x08015d13
 800ede8:	08015c5f 	.word	0x08015c5f

0800edec <_free_r>:
 800edec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edee:	2900      	cmp	r1, #0
 800edf0:	d044      	beq.n	800ee7c <_free_r+0x90>
 800edf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edf6:	9001      	str	r0, [sp, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f1a1 0404 	sub.w	r4, r1, #4
 800edfe:	bfb8      	it	lt
 800ee00:	18e4      	addlt	r4, r4, r3
 800ee02:	f7fe fe2b 	bl	800da5c <__malloc_lock>
 800ee06:	4a1e      	ldr	r2, [pc, #120]	; (800ee80 <_free_r+0x94>)
 800ee08:	9801      	ldr	r0, [sp, #4]
 800ee0a:	6813      	ldr	r3, [r2, #0]
 800ee0c:	b933      	cbnz	r3, 800ee1c <_free_r+0x30>
 800ee0e:	6063      	str	r3, [r4, #4]
 800ee10:	6014      	str	r4, [r2, #0]
 800ee12:	b003      	add	sp, #12
 800ee14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee18:	f7fe be26 	b.w	800da68 <__malloc_unlock>
 800ee1c:	42a3      	cmp	r3, r4
 800ee1e:	d908      	bls.n	800ee32 <_free_r+0x46>
 800ee20:	6825      	ldr	r5, [r4, #0]
 800ee22:	1961      	adds	r1, r4, r5
 800ee24:	428b      	cmp	r3, r1
 800ee26:	bf01      	itttt	eq
 800ee28:	6819      	ldreq	r1, [r3, #0]
 800ee2a:	685b      	ldreq	r3, [r3, #4]
 800ee2c:	1949      	addeq	r1, r1, r5
 800ee2e:	6021      	streq	r1, [r4, #0]
 800ee30:	e7ed      	b.n	800ee0e <_free_r+0x22>
 800ee32:	461a      	mov	r2, r3
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	b10b      	cbz	r3, 800ee3c <_free_r+0x50>
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	d9fa      	bls.n	800ee32 <_free_r+0x46>
 800ee3c:	6811      	ldr	r1, [r2, #0]
 800ee3e:	1855      	adds	r5, r2, r1
 800ee40:	42a5      	cmp	r5, r4
 800ee42:	d10b      	bne.n	800ee5c <_free_r+0x70>
 800ee44:	6824      	ldr	r4, [r4, #0]
 800ee46:	4421      	add	r1, r4
 800ee48:	1854      	adds	r4, r2, r1
 800ee4a:	42a3      	cmp	r3, r4
 800ee4c:	6011      	str	r1, [r2, #0]
 800ee4e:	d1e0      	bne.n	800ee12 <_free_r+0x26>
 800ee50:	681c      	ldr	r4, [r3, #0]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	6053      	str	r3, [r2, #4]
 800ee56:	440c      	add	r4, r1
 800ee58:	6014      	str	r4, [r2, #0]
 800ee5a:	e7da      	b.n	800ee12 <_free_r+0x26>
 800ee5c:	d902      	bls.n	800ee64 <_free_r+0x78>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	6003      	str	r3, [r0, #0]
 800ee62:	e7d6      	b.n	800ee12 <_free_r+0x26>
 800ee64:	6825      	ldr	r5, [r4, #0]
 800ee66:	1961      	adds	r1, r4, r5
 800ee68:	428b      	cmp	r3, r1
 800ee6a:	bf04      	itt	eq
 800ee6c:	6819      	ldreq	r1, [r3, #0]
 800ee6e:	685b      	ldreq	r3, [r3, #4]
 800ee70:	6063      	str	r3, [r4, #4]
 800ee72:	bf04      	itt	eq
 800ee74:	1949      	addeq	r1, r1, r5
 800ee76:	6021      	streq	r1, [r4, #0]
 800ee78:	6054      	str	r4, [r2, #4]
 800ee7a:	e7ca      	b.n	800ee12 <_free_r+0x26>
 800ee7c:	b003      	add	sp, #12
 800ee7e:	bd30      	pop	{r4, r5, pc}
 800ee80:	20009d90 	.word	0x20009d90

0800ee84 <__ssputs_r>:
 800ee84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee88:	688e      	ldr	r6, [r1, #8]
 800ee8a:	461f      	mov	r7, r3
 800ee8c:	42be      	cmp	r6, r7
 800ee8e:	680b      	ldr	r3, [r1, #0]
 800ee90:	4682      	mov	sl, r0
 800ee92:	460c      	mov	r4, r1
 800ee94:	4690      	mov	r8, r2
 800ee96:	d82c      	bhi.n	800eef2 <__ssputs_r+0x6e>
 800ee98:	898a      	ldrh	r2, [r1, #12]
 800ee9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee9e:	d026      	beq.n	800eeee <__ssputs_r+0x6a>
 800eea0:	6965      	ldr	r5, [r4, #20]
 800eea2:	6909      	ldr	r1, [r1, #16]
 800eea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eea8:	eba3 0901 	sub.w	r9, r3, r1
 800eeac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eeb0:	1c7b      	adds	r3, r7, #1
 800eeb2:	444b      	add	r3, r9
 800eeb4:	106d      	asrs	r5, r5, #1
 800eeb6:	429d      	cmp	r5, r3
 800eeb8:	bf38      	it	cc
 800eeba:	461d      	movcc	r5, r3
 800eebc:	0553      	lsls	r3, r2, #21
 800eebe:	d527      	bpl.n	800ef10 <__ssputs_r+0x8c>
 800eec0:	4629      	mov	r1, r5
 800eec2:	f7fe fb87 	bl	800d5d4 <_malloc_r>
 800eec6:	4606      	mov	r6, r0
 800eec8:	b360      	cbz	r0, 800ef24 <__ssputs_r+0xa0>
 800eeca:	6921      	ldr	r1, [r4, #16]
 800eecc:	464a      	mov	r2, r9
 800eece:	f7ff f8de 	bl	800e08e <memcpy>
 800eed2:	89a3      	ldrh	r3, [r4, #12]
 800eed4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eedc:	81a3      	strh	r3, [r4, #12]
 800eede:	6126      	str	r6, [r4, #16]
 800eee0:	6165      	str	r5, [r4, #20]
 800eee2:	444e      	add	r6, r9
 800eee4:	eba5 0509 	sub.w	r5, r5, r9
 800eee8:	6026      	str	r6, [r4, #0]
 800eeea:	60a5      	str	r5, [r4, #8]
 800eeec:	463e      	mov	r6, r7
 800eeee:	42be      	cmp	r6, r7
 800eef0:	d900      	bls.n	800eef4 <__ssputs_r+0x70>
 800eef2:	463e      	mov	r6, r7
 800eef4:	6820      	ldr	r0, [r4, #0]
 800eef6:	4632      	mov	r2, r6
 800eef8:	4641      	mov	r1, r8
 800eefa:	f001 fbcb 	bl	8010694 <memmove>
 800eefe:	68a3      	ldr	r3, [r4, #8]
 800ef00:	1b9b      	subs	r3, r3, r6
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	4433      	add	r3, r6
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef10:	462a      	mov	r2, r5
 800ef12:	f001 fa23 	bl	801035c <_realloc_r>
 800ef16:	4606      	mov	r6, r0
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d1e0      	bne.n	800eede <__ssputs_r+0x5a>
 800ef1c:	6921      	ldr	r1, [r4, #16]
 800ef1e:	4650      	mov	r0, sl
 800ef20:	f7ff ff64 	bl	800edec <_free_r>
 800ef24:	230c      	movs	r3, #12
 800ef26:	f8ca 3000 	str.w	r3, [sl]
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef36:	e7e9      	b.n	800ef0c <__ssputs_r+0x88>

0800ef38 <_svfiprintf_r>:
 800ef38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef3c:	4698      	mov	r8, r3
 800ef3e:	898b      	ldrh	r3, [r1, #12]
 800ef40:	061b      	lsls	r3, r3, #24
 800ef42:	b09d      	sub	sp, #116	; 0x74
 800ef44:	4607      	mov	r7, r0
 800ef46:	460d      	mov	r5, r1
 800ef48:	4614      	mov	r4, r2
 800ef4a:	d50e      	bpl.n	800ef6a <_svfiprintf_r+0x32>
 800ef4c:	690b      	ldr	r3, [r1, #16]
 800ef4e:	b963      	cbnz	r3, 800ef6a <_svfiprintf_r+0x32>
 800ef50:	2140      	movs	r1, #64	; 0x40
 800ef52:	f7fe fb3f 	bl	800d5d4 <_malloc_r>
 800ef56:	6028      	str	r0, [r5, #0]
 800ef58:	6128      	str	r0, [r5, #16]
 800ef5a:	b920      	cbnz	r0, 800ef66 <_svfiprintf_r+0x2e>
 800ef5c:	230c      	movs	r3, #12
 800ef5e:	603b      	str	r3, [r7, #0]
 800ef60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef64:	e0d0      	b.n	800f108 <_svfiprintf_r+0x1d0>
 800ef66:	2340      	movs	r3, #64	; 0x40
 800ef68:	616b      	str	r3, [r5, #20]
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef6e:	2320      	movs	r3, #32
 800ef70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef78:	2330      	movs	r3, #48	; 0x30
 800ef7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f120 <_svfiprintf_r+0x1e8>
 800ef7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef82:	f04f 0901 	mov.w	r9, #1
 800ef86:	4623      	mov	r3, r4
 800ef88:	469a      	mov	sl, r3
 800ef8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef8e:	b10a      	cbz	r2, 800ef94 <_svfiprintf_r+0x5c>
 800ef90:	2a25      	cmp	r2, #37	; 0x25
 800ef92:	d1f9      	bne.n	800ef88 <_svfiprintf_r+0x50>
 800ef94:	ebba 0b04 	subs.w	fp, sl, r4
 800ef98:	d00b      	beq.n	800efb2 <_svfiprintf_r+0x7a>
 800ef9a:	465b      	mov	r3, fp
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	4629      	mov	r1, r5
 800efa0:	4638      	mov	r0, r7
 800efa2:	f7ff ff6f 	bl	800ee84 <__ssputs_r>
 800efa6:	3001      	adds	r0, #1
 800efa8:	f000 80a9 	beq.w	800f0fe <_svfiprintf_r+0x1c6>
 800efac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efae:	445a      	add	r2, fp
 800efb0:	9209      	str	r2, [sp, #36]	; 0x24
 800efb2:	f89a 3000 	ldrb.w	r3, [sl]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f000 80a1 	beq.w	800f0fe <_svfiprintf_r+0x1c6>
 800efbc:	2300      	movs	r3, #0
 800efbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc6:	f10a 0a01 	add.w	sl, sl, #1
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	9307      	str	r3, [sp, #28]
 800efce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd2:	931a      	str	r3, [sp, #104]	; 0x68
 800efd4:	4654      	mov	r4, sl
 800efd6:	2205      	movs	r2, #5
 800efd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efdc:	4850      	ldr	r0, [pc, #320]	; (800f120 <_svfiprintf_r+0x1e8>)
 800efde:	f7f1 f917 	bl	8000210 <memchr>
 800efe2:	9a04      	ldr	r2, [sp, #16]
 800efe4:	b9d8      	cbnz	r0, 800f01e <_svfiprintf_r+0xe6>
 800efe6:	06d0      	lsls	r0, r2, #27
 800efe8:	bf44      	itt	mi
 800efea:	2320      	movmi	r3, #32
 800efec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff0:	0711      	lsls	r1, r2, #28
 800eff2:	bf44      	itt	mi
 800eff4:	232b      	movmi	r3, #43	; 0x2b
 800eff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800effa:	f89a 3000 	ldrb.w	r3, [sl]
 800effe:	2b2a      	cmp	r3, #42	; 0x2a
 800f000:	d015      	beq.n	800f02e <_svfiprintf_r+0xf6>
 800f002:	9a07      	ldr	r2, [sp, #28]
 800f004:	4654      	mov	r4, sl
 800f006:	2000      	movs	r0, #0
 800f008:	f04f 0c0a 	mov.w	ip, #10
 800f00c:	4621      	mov	r1, r4
 800f00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f012:	3b30      	subs	r3, #48	; 0x30
 800f014:	2b09      	cmp	r3, #9
 800f016:	d94d      	bls.n	800f0b4 <_svfiprintf_r+0x17c>
 800f018:	b1b0      	cbz	r0, 800f048 <_svfiprintf_r+0x110>
 800f01a:	9207      	str	r2, [sp, #28]
 800f01c:	e014      	b.n	800f048 <_svfiprintf_r+0x110>
 800f01e:	eba0 0308 	sub.w	r3, r0, r8
 800f022:	fa09 f303 	lsl.w	r3, r9, r3
 800f026:	4313      	orrs	r3, r2
 800f028:	9304      	str	r3, [sp, #16]
 800f02a:	46a2      	mov	sl, r4
 800f02c:	e7d2      	b.n	800efd4 <_svfiprintf_r+0x9c>
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	1d19      	adds	r1, r3, #4
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	9103      	str	r1, [sp, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	bfbb      	ittet	lt
 800f03a:	425b      	neglt	r3, r3
 800f03c:	f042 0202 	orrlt.w	r2, r2, #2
 800f040:	9307      	strge	r3, [sp, #28]
 800f042:	9307      	strlt	r3, [sp, #28]
 800f044:	bfb8      	it	lt
 800f046:	9204      	strlt	r2, [sp, #16]
 800f048:	7823      	ldrb	r3, [r4, #0]
 800f04a:	2b2e      	cmp	r3, #46	; 0x2e
 800f04c:	d10c      	bne.n	800f068 <_svfiprintf_r+0x130>
 800f04e:	7863      	ldrb	r3, [r4, #1]
 800f050:	2b2a      	cmp	r3, #42	; 0x2a
 800f052:	d134      	bne.n	800f0be <_svfiprintf_r+0x186>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	1d1a      	adds	r2, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	9203      	str	r2, [sp, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfb8      	it	lt
 800f060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f064:	3402      	adds	r4, #2
 800f066:	9305      	str	r3, [sp, #20]
 800f068:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f130 <_svfiprintf_r+0x1f8>
 800f06c:	7821      	ldrb	r1, [r4, #0]
 800f06e:	2203      	movs	r2, #3
 800f070:	4650      	mov	r0, sl
 800f072:	f7f1 f8cd 	bl	8000210 <memchr>
 800f076:	b138      	cbz	r0, 800f088 <_svfiprintf_r+0x150>
 800f078:	9b04      	ldr	r3, [sp, #16]
 800f07a:	eba0 000a 	sub.w	r0, r0, sl
 800f07e:	2240      	movs	r2, #64	; 0x40
 800f080:	4082      	lsls	r2, r0
 800f082:	4313      	orrs	r3, r2
 800f084:	3401      	adds	r4, #1
 800f086:	9304      	str	r3, [sp, #16]
 800f088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f08c:	4825      	ldr	r0, [pc, #148]	; (800f124 <_svfiprintf_r+0x1ec>)
 800f08e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f092:	2206      	movs	r2, #6
 800f094:	f7f1 f8bc 	bl	8000210 <memchr>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d038      	beq.n	800f10e <_svfiprintf_r+0x1d6>
 800f09c:	4b22      	ldr	r3, [pc, #136]	; (800f128 <_svfiprintf_r+0x1f0>)
 800f09e:	bb1b      	cbnz	r3, 800f0e8 <_svfiprintf_r+0x1b0>
 800f0a0:	9b03      	ldr	r3, [sp, #12]
 800f0a2:	3307      	adds	r3, #7
 800f0a4:	f023 0307 	bic.w	r3, r3, #7
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	9303      	str	r3, [sp, #12]
 800f0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ae:	4433      	add	r3, r6
 800f0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b2:	e768      	b.n	800ef86 <_svfiprintf_r+0x4e>
 800f0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	e7a6      	b.n	800f00c <_svfiprintf_r+0xd4>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	3401      	adds	r4, #1
 800f0c2:	9305      	str	r3, [sp, #20]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	f04f 0c0a 	mov.w	ip, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0d0:	3a30      	subs	r2, #48	; 0x30
 800f0d2:	2a09      	cmp	r2, #9
 800f0d4:	d903      	bls.n	800f0de <_svfiprintf_r+0x1a6>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d0c6      	beq.n	800f068 <_svfiprintf_r+0x130>
 800f0da:	9105      	str	r1, [sp, #20]
 800f0dc:	e7c4      	b.n	800f068 <_svfiprintf_r+0x130>
 800f0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e7f0      	b.n	800f0ca <_svfiprintf_r+0x192>
 800f0e8:	ab03      	add	r3, sp, #12
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	462a      	mov	r2, r5
 800f0ee:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <_svfiprintf_r+0x1f4>)
 800f0f0:	a904      	add	r1, sp, #16
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	f7fe f808 	bl	800d108 <_printf_float>
 800f0f8:	1c42      	adds	r2, r0, #1
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	d1d6      	bne.n	800f0ac <_svfiprintf_r+0x174>
 800f0fe:	89ab      	ldrh	r3, [r5, #12]
 800f100:	065b      	lsls	r3, r3, #25
 800f102:	f53f af2d 	bmi.w	800ef60 <_svfiprintf_r+0x28>
 800f106:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f108:	b01d      	add	sp, #116	; 0x74
 800f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10e:	ab03      	add	r3, sp, #12
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	462a      	mov	r2, r5
 800f114:	4b05      	ldr	r3, [pc, #20]	; (800f12c <_svfiprintf_r+0x1f4>)
 800f116:	a904      	add	r1, sp, #16
 800f118:	4638      	mov	r0, r7
 800f11a:	f7fe fb49 	bl	800d7b0 <_printf_i>
 800f11e:	e7eb      	b.n	800f0f8 <_svfiprintf_r+0x1c0>
 800f120:	08015cec 	.word	0x08015cec
 800f124:	08015cf6 	.word	0x08015cf6
 800f128:	0800d109 	.word	0x0800d109
 800f12c:	0800ee85 	.word	0x0800ee85
 800f130:	08015cf2 	.word	0x08015cf2

0800f134 <_sungetc_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	1c4b      	adds	r3, r1, #1
 800f138:	4614      	mov	r4, r2
 800f13a:	d103      	bne.n	800f144 <_sungetc_r+0x10>
 800f13c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f140:	4628      	mov	r0, r5
 800f142:	bd38      	pop	{r3, r4, r5, pc}
 800f144:	8993      	ldrh	r3, [r2, #12]
 800f146:	f023 0320 	bic.w	r3, r3, #32
 800f14a:	8193      	strh	r3, [r2, #12]
 800f14c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f14e:	6852      	ldr	r2, [r2, #4]
 800f150:	b2cd      	uxtb	r5, r1
 800f152:	b18b      	cbz	r3, 800f178 <_sungetc_r+0x44>
 800f154:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f156:	4293      	cmp	r3, r2
 800f158:	dd08      	ble.n	800f16c <_sungetc_r+0x38>
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	1e5a      	subs	r2, r3, #1
 800f15e:	6022      	str	r2, [r4, #0]
 800f160:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f164:	6863      	ldr	r3, [r4, #4]
 800f166:	3301      	adds	r3, #1
 800f168:	6063      	str	r3, [r4, #4]
 800f16a:	e7e9      	b.n	800f140 <_sungetc_r+0xc>
 800f16c:	4621      	mov	r1, r4
 800f16e:	f001 f8bb 	bl	80102e8 <__submore>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0f1      	beq.n	800f15a <_sungetc_r+0x26>
 800f176:	e7e1      	b.n	800f13c <_sungetc_r+0x8>
 800f178:	6921      	ldr	r1, [r4, #16]
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	b151      	cbz	r1, 800f194 <_sungetc_r+0x60>
 800f17e:	4299      	cmp	r1, r3
 800f180:	d208      	bcs.n	800f194 <_sungetc_r+0x60>
 800f182:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f186:	42a9      	cmp	r1, r5
 800f188:	d104      	bne.n	800f194 <_sungetc_r+0x60>
 800f18a:	3b01      	subs	r3, #1
 800f18c:	3201      	adds	r2, #1
 800f18e:	6023      	str	r3, [r4, #0]
 800f190:	6062      	str	r2, [r4, #4]
 800f192:	e7d5      	b.n	800f140 <_sungetc_r+0xc>
 800f194:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f19c:	6363      	str	r3, [r4, #52]	; 0x34
 800f19e:	2303      	movs	r3, #3
 800f1a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1a2:	4623      	mov	r3, r4
 800f1a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	e7dc      	b.n	800f168 <_sungetc_r+0x34>

0800f1ae <__ssrefill_r>:
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f1b4:	b169      	cbz	r1, 800f1d2 <__ssrefill_r+0x24>
 800f1b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	d001      	beq.n	800f1c2 <__ssrefill_r+0x14>
 800f1be:	f7ff fe15 	bl	800edec <_free_r>
 800f1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1c4:	6063      	str	r3, [r4, #4]
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	6360      	str	r0, [r4, #52]	; 0x34
 800f1ca:	b113      	cbz	r3, 800f1d2 <__ssrefill_r+0x24>
 800f1cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	bd10      	pop	{r4, pc}
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6063      	str	r3, [r4, #4]
 800f1da:	89a3      	ldrh	r3, [r4, #12]
 800f1dc:	f043 0320 	orr.w	r3, r3, #32
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1e6:	e7f3      	b.n	800f1d0 <__ssrefill_r+0x22>

0800f1e8 <__ssvfiscanf_r>:
 800f1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f1f8:	49a6      	ldr	r1, [pc, #664]	; (800f494 <__ssvfiscanf_r+0x2ac>)
 800f1fa:	91a0      	str	r1, [sp, #640]	; 0x280
 800f1fc:	f10d 0804 	add.w	r8, sp, #4
 800f200:	49a5      	ldr	r1, [pc, #660]	; (800f498 <__ssvfiscanf_r+0x2b0>)
 800f202:	4fa6      	ldr	r7, [pc, #664]	; (800f49c <__ssvfiscanf_r+0x2b4>)
 800f204:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f4a0 <__ssvfiscanf_r+0x2b8>
 800f208:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f20c:	4606      	mov	r6, r0
 800f20e:	91a1      	str	r1, [sp, #644]	; 0x284
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	7813      	ldrb	r3, [r2, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 815a 	beq.w	800f4ce <__ssvfiscanf_r+0x2e6>
 800f21a:	5cf9      	ldrb	r1, [r7, r3]
 800f21c:	f011 0108 	ands.w	r1, r1, #8
 800f220:	f102 0501 	add.w	r5, r2, #1
 800f224:	d019      	beq.n	800f25a <__ssvfiscanf_r+0x72>
 800f226:	6863      	ldr	r3, [r4, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	dd0f      	ble.n	800f24c <__ssvfiscanf_r+0x64>
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	781a      	ldrb	r2, [r3, #0]
 800f230:	5cba      	ldrb	r2, [r7, r2]
 800f232:	0712      	lsls	r2, r2, #28
 800f234:	d401      	bmi.n	800f23a <__ssvfiscanf_r+0x52>
 800f236:	462a      	mov	r2, r5
 800f238:	e7eb      	b.n	800f212 <__ssvfiscanf_r+0x2a>
 800f23a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f23c:	3201      	adds	r2, #1
 800f23e:	9245      	str	r2, [sp, #276]	; 0x114
 800f240:	6862      	ldr	r2, [r4, #4]
 800f242:	3301      	adds	r3, #1
 800f244:	3a01      	subs	r2, #1
 800f246:	6062      	str	r2, [r4, #4]
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	e7ec      	b.n	800f226 <__ssvfiscanf_r+0x3e>
 800f24c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f24e:	4621      	mov	r1, r4
 800f250:	4630      	mov	r0, r6
 800f252:	4798      	blx	r3
 800f254:	2800      	cmp	r0, #0
 800f256:	d0e9      	beq.n	800f22c <__ssvfiscanf_r+0x44>
 800f258:	e7ed      	b.n	800f236 <__ssvfiscanf_r+0x4e>
 800f25a:	2b25      	cmp	r3, #37	; 0x25
 800f25c:	d012      	beq.n	800f284 <__ssvfiscanf_r+0x9c>
 800f25e:	469a      	mov	sl, r3
 800f260:	6863      	ldr	r3, [r4, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	f340 8091 	ble.w	800f38a <__ssvfiscanf_r+0x1a2>
 800f268:	6822      	ldr	r2, [r4, #0]
 800f26a:	7813      	ldrb	r3, [r2, #0]
 800f26c:	4553      	cmp	r3, sl
 800f26e:	f040 812e 	bne.w	800f4ce <__ssvfiscanf_r+0x2e6>
 800f272:	6863      	ldr	r3, [r4, #4]
 800f274:	3b01      	subs	r3, #1
 800f276:	6063      	str	r3, [r4, #4]
 800f278:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f27a:	3201      	adds	r2, #1
 800f27c:	3301      	adds	r3, #1
 800f27e:	6022      	str	r2, [r4, #0]
 800f280:	9345      	str	r3, [sp, #276]	; 0x114
 800f282:	e7d8      	b.n	800f236 <__ssvfiscanf_r+0x4e>
 800f284:	9141      	str	r1, [sp, #260]	; 0x104
 800f286:	9143      	str	r1, [sp, #268]	; 0x10c
 800f288:	7853      	ldrb	r3, [r2, #1]
 800f28a:	2b2a      	cmp	r3, #42	; 0x2a
 800f28c:	bf02      	ittt	eq
 800f28e:	2310      	moveq	r3, #16
 800f290:	1c95      	addeq	r5, r2, #2
 800f292:	9341      	streq	r3, [sp, #260]	; 0x104
 800f294:	220a      	movs	r2, #10
 800f296:	46aa      	mov	sl, r5
 800f298:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f29c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f2a0:	2b09      	cmp	r3, #9
 800f2a2:	d91c      	bls.n	800f2de <__ssvfiscanf_r+0xf6>
 800f2a4:	487e      	ldr	r0, [pc, #504]	; (800f4a0 <__ssvfiscanf_r+0x2b8>)
 800f2a6:	2203      	movs	r2, #3
 800f2a8:	f7f0 ffb2 	bl	8000210 <memchr>
 800f2ac:	b138      	cbz	r0, 800f2be <__ssvfiscanf_r+0xd6>
 800f2ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f2b0:	eba0 0009 	sub.w	r0, r0, r9
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	4083      	lsls	r3, r0
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	9341      	str	r3, [sp, #260]	; 0x104
 800f2bc:	4655      	mov	r5, sl
 800f2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f2c2:	2b78      	cmp	r3, #120	; 0x78
 800f2c4:	d806      	bhi.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f2c6:	2b57      	cmp	r3, #87	; 0x57
 800f2c8:	d810      	bhi.n	800f2ec <__ssvfiscanf_r+0x104>
 800f2ca:	2b25      	cmp	r3, #37	; 0x25
 800f2cc:	d0c7      	beq.n	800f25e <__ssvfiscanf_r+0x76>
 800f2ce:	d857      	bhi.n	800f380 <__ssvfiscanf_r+0x198>
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d065      	beq.n	800f3a0 <__ssvfiscanf_r+0x1b8>
 800f2d4:	2303      	movs	r3, #3
 800f2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2d8:	230a      	movs	r3, #10
 800f2da:	9342      	str	r3, [sp, #264]	; 0x108
 800f2dc:	e076      	b.n	800f3cc <__ssvfiscanf_r+0x1e4>
 800f2de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f2e0:	fb02 1103 	mla	r1, r2, r3, r1
 800f2e4:	3930      	subs	r1, #48	; 0x30
 800f2e6:	9143      	str	r1, [sp, #268]	; 0x10c
 800f2e8:	4655      	mov	r5, sl
 800f2ea:	e7d4      	b.n	800f296 <__ssvfiscanf_r+0xae>
 800f2ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f2f0:	2a20      	cmp	r2, #32
 800f2f2:	d8ef      	bhi.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f2f4:	a101      	add	r1, pc, #4	; (adr r1, 800f2fc <__ssvfiscanf_r+0x114>)
 800f2f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2fa:	bf00      	nop
 800f2fc:	0800f3af 	.word	0x0800f3af
 800f300:	0800f2d5 	.word	0x0800f2d5
 800f304:	0800f2d5 	.word	0x0800f2d5
 800f308:	0800f40d 	.word	0x0800f40d
 800f30c:	0800f2d5 	.word	0x0800f2d5
 800f310:	0800f2d5 	.word	0x0800f2d5
 800f314:	0800f2d5 	.word	0x0800f2d5
 800f318:	0800f2d5 	.word	0x0800f2d5
 800f31c:	0800f2d5 	.word	0x0800f2d5
 800f320:	0800f2d5 	.word	0x0800f2d5
 800f324:	0800f2d5 	.word	0x0800f2d5
 800f328:	0800f423 	.word	0x0800f423
 800f32c:	0800f409 	.word	0x0800f409
 800f330:	0800f387 	.word	0x0800f387
 800f334:	0800f387 	.word	0x0800f387
 800f338:	0800f387 	.word	0x0800f387
 800f33c:	0800f2d5 	.word	0x0800f2d5
 800f340:	0800f3c5 	.word	0x0800f3c5
 800f344:	0800f2d5 	.word	0x0800f2d5
 800f348:	0800f2d5 	.word	0x0800f2d5
 800f34c:	0800f2d5 	.word	0x0800f2d5
 800f350:	0800f2d5 	.word	0x0800f2d5
 800f354:	0800f433 	.word	0x0800f433
 800f358:	0800f401 	.word	0x0800f401
 800f35c:	0800f3a7 	.word	0x0800f3a7
 800f360:	0800f2d5 	.word	0x0800f2d5
 800f364:	0800f2d5 	.word	0x0800f2d5
 800f368:	0800f42f 	.word	0x0800f42f
 800f36c:	0800f2d5 	.word	0x0800f2d5
 800f370:	0800f409 	.word	0x0800f409
 800f374:	0800f2d5 	.word	0x0800f2d5
 800f378:	0800f2d5 	.word	0x0800f2d5
 800f37c:	0800f3af 	.word	0x0800f3af
 800f380:	3b45      	subs	r3, #69	; 0x45
 800f382:	2b02      	cmp	r3, #2
 800f384:	d8a6      	bhi.n	800f2d4 <__ssvfiscanf_r+0xec>
 800f386:	2305      	movs	r3, #5
 800f388:	e01f      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f38a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f38c:	4621      	mov	r1, r4
 800f38e:	4630      	mov	r0, r6
 800f390:	4798      	blx	r3
 800f392:	2800      	cmp	r0, #0
 800f394:	f43f af68 	beq.w	800f268 <__ssvfiscanf_r+0x80>
 800f398:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f39a:	2800      	cmp	r0, #0
 800f39c:	f040 808d 	bne.w	800f4ba <__ssvfiscanf_r+0x2d2>
 800f3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3a4:	e08f      	b.n	800f4c6 <__ssvfiscanf_r+0x2de>
 800f3a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3a8:	f042 0220 	orr.w	r2, r2, #32
 800f3ac:	9241      	str	r2, [sp, #260]	; 0x104
 800f3ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f3b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3b4:	9241      	str	r2, [sp, #260]	; 0x104
 800f3b6:	2210      	movs	r2, #16
 800f3b8:	2b6f      	cmp	r3, #111	; 0x6f
 800f3ba:	9242      	str	r2, [sp, #264]	; 0x108
 800f3bc:	bf34      	ite	cc
 800f3be:	2303      	movcc	r3, #3
 800f3c0:	2304      	movcs	r3, #4
 800f3c2:	e002      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	9342      	str	r3, [sp, #264]	; 0x108
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800f3cc:	6863      	ldr	r3, [r4, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	dd3d      	ble.n	800f44e <__ssvfiscanf_r+0x266>
 800f3d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f3d4:	0659      	lsls	r1, r3, #25
 800f3d6:	d404      	bmi.n	800f3e2 <__ssvfiscanf_r+0x1fa>
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	781a      	ldrb	r2, [r3, #0]
 800f3dc:	5cba      	ldrb	r2, [r7, r2]
 800f3de:	0712      	lsls	r2, r2, #28
 800f3e0:	d43c      	bmi.n	800f45c <__ssvfiscanf_r+0x274>
 800f3e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	dc4b      	bgt.n	800f480 <__ssvfiscanf_r+0x298>
 800f3e8:	466b      	mov	r3, sp
 800f3ea:	4622      	mov	r2, r4
 800f3ec:	a941      	add	r1, sp, #260	; 0x104
 800f3ee:	4630      	mov	r0, r6
 800f3f0:	f000 f9b6 	bl	800f760 <_scanf_chars>
 800f3f4:	2801      	cmp	r0, #1
 800f3f6:	d06a      	beq.n	800f4ce <__ssvfiscanf_r+0x2e6>
 800f3f8:	2802      	cmp	r0, #2
 800f3fa:	f47f af1c 	bne.w	800f236 <__ssvfiscanf_r+0x4e>
 800f3fe:	e7cb      	b.n	800f398 <__ssvfiscanf_r+0x1b0>
 800f400:	2308      	movs	r3, #8
 800f402:	9342      	str	r3, [sp, #264]	; 0x108
 800f404:	2304      	movs	r3, #4
 800f406:	e7e0      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f408:	220a      	movs	r2, #10
 800f40a:	e7d5      	b.n	800f3b8 <__ssvfiscanf_r+0x1d0>
 800f40c:	4629      	mov	r1, r5
 800f40e:	4640      	mov	r0, r8
 800f410:	f000 faf4 	bl	800f9fc <__sccl>
 800f414:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f41a:	9341      	str	r3, [sp, #260]	; 0x104
 800f41c:	4605      	mov	r5, r0
 800f41e:	2301      	movs	r3, #1
 800f420:	e7d3      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f422:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f428:	9341      	str	r3, [sp, #260]	; 0x104
 800f42a:	2300      	movs	r3, #0
 800f42c:	e7cd      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f42e:	2302      	movs	r3, #2
 800f430:	e7cb      	b.n	800f3ca <__ssvfiscanf_r+0x1e2>
 800f432:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f434:	06c3      	lsls	r3, r0, #27
 800f436:	f53f aefe 	bmi.w	800f236 <__ssvfiscanf_r+0x4e>
 800f43a:	9b00      	ldr	r3, [sp, #0]
 800f43c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f43e:	1d19      	adds	r1, r3, #4
 800f440:	9100      	str	r1, [sp, #0]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	07c0      	lsls	r0, r0, #31
 800f446:	bf4c      	ite	mi
 800f448:	801a      	strhmi	r2, [r3, #0]
 800f44a:	601a      	strpl	r2, [r3, #0]
 800f44c:	e6f3      	b.n	800f236 <__ssvfiscanf_r+0x4e>
 800f44e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f450:	4621      	mov	r1, r4
 800f452:	4630      	mov	r0, r6
 800f454:	4798      	blx	r3
 800f456:	2800      	cmp	r0, #0
 800f458:	d0bb      	beq.n	800f3d2 <__ssvfiscanf_r+0x1ea>
 800f45a:	e79d      	b.n	800f398 <__ssvfiscanf_r+0x1b0>
 800f45c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f45e:	3201      	adds	r2, #1
 800f460:	9245      	str	r2, [sp, #276]	; 0x114
 800f462:	6862      	ldr	r2, [r4, #4]
 800f464:	3a01      	subs	r2, #1
 800f466:	2a00      	cmp	r2, #0
 800f468:	6062      	str	r2, [r4, #4]
 800f46a:	dd02      	ble.n	800f472 <__ssvfiscanf_r+0x28a>
 800f46c:	3301      	adds	r3, #1
 800f46e:	6023      	str	r3, [r4, #0]
 800f470:	e7b2      	b.n	800f3d8 <__ssvfiscanf_r+0x1f0>
 800f472:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f474:	4621      	mov	r1, r4
 800f476:	4630      	mov	r0, r6
 800f478:	4798      	blx	r3
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0ac      	beq.n	800f3d8 <__ssvfiscanf_r+0x1f0>
 800f47e:	e78b      	b.n	800f398 <__ssvfiscanf_r+0x1b0>
 800f480:	2b04      	cmp	r3, #4
 800f482:	dc0f      	bgt.n	800f4a4 <__ssvfiscanf_r+0x2bc>
 800f484:	466b      	mov	r3, sp
 800f486:	4622      	mov	r2, r4
 800f488:	a941      	add	r1, sp, #260	; 0x104
 800f48a:	4630      	mov	r0, r6
 800f48c:	f000 f9c2 	bl	800f814 <_scanf_i>
 800f490:	e7b0      	b.n	800f3f4 <__ssvfiscanf_r+0x20c>
 800f492:	bf00      	nop
 800f494:	0800f135 	.word	0x0800f135
 800f498:	0800f1af 	.word	0x0800f1af
 800f49c:	08015b23 	.word	0x08015b23
 800f4a0:	08015cf2 	.word	0x08015cf2
 800f4a4:	4b0b      	ldr	r3, [pc, #44]	; (800f4d4 <__ssvfiscanf_r+0x2ec>)
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f43f aec5 	beq.w	800f236 <__ssvfiscanf_r+0x4e>
 800f4ac:	466b      	mov	r3, sp
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	a941      	add	r1, sp, #260	; 0x104
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	f3af 8000 	nop.w
 800f4b8:	e79c      	b.n	800f3f4 <__ssvfiscanf_r+0x20c>
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f4c0:	bf18      	it	ne
 800f4c2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800f4c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f4d0:	e7f9      	b.n	800f4c6 <__ssvfiscanf_r+0x2de>
 800f4d2:	bf00      	nop
 800f4d4:	00000000 	.word	0x00000000

0800f4d8 <__sfputc_r>:
 800f4d8:	6893      	ldr	r3, [r2, #8]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	b410      	push	{r4}
 800f4e0:	6093      	str	r3, [r2, #8]
 800f4e2:	da08      	bge.n	800f4f6 <__sfputc_r+0x1e>
 800f4e4:	6994      	ldr	r4, [r2, #24]
 800f4e6:	42a3      	cmp	r3, r4
 800f4e8:	db01      	blt.n	800f4ee <__sfputc_r+0x16>
 800f4ea:	290a      	cmp	r1, #10
 800f4ec:	d103      	bne.n	800f4f6 <__sfputc_r+0x1e>
 800f4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4f2:	f000 bfd7 	b.w	80104a4 <__swbuf_r>
 800f4f6:	6813      	ldr	r3, [r2, #0]
 800f4f8:	1c58      	adds	r0, r3, #1
 800f4fa:	6010      	str	r0, [r2, #0]
 800f4fc:	7019      	strb	r1, [r3, #0]
 800f4fe:	4608      	mov	r0, r1
 800f500:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <__sfputs_r>:
 800f506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f508:	4606      	mov	r6, r0
 800f50a:	460f      	mov	r7, r1
 800f50c:	4614      	mov	r4, r2
 800f50e:	18d5      	adds	r5, r2, r3
 800f510:	42ac      	cmp	r4, r5
 800f512:	d101      	bne.n	800f518 <__sfputs_r+0x12>
 800f514:	2000      	movs	r0, #0
 800f516:	e007      	b.n	800f528 <__sfputs_r+0x22>
 800f518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f51c:	463a      	mov	r2, r7
 800f51e:	4630      	mov	r0, r6
 800f520:	f7ff ffda 	bl	800f4d8 <__sfputc_r>
 800f524:	1c43      	adds	r3, r0, #1
 800f526:	d1f3      	bne.n	800f510 <__sfputs_r+0xa>
 800f528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f52c <_vfiprintf_r>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	460d      	mov	r5, r1
 800f532:	b09d      	sub	sp, #116	; 0x74
 800f534:	4614      	mov	r4, r2
 800f536:	4698      	mov	r8, r3
 800f538:	4606      	mov	r6, r0
 800f53a:	b118      	cbz	r0, 800f544 <_vfiprintf_r+0x18>
 800f53c:	6a03      	ldr	r3, [r0, #32]
 800f53e:	b90b      	cbnz	r3, 800f544 <_vfiprintf_r+0x18>
 800f540:	f7fe fbb6 	bl	800dcb0 <__sinit>
 800f544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f546:	07d9      	lsls	r1, r3, #31
 800f548:	d405      	bmi.n	800f556 <_vfiprintf_r+0x2a>
 800f54a:	89ab      	ldrh	r3, [r5, #12]
 800f54c:	059a      	lsls	r2, r3, #22
 800f54e:	d402      	bmi.n	800f556 <_vfiprintf_r+0x2a>
 800f550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f552:	f7fe fd9a 	bl	800e08a <__retarget_lock_acquire_recursive>
 800f556:	89ab      	ldrh	r3, [r5, #12]
 800f558:	071b      	lsls	r3, r3, #28
 800f55a:	d501      	bpl.n	800f560 <_vfiprintf_r+0x34>
 800f55c:	692b      	ldr	r3, [r5, #16]
 800f55e:	b99b      	cbnz	r3, 800f588 <_vfiprintf_r+0x5c>
 800f560:	4629      	mov	r1, r5
 800f562:	4630      	mov	r0, r6
 800f564:	f000 ffdc 	bl	8010520 <__swsetup_r>
 800f568:	b170      	cbz	r0, 800f588 <_vfiprintf_r+0x5c>
 800f56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f56c:	07dc      	lsls	r4, r3, #31
 800f56e:	d504      	bpl.n	800f57a <_vfiprintf_r+0x4e>
 800f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f574:	b01d      	add	sp, #116	; 0x74
 800f576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	0598      	lsls	r0, r3, #22
 800f57e:	d4f7      	bmi.n	800f570 <_vfiprintf_r+0x44>
 800f580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f582:	f7fe fd83 	bl	800e08c <__retarget_lock_release_recursive>
 800f586:	e7f3      	b.n	800f570 <_vfiprintf_r+0x44>
 800f588:	2300      	movs	r3, #0
 800f58a:	9309      	str	r3, [sp, #36]	; 0x24
 800f58c:	2320      	movs	r3, #32
 800f58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f592:	f8cd 800c 	str.w	r8, [sp, #12]
 800f596:	2330      	movs	r3, #48	; 0x30
 800f598:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f74c <_vfiprintf_r+0x220>
 800f59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5a0:	f04f 0901 	mov.w	r9, #1
 800f5a4:	4623      	mov	r3, r4
 800f5a6:	469a      	mov	sl, r3
 800f5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ac:	b10a      	cbz	r2, 800f5b2 <_vfiprintf_r+0x86>
 800f5ae:	2a25      	cmp	r2, #37	; 0x25
 800f5b0:	d1f9      	bne.n	800f5a6 <_vfiprintf_r+0x7a>
 800f5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5b6:	d00b      	beq.n	800f5d0 <_vfiprintf_r+0xa4>
 800f5b8:	465b      	mov	r3, fp
 800f5ba:	4622      	mov	r2, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f7ff ffa1 	bl	800f506 <__sfputs_r>
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	f000 80a9 	beq.w	800f71c <_vfiprintf_r+0x1f0>
 800f5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5cc:	445a      	add	r2, fp
 800f5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f000 80a1 	beq.w	800f71c <_vfiprintf_r+0x1f0>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5e4:	f10a 0a01 	add.w	sl, sl, #1
 800f5e8:	9304      	str	r3, [sp, #16]
 800f5ea:	9307      	str	r3, [sp, #28]
 800f5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800f5f2:	4654      	mov	r4, sl
 800f5f4:	2205      	movs	r2, #5
 800f5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5fa:	4854      	ldr	r0, [pc, #336]	; (800f74c <_vfiprintf_r+0x220>)
 800f5fc:	f7f0 fe08 	bl	8000210 <memchr>
 800f600:	9a04      	ldr	r2, [sp, #16]
 800f602:	b9d8      	cbnz	r0, 800f63c <_vfiprintf_r+0x110>
 800f604:	06d1      	lsls	r1, r2, #27
 800f606:	bf44      	itt	mi
 800f608:	2320      	movmi	r3, #32
 800f60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f60e:	0713      	lsls	r3, r2, #28
 800f610:	bf44      	itt	mi
 800f612:	232b      	movmi	r3, #43	; 0x2b
 800f614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f618:	f89a 3000 	ldrb.w	r3, [sl]
 800f61c:	2b2a      	cmp	r3, #42	; 0x2a
 800f61e:	d015      	beq.n	800f64c <_vfiprintf_r+0x120>
 800f620:	9a07      	ldr	r2, [sp, #28]
 800f622:	4654      	mov	r4, sl
 800f624:	2000      	movs	r0, #0
 800f626:	f04f 0c0a 	mov.w	ip, #10
 800f62a:	4621      	mov	r1, r4
 800f62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f630:	3b30      	subs	r3, #48	; 0x30
 800f632:	2b09      	cmp	r3, #9
 800f634:	d94d      	bls.n	800f6d2 <_vfiprintf_r+0x1a6>
 800f636:	b1b0      	cbz	r0, 800f666 <_vfiprintf_r+0x13a>
 800f638:	9207      	str	r2, [sp, #28]
 800f63a:	e014      	b.n	800f666 <_vfiprintf_r+0x13a>
 800f63c:	eba0 0308 	sub.w	r3, r0, r8
 800f640:	fa09 f303 	lsl.w	r3, r9, r3
 800f644:	4313      	orrs	r3, r2
 800f646:	9304      	str	r3, [sp, #16]
 800f648:	46a2      	mov	sl, r4
 800f64a:	e7d2      	b.n	800f5f2 <_vfiprintf_r+0xc6>
 800f64c:	9b03      	ldr	r3, [sp, #12]
 800f64e:	1d19      	adds	r1, r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	9103      	str	r1, [sp, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	bfbb      	ittet	lt
 800f658:	425b      	neglt	r3, r3
 800f65a:	f042 0202 	orrlt.w	r2, r2, #2
 800f65e:	9307      	strge	r3, [sp, #28]
 800f660:	9307      	strlt	r3, [sp, #28]
 800f662:	bfb8      	it	lt
 800f664:	9204      	strlt	r2, [sp, #16]
 800f666:	7823      	ldrb	r3, [r4, #0]
 800f668:	2b2e      	cmp	r3, #46	; 0x2e
 800f66a:	d10c      	bne.n	800f686 <_vfiprintf_r+0x15a>
 800f66c:	7863      	ldrb	r3, [r4, #1]
 800f66e:	2b2a      	cmp	r3, #42	; 0x2a
 800f670:	d134      	bne.n	800f6dc <_vfiprintf_r+0x1b0>
 800f672:	9b03      	ldr	r3, [sp, #12]
 800f674:	1d1a      	adds	r2, r3, #4
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	9203      	str	r2, [sp, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	bfb8      	it	lt
 800f67e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f682:	3402      	adds	r4, #2
 800f684:	9305      	str	r3, [sp, #20]
 800f686:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f75c <_vfiprintf_r+0x230>
 800f68a:	7821      	ldrb	r1, [r4, #0]
 800f68c:	2203      	movs	r2, #3
 800f68e:	4650      	mov	r0, sl
 800f690:	f7f0 fdbe 	bl	8000210 <memchr>
 800f694:	b138      	cbz	r0, 800f6a6 <_vfiprintf_r+0x17a>
 800f696:	9b04      	ldr	r3, [sp, #16]
 800f698:	eba0 000a 	sub.w	r0, r0, sl
 800f69c:	2240      	movs	r2, #64	; 0x40
 800f69e:	4082      	lsls	r2, r0
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	3401      	adds	r4, #1
 800f6a4:	9304      	str	r3, [sp, #16]
 800f6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6aa:	4829      	ldr	r0, [pc, #164]	; (800f750 <_vfiprintf_r+0x224>)
 800f6ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6b0:	2206      	movs	r2, #6
 800f6b2:	f7f0 fdad 	bl	8000210 <memchr>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d03f      	beq.n	800f73a <_vfiprintf_r+0x20e>
 800f6ba:	4b26      	ldr	r3, [pc, #152]	; (800f754 <_vfiprintf_r+0x228>)
 800f6bc:	bb1b      	cbnz	r3, 800f706 <_vfiprintf_r+0x1da>
 800f6be:	9b03      	ldr	r3, [sp, #12]
 800f6c0:	3307      	adds	r3, #7
 800f6c2:	f023 0307 	bic.w	r3, r3, #7
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	9303      	str	r3, [sp, #12]
 800f6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6cc:	443b      	add	r3, r7
 800f6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d0:	e768      	b.n	800f5a4 <_vfiprintf_r+0x78>
 800f6d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	2001      	movs	r0, #1
 800f6da:	e7a6      	b.n	800f62a <_vfiprintf_r+0xfe>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	3401      	adds	r4, #1
 800f6e0:	9305      	str	r3, [sp, #20]
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	f04f 0c0a 	mov.w	ip, #10
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6ee:	3a30      	subs	r2, #48	; 0x30
 800f6f0:	2a09      	cmp	r2, #9
 800f6f2:	d903      	bls.n	800f6fc <_vfiprintf_r+0x1d0>
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d0c6      	beq.n	800f686 <_vfiprintf_r+0x15a>
 800f6f8:	9105      	str	r1, [sp, #20]
 800f6fa:	e7c4      	b.n	800f686 <_vfiprintf_r+0x15a>
 800f6fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f700:	4604      	mov	r4, r0
 800f702:	2301      	movs	r3, #1
 800f704:	e7f0      	b.n	800f6e8 <_vfiprintf_r+0x1bc>
 800f706:	ab03      	add	r3, sp, #12
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	462a      	mov	r2, r5
 800f70c:	4b12      	ldr	r3, [pc, #72]	; (800f758 <_vfiprintf_r+0x22c>)
 800f70e:	a904      	add	r1, sp, #16
 800f710:	4630      	mov	r0, r6
 800f712:	f7fd fcf9 	bl	800d108 <_printf_float>
 800f716:	4607      	mov	r7, r0
 800f718:	1c78      	adds	r0, r7, #1
 800f71a:	d1d6      	bne.n	800f6ca <_vfiprintf_r+0x19e>
 800f71c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f71e:	07d9      	lsls	r1, r3, #31
 800f720:	d405      	bmi.n	800f72e <_vfiprintf_r+0x202>
 800f722:	89ab      	ldrh	r3, [r5, #12]
 800f724:	059a      	lsls	r2, r3, #22
 800f726:	d402      	bmi.n	800f72e <_vfiprintf_r+0x202>
 800f728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f72a:	f7fe fcaf 	bl	800e08c <__retarget_lock_release_recursive>
 800f72e:	89ab      	ldrh	r3, [r5, #12]
 800f730:	065b      	lsls	r3, r3, #25
 800f732:	f53f af1d 	bmi.w	800f570 <_vfiprintf_r+0x44>
 800f736:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f738:	e71c      	b.n	800f574 <_vfiprintf_r+0x48>
 800f73a:	ab03      	add	r3, sp, #12
 800f73c:	9300      	str	r3, [sp, #0]
 800f73e:	462a      	mov	r2, r5
 800f740:	4b05      	ldr	r3, [pc, #20]	; (800f758 <_vfiprintf_r+0x22c>)
 800f742:	a904      	add	r1, sp, #16
 800f744:	4630      	mov	r0, r6
 800f746:	f7fe f833 	bl	800d7b0 <_printf_i>
 800f74a:	e7e4      	b.n	800f716 <_vfiprintf_r+0x1ea>
 800f74c:	08015cec 	.word	0x08015cec
 800f750:	08015cf6 	.word	0x08015cf6
 800f754:	0800d109 	.word	0x0800d109
 800f758:	0800f507 	.word	0x0800f507
 800f75c:	08015cf2 	.word	0x08015cf2

0800f760 <_scanf_chars>:
 800f760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f764:	4615      	mov	r5, r2
 800f766:	688a      	ldr	r2, [r1, #8]
 800f768:	4680      	mov	r8, r0
 800f76a:	460c      	mov	r4, r1
 800f76c:	b932      	cbnz	r2, 800f77c <_scanf_chars+0x1c>
 800f76e:	698a      	ldr	r2, [r1, #24]
 800f770:	2a00      	cmp	r2, #0
 800f772:	bf0c      	ite	eq
 800f774:	2201      	moveq	r2, #1
 800f776:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f77a:	608a      	str	r2, [r1, #8]
 800f77c:	6822      	ldr	r2, [r4, #0]
 800f77e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f810 <_scanf_chars+0xb0>
 800f782:	06d1      	lsls	r1, r2, #27
 800f784:	bf5f      	itttt	pl
 800f786:	681a      	ldrpl	r2, [r3, #0]
 800f788:	1d11      	addpl	r1, r2, #4
 800f78a:	6019      	strpl	r1, [r3, #0]
 800f78c:	6816      	ldrpl	r6, [r2, #0]
 800f78e:	2700      	movs	r7, #0
 800f790:	69a0      	ldr	r0, [r4, #24]
 800f792:	b188      	cbz	r0, 800f7b8 <_scanf_chars+0x58>
 800f794:	2801      	cmp	r0, #1
 800f796:	d107      	bne.n	800f7a8 <_scanf_chars+0x48>
 800f798:	682a      	ldr	r2, [r5, #0]
 800f79a:	7811      	ldrb	r1, [r2, #0]
 800f79c:	6962      	ldr	r2, [r4, #20]
 800f79e:	5c52      	ldrb	r2, [r2, r1]
 800f7a0:	b952      	cbnz	r2, 800f7b8 <_scanf_chars+0x58>
 800f7a2:	2f00      	cmp	r7, #0
 800f7a4:	d031      	beq.n	800f80a <_scanf_chars+0xaa>
 800f7a6:	e022      	b.n	800f7ee <_scanf_chars+0x8e>
 800f7a8:	2802      	cmp	r0, #2
 800f7aa:	d120      	bne.n	800f7ee <_scanf_chars+0x8e>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f7b4:	071b      	lsls	r3, r3, #28
 800f7b6:	d41a      	bmi.n	800f7ee <_scanf_chars+0x8e>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	06da      	lsls	r2, r3, #27
 800f7bc:	bf5e      	ittt	pl
 800f7be:	682b      	ldrpl	r3, [r5, #0]
 800f7c0:	781b      	ldrbpl	r3, [r3, #0]
 800f7c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f7c6:	682a      	ldr	r2, [r5, #0]
 800f7c8:	686b      	ldr	r3, [r5, #4]
 800f7ca:	3201      	adds	r2, #1
 800f7cc:	602a      	str	r2, [r5, #0]
 800f7ce:	68a2      	ldr	r2, [r4, #8]
 800f7d0:	3b01      	subs	r3, #1
 800f7d2:	3a01      	subs	r2, #1
 800f7d4:	606b      	str	r3, [r5, #4]
 800f7d6:	3701      	adds	r7, #1
 800f7d8:	60a2      	str	r2, [r4, #8]
 800f7da:	b142      	cbz	r2, 800f7ee <_scanf_chars+0x8e>
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	dcd7      	bgt.n	800f790 <_scanf_chars+0x30>
 800f7e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7e4:	4629      	mov	r1, r5
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	4798      	blx	r3
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	d0d0      	beq.n	800f790 <_scanf_chars+0x30>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	f013 0310 	ands.w	r3, r3, #16
 800f7f4:	d105      	bne.n	800f802 <_scanf_chars+0xa2>
 800f7f6:	68e2      	ldr	r2, [r4, #12]
 800f7f8:	3201      	adds	r2, #1
 800f7fa:	60e2      	str	r2, [r4, #12]
 800f7fc:	69a2      	ldr	r2, [r4, #24]
 800f7fe:	b102      	cbz	r2, 800f802 <_scanf_chars+0xa2>
 800f800:	7033      	strb	r3, [r6, #0]
 800f802:	6923      	ldr	r3, [r4, #16]
 800f804:	443b      	add	r3, r7
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	2000      	movs	r0, #0
 800f80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f80e:	bf00      	nop
 800f810:	08015b23 	.word	0x08015b23

0800f814 <_scanf_i>:
 800f814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f818:	4698      	mov	r8, r3
 800f81a:	4b74      	ldr	r3, [pc, #464]	; (800f9ec <_scanf_i+0x1d8>)
 800f81c:	460c      	mov	r4, r1
 800f81e:	4682      	mov	sl, r0
 800f820:	4616      	mov	r6, r2
 800f822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f826:	b087      	sub	sp, #28
 800f828:	ab03      	add	r3, sp, #12
 800f82a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f82e:	4b70      	ldr	r3, [pc, #448]	; (800f9f0 <_scanf_i+0x1dc>)
 800f830:	69a1      	ldr	r1, [r4, #24]
 800f832:	4a70      	ldr	r2, [pc, #448]	; (800f9f4 <_scanf_i+0x1e0>)
 800f834:	2903      	cmp	r1, #3
 800f836:	bf18      	it	ne
 800f838:	461a      	movne	r2, r3
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	9201      	str	r2, [sp, #4]
 800f83e:	1e5a      	subs	r2, r3, #1
 800f840:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f844:	bf88      	it	hi
 800f846:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f84a:	4627      	mov	r7, r4
 800f84c:	bf82      	ittt	hi
 800f84e:	eb03 0905 	addhi.w	r9, r3, r5
 800f852:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f856:	60a3      	strhi	r3, [r4, #8]
 800f858:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f85c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f860:	bf98      	it	ls
 800f862:	f04f 0900 	movls.w	r9, #0
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	463d      	mov	r5, r7
 800f86a:	f04f 0b00 	mov.w	fp, #0
 800f86e:	6831      	ldr	r1, [r6, #0]
 800f870:	ab03      	add	r3, sp, #12
 800f872:	7809      	ldrb	r1, [r1, #0]
 800f874:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f878:	2202      	movs	r2, #2
 800f87a:	f7f0 fcc9 	bl	8000210 <memchr>
 800f87e:	b328      	cbz	r0, 800f8cc <_scanf_i+0xb8>
 800f880:	f1bb 0f01 	cmp.w	fp, #1
 800f884:	d159      	bne.n	800f93a <_scanf_i+0x126>
 800f886:	6862      	ldr	r2, [r4, #4]
 800f888:	b92a      	cbnz	r2, 800f896 <_scanf_i+0x82>
 800f88a:	6822      	ldr	r2, [r4, #0]
 800f88c:	2308      	movs	r3, #8
 800f88e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f892:	6063      	str	r3, [r4, #4]
 800f894:	6022      	str	r2, [r4, #0]
 800f896:	6822      	ldr	r2, [r4, #0]
 800f898:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f89c:	6022      	str	r2, [r4, #0]
 800f89e:	68a2      	ldr	r2, [r4, #8]
 800f8a0:	1e51      	subs	r1, r2, #1
 800f8a2:	60a1      	str	r1, [r4, #8]
 800f8a4:	b192      	cbz	r2, 800f8cc <_scanf_i+0xb8>
 800f8a6:	6832      	ldr	r2, [r6, #0]
 800f8a8:	1c51      	adds	r1, r2, #1
 800f8aa:	6031      	str	r1, [r6, #0]
 800f8ac:	7812      	ldrb	r2, [r2, #0]
 800f8ae:	f805 2b01 	strb.w	r2, [r5], #1
 800f8b2:	6872      	ldr	r2, [r6, #4]
 800f8b4:	3a01      	subs	r2, #1
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	6072      	str	r2, [r6, #4]
 800f8ba:	dc07      	bgt.n	800f8cc <_scanf_i+0xb8>
 800f8bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f8c0:	4631      	mov	r1, r6
 800f8c2:	4650      	mov	r0, sl
 800f8c4:	4790      	blx	r2
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f040 8085 	bne.w	800f9d6 <_scanf_i+0x1c2>
 800f8cc:	f10b 0b01 	add.w	fp, fp, #1
 800f8d0:	f1bb 0f03 	cmp.w	fp, #3
 800f8d4:	d1cb      	bne.n	800f86e <_scanf_i+0x5a>
 800f8d6:	6863      	ldr	r3, [r4, #4]
 800f8d8:	b90b      	cbnz	r3, 800f8de <_scanf_i+0xca>
 800f8da:	230a      	movs	r3, #10
 800f8dc:	6063      	str	r3, [r4, #4]
 800f8de:	6863      	ldr	r3, [r4, #4]
 800f8e0:	4945      	ldr	r1, [pc, #276]	; (800f9f8 <_scanf_i+0x1e4>)
 800f8e2:	6960      	ldr	r0, [r4, #20]
 800f8e4:	1ac9      	subs	r1, r1, r3
 800f8e6:	f000 f889 	bl	800f9fc <__sccl>
 800f8ea:	f04f 0b00 	mov.w	fp, #0
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	6822      	ldr	r2, [r4, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d03d      	beq.n	800f972 <_scanf_i+0x15e>
 800f8f6:	6831      	ldr	r1, [r6, #0]
 800f8f8:	6960      	ldr	r0, [r4, #20]
 800f8fa:	f891 c000 	ldrb.w	ip, [r1]
 800f8fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f902:	2800      	cmp	r0, #0
 800f904:	d035      	beq.n	800f972 <_scanf_i+0x15e>
 800f906:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f90a:	d124      	bne.n	800f956 <_scanf_i+0x142>
 800f90c:	0510      	lsls	r0, r2, #20
 800f90e:	d522      	bpl.n	800f956 <_scanf_i+0x142>
 800f910:	f10b 0b01 	add.w	fp, fp, #1
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	d003      	beq.n	800f922 <_scanf_i+0x10e>
 800f91a:	3301      	adds	r3, #1
 800f91c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f920:	60a3      	str	r3, [r4, #8]
 800f922:	6873      	ldr	r3, [r6, #4]
 800f924:	3b01      	subs	r3, #1
 800f926:	2b00      	cmp	r3, #0
 800f928:	6073      	str	r3, [r6, #4]
 800f92a:	dd1b      	ble.n	800f964 <_scanf_i+0x150>
 800f92c:	6833      	ldr	r3, [r6, #0]
 800f92e:	3301      	adds	r3, #1
 800f930:	6033      	str	r3, [r6, #0]
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	3b01      	subs	r3, #1
 800f936:	60a3      	str	r3, [r4, #8]
 800f938:	e7d9      	b.n	800f8ee <_scanf_i+0xda>
 800f93a:	f1bb 0f02 	cmp.w	fp, #2
 800f93e:	d1ae      	bne.n	800f89e <_scanf_i+0x8a>
 800f940:	6822      	ldr	r2, [r4, #0]
 800f942:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f946:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f94a:	d1bf      	bne.n	800f8cc <_scanf_i+0xb8>
 800f94c:	2310      	movs	r3, #16
 800f94e:	6063      	str	r3, [r4, #4]
 800f950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f954:	e7a2      	b.n	800f89c <_scanf_i+0x88>
 800f956:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	780b      	ldrb	r3, [r1, #0]
 800f95e:	f805 3b01 	strb.w	r3, [r5], #1
 800f962:	e7de      	b.n	800f922 <_scanf_i+0x10e>
 800f964:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f968:	4631      	mov	r1, r6
 800f96a:	4650      	mov	r0, sl
 800f96c:	4798      	blx	r3
 800f96e:	2800      	cmp	r0, #0
 800f970:	d0df      	beq.n	800f932 <_scanf_i+0x11e>
 800f972:	6823      	ldr	r3, [r4, #0]
 800f974:	05d9      	lsls	r1, r3, #23
 800f976:	d50d      	bpl.n	800f994 <_scanf_i+0x180>
 800f978:	42bd      	cmp	r5, r7
 800f97a:	d909      	bls.n	800f990 <_scanf_i+0x17c>
 800f97c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f980:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f984:	4632      	mov	r2, r6
 800f986:	4650      	mov	r0, sl
 800f988:	4798      	blx	r3
 800f98a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f98e:	464d      	mov	r5, r9
 800f990:	42bd      	cmp	r5, r7
 800f992:	d028      	beq.n	800f9e6 <_scanf_i+0x1d2>
 800f994:	6822      	ldr	r2, [r4, #0]
 800f996:	f012 0210 	ands.w	r2, r2, #16
 800f99a:	d113      	bne.n	800f9c4 <_scanf_i+0x1b0>
 800f99c:	702a      	strb	r2, [r5, #0]
 800f99e:	6863      	ldr	r3, [r4, #4]
 800f9a0:	9e01      	ldr	r6, [sp, #4]
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4650      	mov	r0, sl
 800f9a6:	47b0      	blx	r6
 800f9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ac:	6821      	ldr	r1, [r4, #0]
 800f9ae:	1d1a      	adds	r2, r3, #4
 800f9b0:	f8c8 2000 	str.w	r2, [r8]
 800f9b4:	f011 0f20 	tst.w	r1, #32
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	d00f      	beq.n	800f9dc <_scanf_i+0x1c8>
 800f9bc:	6018      	str	r0, [r3, #0]
 800f9be:	68e3      	ldr	r3, [r4, #12]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	60e3      	str	r3, [r4, #12]
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	1bed      	subs	r5, r5, r7
 800f9c8:	445d      	add	r5, fp
 800f9ca:	442b      	add	r3, r5
 800f9cc:	6123      	str	r3, [r4, #16]
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	b007      	add	sp, #28
 800f9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9d6:	f04f 0b00 	mov.w	fp, #0
 800f9da:	e7ca      	b.n	800f972 <_scanf_i+0x15e>
 800f9dc:	07ca      	lsls	r2, r1, #31
 800f9de:	bf4c      	ite	mi
 800f9e0:	8018      	strhmi	r0, [r3, #0]
 800f9e2:	6018      	strpl	r0, [r3, #0]
 800f9e4:	e7eb      	b.n	800f9be <_scanf_i+0x1aa>
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	e7f2      	b.n	800f9d0 <_scanf_i+0x1bc>
 800f9ea:	bf00      	nop
 800f9ec:	08011988 	.word	0x08011988
 800f9f0:	080104a1 	.word	0x080104a1
 800f9f4:	0800dde5 	.word	0x0800dde5
 800f9f8:	08015d0d 	.word	0x08015d0d

0800f9fc <__sccl>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	780b      	ldrb	r3, [r1, #0]
 800fa00:	4604      	mov	r4, r0
 800fa02:	2b5e      	cmp	r3, #94	; 0x5e
 800fa04:	bf0b      	itete	eq
 800fa06:	784b      	ldrbeq	r3, [r1, #1]
 800fa08:	1c4a      	addne	r2, r1, #1
 800fa0a:	1c8a      	addeq	r2, r1, #2
 800fa0c:	2100      	movne	r1, #0
 800fa0e:	bf08      	it	eq
 800fa10:	2101      	moveq	r1, #1
 800fa12:	3801      	subs	r0, #1
 800fa14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fa18:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fa1c:	42a8      	cmp	r0, r5
 800fa1e:	d1fb      	bne.n	800fa18 <__sccl+0x1c>
 800fa20:	b90b      	cbnz	r3, 800fa26 <__sccl+0x2a>
 800fa22:	1e50      	subs	r0, r2, #1
 800fa24:	bd70      	pop	{r4, r5, r6, pc}
 800fa26:	f081 0101 	eor.w	r1, r1, #1
 800fa2a:	54e1      	strb	r1, [r4, r3]
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	4602      	mov	r2, r0
 800fa30:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fa34:	2d2d      	cmp	r5, #45	; 0x2d
 800fa36:	d005      	beq.n	800fa44 <__sccl+0x48>
 800fa38:	2d5d      	cmp	r5, #93	; 0x5d
 800fa3a:	d016      	beq.n	800fa6a <__sccl+0x6e>
 800fa3c:	2d00      	cmp	r5, #0
 800fa3e:	d0f1      	beq.n	800fa24 <__sccl+0x28>
 800fa40:	462b      	mov	r3, r5
 800fa42:	e7f2      	b.n	800fa2a <__sccl+0x2e>
 800fa44:	7846      	ldrb	r6, [r0, #1]
 800fa46:	2e5d      	cmp	r6, #93	; 0x5d
 800fa48:	d0fa      	beq.n	800fa40 <__sccl+0x44>
 800fa4a:	42b3      	cmp	r3, r6
 800fa4c:	dcf8      	bgt.n	800fa40 <__sccl+0x44>
 800fa4e:	3002      	adds	r0, #2
 800fa50:	461a      	mov	r2, r3
 800fa52:	3201      	adds	r2, #1
 800fa54:	4296      	cmp	r6, r2
 800fa56:	54a1      	strb	r1, [r4, r2]
 800fa58:	dcfb      	bgt.n	800fa52 <__sccl+0x56>
 800fa5a:	1af2      	subs	r2, r6, r3
 800fa5c:	3a01      	subs	r2, #1
 800fa5e:	1c5d      	adds	r5, r3, #1
 800fa60:	42b3      	cmp	r3, r6
 800fa62:	bfa8      	it	ge
 800fa64:	2200      	movge	r2, #0
 800fa66:	18ab      	adds	r3, r5, r2
 800fa68:	e7e1      	b.n	800fa2e <__sccl+0x32>
 800fa6a:	4610      	mov	r0, r2
 800fa6c:	e7da      	b.n	800fa24 <__sccl+0x28>
	...

0800fa70 <__sflush_r>:
 800fa70:	898a      	ldrh	r2, [r1, #12]
 800fa72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa76:	4605      	mov	r5, r0
 800fa78:	0710      	lsls	r0, r2, #28
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	d458      	bmi.n	800fb30 <__sflush_r+0xc0>
 800fa7e:	684b      	ldr	r3, [r1, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	dc05      	bgt.n	800fa90 <__sflush_r+0x20>
 800fa84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	dc02      	bgt.n	800fa90 <__sflush_r+0x20>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa92:	2e00      	cmp	r6, #0
 800fa94:	d0f9      	beq.n	800fa8a <__sflush_r+0x1a>
 800fa96:	2300      	movs	r3, #0
 800fa98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa9c:	682f      	ldr	r7, [r5, #0]
 800fa9e:	6a21      	ldr	r1, [r4, #32]
 800faa0:	602b      	str	r3, [r5, #0]
 800faa2:	d032      	beq.n	800fb0a <__sflush_r+0x9a>
 800faa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800faa6:	89a3      	ldrh	r3, [r4, #12]
 800faa8:	075a      	lsls	r2, r3, #29
 800faaa:	d505      	bpl.n	800fab8 <__sflush_r+0x48>
 800faac:	6863      	ldr	r3, [r4, #4]
 800faae:	1ac0      	subs	r0, r0, r3
 800fab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fab2:	b10b      	cbz	r3, 800fab8 <__sflush_r+0x48>
 800fab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fab6:	1ac0      	subs	r0, r0, r3
 800fab8:	2300      	movs	r3, #0
 800faba:	4602      	mov	r2, r0
 800fabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fabe:	6a21      	ldr	r1, [r4, #32]
 800fac0:	4628      	mov	r0, r5
 800fac2:	47b0      	blx	r6
 800fac4:	1c43      	adds	r3, r0, #1
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	d106      	bne.n	800fad8 <__sflush_r+0x68>
 800faca:	6829      	ldr	r1, [r5, #0]
 800facc:	291d      	cmp	r1, #29
 800face:	d82b      	bhi.n	800fb28 <__sflush_r+0xb8>
 800fad0:	4a29      	ldr	r2, [pc, #164]	; (800fb78 <__sflush_r+0x108>)
 800fad2:	410a      	asrs	r2, r1
 800fad4:	07d6      	lsls	r6, r2, #31
 800fad6:	d427      	bmi.n	800fb28 <__sflush_r+0xb8>
 800fad8:	2200      	movs	r2, #0
 800fada:	6062      	str	r2, [r4, #4]
 800fadc:	04d9      	lsls	r1, r3, #19
 800fade:	6922      	ldr	r2, [r4, #16]
 800fae0:	6022      	str	r2, [r4, #0]
 800fae2:	d504      	bpl.n	800faee <__sflush_r+0x7e>
 800fae4:	1c42      	adds	r2, r0, #1
 800fae6:	d101      	bne.n	800faec <__sflush_r+0x7c>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	b903      	cbnz	r3, 800faee <__sflush_r+0x7e>
 800faec:	6560      	str	r0, [r4, #84]	; 0x54
 800faee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faf0:	602f      	str	r7, [r5, #0]
 800faf2:	2900      	cmp	r1, #0
 800faf4:	d0c9      	beq.n	800fa8a <__sflush_r+0x1a>
 800faf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fafa:	4299      	cmp	r1, r3
 800fafc:	d002      	beq.n	800fb04 <__sflush_r+0x94>
 800fafe:	4628      	mov	r0, r5
 800fb00:	f7ff f974 	bl	800edec <_free_r>
 800fb04:	2000      	movs	r0, #0
 800fb06:	6360      	str	r0, [r4, #52]	; 0x34
 800fb08:	e7c0      	b.n	800fa8c <__sflush_r+0x1c>
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	47b0      	blx	r6
 800fb10:	1c41      	adds	r1, r0, #1
 800fb12:	d1c8      	bne.n	800faa6 <__sflush_r+0x36>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0c5      	beq.n	800faa6 <__sflush_r+0x36>
 800fb1a:	2b1d      	cmp	r3, #29
 800fb1c:	d001      	beq.n	800fb22 <__sflush_r+0xb2>
 800fb1e:	2b16      	cmp	r3, #22
 800fb20:	d101      	bne.n	800fb26 <__sflush_r+0xb6>
 800fb22:	602f      	str	r7, [r5, #0]
 800fb24:	e7b1      	b.n	800fa8a <__sflush_r+0x1a>
 800fb26:	89a3      	ldrh	r3, [r4, #12]
 800fb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb2c:	81a3      	strh	r3, [r4, #12]
 800fb2e:	e7ad      	b.n	800fa8c <__sflush_r+0x1c>
 800fb30:	690f      	ldr	r7, [r1, #16]
 800fb32:	2f00      	cmp	r7, #0
 800fb34:	d0a9      	beq.n	800fa8a <__sflush_r+0x1a>
 800fb36:	0793      	lsls	r3, r2, #30
 800fb38:	680e      	ldr	r6, [r1, #0]
 800fb3a:	bf08      	it	eq
 800fb3c:	694b      	ldreq	r3, [r1, #20]
 800fb3e:	600f      	str	r7, [r1, #0]
 800fb40:	bf18      	it	ne
 800fb42:	2300      	movne	r3, #0
 800fb44:	eba6 0807 	sub.w	r8, r6, r7
 800fb48:	608b      	str	r3, [r1, #8]
 800fb4a:	f1b8 0f00 	cmp.w	r8, #0
 800fb4e:	dd9c      	ble.n	800fa8a <__sflush_r+0x1a>
 800fb50:	6a21      	ldr	r1, [r4, #32]
 800fb52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb54:	4643      	mov	r3, r8
 800fb56:	463a      	mov	r2, r7
 800fb58:	4628      	mov	r0, r5
 800fb5a:	47b0      	blx	r6
 800fb5c:	2800      	cmp	r0, #0
 800fb5e:	dc06      	bgt.n	800fb6e <__sflush_r+0xfe>
 800fb60:	89a3      	ldrh	r3, [r4, #12]
 800fb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb66:	81a3      	strh	r3, [r4, #12]
 800fb68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb6c:	e78e      	b.n	800fa8c <__sflush_r+0x1c>
 800fb6e:	4407      	add	r7, r0
 800fb70:	eba8 0800 	sub.w	r8, r8, r0
 800fb74:	e7e9      	b.n	800fb4a <__sflush_r+0xda>
 800fb76:	bf00      	nop
 800fb78:	dfbffffe 	.word	0xdfbffffe

0800fb7c <_fflush_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	690b      	ldr	r3, [r1, #16]
 800fb80:	4605      	mov	r5, r0
 800fb82:	460c      	mov	r4, r1
 800fb84:	b913      	cbnz	r3, 800fb8c <_fflush_r+0x10>
 800fb86:	2500      	movs	r5, #0
 800fb88:	4628      	mov	r0, r5
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	b118      	cbz	r0, 800fb96 <_fflush_r+0x1a>
 800fb8e:	6a03      	ldr	r3, [r0, #32]
 800fb90:	b90b      	cbnz	r3, 800fb96 <_fflush_r+0x1a>
 800fb92:	f7fe f88d 	bl	800dcb0 <__sinit>
 800fb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d0f3      	beq.n	800fb86 <_fflush_r+0xa>
 800fb9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fba0:	07d0      	lsls	r0, r2, #31
 800fba2:	d404      	bmi.n	800fbae <_fflush_r+0x32>
 800fba4:	0599      	lsls	r1, r3, #22
 800fba6:	d402      	bmi.n	800fbae <_fflush_r+0x32>
 800fba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbaa:	f7fe fa6e 	bl	800e08a <__retarget_lock_acquire_recursive>
 800fbae:	4628      	mov	r0, r5
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	f7ff ff5d 	bl	800fa70 <__sflush_r>
 800fbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbb8:	07da      	lsls	r2, r3, #31
 800fbba:	4605      	mov	r5, r0
 800fbbc:	d4e4      	bmi.n	800fb88 <_fflush_r+0xc>
 800fbbe:	89a3      	ldrh	r3, [r4, #12]
 800fbc0:	059b      	lsls	r3, r3, #22
 800fbc2:	d4e1      	bmi.n	800fb88 <_fflush_r+0xc>
 800fbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbc6:	f7fe fa61 	bl	800e08c <__retarget_lock_release_recursive>
 800fbca:	e7dd      	b.n	800fb88 <_fflush_r+0xc>

0800fbcc <_Balloc>:
 800fbcc:	b570      	push	{r4, r5, r6, lr}
 800fbce:	69c6      	ldr	r6, [r0, #28]
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	b976      	cbnz	r6, 800fbf4 <_Balloc+0x28>
 800fbd6:	2010      	movs	r0, #16
 800fbd8:	f7fd fccc 	bl	800d574 <malloc>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	61e0      	str	r0, [r4, #28]
 800fbe0:	b920      	cbnz	r0, 800fbec <_Balloc+0x20>
 800fbe2:	4b18      	ldr	r3, [pc, #96]	; (800fc44 <_Balloc+0x78>)
 800fbe4:	4818      	ldr	r0, [pc, #96]	; (800fc48 <_Balloc+0x7c>)
 800fbe6:	216b      	movs	r1, #107	; 0x6b
 800fbe8:	f7fe fa68 	bl	800e0bc <__assert_func>
 800fbec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbf0:	6006      	str	r6, [r0, #0]
 800fbf2:	60c6      	str	r6, [r0, #12]
 800fbf4:	69e6      	ldr	r6, [r4, #28]
 800fbf6:	68f3      	ldr	r3, [r6, #12]
 800fbf8:	b183      	cbz	r3, 800fc1c <_Balloc+0x50>
 800fbfa:	69e3      	ldr	r3, [r4, #28]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fc02:	b9b8      	cbnz	r0, 800fc34 <_Balloc+0x68>
 800fc04:	2101      	movs	r1, #1
 800fc06:	fa01 f605 	lsl.w	r6, r1, r5
 800fc0a:	1d72      	adds	r2, r6, #5
 800fc0c:	0092      	lsls	r2, r2, #2
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f000 fd83 	bl	801071a <_calloc_r>
 800fc14:	b160      	cbz	r0, 800fc30 <_Balloc+0x64>
 800fc16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc1a:	e00e      	b.n	800fc3a <_Balloc+0x6e>
 800fc1c:	2221      	movs	r2, #33	; 0x21
 800fc1e:	2104      	movs	r1, #4
 800fc20:	4620      	mov	r0, r4
 800fc22:	f000 fd7a 	bl	801071a <_calloc_r>
 800fc26:	69e3      	ldr	r3, [r4, #28]
 800fc28:	60f0      	str	r0, [r6, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1e4      	bne.n	800fbfa <_Balloc+0x2e>
 800fc30:	2000      	movs	r0, #0
 800fc32:	bd70      	pop	{r4, r5, r6, pc}
 800fc34:	6802      	ldr	r2, [r0, #0]
 800fc36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc40:	e7f7      	b.n	800fc32 <_Balloc+0x66>
 800fc42:	bf00      	nop
 800fc44:	08015c6c 	.word	0x08015c6c
 800fc48:	08015d18 	.word	0x08015d18

0800fc4c <_Bfree>:
 800fc4c:	b570      	push	{r4, r5, r6, lr}
 800fc4e:	69c6      	ldr	r6, [r0, #28]
 800fc50:	4605      	mov	r5, r0
 800fc52:	460c      	mov	r4, r1
 800fc54:	b976      	cbnz	r6, 800fc74 <_Bfree+0x28>
 800fc56:	2010      	movs	r0, #16
 800fc58:	f7fd fc8c 	bl	800d574 <malloc>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	61e8      	str	r0, [r5, #28]
 800fc60:	b920      	cbnz	r0, 800fc6c <_Bfree+0x20>
 800fc62:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <_Bfree+0x3c>)
 800fc64:	4809      	ldr	r0, [pc, #36]	; (800fc8c <_Bfree+0x40>)
 800fc66:	218f      	movs	r1, #143	; 0x8f
 800fc68:	f7fe fa28 	bl	800e0bc <__assert_func>
 800fc6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc70:	6006      	str	r6, [r0, #0]
 800fc72:	60c6      	str	r6, [r0, #12]
 800fc74:	b13c      	cbz	r4, 800fc86 <_Bfree+0x3a>
 800fc76:	69eb      	ldr	r3, [r5, #28]
 800fc78:	6862      	ldr	r2, [r4, #4]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc80:	6021      	str	r1, [r4, #0]
 800fc82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc86:	bd70      	pop	{r4, r5, r6, pc}
 800fc88:	08015c6c 	.word	0x08015c6c
 800fc8c:	08015d18 	.word	0x08015d18

0800fc90 <__multadd>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	690d      	ldr	r5, [r1, #16]
 800fc96:	4607      	mov	r7, r0
 800fc98:	460c      	mov	r4, r1
 800fc9a:	461e      	mov	r6, r3
 800fc9c:	f101 0c14 	add.w	ip, r1, #20
 800fca0:	2000      	movs	r0, #0
 800fca2:	f8dc 3000 	ldr.w	r3, [ip]
 800fca6:	b299      	uxth	r1, r3
 800fca8:	fb02 6101 	mla	r1, r2, r1, r6
 800fcac:	0c1e      	lsrs	r6, r3, #16
 800fcae:	0c0b      	lsrs	r3, r1, #16
 800fcb0:	fb02 3306 	mla	r3, r2, r6, r3
 800fcb4:	b289      	uxth	r1, r1
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcbc:	4285      	cmp	r5, r0
 800fcbe:	f84c 1b04 	str.w	r1, [ip], #4
 800fcc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcc6:	dcec      	bgt.n	800fca2 <__multadd+0x12>
 800fcc8:	b30e      	cbz	r6, 800fd0e <__multadd+0x7e>
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	42ab      	cmp	r3, r5
 800fcce:	dc19      	bgt.n	800fd04 <__multadd+0x74>
 800fcd0:	6861      	ldr	r1, [r4, #4]
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	3101      	adds	r1, #1
 800fcd6:	f7ff ff79 	bl	800fbcc <_Balloc>
 800fcda:	4680      	mov	r8, r0
 800fcdc:	b928      	cbnz	r0, 800fcea <__multadd+0x5a>
 800fcde:	4602      	mov	r2, r0
 800fce0:	4b0c      	ldr	r3, [pc, #48]	; (800fd14 <__multadd+0x84>)
 800fce2:	480d      	ldr	r0, [pc, #52]	; (800fd18 <__multadd+0x88>)
 800fce4:	21ba      	movs	r1, #186	; 0xba
 800fce6:	f7fe f9e9 	bl	800e0bc <__assert_func>
 800fcea:	6922      	ldr	r2, [r4, #16]
 800fcec:	3202      	adds	r2, #2
 800fcee:	f104 010c 	add.w	r1, r4, #12
 800fcf2:	0092      	lsls	r2, r2, #2
 800fcf4:	300c      	adds	r0, #12
 800fcf6:	f7fe f9ca 	bl	800e08e <memcpy>
 800fcfa:	4621      	mov	r1, r4
 800fcfc:	4638      	mov	r0, r7
 800fcfe:	f7ff ffa5 	bl	800fc4c <_Bfree>
 800fd02:	4644      	mov	r4, r8
 800fd04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd08:	3501      	adds	r5, #1
 800fd0a:	615e      	str	r6, [r3, #20]
 800fd0c:	6125      	str	r5, [r4, #16]
 800fd0e:	4620      	mov	r0, r4
 800fd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd14:	08015cdb 	.word	0x08015cdb
 800fd18:	08015d18 	.word	0x08015d18

0800fd1c <__hi0bits>:
 800fd1c:	0c03      	lsrs	r3, r0, #16
 800fd1e:	041b      	lsls	r3, r3, #16
 800fd20:	b9d3      	cbnz	r3, 800fd58 <__hi0bits+0x3c>
 800fd22:	0400      	lsls	r0, r0, #16
 800fd24:	2310      	movs	r3, #16
 800fd26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd2a:	bf04      	itt	eq
 800fd2c:	0200      	lsleq	r0, r0, #8
 800fd2e:	3308      	addeq	r3, #8
 800fd30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd34:	bf04      	itt	eq
 800fd36:	0100      	lsleq	r0, r0, #4
 800fd38:	3304      	addeq	r3, #4
 800fd3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd3e:	bf04      	itt	eq
 800fd40:	0080      	lsleq	r0, r0, #2
 800fd42:	3302      	addeq	r3, #2
 800fd44:	2800      	cmp	r0, #0
 800fd46:	db05      	blt.n	800fd54 <__hi0bits+0x38>
 800fd48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd4c:	f103 0301 	add.w	r3, r3, #1
 800fd50:	bf08      	it	eq
 800fd52:	2320      	moveq	r3, #32
 800fd54:	4618      	mov	r0, r3
 800fd56:	4770      	bx	lr
 800fd58:	2300      	movs	r3, #0
 800fd5a:	e7e4      	b.n	800fd26 <__hi0bits+0xa>

0800fd5c <__lo0bits>:
 800fd5c:	6803      	ldr	r3, [r0, #0]
 800fd5e:	f013 0207 	ands.w	r2, r3, #7
 800fd62:	d00c      	beq.n	800fd7e <__lo0bits+0x22>
 800fd64:	07d9      	lsls	r1, r3, #31
 800fd66:	d422      	bmi.n	800fdae <__lo0bits+0x52>
 800fd68:	079a      	lsls	r2, r3, #30
 800fd6a:	bf49      	itett	mi
 800fd6c:	085b      	lsrmi	r3, r3, #1
 800fd6e:	089b      	lsrpl	r3, r3, #2
 800fd70:	6003      	strmi	r3, [r0, #0]
 800fd72:	2201      	movmi	r2, #1
 800fd74:	bf5c      	itt	pl
 800fd76:	6003      	strpl	r3, [r0, #0]
 800fd78:	2202      	movpl	r2, #2
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	4770      	bx	lr
 800fd7e:	b299      	uxth	r1, r3
 800fd80:	b909      	cbnz	r1, 800fd86 <__lo0bits+0x2a>
 800fd82:	0c1b      	lsrs	r3, r3, #16
 800fd84:	2210      	movs	r2, #16
 800fd86:	b2d9      	uxtb	r1, r3
 800fd88:	b909      	cbnz	r1, 800fd8e <__lo0bits+0x32>
 800fd8a:	3208      	adds	r2, #8
 800fd8c:	0a1b      	lsrs	r3, r3, #8
 800fd8e:	0719      	lsls	r1, r3, #28
 800fd90:	bf04      	itt	eq
 800fd92:	091b      	lsreq	r3, r3, #4
 800fd94:	3204      	addeq	r2, #4
 800fd96:	0799      	lsls	r1, r3, #30
 800fd98:	bf04      	itt	eq
 800fd9a:	089b      	lsreq	r3, r3, #2
 800fd9c:	3202      	addeq	r2, #2
 800fd9e:	07d9      	lsls	r1, r3, #31
 800fda0:	d403      	bmi.n	800fdaa <__lo0bits+0x4e>
 800fda2:	085b      	lsrs	r3, r3, #1
 800fda4:	f102 0201 	add.w	r2, r2, #1
 800fda8:	d003      	beq.n	800fdb2 <__lo0bits+0x56>
 800fdaa:	6003      	str	r3, [r0, #0]
 800fdac:	e7e5      	b.n	800fd7a <__lo0bits+0x1e>
 800fdae:	2200      	movs	r2, #0
 800fdb0:	e7e3      	b.n	800fd7a <__lo0bits+0x1e>
 800fdb2:	2220      	movs	r2, #32
 800fdb4:	e7e1      	b.n	800fd7a <__lo0bits+0x1e>
	...

0800fdb8 <__i2b>:
 800fdb8:	b510      	push	{r4, lr}
 800fdba:	460c      	mov	r4, r1
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	f7ff ff05 	bl	800fbcc <_Balloc>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	b928      	cbnz	r0, 800fdd2 <__i2b+0x1a>
 800fdc6:	4b05      	ldr	r3, [pc, #20]	; (800fddc <__i2b+0x24>)
 800fdc8:	4805      	ldr	r0, [pc, #20]	; (800fde0 <__i2b+0x28>)
 800fdca:	f240 1145 	movw	r1, #325	; 0x145
 800fdce:	f7fe f975 	bl	800e0bc <__assert_func>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	6144      	str	r4, [r0, #20]
 800fdd6:	6103      	str	r3, [r0, #16]
 800fdd8:	bd10      	pop	{r4, pc}
 800fdda:	bf00      	nop
 800fddc:	08015cdb 	.word	0x08015cdb
 800fde0:	08015d18 	.word	0x08015d18

0800fde4 <__multiply>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	4691      	mov	r9, r2
 800fdea:	690a      	ldr	r2, [r1, #16]
 800fdec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	bfb8      	it	lt
 800fdf4:	460b      	movlt	r3, r1
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	bfbc      	itt	lt
 800fdfa:	464c      	movlt	r4, r9
 800fdfc:	4699      	movlt	r9, r3
 800fdfe:	6927      	ldr	r7, [r4, #16]
 800fe00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe04:	68a3      	ldr	r3, [r4, #8]
 800fe06:	6861      	ldr	r1, [r4, #4]
 800fe08:	eb07 060a 	add.w	r6, r7, sl
 800fe0c:	42b3      	cmp	r3, r6
 800fe0e:	b085      	sub	sp, #20
 800fe10:	bfb8      	it	lt
 800fe12:	3101      	addlt	r1, #1
 800fe14:	f7ff feda 	bl	800fbcc <_Balloc>
 800fe18:	b930      	cbnz	r0, 800fe28 <__multiply+0x44>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	4b44      	ldr	r3, [pc, #272]	; (800ff30 <__multiply+0x14c>)
 800fe1e:	4845      	ldr	r0, [pc, #276]	; (800ff34 <__multiply+0x150>)
 800fe20:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fe24:	f7fe f94a 	bl	800e0bc <__assert_func>
 800fe28:	f100 0514 	add.w	r5, r0, #20
 800fe2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe30:	462b      	mov	r3, r5
 800fe32:	2200      	movs	r2, #0
 800fe34:	4543      	cmp	r3, r8
 800fe36:	d321      	bcc.n	800fe7c <__multiply+0x98>
 800fe38:	f104 0314 	add.w	r3, r4, #20
 800fe3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe40:	f109 0314 	add.w	r3, r9, #20
 800fe44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe48:	9202      	str	r2, [sp, #8]
 800fe4a:	1b3a      	subs	r2, r7, r4
 800fe4c:	3a15      	subs	r2, #21
 800fe4e:	f022 0203 	bic.w	r2, r2, #3
 800fe52:	3204      	adds	r2, #4
 800fe54:	f104 0115 	add.w	r1, r4, #21
 800fe58:	428f      	cmp	r7, r1
 800fe5a:	bf38      	it	cc
 800fe5c:	2204      	movcc	r2, #4
 800fe5e:	9201      	str	r2, [sp, #4]
 800fe60:	9a02      	ldr	r2, [sp, #8]
 800fe62:	9303      	str	r3, [sp, #12]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d80c      	bhi.n	800fe82 <__multiply+0x9e>
 800fe68:	2e00      	cmp	r6, #0
 800fe6a:	dd03      	ble.n	800fe74 <__multiply+0x90>
 800fe6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d05b      	beq.n	800ff2c <__multiply+0x148>
 800fe74:	6106      	str	r6, [r0, #16]
 800fe76:	b005      	add	sp, #20
 800fe78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7c:	f843 2b04 	str.w	r2, [r3], #4
 800fe80:	e7d8      	b.n	800fe34 <__multiply+0x50>
 800fe82:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe86:	f1ba 0f00 	cmp.w	sl, #0
 800fe8a:	d024      	beq.n	800fed6 <__multiply+0xf2>
 800fe8c:	f104 0e14 	add.w	lr, r4, #20
 800fe90:	46a9      	mov	r9, r5
 800fe92:	f04f 0c00 	mov.w	ip, #0
 800fe96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe9a:	f8d9 1000 	ldr.w	r1, [r9]
 800fe9e:	fa1f fb82 	uxth.w	fp, r2
 800fea2:	b289      	uxth	r1, r1
 800fea4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fea8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800feac:	f8d9 2000 	ldr.w	r2, [r9]
 800feb0:	4461      	add	r1, ip
 800feb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800feb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800feba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800febe:	b289      	uxth	r1, r1
 800fec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fec4:	4577      	cmp	r7, lr
 800fec6:	f849 1b04 	str.w	r1, [r9], #4
 800feca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fece:	d8e2      	bhi.n	800fe96 <__multiply+0xb2>
 800fed0:	9a01      	ldr	r2, [sp, #4]
 800fed2:	f845 c002 	str.w	ip, [r5, r2]
 800fed6:	9a03      	ldr	r2, [sp, #12]
 800fed8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fedc:	3304      	adds	r3, #4
 800fede:	f1b9 0f00 	cmp.w	r9, #0
 800fee2:	d021      	beq.n	800ff28 <__multiply+0x144>
 800fee4:	6829      	ldr	r1, [r5, #0]
 800fee6:	f104 0c14 	add.w	ip, r4, #20
 800feea:	46ae      	mov	lr, r5
 800feec:	f04f 0a00 	mov.w	sl, #0
 800fef0:	f8bc b000 	ldrh.w	fp, [ip]
 800fef4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fef8:	fb09 220b 	mla	r2, r9, fp, r2
 800fefc:	4452      	add	r2, sl
 800fefe:	b289      	uxth	r1, r1
 800ff00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ff04:	f84e 1b04 	str.w	r1, [lr], #4
 800ff08:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ff0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff10:	f8be 1000 	ldrh.w	r1, [lr]
 800ff14:	fb09 110a 	mla	r1, r9, sl, r1
 800ff18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ff1c:	4567      	cmp	r7, ip
 800ff1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff22:	d8e5      	bhi.n	800fef0 <__multiply+0x10c>
 800ff24:	9a01      	ldr	r2, [sp, #4]
 800ff26:	50a9      	str	r1, [r5, r2]
 800ff28:	3504      	adds	r5, #4
 800ff2a:	e799      	b.n	800fe60 <__multiply+0x7c>
 800ff2c:	3e01      	subs	r6, #1
 800ff2e:	e79b      	b.n	800fe68 <__multiply+0x84>
 800ff30:	08015cdb 	.word	0x08015cdb
 800ff34:	08015d18 	.word	0x08015d18

0800ff38 <__pow5mult>:
 800ff38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff3c:	4615      	mov	r5, r2
 800ff3e:	f012 0203 	ands.w	r2, r2, #3
 800ff42:	4606      	mov	r6, r0
 800ff44:	460f      	mov	r7, r1
 800ff46:	d007      	beq.n	800ff58 <__pow5mult+0x20>
 800ff48:	4c25      	ldr	r4, [pc, #148]	; (800ffe0 <__pow5mult+0xa8>)
 800ff4a:	3a01      	subs	r2, #1
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff52:	f7ff fe9d 	bl	800fc90 <__multadd>
 800ff56:	4607      	mov	r7, r0
 800ff58:	10ad      	asrs	r5, r5, #2
 800ff5a:	d03d      	beq.n	800ffd8 <__pow5mult+0xa0>
 800ff5c:	69f4      	ldr	r4, [r6, #28]
 800ff5e:	b97c      	cbnz	r4, 800ff80 <__pow5mult+0x48>
 800ff60:	2010      	movs	r0, #16
 800ff62:	f7fd fb07 	bl	800d574 <malloc>
 800ff66:	4602      	mov	r2, r0
 800ff68:	61f0      	str	r0, [r6, #28]
 800ff6a:	b928      	cbnz	r0, 800ff78 <__pow5mult+0x40>
 800ff6c:	4b1d      	ldr	r3, [pc, #116]	; (800ffe4 <__pow5mult+0xac>)
 800ff6e:	481e      	ldr	r0, [pc, #120]	; (800ffe8 <__pow5mult+0xb0>)
 800ff70:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ff74:	f7fe f8a2 	bl	800e0bc <__assert_func>
 800ff78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff7c:	6004      	str	r4, [r0, #0]
 800ff7e:	60c4      	str	r4, [r0, #12]
 800ff80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ff84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff88:	b94c      	cbnz	r4, 800ff9e <__pow5mult+0x66>
 800ff8a:	f240 2171 	movw	r1, #625	; 0x271
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f7ff ff12 	bl	800fdb8 <__i2b>
 800ff94:	2300      	movs	r3, #0
 800ff96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	6003      	str	r3, [r0, #0]
 800ff9e:	f04f 0900 	mov.w	r9, #0
 800ffa2:	07eb      	lsls	r3, r5, #31
 800ffa4:	d50a      	bpl.n	800ffbc <__pow5mult+0x84>
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	4622      	mov	r2, r4
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f7ff ff1a 	bl	800fde4 <__multiply>
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	4680      	mov	r8, r0
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f7ff fe49 	bl	800fc4c <_Bfree>
 800ffba:	4647      	mov	r7, r8
 800ffbc:	106d      	asrs	r5, r5, #1
 800ffbe:	d00b      	beq.n	800ffd8 <__pow5mult+0xa0>
 800ffc0:	6820      	ldr	r0, [r4, #0]
 800ffc2:	b938      	cbnz	r0, 800ffd4 <__pow5mult+0x9c>
 800ffc4:	4622      	mov	r2, r4
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f7ff ff0b 	bl	800fde4 <__multiply>
 800ffce:	6020      	str	r0, [r4, #0]
 800ffd0:	f8c0 9000 	str.w	r9, [r0]
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	e7e4      	b.n	800ffa2 <__pow5mult+0x6a>
 800ffd8:	4638      	mov	r0, r7
 800ffda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffde:	bf00      	nop
 800ffe0:	08015e68 	.word	0x08015e68
 800ffe4:	08015c6c 	.word	0x08015c6c
 800ffe8:	08015d18 	.word	0x08015d18

0800ffec <__lshift>:
 800ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff0:	460c      	mov	r4, r1
 800fff2:	6849      	ldr	r1, [r1, #4]
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fffa:	68a3      	ldr	r3, [r4, #8]
 800fffc:	4607      	mov	r7, r0
 800fffe:	4691      	mov	r9, r2
 8010000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010004:	f108 0601 	add.w	r6, r8, #1
 8010008:	42b3      	cmp	r3, r6
 801000a:	db0b      	blt.n	8010024 <__lshift+0x38>
 801000c:	4638      	mov	r0, r7
 801000e:	f7ff fddd 	bl	800fbcc <_Balloc>
 8010012:	4605      	mov	r5, r0
 8010014:	b948      	cbnz	r0, 801002a <__lshift+0x3e>
 8010016:	4602      	mov	r2, r0
 8010018:	4b28      	ldr	r3, [pc, #160]	; (80100bc <__lshift+0xd0>)
 801001a:	4829      	ldr	r0, [pc, #164]	; (80100c0 <__lshift+0xd4>)
 801001c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010020:	f7fe f84c 	bl	800e0bc <__assert_func>
 8010024:	3101      	adds	r1, #1
 8010026:	005b      	lsls	r3, r3, #1
 8010028:	e7ee      	b.n	8010008 <__lshift+0x1c>
 801002a:	2300      	movs	r3, #0
 801002c:	f100 0114 	add.w	r1, r0, #20
 8010030:	f100 0210 	add.w	r2, r0, #16
 8010034:	4618      	mov	r0, r3
 8010036:	4553      	cmp	r3, sl
 8010038:	db33      	blt.n	80100a2 <__lshift+0xb6>
 801003a:	6920      	ldr	r0, [r4, #16]
 801003c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010040:	f104 0314 	add.w	r3, r4, #20
 8010044:	f019 091f 	ands.w	r9, r9, #31
 8010048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801004c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010050:	d02b      	beq.n	80100aa <__lshift+0xbe>
 8010052:	f1c9 0e20 	rsb	lr, r9, #32
 8010056:	468a      	mov	sl, r1
 8010058:	2200      	movs	r2, #0
 801005a:	6818      	ldr	r0, [r3, #0]
 801005c:	fa00 f009 	lsl.w	r0, r0, r9
 8010060:	4310      	orrs	r0, r2
 8010062:	f84a 0b04 	str.w	r0, [sl], #4
 8010066:	f853 2b04 	ldr.w	r2, [r3], #4
 801006a:	459c      	cmp	ip, r3
 801006c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010070:	d8f3      	bhi.n	801005a <__lshift+0x6e>
 8010072:	ebac 0304 	sub.w	r3, ip, r4
 8010076:	3b15      	subs	r3, #21
 8010078:	f023 0303 	bic.w	r3, r3, #3
 801007c:	3304      	adds	r3, #4
 801007e:	f104 0015 	add.w	r0, r4, #21
 8010082:	4584      	cmp	ip, r0
 8010084:	bf38      	it	cc
 8010086:	2304      	movcc	r3, #4
 8010088:	50ca      	str	r2, [r1, r3]
 801008a:	b10a      	cbz	r2, 8010090 <__lshift+0xa4>
 801008c:	f108 0602 	add.w	r6, r8, #2
 8010090:	3e01      	subs	r6, #1
 8010092:	4638      	mov	r0, r7
 8010094:	612e      	str	r6, [r5, #16]
 8010096:	4621      	mov	r1, r4
 8010098:	f7ff fdd8 	bl	800fc4c <_Bfree>
 801009c:	4628      	mov	r0, r5
 801009e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80100a6:	3301      	adds	r3, #1
 80100a8:	e7c5      	b.n	8010036 <__lshift+0x4a>
 80100aa:	3904      	subs	r1, #4
 80100ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80100b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80100b4:	459c      	cmp	ip, r3
 80100b6:	d8f9      	bhi.n	80100ac <__lshift+0xc0>
 80100b8:	e7ea      	b.n	8010090 <__lshift+0xa4>
 80100ba:	bf00      	nop
 80100bc:	08015cdb 	.word	0x08015cdb
 80100c0:	08015d18 	.word	0x08015d18

080100c4 <__mcmp>:
 80100c4:	b530      	push	{r4, r5, lr}
 80100c6:	6902      	ldr	r2, [r0, #16]
 80100c8:	690c      	ldr	r4, [r1, #16]
 80100ca:	1b12      	subs	r2, r2, r4
 80100cc:	d10e      	bne.n	80100ec <__mcmp+0x28>
 80100ce:	f100 0314 	add.w	r3, r0, #20
 80100d2:	3114      	adds	r1, #20
 80100d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100e4:	42a5      	cmp	r5, r4
 80100e6:	d003      	beq.n	80100f0 <__mcmp+0x2c>
 80100e8:	d305      	bcc.n	80100f6 <__mcmp+0x32>
 80100ea:	2201      	movs	r2, #1
 80100ec:	4610      	mov	r0, r2
 80100ee:	bd30      	pop	{r4, r5, pc}
 80100f0:	4283      	cmp	r3, r0
 80100f2:	d3f3      	bcc.n	80100dc <__mcmp+0x18>
 80100f4:	e7fa      	b.n	80100ec <__mcmp+0x28>
 80100f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100fa:	e7f7      	b.n	80100ec <__mcmp+0x28>

080100fc <__mdiff>:
 80100fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010100:	460c      	mov	r4, r1
 8010102:	4606      	mov	r6, r0
 8010104:	4611      	mov	r1, r2
 8010106:	4620      	mov	r0, r4
 8010108:	4690      	mov	r8, r2
 801010a:	f7ff ffdb 	bl	80100c4 <__mcmp>
 801010e:	1e05      	subs	r5, r0, #0
 8010110:	d110      	bne.n	8010134 <__mdiff+0x38>
 8010112:	4629      	mov	r1, r5
 8010114:	4630      	mov	r0, r6
 8010116:	f7ff fd59 	bl	800fbcc <_Balloc>
 801011a:	b930      	cbnz	r0, 801012a <__mdiff+0x2e>
 801011c:	4b3a      	ldr	r3, [pc, #232]	; (8010208 <__mdiff+0x10c>)
 801011e:	4602      	mov	r2, r0
 8010120:	f240 2137 	movw	r1, #567	; 0x237
 8010124:	4839      	ldr	r0, [pc, #228]	; (801020c <__mdiff+0x110>)
 8010126:	f7fd ffc9 	bl	800e0bc <__assert_func>
 801012a:	2301      	movs	r3, #1
 801012c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010134:	bfa4      	itt	ge
 8010136:	4643      	movge	r3, r8
 8010138:	46a0      	movge	r8, r4
 801013a:	4630      	mov	r0, r6
 801013c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010140:	bfa6      	itte	ge
 8010142:	461c      	movge	r4, r3
 8010144:	2500      	movge	r5, #0
 8010146:	2501      	movlt	r5, #1
 8010148:	f7ff fd40 	bl	800fbcc <_Balloc>
 801014c:	b920      	cbnz	r0, 8010158 <__mdiff+0x5c>
 801014e:	4b2e      	ldr	r3, [pc, #184]	; (8010208 <__mdiff+0x10c>)
 8010150:	4602      	mov	r2, r0
 8010152:	f240 2145 	movw	r1, #581	; 0x245
 8010156:	e7e5      	b.n	8010124 <__mdiff+0x28>
 8010158:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801015c:	6926      	ldr	r6, [r4, #16]
 801015e:	60c5      	str	r5, [r0, #12]
 8010160:	f104 0914 	add.w	r9, r4, #20
 8010164:	f108 0514 	add.w	r5, r8, #20
 8010168:	f100 0e14 	add.w	lr, r0, #20
 801016c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010170:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010174:	f108 0210 	add.w	r2, r8, #16
 8010178:	46f2      	mov	sl, lr
 801017a:	2100      	movs	r1, #0
 801017c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010180:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010184:	fa11 f88b 	uxtah	r8, r1, fp
 8010188:	b299      	uxth	r1, r3
 801018a:	0c1b      	lsrs	r3, r3, #16
 801018c:	eba8 0801 	sub.w	r8, r8, r1
 8010190:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010194:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010198:	fa1f f888 	uxth.w	r8, r8
 801019c:	1419      	asrs	r1, r3, #16
 801019e:	454e      	cmp	r6, r9
 80101a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101a4:	f84a 3b04 	str.w	r3, [sl], #4
 80101a8:	d8e8      	bhi.n	801017c <__mdiff+0x80>
 80101aa:	1b33      	subs	r3, r6, r4
 80101ac:	3b15      	subs	r3, #21
 80101ae:	f023 0303 	bic.w	r3, r3, #3
 80101b2:	3304      	adds	r3, #4
 80101b4:	3415      	adds	r4, #21
 80101b6:	42a6      	cmp	r6, r4
 80101b8:	bf38      	it	cc
 80101ba:	2304      	movcc	r3, #4
 80101bc:	441d      	add	r5, r3
 80101be:	4473      	add	r3, lr
 80101c0:	469e      	mov	lr, r3
 80101c2:	462e      	mov	r6, r5
 80101c4:	4566      	cmp	r6, ip
 80101c6:	d30e      	bcc.n	80101e6 <__mdiff+0xea>
 80101c8:	f10c 0203 	add.w	r2, ip, #3
 80101cc:	1b52      	subs	r2, r2, r5
 80101ce:	f022 0203 	bic.w	r2, r2, #3
 80101d2:	3d03      	subs	r5, #3
 80101d4:	45ac      	cmp	ip, r5
 80101d6:	bf38      	it	cc
 80101d8:	2200      	movcc	r2, #0
 80101da:	4413      	add	r3, r2
 80101dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80101e0:	b17a      	cbz	r2, 8010202 <__mdiff+0x106>
 80101e2:	6107      	str	r7, [r0, #16]
 80101e4:	e7a4      	b.n	8010130 <__mdiff+0x34>
 80101e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80101ea:	fa11 f288 	uxtah	r2, r1, r8
 80101ee:	1414      	asrs	r4, r2, #16
 80101f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80101f4:	b292      	uxth	r2, r2
 80101f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80101fa:	f84e 2b04 	str.w	r2, [lr], #4
 80101fe:	1421      	asrs	r1, r4, #16
 8010200:	e7e0      	b.n	80101c4 <__mdiff+0xc8>
 8010202:	3f01      	subs	r7, #1
 8010204:	e7ea      	b.n	80101dc <__mdiff+0xe0>
 8010206:	bf00      	nop
 8010208:	08015cdb 	.word	0x08015cdb
 801020c:	08015d18 	.word	0x08015d18

08010210 <__d2b>:
 8010210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010214:	460f      	mov	r7, r1
 8010216:	2101      	movs	r1, #1
 8010218:	ec59 8b10 	vmov	r8, r9, d0
 801021c:	4616      	mov	r6, r2
 801021e:	f7ff fcd5 	bl	800fbcc <_Balloc>
 8010222:	4604      	mov	r4, r0
 8010224:	b930      	cbnz	r0, 8010234 <__d2b+0x24>
 8010226:	4602      	mov	r2, r0
 8010228:	4b24      	ldr	r3, [pc, #144]	; (80102bc <__d2b+0xac>)
 801022a:	4825      	ldr	r0, [pc, #148]	; (80102c0 <__d2b+0xb0>)
 801022c:	f240 310f 	movw	r1, #783	; 0x30f
 8010230:	f7fd ff44 	bl	800e0bc <__assert_func>
 8010234:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801023c:	bb2d      	cbnz	r5, 801028a <__d2b+0x7a>
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	f1b8 0300 	subs.w	r3, r8, #0
 8010244:	d026      	beq.n	8010294 <__d2b+0x84>
 8010246:	4668      	mov	r0, sp
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	f7ff fd87 	bl	800fd5c <__lo0bits>
 801024e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010252:	b1e8      	cbz	r0, 8010290 <__d2b+0x80>
 8010254:	f1c0 0320 	rsb	r3, r0, #32
 8010258:	fa02 f303 	lsl.w	r3, r2, r3
 801025c:	430b      	orrs	r3, r1
 801025e:	40c2      	lsrs	r2, r0
 8010260:	6163      	str	r3, [r4, #20]
 8010262:	9201      	str	r2, [sp, #4]
 8010264:	9b01      	ldr	r3, [sp, #4]
 8010266:	61a3      	str	r3, [r4, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	bf14      	ite	ne
 801026c:	2202      	movne	r2, #2
 801026e:	2201      	moveq	r2, #1
 8010270:	6122      	str	r2, [r4, #16]
 8010272:	b1bd      	cbz	r5, 80102a4 <__d2b+0x94>
 8010274:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010278:	4405      	add	r5, r0
 801027a:	603d      	str	r5, [r7, #0]
 801027c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010280:	6030      	str	r0, [r6, #0]
 8010282:	4620      	mov	r0, r4
 8010284:	b003      	add	sp, #12
 8010286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801028a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801028e:	e7d6      	b.n	801023e <__d2b+0x2e>
 8010290:	6161      	str	r1, [r4, #20]
 8010292:	e7e7      	b.n	8010264 <__d2b+0x54>
 8010294:	a801      	add	r0, sp, #4
 8010296:	f7ff fd61 	bl	800fd5c <__lo0bits>
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	6163      	str	r3, [r4, #20]
 801029e:	3020      	adds	r0, #32
 80102a0:	2201      	movs	r2, #1
 80102a2:	e7e5      	b.n	8010270 <__d2b+0x60>
 80102a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102ac:	6038      	str	r0, [r7, #0]
 80102ae:	6918      	ldr	r0, [r3, #16]
 80102b0:	f7ff fd34 	bl	800fd1c <__hi0bits>
 80102b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102b8:	e7e2      	b.n	8010280 <__d2b+0x70>
 80102ba:	bf00      	nop
 80102bc:	08015cdb 	.word	0x08015cdb
 80102c0:	08015d18 	.word	0x08015d18

080102c4 <fiprintf>:
 80102c4:	b40e      	push	{r1, r2, r3}
 80102c6:	b503      	push	{r0, r1, lr}
 80102c8:	4601      	mov	r1, r0
 80102ca:	ab03      	add	r3, sp, #12
 80102cc:	4805      	ldr	r0, [pc, #20]	; (80102e4 <fiprintf+0x20>)
 80102ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80102d2:	6800      	ldr	r0, [r0, #0]
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	f7ff f929 	bl	800f52c <_vfiprintf_r>
 80102da:	b002      	add	sp, #8
 80102dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80102e0:	b003      	add	sp, #12
 80102e2:	4770      	bx	lr
 80102e4:	200000a4 	.word	0x200000a4

080102e8 <__submore>:
 80102e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ec:	460c      	mov	r4, r1
 80102ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80102f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102f4:	4299      	cmp	r1, r3
 80102f6:	d11d      	bne.n	8010334 <__submore+0x4c>
 80102f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80102fc:	f7fd f96a 	bl	800d5d4 <_malloc_r>
 8010300:	b918      	cbnz	r0, 801030a <__submore+0x22>
 8010302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801030e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010310:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010314:	6360      	str	r0, [r4, #52]	; 0x34
 8010316:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801031a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801031e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010322:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010326:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801032a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801032e:	6020      	str	r0, [r4, #0]
 8010330:	2000      	movs	r0, #0
 8010332:	e7e8      	b.n	8010306 <__submore+0x1e>
 8010334:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010336:	0077      	lsls	r7, r6, #1
 8010338:	463a      	mov	r2, r7
 801033a:	f000 f80f 	bl	801035c <_realloc_r>
 801033e:	4605      	mov	r5, r0
 8010340:	2800      	cmp	r0, #0
 8010342:	d0de      	beq.n	8010302 <__submore+0x1a>
 8010344:	eb00 0806 	add.w	r8, r0, r6
 8010348:	4601      	mov	r1, r0
 801034a:	4632      	mov	r2, r6
 801034c:	4640      	mov	r0, r8
 801034e:	f7fd fe9e 	bl	800e08e <memcpy>
 8010352:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010356:	f8c4 8000 	str.w	r8, [r4]
 801035a:	e7e9      	b.n	8010330 <__submore+0x48>

0801035c <_realloc_r>:
 801035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010360:	4680      	mov	r8, r0
 8010362:	4614      	mov	r4, r2
 8010364:	460e      	mov	r6, r1
 8010366:	b921      	cbnz	r1, 8010372 <_realloc_r+0x16>
 8010368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801036c:	4611      	mov	r1, r2
 801036e:	f7fd b931 	b.w	800d5d4 <_malloc_r>
 8010372:	b92a      	cbnz	r2, 8010380 <_realloc_r+0x24>
 8010374:	f7fe fd3a 	bl	800edec <_free_r>
 8010378:	4625      	mov	r5, r4
 801037a:	4628      	mov	r0, r5
 801037c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010380:	f000 f9f3 	bl	801076a <_malloc_usable_size_r>
 8010384:	4284      	cmp	r4, r0
 8010386:	4607      	mov	r7, r0
 8010388:	d802      	bhi.n	8010390 <_realloc_r+0x34>
 801038a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801038e:	d812      	bhi.n	80103b6 <_realloc_r+0x5a>
 8010390:	4621      	mov	r1, r4
 8010392:	4640      	mov	r0, r8
 8010394:	f7fd f91e 	bl	800d5d4 <_malloc_r>
 8010398:	4605      	mov	r5, r0
 801039a:	2800      	cmp	r0, #0
 801039c:	d0ed      	beq.n	801037a <_realloc_r+0x1e>
 801039e:	42bc      	cmp	r4, r7
 80103a0:	4622      	mov	r2, r4
 80103a2:	4631      	mov	r1, r6
 80103a4:	bf28      	it	cs
 80103a6:	463a      	movcs	r2, r7
 80103a8:	f7fd fe71 	bl	800e08e <memcpy>
 80103ac:	4631      	mov	r1, r6
 80103ae:	4640      	mov	r0, r8
 80103b0:	f7fe fd1c 	bl	800edec <_free_r>
 80103b4:	e7e1      	b.n	801037a <_realloc_r+0x1e>
 80103b6:	4635      	mov	r5, r6
 80103b8:	e7df      	b.n	801037a <_realloc_r+0x1e>
	...

080103bc <_strtoul_l.constprop.0>:
 80103bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103c0:	4f36      	ldr	r7, [pc, #216]	; (801049c <_strtoul_l.constprop.0+0xe0>)
 80103c2:	4686      	mov	lr, r0
 80103c4:	460d      	mov	r5, r1
 80103c6:	4628      	mov	r0, r5
 80103c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103cc:	5d3e      	ldrb	r6, [r7, r4]
 80103ce:	f016 0608 	ands.w	r6, r6, #8
 80103d2:	d1f8      	bne.n	80103c6 <_strtoul_l.constprop.0+0xa>
 80103d4:	2c2d      	cmp	r4, #45	; 0x2d
 80103d6:	d130      	bne.n	801043a <_strtoul_l.constprop.0+0x7e>
 80103d8:	782c      	ldrb	r4, [r5, #0]
 80103da:	2601      	movs	r6, #1
 80103dc:	1c85      	adds	r5, r0, #2
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d057      	beq.n	8010492 <_strtoul_l.constprop.0+0xd6>
 80103e2:	2b10      	cmp	r3, #16
 80103e4:	d109      	bne.n	80103fa <_strtoul_l.constprop.0+0x3e>
 80103e6:	2c30      	cmp	r4, #48	; 0x30
 80103e8:	d107      	bne.n	80103fa <_strtoul_l.constprop.0+0x3e>
 80103ea:	7828      	ldrb	r0, [r5, #0]
 80103ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80103f0:	2858      	cmp	r0, #88	; 0x58
 80103f2:	d149      	bne.n	8010488 <_strtoul_l.constprop.0+0xcc>
 80103f4:	786c      	ldrb	r4, [r5, #1]
 80103f6:	2310      	movs	r3, #16
 80103f8:	3502      	adds	r5, #2
 80103fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80103fe:	2700      	movs	r7, #0
 8010400:	fbb8 f8f3 	udiv	r8, r8, r3
 8010404:	fb03 f908 	mul.w	r9, r3, r8
 8010408:	ea6f 0909 	mvn.w	r9, r9
 801040c:	4638      	mov	r0, r7
 801040e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010412:	f1bc 0f09 	cmp.w	ip, #9
 8010416:	d815      	bhi.n	8010444 <_strtoul_l.constprop.0+0x88>
 8010418:	4664      	mov	r4, ip
 801041a:	42a3      	cmp	r3, r4
 801041c:	dd23      	ble.n	8010466 <_strtoul_l.constprop.0+0xaa>
 801041e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8010422:	d007      	beq.n	8010434 <_strtoul_l.constprop.0+0x78>
 8010424:	4580      	cmp	r8, r0
 8010426:	d31b      	bcc.n	8010460 <_strtoul_l.constprop.0+0xa4>
 8010428:	d101      	bne.n	801042e <_strtoul_l.constprop.0+0x72>
 801042a:	45a1      	cmp	r9, r4
 801042c:	db18      	blt.n	8010460 <_strtoul_l.constprop.0+0xa4>
 801042e:	fb00 4003 	mla	r0, r0, r3, r4
 8010432:	2701      	movs	r7, #1
 8010434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010438:	e7e9      	b.n	801040e <_strtoul_l.constprop.0+0x52>
 801043a:	2c2b      	cmp	r4, #43	; 0x2b
 801043c:	bf04      	itt	eq
 801043e:	782c      	ldrbeq	r4, [r5, #0]
 8010440:	1c85      	addeq	r5, r0, #2
 8010442:	e7cc      	b.n	80103de <_strtoul_l.constprop.0+0x22>
 8010444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010448:	f1bc 0f19 	cmp.w	ip, #25
 801044c:	d801      	bhi.n	8010452 <_strtoul_l.constprop.0+0x96>
 801044e:	3c37      	subs	r4, #55	; 0x37
 8010450:	e7e3      	b.n	801041a <_strtoul_l.constprop.0+0x5e>
 8010452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010456:	f1bc 0f19 	cmp.w	ip, #25
 801045a:	d804      	bhi.n	8010466 <_strtoul_l.constprop.0+0xaa>
 801045c:	3c57      	subs	r4, #87	; 0x57
 801045e:	e7dc      	b.n	801041a <_strtoul_l.constprop.0+0x5e>
 8010460:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010464:	e7e6      	b.n	8010434 <_strtoul_l.constprop.0+0x78>
 8010466:	1c7b      	adds	r3, r7, #1
 8010468:	d106      	bne.n	8010478 <_strtoul_l.constprop.0+0xbc>
 801046a:	2322      	movs	r3, #34	; 0x22
 801046c:	f8ce 3000 	str.w	r3, [lr]
 8010470:	4638      	mov	r0, r7
 8010472:	b932      	cbnz	r2, 8010482 <_strtoul_l.constprop.0+0xc6>
 8010474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010478:	b106      	cbz	r6, 801047c <_strtoul_l.constprop.0+0xc0>
 801047a:	4240      	negs	r0, r0
 801047c:	2a00      	cmp	r2, #0
 801047e:	d0f9      	beq.n	8010474 <_strtoul_l.constprop.0+0xb8>
 8010480:	b107      	cbz	r7, 8010484 <_strtoul_l.constprop.0+0xc8>
 8010482:	1e69      	subs	r1, r5, #1
 8010484:	6011      	str	r1, [r2, #0]
 8010486:	e7f5      	b.n	8010474 <_strtoul_l.constprop.0+0xb8>
 8010488:	2430      	movs	r4, #48	; 0x30
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1b5      	bne.n	80103fa <_strtoul_l.constprop.0+0x3e>
 801048e:	2308      	movs	r3, #8
 8010490:	e7b3      	b.n	80103fa <_strtoul_l.constprop.0+0x3e>
 8010492:	2c30      	cmp	r4, #48	; 0x30
 8010494:	d0a9      	beq.n	80103ea <_strtoul_l.constprop.0+0x2e>
 8010496:	230a      	movs	r3, #10
 8010498:	e7af      	b.n	80103fa <_strtoul_l.constprop.0+0x3e>
 801049a:	bf00      	nop
 801049c:	08015b23 	.word	0x08015b23

080104a0 <_strtoul_r>:
 80104a0:	f7ff bf8c 	b.w	80103bc <_strtoul_l.constprop.0>

080104a4 <__swbuf_r>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	460e      	mov	r6, r1
 80104a8:	4614      	mov	r4, r2
 80104aa:	4605      	mov	r5, r0
 80104ac:	b118      	cbz	r0, 80104b6 <__swbuf_r+0x12>
 80104ae:	6a03      	ldr	r3, [r0, #32]
 80104b0:	b90b      	cbnz	r3, 80104b6 <__swbuf_r+0x12>
 80104b2:	f7fd fbfd 	bl	800dcb0 <__sinit>
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	60a3      	str	r3, [r4, #8]
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	071a      	lsls	r2, r3, #28
 80104be:	d525      	bpl.n	801050c <__swbuf_r+0x68>
 80104c0:	6923      	ldr	r3, [r4, #16]
 80104c2:	b31b      	cbz	r3, 801050c <__swbuf_r+0x68>
 80104c4:	6823      	ldr	r3, [r4, #0]
 80104c6:	6922      	ldr	r2, [r4, #16]
 80104c8:	1a98      	subs	r0, r3, r2
 80104ca:	6963      	ldr	r3, [r4, #20]
 80104cc:	b2f6      	uxtb	r6, r6
 80104ce:	4283      	cmp	r3, r0
 80104d0:	4637      	mov	r7, r6
 80104d2:	dc04      	bgt.n	80104de <__swbuf_r+0x3a>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4628      	mov	r0, r5
 80104d8:	f7ff fb50 	bl	800fb7c <_fflush_r>
 80104dc:	b9e0      	cbnz	r0, 8010518 <__swbuf_r+0x74>
 80104de:	68a3      	ldr	r3, [r4, #8]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	60a3      	str	r3, [r4, #8]
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	6022      	str	r2, [r4, #0]
 80104ea:	701e      	strb	r6, [r3, #0]
 80104ec:	6962      	ldr	r2, [r4, #20]
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d004      	beq.n	80104fe <__swbuf_r+0x5a>
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	07db      	lsls	r3, r3, #31
 80104f8:	d506      	bpl.n	8010508 <__swbuf_r+0x64>
 80104fa:	2e0a      	cmp	r6, #10
 80104fc:	d104      	bne.n	8010508 <__swbuf_r+0x64>
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	f7ff fb3b 	bl	800fb7c <_fflush_r>
 8010506:	b938      	cbnz	r0, 8010518 <__swbuf_r+0x74>
 8010508:	4638      	mov	r0, r7
 801050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801050c:	4621      	mov	r1, r4
 801050e:	4628      	mov	r0, r5
 8010510:	f000 f806 	bl	8010520 <__swsetup_r>
 8010514:	2800      	cmp	r0, #0
 8010516:	d0d5      	beq.n	80104c4 <__swbuf_r+0x20>
 8010518:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801051c:	e7f4      	b.n	8010508 <__swbuf_r+0x64>
	...

08010520 <__swsetup_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4b2a      	ldr	r3, [pc, #168]	; (80105cc <__swsetup_r+0xac>)
 8010524:	4605      	mov	r5, r0
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	460c      	mov	r4, r1
 801052a:	b118      	cbz	r0, 8010534 <__swsetup_r+0x14>
 801052c:	6a03      	ldr	r3, [r0, #32]
 801052e:	b90b      	cbnz	r3, 8010534 <__swsetup_r+0x14>
 8010530:	f7fd fbbe 	bl	800dcb0 <__sinit>
 8010534:	89a3      	ldrh	r3, [r4, #12]
 8010536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801053a:	0718      	lsls	r0, r3, #28
 801053c:	d422      	bmi.n	8010584 <__swsetup_r+0x64>
 801053e:	06d9      	lsls	r1, r3, #27
 8010540:	d407      	bmi.n	8010552 <__swsetup_r+0x32>
 8010542:	2309      	movs	r3, #9
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801054a:	81a3      	strh	r3, [r4, #12]
 801054c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010550:	e034      	b.n	80105bc <__swsetup_r+0x9c>
 8010552:	0758      	lsls	r0, r3, #29
 8010554:	d512      	bpl.n	801057c <__swsetup_r+0x5c>
 8010556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010558:	b141      	cbz	r1, 801056c <__swsetup_r+0x4c>
 801055a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801055e:	4299      	cmp	r1, r3
 8010560:	d002      	beq.n	8010568 <__swsetup_r+0x48>
 8010562:	4628      	mov	r0, r5
 8010564:	f7fe fc42 	bl	800edec <_free_r>
 8010568:	2300      	movs	r3, #0
 801056a:	6363      	str	r3, [r4, #52]	; 0x34
 801056c:	89a3      	ldrh	r3, [r4, #12]
 801056e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010572:	81a3      	strh	r3, [r4, #12]
 8010574:	2300      	movs	r3, #0
 8010576:	6063      	str	r3, [r4, #4]
 8010578:	6923      	ldr	r3, [r4, #16]
 801057a:	6023      	str	r3, [r4, #0]
 801057c:	89a3      	ldrh	r3, [r4, #12]
 801057e:	f043 0308 	orr.w	r3, r3, #8
 8010582:	81a3      	strh	r3, [r4, #12]
 8010584:	6923      	ldr	r3, [r4, #16]
 8010586:	b94b      	cbnz	r3, 801059c <__swsetup_r+0x7c>
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801058e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010592:	d003      	beq.n	801059c <__swsetup_r+0x7c>
 8010594:	4621      	mov	r1, r4
 8010596:	4628      	mov	r0, r5
 8010598:	f000 f840 	bl	801061c <__smakebuf_r>
 801059c:	89a0      	ldrh	r0, [r4, #12]
 801059e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105a2:	f010 0301 	ands.w	r3, r0, #1
 80105a6:	d00a      	beq.n	80105be <__swsetup_r+0x9e>
 80105a8:	2300      	movs	r3, #0
 80105aa:	60a3      	str	r3, [r4, #8]
 80105ac:	6963      	ldr	r3, [r4, #20]
 80105ae:	425b      	negs	r3, r3
 80105b0:	61a3      	str	r3, [r4, #24]
 80105b2:	6923      	ldr	r3, [r4, #16]
 80105b4:	b943      	cbnz	r3, 80105c8 <__swsetup_r+0xa8>
 80105b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105ba:	d1c4      	bne.n	8010546 <__swsetup_r+0x26>
 80105bc:	bd38      	pop	{r3, r4, r5, pc}
 80105be:	0781      	lsls	r1, r0, #30
 80105c0:	bf58      	it	pl
 80105c2:	6963      	ldrpl	r3, [r4, #20]
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	e7f4      	b.n	80105b2 <__swsetup_r+0x92>
 80105c8:	2000      	movs	r0, #0
 80105ca:	e7f7      	b.n	80105bc <__swsetup_r+0x9c>
 80105cc:	200000a4 	.word	0x200000a4

080105d0 <__swhatbuf_r>:
 80105d0:	b570      	push	{r4, r5, r6, lr}
 80105d2:	460c      	mov	r4, r1
 80105d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d8:	2900      	cmp	r1, #0
 80105da:	b096      	sub	sp, #88	; 0x58
 80105dc:	4615      	mov	r5, r2
 80105de:	461e      	mov	r6, r3
 80105e0:	da0d      	bge.n	80105fe <__swhatbuf_r+0x2e>
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80105e8:	f04f 0100 	mov.w	r1, #0
 80105ec:	bf0c      	ite	eq
 80105ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80105f2:	2340      	movne	r3, #64	; 0x40
 80105f4:	2000      	movs	r0, #0
 80105f6:	6031      	str	r1, [r6, #0]
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	b016      	add	sp, #88	; 0x58
 80105fc:	bd70      	pop	{r4, r5, r6, pc}
 80105fe:	466a      	mov	r2, sp
 8010600:	f000 f862 	bl	80106c8 <_fstat_r>
 8010604:	2800      	cmp	r0, #0
 8010606:	dbec      	blt.n	80105e2 <__swhatbuf_r+0x12>
 8010608:	9901      	ldr	r1, [sp, #4]
 801060a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801060e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010612:	4259      	negs	r1, r3
 8010614:	4159      	adcs	r1, r3
 8010616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061a:	e7eb      	b.n	80105f4 <__swhatbuf_r+0x24>

0801061c <__smakebuf_r>:
 801061c:	898b      	ldrh	r3, [r1, #12]
 801061e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010620:	079d      	lsls	r5, r3, #30
 8010622:	4606      	mov	r6, r0
 8010624:	460c      	mov	r4, r1
 8010626:	d507      	bpl.n	8010638 <__smakebuf_r+0x1c>
 8010628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801062c:	6023      	str	r3, [r4, #0]
 801062e:	6123      	str	r3, [r4, #16]
 8010630:	2301      	movs	r3, #1
 8010632:	6163      	str	r3, [r4, #20]
 8010634:	b002      	add	sp, #8
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	ab01      	add	r3, sp, #4
 801063a:	466a      	mov	r2, sp
 801063c:	f7ff ffc8 	bl	80105d0 <__swhatbuf_r>
 8010640:	9900      	ldr	r1, [sp, #0]
 8010642:	4605      	mov	r5, r0
 8010644:	4630      	mov	r0, r6
 8010646:	f7fc ffc5 	bl	800d5d4 <_malloc_r>
 801064a:	b948      	cbnz	r0, 8010660 <__smakebuf_r+0x44>
 801064c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010650:	059a      	lsls	r2, r3, #22
 8010652:	d4ef      	bmi.n	8010634 <__smakebuf_r+0x18>
 8010654:	f023 0303 	bic.w	r3, r3, #3
 8010658:	f043 0302 	orr.w	r3, r3, #2
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	e7e3      	b.n	8010628 <__smakebuf_r+0xc>
 8010660:	89a3      	ldrh	r3, [r4, #12]
 8010662:	6020      	str	r0, [r4, #0]
 8010664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010668:	81a3      	strh	r3, [r4, #12]
 801066a:	9b00      	ldr	r3, [sp, #0]
 801066c:	6163      	str	r3, [r4, #20]
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	6120      	str	r0, [r4, #16]
 8010672:	b15b      	cbz	r3, 801068c <__smakebuf_r+0x70>
 8010674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010678:	4630      	mov	r0, r6
 801067a:	f000 f837 	bl	80106ec <_isatty_r>
 801067e:	b128      	cbz	r0, 801068c <__smakebuf_r+0x70>
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	f023 0303 	bic.w	r3, r3, #3
 8010686:	f043 0301 	orr.w	r3, r3, #1
 801068a:	81a3      	strh	r3, [r4, #12]
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	431d      	orrs	r5, r3
 8010690:	81a5      	strh	r5, [r4, #12]
 8010692:	e7cf      	b.n	8010634 <__smakebuf_r+0x18>

08010694 <memmove>:
 8010694:	4288      	cmp	r0, r1
 8010696:	b510      	push	{r4, lr}
 8010698:	eb01 0402 	add.w	r4, r1, r2
 801069c:	d902      	bls.n	80106a4 <memmove+0x10>
 801069e:	4284      	cmp	r4, r0
 80106a0:	4623      	mov	r3, r4
 80106a2:	d807      	bhi.n	80106b4 <memmove+0x20>
 80106a4:	1e43      	subs	r3, r0, #1
 80106a6:	42a1      	cmp	r1, r4
 80106a8:	d008      	beq.n	80106bc <memmove+0x28>
 80106aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106b2:	e7f8      	b.n	80106a6 <memmove+0x12>
 80106b4:	4402      	add	r2, r0
 80106b6:	4601      	mov	r1, r0
 80106b8:	428a      	cmp	r2, r1
 80106ba:	d100      	bne.n	80106be <memmove+0x2a>
 80106bc:	bd10      	pop	{r4, pc}
 80106be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106c6:	e7f7      	b.n	80106b8 <memmove+0x24>

080106c8 <_fstat_r>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	4d07      	ldr	r5, [pc, #28]	; (80106e8 <_fstat_r+0x20>)
 80106cc:	2300      	movs	r3, #0
 80106ce:	4604      	mov	r4, r0
 80106d0:	4608      	mov	r0, r1
 80106d2:	4611      	mov	r1, r2
 80106d4:	602b      	str	r3, [r5, #0]
 80106d6:	f7f4 f9e2 	bl	8004a9e <_fstat>
 80106da:	1c43      	adds	r3, r0, #1
 80106dc:	d102      	bne.n	80106e4 <_fstat_r+0x1c>
 80106de:	682b      	ldr	r3, [r5, #0]
 80106e0:	b103      	cbz	r3, 80106e4 <_fstat_r+0x1c>
 80106e2:	6023      	str	r3, [r4, #0]
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	bf00      	nop
 80106e8:	20009ed4 	.word	0x20009ed4

080106ec <_isatty_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d06      	ldr	r5, [pc, #24]	; (8010708 <_isatty_r+0x1c>)
 80106f0:	2300      	movs	r3, #0
 80106f2:	4604      	mov	r4, r0
 80106f4:	4608      	mov	r0, r1
 80106f6:	602b      	str	r3, [r5, #0]
 80106f8:	f7f4 f9e1 	bl	8004abe <_isatty>
 80106fc:	1c43      	adds	r3, r0, #1
 80106fe:	d102      	bne.n	8010706 <_isatty_r+0x1a>
 8010700:	682b      	ldr	r3, [r5, #0]
 8010702:	b103      	cbz	r3, 8010706 <_isatty_r+0x1a>
 8010704:	6023      	str	r3, [r4, #0]
 8010706:	bd38      	pop	{r3, r4, r5, pc}
 8010708:	20009ed4 	.word	0x20009ed4

0801070c <abort>:
 801070c:	b508      	push	{r3, lr}
 801070e:	2006      	movs	r0, #6
 8010710:	f000 f868 	bl	80107e4 <raise>
 8010714:	2001      	movs	r0, #1
 8010716:	f7f4 f973 	bl	8004a00 <_exit>

0801071a <_calloc_r>:
 801071a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801071c:	fba1 2402 	umull	r2, r4, r1, r2
 8010720:	b94c      	cbnz	r4, 8010736 <_calloc_r+0x1c>
 8010722:	4611      	mov	r1, r2
 8010724:	9201      	str	r2, [sp, #4]
 8010726:	f7fc ff55 	bl	800d5d4 <_malloc_r>
 801072a:	9a01      	ldr	r2, [sp, #4]
 801072c:	4605      	mov	r5, r0
 801072e:	b930      	cbnz	r0, 801073e <_calloc_r+0x24>
 8010730:	4628      	mov	r0, r5
 8010732:	b003      	add	sp, #12
 8010734:	bd30      	pop	{r4, r5, pc}
 8010736:	220c      	movs	r2, #12
 8010738:	6002      	str	r2, [r0, #0]
 801073a:	2500      	movs	r5, #0
 801073c:	e7f8      	b.n	8010730 <_calloc_r+0x16>
 801073e:	4621      	mov	r1, r4
 8010740:	f7fd fc16 	bl	800df70 <memset>
 8010744:	e7f4      	b.n	8010730 <_calloc_r+0x16>

08010746 <__ascii_mbtowc>:
 8010746:	b082      	sub	sp, #8
 8010748:	b901      	cbnz	r1, 801074c <__ascii_mbtowc+0x6>
 801074a:	a901      	add	r1, sp, #4
 801074c:	b142      	cbz	r2, 8010760 <__ascii_mbtowc+0x1a>
 801074e:	b14b      	cbz	r3, 8010764 <__ascii_mbtowc+0x1e>
 8010750:	7813      	ldrb	r3, [r2, #0]
 8010752:	600b      	str	r3, [r1, #0]
 8010754:	7812      	ldrb	r2, [r2, #0]
 8010756:	1e10      	subs	r0, r2, #0
 8010758:	bf18      	it	ne
 801075a:	2001      	movne	r0, #1
 801075c:	b002      	add	sp, #8
 801075e:	4770      	bx	lr
 8010760:	4610      	mov	r0, r2
 8010762:	e7fb      	b.n	801075c <__ascii_mbtowc+0x16>
 8010764:	f06f 0001 	mvn.w	r0, #1
 8010768:	e7f8      	b.n	801075c <__ascii_mbtowc+0x16>

0801076a <_malloc_usable_size_r>:
 801076a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801076e:	1f18      	subs	r0, r3, #4
 8010770:	2b00      	cmp	r3, #0
 8010772:	bfbc      	itt	lt
 8010774:	580b      	ldrlt	r3, [r1, r0]
 8010776:	18c0      	addlt	r0, r0, r3
 8010778:	4770      	bx	lr

0801077a <__ascii_wctomb>:
 801077a:	b149      	cbz	r1, 8010790 <__ascii_wctomb+0x16>
 801077c:	2aff      	cmp	r2, #255	; 0xff
 801077e:	bf85      	ittet	hi
 8010780:	238a      	movhi	r3, #138	; 0x8a
 8010782:	6003      	strhi	r3, [r0, #0]
 8010784:	700a      	strbls	r2, [r1, #0]
 8010786:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801078a:	bf98      	it	ls
 801078c:	2001      	movls	r0, #1
 801078e:	4770      	bx	lr
 8010790:	4608      	mov	r0, r1
 8010792:	4770      	bx	lr

08010794 <_raise_r>:
 8010794:	291f      	cmp	r1, #31
 8010796:	b538      	push	{r3, r4, r5, lr}
 8010798:	4604      	mov	r4, r0
 801079a:	460d      	mov	r5, r1
 801079c:	d904      	bls.n	80107a8 <_raise_r+0x14>
 801079e:	2316      	movs	r3, #22
 80107a0:	6003      	str	r3, [r0, #0]
 80107a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107a6:	bd38      	pop	{r3, r4, r5, pc}
 80107a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80107aa:	b112      	cbz	r2, 80107b2 <_raise_r+0x1e>
 80107ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107b0:	b94b      	cbnz	r3, 80107c6 <_raise_r+0x32>
 80107b2:	4620      	mov	r0, r4
 80107b4:	f000 f830 	bl	8010818 <_getpid_r>
 80107b8:	462a      	mov	r2, r5
 80107ba:	4601      	mov	r1, r0
 80107bc:	4620      	mov	r0, r4
 80107be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107c2:	f000 b817 	b.w	80107f4 <_kill_r>
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d00a      	beq.n	80107e0 <_raise_r+0x4c>
 80107ca:	1c59      	adds	r1, r3, #1
 80107cc:	d103      	bne.n	80107d6 <_raise_r+0x42>
 80107ce:	2316      	movs	r3, #22
 80107d0:	6003      	str	r3, [r0, #0]
 80107d2:	2001      	movs	r0, #1
 80107d4:	e7e7      	b.n	80107a6 <_raise_r+0x12>
 80107d6:	2400      	movs	r4, #0
 80107d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107dc:	4628      	mov	r0, r5
 80107de:	4798      	blx	r3
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7e0      	b.n	80107a6 <_raise_r+0x12>

080107e4 <raise>:
 80107e4:	4b02      	ldr	r3, [pc, #8]	; (80107f0 <raise+0xc>)
 80107e6:	4601      	mov	r1, r0
 80107e8:	6818      	ldr	r0, [r3, #0]
 80107ea:	f7ff bfd3 	b.w	8010794 <_raise_r>
 80107ee:	bf00      	nop
 80107f0:	200000a4 	.word	0x200000a4

080107f4 <_kill_r>:
 80107f4:	b538      	push	{r3, r4, r5, lr}
 80107f6:	4d07      	ldr	r5, [pc, #28]	; (8010814 <_kill_r+0x20>)
 80107f8:	2300      	movs	r3, #0
 80107fa:	4604      	mov	r4, r0
 80107fc:	4608      	mov	r0, r1
 80107fe:	4611      	mov	r1, r2
 8010800:	602b      	str	r3, [r5, #0]
 8010802:	f7f4 f8ed 	bl	80049e0 <_kill>
 8010806:	1c43      	adds	r3, r0, #1
 8010808:	d102      	bne.n	8010810 <_kill_r+0x1c>
 801080a:	682b      	ldr	r3, [r5, #0]
 801080c:	b103      	cbz	r3, 8010810 <_kill_r+0x1c>
 801080e:	6023      	str	r3, [r4, #0]
 8010810:	bd38      	pop	{r3, r4, r5, pc}
 8010812:	bf00      	nop
 8010814:	20009ed4 	.word	0x20009ed4

08010818 <_getpid_r>:
 8010818:	f7f4 b8da 	b.w	80049d0 <_getpid>

0801081c <acos>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	ed2d 8b02 	vpush	{d8}
 8010822:	ec55 4b10 	vmov	r4, r5, d0
 8010826:	f000 f82f 	bl	8010888 <__ieee754_acos>
 801082a:	4622      	mov	r2, r4
 801082c:	462b      	mov	r3, r5
 801082e:	4620      	mov	r0, r4
 8010830:	4629      	mov	r1, r5
 8010832:	eeb0 8a40 	vmov.f32	s16, s0
 8010836:	eef0 8a60 	vmov.f32	s17, s1
 801083a:	f7f0 f997 	bl	8000b6c <__aeabi_dcmpun>
 801083e:	b9a8      	cbnz	r0, 801086c <acos+0x50>
 8010840:	ec45 4b10 	vmov	d0, r4, r5
 8010844:	f000 faac 	bl	8010da0 <fabs>
 8010848:	4b0c      	ldr	r3, [pc, #48]	; (801087c <acos+0x60>)
 801084a:	ec51 0b10 	vmov	r0, r1, d0
 801084e:	2200      	movs	r2, #0
 8010850:	f7f0 f982 	bl	8000b58 <__aeabi_dcmpgt>
 8010854:	b150      	cbz	r0, 801086c <acos+0x50>
 8010856:	f7fd fbed 	bl	800e034 <__errno>
 801085a:	ecbd 8b02 	vpop	{d8}
 801085e:	2321      	movs	r3, #33	; 0x21
 8010860:	6003      	str	r3, [r0, #0]
 8010862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010866:	4806      	ldr	r0, [pc, #24]	; (8010880 <acos+0x64>)
 8010868:	f000 bc02 	b.w	8011070 <nan>
 801086c:	eeb0 0a48 	vmov.f32	s0, s16
 8010870:	eef0 0a68 	vmov.f32	s1, s17
 8010874:	ecbd 8b02 	vpop	{d8}
 8010878:	bd38      	pop	{r3, r4, r5, pc}
 801087a:	bf00      	nop
 801087c:	3ff00000 	.word	0x3ff00000
 8010880:	08015c5e 	.word	0x08015c5e
 8010884:	00000000 	.word	0x00000000

08010888 <__ieee754_acos>:
 8010888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	ec55 4b10 	vmov	r4, r5, d0
 8010890:	49b7      	ldr	r1, [pc, #732]	; (8010b70 <__ieee754_acos+0x2e8>)
 8010892:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010896:	428b      	cmp	r3, r1
 8010898:	dd1b      	ble.n	80108d2 <__ieee754_acos+0x4a>
 801089a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801089e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80108a2:	4323      	orrs	r3, r4
 80108a4:	d106      	bne.n	80108b4 <__ieee754_acos+0x2c>
 80108a6:	2d00      	cmp	r5, #0
 80108a8:	f300 8211 	bgt.w	8010cce <__ieee754_acos+0x446>
 80108ac:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010b08 <__ieee754_acos+0x280>
 80108b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b4:	ee10 2a10 	vmov	r2, s0
 80108b8:	462b      	mov	r3, r5
 80108ba:	ee10 0a10 	vmov	r0, s0
 80108be:	4629      	mov	r1, r5
 80108c0:	f7ef fd02 	bl	80002c8 <__aeabi_dsub>
 80108c4:	4602      	mov	r2, r0
 80108c6:	460b      	mov	r3, r1
 80108c8:	f7ef ffe0 	bl	800088c <__aeabi_ddiv>
 80108cc:	ec41 0b10 	vmov	d0, r0, r1
 80108d0:	e7ee      	b.n	80108b0 <__ieee754_acos+0x28>
 80108d2:	49a8      	ldr	r1, [pc, #672]	; (8010b74 <__ieee754_acos+0x2ec>)
 80108d4:	428b      	cmp	r3, r1
 80108d6:	f300 8087 	bgt.w	80109e8 <__ieee754_acos+0x160>
 80108da:	4aa7      	ldr	r2, [pc, #668]	; (8010b78 <__ieee754_acos+0x2f0>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	f340 81f9 	ble.w	8010cd4 <__ieee754_acos+0x44c>
 80108e2:	ee10 2a10 	vmov	r2, s0
 80108e6:	ee10 0a10 	vmov	r0, s0
 80108ea:	462b      	mov	r3, r5
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ef fea3 	bl	8000638 <__aeabi_dmul>
 80108f2:	a387      	add	r3, pc, #540	; (adr r3, 8010b10 <__ieee754_acos+0x288>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	4606      	mov	r6, r0
 80108fa:	460f      	mov	r7, r1
 80108fc:	f7ef fe9c 	bl	8000638 <__aeabi_dmul>
 8010900:	a385      	add	r3, pc, #532	; (adr r3, 8010b18 <__ieee754_acos+0x290>)
 8010902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010906:	f7ef fce1 	bl	80002cc <__adddf3>
 801090a:	4632      	mov	r2, r6
 801090c:	463b      	mov	r3, r7
 801090e:	f7ef fe93 	bl	8000638 <__aeabi_dmul>
 8010912:	a383      	add	r3, pc, #524	; (adr r3, 8010b20 <__ieee754_acos+0x298>)
 8010914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010918:	f7ef fcd6 	bl	80002c8 <__aeabi_dsub>
 801091c:	4632      	mov	r2, r6
 801091e:	463b      	mov	r3, r7
 8010920:	f7ef fe8a 	bl	8000638 <__aeabi_dmul>
 8010924:	a380      	add	r3, pc, #512	; (adr r3, 8010b28 <__ieee754_acos+0x2a0>)
 8010926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092a:	f7ef fccf 	bl	80002cc <__adddf3>
 801092e:	4632      	mov	r2, r6
 8010930:	463b      	mov	r3, r7
 8010932:	f7ef fe81 	bl	8000638 <__aeabi_dmul>
 8010936:	a37e      	add	r3, pc, #504	; (adr r3, 8010b30 <__ieee754_acos+0x2a8>)
 8010938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093c:	f7ef fcc4 	bl	80002c8 <__aeabi_dsub>
 8010940:	4632      	mov	r2, r6
 8010942:	463b      	mov	r3, r7
 8010944:	f7ef fe78 	bl	8000638 <__aeabi_dmul>
 8010948:	a37b      	add	r3, pc, #492	; (adr r3, 8010b38 <__ieee754_acos+0x2b0>)
 801094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801094e:	f7ef fcbd 	bl	80002cc <__adddf3>
 8010952:	4632      	mov	r2, r6
 8010954:	463b      	mov	r3, r7
 8010956:	f7ef fe6f 	bl	8000638 <__aeabi_dmul>
 801095a:	a379      	add	r3, pc, #484	; (adr r3, 8010b40 <__ieee754_acos+0x2b8>)
 801095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010960:	4680      	mov	r8, r0
 8010962:	4689      	mov	r9, r1
 8010964:	4630      	mov	r0, r6
 8010966:	4639      	mov	r1, r7
 8010968:	f7ef fe66 	bl	8000638 <__aeabi_dmul>
 801096c:	a376      	add	r3, pc, #472	; (adr r3, 8010b48 <__ieee754_acos+0x2c0>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fca9 	bl	80002c8 <__aeabi_dsub>
 8010976:	4632      	mov	r2, r6
 8010978:	463b      	mov	r3, r7
 801097a:	f7ef fe5d 	bl	8000638 <__aeabi_dmul>
 801097e:	a374      	add	r3, pc, #464	; (adr r3, 8010b50 <__ieee754_acos+0x2c8>)
 8010980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010984:	f7ef fca2 	bl	80002cc <__adddf3>
 8010988:	4632      	mov	r2, r6
 801098a:	463b      	mov	r3, r7
 801098c:	f7ef fe54 	bl	8000638 <__aeabi_dmul>
 8010990:	a371      	add	r3, pc, #452	; (adr r3, 8010b58 <__ieee754_acos+0x2d0>)
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	f7ef fc97 	bl	80002c8 <__aeabi_dsub>
 801099a:	4632      	mov	r2, r6
 801099c:	463b      	mov	r3, r7
 801099e:	f7ef fe4b 	bl	8000638 <__aeabi_dmul>
 80109a2:	4b76      	ldr	r3, [pc, #472]	; (8010b7c <__ieee754_acos+0x2f4>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	f7ef fc91 	bl	80002cc <__adddf3>
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	4640      	mov	r0, r8
 80109b0:	4649      	mov	r1, r9
 80109b2:	f7ef ff6b 	bl	800088c <__aeabi_ddiv>
 80109b6:	4622      	mov	r2, r4
 80109b8:	462b      	mov	r3, r5
 80109ba:	f7ef fe3d 	bl	8000638 <__aeabi_dmul>
 80109be:	4602      	mov	r2, r0
 80109c0:	460b      	mov	r3, r1
 80109c2:	a167      	add	r1, pc, #412	; (adr r1, 8010b60 <__ieee754_acos+0x2d8>)
 80109c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109c8:	f7ef fc7e 	bl	80002c8 <__aeabi_dsub>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4620      	mov	r0, r4
 80109d2:	4629      	mov	r1, r5
 80109d4:	f7ef fc78 	bl	80002c8 <__aeabi_dsub>
 80109d8:	4602      	mov	r2, r0
 80109da:	460b      	mov	r3, r1
 80109dc:	a162      	add	r1, pc, #392	; (adr r1, 8010b68 <__ieee754_acos+0x2e0>)
 80109de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109e2:	f7ef fc71 	bl	80002c8 <__aeabi_dsub>
 80109e6:	e771      	b.n	80108cc <__ieee754_acos+0x44>
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	f280 80cb 	bge.w	8010b84 <__ieee754_acos+0x2fc>
 80109ee:	ee10 0a10 	vmov	r0, s0
 80109f2:	4b62      	ldr	r3, [pc, #392]	; (8010b7c <__ieee754_acos+0x2f4>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	4629      	mov	r1, r5
 80109f8:	f7ef fc68 	bl	80002cc <__adddf3>
 80109fc:	4b60      	ldr	r3, [pc, #384]	; (8010b80 <__ieee754_acos+0x2f8>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	f7ef fe1a 	bl	8000638 <__aeabi_dmul>
 8010a04:	a342      	add	r3, pc, #264	; (adr r3, 8010b10 <__ieee754_acos+0x288>)
 8010a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	f7ef fe13 	bl	8000638 <__aeabi_dmul>
 8010a12:	a341      	add	r3, pc, #260	; (adr r3, 8010b18 <__ieee754_acos+0x290>)
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	f7ef fc58 	bl	80002cc <__adddf3>
 8010a1c:	4622      	mov	r2, r4
 8010a1e:	462b      	mov	r3, r5
 8010a20:	f7ef fe0a 	bl	8000638 <__aeabi_dmul>
 8010a24:	a33e      	add	r3, pc, #248	; (adr r3, 8010b20 <__ieee754_acos+0x298>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f7ef fc4d 	bl	80002c8 <__aeabi_dsub>
 8010a2e:	4622      	mov	r2, r4
 8010a30:	462b      	mov	r3, r5
 8010a32:	f7ef fe01 	bl	8000638 <__aeabi_dmul>
 8010a36:	a33c      	add	r3, pc, #240	; (adr r3, 8010b28 <__ieee754_acos+0x2a0>)
 8010a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3c:	f7ef fc46 	bl	80002cc <__adddf3>
 8010a40:	4622      	mov	r2, r4
 8010a42:	462b      	mov	r3, r5
 8010a44:	f7ef fdf8 	bl	8000638 <__aeabi_dmul>
 8010a48:	a339      	add	r3, pc, #228	; (adr r3, 8010b30 <__ieee754_acos+0x2a8>)
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	f7ef fc3b 	bl	80002c8 <__aeabi_dsub>
 8010a52:	4622      	mov	r2, r4
 8010a54:	462b      	mov	r3, r5
 8010a56:	f7ef fdef 	bl	8000638 <__aeabi_dmul>
 8010a5a:	a337      	add	r3, pc, #220	; (adr r3, 8010b38 <__ieee754_acos+0x2b0>)
 8010a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a60:	f7ef fc34 	bl	80002cc <__adddf3>
 8010a64:	4622      	mov	r2, r4
 8010a66:	462b      	mov	r3, r5
 8010a68:	f7ef fde6 	bl	8000638 <__aeabi_dmul>
 8010a6c:	ec45 4b10 	vmov	d0, r4, r5
 8010a70:	4680      	mov	r8, r0
 8010a72:	4689      	mov	r9, r1
 8010a74:	f000 f99e 	bl	8010db4 <__ieee754_sqrt>
 8010a78:	a331      	add	r3, pc, #196	; (adr r3, 8010b40 <__ieee754_acos+0x2b8>)
 8010a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7e:	4620      	mov	r0, r4
 8010a80:	4629      	mov	r1, r5
 8010a82:	ec57 6b10 	vmov	r6, r7, d0
 8010a86:	f7ef fdd7 	bl	8000638 <__aeabi_dmul>
 8010a8a:	a32f      	add	r3, pc, #188	; (adr r3, 8010b48 <__ieee754_acos+0x2c0>)
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	f7ef fc1a 	bl	80002c8 <__aeabi_dsub>
 8010a94:	4622      	mov	r2, r4
 8010a96:	462b      	mov	r3, r5
 8010a98:	f7ef fdce 	bl	8000638 <__aeabi_dmul>
 8010a9c:	a32c      	add	r3, pc, #176	; (adr r3, 8010b50 <__ieee754_acos+0x2c8>)
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	f7ef fc13 	bl	80002cc <__adddf3>
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	462b      	mov	r3, r5
 8010aaa:	f7ef fdc5 	bl	8000638 <__aeabi_dmul>
 8010aae:	a32a      	add	r3, pc, #168	; (adr r3, 8010b58 <__ieee754_acos+0x2d0>)
 8010ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab4:	f7ef fc08 	bl	80002c8 <__aeabi_dsub>
 8010ab8:	4622      	mov	r2, r4
 8010aba:	462b      	mov	r3, r5
 8010abc:	f7ef fdbc 	bl	8000638 <__aeabi_dmul>
 8010ac0:	4b2e      	ldr	r3, [pc, #184]	; (8010b7c <__ieee754_acos+0x2f4>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f7ef fc02 	bl	80002cc <__adddf3>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	460b      	mov	r3, r1
 8010acc:	4640      	mov	r0, r8
 8010ace:	4649      	mov	r1, r9
 8010ad0:	f7ef fedc 	bl	800088c <__aeabi_ddiv>
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	463b      	mov	r3, r7
 8010ad8:	f7ef fdae 	bl	8000638 <__aeabi_dmul>
 8010adc:	a320      	add	r3, pc, #128	; (adr r3, 8010b60 <__ieee754_acos+0x2d8>)
 8010ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae2:	f7ef fbf1 	bl	80002c8 <__aeabi_dsub>
 8010ae6:	4632      	mov	r2, r6
 8010ae8:	463b      	mov	r3, r7
 8010aea:	f7ef fbef 	bl	80002cc <__adddf3>
 8010aee:	4602      	mov	r2, r0
 8010af0:	460b      	mov	r3, r1
 8010af2:	f7ef fbeb 	bl	80002cc <__adddf3>
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	a103      	add	r1, pc, #12	; (adr r1, 8010b08 <__ieee754_acos+0x280>)
 8010afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b00:	e76f      	b.n	80109e2 <__ieee754_acos+0x15a>
 8010b02:	bf00      	nop
 8010b04:	f3af 8000 	nop.w
 8010b08:	54442d18 	.word	0x54442d18
 8010b0c:	400921fb 	.word	0x400921fb
 8010b10:	0dfdf709 	.word	0x0dfdf709
 8010b14:	3f023de1 	.word	0x3f023de1
 8010b18:	7501b288 	.word	0x7501b288
 8010b1c:	3f49efe0 	.word	0x3f49efe0
 8010b20:	b5688f3b 	.word	0xb5688f3b
 8010b24:	3fa48228 	.word	0x3fa48228
 8010b28:	0e884455 	.word	0x0e884455
 8010b2c:	3fc9c155 	.word	0x3fc9c155
 8010b30:	03eb6f7d 	.word	0x03eb6f7d
 8010b34:	3fd4d612 	.word	0x3fd4d612
 8010b38:	55555555 	.word	0x55555555
 8010b3c:	3fc55555 	.word	0x3fc55555
 8010b40:	b12e9282 	.word	0xb12e9282
 8010b44:	3fb3b8c5 	.word	0x3fb3b8c5
 8010b48:	1b8d0159 	.word	0x1b8d0159
 8010b4c:	3fe6066c 	.word	0x3fe6066c
 8010b50:	9c598ac8 	.word	0x9c598ac8
 8010b54:	40002ae5 	.word	0x40002ae5
 8010b58:	1c8a2d4b 	.word	0x1c8a2d4b
 8010b5c:	40033a27 	.word	0x40033a27
 8010b60:	33145c07 	.word	0x33145c07
 8010b64:	3c91a626 	.word	0x3c91a626
 8010b68:	54442d18 	.word	0x54442d18
 8010b6c:	3ff921fb 	.word	0x3ff921fb
 8010b70:	3fefffff 	.word	0x3fefffff
 8010b74:	3fdfffff 	.word	0x3fdfffff
 8010b78:	3c600000 	.word	0x3c600000
 8010b7c:	3ff00000 	.word	0x3ff00000
 8010b80:	3fe00000 	.word	0x3fe00000
 8010b84:	ee10 2a10 	vmov	r2, s0
 8010b88:	462b      	mov	r3, r5
 8010b8a:	496d      	ldr	r1, [pc, #436]	; (8010d40 <__ieee754_acos+0x4b8>)
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f7ef fb9b 	bl	80002c8 <__aeabi_dsub>
 8010b92:	4b6c      	ldr	r3, [pc, #432]	; (8010d44 <__ieee754_acos+0x4bc>)
 8010b94:	2200      	movs	r2, #0
 8010b96:	f7ef fd4f 	bl	8000638 <__aeabi_dmul>
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	460d      	mov	r5, r1
 8010b9e:	ec45 4b10 	vmov	d0, r4, r5
 8010ba2:	f000 f907 	bl	8010db4 <__ieee754_sqrt>
 8010ba6:	a34e      	add	r3, pc, #312	; (adr r3, 8010ce0 <__ieee754_acos+0x458>)
 8010ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bac:	4620      	mov	r0, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	ec59 8b10 	vmov	r8, r9, d0
 8010bb4:	f7ef fd40 	bl	8000638 <__aeabi_dmul>
 8010bb8:	a34b      	add	r3, pc, #300	; (adr r3, 8010ce8 <__ieee754_acos+0x460>)
 8010bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbe:	f7ef fb85 	bl	80002cc <__adddf3>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	462b      	mov	r3, r5
 8010bc6:	f7ef fd37 	bl	8000638 <__aeabi_dmul>
 8010bca:	a349      	add	r3, pc, #292	; (adr r3, 8010cf0 <__ieee754_acos+0x468>)
 8010bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd0:	f7ef fb7a 	bl	80002c8 <__aeabi_dsub>
 8010bd4:	4622      	mov	r2, r4
 8010bd6:	462b      	mov	r3, r5
 8010bd8:	f7ef fd2e 	bl	8000638 <__aeabi_dmul>
 8010bdc:	a346      	add	r3, pc, #280	; (adr r3, 8010cf8 <__ieee754_acos+0x470>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	f7ef fb73 	bl	80002cc <__adddf3>
 8010be6:	4622      	mov	r2, r4
 8010be8:	462b      	mov	r3, r5
 8010bea:	f7ef fd25 	bl	8000638 <__aeabi_dmul>
 8010bee:	a344      	add	r3, pc, #272	; (adr r3, 8010d00 <__ieee754_acos+0x478>)
 8010bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf4:	f7ef fb68 	bl	80002c8 <__aeabi_dsub>
 8010bf8:	4622      	mov	r2, r4
 8010bfa:	462b      	mov	r3, r5
 8010bfc:	f7ef fd1c 	bl	8000638 <__aeabi_dmul>
 8010c00:	a341      	add	r3, pc, #260	; (adr r3, 8010d08 <__ieee754_acos+0x480>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	f7ef fb61 	bl	80002cc <__adddf3>
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	462b      	mov	r3, r5
 8010c0e:	f7ef fd13 	bl	8000638 <__aeabi_dmul>
 8010c12:	a33f      	add	r3, pc, #252	; (adr r3, 8010d10 <__ieee754_acos+0x488>)
 8010c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c18:	4682      	mov	sl, r0
 8010c1a:	468b      	mov	fp, r1
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	4629      	mov	r1, r5
 8010c20:	f7ef fd0a 	bl	8000638 <__aeabi_dmul>
 8010c24:	a33c      	add	r3, pc, #240	; (adr r3, 8010d18 <__ieee754_acos+0x490>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fb4d 	bl	80002c8 <__aeabi_dsub>
 8010c2e:	4622      	mov	r2, r4
 8010c30:	462b      	mov	r3, r5
 8010c32:	f7ef fd01 	bl	8000638 <__aeabi_dmul>
 8010c36:	a33a      	add	r3, pc, #232	; (adr r3, 8010d20 <__ieee754_acos+0x498>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	f7ef fb46 	bl	80002cc <__adddf3>
 8010c40:	4622      	mov	r2, r4
 8010c42:	462b      	mov	r3, r5
 8010c44:	f7ef fcf8 	bl	8000638 <__aeabi_dmul>
 8010c48:	a337      	add	r3, pc, #220	; (adr r3, 8010d28 <__ieee754_acos+0x4a0>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fb3b 	bl	80002c8 <__aeabi_dsub>
 8010c52:	4622      	mov	r2, r4
 8010c54:	462b      	mov	r3, r5
 8010c56:	f7ef fcef 	bl	8000638 <__aeabi_dmul>
 8010c5a:	4b39      	ldr	r3, [pc, #228]	; (8010d40 <__ieee754_acos+0x4b8>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f7ef fb35 	bl	80002cc <__adddf3>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4650      	mov	r0, sl
 8010c68:	4659      	mov	r1, fp
 8010c6a:	f7ef fe0f 	bl	800088c <__aeabi_ddiv>
 8010c6e:	4642      	mov	r2, r8
 8010c70:	464b      	mov	r3, r9
 8010c72:	f7ef fce1 	bl	8000638 <__aeabi_dmul>
 8010c76:	2600      	movs	r6, #0
 8010c78:	4682      	mov	sl, r0
 8010c7a:	468b      	mov	fp, r1
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	464b      	mov	r3, r9
 8010c80:	4630      	mov	r0, r6
 8010c82:	4649      	mov	r1, r9
 8010c84:	f7ef fcd8 	bl	8000638 <__aeabi_dmul>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	4629      	mov	r1, r5
 8010c90:	f7ef fb1a 	bl	80002c8 <__aeabi_dsub>
 8010c94:	4632      	mov	r2, r6
 8010c96:	4604      	mov	r4, r0
 8010c98:	460d      	mov	r5, r1
 8010c9a:	464b      	mov	r3, r9
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f7ef fb14 	bl	80002cc <__adddf3>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	4620      	mov	r0, r4
 8010caa:	4629      	mov	r1, r5
 8010cac:	f7ef fdee 	bl	800088c <__aeabi_ddiv>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4650      	mov	r0, sl
 8010cb6:	4659      	mov	r1, fp
 8010cb8:	f7ef fb08 	bl	80002cc <__adddf3>
 8010cbc:	4632      	mov	r2, r6
 8010cbe:	464b      	mov	r3, r9
 8010cc0:	f7ef fb04 	bl	80002cc <__adddf3>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	f7ef fb00 	bl	80002cc <__adddf3>
 8010ccc:	e5fe      	b.n	80108cc <__ieee754_acos+0x44>
 8010cce:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010d30 <__ieee754_acos+0x4a8>
 8010cd2:	e5ed      	b.n	80108b0 <__ieee754_acos+0x28>
 8010cd4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010d38 <__ieee754_acos+0x4b0>
 8010cd8:	e5ea      	b.n	80108b0 <__ieee754_acos+0x28>
 8010cda:	bf00      	nop
 8010cdc:	f3af 8000 	nop.w
 8010ce0:	0dfdf709 	.word	0x0dfdf709
 8010ce4:	3f023de1 	.word	0x3f023de1
 8010ce8:	7501b288 	.word	0x7501b288
 8010cec:	3f49efe0 	.word	0x3f49efe0
 8010cf0:	b5688f3b 	.word	0xb5688f3b
 8010cf4:	3fa48228 	.word	0x3fa48228
 8010cf8:	0e884455 	.word	0x0e884455
 8010cfc:	3fc9c155 	.word	0x3fc9c155
 8010d00:	03eb6f7d 	.word	0x03eb6f7d
 8010d04:	3fd4d612 	.word	0x3fd4d612
 8010d08:	55555555 	.word	0x55555555
 8010d0c:	3fc55555 	.word	0x3fc55555
 8010d10:	b12e9282 	.word	0xb12e9282
 8010d14:	3fb3b8c5 	.word	0x3fb3b8c5
 8010d18:	1b8d0159 	.word	0x1b8d0159
 8010d1c:	3fe6066c 	.word	0x3fe6066c
 8010d20:	9c598ac8 	.word	0x9c598ac8
 8010d24:	40002ae5 	.word	0x40002ae5
 8010d28:	1c8a2d4b 	.word	0x1c8a2d4b
 8010d2c:	40033a27 	.word	0x40033a27
	...
 8010d38:	54442d18 	.word	0x54442d18
 8010d3c:	3ff921fb 	.word	0x3ff921fb
 8010d40:	3ff00000 	.word	0x3ff00000
 8010d44:	3fe00000 	.word	0x3fe00000

08010d48 <sqrt>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	ed2d 8b02 	vpush	{d8}
 8010d4e:	ec55 4b10 	vmov	r4, r5, d0
 8010d52:	f000 f82f 	bl	8010db4 <__ieee754_sqrt>
 8010d56:	4622      	mov	r2, r4
 8010d58:	462b      	mov	r3, r5
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8010d62:	eef0 8a60 	vmov.f32	s17, s1
 8010d66:	f7ef ff01 	bl	8000b6c <__aeabi_dcmpun>
 8010d6a:	b990      	cbnz	r0, 8010d92 <sqrt+0x4a>
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	2300      	movs	r3, #0
 8010d70:	4620      	mov	r0, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef fed2 	bl	8000b1c <__aeabi_dcmplt>
 8010d78:	b158      	cbz	r0, 8010d92 <sqrt+0x4a>
 8010d7a:	f7fd f95b 	bl	800e034 <__errno>
 8010d7e:	2321      	movs	r3, #33	; 0x21
 8010d80:	6003      	str	r3, [r0, #0]
 8010d82:	2200      	movs	r2, #0
 8010d84:	2300      	movs	r3, #0
 8010d86:	4610      	mov	r0, r2
 8010d88:	4619      	mov	r1, r3
 8010d8a:	f7ef fd7f 	bl	800088c <__aeabi_ddiv>
 8010d8e:	ec41 0b18 	vmov	d8, r0, r1
 8010d92:	eeb0 0a48 	vmov.f32	s0, s16
 8010d96:	eef0 0a68 	vmov.f32	s1, s17
 8010d9a:	ecbd 8b02 	vpop	{d8}
 8010d9e:	bd38      	pop	{r3, r4, r5, pc}

08010da0 <fabs>:
 8010da0:	ec51 0b10 	vmov	r0, r1, d0
 8010da4:	ee10 2a10 	vmov	r2, s0
 8010da8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010dac:	ec43 2b10 	vmov	d0, r2, r3
 8010db0:	4770      	bx	lr
	...

08010db4 <__ieee754_sqrt>:
 8010db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db8:	ec55 4b10 	vmov	r4, r5, d0
 8010dbc:	4e67      	ldr	r6, [pc, #412]	; (8010f5c <__ieee754_sqrt+0x1a8>)
 8010dbe:	43ae      	bics	r6, r5
 8010dc0:	ee10 0a10 	vmov	r0, s0
 8010dc4:	ee10 2a10 	vmov	r2, s0
 8010dc8:	4629      	mov	r1, r5
 8010dca:	462b      	mov	r3, r5
 8010dcc:	d10d      	bne.n	8010dea <__ieee754_sqrt+0x36>
 8010dce:	f7ef fc33 	bl	8000638 <__aeabi_dmul>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	4629      	mov	r1, r5
 8010dda:	f7ef fa77 	bl	80002cc <__adddf3>
 8010dde:	4604      	mov	r4, r0
 8010de0:	460d      	mov	r5, r1
 8010de2:	ec45 4b10 	vmov	d0, r4, r5
 8010de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dea:	2d00      	cmp	r5, #0
 8010dec:	dc0b      	bgt.n	8010e06 <__ieee754_sqrt+0x52>
 8010dee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010df2:	4326      	orrs	r6, r4
 8010df4:	d0f5      	beq.n	8010de2 <__ieee754_sqrt+0x2e>
 8010df6:	b135      	cbz	r5, 8010e06 <__ieee754_sqrt+0x52>
 8010df8:	f7ef fa66 	bl	80002c8 <__aeabi_dsub>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	f7ef fd44 	bl	800088c <__aeabi_ddiv>
 8010e04:	e7eb      	b.n	8010dde <__ieee754_sqrt+0x2a>
 8010e06:	1509      	asrs	r1, r1, #20
 8010e08:	f000 808d 	beq.w	8010f26 <__ieee754_sqrt+0x172>
 8010e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010e18:	07c9      	lsls	r1, r1, #31
 8010e1a:	bf5c      	itt	pl
 8010e1c:	005b      	lslpl	r3, r3, #1
 8010e1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010e22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e26:	bf58      	it	pl
 8010e28:	0052      	lslpl	r2, r2, #1
 8010e2a:	2500      	movs	r5, #0
 8010e2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010e30:	1076      	asrs	r6, r6, #1
 8010e32:	0052      	lsls	r2, r2, #1
 8010e34:	f04f 0e16 	mov.w	lr, #22
 8010e38:	46ac      	mov	ip, r5
 8010e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e3e:	eb0c 0001 	add.w	r0, ip, r1
 8010e42:	4298      	cmp	r0, r3
 8010e44:	bfde      	ittt	le
 8010e46:	1a1b      	suble	r3, r3, r0
 8010e48:	eb00 0c01 	addle.w	ip, r0, r1
 8010e4c:	186d      	addle	r5, r5, r1
 8010e4e:	005b      	lsls	r3, r3, #1
 8010e50:	f1be 0e01 	subs.w	lr, lr, #1
 8010e54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010e58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010e5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010e60:	d1ed      	bne.n	8010e3e <__ieee754_sqrt+0x8a>
 8010e62:	4674      	mov	r4, lr
 8010e64:	2720      	movs	r7, #32
 8010e66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010e6a:	4563      	cmp	r3, ip
 8010e6c:	eb01 000e 	add.w	r0, r1, lr
 8010e70:	dc02      	bgt.n	8010e78 <__ieee754_sqrt+0xc4>
 8010e72:	d113      	bne.n	8010e9c <__ieee754_sqrt+0xe8>
 8010e74:	4290      	cmp	r0, r2
 8010e76:	d811      	bhi.n	8010e9c <__ieee754_sqrt+0xe8>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	eb00 0e01 	add.w	lr, r0, r1
 8010e7e:	da57      	bge.n	8010f30 <__ieee754_sqrt+0x17c>
 8010e80:	f1be 0f00 	cmp.w	lr, #0
 8010e84:	db54      	blt.n	8010f30 <__ieee754_sqrt+0x17c>
 8010e86:	f10c 0801 	add.w	r8, ip, #1
 8010e8a:	eba3 030c 	sub.w	r3, r3, ip
 8010e8e:	4290      	cmp	r0, r2
 8010e90:	bf88      	it	hi
 8010e92:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8010e96:	1a12      	subs	r2, r2, r0
 8010e98:	440c      	add	r4, r1
 8010e9a:	46c4      	mov	ip, r8
 8010e9c:	005b      	lsls	r3, r3, #1
 8010e9e:	3f01      	subs	r7, #1
 8010ea0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010ea4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ea8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010eac:	d1dd      	bne.n	8010e6a <__ieee754_sqrt+0xb6>
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	d01b      	beq.n	8010eea <__ieee754_sqrt+0x136>
 8010eb2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010f60 <__ieee754_sqrt+0x1ac>
 8010eb6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010f64 <__ieee754_sqrt+0x1b0>
 8010eba:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ebe:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ec2:	f7ef fa01 	bl	80002c8 <__aeabi_dsub>
 8010ec6:	e9da 8900 	ldrd	r8, r9, [sl]
 8010eca:	4602      	mov	r2, r0
 8010ecc:	460b      	mov	r3, r1
 8010ece:	4640      	mov	r0, r8
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	f7ef fe2d 	bl	8000b30 <__aeabi_dcmple>
 8010ed6:	b140      	cbz	r0, 8010eea <__ieee754_sqrt+0x136>
 8010ed8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8010edc:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ee0:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ee4:	d126      	bne.n	8010f34 <__ieee754_sqrt+0x180>
 8010ee6:	3501      	adds	r5, #1
 8010ee8:	463c      	mov	r4, r7
 8010eea:	106a      	asrs	r2, r5, #1
 8010eec:	0863      	lsrs	r3, r4, #1
 8010eee:	07e9      	lsls	r1, r5, #31
 8010ef0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010ef4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010ef8:	bf48      	it	mi
 8010efa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010efe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010f02:	461c      	mov	r4, r3
 8010f04:	e76d      	b.n	8010de2 <__ieee754_sqrt+0x2e>
 8010f06:	0ad3      	lsrs	r3, r2, #11
 8010f08:	3815      	subs	r0, #21
 8010f0a:	0552      	lsls	r2, r2, #21
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d0fa      	beq.n	8010f06 <__ieee754_sqrt+0x152>
 8010f10:	02dc      	lsls	r4, r3, #11
 8010f12:	d50a      	bpl.n	8010f2a <__ieee754_sqrt+0x176>
 8010f14:	f1c1 0420 	rsb	r4, r1, #32
 8010f18:	fa22 f404 	lsr.w	r4, r2, r4
 8010f1c:	1e4d      	subs	r5, r1, #1
 8010f1e:	408a      	lsls	r2, r1
 8010f20:	4323      	orrs	r3, r4
 8010f22:	1b41      	subs	r1, r0, r5
 8010f24:	e772      	b.n	8010e0c <__ieee754_sqrt+0x58>
 8010f26:	4608      	mov	r0, r1
 8010f28:	e7f0      	b.n	8010f0c <__ieee754_sqrt+0x158>
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	3101      	adds	r1, #1
 8010f2e:	e7ef      	b.n	8010f10 <__ieee754_sqrt+0x15c>
 8010f30:	46e0      	mov	r8, ip
 8010f32:	e7aa      	b.n	8010e8a <__ieee754_sqrt+0xd6>
 8010f34:	f7ef f9ca 	bl	80002cc <__adddf3>
 8010f38:	e9da 8900 	ldrd	r8, r9, [sl]
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	4640      	mov	r0, r8
 8010f42:	4649      	mov	r1, r9
 8010f44:	f7ef fdea 	bl	8000b1c <__aeabi_dcmplt>
 8010f48:	b120      	cbz	r0, 8010f54 <__ieee754_sqrt+0x1a0>
 8010f4a:	1ca0      	adds	r0, r4, #2
 8010f4c:	bf08      	it	eq
 8010f4e:	3501      	addeq	r5, #1
 8010f50:	3402      	adds	r4, #2
 8010f52:	e7ca      	b.n	8010eea <__ieee754_sqrt+0x136>
 8010f54:	3401      	adds	r4, #1
 8010f56:	f024 0401 	bic.w	r4, r4, #1
 8010f5a:	e7c6      	b.n	8010eea <__ieee754_sqrt+0x136>
 8010f5c:	7ff00000 	.word	0x7ff00000
 8010f60:	20000218 	.word	0x20000218
 8010f64:	20000220 	.word	0x20000220

08010f68 <round>:
 8010f68:	ec53 2b10 	vmov	r2, r3, d0
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8010f72:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8010f76:	2813      	cmp	r0, #19
 8010f78:	ee10 5a10 	vmov	r5, s0
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	dc18      	bgt.n	8010fb2 <round+0x4a>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	da09      	bge.n	8010f98 <round+0x30>
 8010f84:	3001      	adds	r0, #1
 8010f86:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8010f8a:	d103      	bne.n	8010f94 <round+0x2c>
 8010f8c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010f90:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010f94:	2300      	movs	r3, #0
 8010f96:	e02a      	b.n	8010fee <round+0x86>
 8010f98:	4c16      	ldr	r4, [pc, #88]	; (8010ff4 <round+0x8c>)
 8010f9a:	4104      	asrs	r4, r0
 8010f9c:	ea03 0604 	and.w	r6, r3, r4
 8010fa0:	4316      	orrs	r6, r2
 8010fa2:	d011      	beq.n	8010fc8 <round+0x60>
 8010fa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010fa8:	4103      	asrs	r3, r0
 8010faa:	440b      	add	r3, r1
 8010fac:	ea23 0104 	bic.w	r1, r3, r4
 8010fb0:	e7f0      	b.n	8010f94 <round+0x2c>
 8010fb2:	2833      	cmp	r0, #51	; 0x33
 8010fb4:	dd0b      	ble.n	8010fce <round+0x66>
 8010fb6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010fba:	d105      	bne.n	8010fc8 <round+0x60>
 8010fbc:	ee10 0a10 	vmov	r0, s0
 8010fc0:	f7ef f984 	bl	80002cc <__adddf3>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	ec43 2b10 	vmov	d0, r2, r3
 8010fcc:	bd70      	pop	{r4, r5, r6, pc}
 8010fce:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8010fd2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010fd6:	40f4      	lsrs	r4, r6
 8010fd8:	4214      	tst	r4, r2
 8010fda:	d0f5      	beq.n	8010fc8 <round+0x60>
 8010fdc:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	4083      	lsls	r3, r0
 8010fe4:	195b      	adds	r3, r3, r5
 8010fe6:	bf28      	it	cs
 8010fe8:	3101      	addcs	r1, #1
 8010fea:	ea23 0304 	bic.w	r3, r3, r4
 8010fee:	461a      	mov	r2, r3
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	e7e9      	b.n	8010fc8 <round+0x60>
 8010ff4:	000fffff 	.word	0x000fffff

08010ff8 <trunc>:
 8010ff8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8010ffc:	ec5c bb10 	vmov	fp, ip, d0
 8011000:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8011004:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8011008:	2913      	cmp	r1, #19
 801100a:	4664      	mov	r4, ip
 801100c:	dc11      	bgt.n	8011032 <trunc+0x3a>
 801100e:	2900      	cmp	r1, #0
 8011010:	bfa7      	ittee	ge
 8011012:	4b15      	ldrge	r3, [pc, #84]	; (8011068 <trunc+0x70>)
 8011014:	fa43 f101 	asrge.w	r1, r3, r1
 8011018:	2200      	movlt	r2, #0
 801101a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 801101e:	bfa4      	itt	ge
 8011020:	2200      	movge	r2, #0
 8011022:	ea01 030c 	andge.w	r3, r1, ip
 8011026:	4693      	mov	fp, r2
 8011028:	469c      	mov	ip, r3
 801102a:	ec4c bb10 	vmov	d0, fp, ip
 801102e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8011032:	2933      	cmp	r1, #51	; 0x33
 8011034:	dd0d      	ble.n	8011052 <trunc+0x5a>
 8011036:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801103a:	d1f6      	bne.n	801102a <trunc+0x32>
 801103c:	4663      	mov	r3, ip
 801103e:	ee10 2a10 	vmov	r2, s0
 8011042:	ee10 0a10 	vmov	r0, s0
 8011046:	4621      	mov	r1, r4
 8011048:	f7ef f940 	bl	80002cc <__adddf3>
 801104c:	4683      	mov	fp, r0
 801104e:	468c      	mov	ip, r1
 8011050:	e7eb      	b.n	801102a <trunc+0x32>
 8011052:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8011056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801105a:	40c3      	lsrs	r3, r0
 801105c:	ea2b 0603 	bic.w	r6, fp, r3
 8011060:	46b3      	mov	fp, r6
 8011062:	46a4      	mov	ip, r4
 8011064:	e7e1      	b.n	801102a <trunc+0x32>
 8011066:	bf00      	nop
 8011068:	fff00000 	.word	0xfff00000
 801106c:	00000000 	.word	0x00000000

08011070 <nan>:
 8011070:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011078 <nan+0x8>
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop
 8011078:	00000000 	.word	0x00000000
 801107c:	7ff80000 	.word	0x7ff80000

08011080 <_init>:
 8011080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011082:	bf00      	nop
 8011084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011086:	bc08      	pop	{r3}
 8011088:	469e      	mov	lr, r3
 801108a:	4770      	bx	lr

0801108c <_fini>:
 801108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108e:	bf00      	nop
 8011090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011092:	bc08      	pop	{r3}
 8011094:	469e      	mov	lr, r3
 8011096:	4770      	bx	lr
