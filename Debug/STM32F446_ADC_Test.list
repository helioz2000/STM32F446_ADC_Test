
STM32F446_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004bb8  08010aa0  08010aa0  00020aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015658  08015658  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08015658  08015658  00025658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015660  08015660  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015660  08015660  00025660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015664  08015664  00025664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08015668  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000941c  20000220  08015888  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000963c  08015888  0003963c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001975e  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cd4  00000000  00000000  000499f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0004d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000125d  00000000  00000000  0004ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002768b  00000000  00000000  000500cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9bc  00000000  00000000  00077758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5ab6  00000000  00000000  00097114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ac4  00000000  00000000  0017cbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00184690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010a88 	.word	0x08010a88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08010a88 	.word	0x08010a88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca6:	f000 b9bb 	b.w	8001020 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b970 	b.w	8001020 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	460d      	mov	r5, r1
 8000d60:	4604      	mov	r4, r0
 8000d62:	460f      	mov	r7, r1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d14a      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	4694      	mov	ip, r2
 8000d6c:	d965      	bls.n	8000e3a <__udivmoddi4+0xe2>
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	b143      	cbz	r3, 8000d86 <__udivmoddi4+0x2e>
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	f1c3 0220 	rsb	r2, r3, #32
 8000d7c:	409f      	lsls	r7, r3
 8000d7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d82:	4317      	orrs	r7, r2
 8000d84:	409c      	lsls	r4, r3
 8000d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8a:	fa1f f58c 	uxth.w	r5, ip
 8000d8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d92:	0c22      	lsrs	r2, r4, #16
 8000d94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9c:	fb01 f005 	mul.w	r0, r1, r5
 8000da0:	4290      	cmp	r0, r2
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x62>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dac:	f080 811c 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000db0:	4290      	cmp	r0, r2
 8000db2:	f240 8119 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4462      	add	r2, ip
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	b2a4      	uxth	r4, r4
 8000dbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dca:	fb00 f505 	mul.w	r5, r0, r5
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x90>
 8000dd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x294>
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x294>
 8000de4:	4464      	add	r4, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dec:	1b64      	subs	r4, r4, r5
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11e      	cbz	r6, 8000dfa <__udivmoddi4+0xa2>
 8000df2:	40dc      	lsrs	r4, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0xbc>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80ed 	beq.w	8000fe2 <__udivmoddi4+0x28a>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0e:	4608      	mov	r0, r1
 8000e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e14:	fab3 f183 	clz	r1, r3
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	d149      	bne.n	8000eb0 <__udivmoddi4+0x158>
 8000e1c:	42ab      	cmp	r3, r5
 8000e1e:	d302      	bcc.n	8000e26 <__udivmoddi4+0xce>
 8000e20:	4282      	cmp	r2, r0
 8000e22:	f200 80f8 	bhi.w	8001016 <__udivmoddi4+0x2be>
 8000e26:	1a84      	subs	r4, r0, r2
 8000e28:	eb65 0203 	sbc.w	r2, r5, r3
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d0e2      	beq.n	8000dfa <__udivmoddi4+0xa2>
 8000e34:	e9c6 4700 	strd	r4, r7, [r6]
 8000e38:	e7df      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000e3a:	b902      	cbnz	r2, 8000e3e <__udivmoddi4+0xe6>
 8000e3c:	deff      	udf	#255	; 0xff
 8000e3e:	fab2 f382 	clz	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e48:	1a8a      	subs	r2, r1, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	2101      	movs	r1, #1
 8000e54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e58:	fb07 2015 	mls	r0, r7, r5, r2
 8000e5c:	0c22      	lsrs	r2, r4, #16
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e62:	fb0e f005 	mul.w	r0, lr, r5
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4290      	cmp	r0, r2
 8000e76:	f200 80cb 	bhi.w	8001010 <__udivmoddi4+0x2b8>
 8000e7a:	4645      	mov	r5, r8
 8000e7c:	1a12      	subs	r2, r2, r0
 8000e7e:	b2a4      	uxth	r4, r4
 8000e80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e84:	fb07 2210 	mls	r2, r7, r0, r2
 8000e88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x14e>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e9c:	d202      	bcs.n	8000ea4 <__udivmoddi4+0x14c>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	f200 80bb 	bhi.w	800101a <__udivmoddi4+0x2c2>
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	eba4 040e 	sub.w	r4, r4, lr
 8000eaa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eae:	e79f      	b.n	8000df0 <__udivmoddi4+0x98>
 8000eb0:	f1c1 0720 	rsb	r7, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ebe:	fa05 f401 	lsl.w	r4, r5, r1
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	40fd      	lsrs	r5, r7
 8000ec8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ee0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee4:	42a5      	cmp	r5, r4
 8000ee6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eea:	fa00 f001 	lsl.w	r0, r0, r1
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef8:	f080 8088 	bcs.w	800100c <__udivmoddi4+0x2b4>
 8000efc:	42a5      	cmp	r5, r4
 8000efe:	f240 8085 	bls.w	800100c <__udivmoddi4+0x2b4>
 8000f02:	f1a8 0802 	sub.w	r8, r8, #2
 8000f06:	4464      	add	r4, ip
 8000f08:	1b64      	subs	r4, r4, r5
 8000f0a:	b29d      	uxth	r5, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f28:	d26c      	bcs.n	8001004 <__udivmoddi4+0x2ac>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d96a      	bls.n	8001004 <__udivmoddi4+0x2ac>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	4464      	add	r4, ip
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fba3 9502 	umull	r9, r5, r3, r2
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	46c8      	mov	r8, r9
 8000f42:	46ae      	mov	lr, r5
 8000f44:	d356      	bcc.n	8000ff4 <__udivmoddi4+0x29c>
 8000f46:	d053      	beq.n	8000ff0 <__udivmoddi4+0x298>
 8000f48:	b156      	cbz	r6, 8000f60 <__udivmoddi4+0x208>
 8000f4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f52:	fa04 f707 	lsl.w	r7, r4, r7
 8000f56:	40ca      	lsrs	r2, r1
 8000f58:	40cc      	lsrs	r4, r1
 8000f5a:	4317      	orrs	r7, r2
 8000f5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f60:	4618      	mov	r0, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	f1c3 0120 	rsb	r1, r3, #32
 8000f6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f70:	fa20 f201 	lsr.w	r2, r0, r1
 8000f74:	fa25 f101 	lsr.w	r1, r5, r1
 8000f78:	409d      	lsls	r5, r3
 8000f7a:	432a      	orrs	r2, r5
 8000f7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f80:	fa1f fe8c 	uxth.w	lr, ip
 8000f84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f88:	fb07 1510 	mls	r5, r7, r0, r1
 8000f8c:	0c11      	lsrs	r1, r2, #16
 8000f8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f92:	fb00 f50e 	mul.w	r5, r0, lr
 8000f96:	428d      	cmp	r5, r1
 8000f98:	fa04 f403 	lsl.w	r4, r4, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x258>
 8000f9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa6:	d22f      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d92d      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4461      	add	r1, ip
 8000fb0:	1b49      	subs	r1, r1, r5
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x282>
 8000fc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fcc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd0:	d216      	bcs.n	8001000 <__udivmoddi4+0x2a8>
 8000fd2:	4291      	cmp	r1, r2
 8000fd4:	d914      	bls.n	8001000 <__udivmoddi4+0x2a8>
 8000fd6:	3d02      	subs	r5, #2
 8000fd8:	4462      	add	r2, ip
 8000fda:	1a52      	subs	r2, r2, r1
 8000fdc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe0:	e738      	b.n	8000e54 <__udivmoddi4+0xfc>
 8000fe2:	4631      	mov	r1, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e708      	b.n	8000dfa <__udivmoddi4+0xa2>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	e6e6      	b.n	8000dba <__udivmoddi4+0x62>
 8000fec:	4610      	mov	r0, r2
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x90>
 8000ff0:	4548      	cmp	r0, r9
 8000ff2:	d2a9      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	e7a3      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8001000:	4645      	mov	r5, r8
 8001002:	e7ea      	b.n	8000fda <__udivmoddi4+0x282>
 8001004:	462b      	mov	r3, r5
 8001006:	e794      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001008:	4640      	mov	r0, r8
 800100a:	e7d1      	b.n	8000fb0 <__udivmoddi4+0x258>
 800100c:	46d0      	mov	r8, sl
 800100e:	e77b      	b.n	8000f08 <__udivmoddi4+0x1b0>
 8001010:	3d02      	subs	r5, #2
 8001012:	4462      	add	r2, ip
 8001014:	e732      	b.n	8000e7c <__udivmoddi4+0x124>
 8001016:	4608      	mov	r0, r1
 8001018:	e70a      	b.n	8000e30 <__udivmoddi4+0xd8>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e742      	b.n	8000ea6 <__udivmoddi4+0x14e>

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <calc_process_dma_buffer>:
 * One DMA buffer contains 2 data sets, one which is "completed" and
 * one which is currently in use by DMA. The parameter "second_half" indicates which
 * of the two halves is ready for processing (not in use by DMA).
 * The DMA buffer is made up of a sequence of alternate readings (CH0,CH1,CH0,CH1, ....)
 */
int calc_process_dma_buffer(int second_half, int adc_num) {
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	uint16_t i = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	82fb      	strh	r3, [r7, #22]
	uint16_t dma_buf_start, dma_buf_end;		// DMA buffer source
	uint16_t raw_buf_idx = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	827b      	strh	r3, [r7, #18]
	uint8_t raw_buf_first, raw_buf_second;		// destination index for raw readings
	// adc_num range check (has to be either ADC1 or ADC2
	if ( (adc_num != ADC1_IDX) && (adc_num != ADC2_IDX) ) {
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <calc_process_dma_buffer+0x24>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <calc_process_dma_buffer+0x24>
		return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	e0d0      	b.n	80011ea <calc_process_dma_buffer+0x1c6>
	}
	// channel index to raw buffer array
	raw_buf_first = adc_num *2;			// destination index for first channel reading in DMA buffer
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
	raw_buf_second = raw_buf_first + 1; // destination index for second channel reading in DMA buffer
 8001050:	7c7b      	ldrb	r3, [r7, #17]
 8001052:	3301      	adds	r3, #1
 8001054:	743b      	strb	r3, [r7, #16]
	// first or second half of DMA buffer?
	if (second_half) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <calc_process_dma_buffer+0x40>
		dma_buf_start = ADC_DMA_BUF_SIZE / 2;
 800105c:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 8001060:	82bb      	strh	r3, [r7, #20]
 8001062:	e001      	b.n	8001068 <calc_process_dma_buffer+0x44>
	} else {
		dma_buf_start = 0;	// first half
 8001064:	2300      	movs	r3, #0
 8001066:	82bb      	strh	r3, [r7, #20]
	}
	dma_buf_end = dma_buf_start + (ADC_DMA_BUF_SIZE / 2) -1;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	f203 638f 	addw	r3, r3, #1679	; 0x68f
 800106e:	81fb      	strh	r3, [r7, #14]

	// clear meta data in sample buffer
	sample_buf_meta[raw_buf_first].min = ADC_FS_RAW;
 8001070:	7c7a      	ldrb	r2, [r7, #17]
 8001072:	4960      	ldr	r1, [pc, #384]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001082:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].max = 0;
 8001084:	7c7a      	ldrb	r2, [r7, #17]
 8001086:	495b      	ldr	r1, [pc, #364]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	3302      	adds	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].min = ADC_FS_RAW;
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	4956      	ldr	r1, [pc, #344]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010aa:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].max = 0;
 80010ac:	7c3a      	ldrb	r2, [r7, #16]
 80010ae:	4951      	ldr	r1, [pc, #324]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3302      	adds	r3, #2
 80010bc:	2200      	movs	r2, #0
 80010be:	801a      	strh	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_pos = -1;
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	494c      	ldr	r1, [pc, #304]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3304      	adds	r3, #4
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].zero_cross_neg = -1;
 80010d6:	7c7a      	ldrb	r2, [r7, #17]
 80010d8:	4946      	ldr	r1, [pc, #280]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	3308      	adds	r3, #8
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_pos = -1;
 80010ec:	7c3a      	ldrb	r2, [r7, #16]
 80010ee:	4941      	ldr	r1, [pc, #260]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].zero_cross_neg = -1;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	493b      	ldr	r1, [pc, #236]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001116:	601a      	str	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].measurements_valid = 0;
 8001118:	7c7a      	ldrb	r2, [r7, #17]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	330c      	adds	r3, #12
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].measurements_valid = 0;
 800112c:	7c3a      	ldrb	r2, [r7, #16]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	330c      	adds	r3, #12
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_first].value_is_zero = 0;
 8001140:	7c7a      	ldrb	r2, [r7, #17]
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	sample_buf_meta[raw_buf_second].value_is_zero = 0;
 8001154:	7c3a      	ldrb	r2, [r7, #16]
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <calc_process_dma_buffer+0x1d0>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	330d      	adds	r3, #13
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

	// split DMA buffer in to channels and copy readings into raw buffers
	// step of ADC_NUM_CHANNELS = 2
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 8001168:	8abb      	ldrh	r3, [r7, #20]
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e030      	b.n	80011d0 <calc_process_dma_buffer+0x1ac>
		adc_raw_buf[raw_buf_first][raw_buf_idx] = adc_dma_buf[adc_num][i];		// first entry in DMA buffer
 800116e:	8af9      	ldrh	r1, [r7, #22]
 8001170:	7c7a      	ldrb	r2, [r7, #17]
 8001172:	8a7b      	ldrh	r3, [r7, #18]
 8001174:	4c20      	ldr	r4, [pc, #128]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 8001176:	6838      	ldr	r0, [r7, #0]
 8001178:	f44f 6552 	mov.w	r5, #3360	; 0xd20
 800117c:	fb05 f000 	mul.w	r0, r5, r0
 8001180:	4401      	add	r1, r0
 8001182:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8001186:	491d      	ldr	r1, [pc, #116]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 8001188:	f44f 7052 	mov.w	r0, #840	; 0x348
 800118c:	fb00 f202 	mul.w	r2, r0, r2
 8001190:	4413      	add	r3, r2
 8001192:	4622      	mov	r2, r4
 8001194:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		adc_raw_buf[raw_buf_second][raw_buf_idx++] = adc_dma_buf[adc_num][i+1]; // second entry in DMA buffer
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	7c3a      	ldrb	r2, [r7, #16]
 800119e:	8a7b      	ldrh	r3, [r7, #18]
 80011a0:	1c58      	adds	r0, r3, #1
 80011a2:	8278      	strh	r0, [r7, #18]
 80011a4:	461d      	mov	r5, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <calc_process_dma_buffer+0x1d4>)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 6452 	mov.w	r4, #3360	; 0xd20
 80011ae:	fb04 f303 	mul.w	r3, r4, r3
 80011b2:	440b      	add	r3, r1
 80011b4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80011b8:	4910      	ldr	r1, [pc, #64]	; (80011fc <calc_process_dma_buffer+0x1d8>)
 80011ba:	f44f 7352 	mov.w	r3, #840	; 0x348
 80011be:	fb02 f303 	mul.w	r3, r2, r3
 80011c2:	442b      	add	r3, r5
 80011c4:	4602      	mov	r2, r0
 80011c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=dma_buf_start; i<=dma_buf_end; i+=ADC_NUM_CHANNELS) {
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	3302      	adds	r3, #2
 80011ce:	82fb      	strh	r3, [r7, #22]
 80011d0:	8afa      	ldrh	r2, [r7, #22]
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d9ca      	bls.n	800116e <calc_process_dma_buffer+0x14a>

	}
	// down-sample both channels
	calc_downsample(raw_buf_first);
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f93c 	bl	8001458 <calc_downsample>
	calc_downsample(raw_buf_second);
 80011e0:	7c3b      	ldrb	r3, [r7, #16]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f938 	bl	8001458 <calc_downsample>
	return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000023c 	.word	0x2000023c
 80011f8:	200024c8 	.word	0x200024c8
 80011fc:	20005948 	.word	0x20005948

08001200 <calc_zero_detector>:
 * where one value is above zero threshold and a neighboring point is below
 * then check another point either side of those points to see if
 * they conform to the same slope. Out of those 3 detections at least
 * two being true will yield record a crossing.
 */
void calc_zero_detector(uint8_t bufnum, int zeropoint, int window) {
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	73fb      	strb	r3, [r7, #15]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b03      	cmp	r3, #3
 8001212:	f200 8117 	bhi.w	8001444 <calc_zero_detector+0x244>
	uint8_t detected = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	77fb      	strb	r3, [r7, #31]
	uint8_t detect_count = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	77bb      	strb	r3, [r7, #30]
	// set the detection window
	int window_h = zeropoint + (window/2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0fda      	lsrs	r2, r3, #31
 8001222:	4413      	add	r3, r2
 8001224:	105b      	asrs	r3, r3, #1
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
	int window_l = zeropoint - (window/2);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	e0df      	b.n	8001406 <calc_zero_detector+0x206>
		// start looking for crossing if reading is within the window
		if ( (sample_buf[bufnum][i] >= window_l) && (sample_buf[bufnum][i] <= window_h) ) {
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4981      	ldr	r1, [pc, #516]	; (8001450 <calc_zero_detector+0x250>)
 800124a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800124e:	fb03 f202 	mul.w	r2, r3, r2
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800125a:	461a      	mov	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4293      	cmp	r3, r2
 8001260:	f300 80ce 	bgt.w	8001400 <calc_zero_detector+0x200>
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	497a      	ldr	r1, [pc, #488]	; (8001450 <calc_zero_detector+0x250>)
 8001268:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800126c:	fb03 f202 	mul.w	r2, r3, r2
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4413      	add	r3, r2
 8001274:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001278:	461a      	mov	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4293      	cmp	r3, r2
 800127e:	f2c0 80bf 	blt.w	8001400 <calc_zero_detector+0x200>
			// positive slope crossing
			if ( (sample_buf[bufnum][i] > zeropoint) && (sample_buf[bufnum][i-1] <= zeropoint) ) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4972      	ldr	r1, [pc, #456]	; (8001450 <calc_zero_detector+0x250>)
 8001286:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4413      	add	r3, r2
 8001292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4293      	cmp	r3, r2
 800129c:	da3d      	bge.n	800131a <calc_zero_detector+0x11a>
 800129e:	7bfa      	ldrb	r2, [r7, #15]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	496a      	ldr	r1, [pc, #424]	; (8001450 <calc_zero_detector+0x250>)
 80012a6:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012aa:	fb00 f202 	mul.w	r2, r0, r2
 80012ae:	4413      	add	r3, r2
 80012b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	db2e      	blt.n	800131a <calc_zero_detector+0x11a>
				detected++;
 80012bc:	7ffb      	ldrb	r3, [r7, #31]
 80012be:	3301      	adds	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	dd11      	ble.n	80012ec <calc_zero_detector+0xec>
					if (sample_buf[bufnum][i-2] < zeropoint) {
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	3b02      	subs	r3, #2
 80012ce:	4960      	ldr	r1, [pc, #384]	; (8001450 <calc_zero_detector+0x250>)
 80012d0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80012d4:	fb00 f202 	mul.w	r2, r0, r2
 80012d8:	4413      	add	r3, r2
 80012da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	dd02      	ble.n	80012ec <calc_zero_detector+0xec>
						detected++;
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	3301      	adds	r3, #1
 80012ea:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	3302      	adds	r3, #2
 80012f0:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80012f4:	d211      	bcs.n	800131a <calc_zero_detector+0x11a>
					if (sample_buf[bufnum][i+2] > zeropoint) {
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4954      	ldr	r1, [pc, #336]	; (8001450 <calc_zero_detector+0x250>)
 80012fe:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001302:	fb00 f202 	mul.w	r2, r0, r2
 8001306:	4413      	add	r3, r2
 8001308:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800130c:	461a      	mov	r2, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	4293      	cmp	r3, r2
 8001312:	da02      	bge.n	800131a <calc_zero_detector+0x11a>
						detected++;
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	3301      	adds	r3, #1
 8001318:	77fb      	strb	r3, [r7, #31]
					}
				}
			}
			if (detected > 1) {	// if at least two of the above checks have a positive result
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d90f      	bls.n	8001340 <calc_zero_detector+0x140>
				sample_buf_meta[bufnum].zero_cross_pos = i;	// set positive crossing point
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	494c      	ldr	r1, [pc, #304]	; (8001454 <calc_zero_detector+0x254>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	601a      	str	r2, [r3, #0]
				detected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	77fb      	strb	r3, [r7, #31]
				detect_count++;
 8001338:	7fbb      	ldrb	r3, [r7, #30]
 800133a:	3301      	adds	r3, #1
 800133c:	77bb      	strb	r3, [r7, #30]
				continue;		// back to for loop
 800133e:	e05f      	b.n	8001400 <calc_zero_detector+0x200>
			}
			detected = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	77fb      	strb	r3, [r7, #31]
			// negative slope crossing
			if ( (sample_buf[bufnum][i] < zeropoint) && (sample_buf[bufnum][i-1] >= zeropoint) ) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4942      	ldr	r1, [pc, #264]	; (8001450 <calc_zero_detector+0x250>)
 8001348:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001358:	461a      	mov	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4293      	cmp	r3, r2
 800135e:	dd4f      	ble.n	8001400 <calc_zero_detector+0x200>
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	3b01      	subs	r3, #1
 8001366:	493a      	ldr	r1, [pc, #232]	; (8001450 <calc_zero_detector+0x250>)
 8001368:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800136c:	fb00 f202 	mul.w	r2, r0, r2
 8001370:	4413      	add	r3, r2
 8001372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4293      	cmp	r3, r2
 800137c:	dc40      	bgt.n	8001400 <calc_zero_detector+0x200>
				detected++;
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	3301      	adds	r3, #1
 8001382:	77fb      	strb	r3, [r7, #31]
				if (i-2 >= 0) {	// check point on lower side
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	dd11      	ble.n	80013ae <calc_zero_detector+0x1ae>
					if (sample_buf[bufnum][i-2] >= zeropoint) {
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3b02      	subs	r3, #2
 8001390:	492f      	ldr	r1, [pc, #188]	; (8001450 <calc_zero_detector+0x250>)
 8001392:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001396:	fb00 f202 	mul.w	r2, r0, r2
 800139a:	4413      	add	r3, r2
 800139c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4293      	cmp	r3, r2
 80013a6:	dc02      	bgt.n	80013ae <calc_zero_detector+0x1ae>
						detected++;
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	3301      	adds	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (i+2 < SAMPLE_BUF_SIZE) {	// check point on higher side
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80013b6:	d211      	bcs.n	80013dc <calc_zero_detector+0x1dc>
					if (sample_buf[bufnum][i+2] < zeropoint) {
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3302      	adds	r3, #2
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <calc_zero_detector+0x250>)
 80013c0:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80013c4:	fb00 f202 	mul.w	r2, r0, r2
 80013c8:	4413      	add	r3, r2
 80013ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	dd02      	ble.n	80013dc <calc_zero_detector+0x1dc>
						detected++;
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	3301      	adds	r3, #1
 80013da:	77fb      	strb	r3, [r7, #31]
					}
				}
				if (detected > 1) {	// if at least two of the above checks have a positive result
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d90c      	bls.n	80013fc <calc_zero_detector+0x1fc>
					sample_buf_meta[bufnum].zero_cross_neg = i;	// set positive crossing point
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	491b      	ldr	r1, [pc, #108]	; (8001454 <calc_zero_detector+0x254>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3308      	adds	r3, #8
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	601a      	str	r2, [r3, #0]
					detect_count++;
 80013f6:	7fbb      	ldrb	r3, [r7, #30]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77bb      	strb	r3, [r7, #30]
				}
				detected = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
	for (int i=1; i < SAMPLE_BUF_SIZE; i++) {
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800140c:	f4ff af1b 	bcc.w	8001246 <calc_zero_detector+0x46>
			}
		}	// if inside window
	}	// for in buffer

	// check how many crossings were detected, we could have up to 3
	if (detect_count > 3) {
 8001410:	7fbb      	ldrb	r3, [r7, #30]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d917      	bls.n	8001446 <calc_zero_detector+0x246>
		// if we have more than 2 crossings the crossing detections are marked invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	490e      	ldr	r1, [pc, #56]	; (8001454 <calc_zero_detector+0x254>)
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	f06f 0208 	mvn.w	r2, #8
 800142a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <calc_zero_detector+0x254>)
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3304      	adds	r3, #4
 800143c:	f06f 0208 	mvn.w	r2, #8
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e000      	b.n	8001446 <calc_zero_detector+0x246>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001444:	bf00      	nop
	}
}
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20007388 	.word	0x20007388
 8001454:	2000023c 	.word	0x2000023c

08001458 <calc_downsample>:
 * Down-sample ADC raw readings into sample buffer
 * This function provides a filter for the raw ADC readings. It halves
 * the number of samples and averages adjoining samples to smooth out peaks.
 * It also establishes the meta data (min/max and zero crossing, etc)
 */
void calc_downsample(uint8_t bufnum) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint16_t range;
	uint16_t dest_idx=0;
 8001462:	2300      	movs	r3, #0
 8001464:	83fb      	strh	r3, [r7, #30]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f200 8115 	bhi.w	8001698 <calc_downsample+0x240>
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	e083      	b.n	800157c <calc_downsample+0x124>
		// calculate reading value by averaging 3 readings (the one before and the one after)
		sample_buf[bufnum][dest_idx] = (adc_raw_buf[bufnum][i] + adc_raw_buf[bufnum][i-1] + adc_raw_buf[bufnum][i+1]) / 3;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	498a      	ldr	r1, [pc, #552]	; (80016a0 <calc_downsample+0x248>)
 8001478:	f44f 7252 	mov.w	r2, #840	; 0x348
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4413      	add	r3, r2
 8001484:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001488:	461c      	mov	r4, r3
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3b01      	subs	r3, #1
 8001490:	4983      	ldr	r1, [pc, #524]	; (80016a0 <calc_downsample+0x248>)
 8001492:	f44f 7052 	mov.w	r0, #840	; 0x348
 8001496:	fb00 f202 	mul.w	r2, r0, r2
 800149a:	4413      	add	r3, r2
 800149c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014a0:	4423      	add	r3, r4
 80014a2:	79f9      	ldrb	r1, [r7, #7]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	3201      	adds	r2, #1
 80014a8:	487d      	ldr	r0, [pc, #500]	; (80016a0 <calc_downsample+0x248>)
 80014aa:	f44f 7452 	mov.w	r4, #840	; 0x348
 80014ae:	fb04 f101 	mul.w	r1, r4, r1
 80014b2:	440a      	add	r2, r1
 80014b4:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <calc_downsample+0x24c>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	17db      	asrs	r3, r3, #31
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	79fa      	ldrb	r2, [r7, #7]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	b28c      	uxth	r4, r1
 80014ca:	4977      	ldr	r1, [pc, #476]	; (80016a8 <calc_downsample+0x250>)
 80014cc:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014d0:	fb00 f202 	mul.w	r2, r0, r2
 80014d4:	4413      	add	r3, r2
 80014d6:	4622      	mov	r2, r4
 80014d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		// track min/max values
		sample_buf_meta[bufnum].min = MIN(sample_buf_meta[bufnum].min, sample_buf[bufnum][dest_idx]);
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	4973      	ldr	r1, [pc, #460]	; (80016ac <calc_downsample+0x254>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	82bb      	strh	r3, [r7, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	496d      	ldr	r1, [pc, #436]	; (80016a8 <calc_downsample+0x250>)
 80014f4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80014f8:	fb00 f202 	mul.w	r2, r0, r2
 80014fc:	4413      	add	r3, r2
 80014fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001502:	827b      	strh	r3, [r7, #18]
 8001504:	8a7a      	ldrh	r2, [r7, #18]
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	4293      	cmp	r3, r2
 800150a:	bf28      	it	cs
 800150c:	4613      	movcs	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	b298      	uxth	r0, r3
 8001514:	4965      	ldr	r1, [pc, #404]	; (80016ac <calc_downsample+0x254>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	4602      	mov	r2, r0
 8001522:	801a      	strh	r2, [r3, #0]
		sample_buf_meta[bufnum].max = MAX(sample_buf_meta[bufnum].max, sample_buf[bufnum][dest_idx]);
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	4961      	ldr	r1, [pc, #388]	; (80016ac <calc_downsample+0x254>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3302      	adds	r3, #2
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	823b      	strh	r3, [r7, #16]
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	495a      	ldr	r1, [pc, #360]	; (80016a8 <calc_downsample+0x250>)
 800153e:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8001542:	fb00 f202 	mul.w	r2, r0, r2
 8001546:	4413      	add	r3, r2
 8001548:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800154c:	81fb      	strh	r3, [r7, #14]
 800154e:	89fa      	ldrh	r2, [r7, #14]
 8001550:	8a3b      	ldrh	r3, [r7, #16]
 8001552:	4293      	cmp	r3, r2
 8001554:	bf38      	it	cc
 8001556:	4613      	movcc	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	b298      	uxth	r0, r3
 800155e:	4953      	ldr	r1, [pc, #332]	; (80016ac <calc_downsample+0x254>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3302      	adds	r3, #2
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
		dest_idx++;
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	3301      	adds	r3, #1
 8001574:	83fb      	strh	r3, [r7, #30]
	for (int i=1; i < ADC_NUM_DATA-2; i+=2) {
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f240 3245 	movw	r2, #837	; 0x345
 8001582:	4293      	cmp	r3, r2
 8001584:	f67f af76 	bls.w	8001474 <calc_downsample+0x1c>
	}
	// Last sample in the buffer (we only have 2 raw readings available for averaging)
	sample_buf[bufnum][dest_idx++] = (adc_raw_buf[bufnum][ADC_NUM_DATA-1] + adc_raw_buf[bufnum][ADC_NUM_DATA-2]) / 2;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <calc_downsample+0x248>)
 800158c:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	f203 638e 	addw	r3, r3, #1678	; 0x68e
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <calc_downsample+0x248>)
 80015a2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4403      	add	r3, r0
 80015b4:	0fda      	lsrs	r2, r3, #31
 80015b6:	4413      	add	r3, r2
 80015b8:	105b      	asrs	r3, r3, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	8bfb      	ldrh	r3, [r7, #30]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	83f9      	strh	r1, [r7, #30]
 80015c4:	461c      	mov	r4, r3
 80015c6:	b280      	uxth	r0, r0
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <calc_downsample+0x250>)
 80015ca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4423      	add	r3, r4
 80015d4:	4602      	mov	r2, r0
 80015d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	// test if the last value is not assigned
	if (dest_idx < SAMPLE_BUF_SIZE) {
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80015e0:	d20a      	bcs.n	80015f8 <calc_downsample+0x1a0>
		sample_buf[bufnum][dest_idx] = 0;
 80015e2:	79fa      	ldrb	r2, [r7, #7]
 80015e4:	8bfb      	ldrh	r3, [r7, #30]
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <calc_downsample+0x250>)
 80015e8:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80015ec:	fb00 f202 	mul.w	r2, r0, r2
 80015f0:	4413      	add	r3, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	// range of readings
	range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <calc_downsample+0x254>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3302      	adds	r3, #2
 8001608:	8819      	ldrh	r1, [r3, #0]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <calc_downsample+0x254>)
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4403      	add	r3, r0
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	82fb      	strh	r3, [r7, #22]
	// detect zero crossings
	if (range > ADC_NOISE_RAW) {
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	2b14      	cmp	r3, #20
 8001622:	d918      	bls.n	8001656 <calc_downsample+0x1fe>
		calc_zero_detector(bufnum, range / 2 + sample_buf_meta[bufnum].min, range/5);
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	491f      	ldr	r1, [pc, #124]	; (80016ac <calc_downsample+0x254>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	18c1      	adds	r1, r0, r3
 800163e:	8afb      	ldrh	r3, [r7, #22]
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <calc_downsample+0x258>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdd6 	bl	8001200 <calc_zero_detector>
 8001654:	e021      	b.n	800169a <calc_downsample+0x242>
	} else {
		// mark zero crossings as invalid
		sample_buf_meta[bufnum].zero_cross_neg = -9;
 8001656:	79fa      	ldrb	r2, [r7, #7]
 8001658:	4914      	ldr	r1, [pc, #80]	; (80016ac <calc_downsample+0x254>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3308      	adds	r3, #8
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].zero_cross_pos = -9;
 800166c:	79fa      	ldrb	r2, [r7, #7]
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <calc_downsample+0x254>)
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3304      	adds	r3, #4
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	601a      	str	r2, [r3, #0]
		sample_buf_meta[bufnum].value_is_zero = 1;		// value is zero
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <calc_downsample+0x254>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	330d      	adds	r3, #13
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e000      	b.n	800169a <calc_downsample+0x242>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8001698:	bf00      	nop
	}
}
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	20005948 	.word	0x20005948
 80016a4:	55555556 	.word	0x55555556
 80016a8:	20007388 	.word	0x20007388
 80016ac:	2000023c 	.word	0x2000023c
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <calc_filter_measurements>:

void calc_filter_measurements(void) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0

	// shift filter values to make room for new measurement
	for (int i=0; i<FILTER_NUM-1; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	e039      	b.n	8001734 <calc_filter_measurements+0x80>
		v_filter[i] = v_filter[i+1];
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a74      	ldr	r2, [pc, #464]	; (8001898 <calc_filter_measurements+0x1e4>)
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4972      	ldr	r1, [pc, #456]	; (8001898 <calc_filter_measurements+0x1e4>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	601a      	str	r2, [r3, #0]
		i1_filter[i] = i1_filter[i+1];
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a70      	ldr	r2, [pc, #448]	; (800189c <calc_filter_measurements+0x1e8>)
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	496e      	ldr	r1, [pc, #440]	; (800189c <calc_filter_measurements+0x1e8>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	601a      	str	r2, [r3, #0]
		va1_filter[i] = va1_filter[i+1];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	4a6b      	ldr	r2, [pc, #428]	; (80018a0 <calc_filter_measurements+0x1ec>)
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4969      	ldr	r1, [pc, #420]	; (80018a0 <calc_filter_measurements+0x1ec>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	601a      	str	r2, [r3, #0]
		w1_filter[i] = w1_filter[i+1];
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3301      	adds	r3, #1
 8001706:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <calc_filter_measurements+0x1f0>)
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4965      	ldr	r1, [pc, #404]	; (80018a4 <calc_filter_measurements+0x1f0>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	601a      	str	r2, [r3, #0]
		pf1_filter[i] = pf1_filter[i+1];
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	4a62      	ldr	r2, [pc, #392]	; (80018a8 <calc_filter_measurements+0x1f4>)
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4960      	ldr	r1, [pc, #384]	; (80018a8 <calc_filter_measurements+0x1f4>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	601a      	str	r2, [r3, #0]
	for (int i=0; i<FILTER_NUM-1; i++) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b08      	cmp	r3, #8
 8001738:	ddc2      	ble.n	80016c0 <calc_filter_measurements+0xc>
	}
	// add new measurements
	v_filter[FILTER_NUM-1] = v_measured;
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <calc_filter_measurements+0x1f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a56      	ldr	r2, [pc, #344]	; (8001898 <calc_filter_measurements+0x1e4>)
 8001740:	6253      	str	r3, [r2, #36]	; 0x24
	i1_filter[FILTER_NUM-1] = i1_measured;
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <calc_filter_measurements+0x1fc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <calc_filter_measurements+0x1e8>)
 8001748:	6253      	str	r3, [r2, #36]	; 0x24
	va1_filter[FILTER_NUM-1] = va1_measured;
 800174a:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <calc_filter_measurements+0x200>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a54      	ldr	r2, [pc, #336]	; (80018a0 <calc_filter_measurements+0x1ec>)
 8001750:	6253      	str	r3, [r2, #36]	; 0x24
	w1_filter[FILTER_NUM-1] = w1_measured;
 8001752:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <calc_filter_measurements+0x204>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a53      	ldr	r2, [pc, #332]	; (80018a4 <calc_filter_measurements+0x1f0>)
 8001758:	6253      	str	r3, [r2, #36]	; 0x24
	pf1_filter[FILTER_NUM-1] = pf1_measured;
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <calc_filter_measurements+0x208>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <calc_filter_measurements+0x1f4>)
 8001760:	6253      	str	r3, [r2, #36]	; 0x24

	// zero readings
	metervalue_v = 0.0;
 8001762:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <calc_filter_measurements+0x20c>)
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
	metervalue_i1 = 0.0;
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <calc_filter_measurements+0x210>)
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
	metervalue_va1 = 0.0;
 8001772:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <calc_filter_measurements+0x214>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	metervalue_w1 = 0.0;
 800177a:	4b54      	ldr	r3, [pc, #336]	; (80018cc <calc_filter_measurements+0x218>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	metervalue_pf1 = 0.0;
 8001782:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <calc_filter_measurements+0x21c>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	// add filter values
	for (int i=0; i<FILTER_NUM; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	e048      	b.n	8001822 <calc_filter_measurements+0x16e>
		metervalue_v += v_filter[i];
 8001790:	4a41      	ldr	r2, [pc, #260]	; (8001898 <calc_filter_measurements+0x1e4>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <calc_filter_measurements+0x20c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <calc_filter_measurements+0x20c>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		metervalue_i1 += i1_filter[i];
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <calc_filter_measurements+0x1e8>)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <calc_filter_measurements+0x210>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <calc_filter_measurements+0x210>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
		metervalue_va1 += va1_filter[i];
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <calc_filter_measurements+0x1ec>)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <calc_filter_measurements+0x214>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <calc_filter_measurements+0x214>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]
		metervalue_w1 += w1_filter[i];
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <calc_filter_measurements+0x1f0>)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	ed93 7a00 	vldr	s14, [r3]
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <calc_filter_measurements+0x218>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <calc_filter_measurements+0x218>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
		metervalue_pf1 += pf1_filter[i];
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <calc_filter_measurements+0x1f4>)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <calc_filter_measurements+0x21c>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <calc_filter_measurements+0x21c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<FILTER_NUM; i++) {
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b09      	cmp	r3, #9
 8001826:	ddb3      	ble.n	8001790 <calc_filter_measurements+0xdc>
	}
	// calculate filtered valued
	metervalue_v /= FILTER_NUM;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <calc_filter_measurements+0x20c>)
 800182a:	ed93 7a00 	vldr	s14, [r3]
 800182e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <calc_filter_measurements+0x20c>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
	metervalue_i1 /= FILTER_NUM;
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <calc_filter_measurements+0x210>)
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <calc_filter_measurements+0x210>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
	metervalue_va1 /= FILTER_NUM;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <calc_filter_measurements+0x214>)
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800185a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <calc_filter_measurements+0x214>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
	metervalue_w1 /= FILTER_NUM;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <calc_filter_measurements+0x218>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800186e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <calc_filter_measurements+0x218>)
 8001874:	edc3 7a00 	vstr	s15, [r3]
	metervalue_pf1 /= FILTER_NUM;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <calc_filter_measurements+0x21c>)
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <calc_filter_measurements+0x21c>)
 8001888:	edc3 7a00 	vstr	s15, [r3]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000290 	.word	0x20000290
 800189c:	200002b8 	.word	0x200002b8
 80018a0:	200002e0 	.word	0x200002e0
 80018a4:	20000308 	.word	0x20000308
 80018a8:	20000330 	.word	0x20000330
 80018ac:	20000358 	.word	0x20000358
 80018b0:	2000035c 	.word	0x2000035c
 80018b4:	20000360 	.word	0x20000360
 80018b8:	20000364 	.word	0x20000364
 80018bc:	20000368 	.word	0x20000368
 80018c0:	200080a8 	.word	0x200080a8
 80018c4:	200080ac 	.word	0x200080ac
 80018c8:	200080b0 	.word	0x200080b0
 80018cc:	200080b4 	.word	0x200080b4
 80018d0:	200080b8 	.word	0x200080b8

080018d4 <calc_measurements>:

/*
 * Calculate all measurements
 * returns 0 if measurements are OK, -1 if zero crossing is not detected
 */
int calc_measurements(void) {
 80018d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018d8:	ed2d 8b02 	vpush	{d8}
 80018dc:	b0a8      	sub	sp, #160	; 0xa0
 80018de:	af00      	add	r7, sp, #0
	int i;
	int64_t v_sq_acc = 0;		// accumulating the squared voltage values
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	int64_t i1_sq_acc = 0;		// accumulating the squared I1 values
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double i1_va_acc = 0;
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double i1_w_acc = 0;			// accumulating I1 values where I > 0 (for W calculation)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	uint16_t num_readings = 0;		// number of squared readings for v, i and va
 8001910:	2300      	movs	r3, #0
 8001912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	double va_instant;			// instant VA value
	uint16_t v_zero;
	uint16_t v_pp;				// Voltage channel Peak-Peak
	uint16_t i1_zero;
	uint16_t i1_pp;			// Current channel P-P
	float w=0, va=0;
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	673b      	str	r3, [r7, #112]	; 0x70
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	66fb      	str	r3, [r7, #108]	; 0x6c

	// no zero crossing?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8001922:	4bb8      	ldr	r3, [pc, #736]	; (8001c04 <calc_measurements+0x330>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da05      	bge.n	8001936 <calc_measurements+0x62>
		meter_readings_invalid = 1;
 800192a:	4bb7      	ldr	r3, [pc, #732]	; (8001c08 <calc_measurements+0x334>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - missing zero crossings in V\r\n", __FUNCTION__);
		return -1;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001934:	e2de      	b.n	8001ef4 <calc_measurements+0x620>
	}

	// low voltage?
	if ((sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min) < ADC_FS_RAW/4) {
 8001936:	4bb3      	ldr	r3, [pc, #716]	; (8001c04 <calc_measurements+0x330>)
 8001938:	885b      	ldrh	r3, [r3, #2]
 800193a:	461a      	mov	r2, r3
 800193c:	4bb1      	ldr	r3, [pc, #708]	; (8001c04 <calc_measurements+0x330>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001946:	429a      	cmp	r2, r3
 8001948:	dc05      	bgt.n	8001956 <calc_measurements+0x82>
		meter_readings_invalid = 1;
 800194a:	4baf      	ldr	r3, [pc, #700]	; (8001c08 <calc_measurements+0x334>)
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
		//term_print("%s() - Voltage readings too low V (%d)\r\n", __FUNCTION__, (sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min));
		return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001954:	e2ce      	b.n	8001ef4 <calc_measurements+0x620>
	}

	meter_readings_invalid = 0;		// readings are valid
 8001956:	4aac      	ldr	r2, [pc, #688]	; (8001c08 <calc_measurements+0x334>)
 8001958:	2300      	movs	r3, #0
 800195a:	7013      	strb	r3, [r2, #0]

	v_pp = sample_buf_meta[ADC_CH_V].max - sample_buf_meta[ADC_CH_V].min;
 800195c:	4ba9      	ldr	r3, [pc, #676]	; (8001c04 <calc_measurements+0x330>)
 800195e:	885a      	ldrh	r2, [r3, #2]
 8001960:	4ba8      	ldr	r3, [pc, #672]	; (8001c04 <calc_measurements+0x330>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	v_zero = v_pp / 2 + sample_buf_meta[ADC_CH_V].min;
 800196a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4ba4      	ldr	r3, [pc, #656]	; (8001c04 <calc_measurements+0x330>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	i1_pp = sample_buf_meta[ADC_CH_I1].max - sample_buf_meta[ADC_CH_I1].min;
 800197c:	4ba1      	ldr	r3, [pc, #644]	; (8001c04 <calc_measurements+0x330>)
 800197e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001980:	4ba0      	ldr	r3, [pc, #640]	; (8001c04 <calc_measurements+0x330>)
 8001982:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	i1_zero = i1_pp / 2 + sample_buf_meta[ADC_CH_I1].min;
 800198a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800198e:	085b      	lsrs	r3, r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b9c      	ldr	r3, [pc, #624]	; (8001c04 <calc_measurements+0x330>)
 8001994:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001996:	4413      	add	r3, r2
 8001998:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	// Calculate values using the positive half of the sine wave

	// Add up squared measurements
	// does the positive x-ing come before the negative?
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < sample_buf_meta[ADC_CH_V].zero_cross_neg) {
 800199c:	4b99      	ldr	r3, [pc, #612]	; (8001c04 <calc_measurements+0x330>)
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4b98      	ldr	r3, [pc, #608]	; (8001c04 <calc_measurements+0x330>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f280 8091 	bge.w	8001acc <calc_measurements+0x1f8>
		// iterate from positive to negative crossing (positive half wave)
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 80019aa:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <calc_measurements+0x330>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80019b2:	e083      	b.n	8001abc <calc_measurements+0x1e8>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 80019b4:	4a95      	ldr	r2, [pc, #596]	; (8001c0c <calc_measurements+0x338>)
 80019b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019be:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 80019ca:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80019ce:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	17da      	asrs	r2, r3, #31
 80019d8:	461c      	mov	r4, r3
 80019da:	4615      	mov	r5, r2
 80019dc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019e0:	eb12 0a04 	adds.w	sl, r2, r4
 80019e4:	eb43 0b05 	adc.w	fp, r3, r5
 80019e8:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 80019ec:	4a87      	ldr	r2, [pc, #540]	; (8001c0c <calc_measurements+0x338>)
 80019ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f2:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80019f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80019fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001a06:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001a0a:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	17da      	asrs	r2, r3, #31
 8001a14:	4698      	mov	r8, r3
 8001a16:	4691      	mov	r9, r2
 8001a18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a1c:	eb12 0108 	adds.w	r1, r2, r8
 8001a20:	6239      	str	r1, [r7, #32]
 8001a22:	eb43 0309 	adc.w	r3, r3, r9
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a2c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			num_readings++;
 8001a30:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001a34:	3301      	adds	r3, #1
 8001a36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001a3a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 faac 	bl	8001f9c <calc_adc_raw_to_V>
 8001a44:	eeb0 8a40 	vmov.f32	s16, s0
 8001a48:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fac3 	bl	8001fd8 <calc_adc_raw_to_A>
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
 8001a56:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a5a:	ee17 0a90 	vmov	r0, s15
 8001a5e:	f7fe fd93 	bl	8000588 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001a6a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0a      	blt.n	8001a88 <calc_measurements+0x1b4>
				i1_va_acc += va_instant;
 8001a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a7a:	f7fe fc27 	bl	80002cc <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001a86:	e014      	b.n	8001ab2 <calc_measurements+0x1de>
			} else {
				i1_w_acc += abs(va_instant);
 8001a88:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a8c:	f7ff f884 	bl	8000b98 <__aeabi_d2iz>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bfb8      	it	lt
 8001a96:	425b      	neglt	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd63 	bl	8000564 <__aeabi_i2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001aa6:	f7fe fc11 	bl	80002cc <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001abc:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <calc_measurements+0x330>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f6ff af75 	blt.w	80019b4 <calc_measurements+0xe0>
 8001aca:	e134      	b.n	8001d36 <calc_measurements+0x462>
			}
		}
	} else {	// negative crossing is first
		// iterate from positive x-ing to the end of the buffer ....
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001acc:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <calc_measurements+0x330>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ad4:	e08b      	b.n	8001bee <calc_measurements+0x31a>
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001ad6:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <calc_measurements+0x338>)
 8001ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001adc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ae0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 8001aec:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001af0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	17da      	asrs	r2, r3, #31
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
 8001afc:	657a      	str	r2, [r7, #84]	; 0x54
 8001afe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b02:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001b06:	4621      	mov	r1, r4
 8001b08:	1851      	adds	r1, r2, r1
 8001b0a:	61b9      	str	r1, [r7, #24]
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	414b      	adcs	r3, r1
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b16:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001b1a:	4a3c      	ldr	r2, [pc, #240]	; (8001c0c <calc_measurements+0x338>)
 8001b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b20:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001b24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001b34:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001b38:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	17da      	asrs	r2, r3, #31
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b46:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b4a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b4e:	4621      	mov	r1, r4
 8001b50:	1851      	adds	r1, r2, r1
 8001b52:	6139      	str	r1, [r7, #16]
 8001b54:	4629      	mov	r1, r5
 8001b56:	414b      	adcs	r3, r1
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b5e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001b62:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001b66:	3301      	adds	r3, #1
 8001b68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001b6c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fa13 	bl	8001f9c <calc_adc_raw_to_V>
 8001b76:	eeb0 8a40 	vmov.f32	s16, s0
 8001b7a:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fa2a 	bl	8001fd8 <calc_adc_raw_to_A>
 8001b84:	eef0 7a40 	vmov.f32	s15, s0
 8001b88:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b8c:	ee17 0a90 	vmov	r0, s15
 8001b90:	f7fe fcfa 	bl	8000588 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			if (i_reading >= 0) {
 8001b9c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <calc_measurements+0x2e6>
				i1_va_acc += va_instant;
 8001ba4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ba8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001bac:	f7fe fb8e 	bl	80002cc <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001bb8:	e014      	b.n	8001be4 <calc_measurements+0x310>
			} else {
				i1_w_acc += abs(va_instant);
 8001bba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001bbe:	f7fe ffeb 	bl	8000b98 <__aeabi_d2iz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bfb8      	it	lt
 8001bc8:	425b      	neglt	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcca 	bl	8000564 <__aeabi_i2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bd8:	f7fe fb78 	bl	80002cc <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8001be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bf2:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001bf6:	f4ff af6e 	bcc.w	8001ad6 <calc_measurements+0x202>
			}
		}
		// ..... the continue iterating from the start of the buffer to the negative crossing
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001bfa:	2314      	movs	r3, #20
 8001bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001c00:	e092      	b.n	8001d28 <calc_measurements+0x454>
 8001c02:	bf00      	nop
 8001c04:	2000023c 	.word	0x2000023c
 8001c08:	2000028c 	.word	0x2000028c
 8001c0c:	20007388 	.word	0x20007388
			v_reading = sample_buf[ADC_CH_V][i] - v_zero;
 8001c10:	4abc      	ldr	r2, [pc, #752]	; (8001f04 <calc_measurements+0x630>)
 8001c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c1a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			v_sq_acc += v_reading * v_reading;
 8001c26:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001c2a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	17da      	asrs	r2, r3, #31
 8001c34:	643b      	str	r3, [r7, #64]	; 0x40
 8001c36:	647a      	str	r2, [r7, #68]	; 0x44
 8001c38:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001c3c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001c40:	4621      	mov	r1, r4
 8001c42:	1851      	adds	r1, r2, r1
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4629      	mov	r1, r5
 8001c48:	414b      	adcs	r3, r1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c50:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			i_reading = sample_buf[ADC_CH_I1][i] - i1_zero;
 8001c54:	4aab      	ldr	r2, [pc, #684]	; (8001f04 <calc_measurements+0x630>)
 8001c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c5a:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8001c5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001c62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			i1_sq_acc += i_reading * i_reading;
 8001c6e:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001c72:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	17da      	asrs	r2, r3, #31
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c7e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c88:	4621      	mov	r1, r4
 8001c8a:	1851      	adds	r1, r2, r1
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	414b      	adcs	r3, r1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c98:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			num_readings++;
 8001c9c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			va_instant = calc_adc_raw_to_V(v_reading) * calc_adc_raw_to_A(i_reading);
 8001ca6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f976 	bl	8001f9c <calc_adc_raw_to_V>
 8001cb0:	eeb0 8a40 	vmov.f32	s16, s0
 8001cb4:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f98d 	bl	8001fd8 <calc_adc_raw_to_A>
 8001cbe:	eef0 7a40 	vmov.f32	s15, s0
 8001cc2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc6:	ee17 0a90 	vmov	r0, s15
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			if (i_reading >= 0) {
 8001cd6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0a      	blt.n	8001cf4 <calc_measurements+0x420>
				i1_va_acc += va_instant;
 8001cde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ce6:	f7fe faf1 	bl	80002cc <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8001cf2:	e014      	b.n	8001d1e <calc_measurements+0x44a>
			} else {
				i1_w_acc += abs(va_instant);
 8001cf4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001cf8:	f7fe ff4e 	bl	8000b98 <__aeabi_d2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bfb8      	it	lt
 8001d02:	425b      	neglt	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc2d 	bl	8000564 <__aeabi_i2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d12:	f7fe fadb 	bl	80002cc <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		for (i=SAMPLE_BUF_OVERLAP; i<sample_buf_meta[ADC_CH_V].zero_cross_neg; i++ ) {
 8001d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d28:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <calc_measurements+0x634>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f6ff af6d 	blt.w	8001c10 <calc_measurements+0x33c>
			}
		}
	}

	// Calculate measured RMS voltage
	v_measured = calc_adc_raw_to_V (sqrt((v_sq_acc / num_readings)));		// RMS voltage
 8001d36:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3e:	637a      	str	r2, [r7, #52]	; 0x34
 8001d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d44:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d48:	f7fe ff9e 	bl	8000c88 <__aeabi_ldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f7fe fc42 	bl	80005dc <__aeabi_l2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	ec43 2b10 	vmov	d0, r2, r3
 8001d60:	f00e fcf6 	bl	8010750 <sqrt>
 8001d64:	ec53 2b10 	vmov	r2, r3, d0
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff14 	bl	8000b98 <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 f911 	bl	8001f9c <calc_adc_raw_to_V>
 8001d7a:	eef0 7a40 	vmov.f32	s15, s0
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <calc_measurements+0x638>)
 8001d80:	edc3 7a00 	vstr	s15, [r3]
	//v_measured = calc_adc_raw_to_V(v_pp) / 2 * 0.707;		// only works for a perfect sine wave (no distortion)

	pf1_measured = 1.0;		// assumed PF
 8001d84:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <calc_measurements+0x63c>)
 8001d86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d8a:	601a      	str	r2, [r3, #0]
	// do we have zero (below ADC noise) current reading?
	if (sample_buf_meta[ADC_CH_I1].value_is_zero) {	// set all measured values to zero
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <calc_measurements+0x634>)
 8001d8e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00c      	beq.n	8001db0 <calc_measurements+0x4dc>
		i1_measured = 0.0;
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <calc_measurements+0x640>)
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
		va1_measured = 0.0;
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <calc_measurements+0x644>)
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		w1_measured = 0.0;
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <calc_measurements+0x648>)
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e09e      	b.n	8001eee <calc_measurements+0x61a>

	} else {
		i1_measured = calc_adc_raw_to_A (sqrt((i1_sq_acc / num_readings)));	// RMS current
 8001db0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001db4:	2200      	movs	r2, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dbe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001dc2:	f7fe ff61 	bl	8000c88 <__aeabi_ldivmod>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fc05 	bl	80005dc <__aeabi_l2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b10 	vmov	d0, r2, r3
 8001dda:	f00e fcb9 	bl	8010750 <sqrt>
 8001dde:	ec53 2b10 	vmov	r2, r3, d0
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fed7 	bl	8000b98 <__aeabi_d2iz>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f8f2 	bl	8001fd8 <calc_adc_raw_to_A>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <calc_measurements+0x640>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
		if (i1_va_acc > 0) { va = i1_va_acc / num_readings; }
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e0a:	f7fe fea5 	bl	8000b58 <__aeabi_dcmpgt>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d012      	beq.n	8001e3a <calc_measurements+0x566>
 8001e14:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fba3 	bl	8000564 <__aeabi_i2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e26:	f7fe fd31 	bl	800088c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fed9 	bl	8000be8 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (i1_w_acc > 0) { w = i1_w_acc / num_readings; }
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e46:	f7fe fe87 	bl	8000b58 <__aeabi_dcmpgt>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <calc_measurements+0x5a2>
 8001e50:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb85 	bl	8000564 <__aeabi_i2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001e62:	f7fe fd13 	bl	800088c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe febb 	bl	8000be8 <__aeabi_d2f>
 8001e72:	4603      	mov	r3, r0
 8001e74:	673b      	str	r3, [r7, #112]	; 0x70
		va1_measured = v_measured * i1_measured;
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <calc_measurements+0x638>)
 8001e78:	ed93 7a00 	vldr	s14, [r3]
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <calc_measurements+0x640>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <calc_measurements+0x644>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
		if (w > 0) {
 8001e8c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	dd09      	ble.n	8001eae <calc_measurements+0x5da>
			w1_measured = va - w;
 8001e9a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001e9e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <calc_measurements+0x648>)
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
 8001eac:	e003      	b.n	8001eb6 <calc_measurements+0x5e2>
		} else {
			w1_measured = va1_measured;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <calc_measurements+0x644>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <calc_measurements+0x648>)
 8001eb4:	6013      	str	r3, [r2, #0]
		}
		if (i1_measured >= I1_MIN_PF) {			// Calculate PF if we have sufficient current
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <calc_measurements+0x640>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	db0a      	blt.n	8001ee0 <calc_measurements+0x60c>
			pf1_measured = w1_measured / va1_measured;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <calc_measurements+0x648>)
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <calc_measurements+0x644>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <calc_measurements+0x63c>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]
		}
		sample_buf_meta[ADC_CH_V].measurements_valid = 1;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <calc_measurements+0x634>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	731a      	strb	r2, [r3, #12]
		sample_buf_meta[ADC_CH_I1].measurements_valid = 1;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <calc_measurements+0x634>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}

	// add measurements to filter
	calc_filter_measurements();
 8001eee:	f7ff fbe1 	bl	80016b4 <calc_filter_measurements>

	return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	37a0      	adds	r7, #160	; 0xa0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	ecbd 8b02 	vpop	{d8}
 8001efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f02:	bf00      	nop
 8001f04:	20007388 	.word	0x20007388
 8001f08:	2000023c 	.word	0x2000023c
 8001f0c:	20000358 	.word	0x20000358
 8001f10:	20000368 	.word	0x20000368
 8001f14:	2000035c 	.word	0x2000035c
 8001f18:	20000360 	.word	0x20000360
 8001f1c:	20000364 	.word	0x20000364

08001f20 <calc_adc_raw_to_mv_int>:

/*
 * Convert ADC raw reading to mv
 * returns: mv as int
 */
int calc_adc_raw_to_mv_int(int16_t adc_raw) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	return round(calc_adc_raw_to_mv_float(adc_raw));
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f816 	bl	8001f60 <calc_adc_raw_to_mv_float>
 8001f34:	ee10 3a10 	vmov	r3, s0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb25 	bl	8000588 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	ec43 2b10 	vmov	d0, r2, r3
 8001f46:	f00e fd13 	bl	8010970 <round>
 8001f4a:	ec53 2b10 	vmov	r2, r3, d0
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe21 	bl	8000b98 <__aeabi_d2iz>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <calc_adc_raw_to_mv_float>:

/*
 * Convert raw reading to mV
 */
float calc_adc_raw_to_mv_float(int16_t adc_raw) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_MV;
 8001f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f76:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001f94 <calc_adc_raw_to_mv_float+0x34>
 8001f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f98 <calc_adc_raw_to_mv_float+0x38>
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f86:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	457ff000 	.word	0x457ff000
 8001f98:	454e4000 	.word	0x454e4000

08001f9c <calc_adc_raw_to_V>:

/*
 * Convert ADC raw reading to V
 */
float calc_adc_raw_to_V(int16_t adc_raw) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_V;
 8001fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001fd0 <calc_adc_raw_to_V+0x34>
 8001fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fd4 <calc_adc_raw_to_V+0x38>
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	457ff000 	.word	0x457ff000
 8001fd4:	44434000 	.word	0x44434000

08001fd8 <calc_adc_raw_to_A>:

/*
 * Convert ADC raw reading to A
 */
float calc_adc_raw_to_A(int16_t adc_raw) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_raw / (float)ADC_FS_RAW) * (float)ADC_FS_CH_I;
 8001fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	eddf 6a07 	vldr	s13, [pc, #28]	; 800200c <calc_adc_raw_to_A+0x34>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002010 <calc_adc_raw_to_A+0x38>
 8001ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	457ff000 	.word	0x457ff000
 8002010:	43620000 	.word	0x43620000

08002014 <cmd_error>:
extern uint8_t esp_mode;
extern uint16_t new_time_period;

uint8_t cmd_len = 0;

void cmd_error(uint8_t* cmd_str) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	term_print("Error in command <%s>\r\n", cmd_str);
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4803      	ldr	r0, [pc, #12]	; (800202c <cmd_error+0x18>)
 8002020:	f002 fe54 	bl	8004ccc <term_print>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08010aa0 	.word	0x08010aa0

08002030 <cmd_t>:

int cmd_t(uint8_t* cmd_str) {
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	switch (cmd_str[1]) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b74      	cmp	r3, #116	; 0x74
 8002040:	d014      	beq.n	800206c <cmd_t+0x3c>
 8002042:	2b74      	cmp	r3, #116	; 0x74
 8002044:	dc17      	bgt.n	8002076 <cmd_t+0x46>
 8002046:	2b54      	cmp	r3, #84	; 0x54
 8002048:	d010      	beq.n	800206c <cmd_t+0x3c>
 800204a:	2b54      	cmp	r3, #84	; 0x54
 800204c:	dc13      	bgt.n	8002076 <cmd_t+0x46>
 800204e:	2b30      	cmp	r3, #48	; 0x30
 8002050:	d002      	beq.n	8002058 <cmd_t+0x28>
 8002052:	2b31      	cmp	r3, #49	; 0x31
 8002054:	d005      	beq.n	8002062 <cmd_t+0x32>
 8002056:	e00e      	b.n	8002076 <cmd_t+0x46>
	case '0':
		tft_display = 1;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <cmd_t+0x58>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
		return 0;
 800205e:	2300      	movs	r3, #0
 8002060:	e00b      	b.n	800207a <cmd_t+0x4a>
		break;
	case '1':
		tft_display = 2;
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <cmd_t+0x58>)
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
		return 0;
 8002068:	2300      	movs	r3, #0
 800206a:	e006      	b.n	800207a <cmd_t+0x4a>
		break;
	case 'T':
	case 't':
		tft_display = 9;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <cmd_t+0x58>)
 800206e:	2209      	movs	r2, #9
 8002070:	701a      	strb	r2, [r3, #0]
		return 0;
 8002072:	2300      	movs	r3, #0
 8002074:	e001      	b.n	800207a <cmd_t+0x4a>
	}
	return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200024af 	.word	0x200024af

0800208c <cmd_p>:

// adjust timer period
int cmd_p(uint8_t* cmd_str) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	unsigned int value;
	int result = sscanf((char*)cmd_str+1, "%u", &value);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	f107 0208 	add.w	r2, r7, #8
 800209c:	4909      	ldr	r1, [pc, #36]	; (80020c4 <cmd_p+0x38>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f00b fa6c 	bl	800d57c <siscanf>
 80020a4:	60f8      	str	r0, [r7, #12]
	if (result != 1) return -1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <cmd_p+0x26>
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b0:	e004      	b.n	80020bc <cmd_p+0x30>
	new_time_period = value;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <cmd_p+0x3c>)
 80020b8:	801a      	strh	r2, [r3, #0]
	return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	08010ab8 	.word	0x08010ab8
 80020c8:	200024b2 	.word	0x200024b2

080020cc <cmd_led>:

int cmd_led(int cmd) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if (cmd > 1) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	dd05      	ble.n	80020e6 <cmd_led+0x1a>
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	2120      	movs	r1, #32
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <cmd_led+0x30>)
 80020e0:	f006 fb8e 	bl	8008800 <HAL_GPIO_WritePin>
 80020e4:	e004      	b.n	80020f0 <cmd_led+0x24>
	} else {
		HAL_GPIO_WritePin (LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2120      	movs	r1, #32
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <cmd_led+0x30>)
 80020ec:	f006 fb88 	bl	8008800 <HAL_GPIO_WritePin>
	}
	return(0);
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40020000 	.word	0x40020000

08002100 <cmd_help>:


int cmd_help(void) {
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	term_print("\r\nCommand Help:\r\n");
 8002104:	4813      	ldr	r0, [pc, #76]	; (8002154 <cmd_help+0x54>)
 8002106:	f002 fde1 	bl	8004ccc <term_print>
	term_print("C[1..4]: CSV output ADC channel 1 - 4 buffer content\r\n");
 800210a:	4813      	ldr	r0, [pc, #76]	; (8002158 <cmd_help+0x58>)
 800210c:	f002 fdde 	bl	8004ccc <term_print>
#ifdef USE_DISPLAY
	term_print("D[1..4]: Display ADC channel 1 - 4 on TFT display\r\n");
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <cmd_help+0x5c>)
 8002112:	f002 fddb 	bl	8004ccc <term_print>
	term_print("D: Display all ADC channel on TFT display\r\n");
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <cmd_help+0x60>)
 8002118:	f002 fdd8 	bl	8004ccc <term_print>
#endif
	term_print("E: Toggle ESP mode\r\n");
 800211c:	4811      	ldr	r0, [pc, #68]	; (8002164 <cmd_help+0x64>)
 800211e:	f002 fdd5 	bl	8004ccc <term_print>
	term_print("L[0,1]: LED L2 OFF / ON\r\n");
 8002122:	4811      	ldr	r0, [pc, #68]	; (8002168 <cmd_help+0x68>)
 8002124:	f002 fdd2 	bl	8004ccc <term_print>
	term_print("M show measurements using all channels\r\n");
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <cmd_help+0x6c>)
 800212a:	f002 fdcf 	bl	8004ccc <term_print>
	term_print("M[1..4]: Show measurements for ADC channel 1 - 4 buffer in terminal \r\n");
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <cmd_help+0x70>)
 8002130:	f002 fdcc 	bl	8004ccc <term_print>
	term_print("P[2000..2500]: adjust timer value for sample time\r\n");
 8002134:	480f      	ldr	r0, [pc, #60]	; (8002174 <cmd_help+0x74>)
 8002136:	f002 fdc9 	bl	8004ccc <term_print>
	term_print("R: Restart ADC conversion\r\n");
 800213a:	480f      	ldr	r0, [pc, #60]	; (8002178 <cmd_help+0x78>)
 800213c:	f002 fdc6 	bl	8004ccc <term_print>
	term_print("S[1..4]: Show ADC channel 1 - 4 buffer content in terminal\r\n");
 8002140:	480e      	ldr	r0, [pc, #56]	; (800217c <cmd_help+0x7c>)
 8002142:	f002 fdc3 	bl	8004ccc <term_print>
	term_print("T[0|1|T]: TFT display OFF / ON / Performance test\r\n");
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <cmd_help+0x80>)
 8002148:	f002 fdc0 	bl	8004ccc <term_print>
	return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	08010abc 	.word	0x08010abc
 8002158:	08010ad0 	.word	0x08010ad0
 800215c:	08010b08 	.word	0x08010b08
 8002160:	08010b3c 	.word	0x08010b3c
 8002164:	08010b68 	.word	0x08010b68
 8002168:	08010b80 	.word	0x08010b80
 800216c:	08010b9c 	.word	0x08010b9c
 8002170:	08010bc8 	.word	0x08010bc8
 8002174:	08010c10 	.word	0x08010c10
 8002178:	08010c44 	.word	0x08010c44
 800217c:	08010c60 	.word	0x08010c60
 8002180:	08010ca0 	.word	0x08010ca0

08002184 <cmd_process>:

int cmd_process(uint8_t* cmd_str) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	int retval = -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002190:	60fb      	str	r3, [r7, #12]
	switch(cmd_str[0]) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3b3f      	subs	r3, #63	; 0x3f
 8002198:	2b35      	cmp	r3, #53	; 0x35
 800219a:	f200 80d8 	bhi.w	800234e <cmd_process+0x1ca>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <cmd_process+0x20>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	08002349 	.word	0x08002349
 80021a8:	0800234f 	.word	0x0800234f
 80021ac:	0800234f 	.word	0x0800234f
 80021b0:	0800234f 	.word	0x0800234f
 80021b4:	0800227d 	.word	0x0800227d
 80021b8:	08002293 	.word	0x08002293
 80021bc:	080022bb 	.word	0x080022bb
 80021c0:	0800234f 	.word	0x0800234f
 80021c4:	0800234f 	.word	0x0800234f
 80021c8:	08002349 	.word	0x08002349
 80021cc:	0800234f 	.word	0x0800234f
 80021d0:	0800234f 	.word	0x0800234f
 80021d4:	0800234f 	.word	0x0800234f
 80021d8:	080022d9 	.word	0x080022d9
 80021dc:	080022eb 	.word	0x080022eb
 80021e0:	0800234f 	.word	0x0800234f
 80021e4:	0800234f 	.word	0x0800234f
 80021e8:	08002313 	.word	0x08002313
 80021ec:	0800234f 	.word	0x0800234f
 80021f0:	0800231d 	.word	0x0800231d
 80021f4:	08002329 	.word	0x08002329
 80021f8:	0800233f 	.word	0x0800233f
 80021fc:	0800234f 	.word	0x0800234f
 8002200:	0800234f 	.word	0x0800234f
 8002204:	0800234f 	.word	0x0800234f
 8002208:	0800234f 	.word	0x0800234f
 800220c:	0800234f 	.word	0x0800234f
 8002210:	0800234f 	.word	0x0800234f
 8002214:	0800234f 	.word	0x0800234f
 8002218:	0800234f 	.word	0x0800234f
 800221c:	0800234f 	.word	0x0800234f
 8002220:	0800234f 	.word	0x0800234f
 8002224:	0800234f 	.word	0x0800234f
 8002228:	0800234f 	.word	0x0800234f
 800222c:	0800234f 	.word	0x0800234f
 8002230:	0800234f 	.word	0x0800234f
 8002234:	0800227d 	.word	0x0800227d
 8002238:	08002293 	.word	0x08002293
 800223c:	080022bb 	.word	0x080022bb
 8002240:	0800234f 	.word	0x0800234f
 8002244:	0800234f 	.word	0x0800234f
 8002248:	08002349 	.word	0x08002349
 800224c:	0800234f 	.word	0x0800234f
 8002250:	0800234f 	.word	0x0800234f
 8002254:	0800234f 	.word	0x0800234f
 8002258:	080022d9 	.word	0x080022d9
 800225c:	080022eb 	.word	0x080022eb
 8002260:	0800234f 	.word	0x0800234f
 8002264:	0800234f 	.word	0x0800234f
 8002268:	08002313 	.word	0x08002313
 800226c:	0800234f 	.word	0x0800234f
 8002270:	0800231d 	.word	0x0800231d
 8002274:	08002329 	.word	0x08002329
 8002278:	0800233f 	.word	0x0800233f
	case 'C':
	case 'c':
		term_csv_buffer(cmd_str[1] - 0x31);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b31      	subs	r3, #49	; 0x31
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fed2 	bl	8005030 <term_csv_buffer>
		retval = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
		break;
 8002290:	e05d      	b.n	800234e <cmd_process+0x1ca>
#ifdef USE_DISPLAY
	case 'D':
	case 'd':
		if (strlen((char*)cmd_str) > 1) {
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe f80c 	bl	80002b0 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d908      	bls.n	80022b0 <cmd_process+0x12c>
			display_show_curve(cmd_str[1] - 0x31);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	3b31      	subs	r3, #49	; 0x31
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 f8a7 	bl	80033fc <display_show_curve>
 80022ae:	e001      	b.n	80022b4 <cmd_process+0x130>
		} else {
			display_show_curves();
 80022b0:	f001 f878 	bl	80033a4 <display_show_curves>
		}
		retval = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
		break;
 80022b8:	e049      	b.n	800234e <cmd_process+0x1ca>
#endif
	case 'E':
	case 'e':
		if (esp_mode) { esp_mode = 0; }
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <cmd_process+0x1d4>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <cmd_process+0x146>
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <cmd_process+0x1d4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
		else {
			esp_mode = 1;
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
		}
		break;
 80022c8:	e041      	b.n	800234e <cmd_process+0x1ca>
			esp_mode = 1;
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <cmd_process+0x1d4>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
			term_print("\r\nESP mode active, enter ~ to exit\r\n");
 80022d0:	4822      	ldr	r0, [pc, #136]	; (800235c <cmd_process+0x1d8>)
 80022d2:	f002 fcfb 	bl	8004ccc <term_print>
		break;
 80022d6:	e03a      	b.n	800234e <cmd_process+0x1ca>
	case 'L':
	case 'l':
		retval = cmd_led(cmd_str[1] - 0x30 + 1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3301      	adds	r3, #1
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3b2f      	subs	r3, #47	; 0x2f
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fef3 	bl	80020cc <cmd_led>
 80022e6:	60f8      	str	r0, [r7, #12]
		break;
 80022e8:	e031      	b.n	800234e <cmd_process+0x1ca>
	case 'M':
	case 'm':
		if (strlen((char*)cmd_str) > 1) {
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fd ffe0 	bl	80002b0 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d908      	bls.n	8002308 <cmd_process+0x184>
		    term_show_channel(cmd_str[1] - 0x31);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3301      	adds	r3, #1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3b31      	subs	r3, #49	; 0x31
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fdd5 	bl	8004eb0 <term_show_channel>
 8002306:	e001      	b.n	800230c <cmd_process+0x188>
		} else {
			term_show_measurements();
 8002308:	f002 fd5e 	bl	8004dc8 <term_show_measurements>
		}
		retval = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
		break;
 8002310:	e01d      	b.n	800234e <cmd_process+0x1ca>
	case 'P':
	case 'p':
		retval = cmd_p(cmd_str);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff feba 	bl	800208c <cmd_p>
 8002318:	60f8      	str	r0, [r7, #12]
		break;
 800231a:	e018      	b.n	800234e <cmd_process+0x1ca>
	case 'R':
	case 'r':
		adc_restart = 1;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <cmd_process+0x1dc>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		retval = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
		break;
 8002326:	e012      	b.n	800234e <cmd_process+0x1ca>
	case 'S':
	case 's':
		term_show_buffer(cmd_str[1] - 0x31);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3301      	adds	r3, #1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3b31      	subs	r3, #49	; 0x31
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fcf0 	bl	8004d18 <term_show_buffer>
		retval = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
		break;
 800233c:	e007      	b.n	800234e <cmd_process+0x1ca>
	case 'T':
	case 't':
		retval = cmd_t(cmd_str);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe76 	bl	8002030 <cmd_t>
 8002344:	60f8      	str	r0, [r7, #12]
		break;
 8002346:	e002      	b.n	800234e <cmd_process+0x1ca>
	case 'H':
	case 'h':
	case '?':
		retval = cmd_help();
 8002348:	f7ff feda 	bl	8002100 <cmd_help>
 800234c:	60f8      	str	r0, [r7, #12]
	}
	return retval;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200024b0 	.word	0x200024b0
 800235c:	08010cd4 	.word	0x08010cd4
 8002360:	200024ae 	.word	0x200024ae

08002364 <CMD_Handler>:

/*
 * returns -1 if the command failed, 0 if processed OK
 */
int CMD_Handler(uint8_t* cmd_str)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	cmd_len = strlen((char *) cmd_str);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fd ff9f 	bl	80002b0 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <CMD_Handler+0x3c>)
 8002378:	701a      	strb	r2, [r3, #0]
	if (cmd_len < CMD_MIN_LEN) {
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <CMD_Handler+0x3c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <CMD_Handler+0x2a>
		cmd_error(cmd_str);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fe46 	bl	8002014 <cmd_error>
		return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238c:	e003      	b.n	8002396 <CMD_Handler+0x32>
	}
	return cmd_process(cmd_str);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fef8 	bl	8002184 <cmd_process>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000036c 	.word	0x2000036c

080023a4 <display_init>:
uint8_t last_screen = 0;
const Displ_Orientat_e display_orientation = Displ_Orientat_180;
uint16_t display_x, display_y;


void display_init() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	Displ_Init(display_orientation); // initialize the display and set the initial display orientation
 80023a8:	2302      	movs	r3, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 ffa6 	bl	80052fc <Displ_Init>
	if ((display_orientation == Displ_Orientat_90) || (display_orientation == Displ_Orientat_270)) {	// Horizontal orientation
 80023b0:	2302      	movs	r3, #2
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d002      	beq.n	80023bc <display_init+0x18>
 80023b6:	2302      	movs	r3, #2
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d107      	bne.n	80023cc <display_init+0x28>
	  display_x = DISPL_HEIGHT;	// 480 or 320
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <display_init+0x3c>)
 80023be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023c2:	801a      	strh	r2, [r3, #0]
	  display_y = DISPL_WIDTH;	// 320 or 240
 80023c4:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <display_init+0x40>)
 80023c6:	22f0      	movs	r2, #240	; 0xf0
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <display_init+0x38>
	} else {		// vertical orientation
		display_y = DISPL_HEIGHT;	// 480 or 320
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <display_init+0x40>)
 80023ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023d2:	801a      	strh	r2, [r3, #0]
		display_x = DISPL_WIDTH;	// 320 or 240
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <display_init+0x3c>)
 80023d6:	22f0      	movs	r2, #240	; 0xf0
 80023d8:	801a      	strh	r2, [r3, #0]
	}
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20001fe2 	.word	0x20001fe2
 80023e4:	20001fe4 	.word	0x20001fe4

080023e8 <display_splash_screen>:

void display_splash_screen() {
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af06      	add	r7, sp, #24
	// Draw initial TFT Display
	Displ_CLS(BLACK);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f003 f9da 	bl	80057a8 <Displ_CLS>
	snprintf(str,32, "%s V%d.%02d",  product_msg ,VERSION_MAJOR, VERSION_MINOR);
 80023f4:	2302      	movs	r3, #2
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2300      	movs	r3, #0
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <display_splash_screen+0xe4>)
 80023fe:	4a34      	ldr	r2, [pc, #208]	; (80024d0 <display_splash_screen+0xe8>)
 8002400:	2120      	movs	r1, #32
 8002402:	4834      	ldr	r0, [pc, #208]	; (80024d4 <display_splash_screen+0xec>)
 8002404:	f00b f85a 	bl	800d4bc <sniprintf>
	Displ_WString((display_x-(strlen(str)*Font24.Width))/2, (display_y-Font24.Height)/2, str, Font24, 1, YELLOW, BLACK);
 8002408:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <display_splash_screen+0xf0>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	461c      	mov	r4, r3
 800240e:	4831      	ldr	r0, [pc, #196]	; (80024d4 <display_splash_screen+0xec>)
 8002410:	f7fd ff4e 	bl	80002b0 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <display_splash_screen+0xf4>)
 8002418:	8892      	ldrh	r2, [r2, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	1ae3      	subs	r3, r4, r3
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	b29c      	uxth	r4, r3
 8002424:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <display_splash_screen+0xf8>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <display_splash_screen+0xf4>)
 800242c:	88db      	ldrh	r3, [r3, #6]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	0fda      	lsrs	r2, r3, #31
 8002432:	4413      	add	r3, r2
 8002434:	105b      	asrs	r3, r3, #1
 8002436:	b29d      	uxth	r5, r3
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <display_splash_screen+0xf4>)
 800243a:	2200      	movs	r2, #0
 800243c:	9204      	str	r2, [sp, #16]
 800243e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002442:	9203      	str	r2, [sp, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	9202      	str	r2, [sp, #8]
 8002448:	466e      	mov	r6, sp
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002450:	e886 0003 	stmia.w	r6, {r0, r1}
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <display_splash_screen+0xec>)
 8002458:	4629      	mov	r1, r5
 800245a:	4620      	mov	r0, r4
 800245c:	f004 f916 	bl	800668c <Displ_WString>
	Displ_WString((display_x-(strlen(copyright_msg)*Font12.Width))/2, (display_y-Font24.Height)/2+25, copyright_msg, Font12, 1, WHITE, BLACK);
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <display_splash_screen+0xf0>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	461c      	mov	r4, r3
 8002466:	481f      	ldr	r0, [pc, #124]	; (80024e4 <display_splash_screen+0xfc>)
 8002468:	f7fd ff22 	bl	80002b0 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <display_splash_screen+0x100>)
 8002470:	8892      	ldrh	r2, [r2, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	1ae3      	subs	r3, r4, r3
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	b29c      	uxth	r4, r3
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <display_splash_screen+0xf8>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <display_splash_screen+0xf4>)
 8002484:	88db      	ldrh	r3, [r3, #6]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	0fda      	lsrs	r2, r3, #31
 800248a:	4413      	add	r3, r2
 800248c:	105b      	asrs	r3, r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	3319      	adds	r3, #25
 8002492:	b29d      	uxth	r5, r3
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <display_splash_screen+0x100>)
 8002496:	2200      	movs	r2, #0
 8002498:	9204      	str	r2, [sp, #16]
 800249a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249e:	9203      	str	r2, [sp, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	9202      	str	r2, [sp, #8]
 80024a4:	466e      	mov	r6, sp
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ac:	e886 0003 	stmia.w	r6, {r0, r1}
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <display_splash_screen+0xfc>)
 80024b4:	4629      	mov	r1, r5
 80024b6:	4620      	mov	r0, r4
 80024b8:	f004 f8e8 	bl	800668c <Displ_WString>

	Displ_BackLight('1');
 80024bc:	2031      	movs	r0, #49	; 0x31
 80024be:	f004 f925 	bl	800670c <Displ_BackLight>
}
 80024c2:	bf00      	nop
 80024c4:	3704      	adds	r7, #4
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08015278 	.word	0x08015278
 80024d0:	08010cfc 	.word	0x08010cfc
 80024d4:	20001fc0 	.word	0x20001fc0
 80024d8:	20001fe2 	.word	0x20001fe2
 80024dc:	20000018 	.word	0x20000018
 80024e0:	20001fe4 	.word	0x20001fe4
 80024e4:	0801527c 	.word	0x0801527c
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	00000000 	.word	0x00000000

080024f0 <display_screen1>:
	snprintf(str,32,"%d,%d",display_x-10,display_y-10);
	Displ_WString(display_x-1-10-strlen(str)*Font12.Width, display_y-10-Font12.Height, str, Font12, 1, BLACK, WHITE);
}

// main screen
void display_screen1() {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af06      	add	r7, sp, #24
	if (!meter_readings_invalid) {
 80024f6:	4b8e      	ldr	r3, [pc, #568]	; (8002730 <display_screen1+0x240>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8134 	bne.w	8002768 <display_screen1+0x278>
		// V
		snprintf(str,sizeof(str),"%3.0f", metervalue_v);
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <display_screen1+0x244>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe f83f 	bl	8000588 <__aeabi_f2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	e9cd 2300 	strd	r2, r3, [sp]
 8002512:	4a89      	ldr	r2, [pc, #548]	; (8002738 <display_screen1+0x248>)
 8002514:	2120      	movs	r1, #32
 8002516:	4889      	ldr	r0, [pc, #548]	; (800273c <display_screen1+0x24c>)
 8002518:	f00a ffd0 	bl	800d4bc <sniprintf>
		Displ_WString(9, 7, str , Font30, 1, GREEN, BLACK);
 800251c:	4b88      	ldr	r3, [pc, #544]	; (8002740 <display_screen1+0x250>)
 800251e:	2200      	movs	r2, #0
 8002520:	9204      	str	r2, [sp, #16]
 8002522:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002526:	9203      	str	r2, [sp, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	9202      	str	r2, [sp, #8]
 800252c:	466c      	mov	r4, sp
 800252e:	1d1a      	adds	r2, r3, #4
 8002530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002534:	e884 0003 	stmia.w	r4, {r0, r1}
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a80      	ldr	r2, [pc, #512]	; (800273c <display_screen1+0x24c>)
 800253c:	2107      	movs	r1, #7
 800253e:	2009      	movs	r0, #9
 8002540:	f004 f8a4 	bl	800668c <Displ_WString>
		// I
		snprintf(str,sizeof(str),"%4.1f", metervalue_i1);
 8002544:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <display_screen1+0x254>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f81d 	bl	8000588 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	e9cd 2300 	strd	r2, r3, [sp]
 8002556:	4a7c      	ldr	r2, [pc, #496]	; (8002748 <display_screen1+0x258>)
 8002558:	2120      	movs	r1, #32
 800255a:	4878      	ldr	r0, [pc, #480]	; (800273c <display_screen1+0x24c>)
 800255c:	f00a ffae 	bl	800d4bc <sniprintf>
		Displ_WString(120, 7, str , Font30, 1, ORANGE, BLACK);
 8002560:	4b77      	ldr	r3, [pc, #476]	; (8002740 <display_screen1+0x250>)
 8002562:	2200      	movs	r2, #0
 8002564:	9204      	str	r2, [sp, #16]
 8002566:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800256a:	9203      	str	r2, [sp, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	466c      	mov	r4, sp
 8002572:	1d1a      	adds	r2, r3, #4
 8002574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002578:	e884 0003 	stmia.w	r4, {r0, r1}
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6f      	ldr	r2, [pc, #444]	; (800273c <display_screen1+0x24c>)
 8002580:	2107      	movs	r1, #7
 8002582:	2078      	movs	r0, #120	; 0x78
 8002584:	f004 f882 	bl	800668c <Displ_WString>
		// VA
		snprintf(str,sizeof(str),"%7.1f", metervalue_va1 );
 8002588:	4b70      	ldr	r3, [pc, #448]	; (800274c <display_screen1+0x25c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd fffb 	bl	8000588 <__aeabi_f2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9cd 2300 	strd	r2, r3, [sp]
 800259a:	4a6d      	ldr	r2, [pc, #436]	; (8002750 <display_screen1+0x260>)
 800259c:	2120      	movs	r1, #32
 800259e:	4867      	ldr	r0, [pc, #412]	; (800273c <display_screen1+0x24c>)
 80025a0:	f00a ff8c 	bl	800d4bc <sniprintf>
		Displ_WString(9, 48, str , Font30, 1, YELLOW, BLACK);
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <display_screen1+0x250>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	9204      	str	r2, [sp, #16]
 80025aa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025ae:	9203      	str	r2, [sp, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	9202      	str	r2, [sp, #8]
 80025b4:	466c      	mov	r4, sp
 80025b6:	1d1a      	adds	r2, r3, #4
 80025b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5e      	ldr	r2, [pc, #376]	; (800273c <display_screen1+0x24c>)
 80025c4:	2130      	movs	r1, #48	; 0x30
 80025c6:	2009      	movs	r0, #9
 80025c8:	f004 f860 	bl	800668c <Displ_WString>
		// W
		snprintf(str,sizeof(str),"%7.1f", metervalue_w1 );
 80025cc:	4b61      	ldr	r3, [pc, #388]	; (8002754 <display_screen1+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffd9 	bl	8000588 <__aeabi_f2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	e9cd 2300 	strd	r2, r3, [sp]
 80025de:	4a5c      	ldr	r2, [pc, #368]	; (8002750 <display_screen1+0x260>)
 80025e0:	2120      	movs	r1, #32
 80025e2:	4856      	ldr	r0, [pc, #344]	; (800273c <display_screen1+0x24c>)
 80025e4:	f00a ff6a 	bl	800d4bc <sniprintf>
		Displ_WString(9, 89, str , Font30, 1, YELLOW, BLACK);
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <display_screen1+0x250>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	9204      	str	r2, [sp, #16]
 80025ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025f2:	9203      	str	r2, [sp, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	9202      	str	r2, [sp, #8]
 80025f8:	466c      	mov	r4, sp
 80025fa:	1d1a      	adds	r2, r3, #4
 80025fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002600:	e884 0003 	stmia.w	r4, {r0, r1}
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4d      	ldr	r2, [pc, #308]	; (800273c <display_screen1+0x24c>)
 8002608:	2159      	movs	r1, #89	; 0x59
 800260a:	2009      	movs	r0, #9
 800260c:	f004 f83e 	bl	800668c <Displ_WString>
		// PF
		snprintf(str,sizeof(str),"%4.2f", fabs(metervalue_pf1) );
 8002610:	4b51      	ldr	r3, [pc, #324]	; (8002758 <display_screen1+0x268>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eef0 7ae7 	vabs.f32	s15, s15
 800261a:	ee17 0a90 	vmov	r0, s15
 800261e:	f7fd ffb3 	bl	8000588 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	e9cd 2300 	strd	r2, r3, [sp]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <display_screen1+0x26c>)
 800262c:	2120      	movs	r1, #32
 800262e:	4843      	ldr	r0, [pc, #268]	; (800273c <display_screen1+0x24c>)
 8002630:	f00a ff44 	bl	800d4bc <sniprintf>
		Displ_WString(9, 130, str , Font30, 1, WHITE, BLACK);
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <display_screen1+0x250>)
 8002636:	2200      	movs	r2, #0
 8002638:	9204      	str	r2, [sp, #16]
 800263a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263e:	9203      	str	r2, [sp, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	9202      	str	r2, [sp, #8]
 8002644:	466c      	mov	r4, sp
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3a      	ldr	r2, [pc, #232]	; (800273c <display_screen1+0x24c>)
 8002654:	2182      	movs	r1, #130	; 0x82
 8002656:	2009      	movs	r0, #9
 8002658:	f004 f818 	bl	800668c <Displ_WString>
		// Angle
		if (metervalue_i1 >= I1_MIN_PF) {
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <display_screen1+0x254>)
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	db3f      	blt.n	80026f0 <display_screen1+0x200>
			if (metervalue_pf1 < 0) {
 8002670:	4b39      	ldr	r3, [pc, #228]	; (8002758 <display_screen1+0x268>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d51b      	bpl.n	80026b8 <display_screen1+0x1c8>
				snprintf(str,sizeof(str),"%4.0f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <display_screen1+0x268>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	ec43 2b10 	vmov	d0, r2, r3
 8002692:	f00d fdc7 	bl	8010224 <acos>
 8002696:	ec51 0b10 	vmov	r0, r1, d0
 800269a:	a323      	add	r3, pc, #140	; (adr r3, 8002728 <display_screen1+0x238>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffca 	bl	8000638 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	e9cd 2300 	strd	r2, r3, [sp]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <display_screen1+0x270>)
 80026ae:	2120      	movs	r1, #32
 80026b0:	4822      	ldr	r0, [pc, #136]	; (800273c <display_screen1+0x24c>)
 80026b2:	f00a ff03 	bl	800d4bc <sniprintf>
 80026b6:	e020      	b.n	80026fa <display_screen1+0x20a>
			} else {
				snprintf(str,sizeof(str),"%4.1f", acos(metervalue_pf1) * (180.0 / 3.14159265) );
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <display_screen1+0x268>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff63 	bl	8000588 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b10 	vmov	d0, r2, r3
 80026ca:	f00d fdab 	bl	8010224 <acos>
 80026ce:	ec51 0b10 	vmov	r0, r1, d0
 80026d2:	a315      	add	r3, pc, #84	; (adr r3, 8002728 <display_screen1+0x238>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd ffae 	bl	8000638 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	e9cd 2300 	strd	r2, r3, [sp]
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <display_screen1+0x258>)
 80026e6:	2120      	movs	r1, #32
 80026e8:	4814      	ldr	r0, [pc, #80]	; (800273c <display_screen1+0x24c>)
 80026ea:	f00a fee7 	bl	800d4bc <sniprintf>
 80026ee:	e004      	b.n	80026fa <display_screen1+0x20a>
			}
		} else {
			snprintf(str,sizeof(str)," 0.0");
 80026f0:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <display_screen1+0x274>)
 80026f2:	2120      	movs	r1, #32
 80026f4:	4811      	ldr	r0, [pc, #68]	; (800273c <display_screen1+0x24c>)
 80026f6:	f00a fee1 	bl	800d4bc <sniprintf>
		}
		Displ_WString(138, 130, str , Font30, 1, WHITE, BLACK);
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <display_screen1+0x250>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	9204      	str	r2, [sp, #16]
 8002700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002704:	9203      	str	r2, [sp, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	9202      	str	r2, [sp, #8]
 800270a:	466c      	mov	r4, sp
 800270c:	1d1a      	adds	r2, r3, #4
 800270e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002712:	e884 0003 	stmia.w	r4, {r0, r1}
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <display_screen1+0x24c>)
 800271a:	2182      	movs	r1, #130	; 0x82
 800271c:	208a      	movs	r0, #138	; 0x8a
 800271e:	f003 ffb5 	bl	800668c <Displ_WString>
 8002722:	e099      	b.n	8002858 <display_screen1+0x368>
 8002724:	f3af 8000 	nop.w
 8002728:	1af05a77 	.word	0x1af05a77
 800272c:	404ca5dc 	.word	0x404ca5dc
 8002730:	2000028c 	.word	0x2000028c
 8002734:	200080a8 	.word	0x200080a8
 8002738:	08010d18 	.word	0x08010d18
 800273c:	20001fc0 	.word	0x20001fc0
 8002740:	20000024 	.word	0x20000024
 8002744:	200080ac 	.word	0x200080ac
 8002748:	08010d20 	.word	0x08010d20
 800274c:	200080b0 	.word	0x200080b0
 8002750:	08010d28 	.word	0x08010d28
 8002754:	200080b4 	.word	0x200080b4
 8002758:	200080b8 	.word	0x200080b8
 800275c:	08010d30 	.word	0x08010d30
 8002760:	08010d38 	.word	0x08010d38
 8002764:	08010d40 	.word	0x08010d40
	} else {		// display for invalid measurements
		Displ_WString(9, 7, "---" , Font30, 1, GREEN, BLACK);
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <display_screen1+0x374>)
 800276a:	2200      	movs	r2, #0
 800276c:	9204      	str	r2, [sp, #16]
 800276e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002772:	9203      	str	r2, [sp, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	9202      	str	r2, [sp, #8]
 8002778:	466c      	mov	r4, sp
 800277a:	1d1a      	adds	r2, r3, #4
 800277c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002780:	e884 0003 	stmia.w	r4, {r0, r1}
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a38      	ldr	r2, [pc, #224]	; (8002868 <display_screen1+0x378>)
 8002788:	2107      	movs	r1, #7
 800278a:	2009      	movs	r0, #9
 800278c:	f003 ff7e 	bl	800668c <Displ_WString>
		Displ_WString(120, 7, "--.-" , Font30, 1, ORANGE, BLACK);
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <display_screen1+0x374>)
 8002792:	2200      	movs	r2, #0
 8002794:	9204      	str	r2, [sp, #16]
 8002796:	f44f 427d 	mov.w	r2, #64768	; 0xfd00
 800279a:	9203      	str	r2, [sp, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	466c      	mov	r4, sp
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2f      	ldr	r2, [pc, #188]	; (800286c <display_screen1+0x37c>)
 80027b0:	2107      	movs	r1, #7
 80027b2:	2078      	movs	r0, #120	; 0x78
 80027b4:	f003 ff6a 	bl	800668c <Displ_WString>
		Displ_WString(9, 48, "-----.-" , Font30, 1, YELLOW, BLACK);
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <display_screen1+0x374>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	9204      	str	r2, [sp, #16]
 80027be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027c2:	9203      	str	r2, [sp, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	466c      	mov	r4, sp
 80027ca:	1d1a      	adds	r2, r3, #4
 80027cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a26      	ldr	r2, [pc, #152]	; (8002870 <display_screen1+0x380>)
 80027d8:	2130      	movs	r1, #48	; 0x30
 80027da:	2009      	movs	r0, #9
 80027dc:	f003 ff56 	bl	800668c <Displ_WString>
		Displ_WString(9, 89, "-----.-" , Font30, 1, YELLOW, BLACK);
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <display_screen1+0x374>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	9204      	str	r2, [sp, #16]
 80027e6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027ea:	9203      	str	r2, [sp, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	9202      	str	r2, [sp, #8]
 80027f0:	466c      	mov	r4, sp
 80027f2:	1d1a      	adds	r2, r3, #4
 80027f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <display_screen1+0x380>)
 8002800:	2159      	movs	r1, #89	; 0x59
 8002802:	2009      	movs	r0, #9
 8002804:	f003 ff42 	bl	800668c <Displ_WString>
		Displ_WString(9, 130, "-.--" , Font30, 1, WHITE, BLACK);
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <display_screen1+0x374>)
 800280a:	2200      	movs	r2, #0
 800280c:	9204      	str	r2, [sp, #16]
 800280e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002812:	9203      	str	r2, [sp, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	9202      	str	r2, [sp, #8]
 8002818:	466c      	mov	r4, sp
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002820:	e884 0003 	stmia.w	r4, {r0, r1}
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <display_screen1+0x384>)
 8002828:	2182      	movs	r1, #130	; 0x82
 800282a:	2009      	movs	r0, #9
 800282c:	f003 ff2e 	bl	800668c <Displ_WString>
		Displ_WString(138, 130, "--.-" , Font30, 1, WHITE, BLACK);
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <display_screen1+0x374>)
 8002832:	2200      	movs	r2, #0
 8002834:	9204      	str	r2, [sp, #16]
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	9202      	str	r2, [sp, #8]
 8002840:	466c      	mov	r4, sp
 8002842:	1d1a      	adds	r2, r3, #4
 8002844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002848:	e884 0003 	stmia.w	r4, {r0, r1}
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <display_screen1+0x37c>)
 8002850:	2182      	movs	r1, #130	; 0x82
 8002852:	208a      	movs	r0, #138	; 0x8a
 8002854:	f003 ff1a 	bl	800668c <Displ_WString>
		}
	display_show_curves();
 8002858:	f000 fda4 	bl	80033a4 <display_show_curves>
}
 800285c:	bf00      	nop
 800285e:	3704      	adds	r7, #4
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	20000024 	.word	0x20000024
 8002868:	08010d48 	.word	0x08010d48
 800286c:	08010d4c 	.word	0x08010d4c
 8002870:	08010d54 	.word	0x08010d54
 8002874:	08010d5c 	.word	0x08010d5c

08002878 <display_screen2>:

void display_screen2() {
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <display_update_meter>:

void display_update_meter(uint8_t screen) {
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af06      	add	r7, sp, #24
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]

	// detect screen number change
	if (screen != last_screen) {
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <display_update_meter+0x7c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	429a      	cmp	r2, r3
 800289a:	d023      	beq.n	80028e4 <display_update_meter+0x5c>
		switch(screen) {
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <display_update_meter+0x20>
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <display_update_meter+0x26>
 80028a6:	e01a      	b.n	80028de <display_update_meter+0x56>
		case 1:
			display_meter_mask();
 80028a8:	f000 f83e 	bl	8002928 <display_meter_mask>
			break;
 80028ac:	e017      	b.n	80028de <display_update_meter+0x56>
		case 2:
			Displ_CLS(BLACK);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f002 ff7a 	bl	80057a8 <Displ_CLS>
			Displ_WString(20, 20, "Screen 2" , Font24, 1, WHITE, BLACK);
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <display_update_meter+0x80>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	9204      	str	r2, [sp, #16]
 80028ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028be:	9203      	str	r2, [sp, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	9202      	str	r2, [sp, #8]
 80028c4:	466c      	mov	r4, sp
 80028c6:	1d1a      	adds	r2, r3, #4
 80028c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0e      	ldr	r2, [pc, #56]	; (800290c <display_update_meter+0x84>)
 80028d4:	2114      	movs	r1, #20
 80028d6:	2014      	movs	r0, #20
 80028d8:	f003 fed8 	bl	800668c <Displ_WString>
			break;
 80028dc:	bf00      	nop

		}
		last_screen = screen;
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <display_update_meter+0x7c>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	7013      	strb	r3, [r2, #0]
	}

	// update screen contents
	switch(screen) {
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <display_update_meter+0x68>
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <display_update_meter+0x6e>
		break;
	case 2:
		display_screen2();
		break;
	}
}
 80028ee:	e005      	b.n	80028fc <display_update_meter+0x74>
		display_screen1();
 80028f0:	f7ff fdfe 	bl	80024f0 <display_screen1>
		break;
 80028f4:	e002      	b.n	80028fc <display_update_meter+0x74>
		display_screen2();
 80028f6:	f7ff ffbf 	bl	8002878 <display_screen2>
		break;
 80028fa:	bf00      	nop
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}
 8002904:	20001fe0 	.word	0x20001fe0
 8002908:	20000018 	.word	0x20000018
 800290c:	08010d64 	.word	0x08010d64

08002910 <display_update_mask>:

/*
 * force mask update on next meter update
 */
void display_update_mask(void) {
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	last_screen = 0;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <display_update_mask+0x14>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20001fe0 	.word	0x20001fe0

08002928 <display_meter_mask>:

/*
 * Draw the screen mask for meter main screen
 */
void display_meter_mask() {
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b08b      	sub	sp, #44	; 0x2c
 800292c:	af06      	add	r7, sp, #24
	uint16_t ypos = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	81fb      	strh	r3, [r7, #14]
	uint16_t box_height = 40;
 8002932:	2328      	movs	r3, #40	; 0x28
 8002934:	81bb      	strh	r3, [r7, #12]
	uint16_t border_col = GREEN;
 8002936:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800293a:	817b      	strh	r3, [r7, #10]
	uint16_t font_col = GREEN;
 800293c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002940:	813b      	strh	r3, [r7, #8]
	uint16_t back_col = BLACK;
 8002942:	2300      	movs	r3, #0
 8002944:	80fb      	strh	r3, [r7, #6]
	Displ_CLS(back_col);
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4618      	mov	r0, r3
 800294a:	f002 ff2d 	bl	80057a8 <Displ_CLS>
	// V + A
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 800294e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002952:	4ba5      	ldr	r3, [pc, #660]	; (8002be8 <display_meter_mask+0x2c0>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	b29b      	uxth	r3, r3
 800295a:	b21a      	sxth	r2, r3
 800295c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002960:	897b      	ldrh	r3, [r7, #10]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4603      	mov	r3, r0
 8002966:	2000      	movs	r0, #0
 8002968:	f003 f907 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 800296c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002970:	89fa      	ldrh	r2, [r7, #14]
 8002972:	89bb      	ldrh	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	b21a      	sxth	r2, r3
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	2000      	movs	r0, #0
 8002984:	f003 f8f9 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002988:	89fa      	ldrh	r2, [r7, #14]
 800298a:	89bb      	ldrh	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	b219      	sxth	r1, r3
 8002992:	4b95      	ldr	r3, [pc, #596]	; (8002be8 <display_meter_mask+0x2c0>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	3b01      	subs	r3, #1
 8002998:	b29b      	uxth	r3, r3
 800299a:	b218      	sxth	r0, r3
 800299c:	89fa      	ldrh	r2, [r7, #14]
 800299e:	89bb      	ldrh	r3, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	4602      	mov	r2, r0
 80029ae:	2000      	movs	r0, #0
 80029b0:	f003 f8e3 	bl	8005b7a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, 0, border_col);
 80029b4:	4b8c      	ldr	r3, [pc, #560]	; (8002be8 <display_meter_mask+0x2c0>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b218      	sxth	r0, r3
 80029be:	89fa      	ldrh	r2, [r7, #14]
 80029c0:	89bb      	ldrh	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b219      	sxth	r1, r3
 80029c8:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <display_meter_mask+0x2c0>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	f003 f8cf 	bl	8005b7a <Displ_Line>
	Displ_WChar(75, ypos+9, 'V', Font24, 1, font_col, back_col);
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	3309      	adds	r3, #9
 80029e0:	b29c      	uxth	r4, r3
 80029e2:	4b82      	ldr	r3, [pc, #520]	; (8002bec <display_meter_mask+0x2c4>)
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	9204      	str	r2, [sp, #16]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	9203      	str	r2, [sp, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	9202      	str	r2, [sp, #8]
 80029f0:	466d      	mov	r5, sp
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2256      	movs	r2, #86	; 0x56
 8002a00:	4621      	mov	r1, r4
 8002a02:	204b      	movs	r0, #75	; 0x4b
 8002a04:	f003 fbc4 	bl	8006190 <Displ_WChar>
	font_col = ORANGE;
 8002a08:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002a0c:	813b      	strh	r3, [r7, #8]
	Displ_WChar(display_x-30, 9, 'A', Font24, 1, font_col, back_col);
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <display_meter_mask+0x2c0>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	b29c      	uxth	r4, r3
 8002a16:	4b75      	ldr	r3, [pc, #468]	; (8002bec <display_meter_mask+0x2c4>)
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	9204      	str	r2, [sp, #16]
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	9203      	str	r2, [sp, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	9202      	str	r2, [sp, #8]
 8002a24:	466d      	mov	r5, sp
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2241      	movs	r2, #65	; 0x41
 8002a34:	2109      	movs	r1, #9
 8002a36:	4620      	mov	r0, r4
 8002a38:	f003 fbaa 	bl	8006190 <Displ_WChar>
	// VA
	ypos += box_height+1;
 8002a3c:	89ba      	ldrh	r2, [r7, #12]
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	4413      	add	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002a48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	893b      	ldrh	r3, [r7, #8]
 8002a50:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002a52:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a56:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <display_meter_mask+0x2c0>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f003 f885 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002a70:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002a74:	89fa      	ldrh	r2, [r7, #14]
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b21a      	sxth	r2, r3
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	2200      	movs	r2, #0
 8002a86:	2000      	movs	r0, #0
 8002a88:	f003 f877 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002a8c:	89fa      	ldrh	r2, [r7, #14]
 8002a8e:	89bb      	ldrh	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b219      	sxth	r1, r3
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <display_meter_mask+0x2c0>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b218      	sxth	r0, r3
 8002aa0:	89fa      	ldrh	r2, [r7, #14]
 8002aa2:	89bb      	ldrh	r3, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f003 f861 	bl	8005b7a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <display_meter_mask+0x2c0>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b218      	sxth	r0, r3
 8002ac2:	89fa      	ldrh	r2, [r7, #14]
 8002ac4:	89bb      	ldrh	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b219      	sxth	r1, r3
 8002acc:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <display_meter_mask+0x2c0>)
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4623      	mov	r3, r4
 8002ae0:	f003 f84b 	bl	8005b7a <Displ_Line>
	Displ_WString(display_x-80, ypos+9, "VA", Font24, 1, font_col, back_col);
 8002ae4:	4b40      	ldr	r3, [pc, #256]	; (8002be8 <display_meter_mask+0x2c0>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	3b50      	subs	r3, #80	; 0x50
 8002aea:	b29c      	uxth	r4, r3
 8002aec:	89fb      	ldrh	r3, [r7, #14]
 8002aee:	3309      	adds	r3, #9
 8002af0:	b29d      	uxth	r5, r3
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <display_meter_mask+0x2c4>)
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	9204      	str	r2, [sp, #16]
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	9202      	str	r2, [sp, #8]
 8002b00:	466e      	mov	r6, sp
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b08:	e886 0003 	stmia.w	r6, {r0, r1}
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <display_meter_mask+0x2c8>)
 8002b10:	4629      	mov	r1, r5
 8002b12:	4620      	mov	r0, r4
 8002b14:	f003 fdba 	bl	800668c <Displ_WString>
	// W
	ypos += box_height+1;
 8002b18:	89ba      	ldrh	r2, [r7, #12]
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = YELLOW;
 8002b24:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	893b      	ldrh	r3, [r7, #8]
 8002b2c:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002b2e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <display_meter_mask+0x2c0>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	b21a      	sxth	r2, r3
 8002b3c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4603      	mov	r3, r0
 8002b46:	2000      	movs	r0, #0
 8002b48:	f003 f817 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002b4c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002b50:	89fa      	ldrh	r2, [r7, #14]
 8002b52:	89bb      	ldrh	r3, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	2200      	movs	r2, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f003 f809 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	89bb      	ldrh	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b219      	sxth	r1, r3
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <display_meter_mask+0x2c0>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	b218      	sxth	r0, r3
 8002b7c:	89fa      	ldrh	r2, [r7, #14]
 8002b7e:	89bb      	ldrh	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f002 fff3 	bl	8005b7a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <display_meter_mask+0x2c0>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	b218      	sxth	r0, r3
 8002b9e:	89fa      	ldrh	r2, [r7, #14]
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	b219      	sxth	r1, r3
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <display_meter_mask+0x2c0>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	b21a      	sxth	r2, r3
 8002bb2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002bb6:	897b      	ldrh	r3, [r7, #10]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f002 ffdd 	bl	8005b7a <Displ_Line>
	Displ_WChar(display_x-80, ypos+9, 'W', Font24, 1, font_col, back_col);
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <display_meter_mask+0x2c0>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	3b50      	subs	r3, #80	; 0x50
 8002bc6:	b29c      	uxth	r4, r3
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	3309      	adds	r3, #9
 8002bcc:	b29d      	uxth	r5, r3
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <display_meter_mask+0x2c4>)
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	9204      	str	r2, [sp, #16]
 8002bd4:	893a      	ldrh	r2, [r7, #8]
 8002bd6:	9203      	str	r2, [sp, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	9202      	str	r2, [sp, #8]
 8002bdc:	466e      	mov	r6, sp
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002be4:	e006      	b.n	8002bf4 <display_meter_mask+0x2cc>
 8002be6:	bf00      	nop
 8002be8:	20001fe2 	.word	0x20001fe2
 8002bec:	20000018 	.word	0x20000018
 8002bf0:	08010d70 	.word	0x08010d70
 8002bf4:	e886 0003 	stmia.w	r6, {r0, r1}
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2257      	movs	r2, #87	; 0x57
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f003 fac6 	bl	8006190 <Displ_WChar>

	// PF
	ypos += box_height+1;
 8002c04:	89ba      	ldrh	r2, [r7, #12]
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	81fb      	strh	r3, [r7, #14]
	border_col = font_col = WHITE;
 8002c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c14:	813b      	strh	r3, [r7, #8]
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	817b      	strh	r3, [r7, #10]
	Displ_Line(0,ypos,display_x-1,ypos, border_col);
 8002c1a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c1e:	4b60      	ldr	r3, [pc, #384]	; (8002da0 <display_meter_mask+0x478>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4603      	mov	r3, r0
 8002c32:	2000      	movs	r0, #0
 8002c34:	f002 ffa1 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos,0,ypos+box_height, border_col);
 8002c38:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002c3c:	89fa      	ldrh	r2, [r7, #14]
 8002c3e:	89bb      	ldrh	r3, [r7, #12]
 8002c40:	4413      	add	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	b21a      	sxth	r2, r3
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f002 ff93 	bl	8005b7a <Displ_Line>
	Displ_Line(0,ypos+box_height,display_x-1,ypos+box_height,border_col);
 8002c54:	89fa      	ldrh	r2, [r7, #14]
 8002c56:	89bb      	ldrh	r3, [r7, #12]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	b219      	sxth	r1, r3
 8002c5e:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <display_meter_mask+0x478>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b218      	sxth	r0, r3
 8002c68:	89fa      	ldrh	r2, [r7, #14]
 8002c6a:	89bb      	ldrh	r3, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	4602      	mov	r2, r0
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f002 ff7d 	bl	8005b7a <Displ_Line>
	Displ_Line(display_x-1, ypos+box_height, display_x-1, ypos, border_col);
 8002c80:	4b47      	ldr	r3, [pc, #284]	; (8002da0 <display_meter_mask+0x478>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	b218      	sxth	r0, r3
 8002c8a:	89fa      	ldrh	r2, [r7, #14]
 8002c8c:	89bb      	ldrh	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	b219      	sxth	r1, r3
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <display_meter_mask+0x478>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	f002 ff67 	bl	8005b7a <Displ_Line>
	Displ_WString(95, ypos+9, "PF", Font24, 1, font_col, back_col);
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	3309      	adds	r3, #9
 8002cb0:	b29c      	uxth	r4, r3
 8002cb2:	4b3c      	ldr	r3, [pc, #240]	; (8002da4 <display_meter_mask+0x47c>)
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	9204      	str	r2, [sp, #16]
 8002cb8:	893a      	ldrh	r2, [r7, #8]
 8002cba:	9203      	str	r2, [sp, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	9202      	str	r2, [sp, #8]
 8002cc0:	466d      	mov	r5, sp
 8002cc2:	1d1a      	adds	r2, r3, #4
 8002cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a36      	ldr	r2, [pc, #216]	; (8002da8 <display_meter_mask+0x480>)
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	205f      	movs	r0, #95	; 0x5f
 8002cd4:	f003 fcda 	bl	800668c <Displ_WString>
	Displ_WChar(display_x-22, 130, 0x60, Font30, 1, font_col, back_col);
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <display_meter_mask+0x478>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	3b16      	subs	r3, #22
 8002cde:	b29c      	uxth	r4, r3
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <display_meter_mask+0x484>)
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	9204      	str	r2, [sp, #16]
 8002ce6:	893a      	ldrh	r2, [r7, #8]
 8002ce8:	9203      	str	r2, [sp, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	466d      	mov	r5, sp
 8002cf0:	1d1a      	adds	r2, r3, #4
 8002cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2260      	movs	r2, #96	; 0x60
 8002cfe:	2182      	movs	r1, #130	; 0x82
 8002d00:	4620      	mov	r0, r4
 8002d02:	f003 fa45 	bl	8006190 <Displ_WChar>

	// Graph Box
	ypos += box_height+1;
 8002d06:	89ba      	ldrh	r2, [r7, #12]
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	81fb      	strh	r3, [r7, #14]
	border_col = BLUE;
 8002d12:	231f      	movs	r3, #31
 8002d14:	817b      	strh	r3, [r7, #10]
	curve_y_size = display_y-ypos-graph_border*2;
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <display_meter_mask+0x488>)
 8002d18:	881a      	ldrh	r2, [r3, #0]
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	2302      	movs	r3, #2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <display_meter_mask+0x48c>)
 8002d2c:	801a      	strh	r2, [r3, #0]
	curve_y_zero = ypos + curve_y_size / 2 + graph_border;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <display_meter_mask+0x48c>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <display_meter_mask+0x490>)
 8002d44:	801a      	strh	r2, [r3, #0]
	Displ_Border(0,ypos,display_x,display_y-ypos, graph_border, border_col);
 8002d46:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <display_meter_mask+0x478>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b218      	sxth	r0, r3
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <display_meter_mask+0x488>)
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b21c      	sxth	r4, r3
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	897a      	ldrh	r2, [r7, #10]
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4623      	mov	r3, r4
 8002d68:	4602      	mov	r2, r0
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f003 f836 	bl	8005ddc <Displ_Border>
	Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+210, curve_y_zero, WHITE);
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <display_meter_mask+0x494>)
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b218      	sxth	r0, r3
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <display_meter_mask+0x490>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b219      	sxth	r1, r3
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <display_meter_mask+0x494>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	33d2      	adds	r3, #210	; 0xd2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <display_meter_mask+0x490>)
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002d90:	9400      	str	r4, [sp, #0]
 8002d92:	f002 fef2 	bl	8005b7a <Displ_Line>
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20001fe2 	.word	0x20001fe2
 8002da4:	20000018 	.word	0x20000018
 8002da8:	08010d74 	.word	0x08010d74
 8002dac:	20000024 	.word	0x20000024
 8002db0:	20001fe4 	.word	0x20001fe4
 8002db4:	20000008 	.word	0x20000008
 8002db8:	200006b8 	.word	0x200006b8
 8002dbc:	2000000a 	.word	0x2000000a

08002dc0 <display_align_curves>:
/*
 * Aligns curve to start at positive zero crossing and reduces it to cuts one full cycle
 * parameter bufnum: buffer to use for curve display
 * returns: number of points in the aligned curve or -1 if alignment failed
 */
int display_align_curves() {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
	int dest_idx = -1;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dca:	60fb      	str	r3, [r7, #12]
	int i, continue_at = -1;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd0:	607b      	str	r3, [r7, #4]

	// if we don't have a zero crossing use the sample_buf curve entries
	if (sample_buf_meta[ADC_CH_V].zero_cross_pos < 0) {
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <display_align_curves+0xfc>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da20      	bge.n	8002e1c <display_align_curves+0x5c>
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	e016      	b.n	8002e0e <display_align_curves+0x4e>
			aligned_curve[ADC_CH_V][i] = sample_buf[ADC_CH_V][i];
 8002de0:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <display_align_curves+0x100>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002de8:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <display_align_curves+0x104>)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			aligned_curve[ADC_CH_I1][i] = sample_buf[ADC_CH_I1][i];
 8002df0:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <display_align_curves+0x100>)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002df8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002dfc:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <display_align_curves+0x104>)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002e04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002e14:	d3e4      	bcc.n	8002de0 <display_align_curves+0x20>
#endif
#if I3_IN_USE
			aligned_curve[ADC_CH_I3][i] = sample_buf[ADC_CH_I3][i];
#endif
		}
		return SAMPLE_BUF_SIZE;
 8002e16:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002e1a:	e049      	b.n	8002eb0 <display_align_curves+0xf0>
	}

	// start at zero crossing and use every reading up to the end of the sample buffer
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <display_align_curves+0xfc>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	e019      	b.n	8002e58 <display_align_curves+0x98>
		dest_idx++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <display_align_curves+0x100>)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <display_align_curves+0x104>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002e3a:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <display_align_curves+0x100>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002e42:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <display_align_curves+0x104>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=sample_buf_meta[ADC_CH_V].zero_cross_pos; i<SAMPLE_BUF_SIZE; i++ ) {
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8002e5e:	d3e1      	bcc.n	8002e24 <display_align_curves+0x64>
			}
		}
	}
	*/

	continue_at = SAMPLE_BUF_OVERLAP;
 8002e60:	2314      	movs	r3, #20
 8002e62:	607b      	str	r3, [r7, #4]

	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	e019      	b.n	8002e9e <display_align_curves+0xde>
		dest_idx++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
		aligned_curve[ADC_CH_V][dest_idx] = sample_buf[ADC_CH_V][i];
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <display_align_curves+0x100>)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <display_align_curves+0x104>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		aligned_curve[ADC_CH_I1][dest_idx] = sample_buf[ADC_CH_I1][i];
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <display_align_curves+0x100>)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002e88:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <display_align_curves+0x104>)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8002e94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=continue_at; i<sample_buf_meta[ADC_CH_V].zero_cross_pos; i++) {
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <display_align_curves+0xfc>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	dbe0      	blt.n	8002e6a <display_align_curves+0xaa>
#if I3_IN_USE
		aligned_curve[ADC_CH_I3][dest_idx] = sample_buf[ADC_CH_I3][i];
#endif
	}

	return ++dest_idx;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	2000023c 	.word	0x2000023c
 8002ec0:	20007388 	.word	0x20007388
 8002ec4:	200006bc 	.word	0x200006bc

08002ec8 <draw_curve>:
 * parameter dont_clear: set to 1 to prevent clearing of the previous curve
 * parameter centre_zero: set to 1 to draw curve around a centered zero line, otherwise from bottom
 * The curve display area is cleared and the zero line is drawn.
 * Each point in the curve_y array is drawn as a line to the previous point
 */
void draw_curve(uint16_t colour, uint8_t dont_clear, uint8_t centre_zero) {
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	b08b      	sub	sp, #44	; 0x2c
 8002ecc:	af06      	add	r7, sp, #24
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	717b      	strb	r3, [r7, #5]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	713b      	strb	r3, [r7, #4]

	if ((! dont_clear) || (meter_readings_invalid)) {
 8002eda:	797b      	ldrb	r3, [r7, #5]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <draw_curve+0x20>
 8002ee0:	4b65      	ldr	r3, [pc, #404]	; (8003078 <draw_curve+0x1b0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <draw_curve+0x4c>
		// first clear the curve area
		Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <draw_curve+0x1b4>)
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	4b64      	ldr	r3, [pc, #400]	; (8003080 <draw_curve+0x1b8>)
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b02      	subs	r3, #2
 8002ef6:	b299      	uxth	r1, r3
 8002ef8:	4b62      	ldr	r3, [pc, #392]	; (8003084 <draw_curve+0x1bc>)
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	2302      	movs	r3, #2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <draw_curve+0x1b8>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	9000      	str	r0, [sp, #0]
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f002 fa96 	bl	8005440 <Displ_FillArea>
	}
	// draw curve border
	//Displ_Border(0,display_y-curve_y_size,display_x-1,curve_y_size, graph_border, BLUE);

	// Don't draw curve for invalid meter reading
	if (meter_readings_invalid) {
 8002f14:	4b58      	ldr	r3, [pc, #352]	; (8003078 <draw_curve+0x1b0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d023      	beq.n	8002f64 <draw_curve+0x9c>
		//Displ_FillArea(2,display_y-curve_y_size-2,display_x-graph_border*2,curve_y_size, BLACK);
		Displ_WString(curve_x_zero+Font24.Width, curve_y_zero - Font24.Height / 2 , "Low Voltage", Font24, 1, YELLOW, RED);
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <draw_curve+0x1c0>)
 8002f1e:	889a      	ldrh	r2, [r3, #4]
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <draw_curve+0x1c4>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	b29c      	uxth	r4, r3
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <draw_curve+0x1c8>)
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	4b56      	ldr	r3, [pc, #344]	; (8003088 <draw_curve+0x1c0>)
 8002f2e:	88db      	ldrh	r3, [r3, #6]
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	b29d      	uxth	r5, r3
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <draw_curve+0x1c0>)
 8002f3a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f3e:	9204      	str	r2, [sp, #16]
 8002f40:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f44:	9203      	str	r2, [sp, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	9202      	str	r2, [sp, #8]
 8002f4a:	466e      	mov	r6, sp
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f52:	e886 0003 	stmia.w	r6, {r0, r1}
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <draw_curve+0x1cc>)
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f003 fb95 	bl	800668c <Displ_WString>
		return;
 8002f62:	e086      	b.n	8003072 <draw_curve+0x1aa>
	}

	if (centre_zero) {
 8002f64:	793b      	ldrb	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d04c      	beq.n	8003004 <draw_curve+0x13c>
		// draw zero line
		Displ_Line(curve_x_zero, curve_y_zero, curve_x_zero+curve_len, curve_y_zero, WHITE);
 8002f6a:	4b48      	ldr	r3, [pc, #288]	; (800308c <draw_curve+0x1c4>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b218      	sxth	r0, r3
 8002f70:	4b47      	ldr	r3, [pc, #284]	; (8003090 <draw_curve+0x1c8>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b219      	sxth	r1, r3
 8002f76:	4b45      	ldr	r3, [pc, #276]	; (800308c <draw_curve+0x1c4>)
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <draw_curve+0x1d0>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b21a      	sxth	r2, r3
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <draw_curve+0x1c8>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002f8e:	9400      	str	r4, [sp, #0]
 8002f90:	f002 fdf3 	bl	8005b7a <Displ_Line>
		// draw the curve
		for (int x=1; x<curve_len; x++) {
 8002f94:	2301      	movs	r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e02d      	b.n	8002ff6 <draw_curve+0x12e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - curve_y[x-1], x + curve_x_zero, curve_y_zero - curve_y[x], colour);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <draw_curve+0x1c4>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b218      	sxth	r0, r3
 8002fac:	4b38      	ldr	r3, [pc, #224]	; (8003090 <draw_curve+0x1c8>)
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4939      	ldr	r1, [pc, #228]	; (800309c <draw_curve+0x1d4>)
 8002fb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b219      	sxth	r1, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <draw_curve+0x1c4>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b21c      	sxth	r4, r3
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <draw_curve+0x1c8>)
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	4d31      	ldr	r5, [pc, #196]	; (800309c <draw_curve+0x1d4>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b21a      	sxth	r2, r3
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	4622      	mov	r2, r4
 8002fec:	f002 fdc5 	bl	8005b7a <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <draw_curve+0x1d0>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	dbcb      	blt.n	8002f9a <draw_curve+0xd2>
 8003002:	e036      	b.n	8003072 <draw_curve+0x1aa>
		}
	} else {	// display for non-AC wave forms
		for (int x=1; x<curve_len; x++) {
 8003004:	2301      	movs	r3, #1
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	e02d      	b.n	8003066 <draw_curve+0x19e>
			Displ_Line(x + curve_x_zero-1, curve_y_zero - (curve_y[x-1]), x + curve_x_zero, curve_y_zero - (curve_y[x]), colour);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	b29a      	uxth	r2, r3
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <draw_curve+0x1c4>)
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	4413      	add	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	b218      	sxth	r0, r3
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <draw_curve+0x1c8>)
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3b01      	subs	r3, #1
 8003024:	491d      	ldr	r1, [pc, #116]	; (800309c <draw_curve+0x1d4>)
 8003026:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800302a:	b29b      	uxth	r3, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29b      	uxth	r3, r3
 8003030:	b219      	sxth	r1, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <draw_curve+0x1c4>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	b21c      	sxth	r4, r3
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <draw_curve+0x1c8>)
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	4d15      	ldr	r5, [pc, #84]	; (800309c <draw_curve+0x1d4>)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800304c:	b29b      	uxth	r3, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	b29b      	uxth	r3, r3
 8003052:	b21a      	sxth	r2, r3
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	4622      	mov	r2, r4
 800305c:	f002 fd8d 	bl	8005b7a <Displ_Line>
		for (int x=1; x<curve_len; x++) {
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3301      	adds	r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <draw_curve+0x1d0>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4293      	cmp	r3, r2
 8003070:	dbcb      	blt.n	800300a <draw_curve+0x142>
		}
	}
}
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003078:	2000028c 	.word	0x2000028c
 800307c:	20001fe4 	.word	0x20001fe4
 8003080:	20000008 	.word	0x20000008
 8003084:	20001fe2 	.word	0x20001fe2
 8003088:	20000018 	.word	0x20000018
 800308c:	2000000a 	.word	0x2000000a
 8003090:	200006b8 	.word	0x200006b8
 8003094:	08010d78 	.word	0x08010d78
 8003098:	20001fbc 	.word	0x20001fbc
 800309c:	20000370 	.word	0x20000370

080030a0 <make_curve>:
 * 1) Two adjacent data points are averaged to half the number of data points
 * 2) The data points are raw ADC values ranging between 0 and 4095. The curve data
 * represents plus/minus values centered around the half way point of the data range.
 * The (+/-)curve points are scaled to fit the vertical resolution of the graph.
 */
void make_curve(uint8_t bufnum, uint8_t auto_scale) {
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b095      	sub	sp, #84	; 0x54
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	460a      	mov	r2, r1
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71bb      	strb	r3, [r7, #6]
	int value;
	int scale_factor = 1;
 80030b0:	2301      	movs	r3, #1
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int src_idx = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
	int range = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 80030b8:	79fa      	ldrb	r2, [r7, #7]
 80030ba:	49b3      	ldr	r1, [pc, #716]	; (8003388 <make_curve+0x2e8>)
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3302      	adds	r3, #2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	49ae      	ldr	r1, [pc, #696]	; (8003388 <make_curve+0x2e8>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	1ac3      	subs	r3, r0, r3
 80030de:	63bb      	str	r3, [r7, #56]	; 0x38
	int zero_value = range / 2 + sample_buf_meta[bufnum].min;	// zero should be half way if DC-Bias is accurate
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	0fda      	lsrs	r2, r3, #31
 80030e4:	4413      	add	r3, r2
 80030e6:	105b      	asrs	r3, r3, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	79fa      	ldrb	r2, [r7, #7]
 80030ec:	49a6      	ldr	r1, [pc, #664]	; (8003388 <make_curve+0x2e8>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	4403      	add	r3, r0
 80030fc:	637b      	str	r3, [r7, #52]	; 0x34
	int curve_y_min;
	float fScale;

	if (auto_scale) {
 80030fe:	79bb      	ldrb	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00f      	beq.n	8003124 <make_curve+0x84>
		fScale = (float)curve_y_size / (float)range;
 8003104:	4ba1      	ldr	r3, [pc, #644]	; (800338c <make_curve+0x2ec>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800311e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003122:	e00b      	b.n	800313c <make_curve+0x9c>
	} else {
		fScale = (float)curve_y_size / ADC_FS_RAW;
 8003124:	4b99      	ldr	r3, [pc, #612]	; (800338c <make_curve+0x2ec>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003130:	eddf 6a97 	vldr	s13, [pc, #604]	; 8003390 <make_curve+0x2f0>
 8003134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003138:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}
	if (fScale < 1) {
 800313c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	d51f      	bpl.n	800318e <make_curve+0xee>
		scale_factor = trunc(1/fScale)+1; // divisor
 800314e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003152:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800315a:	ee16 0a90 	vmov	r0, s13
 800315e:	f7fd fa13 	bl	8000588 <__aeabi_f2d>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	ec43 2b10 	vmov	d0, r2, r3
 800316a:	f00d fc49 	bl	8010a00 <trunc>
 800316e:	ec51 0b10 	vmov	r0, r1, d0
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	4b87      	ldr	r3, [pc, #540]	; (8003394 <make_curve+0x2f4>)
 8003178:	f7fd f8a8 	bl	80002cc <__adddf3>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fd08 	bl	8000b98 <__aeabi_d2iz>
 8003188:	4603      	mov	r3, r0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	e010      	b.n	80031b0 <make_curve+0x110>
		//value = sample_buf_meta[bufnum].max / scale_factor;
	} else {
		scale_factor = trunc(fScale);	// multiplier
 800318e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003190:	f7fd f9fa 	bl	8000588 <__aeabi_f2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	ec43 2b10 	vmov	d0, r2, r3
 800319c:	f00d fc30 	bl	8010a00 <trunc>
 80031a0:	ec53 2b10 	vmov	r2, r3, d0
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fcf6 	bl	8000b98 <__aeabi_d2iz>
 80031ac:	4603      	mov	r3, r0
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		//value = sample_buf_meta[bufnum].max * scale_factor;
	}

	curve_len = display_align_curves() / 2;		// half the data points to fit screen size
 80031b0:	f7ff fe06 	bl	8002dc0 <display_align_curves>
 80031b4:	4603      	mov	r3, r0
 80031b6:	0fda      	lsrs	r2, r3, #31
 80031b8:	4413      	add	r3, r2
 80031ba:	105b      	asrs	r3, r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b76      	ldr	r3, [pc, #472]	; (8003398 <make_curve+0x2f8>)
 80031c0:	801a      	strh	r2, [r3, #0]
	curve_y_min = 0 - (curve_y_size / 2 -1) ;	// limit y negative points to keep curve within area
 80031c2:	4b72      	ldr	r3, [pc, #456]	; (800338c <make_curve+0x2ec>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f1c3 0301 	rsb	r3, r3, #1
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30

	// calculate the new curve as +- values around the centre
	// set multiplier and divider to ensure the function can handle a wide range of values
	if (fScale < 1) {
 80031d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80031d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d567      	bpl.n	80032b2 <make_curve+0x212>
		// calculate start of first line
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	496d      	ldr	r1, [pc, #436]	; (800339c <make_curve+0x2fc>)
 80031e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031ea:	fb03 f202 	mul.w	r2, r3, r2
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	4413      	add	r3, r2
 80031f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031f6:	461c      	mov	r4, r3
 80031f8:	79fa      	ldrb	r2, [r7, #7]
 80031fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fc:	3301      	adds	r3, #1
 80031fe:	4967      	ldr	r1, [pc, #412]	; (800339c <make_curve+0x2fc>)
 8003200:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003204:	fb00 f202 	mul.w	r2, r0, r2
 8003208:	4413      	add	r3, r2
 800320a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800320e:	4423      	add	r3, r4
 8003210:	0fda      	lsrs	r2, r3, #31
 8003212:	4413      	add	r3, r2
 8003214:	105b      	asrs	r3, r3, #1
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
		//curve_y[0] = (value  - zero_value) / scale_factor;
		curve_y[0] = MAX((value - zero_value) / scale_factor, curve_y_min);
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003220:	fb92 f3f3 	sdiv	r3, r2, r3
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4293      	cmp	r3, r2
 8003230:	bfb8      	it	lt
 8003232:	4613      	movlt	r3, r2
 8003234:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <make_curve+0x300>)
 8003236:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003238:	2301      	movs	r3, #1
 800323a:	643b      	str	r3, [r7, #64]	; 0x40
 800323c:	e032      	b.n	80032a4 <make_curve+0x204>
			src_idx+=2;
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	3302      	adds	r3, #2
 8003242:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	4955      	ldr	r1, [pc, #340]	; (800339c <make_curve+0x2fc>)
 8003248:	f44f 7248 	mov.w	r2, #800	; 0x320
 800324c:	fb03 f202 	mul.w	r2, r3, r2
 8003250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003252:	4413      	add	r3, r2
 8003254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003258:	461c      	mov	r4, r3
 800325a:	79fa      	ldrb	r2, [r7, #7]
 800325c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325e:	3301      	adds	r3, #1
 8003260:	494e      	ldr	r1, [pc, #312]	; (800339c <make_curve+0x2fc>)
 8003262:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003266:	fb00 f202 	mul.w	r2, r0, r2
 800326a:	4413      	add	r3, r2
 800326c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003270:	4423      	add	r3, r4
 8003272:	0fda      	lsrs	r2, r3, #31
 8003274:	4413      	add	r3, r2
 8003276:	105b      	asrs	r3, r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) / scale_factor, curve_y_min);
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003282:	fb92 f3f3 	sdiv	r3, r2, r3
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	bfb8      	it	lt
 8003294:	461a      	movlt	r2, r3
 8003296:	4942      	ldr	r1, [pc, #264]	; (80033a0 <make_curve+0x300>)
 8003298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800329e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a0:	3301      	adds	r3, #1
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
 80032a4:	4b3c      	ldr	r3, [pc, #240]	; (8003398 <make_curve+0x2f8>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ac:	4293      	cmp	r3, r2
 80032ae:	dbc6      	blt.n	800323e <make_curve+0x19e>
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
			// calculate reading pixel on display using the scale value
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
		}
	}
}
 80032b0:	e066      	b.n	8003380 <make_curve+0x2e0>
		value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	4939      	ldr	r1, [pc, #228]	; (800339c <make_curve+0x2fc>)
 80032b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80032ba:	fb03 f202 	mul.w	r2, r3, r2
 80032be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c0:	4413      	add	r3, r2
 80032c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80032c6:	461c      	mov	r4, r3
 80032c8:	79fa      	ldrb	r2, [r7, #7]
 80032ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032cc:	3301      	adds	r3, #1
 80032ce:	4933      	ldr	r1, [pc, #204]	; (800339c <make_curve+0x2fc>)
 80032d0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80032d4:	fb00 f202 	mul.w	r2, r0, r2
 80032d8:	4413      	add	r3, r2
 80032da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80032de:	4423      	add	r3, r4
 80032e0:	0fda      	lsrs	r2, r3, #31
 80032e2:	4413      	add	r3, r2
 80032e4:	105b      	asrs	r3, r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		curve_y[0] = MAX((value - zero_value) * scale_factor, curve_y_min);
 80032e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	1ad2      	subs	r2, r2, r3
 80032ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	4293      	cmp	r3, r2
 8003300:	bfb8      	it	lt
 8003302:	4613      	movlt	r3, r2
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <make_curve+0x300>)
 8003306:	6013      	str	r3, [r2, #0]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 8003308:	2301      	movs	r3, #1
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	e032      	b.n	8003374 <make_curve+0x2d4>
			src_idx+=2;
 800330e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003310:	3302      	adds	r3, #2
 8003312:	64bb      	str	r3, [r7, #72]	; 0x48
			value = (aligned_curve[bufnum][src_idx] + aligned_curve[bufnum][src_idx+1]) / 2;
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4921      	ldr	r1, [pc, #132]	; (800339c <make_curve+0x2fc>)
 8003318:	f44f 7248 	mov.w	r2, #800	; 0x320
 800331c:	fb03 f202 	mul.w	r2, r3, r2
 8003320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003322:	4413      	add	r3, r2
 8003324:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003328:	461c      	mov	r4, r3
 800332a:	79fa      	ldrb	r2, [r7, #7]
 800332c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800332e:	3301      	adds	r3, #1
 8003330:	491a      	ldr	r1, [pc, #104]	; (800339c <make_curve+0x2fc>)
 8003332:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003336:	fb00 f202 	mul.w	r2, r0, r2
 800333a:	4413      	add	r3, r2
 800333c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003340:	4423      	add	r3, r4
 8003342:	0fda      	lsrs	r2, r3, #31
 8003344:	4413      	add	r3, r2
 8003346:	105b      	asrs	r3, r3, #1
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
			curve_y[pos_x] = MAX((value - zero_value) * scale_factor, curve_y_min);
 800334a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	429a      	cmp	r2, r3
 8003362:	bfb8      	it	lt
 8003364:	461a      	movlt	r2, r3
 8003366:	490e      	ldr	r1, [pc, #56]	; (80033a0 <make_curve+0x300>)
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int pos_x=1; pos_x < curve_len; pos_x++) {
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	3301      	adds	r3, #1
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <make_curve+0x2f8>)
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	4293      	cmp	r3, r2
 800337e:	dbc6      	blt.n	800330e <make_curve+0x26e>
}
 8003380:	bf00      	nop
 8003382:	3754      	adds	r7, #84	; 0x54
 8003384:	46bd      	mov	sp, r7
 8003386:	bd90      	pop	{r4, r7, pc}
 8003388:	2000023c 	.word	0x2000023c
 800338c:	20000008 	.word	0x20000008
 8003390:	457ff000 	.word	0x457ff000
 8003394:	3ff00000 	.word	0x3ff00000
 8003398:	20001fbc 	.word	0x20001fbc
 800339c:	200006bc 	.word	0x200006bc
 80033a0:	20000370 	.word	0x20000370

080033a4 <display_show_curves>:

/*
 * Display curves for all configured channels on TFT display
 */
void display_show_curves(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0

	make_curve(ADC_CH_V, 0);
 80033a8:	2100      	movs	r1, #0
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff fe78 	bl	80030a0 <make_curve>
	draw_curve(channel_colour[ADC_CH_V], 0, (sample_buf_meta[ADC_CH_V].zero_cross_pos >= 0));
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <display_show_curves+0x50>)
 80033b2:	8818      	ldrh	r0, [r3, #0]
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <display_show_curves+0x54>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	0fdb      	lsrs	r3, r3, #31
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	2100      	movs	r1, #0
 80033c2:	f7ff fd81 	bl	8002ec8 <draw_curve>

	if (!sample_buf_meta[ADC_CH_I1].value_is_zero) {
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <display_show_curves+0x54>)
 80033c8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10e      	bne.n	80033ee <display_show_curves+0x4a>
		make_curve(ADC_CH_I1, 1);
 80033d0:	2101      	movs	r1, #1
 80033d2:	2003      	movs	r0, #3
 80033d4:	f7ff fe64 	bl	80030a0 <make_curve>
		draw_curve(channel_colour[ADC_CH_I1], 1, (sample_buf_meta[ADC_CH_I1].zero_cross_pos >= 0));
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <display_show_curves+0x50>)
 80033da:	88d8      	ldrh	r0, [r3, #6]
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <display_show_curves+0x54>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	43db      	mvns	r3, r3
 80033e2:	0fdb      	lsrs	r3, r3, #31
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	2101      	movs	r1, #1
 80033ea:	f7ff fd6d 	bl	8002ec8 <draw_curve>
	}
	if ((NUM_I_SENSORS > 2)&&(!sample_buf_meta[ADC_CH_I3].value_is_zero)) {
		make_curve(ADC_CH_I3, 1);
		draw_curve(channel_colour[ADC_CH_I3], 1, (sample_buf_meta[ADC_CH_I3].zero_cross_pos >= 0));
	}
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000000 	.word	0x20000000
 80033f8:	2000023c 	.word	0x2000023c

080033fc <display_show_curve>:
/*
 * Show a ADC channel curve on TFT display
 * parameter bufnum: adc_raw_buf index to ADC channel
 * Disp_CLS() takes a long time to run so we draw the previous curve in black to remove it
 */
void display_show_curve(uint8_t bufnum) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d81b      	bhi.n	8003444 <display_show_curve+0x48>

	make_curve(bufnum, 1);
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fe45 	bl	80030a0 <make_curve>
	draw_curve(channel_colour[bufnum], 0, (sample_buf_meta[bufnum].measurements_valid != 0));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <display_show_curve+0x50>)
 800341a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800341e:	79fa      	ldrb	r2, [r7, #7]
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <display_show_curve+0x54>)
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	330c      	adds	r3, #12
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	f7ff fd43 	bl	8002ec8 <draw_curve>
 8003442:	e000      	b.n	8003446 <display_show_curve+0x4a>
	if ( (bufnum >= ADC_NUM_BUFFERS) || (bufnum < 0) ) return;	// buffer range check
 8003444:	bf00      	nop

}
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000000 	.word	0x20000000
 8003450:	2000023c 	.word	0x2000023c

08003454 <ee24_isConnected>:

/*
 * @ brief  Check if EEPROM device is present
 */
bool ee24_isConnected(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 200)!=HAL_OK)
 8003458:	23c8      	movs	r3, #200	; 0xc8
 800345a:	2202      	movs	r2, #2
 800345c:	21a0      	movs	r1, #160	; 0xa0
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <ee24_isConnected+0x20>)
 8003460:	f005 fe7e 	bl	8009160 <HAL_I2C_IsDeviceReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <ee24_isConnected+0x1a>
    return false;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <ee24_isConnected+0x1c>

  return true;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20002138 	.word	0x20002138

08003478 <ee24_write_word>:

/*
 * @ brief  Blocking call to write one word to EEPROM
 */
bool ee24_write_word(uint16_t address, uint16_t *data)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af04      	add	r7, sp, #16
 800347e:	4603      	mov	r3, r0
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	80fb      	strh	r3, [r7, #6]
	if (ee24_lock == 1) return false;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <ee24_write_word+0x58>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <ee24_write_word+0x18>
 800348c:	2300      	movs	r3, #0
 800348e:	e01a      	b.n	80034c6 <ee24_write_word+0x4e>
	ee24_lock = 1;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <ee24_write_word+0x58>)
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK)
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	2364      	movs	r3, #100	; 0x64
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	2302      	movs	r3, #2
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	21a0      	movs	r1, #160	; 0xa0
 80034a8:	480a      	ldr	r0, [pc, #40]	; (80034d4 <ee24_write_word+0x5c>)
 80034aa:	f005 fb39 	bl	8008b20 <HAL_I2C_Mem_Write>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <ee24_write_word+0x46>
	//if (HAL_I2C_Mem_Write_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <ee24_write_word+0x58>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
		return false;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e003      	b.n	80034c6 <ee24_write_word+0x4e>
	}
	ee24_lock = 0;
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <ee24_write_word+0x58>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
	return true;
 80034c4:	2301      	movs	r3, #1
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20001fe6 	.word	0x20001fe6
 80034d4:	20002138 	.word	0x20002138

080034d8 <ee24_read_word>:

/*
 * @ brief  Blocking call to read one word from EEPROM
 */
bool ee24_read_word(uint8_t address, uint16_t *data)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af04      	add	r7, sp, #16
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
	if (ee24_lock == 1) return false;
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <ee24_read_word+0x58>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <ee24_read_word+0x18>
 80034ec:	2300      	movs	r3, #0
 80034ee:	e01b      	b.n	8003528 <ee24_read_word+0x50>
	ee24_lock = 1;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <ee24_read_word+0x58>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]

	if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, 2, 100) != HAL_OK )
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	2364      	movs	r3, #100	; 0x64
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	2302      	movs	r3, #2
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	21a0      	movs	r1, #160	; 0xa0
 800350a:	480a      	ldr	r0, [pc, #40]	; (8003534 <ee24_read_word+0x5c>)
 800350c:	f005 fc02 	bl	8008d14 <HAL_I2C_Mem_Read>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <ee24_read_word+0x48>
	//if (HAL_I2C_Mem_Read_DMA(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, 2) != HAL_OK)
	{
		ee24_lock = 0;
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <ee24_read_word+0x58>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		return false;
 800351c:	2300      	movs	r3, #0
 800351e:	e003      	b.n	8003528 <ee24_read_word+0x50>
	}
	ee24_lock = 0;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <ee24_read_word+0x58>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
	return true;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20001fe6 	.word	0x20001fe6
 8003534:	20002138 	.word	0x20002138

08003538 <start_adcs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void start_adcs() {
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	// Start ADC1 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf[ADC1_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 800353c:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8003540:	490d      	ldr	r1, [pc, #52]	; (8003578 <start_adcs+0x40>)
 8003542:	480e      	ldr	r0, [pc, #56]	; (800357c <start_adcs+0x44>)
 8003544:	f003 fedc 	bl	8007300 <HAL_ADC_Start_DMA>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <start_adcs+0x20>
	  term_print("Error starting ADC1 DMA\r\n");
 800354e:	480c      	ldr	r0, [pc, #48]	; (8003580 <start_adcs+0x48>)
 8003550:	f001 fbbc 	bl	8004ccc <term_print>
  	  Error_Handler();
 8003554:	f000 ff78 	bl	8004448 <Error_Handler>
	}
	//Start ADC2 - keeps running via TIM2
	if ( HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_dma_buf[ADC2_IDX], ADC_DMA_BUF_SIZE) != HAL_OK) {
 8003558:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 800355c:	4909      	ldr	r1, [pc, #36]	; (8003584 <start_adcs+0x4c>)
 800355e:	480a      	ldr	r0, [pc, #40]	; (8003588 <start_adcs+0x50>)
 8003560:	f003 fece 	bl	8007300 <HAL_ADC_Start_DMA>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <start_adcs+0x3c>
	  term_print("Error starting ADC2 DMA\r\n");
 800356a:	4808      	ldr	r0, [pc, #32]	; (800358c <start_adcs+0x54>)
 800356c:	f001 fbae 	bl	8004ccc <term_print>
 	  Error_Handler();
 8003570:	f000 ff6a 	bl	8004448 <Error_Handler>
	}
}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200024c8 	.word	0x200024c8
 800357c:	20001fe8 	.word	0x20001fe8
 8003580:	08010d84 	.word	0x08010d84
 8003584:	20003f08 	.word	0x20003f08
 8003588:	20002030 	.word	0x20002030
 800358c:	08010da0 	.word	0x08010da0

08003590 <adjust_TIM2_period>:
 * This function is used in conjunction with the debug GPIO to tune each individual
 * board to produce 25us signal which is shown on the oscilloscope
 * as a 20kHz square wave (period 50us) as the signal changes
 * with every TIM2 call
 */
void adjust_TIM2_period(uint16_t newPeriod, uint8_t store) {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	460a      	mov	r2, r1
 800359a:	80fb      	strh	r3, [r7, #6]
 800359c:	4613      	mov	r3, r2
 800359e:	717b      	strb	r3, [r7, #5]
	if ( (newPeriod > 2500) || (newPeriod < 2000) ) {
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d803      	bhi.n	80035b2 <adjust_TIM2_period+0x22>
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80035b0:	d205      	bcs.n	80035be <adjust_TIM2_period+0x2e>
		term_print("Invalid period for TIM (%u)\r\n", newPeriod);
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4619      	mov	r1, r3
 80035b6:	4808      	ldr	r0, [pc, #32]	; (80035d8 <adjust_TIM2_period+0x48>)
 80035b8:	f001 fb88 	bl	8004ccc <term_print>
		return;
 80035bc:	e008      	b.n	80035d0 <adjust_TIM2_period+0x40>
	}
	TIM2->ARR = (uint32_t) newPeriod;	// change register directly
 80035be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	term_print("TIM2 ARR = %u\r\n", newPeriod);
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	4619      	mov	r1, r3
 80035ca:	4804      	ldr	r0, [pc, #16]	; (80035dc <adjust_TIM2_period+0x4c>)
 80035cc:	f001 fb7e 	bl	8004ccc <term_print>
			term_print("EEPROM write failed\r\n");
		} else {
			term_print("EEPROM write %u\r\n", newPeriod);
		}
	}*/
}
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	08010dbc 	.word	0x08010dbc
 80035dc:	08010ddc 	.word	0x08010ddc

080035e0 <version_change>:

/*
 * @brief  Function to manage version change and update stored parameters
 */
void version_change(uint8_t old_major, uint8_t old_minor) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	460a      	mov	r2, r1
 80035ea:	71fb      	strb	r3, [r7, #7]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71bb      	strb	r3, [r7, #6]
	// update version number in EEPROM
	eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <version_change+0x40>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <version_change+0x40>)
 80035f8:	2202      	movs	r2, #2
 80035fa:	705a      	strb	r2, [r3, #1]
	if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 80035fc:	4908      	ldr	r1, [pc, #32]	; (8003620 <version_change+0x40>)
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff ff3a 	bl	8003478 <ee24_write_word>
 8003604:	4603      	mov	r3, r0
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <version_change+0x36>
		term_print("Error: EEPROM write failed\r\n");
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <version_change+0x44>)
 8003612:	f001 fb5b 	bl	8004ccc <term_print>
	}
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000249c 	.word	0x2000249c
 8003624:	08010dec 	.word	0x08010dec

08003628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800362e:	f003 fd8d 	bl	800714c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003632:	f000 fab7 	bl	8003ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003636:	f000 fd29 	bl	800408c <MX_GPIO_Init>
  MX_DMA_Init();
 800363a:	f000 fce9 	bl	8004010 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800363e:	f000 fc93 	bl	8003f68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003642:	f000 fc45 	bl	8003ed0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8003646:	f000 fb1f 	bl	8003c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800364a:	f000 fb7d 	bl	8003d48 <MX_ADC2_Init>
  MX_SPI2_Init();
 800364e:	f000 fc09 	bl	8003e64 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8003652:	f000 fcb3 	bl	8003fbc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8003656:	f000 fbd7 	bl	8003e08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

#ifdef USE_DISPLAY
  // TFT Display
  display_init(); // THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 800365a:	f7fe fea3 	bl	80023a4 <display_init>
#endif

  // Start CLI UART receive via interrupt
  if (HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) != HAL_OK) {
 800365e:	2201      	movs	r2, #1
 8003660:	499c      	ldr	r1, [pc, #624]	; (80038d4 <main+0x2ac>)
 8003662:	489d      	ldr	r0, [pc, #628]	; (80038d8 <main+0x2b0>)
 8003664:	f008 fa83 	bl	800bb6e <HAL_UART_Receive_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <main+0x4a>
    Error_Handler();
 800366e:	f000 feeb 	bl	8004448 <Error_Handler>
      Error_Handler();
  }
#endif

  // Start Timer for ADC readings
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8003672:	489a      	ldr	r0, [pc, #616]	; (80038dc <main+0x2b4>)
 8003674:	f007 fd60 	bl	800b138 <HAL_TIM_Base_Start_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <main+0x5a>
     Error_Handler();
 800367e:	f000 fee3 	bl	8004448 <Error_Handler>
  }

  // Start ADCs
  start_adcs();
 8003682:	f7ff ff59 	bl	8003538 <start_adcs>

#ifdef USE_DISPLAY
  display_splash_screen();
 8003686:	f7fe feaf 	bl	80023e8 <display_splash_screen>
  display_splash_ticks = HAL_GetTick() + SPLASH_SCREEN_TIME;
 800368a:	f003 fdc5 	bl	8007218 <HAL_GetTick>
 800368e:	4603      	mov	r3, r0
 8003690:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8003694:	4a92      	ldr	r2, [pc, #584]	; (80038e0 <main+0x2b8>)
 8003696:	6013      	str	r3, [r2, #0]
#endif

  // Startup message
  sprintf(msg_buf, "\r\n%s V%d.%02d\r\n%s\r\n",  product_msg ,VERSION_MAJOR, VERSION_MINOR, copyright_msg);
 8003698:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <main+0x2bc>)
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	4a91      	ldr	r2, [pc, #580]	; (80038e8 <main+0x2c0>)
 80036a4:	4991      	ldr	r1, [pc, #580]	; (80038ec <main+0x2c4>)
 80036a6:	4892      	ldr	r0, [pc, #584]	; (80038f0 <main+0x2c8>)
 80036a8:	f009 ff48 	bl	800d53c <siprintf>
  if (HAL_UART_Transmit(&CLI_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80036ac:	4890      	ldr	r0, [pc, #576]	; (80038f0 <main+0x2c8>)
 80036ae:	f7fc fdff 	bl	80002b0 <strlen>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ba:	498d      	ldr	r1, [pc, #564]	; (80038f0 <main+0x2c8>)
 80036bc:	4886      	ldr	r0, [pc, #536]	; (80038d8 <main+0x2b0>)
 80036be:	f008 f9c4 	bl	800ba4a <HAL_UART_Transmit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <main+0xa4>
	  Error_Handler();
 80036c8:	f000 febe 	bl	8004448 <Error_Handler>
  }
  // Show active TIM2 configuration (for 25us ADC trigger)
  term_print("TIM2 ARR = %d\r\n",TIM2->ARR);
 80036cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	4619      	mov	r1, r3
 80036d4:	4887      	ldr	r0, [pc, #540]	; (80038f4 <main+0x2cc>)
 80036d6:	f001 faf9 	bl	8004ccc <term_print>
  if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
  	  Error_Handler();
  }*/
#endif

  if (!ee24_isConnected()) {
 80036da:	f7ff febb 	bl	8003454 <ee24_isConnected>
 80036de:	4603      	mov	r3, r0
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <main+0xca>
	  term_print("Error: EEPROM not found\r\n");
 80036ea:	4883      	ldr	r0, [pc, #524]	; (80038f8 <main+0x2d0>)
 80036ec:	f001 faee 	bl	8004ccc <term_print>
 80036f0:	e049      	b.n	8003786 <main+0x15e>
  } else {
	  if (ee24_read_word(EEPROM_ADDR_VERSION, (uint16_t *) &eeprom_buf) != true) {
 80036f2:	4982      	ldr	r1, [pc, #520]	; (80038fc <main+0x2d4>)
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7ff feef 	bl	80034d8 <ee24_read_word>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <main+0xe6>
		  term_print("Error: EEPROM read error\r\n");
 8003706:	487e      	ldr	r0, [pc, #504]	; (8003900 <main+0x2d8>)
 8003708:	f001 fae0 	bl	8004ccc <term_print>
 800370c:	e03b      	b.n	8003786 <main+0x15e>
	  } else {
		term_print("EEPROM Version: V%d.%02d\r\n", eeprom_buf[0], eeprom_buf[1]);
 800370e:	4b7b      	ldr	r3, [pc, #492]	; (80038fc <main+0x2d4>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	4619      	mov	r1, r3
 8003716:	4b79      	ldr	r3, [pc, #484]	; (80038fc <main+0x2d4>)
 8003718:	785b      	ldrb	r3, [r3, #1]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	4879      	ldr	r0, [pc, #484]	; (8003904 <main+0x2dc>)
 8003720:	f001 fad4 	bl	8004ccc <term_print>
		if ((eeprom_buf[0] == 0xFF) && (eeprom_buf[1] == 0xFF)) {		// new/blank EEPROM
 8003724:	4b75      	ldr	r3, [pc, #468]	; (80038fc <main+0x2d4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2bff      	cmp	r3, #255	; 0xff
 800372c:	d117      	bne.n	800375e <main+0x136>
 800372e:	4b73      	ldr	r3, [pc, #460]	; (80038fc <main+0x2d4>)
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2bff      	cmp	r3, #255	; 0xff
 8003736:	d112      	bne.n	800375e <main+0x136>
			eeprom_buf[0] = VERSION_MAJOR; eeprom_buf[1] = VERSION_MINOR;
 8003738:	4b70      	ldr	r3, [pc, #448]	; (80038fc <main+0x2d4>)
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <main+0x2d4>)
 8003740:	2202      	movs	r2, #2
 8003742:	705a      	strb	r2, [r3, #1]
			if (ee24_write_word(EEPROM_ADDR_VERSION,(uint16_t *) &eeprom_buf) != true ) {
 8003744:	496d      	ldr	r1, [pc, #436]	; (80038fc <main+0x2d4>)
 8003746:	2000      	movs	r0, #0
 8003748:	f7ff fe96 	bl	8003478 <ee24_write_word>
 800374c:	4603      	mov	r3, r0
 800374e:	f083 0301 	eor.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <main+0x136>
				term_print("Error: EEPROM write failed\r\n");
 8003758:	486b      	ldr	r0, [pc, #428]	; (8003908 <main+0x2e0>)
 800375a:	f001 fab7 	bl	8004ccc <term_print>
			}
		}
		// Detect version change
		if ((eeprom_buf[0]!=VERSION_MAJOR) || (eeprom_buf[0]!=VERSION_MINOR)) {
 800375e:	4b67      	ldr	r3, [pc, #412]	; (80038fc <main+0x2d4>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <main+0x14a>
 8003768:	4b64      	ldr	r3, [pc, #400]	; (80038fc <main+0x2d4>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d009      	beq.n	8003786 <main+0x15e>
			version_change(eeprom_buf[0], eeprom_buf[1]);
 8003772:	4b62      	ldr	r3, [pc, #392]	; (80038fc <main+0x2d4>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4a60      	ldr	r2, [pc, #384]	; (80038fc <main+0x2d4>)
 800377a:	7852      	ldrb	r2, [r2, #1]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff2d 	bl	80035e0 <version_change>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  next_process_time = HAL_GetTick() + PROCESS_INTERVAL;
 8003786:	f003 fd47 	bl	8007218 <HAL_GetTick>
 800378a:	4603      	mov	r3, r0
 800378c:	3364      	adds	r3, #100	; 0x64
 800378e:	4a5f      	ldr	r2, [pc, #380]	; (800390c <main+0x2e4>)
 8003790:	6013      	str	r3, [r2, #0]
  //term_print("current: %lu next: %lu\r\n", HAL_GetTick(), next_process_time);
  next_measurement_time = HAL_GetTick() + MEASUREMENT_INTERVAL;
 8003792:	f003 fd41 	bl	8007218 <HAL_GetTick>
 8003796:	4603      	mov	r3, r0
 8003798:	33c8      	adds	r3, #200	; 0xc8
 800379a:	4a5d      	ldr	r2, [pc, #372]	; (8003910 <main+0x2e8>)
 800379c:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	now_ticks = HAL_GetTick();
 800379e:	f003 fd3b 	bl	8007218 <HAL_GetTick>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <main+0x2ec>)
 80037a6:	6013      	str	r3, [r2, #0]
	// look for ticks overrun
	if (now_ticks < last_ticks) {
 80037a8:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <main+0x2ec>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b5a      	ldr	r3, [pc, #360]	; (8003918 <main+0x2f0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d21b      	bcs.n	80037ec <main+0x1c4>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 80037b4:	4b57      	ldr	r3, [pc, #348]	; (8003914 <main+0x2ec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3364      	adds	r3, #100	; 0x64
 80037ba:	4a54      	ldr	r2, [pc, #336]	; (800390c <main+0x2e4>)
 80037bc:	6013      	str	r3, [r2, #0]
		if (display_off_ticks) { display_off_ticks = now_ticks + DISPLAY_TIMEOUT; }
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <main+0x2f4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <main+0x1ae>
 80037c6:	4b53      	ldr	r3, [pc, #332]	; (8003914 <main+0x2ec>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80037ce:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80037d2:	4a52      	ldr	r2, [pc, #328]	; (800391c <main+0x2f4>)
 80037d4:	6013      	str	r3, [r2, #0]
		display_update_ticks = now_ticks + DISPLAY_UPDATE_TIME;
 80037d6:	4b4f      	ldr	r3, [pc, #316]	; (8003914 <main+0x2ec>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80037de:	4a50      	ldr	r2, [pc, #320]	; (8003920 <main+0x2f8>)
 80037e0:	6013      	str	r3, [r2, #0]
		next_measurement_time = now_ticks + MEASUREMENT_INTERVAL;
 80037e2:	4b4c      	ldr	r3, [pc, #304]	; (8003914 <main+0x2ec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	33c8      	adds	r3, #200	; 0xc8
 80037e8:	4a49      	ldr	r2, [pc, #292]	; (8003910 <main+0x2e8>)
 80037ea:	6013      	str	r3, [r2, #0]
	}
	last_ticks = now_ticks;		// store for compare in next iteration
 80037ec:	4b49      	ldr	r3, [pc, #292]	; (8003914 <main+0x2ec>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a49      	ldr	r2, [pc, #292]	; (8003918 <main+0x2f0>)
 80037f2:	6013      	str	r3, [r2, #0]

	// perform measurements
	if ( now_ticks >= next_measurement_time ) {
 80037f4:	4b47      	ldr	r3, [pc, #284]	; (8003914 <main+0x2ec>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b45      	ldr	r3, [pc, #276]	; (8003910 <main+0x2e8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d316      	bcc.n	800382e <main+0x206>
		next_measurement_time += MEASUREMENT_INTERVAL;
 8003800:	4b43      	ldr	r3, [pc, #268]	; (8003910 <main+0x2e8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	33c8      	adds	r3, #200	; 0xc8
 8003806:	4a42      	ldr	r2, [pc, #264]	; (8003910 <main+0x2e8>)
 8003808:	6013      	str	r3, [r2, #0]
		calc_measurements();
 800380a:	f7fe f863 	bl	80018d4 <calc_measurements>
#ifdef USE_DISPLAY
		if ((HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin) == GPIO_PIN_SET) && (display_screen)) {
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	4844      	ldr	r0, [pc, #272]	; (8003924 <main+0x2fc>)
 8003812:	f004 ffdd 	bl	80087d0 <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d108      	bne.n	800382e <main+0x206>
 800381c:	4b42      	ldr	r3, [pc, #264]	; (8003928 <main+0x300>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <main+0x206>
			display_update_meter(display_screen);
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <main+0x300>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f82d 	bl	8002888 <display_update_meter>
		}
#endif
	}

	// process slow tasks
	if ( now_ticks >= next_process_time ) {
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <main+0x2ec>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <main+0x2e4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	f0c0 8110 	bcc.w	8003a5c <main+0x434>
		next_process_time = now_ticks + PROCESS_INTERVAL;
 800383c:	4b35      	ldr	r3, [pc, #212]	; (8003914 <main+0x2ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3364      	adds	r3, #100	; 0x64
 8003842:	4a32      	ldr	r2, [pc, #200]	; (800390c <main+0x2e4>)
 8003844:	6013      	str	r3, [r2, #0]

		// clear splash screen
		if (display_splash_ticks) {
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <main+0x2b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <main+0x24e>
			if (now_ticks >= display_splash_ticks) {
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <main+0x2ec>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <main+0x2b8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d30d      	bcc.n	8003876 <main+0x24e>
				display_splash_ticks = 0;
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <main+0x2b8>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
#ifdef USE_DISPLAY
				//display_meter_mask();
				display_screen = 1;		// set to main screen
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <main+0x300>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
				display_off_ticks = now_ticks + DISPLAY_TIMEOUT;
 8003866:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <main+0x2ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 800386e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <main+0x2f4>)
 8003874:	6013      	str	r3, [r2, #0]
				}
			}
		}*/

		// Handle CLI UART communication
		if (cli_rx_cmd_ready) {
 8003876:	4b2d      	ldr	r3, [pc, #180]	; (800392c <main+0x304>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d06c      	beq.n	800395a <main+0x332>
			if (esp_mode) {
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <main+0x308>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d05f      	beq.n	8003948 <main+0x320>
				if (cli_rx_buff[0] == '~') { // cancel ESP mode
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <main+0x30c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b7e      	cmp	r3, #126	; 0x7e
 8003890:	d106      	bne.n	80038a0 <main+0x278>
					esp_mode = 0;
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <main+0x308>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
					term_print("\r\nESP mode deactivated\r\n");
 8003898:	4827      	ldr	r0, [pc, #156]	; (8003938 <main+0x310>)
 800389a:	f001 fa17 	bl	8004ccc <term_print>
 800389e:	e056      	b.n	800394e <main+0x326>
				} else {
					sprintf(msg_buf, "%s\r\n", cli_rx_buff);	// send command line to ESP01
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <main+0x30c>)
 80038a2:	4926      	ldr	r1, [pc, #152]	; (800393c <main+0x314>)
 80038a4:	4812      	ldr	r0, [pc, #72]	; (80038f0 <main+0x2c8>)
 80038a6:	f009 fe49 	bl	800d53c <siprintf>
					if (HAL_UART_Transmit(&ESP_UART, (uint8_t*)msg_buf, strlen(msg_buf), 1000) != HAL_OK) {
 80038aa:	4811      	ldr	r0, [pc, #68]	; (80038f0 <main+0x2c8>)
 80038ac:	f7fc fd00 	bl	80002b0 <strlen>
 80038b0:	4603      	mov	r3, r0
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b8:	490d      	ldr	r1, [pc, #52]	; (80038f0 <main+0x2c8>)
 80038ba:	4821      	ldr	r0, [pc, #132]	; (8003940 <main+0x318>)
 80038bc:	f008 f8c5 	bl	800ba4a <HAL_UART_Transmit>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <main+0x2a2>
						Error_Handler();
 80038c6:	f000 fdbf 	bl	8004448 <Error_Handler>
					}
					term_print("%s", msg_buf);
 80038ca:	4909      	ldr	r1, [pc, #36]	; (80038f0 <main+0x2c8>)
 80038cc:	481d      	ldr	r0, [pc, #116]	; (8003944 <main+0x31c>)
 80038ce:	f001 f9fd 	bl	8004ccc <term_print>
 80038d2:	e03c      	b.n	800394e <main+0x326>
 80038d4:	20002416 	.word	0x20002416
 80038d8:	2000228c 	.word	0x2000228c
 80038dc:	20002244 	.word	0x20002244
 80038e0:	200080c0 	.word	0x200080c0
 80038e4:	0801527c 	.word	0x0801527c
 80038e8:	08015278 	.word	0x08015278
 80038ec:	08010e0c 	.word	0x08010e0c
 80038f0:	20002314 	.word	0x20002314
 80038f4:	08010e20 	.word	0x08010e20
 80038f8:	08010e30 	.word	0x08010e30
 80038fc:	2000249c 	.word	0x2000249c
 8003900:	08010e4c 	.word	0x08010e4c
 8003904:	08010e68 	.word	0x08010e68
 8003908:	08010dec 	.word	0x08010dec
 800390c:	200080d4 	.word	0x200080d4
 8003910:	200080d0 	.word	0x200080d0
 8003914:	200080c8 	.word	0x200080c8
 8003918:	200080cc 	.word	0x200080cc
 800391c:	200080bc 	.word	0x200080bc
 8003920:	200080c4 	.word	0x200080c4
 8003924:	40020000 	.word	0x40020000
 8003928:	200024b4 	.word	0x200024b4
 800392c:	20002498 	.word	0x20002498
 8003930:	200024b0 	.word	0x200024b0
 8003934:	20002418 	.word	0x20002418
 8003938:	08010e84 	.word	0x08010e84
 800393c:	08010ea0 	.word	0x08010ea0
 8003940:	200022d0 	.word	0x200022d0
 8003944:	08010ea8 	.word	0x08010ea8
				}
			} else {
				CMD_Handler((uint8_t*)cli_rx_buff);
 8003948:	4881      	ldr	r0, [pc, #516]	; (8003b50 <main+0x528>)
 800394a:	f7fe fd0b 	bl	8002364 <CMD_Handler>
			}
			cli_rx_count = 0;
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <main+0x52c>)
 8003950:	2200      	movs	r2, #0
 8003952:	801a      	strh	r2, [r3, #0]
			cli_rx_cmd_ready = 0;
 8003954:	4b80      	ldr	r3, [pc, #512]	; (8003b58 <main+0x530>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
				esp_rx_count_last = esp_rx_count;
			}
		}
#endif		// USE_WIFI

		if (adc_restart) {
 800395a:	4b80      	ldr	r3, [pc, #512]	; (8003b5c <main+0x534>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <main+0x344>
		  adc_restart = 0;
 8003962:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <main+0x534>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
		  start_adcs();
 8003968:	f7ff fde6 	bl	8003538 <start_adcs>
		}

		if (new_time_period) {
 800396c:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <main+0x538>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <main+0x35e>
		  // change timer period to new value
		  adjust_TIM2_period(new_time_period, 1);
 8003974:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <main+0x538>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fe08 	bl	8003590 <adjust_TIM2_period>
		  new_time_period = 0;
 8003980:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <main+0x538>)
 8003982:	2200      	movs	r2, #0
 8003984:	801a      	strh	r2, [r3, #0]
		}

#ifdef USE_DISPLAY

		if (display_change) {
 8003986:	4b77      	ldr	r3, [pc, #476]	; (8003b64 <main+0x53c>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00f      	beq.n	80039b0 <main+0x388>
			display_screen++;
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <main+0x540>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b73      	ldr	r3, [pc, #460]	; (8003b68 <main+0x540>)
 800399a:	701a      	strb	r2, [r3, #0]
			if (display_screen > SCREEN_MAX) {
 800399c:	4b72      	ldr	r3, [pc, #456]	; (8003b68 <main+0x540>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <main+0x382>
				display_screen = 1;
 80039a4:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <main+0x540>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
			}
			display_change = 0;
 80039aa:	4b6e      	ldr	r3, [pc, #440]	; (8003b64 <main+0x53c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	701a      	strb	r2, [r3, #0]
		}

		// display timeout
		if (display_off_ticks && (now_ticks >= display_off_ticks)) {
 80039b0:	4b6e      	ldr	r3, [pc, #440]	; (8003b6c <main+0x544>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <main+0x3a8>
 80039b8:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <main+0x548>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b6b      	ldr	r3, [pc, #428]	; (8003b6c <main+0x544>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d305      	bcc.n	80039d0 <main+0x3a8>
			Displ_BackLight('0');
 80039c4:	2030      	movs	r0, #48	; 0x30
 80039c6:	f002 fea1 	bl	800670c <Displ_BackLight>
	  		display_off_ticks = 0;
 80039ca:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <main+0x544>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
	  	}

		if (tft_display) {
 80039d0:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <main+0x54c>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02b      	beq.n	8003a30 <main+0x408>
			if (tft_display == 9) {
 80039d8:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <main+0x54c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d10e      	bne.n	80039fe <main+0x3d6>
				term_print("Running TFT performance test ...\r\n");
 80039e0:	4865      	ldr	r0, [pc, #404]	; (8003b78 <main+0x550>)
 80039e2:	f001 f973 	bl	8004ccc <term_print>
				Displ_BackLight('1');
 80039e6:	2031      	movs	r0, #49	; 0x31
 80039e8:	f002 fe90 	bl	800670c <Displ_BackLight>
				Displ_TestAll();
 80039ec:	f003 fb58 	bl	80070a0 <Displ_TestAll>
				Displ_BackLight('0');
 80039f0:	2030      	movs	r0, #48	; 0x30
 80039f2:	f002 fe8b 	bl	800670c <Displ_BackLight>
				term_print("....completed\r\n");
 80039f6:	4861      	ldr	r0, [pc, #388]	; (8003b7c <main+0x554>)
 80039f8:	f001 f968 	bl	8004ccc <term_print>
 80039fc:	e015      	b.n	8003a2a <main+0x402>
			} else {
				if (tft_display == 1) {
 80039fe:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <main+0x54c>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d103      	bne.n	8003a0e <main+0x3e6>
					Displ_BackLight('0');
 8003a06:	2030      	movs	r0, #48	; 0x30
 8003a08:	f002 fe80 	bl	800670c <Displ_BackLight>
 8003a0c:	e00d      	b.n	8003a2a <main+0x402>
				} else {
					Displ_BackLight('1');
 8003a0e:	2031      	movs	r0, #49	; 0x31
 8003a10:	f002 fe7c 	bl	800670c <Displ_BackLight>
					display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003a14:	f003 fc00 	bl	8007218 <HAL_GetTick>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003a1e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003a22:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <main+0x544>)
 8003a24:	6013      	str	r3, [r2, #0]
					display_update_mask();
 8003a26:	f7fe ff73 	bl	8002910 <display_update_mask>
				}
			}
		tft_display = 0;
 8003a2a:	4b52      	ldr	r3, [pc, #328]	; (8003b74 <main+0x54c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
		}

		if (display_activate) {		// set by touch screen or blue button
 8003a30:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <main+0x558>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <main+0x434>
			display_activate = 0;
 8003a3a:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <main+0x558>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
			display_update_mask();
 8003a40:	f7fe ff66 	bl	8002910 <display_update_mask>
			Displ_BackLight('1');
 8003a44:	2031      	movs	r0, #49	; 0x31
 8003a46:	f002 fe61 	bl	800670c <Displ_BackLight>
			display_off_ticks = HAL_GetTick() + DISPLAY_TIMEOUT;
 8003a4a:	f003 fbe5 	bl	8007218 <HAL_GetTick>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8003a54:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8003a58:	4a44      	ldr	r2, [pc, #272]	; (8003b6c <main+0x544>)
 8003a5a:	6013      	str	r3, [r2, #0]

		}

		// Check if we have missed processing DMA data sets
		// This occurs if the main loop execution takes longer than 20ms (e.g. terminal output of lots of data)
		if ( (adc1_dma_l_count > 1) || (adc1_dma_h_count > 1) || (adc2_dma_l_count > 1) || (adc2_dma_h_count > 1)) {
 8003a5c:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <main+0x55c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	dc0b      	bgt.n	8003a7c <main+0x454>
 8003a64:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <main+0x560>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	dc07      	bgt.n	8003a7c <main+0x454>
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <main+0x564>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	dc03      	bgt.n	8003a7c <main+0x454>
 8003a74:	4b46      	ldr	r3, [pc, #280]	; (8003b90 <main+0x568>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	dd1b      	ble.n	8003ab4 <main+0x48c>
			//term_print("Processing has missed data - %lu %lu %lu %lu\r\n", adc1_dma_l_count, adc1_dma_h_count, adc2_dma_l_count, adc2_dma_h_count);
			if (adc1_dma_l_count > 1) { adc1_dma_l_count = 1; }
 8003a7c:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <main+0x55c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	dd02      	ble.n	8003a8a <main+0x462>
 8003a84:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <main+0x55c>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
			if (adc1_dma_h_count > 1) { adc1_dma_h_count = 1; }
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	; (8003b88 <main+0x560>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	dd02      	ble.n	8003a98 <main+0x470>
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <main+0x560>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
			if (adc2_dma_l_count > 1) { adc2_dma_l_count = 1; }
 8003a98:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <main+0x564>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	dd02      	ble.n	8003aa6 <main+0x47e>
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <main+0x564>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
			if (adc2_dma_h_count > 1) { adc2_dma_h_count = 1; }
 8003aa6:	4b3a      	ldr	r3, [pc, #232]	; (8003b90 <main+0x568>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	dd02      	ble.n	8003ab4 <main+0x48c>
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <main+0x568>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
		}

		// Process DMA buffers
		if (adc1_dma_l_count > 0) {
 8003ab4:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <main+0x55c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	dd0e      	ble.n	8003ada <main+0x4b2>
			if (calc_process_dma_buffer(0,ADC1_IDX) != 0) {
 8003abc:	2100      	movs	r1, #0
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7fd fab0 	bl	8001024 <calc_process_dma_buffer>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <main+0x4a8>
				term_print("Processing ADC1 DMA 1st half failed\r\n");
 8003aca:	4832      	ldr	r0, [pc, #200]	; (8003b94 <main+0x56c>)
 8003acc:	f001 f8fe 	bl	8004ccc <term_print>
			}
			adc1_dma_l_count--;
 8003ad0:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <main+0x55c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <main+0x55c>)
 8003ad8:	6013      	str	r3, [r2, #0]
		}
		if (adc1_dma_h_count > 0) {
 8003ada:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <main+0x560>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	dd0e      	ble.n	8003b00 <main+0x4d8>
			if (calc_process_dma_buffer(1,ADC1_IDX) != 0) {
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7fd fa9d 	bl	8001024 <calc_process_dma_buffer>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <main+0x4ce>
				term_print("Processing ADC1 DMA 2nd half failed\r\n");
 8003af0:	4829      	ldr	r0, [pc, #164]	; (8003b98 <main+0x570>)
 8003af2:	f001 f8eb 	bl	8004ccc <term_print>
			}
			adc1_dma_h_count--;
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <main+0x560>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <main+0x560>)
 8003afe:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_l_count > 0) {
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <main+0x564>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	dd0e      	ble.n	8003b26 <main+0x4fe>
			if (calc_process_dma_buffer(0,ADC2_IDX) != 0) {
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fd fa8a 	bl	8001024 <calc_process_dma_buffer>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <main+0x4f4>
			term_print("Processing ADC2 DMA 1st half failed\r\n");
 8003b16:	4821      	ldr	r0, [pc, #132]	; (8003b9c <main+0x574>)
 8003b18:	f001 f8d8 	bl	8004ccc <term_print>
			}
			adc2_dma_l_count--;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <main+0x564>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <main+0x564>)
 8003b24:	6013      	str	r3, [r2, #0]
		}
		if (adc2_dma_h_count > 0) {
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <main+0x568>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f77f ae37 	ble.w	800379e <main+0x176>
			if (calc_process_dma_buffer(1,ADC2_IDX) != 0) {
 8003b30:	2101      	movs	r1, #1
 8003b32:	2001      	movs	r0, #1
 8003b34:	f7fd fa76 	bl	8001024 <calc_process_dma_buffer>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <main+0x51c>
			term_print("Processing ADC2 DMA 2nd half failed\r\n");
 8003b3e:	4818      	ldr	r0, [pc, #96]	; (8003ba0 <main+0x578>)
 8003b40:	f001 f8c4 	bl	8004ccc <term_print>
			}
			adc2_dma_h_count--;
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <main+0x568>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	4a11      	ldr	r2, [pc, #68]	; (8003b90 <main+0x568>)
 8003b4c:	6013      	str	r3, [r2, #0]
	now_ticks = HAL_GetTick();
 8003b4e:	e626      	b.n	800379e <main+0x176>
 8003b50:	20002418 	.word	0x20002418
 8003b54:	20002414 	.word	0x20002414
 8003b58:	20002498 	.word	0x20002498
 8003b5c:	200024ae 	.word	0x200024ae
 8003b60:	200024b2 	.word	0x200024b2
 8003b64:	200024ad 	.word	0x200024ad
 8003b68:	200024b4 	.word	0x200024b4
 8003b6c:	200080bc 	.word	0x200080bc
 8003b70:	200080c8 	.word	0x200080c8
 8003b74:	200024af 	.word	0x200024af
 8003b78:	08010eac 	.word	0x08010eac
 8003b7c:	08010ed0 	.word	0x08010ed0
 8003b80:	200024ac 	.word	0x200024ac
 8003b84:	200024b8 	.word	0x200024b8
 8003b88:	200024bc 	.word	0x200024bc
 8003b8c:	200024c0 	.word	0x200024c0
 8003b90:	200024c4 	.word	0x200024c4
 8003b94:	08010ee0 	.word	0x08010ee0
 8003b98:	08010f08 	.word	0x08010f08
 8003b9c:	08010f30 	.word	0x08010f30
 8003ba0:	08010f58 	.word	0x08010f58

08003ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b094      	sub	sp, #80	; 0x50
 8003ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003baa:	f107 031c 	add.w	r3, r7, #28
 8003bae:	2234      	movs	r2, #52	; 0x34
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f009 fee6 	bl	800d984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	2300      	movs	r3, #0
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <SystemClock_Config+0xdc>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <SystemClock_Config+0xdc>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd8:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <SystemClock_Config+0xdc>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <SystemClock_Config+0xe0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <SystemClock_Config+0xe0>)
 8003bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <SystemClock_Config+0xe0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c00:	2302      	movs	r3, #2
 8003c02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c04:	2301      	movs	r3, #1
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c08:	2310      	movs	r3, #16
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c10:	2300      	movs	r3, #0
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c14:	2308      	movs	r3, #8
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c18:	23b4      	movs	r3, #180	; 0xb4
 8003c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003c20:	2302      	movs	r3, #2
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c24:	2302      	movs	r3, #2
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c28:	f107 031c 	add.w	r3, r7, #28
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f006 fabb 	bl	800a1a8 <HAL_RCC_OscConfig>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003c38:	f000 fc06 	bl	8004448 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c3c:	f005 ff1a 	bl	8009a74 <HAL_PWREx_EnableOverDrive>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003c46:	f000 fbff 	bl	8004448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c4a:	230f      	movs	r3, #15
 8003c4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c62:	f107 0308 	add.w	r3, r7, #8
 8003c66:	2105      	movs	r1, #5
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f005 ff53 	bl	8009b14 <HAL_RCC_ClockConfig>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003c74:	f000 fbe8 	bl	8004448 <Error_Handler>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3750      	adds	r7, #80	; 0x50
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000

08003c88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c8e:	463b      	mov	r3, r7
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <MX_ADC1_Init+0xbc>)
 8003c9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003ca2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ca6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cba:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003ccc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003cec:	4814      	ldr	r0, [pc, #80]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003cee:	f003 fac3 	bl	8007278 <HAL_ADC_Init>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003cf8:	f000 fba6 	bl	8004448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003d04:	2303      	movs	r3, #3
 8003d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d08:	463b      	mov	r3, r7
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003d0e:	f003 fc07 	bl	8007520 <HAL_ADC_ConfigChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003d18:	f000 fb96 	bl	8004448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d20:	2302      	movs	r3, #2
 8003d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d24:	463b      	mov	r3, r7
 8003d26:	4619      	mov	r1, r3
 8003d28:	4805      	ldr	r0, [pc, #20]	; (8003d40 <MX_ADC1_Init+0xb8>)
 8003d2a:	f003 fbf9 	bl	8007520 <HAL_ADC_ConfigChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003d34:	f000 fb88 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20001fe8 	.word	0x20001fe8
 8003d44:	40012000 	.word	0x40012000

08003d48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d4e:	463b      	mov	r3, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <MX_ADC2_Init+0xbc>)
 8003d5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003d74:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d8c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003dac:	4814      	ldr	r0, [pc, #80]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003dae:	f003 fa63 	bl	8007278 <HAL_ADC_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8003db8:	f000 fb46 	bl	8004448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4619      	mov	r1, r3
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003dce:	f003 fba7 	bl	8007520 <HAL_ADC_ConfigChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8003dd8:	f000 fb36 	bl	8004448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003ddc:	230b      	movs	r3, #11
 8003dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003de0:	2302      	movs	r3, #2
 8003de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003de4:	463b      	mov	r3, r7
 8003de6:	4619      	mov	r1, r3
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <MX_ADC2_Init+0xb8>)
 8003dea:	f003 fb99 	bl	8007520 <HAL_ADC_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8003df4:	f000 fb28 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20002030 	.word	0x20002030
 8003e04:	40012100 	.word	0x40012100

08003e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <MX_I2C1_Init+0x54>)
 8003e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <MX_I2C1_Init+0x58>)
 8003e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <MX_I2C1_Init+0x50>)
 8003e46:	f004 fd27 	bl	8008898 <HAL_I2C_Init>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e50:	f000 fafa 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20002138 	.word	0x20002138
 8003e5c:	40005400 	.word	0x40005400
 8003e60:	00061a80 	.word	0x00061a80

08003e64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e68:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <MX_SPI2_Init+0x68>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003eb4:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <MX_SPI2_Init+0x64>)
 8003eb6:	f006 fc15 	bl	800a6e4 <HAL_SPI_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ec0:	f000 fac2 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000218c 	.word	0x2000218c
 8003ecc:	40003800 	.word	0x40003800

08003ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	605a      	str	r2, [r3, #4]
 8003ee0:	609a      	str	r2, [r3, #8]
 8003ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2286;
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f02:	f640 02ee 	movw	r2, #2286	; 0x8ee
 8003f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f08:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f14:	4813      	ldr	r0, [pc, #76]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f16:	f007 f8bf 	bl	800b098 <HAL_TIM_Base_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f20:	f000 fa92 	bl	8004448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f2a:	f107 0308 	add.w	r3, r7, #8
 8003f2e:	4619      	mov	r1, r3
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f32:	f007 fa79 	bl	800b428 <HAL_TIM_ConfigClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f3c:	f000 fa84 	bl	8004448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f40:	2320      	movs	r3, #32
 8003f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f48:	463b      	mov	r3, r7
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_TIM2_Init+0x94>)
 8003f4e:	f007 fc9f 	bl	800b890 <HAL_TIMEx_MasterConfigSynchronization>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003f58:	f000 fa76 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20002244 	.word	0x20002244

08003f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <MX_USART2_UART_Init+0x50>)
 8003f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f8e:	220c      	movs	r2, #12
 8003f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f9e:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <MX_USART2_UART_Init+0x4c>)
 8003fa0:	f007 fd06 	bl	800b9b0 <HAL_UART_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003faa:	f000 fa4d 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000228c 	.word	0x2000228c
 8003fb8:	40004400 	.word	0x40004400

08003fbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <MX_USART3_UART_Init+0x50>)
 8003fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ff2:	4805      	ldr	r0, [pc, #20]	; (8004008 <MX_USART3_UART_Init+0x4c>)
 8003ff4:	f007 fcdc 	bl	800b9b0 <HAL_UART_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003ffe:	f000 fa23 	bl	8004448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200022d0 	.word	0x200022d0
 800400c:	40004800 	.word	0x40004800

08004010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <MX_DMA_Init+0x78>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <MX_DMA_Init+0x78>)
 8004020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <MX_DMA_Init+0x78>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <MX_DMA_Init+0x78>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <MX_DMA_Init+0x78>)
 800403c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b11      	ldr	r3, [pc, #68]	; (8004088 <MX_DMA_Init+0x78>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	200f      	movs	r0, #15
 8004054:	f003 fdef 	bl	8007c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004058:	200f      	movs	r0, #15
 800405a:	f003 fe08 	bl	8007c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800405e:	2200      	movs	r2, #0
 8004060:	2100      	movs	r1, #0
 8004062:	2038      	movs	r0, #56	; 0x38
 8004064:	f003 fde7 	bl	8007c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004068:	2038      	movs	r0, #56	; 0x38
 800406a:	f003 fe00 	bl	8007c6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	203a      	movs	r0, #58	; 0x3a
 8004074:	f003 fddf 	bl	8007c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004078:	203a      	movs	r0, #58	; 0x3a
 800407a:	f003 fdf8 	bl	8007c6e <HAL_NVIC_EnableIRQ>

}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800

0800408c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a60      	ldr	r2, [pc, #384]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b5e      	ldr	r3, [pc, #376]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b5a      	ldr	r3, [pc, #360]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a59      	ldr	r2, [pc, #356]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b57      	ldr	r3, [pc, #348]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	4b53      	ldr	r3, [pc, #332]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a52      	ldr	r2, [pc, #328]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b50      	ldr	r3, [pc, #320]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <MX_GPIO_Init+0x1a0>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a4b      	ldr	r2, [pc, #300]	; (800422c <MX_GPIO_Init+0x1a0>)
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b49      	ldr	r3, [pc, #292]	; (800422c <MX_GPIO_Init+0x1a0>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DISPL_LED_Pin|DISPL_DC_Pin|DEBUG_Pin
 8004112:	2200      	movs	r2, #0
 8004114:	f248 41e0 	movw	r1, #34016	; 0x84e0
 8004118:	4845      	ldr	r0, [pc, #276]	; (8004230 <MX_GPIO_Init+0x1a4>)
 800411a:	f004 fb71 	bl	8008800 <HAL_GPIO_WritePin>
                          |ESP01_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET);
 800411e:	2201      	movs	r2, #1
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	4844      	ldr	r0, [pc, #272]	; (8004234 <MX_GPIO_Init+0x1a8>)
 8004124:	f004 fb6c 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8004128:	2201      	movs	r2, #1
 800412a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800412e:	4840      	ldr	r0, [pc, #256]	; (8004230 <MX_GPIO_Init+0x1a4>)
 8004130:	f004 fb66 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISPL_RST_Pin|ESP01_RST_Pin, GPIO_PIN_RESET);
 8004134:	2200      	movs	r2, #0
 8004136:	21c0      	movs	r1, #192	; 0xc0
 8004138:	483f      	ldr	r0, [pc, #252]	; (8004238 <MX_GPIO_Init+0x1ac>)
 800413a:	f004 fb61 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800413e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004144:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4837      	ldr	r0, [pc, #220]	; (8004234 <MX_GPIO_Init+0x1a8>)
 8004156:	f004 f9a7 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DISPL_LED_Pin DEBUG_Pin ESP01_EN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DISPL_LED_Pin|DEBUG_Pin|ESP01_EN_Pin;
 800415a:	f248 4360 	movw	r3, #33888	; 0x8460
 800415e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004160:	2301      	movs	r3, #1
 8004162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	2300      	movs	r3, #0
 800416a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	4619      	mov	r1, r3
 8004172:	482f      	ldr	r0, [pc, #188]	; (8004230 <MX_GPIO_Init+0x1a4>)
 8004174:	f004 f998 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800417c:	2301      	movs	r3, #1
 800417e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004184:	2302      	movs	r3, #2
 8004186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <MX_GPIO_Init+0x1a4>)
 8004190:	f004 f98a 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004198:	2301      	movs	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4619      	mov	r1, r3
 80041aa:	4822      	ldr	r0, [pc, #136]	; (8004234 <MX_GPIO_Init+0x1a8>)
 80041ac:	f004 f97c 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80041b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041be:	2303      	movs	r3, #3
 80041c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	4619      	mov	r1, r3
 80041c8:	4819      	ldr	r0, [pc, #100]	; (8004230 <MX_GPIO_Init+0x1a4>)
 80041ca:	f004 f96d 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80041ce:	2310      	movs	r3, #16
 80041d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80041d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4619      	mov	r1, r3
 80041e2:	4815      	ldr	r0, [pc, #84]	; (8004238 <MX_GPIO_Init+0x1ac>)
 80041e4:	f004 f960 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPL_RST_Pin ESP01_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin|ESP01_RST_Pin;
 80041e8:	23c0      	movs	r3, #192	; 0xc0
 80041ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ec:	2301      	movs	r3, #1
 80041ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f4:	2300      	movs	r3, #0
 80041f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	480e      	ldr	r0, [pc, #56]	; (8004238 <MX_GPIO_Init+0x1ac>)
 8004200:	f004 f952 	bl	80084a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004204:	2200      	movs	r2, #0
 8004206:	2100      	movs	r1, #0
 8004208:	200a      	movs	r0, #10
 800420a:	f003 fd14 	bl	8007c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800420e:	200a      	movs	r0, #10
 8004210:	f003 fd2d 	bl	8007c6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004214:	2200      	movs	r2, #0
 8004216:	2100      	movs	r1, #0
 8004218:	2028      	movs	r0, #40	; 0x28
 800421a:	f003 fd0c 	bl	8007c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800421e:	2028      	movs	r0, #40	; 0x28
 8004220:	f003 fd25 	bl	8007c6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004224:	bf00      	nop
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40023800 	.word	0x40023800
 8004230:	40020000 	.word	0x40020000
 8004234:	40020800 	.word	0x40020800
 8004238:	40020400 	.word	0x40020400

0800423c <HAL_GPIO_EXTI_Callback>:
//	my_printf("HAL_I2C_MemRxCpltCallback");
}

// External GPIO Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8004246:	88fb      	ldrh	r3, [r7, #6]
 8004248:	2b10      	cmp	r3, #16
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_EXTI_Callback+0x18>
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004250:	d004      	beq.n	800425c <HAL_GPIO_EXTI_Callback+0x20>
	case GPIO_PIN_13:		// Blue button on Development board
		display_change = 1;
		//display_activate = 1;
		break;
	}
}
 8004252:	e007      	b.n	8004264 <HAL_GPIO_EXTI_Callback+0x28>
		display_activate = 1;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_GPIO_EXTI_Callback+0x34>)
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
		break;
 800425a:	e003      	b.n	8004264 <HAL_GPIO_EXTI_Callback+0x28>
		display_change = 1;
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_GPIO_EXTI_Callback+0x38>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
		break;
 8004262:	bf00      	nop
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	200024ac 	.word	0x200024ac
 8004274:	200024ad 	.word	0x200024ad

08004278 <HAL_ADC_ConvCpltCallback>:

// ADC conversion - DMA buffer 2nd half full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_ADC_ConvCpltCallback+0x34>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d105      	bne.n	8004294 <HAL_ADC_ConvCpltCallback+0x1c>
		adc1_dma_h_count++;
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_ADC_ConvCpltCallback+0x38>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <HAL_ADC_ConvCpltCallback+0x38>)
 8004290:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_h_count++;
	}
}
 8004292:	e004      	b.n	800429e <HAL_ADC_ConvCpltCallback+0x26>
		adc2_dma_h_count++;
 8004294:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3301      	adds	r3, #1
 800429a:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800429c:	6013      	str	r3, [r2, #0]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20001fe8 	.word	0x20001fe8
 80042b0:	200024bc 	.word	0x200024bc
 80042b4:	200024c4 	.word	0x200024c4

080042b8 <HAL_ADC_ConvHalfCpltCallback>:

// ADC conversion - DMA buffer 1st half full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d105      	bne.n	80042d4 <HAL_ADC_ConvHalfCpltCallback+0x1c>
		adc1_dma_l_count++;
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80042d0:	6013      	str	r3, [r2, #0]
	} else {
		adc2_dma_l_count++;
	}
}
 80042d2:	e004      	b.n	80042de <HAL_ADC_ConvHalfCpltCallback+0x26>
		adc2_dma_l_count++;
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	4a06      	ldr	r2, [pc, #24]	; (80042f4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80042dc:	6013      	str	r3, [r2, #0]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20001fe8 	.word	0x20001fe8
 80042f0:	200024b8 	.word	0x200024b8
 80042f4:	200024c0 	.word	0x200024c0

080042f8 <HAL_ADC_ErrorCallback>:

// ADC errors
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	int adc_num;
	if (hadc == &hadc1) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a22      	ldr	r2, [pc, #136]	; (800438c <HAL_ADC_ErrorCallback+0x94>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d102      	bne.n	800430e <HAL_ADC_ErrorCallback+0x16>
	  adc_num = 1;
 8004308:	2301      	movs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e001      	b.n	8004312 <HAL_ADC_ErrorCallback+0x1a>
	} else {
	  adc_num = 2;
 800430e:	2302      	movs	r3, #2
 8004310:	60fb      	str	r3, [r7, #12]
	}
	switch (hadc->ErrorCode) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	2b04      	cmp	r3, #4
 8004318:	d82c      	bhi.n	8004374 <HAL_ADC_ErrorCallback+0x7c>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <HAL_ADC_ErrorCallback+0x28>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004335 	.word	0x08004335
 8004324:	08004345 	.word	0x08004345
 8004328:	08004355 	.word	0x08004355
 800432c:	08004375 	.word	0x08004375
 8004330:	08004365 	.word	0x08004365
	case HAL_ADC_ERROR_NONE:
		term_print("ADC%d No Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	461a      	mov	r2, r3
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	4814      	ldr	r0, [pc, #80]	; (8004390 <HAL_ADC_ErrorCallback+0x98>)
 800433e:	f000 fcc5 	bl	8004ccc <term_print>
		break;
 8004342:	e01e      	b.n	8004382 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INTERNAL:
		term_print("ADC%d Internal Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	461a      	mov	r2, r3
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4811      	ldr	r0, [pc, #68]	; (8004394 <HAL_ADC_ErrorCallback+0x9c>)
 800434e:	f000 fcbd 	bl	8004ccc <term_print>
		break;
 8004352:	e016      	b.n	8004382 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_OVR:
		term_print("ADC%d Overrun Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	461a      	mov	r2, r3
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	480e      	ldr	r0, [pc, #56]	; (8004398 <HAL_ADC_ErrorCallback+0xa0>)
 800435e:	f000 fcb5 	bl	8004ccc <term_print>
		break;
 8004362:	e00e      	b.n	8004382 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_DMA:
		term_print("ADC%d DMA Error (0x%08lx)\r\n", adc_num, hadc->ErrorCode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	461a      	mov	r2, r3
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <HAL_ADC_ErrorCallback+0xa4>)
 800436e:	f000 fcad 	bl	8004ccc <term_print>
		break;
 8004372:	e006      	b.n	8004382 <HAL_ADC_ErrorCallback+0x8a>
	case HAL_ADC_ERROR_INVALID_CALLBACK:
		term_print("ADC%d Callback Error (0x%08lx)  [%d]\r\n", adc_num, hadc->ErrorCode);
		break;
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
	default:
		term_print("ADC Unknown Error: 0x%08lx\r\n", hadc->ErrorCode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	4619      	mov	r1, r3
 800437a:	4809      	ldr	r0, [pc, #36]	; (80043a0 <HAL_ADC_ErrorCallback+0xa8>)
 800437c:	f000 fca6 	bl	8004ccc <term_print>
	}
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20001fe8 	.word	0x20001fe8
 8004390:	08010f80 	.word	0x08010f80
 8004394:	08010f9c 	.word	0x08010f9c
 8004398:	08010fc0 	.word	0x08010fc0
 800439c:	08010fe0 	.word	0x08010fe0
 80043a0:	08010ffc 	.word	0x08010ffc

080043a4 <HAL_UART_RxCpltCallback>:

// UART has received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
	// CLI command
	if (huart == &CLI_UART) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <HAL_UART_RxCpltCallback+0x90>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d13b      	bne.n	800442c <HAL_UART_RxCpltCallback+0x88>
		if (cli_rx_count >= sizeof(cli_rx_buff)) {
 80043b4:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b7f      	cmp	r3, #127	; 0x7f
 80043bc:	d902      	bls.n	80043c4 <HAL_UART_RxCpltCallback+0x20>
			cli_rx_count = 0;		// wrap back to start
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
		}
		if ( HAL_UART_Receive_IT(&CLI_UART, (uint8_t*)&cli_rx_byte, 1) == HAL_UART_ERROR_NONE) {
 80043c4:	2201      	movs	r2, #1
 80043c6:	491d      	ldr	r1, [pc, #116]	; (800443c <HAL_UART_RxCpltCallback+0x98>)
 80043c8:	481a      	ldr	r0, [pc, #104]	; (8004434 <HAL_UART_RxCpltCallback+0x90>)
 80043ca:	f007 fbd0 	bl	800bb6e <HAL_UART_Receive_IT>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d12a      	bne.n	800442a <HAL_UART_RxCpltCallback+0x86>
			// check for End of input (CR or LF)
			if ( (cli_rx_byte != 0x0A) && (cli_rx_byte !=  0x0D) ) {
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_UART_RxCpltCallback+0x98>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b0a      	cmp	r3, #10
 80043dc:	d012      	beq.n	8004404 <HAL_UART_RxCpltCallback+0x60>
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_UART_RxCpltCallback+0x98>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b0d      	cmp	r3, #13
 80043e6:	d00d      	beq.n	8004404 <HAL_UART_RxCpltCallback+0x60>
				cli_rx_buff[cli_rx_count++] = cli_rx_byte;
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	b291      	uxth	r1, r2
 80043f2:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 80043f4:	8011      	strh	r1, [r2, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <HAL_UART_RxCpltCallback+0x98>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2d9      	uxtb	r1, r3
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <HAL_UART_RxCpltCallback+0x9c>)
 8004400:	5499      	strb	r1, [r3, r2]
					cli_rx_cmd_ready = 1;
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
				}
			}
		} // else { rx_error_count++; } // this should never happen
		return;
 8004402:	e012      	b.n	800442a <HAL_UART_RxCpltCallback+0x86>
				if (cli_rx_count != 0) {	// a CR or LF without any pre-ceeding chars gets ignored
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <HAL_UART_RxCpltCallback+0x86>
					cli_rx_cmd_ready = 1;
 800440e:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <HAL_UART_RxCpltCallback+0xa0>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
					cli_rx_buff[cli_rx_count++] = 0;	// end of string
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	b291      	uxth	r1, r2
 800441e:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_UART_RxCpltCallback+0x94>)
 8004420:	8011      	strh	r1, [r2, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_UART_RxCpltCallback+0x9c>)
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]
		return;
 800442a:	bf00      	nop
		} else {	// this should never happen
			esp_rx_error_count++;
		}
	}
#endif
}
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	2000228c 	.word	0x2000228c
 8004438:	20002414 	.word	0x20002414
 800443c:	20002416 	.word	0x20002416
 8004440:	20002418 	.word	0x20002418
 8004444:	20002498 	.word	0x20002498

08004448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
	printf("Error_Handler() called - program execution stopped");
 800444c:	4802      	ldr	r0, [pc, #8]	; (8004458 <Error_Handler+0x10>)
 800444e:	f009 fa87 	bl	800d960 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004452:	b672      	cpsid	i
}
 8004454:	bf00      	nop
    __disable_irq();
    while (1)
 8004456:	e7fe      	b.n	8004456 <Error_Handler+0xe>
 8004458:	0801101c 	.word	0x0801101c

0800445c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <HAL_MspInit+0x4c>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <HAL_MspInit+0x4c>)
 800446c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004470:	6453      	str	r3, [r2, #68]	; 0x44
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_MspInit+0x4c>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_MspInit+0x4c>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <HAL_MspInit+0x4c>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	; 0x40
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <HAL_MspInit+0x4c>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800449a:	2007      	movs	r0, #7
 800449c:	f003 fbc0 	bl	8007c20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800

080044ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	; 0x38
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a79      	ldr	r2, [pc, #484]	; (80046b0 <HAL_ADC_MspInit+0x204>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d173      	bne.n	80045b6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	4a77      	ldr	r2, [pc, #476]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6453      	str	r3, [r2, #68]	; 0x44
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	623b      	str	r3, [r7, #32]
 80044e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a70      	ldr	r2, [pc, #448]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044f4:	f043 0304 	orr.w	r3, r3, #4
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a69      	ldr	r2, [pc, #420]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b67      	ldr	r3, [pc, #412]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004522:	2301      	movs	r3, #1
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004526:	2303      	movs	r3, #3
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800452e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004532:	4619      	mov	r1, r3
 8004534:	4860      	ldr	r0, [pc, #384]	; (80046b8 <HAL_ADC_MspInit+0x20c>)
 8004536:	f003 ffb7 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800453a:	2301      	movs	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453e:	2303      	movs	r3, #3
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454a:	4619      	mov	r1, r3
 800454c:	485b      	ldr	r0, [pc, #364]	; (80046bc <HAL_ADC_MspInit+0x210>)
 800454e:	f003 ffab 	bl	80084a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004552:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004554:	4a5b      	ldr	r2, [pc, #364]	; (80046c4 <HAL_ADC_MspInit+0x218>)
 8004556:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 800455a:	2200      	movs	r2, #0
 800455c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800455e:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004564:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800456a:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 800456c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004570:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004572:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004578:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800457a:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 800457c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004580:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004582:	4b4f      	ldr	r3, [pc, #316]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004588:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800458a:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 800458c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004590:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004592:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 8004594:	2200      	movs	r2, #0
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004598:	4849      	ldr	r0, [pc, #292]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 800459a:	f003 fb83 	bl	8007ca4 <HAL_DMA_Init>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80045a4:	f7ff ff50 	bl	8004448 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a45      	ldr	r2, [pc, #276]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
 80045ae:	4a44      	ldr	r2, [pc, #272]	; (80046c0 <HAL_ADC_MspInit+0x214>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045b4:	e078      	b.n	80046a8 <HAL_ADC_MspInit+0x1fc>
  else if(hadc->Instance==ADC2)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a43      	ldr	r2, [pc, #268]	; (80046c8 <HAL_ADC_MspInit+0x21c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d173      	bne.n	80046a8 <HAL_ADC_MspInit+0x1fc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ce:	6453      	str	r3, [r2, #68]	; 0x44
 80045d0:	4b38      	ldr	r3, [pc, #224]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	4b34      	ldr	r3, [pc, #208]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a33      	ldr	r2, [pc, #204]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6313      	str	r3, [r2, #48]	; 0x30
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_ADC_MspInit+0x208>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004614:	2302      	movs	r3, #2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004618:	2303      	movs	r3, #3
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004624:	4619      	mov	r1, r3
 8004626:	4824      	ldr	r0, [pc, #144]	; (80046b8 <HAL_ADC_MspInit+0x20c>)
 8004628:	f003 ff3e 	bl	80084a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800462c:	2302      	movs	r3, #2
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004630:	2303      	movs	r3, #3
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800463c:	4619      	mov	r1, r3
 800463e:	481f      	ldr	r0, [pc, #124]	; (80046bc <HAL_ADC_MspInit+0x210>)
 8004640:	f003 ff32 	bl	80084a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004644:	4b21      	ldr	r3, [pc, #132]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004646:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <HAL_ADC_MspInit+0x224>)
 8004648:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <HAL_ADC_MspInit+0x220>)
 800464c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004650:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_ADC_MspInit+0x220>)
 800465a:	2200      	movs	r2, #0
 800465c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800465e:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004664:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800466c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004674:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004680:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004684:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004686:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_ADC_MspInit+0x220>)
 8004688:	2200      	movs	r2, #0
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800468c:	480f      	ldr	r0, [pc, #60]	; (80046cc <HAL_ADC_MspInit+0x220>)
 800468e:	f003 fb09 	bl	8007ca4 <HAL_DMA_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_ADC_MspInit+0x1f0>
      Error_Handler();
 8004698:	f7ff fed6 	bl	8004448 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <HAL_ADC_MspInit+0x220>)
 80046a0:	639a      	str	r2, [r3, #56]	; 0x38
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <HAL_ADC_MspInit+0x220>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80046a8:	bf00      	nop
 80046aa:	3738      	adds	r7, #56	; 0x38
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40012000 	.word	0x40012000
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40020800 	.word	0x40020800
 80046bc:	40020000 	.word	0x40020000
 80046c0:	20002078 	.word	0x20002078
 80046c4:	40026410 	.word	0x40026410
 80046c8:	40012100 	.word	0x40012100
 80046cc:	200020d8 	.word	0x200020d8
 80046d0:	40026440 	.word	0x40026440

080046d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	; 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_I2C_MspInit+0x84>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d12c      	bne.n	8004750 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <HAL_I2C_MspInit+0x88>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_I2C_MspInit+0x88>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_I2C_MspInit+0x88>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004718:	2312      	movs	r3, #18
 800471a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004720:	2303      	movs	r3, #3
 8004722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004724:	2304      	movs	r3, #4
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4619      	mov	r1, r3
 800472e:	480c      	ldr	r0, [pc, #48]	; (8004760 <HAL_I2C_MspInit+0x8c>)
 8004730:	f003 feba 	bl	80084a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	4b08      	ldr	r3, [pc, #32]	; (800475c <HAL_I2C_MspInit+0x88>)
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	4a07      	ldr	r2, [pc, #28]	; (800475c <HAL_I2C_MspInit+0x88>)
 800473e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004742:	6413      	str	r3, [r2, #64]	; 0x40
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_I2C_MspInit+0x88>)
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004750:	bf00      	nop
 8004752:	3728      	adds	r7, #40	; 0x28
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	40005400 	.word	0x40005400
 800475c:	40023800 	.word	0x40023800
 8004760:	40020400 	.word	0x40020400

08004764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a43      	ldr	r2, [pc, #268]	; (8004890 <HAL_SPI_MspInit+0x12c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d17f      	bne.n	8004886 <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	4b42      	ldr	r3, [pc, #264]	; (8004894 <HAL_SPI_MspInit+0x130>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a41      	ldr	r2, [pc, #260]	; (8004894 <HAL_SPI_MspInit+0x130>)
 8004790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
 8004796:	4b3f      	ldr	r3, [pc, #252]	; (8004894 <HAL_SPI_MspInit+0x130>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	4a3a      	ldr	r2, [pc, #232]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	6313      	str	r3, [r2, #48]	; 0x30
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a33      	ldr	r2, [pc, #204]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_SPI_MspInit+0x130>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin|DISPL_MOSI_Pin;
 80047da:	230c      	movs	r3, #12
 80047dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047ea:	2305      	movs	r3, #5
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	4619      	mov	r1, r3
 80047f4:	4828      	ldr	r0, [pc, #160]	; (8004898 <HAL_SPI_MspInit+0x134>)
 80047f6:	f003 fe57 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISPL_SCK_Pin;
 80047fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004808:	2303      	movs	r3, #3
 800480a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800480c:	2305      	movs	r3, #5
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISPL_SCK_GPIO_Port, &GPIO_InitStruct);
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4619      	mov	r1, r3
 8004816:	4821      	ldr	r0, [pc, #132]	; (800489c <HAL_SPI_MspInit+0x138>)
 8004818:	f003 fe46 	bl	80084a8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800481e:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <HAL_SPI_MspInit+0x140>)
 8004820:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004822:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800482a:	2240      	movs	r2, #64	; 0x40
 800482c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004830:	2200      	movs	r2, #0
 8004832:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800483e:	2200      	movs	r2, #0
 8004840:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004842:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800484a:	2200      	movs	r2, #0
 800484c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004850:	2200      	movs	r2, #0
 8004852:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004856:	2200      	movs	r2, #0
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800485a:	4811      	ldr	r0, [pc, #68]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800485c:	f003 fa22 	bl	8007ca4 <HAL_DMA_Init>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004866:	f7ff fdef 	bl	8004448 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 800486e:	649a      	str	r2, [r3, #72]	; 0x48
 8004870:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <HAL_SPI_MspInit+0x13c>)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	2024      	movs	r0, #36	; 0x24
 800487c:	f003 f9db 	bl	8007c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004880:	2024      	movs	r0, #36	; 0x24
 8004882:	f003 f9f4 	bl	8007c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40003800 	.word	0x40003800
 8004894:	40023800 	.word	0x40023800
 8004898:	40020800 	.word	0x40020800
 800489c:	40020400 	.word	0x40020400
 80048a0:	200021e4 	.word	0x200021e4
 80048a4:	40026070 	.word	0x40026070

080048a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d115      	bne.n	80048e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_TIM_Base_MspInit+0x48>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <HAL_TIM_Base_MspInit+0x48>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_TIM_Base_MspInit+0x48>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80048d6:	2200      	movs	r2, #0
 80048d8:	2100      	movs	r1, #0
 80048da:	201c      	movs	r0, #28
 80048dc:	f003 f9ab 	bl	8007c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048e0:	201c      	movs	r0, #28
 80048e2:	f003 f9c4 	bl	8007c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800

080048f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3a      	ldr	r2, [pc, #232]	; (80049fc <HAL_UART_MspInit+0x108>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d134      	bne.n	8004980 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a31      	ldr	r2, [pc, #196]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800494e:	230c      	movs	r3, #12
 8004950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495a:	2303      	movs	r3, #3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800495e:	2307      	movs	r3, #7
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004962:	f107 031c 	add.w	r3, r7, #28
 8004966:	4619      	mov	r1, r3
 8004968:	4826      	ldr	r0, [pc, #152]	; (8004a04 <HAL_UART_MspInit+0x110>)
 800496a:	f003 fd9d 	bl	80084a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800496e:	2200      	movs	r2, #0
 8004970:	2100      	movs	r1, #0
 8004972:	2026      	movs	r0, #38	; 0x26
 8004974:	f003 f95f 	bl	8007c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004978:	2026      	movs	r0, #38	; 0x26
 800497a:	f003 f978 	bl	8007c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800497e:	e039      	b.n	80049f4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <HAL_UART_MspInit+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d134      	bne.n	80049f4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6413      	str	r3, [r2, #64]	; 0x40
 800499a:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6313      	str	r3, [r2, #48]	; 0x30
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_UART_MspInit+0x10c>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80049c2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80049c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c8:	2302      	movs	r3, #2
 80049ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049d4:	2307      	movs	r3, #7
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d8:	f107 031c 	add.w	r3, r7, #28
 80049dc:	4619      	mov	r1, r3
 80049de:	480b      	ldr	r0, [pc, #44]	; (8004a0c <HAL_UART_MspInit+0x118>)
 80049e0:	f003 fd62 	bl	80084a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2027      	movs	r0, #39	; 0x27
 80049ea:	f003 f924 	bl	8007c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80049ee:	2027      	movs	r0, #39	; 0x27
 80049f0:	f003 f93d 	bl	8007c6e <HAL_NVIC_EnableIRQ>
}
 80049f4:	bf00      	nop
 80049f6:	3730      	adds	r7, #48	; 0x30
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40004400 	.word	0x40004400
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40020000 	.word	0x40020000
 8004a08:	40004800 	.word	0x40004800
 8004a0c:	40020800 	.word	0x40020800

08004a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <NMI_Handler+0x4>

08004a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1a:	e7fe      	b.n	8004a1a <HardFault_Handler+0x4>

08004a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a20:	e7fe      	b.n	8004a20 <MemManage_Handler+0x4>

08004a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a26:	e7fe      	b.n	8004a26 <BusFault_Handler+0x4>

08004a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a2c:	e7fe      	b.n	8004a2c <UsageFault_Handler+0x4>

08004a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a5c:	f002 fbc8 	bl	80071f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8004a68:	2010      	movs	r0, #16
 8004a6a:	f003 fefd 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <DMA1_Stream4_IRQHandler+0x10>)
 8004a7a:	f003 faab 	bl	8007fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	200021e4 	.word	0x200021e4

08004a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a8c:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <TIM2_IRQHandler+0x18>)
 8004a8e:	f006 fbc3 	bl	800b218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // Debug (oscilloscope) indicator for ADC trigger
  HAL_GPIO_TogglePin (DEBUG_GPIO_Port, DEBUG_Pin);
 8004a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <TIM2_IRQHandler+0x1c>)
 8004a98:	f003 fecb 	bl	8008832 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20002244 	.word	0x20002244
 8004aa4:	40020000 	.word	0x40020000

08004aa8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <SPI2_IRQHandler+0x10>)
 8004aae:	f006 f895 	bl	800abdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000218c 	.word	0x2000218c

08004abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <USART2_IRQHandler+0x10>)
 8004ac2:	f007 f885 	bl	800bbd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	2000228c 	.word	0x2000228c

08004ad0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ad4:	4802      	ldr	r0, [pc, #8]	; (8004ae0 <USART3_IRQHandler+0x10>)
 8004ad6:	f007 f87b 	bl	800bbd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200022d0 	.word	0x200022d0

08004ae4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004aec:	f003 febc 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004af8:	4802      	ldr	r0, [pc, #8]	; (8004b04 <DMA2_Stream0_IRQHandler+0x10>)
 8004afa:	f003 fa6b 	bl	8007fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20002078 	.word	0x20002078

08004b08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004b0c:	4802      	ldr	r0, [pc, #8]	; (8004b18 <DMA2_Stream2_IRQHandler+0x10>)
 8004b0e:	f003 fa61 	bl	8007fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200020d8 	.word	0x200020d8

08004b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return 1;
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <_kill>:

int _kill(int pid, int sig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b36:	f008 ff87 	bl	800da48 <__errno>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2216      	movs	r2, #22
 8004b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_exit>:

void _exit (int status)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ffe7 	bl	8004b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b5e:	e7fe      	b.n	8004b5e <_exit+0x12>

08004b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e00a      	b.n	8004b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b72:	f3af 8000 	nop.w
 8004b76:	4601      	mov	r1, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	60ba      	str	r2, [r7, #8]
 8004b7e:	b2ca      	uxtb	r2, r1
 8004b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	3301      	adds	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dbf0      	blt.n	8004b72 <_read+0x12>
  }

  return len;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e009      	b.n	8004bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	60ba      	str	r2, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dbf1      	blt.n	8004bac <_write+0x12>
  }
  return len;
 8004bc8:	687b      	ldr	r3, [r7, #4]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_close>:

int _close(int file)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bfa:	605a      	str	r2, [r3, #4]
  return 0;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <_isatty>:

int _isatty(int file)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <_sbrk+0x5c>)
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <_sbrk+0x60>)
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c50:	4b13      	ldr	r3, [pc, #76]	; (8004ca0 <_sbrk+0x64>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <_sbrk+0x64>)
 8004c5a:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <_sbrk+0x68>)
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <_sbrk+0x64>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d207      	bcs.n	8004c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c6c:	f008 feec 	bl	800da48 <__errno>
 8004c70:	4603      	mov	r3, r0
 8004c72:	220c      	movs	r2, #12
 8004c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c7a:	e009      	b.n	8004c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <_sbrk+0x64>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <_sbrk+0x64>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <_sbrk+0x64>)
 8004c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20020000 	.word	0x20020000
 8004c9c:	00000400 	.word	0x00000400
 8004ca0:	200080d8 	.word	0x200080d8
 8004ca4:	20009640 	.word	0x20009640

08004ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <SystemInit+0x20>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <SystemInit+0x20>)
 8004cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	e000ed00 	.word	0xe000ed00

08004ccc <term_print>:

int term_init(void) {
	return 0;
}

HAL_StatusTypeDef term_print(const char* format, ...) {
 8004ccc:	b40f      	push	{r0, r1, r2, r3}
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
	va_list argptr;
	va_start(argptr, format);
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	607b      	str	r3, [r7, #4]
	vsnprintf((char*)term_buf, TERM_BUF_SIZE, format, argptr);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce2:	480b      	ldr	r0, [pc, #44]	; (8004d10 <term_print+0x44>)
 8004ce4:	f008 fe2e 	bl	800d944 <vsniprintf>
	va_end(argptr);
	return HAL_UART_Transmit(&huart2, term_buf, strlen((char*)term_buf), 1000);
 8004ce8:	4809      	ldr	r0, [pc, #36]	; (8004d10 <term_print+0x44>)
 8004cea:	f7fb fae1 	bl	80002b0 <strlen>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cf6:	4906      	ldr	r1, [pc, #24]	; (8004d10 <term_print+0x44>)
 8004cf8:	4806      	ldr	r0, [pc, #24]	; (8004d14 <term_print+0x48>)
 8004cfa:	f006 fea6 	bl	800ba4a <HAL_UART_Transmit>
 8004cfe:	4603      	mov	r3, r0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0a:	b004      	add	sp, #16
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200080dc 	.word	0x200080dc
 8004d14:	2000228c 	.word	0x2000228c

08004d18 <term_show_buffer>:
}

/*
 * Show the adc_raw_buf contents in terminal
 */
void term_show_buffer(uint8_t bufnum) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
	uint16_t address = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	827b      	strh	r3, [r7, #18]

	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d838      	bhi.n	8004da2 <term_show_buffer+0x8a>
	term_print("Buffer %d\r\n", bufnum);
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	4619      	mov	r1, r3
 8004d34:	481d      	ldr	r0, [pc, #116]	; (8004dac <term_show_buffer+0x94>)
 8004d36:	f7ff ffc9 	bl	8004ccc <term_print>
	term_print("%3d: ", 0);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	481c      	ldr	r0, [pc, #112]	; (8004db0 <term_show_buffer+0x98>)
 8004d3e:	f7ff ffc5 	bl	8004ccc <term_print>
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e020      	b.n	8004d8a <term_show_buffer+0x72>
		if (count >= 20) {
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b13      	cmp	r3, #19
 8004d4c:	dd06      	ble.n	8004d5c <term_show_buffer+0x44>
			count =0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
			term_print("\r\n%3d: ", address);
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	4619      	mov	r1, r3
 8004d56:	4817      	ldr	r0, [pc, #92]	; (8004db4 <term_show_buffer+0x9c>)
 8004d58:	f7ff ffb8 	bl	8004ccc <term_print>
		}
		term_print("%04u ", sample_buf[bufnum][i]);
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	4916      	ldr	r1, [pc, #88]	; (8004db8 <term_show_buffer+0xa0>)
 8004d60:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8004d64:	fb03 f202 	mul.w	r2, r3, r2
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004d70:	4619      	mov	r1, r3
 8004d72:	4812      	ldr	r0, [pc, #72]	; (8004dbc <term_show_buffer+0xa4>)
 8004d74:	f7ff ffaa 	bl	8004ccc <term_print>
		count++; address++;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	8a7b      	ldrh	r3, [r7, #18]
 8004d80:	3301      	adds	r3, #1
 8004d82:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<SAMPLE_BUF_SIZE; i++) {
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8004d90:	d3da      	bcc.n	8004d48 <term_show_buffer+0x30>
	}
	term_print("\r\n");
 8004d92:	480b      	ldr	r0, [pc, #44]	; (8004dc0 <term_show_buffer+0xa8>)
 8004d94:	f7ff ff9a 	bl	8004ccc <term_print>
	term_show_channel(bufnum);
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f888 	bl	8004eb0 <term_show_channel>
 8004da0:	e000      	b.n	8004da4 <term_show_buffer+0x8c>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004da2:	bf00      	nop
}
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	0801105c 	.word	0x0801105c
 8004db0:	08011068 	.word	0x08011068
 8004db4:	08011070 	.word	0x08011070
 8004db8:	20007388 	.word	0x20007388
 8004dbc:	08011078 	.word	0x08011078
 8004dc0:	08011058 	.word	0x08011058
 8004dc4:	00000000 	.word	0x00000000

08004dc8 <term_show_measurements>:

void term_show_measurements() {
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b08e      	sub	sp, #56	; 0x38
 8004dce:	af0a      	add	r7, sp, #40	; 0x28
	if (sample_buf_meta[ADC_CH_V].measurements_valid != 1) {
 8004dd0:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <term_show_measurements+0xc8>)
 8004dd2:	7b1b      	ldrb	r3, [r3, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d008      	beq.n	8004dea <term_show_measurements+0x22>
		if (calc_measurements() != 0) {
 8004dd8:	f7fc fd7c 	bl	80018d4 <calc_measurements>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <term_show_measurements+0x22>
			term_print(" invalid readings\r\n");
 8004de2:	482c      	ldr	r0, [pc, #176]	; (8004e94 <term_show_measurements+0xcc>)
 8004de4:	f7ff ff72 	bl	8004ccc <term_print>
			return;
 8004de8:	e047      	b.n	8004e7a <term_show_measurements+0xb2>
		}
	}
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004dea:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <term_show_measurements+0xd0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fb fbca 	bl	8000588 <__aeabi_f2d>
 8004df4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <term_show_measurements+0xd4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fb fbc3 	bl	8000588 <__aeabi_f2d>
 8004e02:	4604      	mov	r4, r0
 8004e04:	460d      	mov	r5, r1
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <term_show_measurements+0xd8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb fbbc 	bl	8000588 <__aeabi_f2d>
 8004e10:	4680      	mov	r8, r0
 8004e12:	4689      	mov	r9, r1
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <term_show_measurements+0xdc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fb fbb5 	bl	8000588 <__aeabi_f2d>
 8004e1e:	4682      	mov	sl, r0
 8004e20:	468b      	mov	fp, r1
 8004e22:	4b21      	ldr	r3, [pc, #132]	; (8004ea8 <term_show_measurements+0xe0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fb fbae 	bl	8000588 <__aeabi_f2d>
 8004e2c:	e9c7 0100 	strd	r0, r1, [r7]
			metervalue_w1, metervalue_pf1, acos(metervalue_pf1) * (180.0 / 3.14159265) );
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <term_show_measurements+0xe0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fb fba7 	bl	8000588 <__aeabi_f2d>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	ec43 2b10 	vmov	d0, r2, r3
 8004e42:	f00b f9ef 	bl	8010224 <acos>
 8004e46:	ec51 0b10 	vmov	r0, r1, d0
	term_print("%.1fV %.1fA %.1fVA %.1fW PF=%.2f (%.1fDeg)\r\n", metervalue_v, metervalue_i1, metervalue_va1,
 8004e4a:	a30f      	add	r3, pc, #60	; (adr r3, 8004e88 <term_show_measurements+0xc0>)
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f7fb fbf2 	bl	8000638 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e5c:	ed97 7b00 	vldr	d7, [r7]
 8004e60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004e64:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004e68:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004e6c:	e9cd 4500 	strd	r4, r5, [sp]
 8004e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e74:	480d      	ldr	r0, [pc, #52]	; (8004eac <term_show_measurements+0xe4>)
 8004e76:	f7ff ff29 	bl	8004ccc <term_print>
}
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e82:	bf00      	nop
 8004e84:	f3af 8000 	nop.w
 8004e88:	1af05a77 	.word	0x1af05a77
 8004e8c:	404ca5dc 	.word	0x404ca5dc
 8004e90:	2000023c 	.word	0x2000023c
 8004e94:	08011080 	.word	0x08011080
 8004e98:	200080a8 	.word	0x200080a8
 8004e9c:	200080ac 	.word	0x200080ac
 8004ea0:	200080b0 	.word	0x200080b0
 8004ea4:	200080b4 	.word	0x200080b4
 8004ea8:	200080b8 	.word	0x200080b8
 8004eac:	08011094 	.word	0x08011094

08004eb0 <term_show_channel>:

void term_show_channel(uint8_t bufnum) {
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	f200 80a5 	bhi.w	800500c <term_show_channel+0x15c>
	term_print("Measurements Buffer %d:\r\n", bufnum);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4853      	ldr	r0, [pc, #332]	; (8005014 <term_show_channel+0x164>)
 8004ec8:	f7ff ff00 	bl	8004ccc <term_print>
	if (sample_buf_meta[bufnum].measurements_valid != 1) {
 8004ecc:	79fa      	ldrb	r2, [r7, #7]
 8004ece:	4952      	ldr	r1, [pc, #328]	; (8005018 <term_show_channel+0x168>)
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	330c      	adds	r3, #12
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d004      	beq.n	8004eec <term_show_channel+0x3c>
		term_print("Buffer %d - invalid readings\r\n", bufnum);
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	484d      	ldr	r0, [pc, #308]	; (800501c <term_show_channel+0x16c>)
 8004ee8:	f7ff fef0 	bl	8004ccc <term_print>
		//term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
		//return;
	}

	int pp_reading = sample_buf_meta[bufnum].max - sample_buf_meta[bufnum].min;
 8004eec:	79fa      	ldrb	r2, [r7, #7]
 8004eee:	494a      	ldr	r1, [pc, #296]	; (8005018 <term_show_channel+0x168>)
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3302      	adds	r3, #2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	4945      	ldr	r1, [pc, #276]	; (8005018 <term_show_channel+0x168>)
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	1ac3      	subs	r3, r0, r3
 8004f12:	60fb      	str	r3, [r7, #12]
	term_print("ADC raw: %d - %d (%d)\r\n", sample_buf_meta[bufnum].min, sample_buf_meta[bufnum].max, pp_reading );
 8004f14:	79fa      	ldrb	r2, [r7, #7]
 8004f16:	4940      	ldr	r1, [pc, #256]	; (8005018 <term_show_channel+0x168>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	79fa      	ldrb	r2, [r7, #7]
 8004f28:	493b      	ldr	r1, [pc, #236]	; (8005018 <term_show_channel+0x168>)
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3302      	adds	r3, #2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4601      	mov	r1, r0
 8004f3e:	4838      	ldr	r0, [pc, #224]	; (8005020 <term_show_channel+0x170>)
 8004f40:	f7ff fec4 	bl	8004ccc <term_print>
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004f44:	79fa      	ldrb	r2, [r7, #7]
 8004f46:	4934      	ldr	r1, [pc, #208]	; (8005018 <term_show_channel+0x168>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3310      	adds	r3, #16
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fc ffe1 	bl	8001f20 <calc_adc_raw_to_mv_int>
 8004f5e:	4604      	mov	r4, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fc ffdb 	bl	8001f20 <calc_adc_raw_to_mv_int>
 8004f6a:	4605      	mov	r5, r0
			calc_adc_raw_to_mv_int(pp_reading),
			calc_adc_raw_to_mv_int(pp_reading/2 + sample_buf_meta[bufnum].min) );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	0fda      	lsrs	r2, r3, #31
 8004f70:	4413      	add	r3, r2
 8004f72:	105b      	asrs	r3, r3, #1
 8004f74:	b299      	uxth	r1, r3
 8004f76:	79fa      	ldrb	r2, [r7, #7]
 8004f78:	4827      	ldr	r0, [pc, #156]	; (8005018 <term_show_channel+0x168>)
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	440b      	add	r3, r1
 8004f88:	b29b      	uxth	r3, r3
	term_print("RMS: %dmV, P-P:%d mV, Zero: %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].rms_value) ,
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fc ffc7 	bl	8001f20 <calc_adc_raw_to_mv_int>
 8004f92:	4603      	mov	r3, r0
 8004f94:	462a      	mov	r2, r5
 8004f96:	4621      	mov	r1, r4
 8004f98:	4822      	ldr	r0, [pc, #136]	; (8005024 <term_show_channel+0x174>)
 8004f9a:	f7ff fe97 	bl	8004ccc <term_print>
	term_print("Range: %dmV - %dmV\r\n", calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].min), calc_adc_raw_to_mv_int(sample_buf_meta[bufnum].max) );
 8004f9e:	79fa      	ldrb	r2, [r7, #7]
 8004fa0:	491d      	ldr	r1, [pc, #116]	; (8005018 <term_show_channel+0x168>)
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fc ffb5 	bl	8001f20 <calc_adc_raw_to_mv_int>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	79fa      	ldrb	r2, [r7, #7]
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <term_show_channel+0x168>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b21b      	sxth	r3, r3
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc ffa7 	bl	8001f20 <calc_adc_raw_to_mv_int>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4813      	ldr	r0, [pc, #76]	; (8005028 <term_show_channel+0x178>)
 8004fda:	f7ff fe77 	bl	8004ccc <term_print>
	term_print("Zero crossing: pos=%d neg=%d\r\n", sample_buf_meta[bufnum].zero_cross_pos, sample_buf_meta[bufnum].zero_cross_neg);
 8004fde:	79fa      	ldrb	r2, [r7, #7]
 8004fe0:	490d      	ldr	r1, [pc, #52]	; (8005018 <term_show_channel+0x168>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3304      	adds	r3, #4
 8004fee:	6819      	ldr	r1, [r3, #0]
 8004ff0:	79fa      	ldrb	r2, [r7, #7]
 8004ff2:	4809      	ldr	r0, [pc, #36]	; (8005018 <term_show_channel+0x168>)
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4403      	add	r3, r0
 8004ffe:	3308      	adds	r3, #8
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	4809      	ldr	r0, [pc, #36]	; (800502c <term_show_channel+0x17c>)
 8005006:	f7ff fe61 	bl	8004ccc <term_print>
 800500a:	e000      	b.n	800500e <term_show_channel+0x15e>
	if (bufnum >= ADC_NUM_BUFFERS) { return; }
 800500c:	bf00      	nop
}
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bdb0      	pop	{r4, r5, r7, pc}
 8005014:	080110c4 	.word	0x080110c4
 8005018:	2000023c 	.word	0x2000023c
 800501c:	080110e0 	.word	0x080110e0
 8005020:	08011100 	.word	0x08011100
 8005024:	08011118 	.word	0x08011118
 8005028:	0801113c 	.word	0x0801113c
 800502c:	08011154 	.word	0x08011154

08005030 <term_csv_buffer>:

/*
 * Output adc_raw_buf contents in CSV format to terminal
 */
void term_csv_buffer(uint8_t buf_num) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d821      	bhi.n	8005084 <term_csv_buffer+0x54>
	term_print("Buffer %d\r\n", buf_num);
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	4619      	mov	r1, r3
 8005044:	4811      	ldr	r0, [pc, #68]	; (800508c <term_csv_buffer+0x5c>)
 8005046:	f7ff fe41 	bl	8004ccc <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e011      	b.n	8005074 <term_csv_buffer+0x44>
		term_print("%d,%u\r\n", i, adc_raw_buf[buf_num][i]);
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	490f      	ldr	r1, [pc, #60]	; (8005090 <term_csv_buffer+0x60>)
 8005054:	f44f 7252 	mov.w	r2, #840	; 0x348
 8005058:	fb03 f202 	mul.w	r2, r3, r2
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005064:	461a      	mov	r2, r3
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	480a      	ldr	r0, [pc, #40]	; (8005094 <term_csv_buffer+0x64>)
 800506a:	f7ff fe2f 	bl	8004ccc <term_print>
	for (int i=0; i<ADC_NUM_DATA; i++) {
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 800507a:	d3e9      	bcc.n	8005050 <term_csv_buffer+0x20>
	}
	term_print("\r\n\r\n");
 800507c:	4806      	ldr	r0, [pc, #24]	; (8005098 <term_csv_buffer+0x68>)
 800507e:	f7ff fe25 	bl	8004ccc <term_print>
 8005082:	e000      	b.n	8005086 <term_csv_buffer+0x56>
	if (buf_num >= ADC_NUM_BUFFERS) { return; }
 8005084:	bf00      	nop
}
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	0801105c 	.word	0x0801105c
 8005090:	20005948 	.word	0x20005948
 8005094:	08011174 	.word	0x08011174
 8005098:	0801117c 	.word	0x0801117c

0800509c <Displ_Select>:

/******************************************
 * @brief	enable display, disabling touch
 * 			device selected if CS low
 ******************************************/
void Displ_Select(void) {
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	if (TOUCH_SPI==DISPL_SPI){														// if SPI port shared (display <-> touch)
		if (HAL_GPIO_ReadPin(DISPL_CS_GPIO_Port, DISPL_CS_Pin)) {					// if display not yet selected
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	480f      	ldr	r0, [pc, #60]	; (80050e0 <Displ_Select+0x44>)
 80050a4:	f003 fb94 	bl	80087d0 <HAL_GPIO_ReadPin>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d015      	beq.n	80050da <Displ_Select+0x3e>
			HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); 		// unselect touch
 80050ae:	2201      	movs	r2, #1
 80050b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050b4:	480b      	ldr	r0, [pc, #44]	; (80050e4 <Displ_Select+0x48>)
 80050b6:	f003 fba3 	bl	8008800 <HAL_GPIO_WritePin>
			SET_DISPL_SPI_BAUDRATE;				   									//change SPI port speed as per display needs
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <Displ_Select+0x4c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	490a      	ldr	r1, [pc, #40]	; (80050e8 <Displ_Select+0x4c>)
 80050c0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80050c4:	4013      	ands	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <Displ_Select+0x4c>)
 80050ca:	4a07      	ldr	r2, [pc, #28]	; (80050e8 <Displ_Select+0x4c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET);	// select display
 80050d0:	2200      	movs	r2, #0
 80050d2:	2180      	movs	r1, #128	; 0x80
 80050d4:	4802      	ldr	r0, [pc, #8]	; (80050e0 <Displ_Select+0x44>)
 80050d6:	f003 fb93 	bl	8008800 <HAL_GPIO_WritePin>
		}
	}
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40020800 	.word	0x40020800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	40003800 	.word	0x40003800

080050ec <Displ_Transmit>:
 * @PARAM	DC_Status 	indicates if sending command or data
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t* data, uint16_t dataSize, uint8_t isTouchGFXBuffer ){
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6039      	str	r1, [r7, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	461a      	mov	r2, r3
 80050f8:	4603      	mov	r3, r0
 80050fa:	71fb      	strb	r3, [r7, #7]
 80050fc:	460b      	mov	r3, r1
 80050fe:	80bb      	strh	r3, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {};  // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback
 8005104:	bf00      	nop
 8005106:	4b22      	ldr	r3, [pc, #136]	; (8005190 <Displ_Transmit+0xa4>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0fa      	beq.n	8005106 <Displ_Transmit+0x1a>

	Displ_Select();
 8005110:	f7ff ffc4 	bl	800509c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	461a      	mov	r2, r3
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	481e      	ldr	r0, [pc, #120]	; (8005194 <Displ_Transmit+0xa8>)
 800511c:	f003 fb70 	bl	8008800 <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer){
 8005120:	79bb      	ldrb	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <Displ_Transmit+0x68>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit=(uint32_t*)(data+dataSize);
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	4413      	add	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e00b      	b.n	800514c <Displ_Transmit+0x60>
			*data32=__REV16(*data32);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	ba5b      	rev16	r3, r3
 800513e:	60bb      	str	r3, [r7, #8]
  return result;
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32=(uint32_t*)data; data32<limit; data32++) {
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3304      	adds	r3, #4
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d3ef      	bcc.n	8005134 <Displ_Transmit+0x48>
#ifdef DISPLAY_SPI_INTERRUPT_MODE
		Displ_SpiAvailable=0;
		HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize);
#else
#ifdef DISPLAY_SPI_DMA_MODE
		if (dataSize<DISPL_DMA_CUTOFF) {
 8005154:	88bb      	ldrh	r3, [r7, #4]
 8005156:	2b13      	cmp	r3, #19
 8005158:	d80d      	bhi.n	8005176 <Displ_Transmit+0x8a>
#endif //DISPLAY_SPI_DMA_MODE
			Displ_SpiAvailable=0;
 800515a:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <Displ_Transmit+0xa4>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&DISPL_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
 8005160:	88ba      	ldrh	r2, [r7, #4]
 8005162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	480b      	ldr	r0, [pc, #44]	; (8005198 <Displ_Transmit+0xac>)
 800516a:	f005 fb44 	bl	800a7f6 <HAL_SPI_Transmit>
			Displ_SpiAvailable=1;
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <Displ_Transmit+0xa4>)
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
			Displ_SpiAvailable=0;
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
		}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
	}
 8005174:	e008      	b.n	8005188 <Displ_Transmit+0x9c>
			Displ_SpiAvailable=0;
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <Displ_Transmit+0xa4>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT , data, dataSize);
 800517c:	88bb      	ldrh	r3, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	4805      	ldr	r0, [pc, #20]	; (8005198 <Displ_Transmit+0xac>)
 8005184:	f005 fc74 	bl	800aa70 <HAL_SPI_Transmit_DMA>
	}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000034 	.word	0x20000034
 8005194:	40020000 	.word	0x40020000
 8005198:	2000218c 	.word	0x2000218c

0800519c <Displ_WriteCommand>:


/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd){
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
	Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
 80051a6:	1df9      	adds	r1, r7, #7
 80051a8:	2300      	movs	r3, #0
 80051aa:	2201      	movs	r2, #1
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7ff ff9d 	bl	80050ec <Displ_Transmit>
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t* buff, size_t buff_size, uint8_t isTouchGFXBuffer){
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
	if (buff_size==0) return;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <Displ_WriteData+0x24>
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	2001      	movs	r0, #1
 80051d8:	f7ff ff88 	bl	80050ec <Displ_Transmit>
 80051dc:	e000      	b.n	80051e0 <Displ_WriteData+0x26>
	if (buff_size==0) return;
 80051de:	bf00      	nop
}
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <ILI9XXX_Init>:


/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init(){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
	Displ_Select();
 80051ec:	f7ff ff56 	bl	800509c <Displ_Select>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	4819      	ldr	r0, [pc, #100]	; (800525c <ILI9XXX_Init+0x74>)
 80051f6:	f003 fb03 	bl	8008800 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f002 f818 	bl	8007230 <HAL_Delay>
	HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_SET);
 8005200:	2201      	movs	r2, #1
 8005202:	2140      	movs	r1, #64	; 0x40
 8005204:	4815      	ldr	r0, [pc, #84]	; (800525c <ILI9XXX_Init+0x74>)
 8005206:	f003 fafb 	bl	8008800 <HAL_GPIO_WritePin>
	HAL_Delay(165);
 800520a:	20a5      	movs	r0, #165	; 0xa5
 800520c:	f002 f810 	bl	8007230 <HAL_Delay>
		Displ_WriteData(data,3);
	#endif
*/


	Displ_WriteCommand(ILI9XXX_PIXEL_FORMAT);
 8005210:	203a      	movs	r0, #58	; 0x3a
 8005212:	f7ff ffc3 	bl	800519c <Displ_WriteCommand>
#ifdef Z_RGB666
	Displ_WriteData((uint8_t *)"\x66",1,0);		// RGB666
#endif
#ifdef Z_RGB565
	Displ_WriteData((uint8_t *)"\x55",1,0);		// RGB565
 8005216:	2200      	movs	r2, #0
 8005218:	2101      	movs	r1, #1
 800521a:	4811      	ldr	r0, [pc, #68]	; (8005260 <ILI9XXX_Init+0x78>)
 800521c:	f7ff ffcd 	bl	80051ba <Displ_WriteData>
#endif
	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005220:	20b0      	movs	r0, #176	; 0xb0
 8005222:	f7ff ffbb 	bl	800519c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005226:	2200      	movs	r2, #0
 8005228:	2101      	movs	r1, #1
 800522a:	480e      	ldr	r0, [pc, #56]	; (8005264 <ILI9XXX_Init+0x7c>)
 800522c:	f7ff ffc5 	bl	80051ba <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_RGB_INTERFACE);
 8005230:	20b0      	movs	r0, #176	; 0xb0
 8005232:	f7ff ffb3 	bl	800519c <Displ_WriteCommand>
	Displ_WriteData((uint8_t *)"\x80",1,0);        // disable MISO pin
 8005236:	2200      	movs	r2, #0
 8005238:	2101      	movs	r1, #1
 800523a:	480a      	ldr	r0, [pc, #40]	; (8005264 <ILI9XXX_Init+0x7c>)
 800523c:	f7ff ffbd 	bl	80051ba <Displ_WriteData>

	Displ_WriteCommand(ILI9XXX_SLEEP_OUT);
 8005240:	2011      	movs	r0, #17
 8005242:	f7ff ffab 	bl	800519c <Displ_WriteCommand>
	HAL_Delay(120);
 8005246:	2078      	movs	r0, #120	; 0x78
 8005248:	f001 fff2 	bl	8007230 <HAL_Delay>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
 800524c:	2029      	movs	r0, #41	; 0x29
 800524e:	f7ff ffa5 	bl	800519c <Displ_WriteCommand>
	HAL_Delay(5);
 8005252:	2005      	movs	r0, #5
 8005254:	f001 ffec 	bl	8007230 <HAL_Delay>

}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40020400 	.word	0x40020400
 8005260:	08011184 	.word	0x08011184
 8005264:	08011188 	.word	0x08011188

08005268 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	4604      	mov	r4, r0
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	461a      	mov	r2, r3
 8005276:	4623      	mov	r3, r4
 8005278:	80fb      	strh	r3, [r7, #6]
 800527a:	4603      	mov	r3, r0
 800527c:	80bb      	strh	r3, [r7, #4]
 800527e:	460b      	mov	r3, r1
 8005280:	807b      	strh	r3, [r7, #2]
 8005282:	4613      	mov	r3, r2
 8005284:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t *)data)[0]=(((x2 & 0xFF)<<24) | ((x2 & 0xFF00)<<8) | ((x1 & 0xFF)<<8) | ((x1 & 0xFF00)>>8) );
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	061a      	lsls	r2, r3, #24
 800528a:	887b      	ldrh	r3, [r7, #2]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005292:	431a      	orrs	r2, r3
 8005294:	88fb      	ldrh	r3, [r7, #6]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	b29b      	uxth	r3, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	0a12      	lsrs	r2, r2, #8
 80052a0:	b292      	uxth	r2, r2
 80052a2:	431a      	orrs	r2, r3
 80052a4:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <Displ_SetAddressWindow+0x90>)
 80052a6:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80052a8:	202a      	movs	r0, #42	; 0x2a
 80052aa:	f7ff ff77 	bl	800519c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2104      	movs	r1, #4
 80052b2:	4811      	ldr	r0, [pc, #68]	; (80052f8 <Displ_SetAddressWindow+0x90>)
 80052b4:	f7ff ff81 	bl	80051ba <Displ_WriteData>

	((uint32_t *)data)[0]=(((y2 & 0xFF)<<24) | ((y2 & 0xFF00)<<8) | ((y1 & 0xFF)<<8) | ((y1 & 0xFF00)>>8) );
 80052b8:	883b      	ldrh	r3, [r7, #0]
 80052ba:	061a      	lsls	r2, r3, #24
 80052bc:	883b      	ldrh	r3, [r7, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052c4:	431a      	orrs	r2, r3
 80052c6:	88bb      	ldrh	r3, [r7, #4]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	4313      	orrs	r3, r2
 80052ce:	88ba      	ldrh	r2, [r7, #4]
 80052d0:	0a12      	lsrs	r2, r2, #8
 80052d2:	b292      	uxth	r2, r2
 80052d4:	431a      	orrs	r2, r3
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <Displ_SetAddressWindow+0x90>)
 80052d8:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80052da:	202b      	movs	r0, #43	; 0x2b
 80052dc:	f7ff ff5e 	bl	800519c <Displ_WriteCommand>
	Displ_WriteData(data, 4,0);
 80052e0:	2200      	movs	r2, #0
 80052e2:	2104      	movs	r1, #4
 80052e4:	4804      	ldr	r0, [pc, #16]	; (80052f8 <Displ_SetAddressWindow+0x90>)
 80052e6:	f7ff ff68 	bl	80051ba <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 80052ea:	202c      	movs	r0, #44	; 0x2c
 80052ec:	f7ff ff56 	bl	800519c <Displ_WriteCommand>
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd90      	pop	{r4, r7, pc}
 80052f8:	200094e4 	.word	0x200094e4

080052fc <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation){
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
	if (TOUCH_SPI==DISPL_SPI){													// if touch and display share the same SPI port
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
 8005306:	2201      	movs	r2, #1
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	4809      	ldr	r0, [pc, #36]	; (8005330 <Displ_Init+0x34>)
 800530c:	f003 fa78 	bl	8008800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
 8005310:	2201      	movs	r2, #1
 8005312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005316:	4807      	ldr	r0, [pc, #28]	; (8005334 <Displ_Init+0x38>)
 8005318:	f003 fa72 	bl	8008800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); 	// select display
		SET_DISPL_SPI_BAUDRATE;
		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800531c:	f7ff ff64 	bl	80051e8 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f808 	bl	8005338 <Displ_Orientation>
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40020800 	.word	0x40020800
 8005334:	40020000 	.word	0x40020000

08005338 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation){
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
	static uint8_t data[1];
	switch(orientation) {
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d837      	bhi.n	80053b8 <Displ_Orientation+0x80>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <Displ_Orientation+0x18>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005377 	.word	0x08005377
 8005358:	0800538d 	.word	0x0800538d
 800535c:	080053a3 	.word	0x080053a3
		case Displ_Orientat_0:
			data[0]=ILI9XXX_MADCTL_0DEG;
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <Displ_Orientation+0xa0>)
 8005362:	2288      	movs	r2, #136	; 0x88
 8005364:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005366:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <Displ_Orientation+0xa4>)
 8005368:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800536c:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800536e:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <Displ_Orientation+0xa8>)
 8005370:	22f0      	movs	r2, #240	; 0xf0
 8005372:	801a      	strh	r2, [r3, #0]
			break;
 8005374:	e020      	b.n	80053b8 <Displ_Orientation+0x80>
		case Displ_Orientat_90:
			data[0]=ILI9XXX_MADCTL_90DEG;
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <Displ_Orientation+0xa0>)
 8005378:	22e8      	movs	r2, #232	; 0xe8
 800537a:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 800537c:	4b17      	ldr	r3, [pc, #92]	; (80053dc <Displ_Orientation+0xa4>)
 800537e:	22f0      	movs	r2, #240	; 0xf0
 8005380:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <Displ_Orientation+0xa8>)
 8005384:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005388:	801a      	strh	r2, [r3, #0]
			break;
 800538a:	e015      	b.n	80053b8 <Displ_Orientation+0x80>
		case Displ_Orientat_180:
			data[0]=ILI9XXX_MADCTL_180DEG;
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <Displ_Orientation+0xa0>)
 800538e:	2248      	movs	r2, #72	; 0x48
 8005390:	701a      	strb	r2, [r3, #0]
			_height = DISPL_HEIGHT;
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <Displ_Orientation+0xa4>)
 8005394:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005398:	801a      	strh	r2, [r3, #0]
			_width = DISPL_WIDTH;
 800539a:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <Displ_Orientation+0xa8>)
 800539c:	22f0      	movs	r2, #240	; 0xf0
 800539e:	801a      	strh	r2, [r3, #0]
			break;
 80053a0:	e00a      	b.n	80053b8 <Displ_Orientation+0x80>
		case Displ_Orientat_270:
			data[0]=ILI9XXX_MADCTL_270DEG;
 80053a2:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <Displ_Orientation+0xa0>)
 80053a4:	2228      	movs	r2, #40	; 0x28
 80053a6:	701a      	strb	r2, [r3, #0]
			_height = DISPL_WIDTH;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <Displ_Orientation+0xa4>)
 80053aa:	22f0      	movs	r2, #240	; 0xf0
 80053ac:	801a      	strh	r2, [r3, #0]
			_width = DISPL_HEIGHT;
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <Displ_Orientation+0xa8>)
 80053b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80053b4:	801a      	strh	r2, [r3, #0]
			break;
 80053b6:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80053b8:	2036      	movs	r0, #54	; 0x36
 80053ba:	f7ff feef 	bl	800519c <Displ_WriteCommand>
	Displ_WriteData(data,1,0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2101      	movs	r1, #1
 80053c2:	4805      	ldr	r0, [pc, #20]	; (80053d8 <Displ_Orientation+0xa0>)
 80053c4:	f7ff fef9 	bl	80051ba <Displ_WriteData>
	current_orientation = orientation;  //stores active orientation into a global variable for touch routines
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <Displ_Orientation+0xac>)
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	7013      	strb	r3, [r2, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200094e8 	.word	0x200094e8
 80053dc:	200084e0 	.word	0x200084e0
 80053e0:	200084de 	.word	0x200084de
 80053e4:	200084dc 	.word	0x200084dc

080053e8 <HAL_SPI_ErrorCallback>:




void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a05      	ldr	r2, [pc, #20]	; (800540c <HAL_SPI_ErrorCallback+0x24>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable=1;
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_SPI_ErrorCallback+0x28>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40003800 	.word	0x40003800
 8005410:	20000034 	.word	0x20000034

08005414 <HAL_SPI_TxCpltCallback>:





void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance==DISPL_SPI) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a05      	ldr	r2, [pc, #20]	; (8005438 <HAL_SPI_TxCpltCallback+0x24>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d102      	bne.n	800542c <HAL_SPI_TxCpltCallback+0x18>
		Displ_SpiAvailable=1;
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <HAL_SPI_TxCpltCallback+0x28>)
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
	#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
	#endif

	}
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40003800 	.word	0x40003800
 800543c:	20000034 	.word	0x20000034

08005440 <Displ_FillArea>:
/*****************************
 * @brief	fill a rectangle with a color
 * @param	x, y	top left corner of the rectangle
 * 			w, h 	width and height of the rectangle
 ******************************/
void Displ_FillArea(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b08b      	sub	sp, #44	; 0x2c
 8005444:	af00      	add	r7, sp, #0
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4623      	mov	r3, r4
 8005450:	80fb      	strh	r3, [r7, #6]
 8005452:	4603      	mov	r3, r0
 8005454:	80bb      	strh	r3, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	807b      	strh	r3, [r7, #2]
 800545a:	4613      	mov	r3, r2
 800545c:	803b      	strh	r3, [r7, #0]
 * -	swap buffers
 */

	uint32_t k,x1,y1,area,times;

	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	4a4f      	ldr	r2, [pc, #316]	; (80055a0 <Displ_FillArea+0x160>)
 8005462:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005466:	4293      	cmp	r3, r2
 8005468:	f280 8096 	bge.w	8005598 <Displ_FillArea+0x158>
 800546c:	88bb      	ldrh	r3, [r7, #4]
 800546e:	4a4d      	ldr	r2, [pc, #308]	; (80055a4 <Displ_FillArea+0x164>)
 8005470:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005474:	4293      	cmp	r3, r2
 8005476:	f280 808f 	bge.w	8005598 <Displ_FillArea+0x158>
 800547a:	887b      	ldrh	r3, [r7, #2]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 808b 	beq.w	8005598 <Displ_FillArea+0x158>
 8005482:	883b      	ldrh	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8087 	beq.w	8005598 <Displ_FillArea+0x158>

	x1=x + w - 1;
 800548a:	88fa      	ldrh	r2, [r7, #6]
 800548c:	887b      	ldrh	r3, [r7, #2]
 800548e:	4413      	add	r3, r2
 8005490:	3b01      	subs	r3, #1
 8005492:	623b      	str	r3, [r7, #32]
	if (x1 > _width) {
 8005494:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <Displ_FillArea+0x160>)
 8005496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800549a:	461a      	mov	r2, r3
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	4293      	cmp	r3, r2
 80054a0:	d903      	bls.n	80054aa <Displ_FillArea+0x6a>
		x1=_width;
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <Displ_FillArea+0x160>)
 80054a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054a8:	623b      	str	r3, [r7, #32]
	}

	y1=y + h - 1;
 80054aa:	88ba      	ldrh	r2, [r7, #4]
 80054ac:	883b      	ldrh	r3, [r7, #0]
 80054ae:	4413      	add	r3, r2
 80054b0:	3b01      	subs	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
	if (y1 > _height) {
 80054b4:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <Displ_FillArea+0x164>)
 80054b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ba:	461a      	mov	r2, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4293      	cmp	r3, r2
 80054c0:	d903      	bls.n	80054ca <Displ_FillArea+0x8a>
		y1=_height;
 80054c2:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <Displ_FillArea+0x164>)
 80054c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054c8:	61fb      	str	r3, [r7, #28]
// SETUP DISPLAY DATA BUFFER TO TRANSFER
#ifdef Z_RGB565 // setting up dispBuffer in RGB565 format

	uint32_t data32;

	data32=(color>>8) | (color<<8) | (color<<24); 	// supposing color is 0xABCD, data32 becomes 0xCDABCDAB - set a 32 bit variable with swapped endians
 80054ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	431a      	orrs	r2, r3
 80054d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
	area=((y1-y+1)*(x1-x+1)); 						// area to fill in 16bit pixels
 80054e0:	88bb      	ldrh	r3, [r7, #4]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	6a39      	ldr	r1, [r7, #32]
 80054ec:	1a8a      	subs	r2, r1, r2
 80054ee:	3201      	adds	r2, #1
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	60fb      	str	r3, [r7, #12]
	uint32_t *buf32Pos=(uint32_t *)dispBuffer; 		//dispBuffer defined in bytes, buf32Pos access it as 32 bit words
 80054f6:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <Displ_FillArea+0x168>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	617b      	str	r3, [r7, #20]
	if (area<(SIZEBUF>>1)) 							// if area is smaller than dispBuffer
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005502:	d204      	bcs.n	800550e <Displ_FillArea+0xce>
		times=(area>>1)+1; 							// number of times data32 has to be loaded into buffer
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	3301      	adds	r3, #1
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e002      	b.n	8005514 <Displ_FillArea+0xd4>
	else
		times=(SIZEBUF>>2);  						// dispBuffer size as 32bit-words
 800550e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005512:	61bb      	str	r3, [r7, #24]
	for (k = 0; k < times; k++)
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	e007      	b.n	800552a <Displ_FillArea+0xea>
		*(buf32Pos++)=data32; 						// loads buffer moving 32bit-words
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	1d1a      	adds	r2, r3, #4
 800551e:	617a      	str	r2, [r7, #20]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	601a      	str	r2, [r3, #0]
	for (k = 0; k < times; k++)
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	3301      	adds	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	429a      	cmp	r2, r3
 8005530:	d3f3      	bcc.n	800551a <Displ_FillArea+0xda>
	}
	datasize=(buf8Pos-dispBuffer);
#endif

//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x1, y1);
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	b29a      	uxth	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	b29b      	uxth	r3, r3
 800553a:	88b9      	ldrh	r1, [r7, #4]
 800553c:	88f8      	ldrh	r0, [r7, #6]
 800553e:	f7ff fe93 	bl	8005268 <Displ_SetAddressWindow>

#ifdef Z_RGB565 // transferring RGB666 format dispBuffer
	times=(area>>(BUFLEVEL-1));  					//how many times buffer must be sent via SPI. It is (BUFFLEVEL-1) because area is 16-bit while dispBuffer is 8-bit
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	0a9b      	lsrs	r3, r3, #10
 8005546:	61bb      	str	r3, [r7, #24]
	for  (k=0;k<times;k++) {
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
 800554c:	e00a      	b.n	8005564 <Displ_FillArea+0x124>
		Displ_WriteData(dispBuffer,SIZEBUF,0);
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <Displ_FillArea+0x168>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fe2e 	bl	80051ba <Displ_WriteData>
	for  (k=0;k<times;k++) {
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	3301      	adds	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d3f0      	bcc.n	800554e <Displ_FillArea+0x10e>
	}
	Displ_WriteData(dispBuffer,(area<<1)-(times<<BUFLEVEL),0);
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <Displ_FillArea+0x168>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	005a      	lsls	r2, r3, #1
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	02db      	lsls	r3, r3, #11
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2200      	movs	r2, #0
 800557c:	4619      	mov	r1, r3
 800557e:	f7ff fe1c 	bl	80051ba <Displ_WriteData>
	}
	Displ_WriteData(dispBuffer,(area-times*datasize),0);      //transfer last data frame
#endif

//BUFFER SWAP
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <Displ_FillArea+0x168>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a09      	ldr	r2, [pc, #36]	; (80055ac <Displ_FillArea+0x16c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <Displ_FillArea+0x150>
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <Displ_FillArea+0x170>)
 800558e:	e000      	b.n	8005592 <Displ_FillArea+0x152>
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <Displ_FillArea+0x16c>)
 8005592:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <Displ_FillArea+0x168>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e000      	b.n	800559a <Displ_FillArea+0x15a>
	if((x >= _width) || (y >= _height) || (w == 0) || (h == 0)) return;//
 8005598:	bf00      	nop

}
 800559a:	372c      	adds	r7, #44	; 0x2c
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}
 80055a0:	200084de 	.word	0x200084de
 80055a4:	200084e0 	.word	0x200084e0
 80055a8:	20000038 	.word	0x20000038
 80055ac:	200084e4 	.word	0x200084e4
 80055b0:	20008ce4 	.word	0x20008ce4

080055b4 <Displ_Pixel>:
/***********************
 * @brief	print a single pixel
 * @params	x, y	pixel position on display
 * 			color	... to be printed
 ***********************/
void Displ_Pixel(uint16_t x, uint16_t y, uint16_t color) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	4603      	mov	r3, r0
 80055bc:	80fb      	strh	r3, [r7, #6]
 80055be:	460b      	mov	r3, r1
 80055c0:	80bb      	strh	r3, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	4a0b      	ldr	r2, [pc, #44]	; (80055f8 <Displ_Pixel+0x44>)
 80055ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	da0e      	bge.n	80055f0 <Displ_Pixel+0x3c>
 80055d2:	88bb      	ldrh	r3, [r7, #4]
 80055d4:	4a09      	ldr	r2, [pc, #36]	; (80055fc <Displ_Pixel+0x48>)
 80055d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80055da:	4293      	cmp	r3, r2
 80055dc:	da08      	bge.n	80055f0 <Displ_Pixel+0x3c>
        return;
    Displ_FillArea(x, y, 1, 1, color);
 80055de:	88b9      	ldrh	r1, [r7, #4]
 80055e0:	88f8      	ldrh	r0, [r7, #6]
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	2301      	movs	r3, #1
 80055e8:	2201      	movs	r2, #1
 80055ea:	f7ff ff29 	bl	8005440 <Displ_FillArea>
 80055ee:	e000      	b.n	80055f2 <Displ_Pixel+0x3e>
        return;
 80055f0:	bf00      	nop

}
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	200084de 	.word	0x200084de
 80055fc:	200084e0 	.word	0x200084e0

08005600 <Displ_drawCircle>:




void Displ_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	4611      	mov	r1, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4623      	mov	r3, r4
 8005610:	80fb      	strh	r3, [r7, #6]
 8005612:	4603      	mov	r3, r0
 8005614:	80bb      	strh	r3, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	807b      	strh	r3, [r7, #2]
 800561a:	4613      	mov	r3, r2
 800561c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	f1c3 0301 	rsb	r3, r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005628:	2301      	movs	r3, #1
 800562a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800562c:	887b      	ldrh	r3, [r7, #2]
 800562e:	461a      	mov	r2, r3
 8005630:	03d2      	lsls	r2, r2, #15
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800563e:	887b      	ldrh	r3, [r7, #2]
 8005640:	81fb      	strh	r3, [r7, #14]

//    writePixel(x0  , y0+r, color);
    Displ_Pixel(x0  , y0+r, color);
 8005642:	88f8      	ldrh	r0, [r7, #6]
 8005644:	88ba      	ldrh	r2, [r7, #4]
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	4413      	add	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	883a      	ldrh	r2, [r7, #0]
 800564e:	4619      	mov	r1, r3
 8005650:	f7ff ffb0 	bl	80055b4 <Displ_Pixel>
    Displ_Pixel(x0  , y0-r, color);
 8005654:	88f8      	ldrh	r0, [r7, #6]
 8005656:	88ba      	ldrh	r2, [r7, #4]
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	b29b      	uxth	r3, r3
 800565e:	883a      	ldrh	r2, [r7, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	f7ff ffa7 	bl	80055b4 <Displ_Pixel>
    Displ_Pixel(x0+r, y0  , color);
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	4413      	add	r3, r2
 800566c:	b29b      	uxth	r3, r3
 800566e:	88b9      	ldrh	r1, [r7, #4]
 8005670:	883a      	ldrh	r2, [r7, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff9e 	bl	80055b4 <Displ_Pixel>
    Displ_Pixel(x0-r, y0  , color);
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29b      	uxth	r3, r3
 8005680:	88b9      	ldrh	r1, [r7, #4]
 8005682:	883a      	ldrh	r2, [r7, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff95 	bl	80055b4 <Displ_Pixel>

    while (x<y) {
 800568a:	e081      	b.n	8005790 <Displ_drawCircle+0x190>
        if (f >= 0) {
 800568c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db0e      	blt.n	80056b2 <Displ_drawCircle+0xb2>
            y--;
 8005694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80056a0:	8a7b      	ldrh	r3, [r7, #18]
 80056a2:	3302      	adds	r3, #2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80056a8:	8afa      	ldrh	r2, [r7, #22]
 80056aa:	8a7b      	ldrh	r3, [r7, #18]
 80056ac:	4413      	add	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80056b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3301      	adds	r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80056be:	8abb      	ldrh	r3, [r7, #20]
 80056c0:	3302      	adds	r3, #2
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80056c6:	8afa      	ldrh	r2, [r7, #22]
 80056c8:	8abb      	ldrh	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	82fb      	strh	r3, [r7, #22]

        Displ_Pixel(x0 + x, y0 + y, color);
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	8a3b      	ldrh	r3, [r7, #16]
 80056d4:	4413      	add	r3, r2
 80056d6:	b298      	uxth	r0, r3
 80056d8:	88ba      	ldrh	r2, [r7, #4]
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	4413      	add	r3, r2
 80056de:	b29b      	uxth	r3, r3
 80056e0:	883a      	ldrh	r2, [r7, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	f7ff ff66 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 + y, color);
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	8a3b      	ldrh	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b298      	uxth	r0, r3
 80056f0:	88ba      	ldrh	r2, [r7, #4]
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	4413      	add	r3, r2
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	883a      	ldrh	r2, [r7, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7ff ff5a 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 + x, y0 - y, color);
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	8a3b      	ldrh	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	b298      	uxth	r0, r3
 8005708:	88ba      	ldrh	r2, [r7, #4]
 800570a:	89fb      	ldrh	r3, [r7, #14]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	b29b      	uxth	r3, r3
 8005710:	883a      	ldrh	r2, [r7, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	f7ff ff4e 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 - x, y0 - y, color);
 8005718:	88fa      	ldrh	r2, [r7, #6]
 800571a:	8a3b      	ldrh	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	b298      	uxth	r0, r3
 8005720:	88ba      	ldrh	r2, [r7, #4]
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	b29b      	uxth	r3, r3
 8005728:	883a      	ldrh	r2, [r7, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	f7ff ff42 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 + x, color);
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	4413      	add	r3, r2
 8005736:	b298      	uxth	r0, r3
 8005738:	88ba      	ldrh	r2, [r7, #4]
 800573a:	8a3b      	ldrh	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	b29b      	uxth	r3, r3
 8005740:	883a      	ldrh	r2, [r7, #0]
 8005742:	4619      	mov	r1, r3
 8005744:	f7ff ff36 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 + x, color);
 8005748:	88fa      	ldrh	r2, [r7, #6]
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	b298      	uxth	r0, r3
 8005750:	88ba      	ldrh	r2, [r7, #4]
 8005752:	8a3b      	ldrh	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	b29b      	uxth	r3, r3
 8005758:	883a      	ldrh	r2, [r7, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	f7ff ff2a 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 + y, y0 - x, color);
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	4413      	add	r3, r2
 8005766:	b298      	uxth	r0, r3
 8005768:	88ba      	ldrh	r2, [r7, #4]
 800576a:	8a3b      	ldrh	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	883a      	ldrh	r2, [r7, #0]
 8005772:	4619      	mov	r1, r3
 8005774:	f7ff ff1e 	bl	80055b4 <Displ_Pixel>
        Displ_Pixel(x0 - y, y0 - x, color);
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	89fb      	ldrh	r3, [r7, #14]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	b298      	uxth	r0, r3
 8005780:	88ba      	ldrh	r2, [r7, #4]
 8005782:	8a3b      	ldrh	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	883a      	ldrh	r2, [r7, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	f7ff ff12 	bl	80055b4 <Displ_Pixel>
    while (x<y) {
 8005790:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005798:	429a      	cmp	r2, r3
 800579a:	f6ff af77 	blt.w	800568c <Displ_drawCircle+0x8c>
    }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd90      	pop	{r4, r7, pc}

080057a8 <Displ_CLS>:

/*****************
 * @brief	clear display with a color.
 * @param	bgcolor
 *****************/
void Displ_CLS(uint16_t bgcolor){
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	4603      	mov	r3, r0
 80057b0:	80fb      	strh	r3, [r7, #6]
	Displ_FillArea(0, 0, _width, _height, bgcolor);
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <Displ_CLS+0x30>)
 80057b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	4b08      	ldr	r3, [pc, #32]	; (80057dc <Displ_CLS+0x34>)
 80057bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c0:	b299      	uxth	r1, r3
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	460b      	mov	r3, r1
 80057c8:	2100      	movs	r1, #0
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7ff fe38 	bl	8005440 <Displ_FillArea>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	200084de 	.word	0x200084de
 80057dc:	200084e0 	.word	0x200084e0

080057e0 <drawCircleHelper>:




void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	80fb      	strh	r3, [r7, #6]
 80057f2:	4603      	mov	r3, r0
 80057f4:	80bb      	strh	r3, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	807b      	strh	r3, [r7, #2]
 80057fa:	4613      	mov	r3, r2
 80057fc:	707b      	strb	r3, [r7, #1]
    int16_t f     = 1 - r;
 80057fe:	887b      	ldrh	r3, [r7, #2]
 8005800:	f1c3 0301 	rsb	r3, r3, #1
 8005804:	b29b      	uxth	r3, r3
 8005806:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8005808:	2301      	movs	r3, #1
 800580a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800580c:	887b      	ldrh	r3, [r7, #2]
 800580e:	461a      	mov	r2, r3
 8005810:	03d2      	lsls	r2, r2, #15
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	b29b      	uxth	r3, r3
 8005818:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 800581e:	887b      	ldrh	r3, [r7, #2]
 8005820:	81fb      	strh	r3, [r7, #14]

    while (x<y) {
 8005822:	e095      	b.n	8005950 <drawCircleHelper+0x170>
        if (f >= 0) {
 8005824:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005828:	2b00      	cmp	r3, #0
 800582a:	db0e      	blt.n	800584a <drawCircleHelper+0x6a>
            y--;
 800582c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8005838:	8a7b      	ldrh	r3, [r7, #18]
 800583a:	3302      	adds	r3, #2
 800583c:	b29b      	uxth	r3, r3
 800583e:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 8005840:	8afa      	ldrh	r2, [r7, #22]
 8005842:	8a7b      	ldrh	r3, [r7, #18]
 8005844:	4413      	add	r3, r2
 8005846:	b29b      	uxth	r3, r3
 8005848:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800584a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800584e:	b29b      	uxth	r3, r3
 8005850:	3301      	adds	r3, #1
 8005852:	b29b      	uxth	r3, r3
 8005854:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8005856:	8abb      	ldrh	r3, [r7, #20]
 8005858:	3302      	adds	r3, #2
 800585a:	b29b      	uxth	r3, r3
 800585c:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 800585e:	8afa      	ldrh	r2, [r7, #22]
 8005860:	8abb      	ldrh	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	82fb      	strh	r3, [r7, #22]
        if (cornername & 0x4) {
 8005868:	787b      	ldrb	r3, [r7, #1]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d017      	beq.n	80058a2 <drawCircleHelper+0xc2>
            Displ_Pixel(x0 + x, y0 + y, color);
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	8a3b      	ldrh	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	b298      	uxth	r0, r3
 800587a:	88ba      	ldrh	r2, [r7, #4]
 800587c:	89fb      	ldrh	r3, [r7, #14]
 800587e:	4413      	add	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005884:	4619      	mov	r1, r3
 8005886:	f7ff fe95 	bl	80055b4 <Displ_Pixel>
            Displ_Pixel(x0 + y, y0 + x, color);
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	89fb      	ldrh	r3, [r7, #14]
 800588e:	4413      	add	r3, r2
 8005890:	b298      	uxth	r0, r3
 8005892:	88ba      	ldrh	r2, [r7, #4]
 8005894:	8a3b      	ldrh	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800589c:	4619      	mov	r1, r3
 800589e:	f7ff fe89 	bl	80055b4 <Displ_Pixel>
        }
        if (cornername & 0x2) {
 80058a2:	787b      	ldrb	r3, [r7, #1]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d017      	beq.n	80058dc <drawCircleHelper+0xfc>
        	Displ_Pixel(x0 + x, y0 - y, color);
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	8a3b      	ldrh	r3, [r7, #16]
 80058b0:	4413      	add	r3, r2
 80058b2:	b298      	uxth	r0, r3
 80058b4:	88ba      	ldrh	r2, [r7, #4]
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80058be:	4619      	mov	r1, r3
 80058c0:	f7ff fe78 	bl	80055b4 <Displ_Pixel>
        	Displ_Pixel(x0 + y, y0 - x, color);
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	4413      	add	r3, r2
 80058ca:	b298      	uxth	r0, r3
 80058cc:	88ba      	ldrh	r2, [r7, #4]
 80058ce:	8a3b      	ldrh	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80058d6:	4619      	mov	r1, r3
 80058d8:	f7ff fe6c 	bl	80055b4 <Displ_Pixel>
        }
        if (cornername & 0x8) {
 80058dc:	787b      	ldrb	r3, [r7, #1]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d017      	beq.n	8005916 <drawCircleHelper+0x136>
        	Displ_Pixel(x0 - y, y0 + x, color);
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	89fb      	ldrh	r3, [r7, #14]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	b298      	uxth	r0, r3
 80058ee:	88ba      	ldrh	r2, [r7, #4]
 80058f0:	8a3b      	ldrh	r3, [r7, #16]
 80058f2:	4413      	add	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80058f8:	4619      	mov	r1, r3
 80058fa:	f7ff fe5b 	bl	80055b4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 + y, color);
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	8a3b      	ldrh	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	b298      	uxth	r0, r3
 8005906:	88ba      	ldrh	r2, [r7, #4]
 8005908:	89fb      	ldrh	r3, [r7, #14]
 800590a:	4413      	add	r3, r2
 800590c:	b29b      	uxth	r3, r3
 800590e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005910:	4619      	mov	r1, r3
 8005912:	f7ff fe4f 	bl	80055b4 <Displ_Pixel>
        }
        if (cornername & 0x1) {
 8005916:	787b      	ldrb	r3, [r7, #1]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <drawCircleHelper+0x170>
        	Displ_Pixel(x0 - y, y0 - x, color);
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	89fb      	ldrh	r3, [r7, #14]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	b298      	uxth	r0, r3
 8005928:	88ba      	ldrh	r2, [r7, #4]
 800592a:	8a3b      	ldrh	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005932:	4619      	mov	r1, r3
 8005934:	f7ff fe3e 	bl	80055b4 <Displ_Pixel>
        	Displ_Pixel(x0 - x, y0 - y, color);
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	8a3b      	ldrh	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	b298      	uxth	r0, r3
 8005940:	88ba      	ldrh	r2, [r7, #4]
 8005942:	89fb      	ldrh	r3, [r7, #14]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800594a:	4619      	mov	r1, r3
 800594c:	f7ff fe32 	bl	80055b4 <Displ_Pixel>
    while (x<y) {
 8005950:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005958:	429a      	cmp	r2, r3
 800595a:	f6ff af63 	blt.w	8005824 <drawCircleHelper+0x44>
        }
    }
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd90      	pop	{r4, r7, pc}

08005968 <fillCircleHelper>:




void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8005968:	b590      	push	{r4, r7, lr}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af02      	add	r7, sp, #8
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4623      	mov	r3, r4
 8005978:	80fb      	strh	r3, [r7, #6]
 800597a:	4603      	mov	r3, r0
 800597c:	80bb      	strh	r3, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	807b      	strh	r3, [r7, #2]
 8005982:	4613      	mov	r3, r2
 8005984:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	f1c3 0301 	rsb	r3, r3, #1
 800598c:	b29b      	uxth	r3, r3
 800598e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8005990:	2301      	movs	r3, #1
 8005992:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	461a      	mov	r2, r3
 8005998:	03d2      	lsls	r2, r2, #15
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80059aa:	e0a7      	b.n	8005afc <fillCircleHelper+0x194>
    if (f >= 0) {
 80059ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0e      	blt.n	80059d2 <fillCircleHelper+0x6a>
      y--;
 80059b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80059c0:	8a7b      	ldrh	r3, [r7, #18]
 80059c2:	3302      	adds	r3, #2
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80059c8:	8afa      	ldrh	r2, [r7, #22]
 80059ca:	8a7b      	ldrh	r3, [r7, #18]
 80059cc:	4413      	add	r3, r2
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80059d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80059de:	8abb      	ldrh	r3, [r7, #20]
 80059e0:	3302      	adds	r3, #2
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80059e6:	8afa      	ldrh	r2, [r7, #22]
 80059e8:	8abb      	ldrh	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80059f0:	787b      	ldrb	r3, [r7, #1]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03d      	beq.n	8005a76 <fillCircleHelper+0x10e>
    	 Displ_Line(x0+x, y0-y, x0+x, y0+y+1+delta, color);
 80059fa:	88fa      	ldrh	r2, [r7, #6]
 80059fc:	8a3b      	ldrh	r3, [r7, #16]
 80059fe:	4413      	add	r3, r2
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	b218      	sxth	r0, r3
 8005a04:	88ba      	ldrh	r2, [r7, #4]
 8005a06:	89fb      	ldrh	r3, [r7, #14]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	b219      	sxth	r1, r3
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	8a3b      	ldrh	r3, [r7, #16]
 8005a12:	4413      	add	r3, r2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	b21c      	sxth	r4, r3
 8005a18:	88ba      	ldrh	r2, [r7, #4]
 8005a1a:	89fb      	ldrh	r3, [r7, #14]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a22:	4413      	add	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b21a      	sxth	r2, r3
 8005a2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	4622      	mov	r2, r4
 8005a34:	f000 f8a1 	bl	8005b7a <Displ_Line>
    	 Displ_Line(x0+y, y0-x,x0+y, y0+x+1+delta, color);
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	89fb      	ldrh	r3, [r7, #14]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	b218      	sxth	r0, r3
 8005a42:	88ba      	ldrh	r2, [r7, #4]
 8005a44:	8a3b      	ldrh	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	b219      	sxth	r1, r3
 8005a4c:	88fa      	ldrh	r2, [r7, #6]
 8005a4e:	89fb      	ldrh	r3, [r7, #14]
 8005a50:	4413      	add	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b21c      	sxth	r4, r3
 8005a56:	88ba      	ldrh	r2, [r7, #4]
 8005a58:	8a3b      	ldrh	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a60:	4413      	add	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	b21a      	sxth	r2, r3
 8005a6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	4622      	mov	r2, r4
 8005a72:	f000 f882 	bl	8005b7a <Displ_Line>
    }
    if (cornername & 0x2) {
 8005a76:	787b      	ldrb	r3, [r7, #1]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d03d      	beq.n	8005afc <fillCircleHelper+0x194>
      Displ_Line(x0-x, y0-y, x0-x, y0+y+1+delta, color);
 8005a80:	88fa      	ldrh	r2, [r7, #6]
 8005a82:	8a3b      	ldrh	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	b218      	sxth	r0, r3
 8005a8a:	88ba      	ldrh	r2, [r7, #4]
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	b219      	sxth	r1, r3
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	8a3b      	ldrh	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	b21c      	sxth	r4, r3
 8005a9e:	88ba      	ldrh	r2, [r7, #4]
 8005aa0:	89fb      	ldrh	r3, [r7, #14]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005aa8:	4413      	add	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3301      	adds	r3, #1
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b21a      	sxth	r2, r3
 8005ab2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	4622      	mov	r2, r4
 8005aba:	f000 f85e 	bl	8005b7a <Displ_Line>
      Displ_Line(x0-y, y0-x, x0-y, y0+x+1+delta, color);
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	89fb      	ldrh	r3, [r7, #14]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	b218      	sxth	r0, r3
 8005ac8:	88ba      	ldrh	r2, [r7, #4]
 8005aca:	8a3b      	ldrh	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	b219      	sxth	r1, r3
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	b21c      	sxth	r4, r3
 8005adc:	88ba      	ldrh	r2, [r7, #4]
 8005ade:	8a3b      	ldrh	r3, [r7, #16]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ae6:	4413      	add	r3, r2
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b21a      	sxth	r2, r3
 8005af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	4622      	mov	r2, r4
 8005af8:	f000 f83f 	bl	8005b7a <Displ_Line>
  while (x<y) {
 8005afc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f6ff af51 	blt.w	80059ac <fillCircleHelper+0x44>
    }
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd90      	pop	{r4, r7, pc}

08005b14 <Displ_fillCircle>:





void Displ_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	80fb      	strh	r3, [r7, #6]
 8005b26:	4603      	mov	r3, r0
 8005b28:	80bb      	strh	r3, [r7, #4]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	807b      	strh	r3, [r7, #2]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0-r, x0, y0+r, color);
 8005b32:	88ba      	ldrh	r2, [r7, #4]
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b219      	sxth	r1, r3
 8005b3c:	88ba      	ldrh	r2, [r7, #4]
 8005b3e:	887b      	ldrh	r3, [r7, #2]
 8005b40:	4413      	add	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b21c      	sxth	r4, r3
 8005b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b4e:	883b      	ldrh	r3, [r7, #0]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	4623      	mov	r3, r4
 8005b54:	f000 f811 	bl	8005b7a <Displ_Line>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 8005b58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005b5c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005b60:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005b64:	883b      	ldrh	r3, [r7, #0]
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	f7ff fefb 	bl	8005968 <fillCircleHelper>
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}

08005b7a <Displ_Line>:

/************************************************************************
 * @brief	draws a line from "x0","y0" to "x1","y1" of the given "color"
 ************************************************************************/
void Displ_Line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8005b7a:	b590      	push	{r4, r7, lr}
 8005b7c:	b08b      	sub	sp, #44	; 0x2c
 8005b7e:	af02      	add	r7, sp, #8
 8005b80:	4604      	mov	r4, r0
 8005b82:	4608      	mov	r0, r1
 8005b84:	4611      	mov	r1, r2
 8005b86:	461a      	mov	r2, r3
 8005b88:	4623      	mov	r3, r4
 8005b8a:	80fb      	strh	r3, [r7, #6]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	80bb      	strh	r3, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	803b      	strh	r3, [r7, #0]
	int16_t l,x,steep,ystep,err,dx, dy;

    if (x0==x1){  // fast solve vertical lines
 8005b98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d123      	bne.n	8005bec <Displ_Line+0x72>
    	if (y1>y0){
 8005ba4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ba8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	dd0e      	ble.n	8005bce <Displ_Line+0x54>
    		Displ_FillArea(x0, y0, 1, y1-y0+1, color);
 8005bb0:	88f8      	ldrh	r0, [r7, #6]
 8005bb2:	88b9      	ldrh	r1, [r7, #4]
 8005bb4:	883a      	ldrh	r2, [r7, #0]
 8005bb6:	88bb      	ldrh	r3, [r7, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f7ff fc3a 	bl	8005440 <Displ_FillArea>
    	}
    	else {
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
    	}
    	return;
 8005bcc:	e103      	b.n	8005dd6 <Displ_Line+0x25c>
    		Displ_FillArea(x0, y1, 1, y0-y1+1, color);
 8005bce:	88f8      	ldrh	r0, [r7, #6]
 8005bd0:	8839      	ldrh	r1, [r7, #0]
 8005bd2:	88ba      	ldrh	r2, [r7, #4]
 8005bd4:	883b      	ldrh	r3, [r7, #0]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	2201      	movs	r2, #1
 8005be6:	f7ff fc2b 	bl	8005440 <Displ_FillArea>
    	return;
 8005bea:	e0f4      	b.n	8005dd6 <Displ_Line+0x25c>
    }
    if (y0==y1){ // fast solve horizontal lines
 8005bec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005bf0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d121      	bne.n	8005c3c <Displ_Line+0xc2>
    	if (x1>x0)
 8005bf8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dd0d      	ble.n	8005c20 <Displ_Line+0xa6>
    		Displ_FillArea(x0, y0, x1-x0+1, 1, color);
 8005c04:	88f8      	ldrh	r0, [r7, #6]
 8005c06:	88b9      	ldrh	r1, [r7, #4]
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3301      	adds	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f7ff fc11 	bl	8005440 <Displ_FillArea>
    	else
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
    	return;
 8005c1e:	e0da      	b.n	8005dd6 <Displ_Line+0x25c>
    		Displ_FillArea(x1, y1, x0-x1+1, 1, color);
 8005c20:	8878      	ldrh	r0, [r7, #2]
 8005c22:	8839      	ldrh	r1, [r7, #0]
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2301      	movs	r3, #1
 8005c36:	f7ff fc03 	bl	8005440 <Displ_FillArea>
    	return;
 8005c3a:	e0cc      	b.n	8005dd6 <Displ_Line+0x25c>
    }

    steep = (y1>y0 ? y1-y0 : y0-y1) > (x1>x0 ? x1-x0 : x0-x1);
 8005c3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	dd05      	ble.n	8005c54 <Displ_Line+0xda>
 8005c48:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c50:	1ad2      	subs	r2, r2, r3
 8005c52:	e004      	b.n	8005c5e <Displ_Line+0xe4>
 8005c54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c58:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c66:	4299      	cmp	r1, r3
 8005c68:	dd05      	ble.n	8005c76 <Displ_Line+0xfc>
 8005c6a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c72:	1acb      	subs	r3, r1, r3
 8005c74:	e004      	b.n	8005c80 <Displ_Line+0x106>
 8005c76:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8005c7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c7e:	1acb      	subs	r3, r1, r3
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bfcc      	ite	gt
 8005c84:	2301      	movgt	r3, #1
 8005c86:	2300      	movle	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	82bb      	strh	r3, [r7, #20]

    if (steep) {
 8005c8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <Displ_Line+0x132>
        _swap_int16_t(x0, y0);
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	827b      	strh	r3, [r7, #18]
 8005c98:	88bb      	ldrh	r3, [r7, #4]
 8005c9a:	80fb      	strh	r3, [r7, #6]
 8005c9c:	8a7b      	ldrh	r3, [r7, #18]
 8005c9e:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	823b      	strh	r3, [r7, #16]
 8005ca4:	883b      	ldrh	r3, [r7, #0]
 8005ca6:	807b      	strh	r3, [r7, #2]
 8005ca8:	8a3b      	ldrh	r3, [r7, #16]
 8005caa:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8005cac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	dd0b      	ble.n	8005cd0 <Displ_Line+0x156>
        _swap_int16_t(x0, x1);
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	81fb      	strh	r3, [r7, #14]
 8005cbc:	887b      	ldrh	r3, [r7, #2]
 8005cbe:	80fb      	strh	r3, [r7, #6]
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8005cc4:	88bb      	ldrh	r3, [r7, #4]
 8005cc6:	81bb      	strh	r3, [r7, #12]
 8005cc8:	883b      	ldrh	r3, [r7, #0]
 8005cca:	80bb      	strh	r3, [r7, #4]
 8005ccc:	89bb      	ldrh	r3, [r7, #12]
 8005cce:	803b      	strh	r3, [r7, #0]
    }

    dx = x1 - x0;
 8005cd0:	887a      	ldrh	r2, [r7, #2]
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	817b      	strh	r3, [r7, #10]
    err = dx >> 1;
 8005cda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005cde:	105b      	asrs	r3, r3, #1
 8005ce0:	833b      	strh	r3, [r7, #24]
    if (y0 < y1) {
 8005ce2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ce6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	da07      	bge.n	8005cfe <Displ_Line+0x184>
        dy = y1-y0;
 8005cee:	883a      	ldrh	r2, [r7, #0]
 8005cf0:	88bb      	ldrh	r3, [r7, #4]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	82fb      	strh	r3, [r7, #22]
        ystep =  1 ;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	837b      	strh	r3, [r7, #26]
 8005cfc:	e007      	b.n	8005d0e <Displ_Line+0x194>
    } else {
        dy = y0-y1;
 8005cfe:	88ba      	ldrh	r2, [r7, #4]
 8005d00:	883b      	ldrh	r3, [r7, #0]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	82fb      	strh	r3, [r7, #22]
        ystep =  -1 ;
 8005d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d0c:	837b      	strh	r3, [r7, #26]
    }

    l=00;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	83fb      	strh	r3, [r7, #30]
    for (x=x0; x<=x1; x++) {
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	83bb      	strh	r3, [r7, #28]
 8005d16:	e03a      	b.n	8005d8e <Displ_Line+0x214>
    	l++;
 8005d18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3301      	adds	r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	83fb      	strh	r3, [r7, #30]
        err -= dy;
 8005d24:	8b3a      	ldrh	r2, [r7, #24]
 8005d26:	8afb      	ldrh	r3, [r7, #22]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	833b      	strh	r3, [r7, #24]
        if (err < 0) {
 8005d2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da25      	bge.n	8005d82 <Displ_Line+0x208>
        	if (steep) {
 8005d36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <Displ_Line+0x1d8>
        		Displ_FillArea(y0, x0, 1, l, color);
 8005d3e:	88b8      	ldrh	r0, [r7, #4]
 8005d40:	88f9      	ldrh	r1, [r7, #6]
 8005d42:	8bfa      	ldrh	r2, [r7, #30]
 8005d44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f7ff fb78 	bl	8005440 <Displ_FillArea>
 8005d50:	e007      	b.n	8005d62 <Displ_Line+0x1e8>
            } else {
            	Displ_FillArea(x0, y0, l, 1, color);
 8005d52:	88f8      	ldrh	r0, [r7, #6]
 8005d54:	88b9      	ldrh	r1, [r7, #4]
 8005d56:	8bfa      	ldrh	r2, [r7, #30]
 8005d58:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f7ff fb6f 	bl	8005440 <Displ_FillArea>
            }
            y0 += ystep;
 8005d62:	88ba      	ldrh	r2, [r7, #4]
 8005d64:	8b7b      	ldrh	r3, [r7, #26]
 8005d66:	4413      	add	r3, r2
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	80bb      	strh	r3, [r7, #4]
            l=0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	83fb      	strh	r3, [r7, #30]
            x0=x+1;
 8005d70:	8bbb      	ldrh	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	80fb      	strh	r3, [r7, #6]
            err += dx;
 8005d78:	8b3a      	ldrh	r2, [r7, #24]
 8005d7a:	897b      	ldrh	r3, [r7, #10]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	833b      	strh	r3, [r7, #24]
    for (x=x0; x<=x1; x++) {
 8005d82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	83bb      	strh	r3, [r7, #28]
 8005d8e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005d92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	ddbe      	ble.n	8005d18 <Displ_Line+0x19e>
        }
    }
    if (l!=0){
 8005d9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d019      	beq.n	8005dd6 <Displ_Line+0x25c>
    	if (steep) {
 8005da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <Displ_Line+0x248>
    		Displ_FillArea(y0, x0, 1, l-1, color);
 8005daa:	88b8      	ldrh	r0, [r7, #4]
 8005dac:	88f9      	ldrh	r1, [r7, #6]
 8005dae:	8bfb      	ldrh	r3, [r7, #30]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f7ff fb40 	bl	8005440 <Displ_FillArea>
 8005dc0:	e009      	b.n	8005dd6 <Displ_Line+0x25c>
    	} else {
    		Displ_FillArea(x0, y0, l-1,1, color);
 8005dc2:	88f8      	ldrh	r0, [r7, #6]
 8005dc4:	88b9      	ldrh	r1, [r7, #4]
 8005dc6:	8bfb      	ldrh	r3, [r7, #30]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f7ff fb35 	bl	8005440 <Displ_FillArea>
    	}
    }
}
 8005dd6:	3724      	adds	r7, #36	; 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd90      	pop	{r4, r7, pc}

08005ddc <Displ_Border>:
 * @params	x, y	top left corner
 * 			w, h	width and height
 * 			t		border thickness
 * 			color	border color, inner part unchanged
 ***********************/
void Displ_Border(int16_t x, int16_t y, int16_t w, int16_t h, int16_t t,  uint16_t color){
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	80fb      	strh	r3, [r7, #6]
 8005dee:	4603      	mov	r3, r0
 8005df0:	80bb      	strh	r3, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	807b      	strh	r3, [r7, #2]
 8005df6:	4613      	mov	r3, r2
 8005df8:	803b      	strh	r3, [r7, #0]
	Displ_FillArea(x, y, w, t, color);
 8005dfa:	88f8      	ldrh	r0, [r7, #6]
 8005dfc:	88b9      	ldrh	r1, [r7, #4]
 8005dfe:	887a      	ldrh	r2, [r7, #2]
 8005e00:	8b3c      	ldrh	r4, [r7, #24]
 8005e02:	8bbb      	ldrh	r3, [r7, #28]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	4623      	mov	r3, r4
 8005e08:	f7ff fb1a 	bl	8005440 <Displ_FillArea>
	Displ_FillArea(x, y+h-t, w, t, color);
 8005e0c:	88f8      	ldrh	r0, [r7, #6]
 8005e0e:	88ba      	ldrh	r2, [r7, #4]
 8005e10:	883b      	ldrh	r3, [r7, #0]
 8005e12:	4413      	add	r3, r2
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	8b3b      	ldrh	r3, [r7, #24]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	b299      	uxth	r1, r3
 8005e1c:	887a      	ldrh	r2, [r7, #2]
 8005e1e:	8b3c      	ldrh	r4, [r7, #24]
 8005e20:	8bbb      	ldrh	r3, [r7, #28]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4623      	mov	r3, r4
 8005e26:	f7ff fb0b 	bl	8005440 <Displ_FillArea>
	Displ_FillArea(x, y, t, h, color);
 8005e2a:	88f8      	ldrh	r0, [r7, #6]
 8005e2c:	88b9      	ldrh	r1, [r7, #4]
 8005e2e:	8b3a      	ldrh	r2, [r7, #24]
 8005e30:	883c      	ldrh	r4, [r7, #0]
 8005e32:	8bbb      	ldrh	r3, [r7, #28]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	4623      	mov	r3, r4
 8005e38:	f7ff fb02 	bl	8005440 <Displ_FillArea>
	Displ_FillArea(x+w-t, y, t, h, color);
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	887b      	ldrh	r3, [r7, #2]
 8005e40:	4413      	add	r3, r2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	8b3b      	ldrh	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	b298      	uxth	r0, r3
 8005e4a:	88b9      	ldrh	r1, [r7, #4]
 8005e4c:	8b3a      	ldrh	r2, [r7, #24]
 8005e4e:	883c      	ldrh	r4, [r7, #0]
 8005e50:	8bbb      	ldrh	r3, [r7, #28]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4623      	mov	r3, r4
 8005e56:	f7ff faf3 	bl	8005440 <Displ_FillArea>
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd90      	pop	{r4, r7, pc}

08005e62 <Displ_drawTriangle>:




void Displ_drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005e62:	b590      	push	{r4, r7, lr}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af02      	add	r7, sp, #8
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4623      	mov	r3, r4
 8005e72:	80fb      	strh	r3, [r7, #6]
 8005e74:	4603      	mov	r3, r0
 8005e76:	80bb      	strh	r3, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	803b      	strh	r3, [r7, #0]
    Displ_Line(x0, y0, x1, y1, color);
 8005e80:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005e84:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005e88:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005e8c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005e90:	8c3b      	ldrh	r3, [r7, #32]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4623      	mov	r3, r4
 8005e96:	f7ff fe70 	bl	8005b7a <Displ_Line>
    Displ_Line(x1, y1, x2, y2, color);
 8005e9a:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005e9e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ea2:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005ea6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005eaa:	8c3b      	ldrh	r3, [r7, #32]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4623      	mov	r3, r4
 8005eb0:	f7ff fe63 	bl	8005b7a <Displ_Line>
    Displ_Line(x2, y2, x0, y0, color);
 8005eb4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005eb8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ebc:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005ec0:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005ec4:	8c3b      	ldrh	r3, [r7, #32]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	4623      	mov	r3, r4
 8005eca:	f7ff fe56 	bl	8005b7a <Displ_Line>
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}

08005ed6 <Displ_fillTriangle>:




void Displ_fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b091      	sub	sp, #68	; 0x44
 8005eda:	af02      	add	r7, sp, #8
 8005edc:	4604      	mov	r4, r0
 8005ede:	4608      	mov	r0, r1
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	80fb      	strh	r3, [r7, #6]
 8005ee8:	4603      	mov	r3, r0
 8005eea:	80bb      	strh	r3, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8005ef4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005ef8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	dd0b      	ble.n	8005f18 <Displ_fillTriangle+0x42>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005f00:	88bb      	ldrh	r3, [r7, #4]
 8005f02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005f04:	883b      	ldrh	r3, [r7, #0]
 8005f06:	80bb      	strh	r3, [r7, #4]
 8005f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f0a:	803b      	strh	r3, [r7, #0]
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005f10:	887b      	ldrh	r3, [r7, #2]
 8005f12:	80fb      	strh	r3, [r7, #6]
 8005f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f16:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2) {
 8005f18:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	dd0f      	ble.n	8005f44 <Displ_fillTriangle+0x6e>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8005f24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f28:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f2a:	883b      	ldrh	r3, [r7, #0]
 8005f2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f32:	803b      	strh	r3, [r7, #0]
 8005f34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f38:	843b      	strh	r3, [r7, #32]
 8005f3a:	887b      	ldrh	r3, [r7, #2]
 8005f3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005f40:	8c3b      	ldrh	r3, [r7, #32]
 8005f42:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1) {
 8005f44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	dd0b      	ble.n	8005f68 <Displ_fillTriangle+0x92>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8005f50:	88bb      	ldrh	r3, [r7, #4]
 8005f52:	83fb      	strh	r3, [r7, #30]
 8005f54:	883b      	ldrh	r3, [r7, #0]
 8005f56:	80bb      	strh	r3, [r7, #4]
 8005f58:	8bfb      	ldrh	r3, [r7, #30]
 8005f5a:	803b      	strh	r3, [r7, #0]
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	83bb      	strh	r3, [r7, #28]
 8005f60:	887b      	ldrh	r3, [r7, #2]
 8005f62:	80fb      	strh	r3, [r7, #6]
 8005f64:	8bbb      	ldrh	r3, [r7, #28]
 8005f66:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8005f68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f6c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d136      	bne.n	8005fe2 <Displ_fillTriangle+0x10c>
        a = b = x0;
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 8005f7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f80:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005f84:	429a      	cmp	r2, r3
 8005f86:	da02      	bge.n	8005f8e <Displ_fillTriangle+0xb8>
 8005f88:	887b      	ldrh	r3, [r7, #2]
 8005f8a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f8c:	e007      	b.n	8005f9e <Displ_fillTriangle+0xc8>
        else if(x1 > b) b = x1;
 8005f8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005f96:	429a      	cmp	r2, r3
 8005f98:	dd01      	ble.n	8005f9e <Displ_fillTriangle+0xc8>
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 8005f9e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005fa2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	da03      	bge.n	8005fb2 <Displ_fillTriangle+0xdc>
 8005faa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005fb0:	e008      	b.n	8005fc4 <Displ_fillTriangle+0xee>
        else if(x2 > b) b = x2;
 8005fb2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8005fb6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dd02      	ble.n	8005fc4 <Displ_fillTriangle+0xee>
 8005fbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fc2:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y0, b-a+1, color);
        Displ_Line(a, y0, b, y0, color);
 8005fc4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005fc8:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005fcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005fd0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8005fd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	4623      	mov	r3, r4
 8005fdc:	f7ff fdcd 	bl	8005b7a <Displ_Line>
        return;
 8005fe0:	e0d2      	b.n	8006188 <Displ_fillTriangle+0x2b2>
    }

    int16_t
    dx01 = x1 - x0,
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8005fec:	883a      	ldrh	r2, [r7, #0]
 8005fee:	88bb      	ldrh	r3, [r7, #4]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8005ff6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8006002:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006006:	88bb      	ldrh	r3, [r7, #4]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 800600e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006012:	887b      	ldrh	r3, [r7, #2]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	b29b      	uxth	r3, r3
 8006018:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 800601a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800601e:	883b      	ldrh	r3, [r7, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8006026:	2300      	movs	r3, #0
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800602e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006032:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006036:	429a      	cmp	r2, r3
 8006038:	d102      	bne.n	8006040 <Displ_fillTriangle+0x16a>
 800603a:	883b      	ldrh	r3, [r7, #0]
 800603c:	863b      	strh	r3, [r7, #48]	; 0x30
 800603e:	e003      	b.n	8006048 <Displ_fillTriangle+0x172>
    else         last = y1-1; // Skip it
 8006040:	883b      	ldrh	r3, [r7, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++) {
 8006048:	88bb      	ldrh	r3, [r7, #4]
 800604a:	867b      	strh	r3, [r7, #50]	; 0x32
 800604c:	e03d      	b.n	80060ca <Displ_fillTriangle+0x1f4>
        a   = x0 + sa / dy01;
 800604e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006054:	fb92 f3f3 	sdiv	r3, r2, r3
 8006058:	b29a      	uxth	r2, r3
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	4413      	add	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006062:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006068:	fb92 f3f3 	sdiv	r3, r2, r3
 800606c:	b29a      	uxth	r2, r3
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	4413      	add	r3, r2
 8006072:	b29b      	uxth	r3, r3
 8006074:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 8006076:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800607a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607c:	4413      	add	r3, r2
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006080:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006086:	4413      	add	r3, r2
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800608a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800608e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006092:	429a      	cmp	r2, r3
 8006094:	dd05      	ble.n	80060a2 <Displ_fillTriangle+0x1cc>
 8006096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006098:	81bb      	strh	r3, [r7, #12]
 800609a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800609c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800609e:	89bb      	ldrh	r3, [r7, #12]
 80060a0:	86bb      	strh	r3, [r7, #52]	; 0x34
//        drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 80060a2:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 80060a6:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80060aa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80060ae:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 80060b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	4623      	mov	r3, r4
 80060ba:	f7ff fd5e 	bl	8005b7a <Displ_Line>
    for(y=y0; y<=last; y++) {
 80060be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3301      	adds	r3, #1
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	867b      	strh	r3, [r7, #50]	; 0x32
 80060ca:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80060ce:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80060d2:	429a      	cmp	r2, r3
 80060d4:	ddbb      	ble.n	800604e <Displ_fillTriangle+0x178>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80060d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060da:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80060de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80060e2:	1a8a      	subs	r2, r1, r2
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80060ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80060ee:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80060f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80060f6:	1a8a      	subs	r2, r1, r2
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80060fe:	e03d      	b.n	800617c <Displ_fillTriangle+0x2a6>
        a   = x1 + sa / dy12;
 8006100:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006106:	fb92 f3f3 	sdiv	r3, r2, r3
 800610a:	b29a      	uxth	r2, r3
 800610c:	887b      	ldrh	r3, [r7, #2]
 800610e:	4413      	add	r3, r2
 8006110:	b29b      	uxth	r3, r3
 8006112:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8006114:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800611a:	fb92 f3f3 	sdiv	r3, r2, r3
 800611e:	b29a      	uxth	r2, r3
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	4413      	add	r3, r2
 8006124:	b29b      	uxth	r3, r3
 8006126:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8006128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800612e:	4413      	add	r3, r2
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8006132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006138:	4413      	add	r3, r2
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800613c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8006140:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8006144:	429a      	cmp	r2, r3
 8006146:	dd05      	ble.n	8006154 <Displ_fillTriangle+0x27e>
 8006148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800614a:	81fb      	strh	r3, [r7, #14]
 800614c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800614e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006150:	89fb      	ldrh	r3, [r7, #14]
 8006152:	86bb      	strh	r3, [r7, #52]	; 0x34
//      drawFastHLine(a, y, b-a+1, color);
        Displ_Line(a, y, b, y, color);
 8006154:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	; 0x32
 8006158:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800615c:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8006160:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	; 0x36
 8006164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4623      	mov	r3, r4
 800616c:	f7ff fd05 	bl	8005b7a <Displ_Line>
    for(; y<=y2; y++) {
 8006170:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006174:	b29b      	uxth	r3, r3
 8006176:	3301      	adds	r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	867b      	strh	r3, [r7, #50]	; 0x32
 800617c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8006180:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006184:	429a      	cmp	r2, r3
 8006186:	ddbb      	ble.n	8006100 <Displ_fillTriangle+0x22a>
    }
}
 8006188:	373c      	adds	r7, #60	; 0x3c
 800618a:	46bd      	mov	sp, r7
 800618c:	bd90      	pop	{r4, r7, pc}
	...

08006190 <Displ_WChar>:
 * @brief	display one character on the display
 * @param 	x,y: top left corner of the character to be printed
 * 			ch, font, color, bgcolor: as per parameter name
 * 			size: (1 or 2) single or double wided printing
 **********************/
void Displ_WChar(uint16_t x, uint16_t y, char ch, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 8006190:	b082      	sub	sp, #8
 8006192:	b590      	push	{r4, r7, lr}
 8006194:	b08f      	sub	sp, #60	; 0x3c
 8006196:	af02      	add	r7, sp, #8
 8006198:	647b      	str	r3, [r7, #68]	; 0x44
 800619a:	4603      	mov	r3, r0
 800619c:	80fb      	strh	r3, [r7, #6]
 800619e:	460b      	mov	r3, r1
 80061a0:	80bb      	strh	r3, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, bytes, j, bufSize, mask;

    const uint8_t *pos;
	uint8_t wsize=font.Width; //printing char width
 80061a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061aa:	76fb      	strb	r3, [r7, #27]

	if (size==2)
 80061ac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d102      	bne.n	80061ba <Displ_WChar+0x2a>
		wsize<<= 1;
 80061b4:	7efb      	ldrb	r3, [r7, #27]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	76fb      	strb	r3, [r7, #27]
	bufSize=0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
	bytes=font.Height * font.Size ;
 80061be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80061c2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	617b      	str	r3, [r7, #20]
	pos=font.table+(ch - 32) * bytes ;//that's char position in table
 80061cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	3b20      	subs	r3, #32
 80061d2:	4619      	mov	r1, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
	switch (font.Size) {
 80061de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d005      	beq.n	80061f2 <Displ_WChar+0x62>
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d107      	bne.n	80061fa <Displ_WChar+0x6a>
		case 3:
			mask=0x800000;
 80061ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061ee:	61fb      	str	r3, [r7, #28]
			break;
 80061f0:	e005      	b.n	80061fe <Displ_WChar+0x6e>
		case 2:
			mask=0x8000;
 80061f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f6:	61fb      	str	r3, [r7, #28]
			break;
 80061f8:	e001      	b.n	80061fe <Displ_WChar+0x6e>
		default:
			mask=0x80;
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	61fb      	str	r3, [r7, #28]
	}

#ifdef Z_RGB565

	uint16_t color1, bgcolor1;
	uint16_t *dispBuffer16=(uint16_t *)dispBuffer;
 80061fe:	4b68      	ldr	r3, [pc, #416]	; (80063a0 <Displ_WChar+0x210>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

	color1 = ((color & 0xFF)<<8 | (color >> 8));      		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 8006204:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	b21a      	sxth	r2, r3
 800620c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	b29b      	uxth	r3, r3
 8006214:	b21b      	sxth	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b21b      	sxth	r3, r3
 800621a:	817b      	strh	r3, [r7, #10]
	bgcolor1 = ((bgcolor & 0xFF)<<8 | (bgcolor >> 8));		//swapping byte endian: STM32 is little endian, ST7735 is big endian
 800621c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	b21a      	sxth	r2, r3
 8006224:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	b29b      	uxth	r3, r3
 800622c:	b21b      	sxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b21b      	sxth	r3, r3
 8006232:	813b      	strh	r3, [r7, #8]


	for(i = 0; i < (bytes); i+=font.Size){
 8006234:	2300      	movs	r3, #0
 8006236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006238:	e06f      	b.n	800631a <Displ_WChar+0x18a>
		b=0;
 800623a:	2300      	movs	r3, #0
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
		switch (font.Size) {
 800623e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006242:	2b02      	cmp	r3, #2
 8006244:	d015      	beq.n	8006272 <Displ_WChar+0xe2>
 8006246:	2b03      	cmp	r3, #3
 8006248:	d120      	bne.n	800628c <Displ_WChar+0xfc>
			case 3:
				b=pos[i]<<16 | pos[i+1]<<8 | pos[i+2];
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	041a      	lsls	r2, r3, #16
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	3301      	adds	r3, #1
 8006258:	6939      	ldr	r1, [r7, #16]
 800625a:	440b      	add	r3, r1
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	4313      	orrs	r3, r2
 8006262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006264:	3202      	adds	r2, #2
 8006266:	6939      	ldr	r1, [r7, #16]
 8006268:	440a      	add	r2, r1
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	4313      	orrs	r3, r2
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8006270:	e011      	b.n	8006296 <Displ_WChar+0x106>
			case 2:
				b=pos[i]<<8 | pos[i+1];
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	4413      	add	r3, r2
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627e:	3201      	adds	r2, #1
 8006280:	6939      	ldr	r1, [r7, #16]
 8006282:	440a      	add	r2, r1
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	4313      	orrs	r3, r2
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 800628a:	e004      	b.n	8006296 <Displ_WChar+0x106>
			default:
				b=pos[i];
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		for(j = 0; j < font.Width; j++) {
 8006296:	2300      	movs	r3, #0
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	e032      	b.n	8006302 <Displ_WChar+0x172>
			if((b << j) & mask)  {
 800629c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	409a      	lsls	r2, r3
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d014      	beq.n	80062d4 <Displ_WChar+0x144>
				dispBuffer16[bufSize++] = color1;
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	623a      	str	r2, [r7, #32]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	897a      	ldrh	r2, [r7, #10]
 80062b8:	801a      	strh	r2, [r3, #0]
				if (size==2){
 80062ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d11c      	bne.n	80062fc <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = color1;
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	623a      	str	r2, [r7, #32]
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	897a      	ldrh	r2, [r7, #10]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e013      	b.n	80062fc <Displ_WChar+0x16c>
				}
			} else {
				dispBuffer16[bufSize++] = bgcolor1;
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	623a      	str	r2, [r7, #32]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	893a      	ldrh	r2, [r7, #8]
 80062e2:	801a      	strh	r2, [r3, #0]
				if (size==2) {
 80062e4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d107      	bne.n	80062fc <Displ_WChar+0x16c>
					dispBuffer16[bufSize++] = bgcolor1;
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	623a      	str	r2, [r7, #32]
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < font.Width; j++) {
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3301      	adds	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006306:	461a      	mov	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	4293      	cmp	r3, r2
 800630c:	d3c6      	bcc.n	800629c <Displ_WChar+0x10c>
	for(i = 0; i < (bytes); i+=font.Size){
 800630e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006312:	461a      	mov	r2, r3
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	4413      	add	r3, r2
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d38b      	bcc.n	800623a <Displ_WChar+0xaa>
				}
			}
		}
	}
	bufSize<<=1;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	623b      	str	r3, [r7, #32]
			}
		}
	}
#endif

	Displ_SetAddressWindow(x, y, x+wsize-1, y+font.Height-1);
 8006328:	7efb      	ldrb	r3, [r7, #27]
 800632a:	b29a      	uxth	r2, r3
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	4413      	add	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29c      	uxth	r4, r3
 8006336:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800633a:	88bb      	ldrh	r3, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29b      	uxth	r3, r3
 8006344:	88b9      	ldrh	r1, [r7, #4]
 8006346:	88f8      	ldrh	r0, [r7, #6]
 8006348:	4622      	mov	r2, r4
 800634a:	f7fe ff8d 	bl	8005268 <Displ_SetAddressWindow>
	// Buffer size too small !!!
	if (bufSize > SIZEBUF) {
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	d90b      	bls.n	800636e <Displ_WChar+0x1de>
		term_print("%s %s() Line %d - bufSize error, require %d but size is %d!!\r\n", __FILE__, __FUNCTION__, __LINE__, bufSize, SIZEBUF);
 8006356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	f240 33ad 	movw	r3, #941	; 0x3ad
 8006364:	4a0f      	ldr	r2, [pc, #60]	; (80063a4 <Displ_WChar+0x214>)
 8006366:	4910      	ldr	r1, [pc, #64]	; (80063a8 <Displ_WChar+0x218>)
 8006368:	4810      	ldr	r0, [pc, #64]	; (80063ac <Displ_WChar+0x21c>)
 800636a:	f7fe fcaf 	bl	8004ccc <term_print>
	}
	Displ_WriteData(dispBuffer,bufSize,0);
 800636e:	4b0c      	ldr	r3, [pc, #48]	; (80063a0 <Displ_WChar+0x210>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2200      	movs	r2, #0
 8006374:	6a39      	ldr	r1, [r7, #32]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe ff1f 	bl	80051ba <Displ_WriteData>
	dispBuffer = (dispBuffer==dispBuffer1 ? dispBuffer2 : dispBuffer1); // swapping buffer
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <Displ_WChar+0x210>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <Displ_WChar+0x220>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <Displ_WChar+0x1fa>
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <Displ_WChar+0x224>)
 8006388:	e000      	b.n	800638c <Displ_WChar+0x1fc>
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <Displ_WChar+0x220>)
 800638c:	4a04      	ldr	r2, [pc, #16]	; (80063a0 <Displ_WChar+0x210>)
 800638e:	6013      	str	r3, [r2, #0]

}
 8006390:	bf00      	nop
 8006392:	3734      	adds	r7, #52	; 0x34
 8006394:	46bd      	mov	sp, r7
 8006396:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800639a:	b002      	add	sp, #8
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000038 	.word	0x20000038
 80063a4:	080152b8 	.word	0x080152b8
 80063a8:	0801118c 	.word	0x0801118c
 80063ac:	080111ac 	.word	0x080111ac
 80063b0:	200084e4 	.word	0x200084e4
 80063b4:	20008ce4 	.word	0x20008ce4

080063b8 <Displ_drawRoundRect>:




void Displ_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af02      	add	r7, sp, #8
 80063be:	4604      	mov	r4, r0
 80063c0:	4608      	mov	r0, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	4623      	mov	r3, r4
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	4603      	mov	r3, r0
 80063cc:	80bb      	strh	r3, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	807b      	strh	r3, [r7, #2]
 80063d2:	4613      	mov	r3, r2
 80063d4:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80063d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80063da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80063de:	4293      	cmp	r3, r2
 80063e0:	bfa8      	it	ge
 80063e2:	4613      	movge	r3, r2
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	0fda      	lsrs	r2, r3, #31
 80063e8:	4413      	add	r3, r2
 80063ea:	105b      	asrs	r3, r3, #1
 80063ec:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80063ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80063f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	dd01      	ble.n	80063fe <Displ_drawRoundRect+0x46>
 80063fa:	89fb      	ldrh	r3, [r7, #14]
 80063fc:	843b      	strh	r3, [r7, #32]
    Displ_Line(x+r, y, x+w-r-1, y, color);
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	8c3b      	ldrh	r3, [r7, #32]
 8006402:	4413      	add	r3, r2
 8006404:	b29b      	uxth	r3, r3
 8006406:	b218      	sxth	r0, r3
 8006408:	88fa      	ldrh	r2, [r7, #6]
 800640a:	887b      	ldrh	r3, [r7, #2]
 800640c:	4413      	add	r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	8c3b      	ldrh	r3, [r7, #32]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	b21a      	sxth	r2, r3
 800641c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006420:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4623      	mov	r3, r4
 800642a:	f7ff fba6 	bl	8005b7a <Displ_Line>
    Displ_Line(x+r, y+h-1, x-1+w-r, y+h-1, color);
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	8c3b      	ldrh	r3, [r7, #32]
 8006432:	4413      	add	r3, r2
 8006434:	b29b      	uxth	r3, r3
 8006436:	b218      	sxth	r0, r3
 8006438:	88ba      	ldrh	r2, [r7, #4]
 800643a:	883b      	ldrh	r3, [r7, #0]
 800643c:	4413      	add	r3, r2
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29b      	uxth	r3, r3
 8006444:	b219      	sxth	r1, r3
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	4413      	add	r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	8c3b      	ldrh	r3, [r7, #32]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	b21c      	sxth	r4, r3
 800645a:	88ba      	ldrh	r2, [r7, #4]
 800645c:	883b      	ldrh	r3, [r7, #0]
 800645e:	4413      	add	r3, r2
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	b21a      	sxth	r2, r3
 8006468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	4622      	mov	r2, r4
 8006470:	f7ff fb83 	bl	8005b7a <Displ_Line>
    Displ_Line(x, y+r, x, y-1+h-r, color); // Left
 8006474:	88ba      	ldrh	r2, [r7, #4]
 8006476:	8c3b      	ldrh	r3, [r7, #32]
 8006478:	4413      	add	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	b219      	sxth	r1, r3
 800647e:	88ba      	ldrh	r2, [r7, #4]
 8006480:	883b      	ldrh	r3, [r7, #0]
 8006482:	4413      	add	r3, r2
 8006484:	b29a      	uxth	r2, r3
 8006486:	8c3b      	ldrh	r3, [r7, #32]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29b      	uxth	r3, r3
 8006490:	b21c      	sxth	r4, r3
 8006492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006496:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800649a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4623      	mov	r3, r4
 80064a0:	f7ff fb6b 	bl	8005b7a <Displ_Line>
    Displ_Line(x+w-1, y+r, x+w-1, y-1+h-r, color); // Right
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	887b      	ldrh	r3, [r7, #2]
 80064a8:	4413      	add	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b218      	sxth	r0, r3
 80064b2:	88ba      	ldrh	r2, [r7, #4]
 80064b4:	8c3b      	ldrh	r3, [r7, #32]
 80064b6:	4413      	add	r3, r2
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	b219      	sxth	r1, r3
 80064bc:	88fa      	ldrh	r2, [r7, #6]
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	4413      	add	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b21c      	sxth	r4, r3
 80064ca:	88ba      	ldrh	r2, [r7, #4]
 80064cc:	883b      	ldrh	r3, [r7, #0]
 80064ce:	4413      	add	r3, r2
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	8c3b      	ldrh	r3, [r7, #32]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	b21a      	sxth	r2, r3
 80064de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	4622      	mov	r2, r4
 80064e6:	f7ff fb48 	bl	8005b7a <Displ_Line>
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	8c3b      	ldrh	r3, [r7, #32]
 80064ee:	4413      	add	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	b218      	sxth	r0, r3
 80064f4:	88ba      	ldrh	r2, [r7, #4]
 80064f6:	8c3b      	ldrh	r3, [r7, #32]
 80064f8:	4413      	add	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	b219      	sxth	r1, r3
 80064fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2301      	movs	r3, #1
 8006508:	f7ff f96a 	bl	80057e0 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	4413      	add	r3, r2
 8006512:	b29a      	uxth	r2, r3
 8006514:	8c3b      	ldrh	r3, [r7, #32]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	b218      	sxth	r0, r3
 8006520:	88ba      	ldrh	r2, [r7, #4]
 8006522:	8c3b      	ldrh	r3, [r7, #32]
 8006524:	4413      	add	r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	b219      	sxth	r1, r3
 800652a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800652e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2302      	movs	r3, #2
 8006534:	f7ff f954 	bl	80057e0 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	887b      	ldrh	r3, [r7, #2]
 800653c:	4413      	add	r3, r2
 800653e:	b29a      	uxth	r2, r3
 8006540:	8c3b      	ldrh	r3, [r7, #32]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	b218      	sxth	r0, r3
 800654c:	88ba      	ldrh	r2, [r7, #4]
 800654e:	883b      	ldrh	r3, [r7, #0]
 8006550:	4413      	add	r3, r2
 8006552:	b29a      	uxth	r2, r3
 8006554:	8c3b      	ldrh	r3, [r7, #32]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29b      	uxth	r3, r3
 800655e:	b219      	sxth	r1, r3
 8006560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2304      	movs	r3, #4
 800656a:	f7ff f939 	bl	80057e0 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	8c3b      	ldrh	r3, [r7, #32]
 8006572:	4413      	add	r3, r2
 8006574:	b29b      	uxth	r3, r3
 8006576:	b218      	sxth	r0, r3
 8006578:	88ba      	ldrh	r2, [r7, #4]
 800657a:	883b      	ldrh	r3, [r7, #0]
 800657c:	4413      	add	r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	8c3b      	ldrh	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	b219      	sxth	r1, r3
 800658c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8006590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2308      	movs	r3, #8
 8006596:	f7ff f923 	bl	80057e0 <drawCircleHelper>
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd90      	pop	{r4, r7, pc}

080065a2 <Displ_fillRoundRect>:




void Displ_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80065a2:	b590      	push	{r4, r7, lr}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af02      	add	r7, sp, #8
 80065a8:	4604      	mov	r4, r0
 80065aa:	4608      	mov	r0, r1
 80065ac:	4611      	mov	r1, r2
 80065ae:	461a      	mov	r2, r3
 80065b0:	4623      	mov	r3, r4
 80065b2:	80fb      	strh	r3, [r7, #6]
 80065b4:	4603      	mov	r3, r0
 80065b6:	80bb      	strh	r3, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
 80065bc:	4613      	mov	r3, r2
 80065be:	803b      	strh	r3, [r7, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80065c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80065c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bfa8      	it	ge
 80065cc:	4613      	movge	r3, r2
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	0fda      	lsrs	r2, r3, #31
 80065d2:	4413      	add	r3, r2
 80065d4:	105b      	asrs	r3, r3, #1
 80065d6:	81fb      	strh	r3, [r7, #14]
    if(r > max_radius) r = max_radius;
 80065d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80065dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	dd01      	ble.n	80065e8 <Displ_fillRoundRect+0x46>
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	843b      	strh	r3, [r7, #32]
    Displ_FillArea(x+r, y, w-2*r, h, color);
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	8c3b      	ldrh	r3, [r7, #32]
 80065ec:	4413      	add	r3, r2
 80065ee:	b298      	uxth	r0, r3
 80065f0:	88b9      	ldrh	r1, [r7, #4]
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	8c3b      	ldrh	r3, [r7, #32]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	883c      	ldrh	r4, [r7, #0]
 8006600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	4623      	mov	r3, r4
 8006606:	f7fe ff1b 	bl	8005440 <Displ_FillArea>
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	887b      	ldrh	r3, [r7, #2]
 800660e:	4413      	add	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	8c3b      	ldrh	r3, [r7, #32]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	b218      	sxth	r0, r3
 800661e:	88ba      	ldrh	r2, [r7, #4]
 8006620:	8c3b      	ldrh	r3, [r7, #32]
 8006622:	4413      	add	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	b219      	sxth	r1, r3
 8006628:	883a      	ldrh	r2, [r7, #0]
 800662a:	8c3b      	ldrh	r3, [r7, #32]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	b29b      	uxth	r3, r3
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	b21b      	sxth	r3, r3
 800663a:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800663e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006640:	9201      	str	r2, [sp, #4]
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2301      	movs	r3, #1
 8006646:	4622      	mov	r2, r4
 8006648:	f7ff f98e 	bl	8005968 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	8c3b      	ldrh	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	b29b      	uxth	r3, r3
 8006654:	b218      	sxth	r0, r3
 8006656:	88ba      	ldrh	r2, [r7, #4]
 8006658:	8c3b      	ldrh	r3, [r7, #32]
 800665a:	4413      	add	r3, r2
 800665c:	b29b      	uxth	r3, r3
 800665e:	b219      	sxth	r1, r3
 8006660:	883a      	ldrh	r2, [r7, #0]
 8006662:	8c3b      	ldrh	r3, [r7, #32]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	b21b      	sxth	r3, r3
 8006672:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8006676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006678:	9201      	str	r2, [sp, #4]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2302      	movs	r3, #2
 800667e:	4622      	mov	r2, r4
 8006680:	f7ff f972 	bl	8005968 <fillCircleHelper>
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	bd90      	pop	{r4, r7, pc}

0800668c <Displ_WString>:
 * 			font	to bu used
 * 			size	1 (normal), 2 (double width)
 * 			color	font color
 * 			bgcolor	background color
 ************************/
void Displ_WString(uint16_t x, uint16_t y, const char* str, sFONT font, uint8_t size, uint16_t color, uint16_t bgcolor) {
 800668c:	b082      	sub	sp, #8
 800668e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006690:	b08b      	sub	sp, #44	; 0x2c
 8006692:	af06      	add	r7, sp, #24
 8006694:	603a      	str	r2, [r7, #0]
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006698:	4603      	mov	r3, r0
 800669a:	80fb      	strh	r3, [r7, #6]
 800669c:	460b      	mov	r3, r1
 800669e:	80bb      	strh	r3, [r7, #4]
	uint16_t delta=font.Width;
 80066a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066a2:	81fb      	strh	r3, [r7, #14]
	if (size>1)
 80066a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d922      	bls.n	80066f2 <Displ_WString+0x66>
		delta<<=1;
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	81fb      	strh	r3, [r7, #14]

    while(*str) {
 80066b2:	e01e      	b.n	80066f2 <Displ_WString+0x66>
                str++;
                continue;
            }
        }
 */
        Displ_WChar(x, y, *str, font, size, color, bgcolor);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781a      	ldrb	r2, [r3, #0]
 80066b8:	88bd      	ldrh	r5, [r7, #4]
 80066ba:	88fc      	ldrh	r4, [r7, #6]
 80066bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	466e      	mov	r6, sp
 80066ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80066d6:	e886 0003 	stmia.w	r6, {r0, r1}
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	4629      	mov	r1, r5
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff fd56 	bl	8006190 <Displ_WChar>
        x += delta;
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	89fb      	ldrh	r3, [r7, #14]
 80066e8:	4413      	add	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
        str++;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	3301      	adds	r3, #1
 80066f0:	603b      	str	r3, [r7, #0]
    while(*str) {
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1dc      	bne.n	80066b4 <Displ_WString+0x28>
    }
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006706:	b002      	add	sp, #8
 8006708:	4770      	bx	lr
	...

0800670c <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t  Displ_BackLight(uint8_t cmd) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b51      	cmp	r3, #81	; 0x51
 800671a:	d00a      	beq.n	8006732 <Displ_BackLight+0x26>
 800671c:	2b51      	cmp	r3, #81	; 0x51
 800671e:	dc16      	bgt.n	800674e <Displ_BackLight+0x42>
 8006720:	2b46      	cmp	r3, #70	; 0x46
 8006722:	d008      	beq.n	8006736 <Displ_BackLight+0x2a>
 8006724:	2b46      	cmp	r3, #70	; 0x46
 8006726:	dc12      	bgt.n	800674e <Displ_BackLight+0x42>
 8006728:	2b30      	cmp	r3, #48	; 0x30
 800672a:	d00a      	beq.n	8006742 <Displ_BackLight+0x36>
 800672c:	2b31      	cmp	r3, #49	; 0x31
 800672e:	d002      	beq.n	8006736 <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8006730:	e00d      	b.n	800674e <Displ_BackLight+0x42>
		__NOP();
 8006732:	bf00      	nop
		break;
 8006734:	e00c      	b.n	8006750 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_SET);
 8006736:	2201      	movs	r2, #1
 8006738:	2140      	movs	r1, #64	; 0x40
 800673a:	480a      	ldr	r0, [pc, #40]	; (8006764 <Displ_BackLight+0x58>)
 800673c:	f002 f860 	bl	8008800 <HAL_GPIO_WritePin>
		break;
 8006740:	e006      	b.n	8006750 <Displ_BackLight+0x44>
		HAL_GPIO_WritePin(DISPL_LED_GPIO_Port, DISPL_LED_Pin, GPIO_PIN_RESET);
 8006742:	2200      	movs	r2, #0
 8006744:	2140      	movs	r1, #64	; 0x40
 8006746:	4807      	ldr	r0, [pc, #28]	; (8006764 <Displ_BackLight+0x58>)
 8006748:	f002 f85a 	bl	8008800 <HAL_GPIO_WritePin>
		break;
 800674c:	e000      	b.n	8006750 <Displ_BackLight+0x44>
		break;
 800674e:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	return HAL_GPIO_ReadPin(DISPL_LED_GPIO_Port, DISPL_LED_Pin);
 8006750:	2140      	movs	r1, #64	; 0x40
 8006752:	4804      	ldr	r0, [pc, #16]	; (8006764 <Displ_BackLight+0x58>)
 8006754:	f002 f83c 	bl	80087d0 <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40020000 	.word	0x40020000

08006768 <testLines>:




void testLines(uint16_t color)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b08b      	sub	sp, #44	; 0x2c
 800676c:	af02      	add	r7, sp, #8
 800676e:	4603      	mov	r3, r0
 8006770:	80fb      	strh	r3, [r7, #6]
    int           x1, y1, x2, y2,
                  w = _width,
 8006772:	4b7c      	ldr	r3, [pc, #496]	; (8006964 <testLines+0x1fc>)
 8006774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006778:	617b      	str	r3, [r7, #20]
                  h = _height;
 800677a:	4b7b      	ldr	r3, [pc, #492]	; (8006968 <testLines+0x200>)
 800677c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006780:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006782:	2000      	movs	r0, #0
 8006784:	f7ff f810 	bl	80057a8 <Displ_CLS>

    x1 = y1 = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	60bb      	str	r3, [r7, #8]
    y2    = h - 1;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	3b01      	subs	r3, #1
 8006794:	61bb      	str	r3, [r7, #24]
//    for (x2 = 0; x2 < w; x2 += 6) drawLine(x1, y1, x2, y2, color);
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	e00f      	b.n	80067bc <testLines+0x54>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	b218      	sxth	r0, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	b219      	sxth	r1, r3
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	b21c      	sxth	r4, r3
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4623      	mov	r3, r4
 80067b2:	f7ff f9e2 	bl	8005b7a <Displ_Line>
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3306      	adds	r3, #6
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	dbeb      	blt.n	800679c <testLines+0x34>
    x2    = w - 1;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
 80067ce:	e00f      	b.n	80067f0 <testLines+0x88>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	b218      	sxth	r0, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	b219      	sxth	r1, r3
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	b21a      	sxth	r2, r3
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	b21c      	sxth	r4, r3
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4623      	mov	r3, r4
 80067e6:	f7ff f9c8 	bl	8005b7a <Displ_Line>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	3306      	adds	r3, #6
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	dbeb      	blt.n	80067d0 <testLines+0x68>

    Displ_CLS(BLACK);
 80067f8:	2000      	movs	r0, #0
 80067fa:	f7fe ffd5 	bl	80057a8 <Displ_CLS>

    x1    = w - 1;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	3b01      	subs	r3, #1
 8006802:	60bb      	str	r3, [r7, #8]
    y1    = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
    y2    = h - 1;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	e00f      	b.n	8006834 <testLines+0xcc>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	b218      	sxth	r0, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	b219      	sxth	r1, r3
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	b21a      	sxth	r2, r3
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	b21c      	sxth	r4, r3
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4623      	mov	r3, r4
 800682a:	f7ff f9a6 	bl	8005b7a <Displ_Line>
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3306      	adds	r3, #6
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	429a      	cmp	r2, r3
 800683a:	dbeb      	blt.n	8006814 <testLines+0xac>
    x2    = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e00f      	b.n	8006866 <testLines+0xfe>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	b218      	sxth	r0, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	b219      	sxth	r1, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	b21a      	sxth	r2, r3
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	b21c      	sxth	r4, r3
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	4623      	mov	r3, r4
 800685c:	f7ff f98d 	bl	8005b7a <Displ_Line>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	3306      	adds	r3, #6
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	dbeb      	blt.n	8006846 <testLines+0xde>

    Displ_CLS(BLACK);
 800686e:	2000      	movs	r0, #0
 8006870:	f7fe ff9a 	bl	80057a8 <Displ_CLS>

    x1    = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3b01      	subs	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e00f      	b.n	80068a8 <testLines+0x140>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	b218      	sxth	r0, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	b219      	sxth	r1, r3
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	b21a      	sxth	r2, r3
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	b21c      	sxth	r4, r3
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4623      	mov	r3, r4
 800689e:	f7ff f96c 	bl	8005b7a <Displ_Line>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3306      	adds	r3, #6
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	dbeb      	blt.n	8006888 <testLines+0x120>
    x2    = w - 1;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80068b6:	2300      	movs	r3, #0
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e00f      	b.n	80068dc <testLines+0x174>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	b218      	sxth	r0, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	b219      	sxth	r1, r3
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	b21a      	sxth	r2, r3
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	b21c      	sxth	r4, r3
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	4623      	mov	r3, r4
 80068d2:	f7ff f952 	bl	8005b7a <Displ_Line>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	3306      	adds	r3, #6
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	dbeb      	blt.n	80068bc <testLines+0x154>

    Displ_CLS(BLACK);
 80068e4:	2000      	movs	r0, #0
 80068e6:	f7fe ff5f 	bl	80057a8 <Displ_CLS>

    x1    = w - 1;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	60bb      	str	r3, [r7, #8]
    y1    = h - 1;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
    y2    = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
    for (x2 = 0; x2 < w; x2 += 6) Displ_Line(x1, y1, x2, y2, color);
 80068fa:	2300      	movs	r3, #0
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e00f      	b.n	8006920 <testLines+0x1b8>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	b218      	sxth	r0, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	b219      	sxth	r1, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	b21a      	sxth	r2, r3
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	b21c      	sxth	r4, r3
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	4623      	mov	r3, r4
 8006916:	f7ff f930 	bl	8005b7a <Displ_Line>
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	3306      	adds	r3, #6
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	429a      	cmp	r2, r3
 8006926:	dbeb      	blt.n	8006900 <testLines+0x198>
    x2    = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	61fb      	str	r3, [r7, #28]
    for (y2 = 0; y2 < h; y2 += 6) Displ_Line(x1, y1, x2, y2, color);
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	e00f      	b.n	8006952 <testLines+0x1ea>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	b218      	sxth	r0, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	b219      	sxth	r1, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	b21a      	sxth	r2, r3
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	b21c      	sxth	r4, r3
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4623      	mov	r3, r4
 8006948:	f7ff f917 	bl	8005b7a <Displ_Line>
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	3306      	adds	r3, #6
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	dbeb      	blt.n	8006932 <testLines+0x1ca>

}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	3724      	adds	r7, #36	; 0x24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd90      	pop	{r4, r7, pc}
 8006964:	200084de 	.word	0x200084de
 8006968:	200084e0 	.word	0x200084e0

0800696c <testFastLines>:




void testFastLines(uint16_t color1, uint16_t color2)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	4603      	mov	r3, r0
 8006974:	460a      	mov	r2, r1
 8006976:	80fb      	strh	r3, [r7, #6]
 8006978:	4613      	mov	r3, r2
 800697a:	80bb      	strh	r3, [r7, #4]
    int           x, y, w = _width, h = _height;
 800697c:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <testFastLines+0x94>)
 800697e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	4b1f      	ldr	r3, [pc, #124]	; (8006a04 <testFastLines+0x98>)
 8006986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800698a:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 800698c:	2000      	movs	r0, #0
 800698e:	f7fe ff0b 	bl	80057a8 <Displ_CLS>
    for (y = 0; y < h; y += 5) Displ_Line(0, y, w-1, y, color1);
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	e011      	b.n	80069bc <testFastLines+0x50>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	b219      	sxth	r1, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	b21a      	sxth	r2, r3
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	b218      	sxth	r0, r3
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	4603      	mov	r3, r0
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7ff f8e2 	bl	8005b7a <Displ_Line>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3305      	adds	r3, #5
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	dbe9      	blt.n	8006998 <testFastLines+0x2c>
    for (x = 0; x < w; x += 5) Displ_Line(x, 0, x, h-1, color2);
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e011      	b.n	80069ee <testFastLines+0x82>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	b218      	sxth	r0, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	b21a      	sxth	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	b219      	sxth	r1, r3
 80069dc:	88bb      	ldrh	r3, [r7, #4]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	460b      	mov	r3, r1
 80069e2:	2100      	movs	r1, #0
 80069e4:	f7ff f8c9 	bl	8005b7a <Displ_Line>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3305      	adds	r3, #5
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	dbe9      	blt.n	80069ca <testFastLines+0x5e>
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	200084de 	.word	0x200084de
 8006a04:	200084e0 	.word	0x200084e0

08006a08 <testRects>:




void testRects(uint16_t color)
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b08b      	sub	sp, #44	; 0x2c
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	4603      	mov	r3, r0
 8006a10:	80fb      	strh	r3, [r7, #6]
	int           n, i, i2,
	cx = _width  / 2,
 8006a12:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <testRects+0xa0>)
 8006a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a18:	0fda      	lsrs	r2, r3, #31
 8006a1a:	4413      	add	r3, r2
 8006a1c:	105b      	asrs	r3, r3, #1
 8006a1e:	b21b      	sxth	r3, r3
 8006a20:	61bb      	str	r3, [r7, #24]
	cy = _height / 2;
 8006a22:	4b22      	ldr	r3, [pc, #136]	; (8006aac <testRects+0xa4>)
 8006a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a28:	0fda      	lsrs	r2, r3, #31
 8006a2a:	4413      	add	r3, r2
 8006a2c:	105b      	asrs	r3, r3, #1
 8006a2e:	b21b      	sxth	r3, r3
 8006a30:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006a32:	2000      	movs	r0, #0
 8006a34:	f7fe feb8 	bl	80057a8 <Displ_CLS>
	n     = min(_width, _height);
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <testRects+0xa4>)
 8006a3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	; (8006aa8 <testRects+0xa0>)
 8006a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bfa8      	it	ge
 8006a48:	4613      	movge	r3, r2
 8006a4a:	b21b      	sxth	r3, r3
 8006a4c:	613b      	str	r3, [r7, #16]
	for (i = 2; i < n; i += 6) {
 8006a4e:	2302      	movs	r3, #2
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	e020      	b.n	8006a96 <testRects+0x8e>
		i2 = i / 2;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	0fda      	lsrs	r2, r3, #31
 8006a58:	4413      	add	r3, r2
 8006a5a:	105b      	asrs	r3, r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
		Displ_Border(cx - i2, cy - i2, i, i, 1, color);
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	b218      	sxth	r0, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	b219      	sxth	r1, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	b21a      	sxth	r2, r3
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	b21c      	sxth	r4, r3
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	2301      	movs	r3, #1
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	f7ff f9a6 	bl	8005ddc <Displ_Border>
	for (i = 2; i < n; i += 6) {
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	3306      	adds	r3, #6
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	dbda      	blt.n	8006a54 <testRects+0x4c>
	}
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd90      	pop	{r4, r7, pc}
 8006aa8:	200084de 	.word	0x200084de
 8006aac:	200084e0 	.word	0x200084e0

08006ab0 <testFilledRects>:




void testFilledRects(uint16_t color1, uint16_t color2)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b08b      	sub	sp, #44	; 0x2c
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	460a      	mov	r2, r1
 8006aba:	80fb      	strh	r3, [r7, #6]
 8006abc:	4613      	mov	r3, r2
 8006abe:	80bb      	strh	r3, [r7, #4]
	int           n, i, i2,
	cx = _width  / 2 - 1,
 8006ac0:	4b30      	ldr	r3, [pc, #192]	; (8006b84 <testFilledRects+0xd4>)
 8006ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ac6:	0fda      	lsrs	r2, r3, #31
 8006ac8:	4413      	add	r3, r2
 8006aca:	105b      	asrs	r3, r3, #1
 8006acc:	b21b      	sxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]
	cy = _height / 2 - 1;
 8006ad2:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <testFilledRects+0xd8>)
 8006ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ad8:	0fda      	lsrs	r2, r3, #31
 8006ada:	4413      	add	r3, r2
 8006adc:	105b      	asrs	r3, r3, #1
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]

	Displ_CLS(BLACK);
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f7fe fe5f 	bl	80057a8 <Displ_CLS>
	n = min(_width, _height);
 8006aea:	4b27      	ldr	r3, [pc, #156]	; (8006b88 <testFilledRects+0xd8>)
 8006aec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006af0:	4b24      	ldr	r3, [pc, #144]	; (8006b84 <testFilledRects+0xd4>)
 8006af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af6:	4293      	cmp	r3, r2
 8006af8:	bfa8      	it	ge
 8006afa:	4613      	movge	r3, r2
 8006afc:	b21b      	sxth	r3, r3
 8006afe:	613b      	str	r3, [r7, #16]
	for (i = n; i > 0; i -= 6) {
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	e035      	b.n	8006b72 <testFilledRects+0xc2>
		i2    = i / 2;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	0fda      	lsrs	r2, r3, #31
 8006b0a:	4413      	add	r3, r2
 8006b0c:	105b      	asrs	r3, r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
		Displ_FillArea(cx - i2, cy - i2, i, i, color1);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	b298      	uxth	r0, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	b299      	uxth	r1, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	b29c      	uxth	r4, r3
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	4623      	mov	r3, r4
 8006b36:	f7fe fc83 	bl	8005440 <Displ_FillArea>
		Displ_Border(cx - i2, cy - i2, i, i, 1, color2);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	b218      	sxth	r0, r3
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	b219      	sxth	r1, r3
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	b21a      	sxth	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	b21c      	sxth	r4, r3
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	2301      	movs	r3, #1
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4623      	mov	r3, r4
 8006b68:	f7ff f938 	bl	8005ddc <Displ_Border>
	for (i = n; i > 0; i -= 6) {
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3b06      	subs	r3, #6
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dcc6      	bgt.n	8006b06 <testFilledRects+0x56>
	}
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	3724      	adds	r7, #36	; 0x24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd90      	pop	{r4, r7, pc}
 8006b82:	bf00      	nop
 8006b84:	200084de 	.word	0x200084de
 8006b88:	200084e0 	.word	0x200084e0

08006b8c <testFilledCircles>:




void testFilledCircles(uint8_t radius, uint16_t color)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	460a      	mov	r2, r1
 8006b96:	71fb      	strb	r3, [r7, #7]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80bb      	strh	r3, [r7, #4]
    int x, y, w = _width, h = _height, r2 = radius * 2;
 8006b9c:	4b18      	ldr	r3, [pc, #96]	; (8006c00 <testFilledCircles+0x74>)
 8006b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <testFilledCircles+0x78>)
 8006ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
    Displ_CLS(BLACK);
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f7fe fdf8 	bl	80057a8 <Displ_CLS>
    for (x = radius; x < w; x += r2) {
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	e017      	b.n	8006bee <testFilledCircles+0x62>
        for (y = radius; y < h; y += r2) {
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	e00c      	b.n	8006bde <testFilledCircles+0x52>
        	Displ_fillCircle(x, y, radius, color);
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	b218      	sxth	r0, r3
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	b219      	sxth	r1, r3
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	b21a      	sxth	r2, r3
 8006bd0:	88bb      	ldrh	r3, [r7, #4]
 8006bd2:	f7fe ff9f 	bl	8005b14 <Displ_fillCircle>
        for (y = radius; y < h; y += r2) {
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	dbee      	blt.n	8006bc4 <testFilledCircles+0x38>
    for (x = radius; x < w; x += r2) {
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	dbe3      	blt.n	8006bbe <testFilledCircles+0x32>
        }
    }
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	200084de 	.word	0x200084de
 8006c04:	200084e0 	.word	0x200084e0

08006c08 <testCircles>:




void testCircles(uint8_t radius, uint16_t color)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	460a      	mov	r2, r1
 8006c12:	71fb      	strb	r3, [r7, #7]
 8006c14:	4613      	mov	r3, r2
 8006c16:	80bb      	strh	r3, [r7, #4]
    int           x, y, r2 = radius * 2,
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
                        w = _width  + radius,
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <testCircles+0x7c>)
 8006c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c24:	461a      	mov	r2, r3
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	4413      	add	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
                        h = _height + radius;
 8006c2c:	4b16      	ldr	r3, [pc, #88]	; (8006c88 <testCircles+0x80>)
 8006c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c32:	461a      	mov	r2, r3
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	4413      	add	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
    // Screen is not cleared for this one -- this is
    // intentional and does not affect the reported time.
    for (x = 0; x < w; x += r2) {
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	e017      	b.n	8006c70 <testCircles+0x68>
        for (y = 0; y < h; y += r2) {
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e00c      	b.n	8006c60 <testCircles+0x58>
            Displ_drawCircle(x, y, radius, color);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	b218      	sxth	r0, r3
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	b219      	sxth	r1, r3
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	b21a      	sxth	r2, r3
 8006c52:	88bb      	ldrh	r3, [r7, #4]
 8006c54:	f7fe fcd4 	bl	8005600 <Displ_drawCircle>
        for (y = 0; y < h; y += r2) {
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	dbee      	blt.n	8006c46 <testCircles+0x3e>
    for (x = 0; x < w; x += r2) {
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	dbe3      	blt.n	8006c40 <testCircles+0x38>
        }
    }
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200084de 	.word	0x200084de
 8006c88:	200084e0 	.word	0x200084e0

08006c8c <testTriangles>:




void testTriangles()
{
 8006c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8e:	b089      	sub	sp, #36	; 0x24
 8006c90:	af04      	add	r7, sp, #16
    int           n, i, cx = _width  / 2 - 1,
 8006c92:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <testTriangles+0xc0>)
 8006c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c98:	0fda      	lsrs	r2, r3, #31
 8006c9a:	4413      	add	r3, r2
 8006c9c:	105b      	asrs	r3, r3, #1
 8006c9e:	b21b      	sxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	60bb      	str	r3, [r7, #8]
                        cy = _height / 2 - 1;
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <testTriangles+0xc4>)
 8006ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006caa:	0fda      	lsrs	r2, r3, #31
 8006cac:	4413      	add	r3, r2
 8006cae:	105b      	asrs	r3, r3, #1
 8006cb0:	b21b      	sxth	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f7fe fd76 	bl	80057a8 <Displ_CLS>
    n     = min(cx, cy);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	bfa8      	it	ge
 8006cc4:	4613      	movge	r3, r2
 8006cc6:	603b      	str	r3, [r7, #0]
    for (i = 0; i < n; i += 5) {
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e035      	b.n	8006d3a <testTriangles+0xae>
    	Displ_drawTriangle(
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	b218      	sxth	r0, r3
            cx    , cy - i, // peak
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006cde:	b21c      	sxth	r4, r3
            cx - i, cy + i, // bottom left
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006cec:	b21d      	sxth	r5, r3
            cx - i, cy + i, // bottom left
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006cfa:	b21e      	sxth	r6, r3
            cx + i, cy + i, // bottom right
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	b29b      	uxth	r3, r3
    	Displ_drawTriangle(
 8006d08:	b21b      	sxth	r3, r3
            cx + i, cy + i, // bottom right
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	b291      	uxth	r1, r2
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	b292      	uxth	r2, r2
 8006d12:	440a      	add	r2, r1
 8006d14:	b292      	uxth	r2, r2
    	Displ_drawTriangle(
 8006d16:	b212      	sxth	r2, r2
            color565(0, 0, i));
 8006d18:	68f9      	ldr	r1, [r7, #12]
 8006d1a:	10c9      	asrs	r1, r1, #3
 8006d1c:	b289      	uxth	r1, r1
    	Displ_drawTriangle(
 8006d1e:	f001 011f 	and.w	r1, r1, #31
 8006d22:	b289      	uxth	r1, r1
 8006d24:	9102      	str	r1, [sp, #8]
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f7ff f897 	bl	8005e62 <Displ_drawTriangle>
    for (i = 0; i < n; i += 5) {
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3305      	adds	r3, #5
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	dbc5      	blt.n	8006cce <testTriangles+0x42>
    }
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4c:	200084de 	.word	0x200084de
 8006d50:	200084e0 	.word	0x200084e0

08006d54 <testFilledTriangles>:





void testFilledTriangles() {
 8006d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af04      	add	r7, sp, #16
    int           i, cx = _width  / 2 - 1,
 8006d5a:	4b53      	ldr	r3, [pc, #332]	; (8006ea8 <testFilledTriangles+0x154>)
 8006d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d60:	0fda      	lsrs	r2, r3, #31
 8006d62:	4413      	add	r3, r2
 8006d64:	105b      	asrs	r3, r3, #1
 8006d66:	b21b      	sxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	60bb      	str	r3, [r7, #8]
                     cy = _height / 2 - 1;
 8006d6c:	4b4f      	ldr	r3, [pc, #316]	; (8006eac <testFilledTriangles+0x158>)
 8006d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d72:	0fda      	lsrs	r2, r3, #31
 8006d74:	4413      	add	r3, r2
 8006d76:	105b      	asrs	r3, r3, #1
 8006d78:	b21b      	sxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	607b      	str	r3, [r7, #4]

    Displ_CLS(BLACK);
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7fe fd12 	bl	80057a8 <Displ_CLS>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	bfa8      	it	ge
 8006d8c:	4613      	movge	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	e080      	b.n	8006e94 <testFilledTriangles+0x140>
    	Displ_fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	b21c      	sxth	r4, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	b21d      	sxth	r5, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	b21e      	sxth	r6, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	fa0f fc83 	sxth.w	ip, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	b291      	uxth	r1, r2
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	b292      	uxth	r2, r2
 8006dd8:	440a      	add	r2, r1
 8006dda:	b292      	uxth	r2, r2
 8006ddc:	b212      	sxth	r2, r2
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	00c9      	lsls	r1, r1, #3
 8006de2:	b209      	sxth	r1, r1
 8006de4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8006de8:	b208      	sxth	r0, r1
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	10c9      	asrs	r1, r1, #3
 8006dee:	b209      	sxth	r1, r1
 8006df0:	f001 011f 	and.w	r1, r1, #31
 8006df4:	b209      	sxth	r1, r1
 8006df6:	4301      	orrs	r1, r0
 8006df8:	b209      	sxth	r1, r1
 8006dfa:	b289      	uxth	r1, r1
 8006dfc:	9102      	str	r1, [sp, #8]
 8006dfe:	9201      	str	r2, [sp, #4]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4663      	mov	r3, ip
 8006e04:	4632      	mov	r2, r6
 8006e06:	4629      	mov	r1, r5
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7ff f864 	bl	8005ed6 <Displ_fillTriangle>
    	Displ_drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	b21c      	sxth	r4, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	b21d      	sxth	r5, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	b21e      	sxth	r6, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	fa0f fc83 	sxth.w	ip, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4413      	add	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b21a      	sxth	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	b299      	uxth	r1, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	440b      	add	r3, r1
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	b219      	sxth	r1, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	b21b      	sxth	r3, r3
 8006e60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e64:	f023 0307 	bic.w	r3, r3, #7
 8006e68:	b218      	sxth	r0, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	b21b      	sxth	r3, r3
 8006e70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	4303      	orrs	r3, r0
 8006e78:	b21b      	sxth	r3, r3
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	9101      	str	r1, [sp, #4]
 8006e80:	9200      	str	r2, [sp, #0]
 8006e82:	4663      	mov	r3, ip
 8006e84:	4632      	mov	r2, r6
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7fe ffea 	bl	8005e62 <Displ_drawTriangle>
    for (i = min(cx, cy); i > 10; i -= 5) {
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3b05      	subs	r3, #5
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b0a      	cmp	r3, #10
 8006e98:	f73f af7b 	bgt.w	8006d92 <testFilledTriangles+0x3e>
    }
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200084de 	.word	0x200084de
 8006eac:	200084e0 	.word	0x200084e0

08006eb0 <testRoundRects>:





void testRoundRects() {
 8006eb0:	b5b0      	push	{r4, r5, r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
    int           w, i, i2, red, step,
                  cx = _width  / 2 - 1,
 8006eb6:	4b33      	ldr	r3, [pc, #204]	; (8006f84 <testRoundRects+0xd4>)
 8006eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ebc:	0fda      	lsrs	r2, r3, #31
 8006ebe:	4413      	add	r3, r2
 8006ec0:	105b      	asrs	r3, r3, #1
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
                  cy = _height / 2 - 1;
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <testRoundRects+0xd8>)
 8006eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ece:	0fda      	lsrs	r2, r3, #31
 8006ed0:	4413      	add	r3, r2
 8006ed2:	105b      	asrs	r3, r3, #1
 8006ed4:	b21b      	sxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]

    Displ_CLS(BLACK);
 8006eda:	2000      	movs	r0, #0
 8006edc:	f7fe fc64 	bl	80057a8 <Displ_CLS>
    w     = min(_width, _height);
 8006ee0:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <testRoundRects+0xd8>)
 8006ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006ee6:	4b27      	ldr	r3, [pc, #156]	; (8006f84 <testRoundRects+0xd4>)
 8006ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	bfa8      	it	ge
 8006ef0:	4613      	movge	r3, r2
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
    red = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61bb      	str	r3, [r7, #24]
    step = (256 * 6) / w;
 8006efa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8006f04:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < w; i += 6) {
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	e031      	b.n	8006f70 <testRoundRects+0xc0>
        i2 = i / 2;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	0fda      	lsrs	r2, r3, #31
 8006f10:	4413      	add	r3, r2
 8006f12:	105b      	asrs	r3, r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
        red += step;
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        Displ_drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	b218      	sxth	r0, r3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	b219      	sxth	r1, r3
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	b21c      	sxth	r4, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	b21d      	sxth	r5, r3
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da00      	bge.n	8006f4a <testRoundRects+0x9a>
 8006f48:	3307      	adds	r3, #7
 8006f4a:	10db      	asrs	r3, r3, #3
 8006f4c:	b21a      	sxth	r2, r3
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	9200      	str	r2, [sp, #0]
 8006f62:	462b      	mov	r3, r5
 8006f64:	4622      	mov	r2, r4
 8006f66:	f7ff fa27 	bl	80063b8 <Displ_drawRoundRect>
    for (i = 0; i < w; i += 6) {
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3306      	adds	r3, #6
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	dbc9      	blt.n	8006f0c <testRoundRects+0x5c>
    }
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bdb0      	pop	{r4, r5, r7, pc}
 8006f82:	bf00      	nop
 8006f84:	200084de 	.word	0x200084de
 8006f88:	200084e0 	.word	0x200084e0

08006f8c <testFilledRoundRects>:





void testFilledRoundRects() {
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af02      	add	r7, sp, #8
    int           i, i2, green, step,
                  cx = _width  / 2 - 1,
 8006f92:	4b36      	ldr	r3, [pc, #216]	; (800706c <testFilledRoundRects+0xe0>)
 8006f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f98:	0fda      	lsrs	r2, r3, #31
 8006f9a:	4413      	add	r3, r2
 8006f9c:	105b      	asrs	r3, r3, #1
 8006f9e:	b21b      	sxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
                  cy = _height / 2 - 1;
 8006fa4:	4b32      	ldr	r3, [pc, #200]	; (8007070 <testFilledRoundRects+0xe4>)
 8006fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006faa:	0fda      	lsrs	r2, r3, #31
 8006fac:	4413      	add	r3, r2
 8006fae:	105b      	asrs	r3, r3, #1
 8006fb0:	b21b      	sxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	60bb      	str	r3, [r7, #8]

    Displ_CLS(BLACK);
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f7fe fbf6 	bl	80057a8 <Displ_CLS>
    green = 256;
 8006fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fc0:	613b      	str	r3, [r7, #16]
    step = (256 * 6) / min(_width, _height);
 8006fc2:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <testFilledRoundRects+0xe4>)
 8006fc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006fc8:	4b28      	ldr	r3, [pc, #160]	; (800706c <testFilledRoundRects+0xe0>)
 8006fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfa8      	it	ge
 8006fd2:	4613      	movge	r3, r2
 8006fd4:	b21b      	sxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fe0:	607b      	str	r3, [r7, #4]
    for (i = min(_width, _height); i > 20; i -= 6) {
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <testFilledRoundRects+0xe4>)
 8006fe4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <testFilledRoundRects+0xe0>)
 8006fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bfa8      	it	ge
 8006ff2:	4613      	movge	r3, r2
 8006ff4:	b21b      	sxth	r3, r3
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e02f      	b.n	800705a <testFilledRoundRects+0xce>
        i2 = i / 2;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	0fda      	lsrs	r2, r3, #31
 8006ffe:	4413      	add	r3, r2
 8007000:	105b      	asrs	r3, r3, #1
 8007002:	603b      	str	r3, [r7, #0]
        green -= step;
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	613b      	str	r3, [r7, #16]
        Displ_fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	b29a      	uxth	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	b29b      	uxth	r3, r3
 8007018:	b218      	sxth	r0, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	b29a      	uxth	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	b29b      	uxth	r3, r3
 8007026:	b219      	sxth	r1, r3
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	b21c      	sxth	r4, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	b21d      	sxth	r5, r3
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	da00      	bge.n	8007038 <testFilledRoundRects+0xac>
 8007036:	3307      	adds	r3, #7
 8007038:	10db      	asrs	r3, r3, #3
 800703a:	b21b      	sxth	r3, r3
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	b292      	uxth	r2, r2
 8007042:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8007046:	b292      	uxth	r2, r2
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	462b      	mov	r3, r5
 800704e:	4622      	mov	r2, r4
 8007050:	f7ff faa7 	bl	80065a2 <Displ_fillRoundRect>
    for (i = min(_width, _height); i > 20; i -= 6) {
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3b06      	subs	r3, #6
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b14      	cmp	r3, #20
 800705e:	dccc      	bgt.n	8006ffa <testFilledRoundRects+0x6e>
    }
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bdb0      	pop	{r4, r5, r7, pc}
 800706a:	bf00      	nop
 800706c:	200084de 	.word	0x200084de
 8007070:	200084e0 	.word	0x200084e0

08007074 <testFillScreen>:




void testFillScreen()
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
	Displ_CLS(RED);
 8007078:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800707c:	f7fe fb94 	bl	80057a8 <Displ_CLS>
	Displ_CLS(GREEN);
 8007080:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8007084:	f7fe fb90 	bl	80057a8 <Displ_CLS>
	Displ_CLS(BLUE);
 8007088:	201f      	movs	r0, #31
 800708a:	f7fe fb8d 	bl	80057a8 <Displ_CLS>
	Displ_CLS(YELLOW);
 800708e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8007092:	f7fe fb89 	bl	80057a8 <Displ_CLS>
	Displ_CLS(BLACK);
 8007096:	2000      	movs	r0, #0
 8007098:	f7fe fb86 	bl	80057a8 <Displ_CLS>
}
 800709c:	bf00      	nop
 800709e:	bd80      	pop	{r7, pc}

080070a0 <Displ_TestAll>:





void Displ_TestAll (){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
	testFillScreen();
 80070a4:	f7ff ffe6 	bl	8007074 <testFillScreen>
	testLines(CYAN);
 80070a8:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80070ac:	f7ff fb5c 	bl	8006768 <testLines>
	testFastLines(RED, BLUE);
 80070b0:	211f      	movs	r1, #31
 80070b2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80070b6:	f7ff fc59 	bl	800696c <testFastLines>
	testRects(GREEN);
 80070ba:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80070be:	f7ff fca3 	bl	8006a08 <testRects>
	testFilledRects(YELLOW, MAGENTA);
 80070c2:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80070c6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80070ca:	f7ff fcf1 	bl	8006ab0 <testFilledRects>
	testFilledCircles(10, MAGENTA);
 80070ce:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80070d2:	200a      	movs	r0, #10
 80070d4:	f7ff fd5a 	bl	8006b8c <testFilledCircles>
	testCircles(10, WHITE);
 80070d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070dc:	200a      	movs	r0, #10
 80070de:	f7ff fd93 	bl	8006c08 <testCircles>
	testTriangles();
 80070e2:	f7ff fdd3 	bl	8006c8c <testTriangles>
	testFilledTriangles();
 80070e6:	f7ff fe35 	bl	8006d54 <testFilledTriangles>
	testRoundRects();
 80070ea:	f7ff fee1 	bl	8006eb0 <testRoundRects>
	testFilledRoundRects();
 80070ee:	f7ff ff4d 	bl	8006f8c <testFilledRoundRects>
}
 80070f2:	bf00      	nop
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <Reset_Handler>:
 80070f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007130 <LoopFillZerobss+0x12>
 80070fc:	480d      	ldr	r0, [pc, #52]	; (8007134 <LoopFillZerobss+0x16>)
 80070fe:	490e      	ldr	r1, [pc, #56]	; (8007138 <LoopFillZerobss+0x1a>)
 8007100:	4a0e      	ldr	r2, [pc, #56]	; (800713c <LoopFillZerobss+0x1e>)
 8007102:	2300      	movs	r3, #0
 8007104:	e002      	b.n	800710c <LoopCopyDataInit>

08007106 <CopyDataInit>:
 8007106:	58d4      	ldr	r4, [r2, r3]
 8007108:	50c4      	str	r4, [r0, r3]
 800710a:	3304      	adds	r3, #4

0800710c <LoopCopyDataInit>:
 800710c:	18c4      	adds	r4, r0, r3
 800710e:	428c      	cmp	r4, r1
 8007110:	d3f9      	bcc.n	8007106 <CopyDataInit>
 8007112:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <LoopFillZerobss+0x22>)
 8007114:	4c0b      	ldr	r4, [pc, #44]	; (8007144 <LoopFillZerobss+0x26>)
 8007116:	2300      	movs	r3, #0
 8007118:	e001      	b.n	800711e <LoopFillZerobss>

0800711a <FillZerobss>:
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	3204      	adds	r2, #4

0800711e <LoopFillZerobss>:
 800711e:	42a2      	cmp	r2, r4
 8007120:	d3fb      	bcc.n	800711a <FillZerobss>
 8007122:	f7fd fdc1 	bl	8004ca8 <SystemInit>
 8007126:	f006 fc95 	bl	800da54 <__libc_init_array>
 800712a:	f7fc fa7d 	bl	8003628 <main>
 800712e:	4770      	bx	lr
 8007130:	20020000 	.word	0x20020000
 8007134:	20000000 	.word	0x20000000
 8007138:	20000220 	.word	0x20000220
 800713c:	08015668 	.word	0x08015668
 8007140:	20000220 	.word	0x20000220
 8007144:	2000963c 	.word	0x2000963c

08007148 <ADC_IRQHandler>:
 8007148:	e7fe      	b.n	8007148 <ADC_IRQHandler>
	...

0800714c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <HAL_Init+0x40>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <HAL_Init+0x40>)
 8007156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800715a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <HAL_Init+0x40>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <HAL_Init+0x40>)
 8007162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007168:	4b08      	ldr	r3, [pc, #32]	; (800718c <HAL_Init+0x40>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a07      	ldr	r2, [pc, #28]	; (800718c <HAL_Init+0x40>)
 800716e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007174:	2003      	movs	r0, #3
 8007176:	f000 fd53 	bl	8007c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800717a:	2000      	movs	r0, #0
 800717c:	f000 f808 	bl	8007190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007180:	f7fd f96c 	bl	800445c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023c00 	.word	0x40023c00

08007190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007198:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <HAL_InitTick+0x54>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_InitTick+0x58>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 fd6b 	bl	8007c8a <HAL_SYSTICK_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e00e      	b.n	80071dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b0f      	cmp	r3, #15
 80071c2:	d80a      	bhi.n	80071da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80071c4:	2200      	movs	r2, #0
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071cc:	f000 fd33 	bl	8007c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80071d0:	4a06      	ldr	r2, [pc, #24]	; (80071ec <HAL_InitTick+0x5c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000030 	.word	0x20000030
 80071e8:	20000040 	.word	0x20000040
 80071ec:	2000003c 	.word	0x2000003c

080071f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <HAL_IncTick+0x20>)
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <HAL_IncTick+0x24>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4413      	add	r3, r2
 8007200:	4a04      	ldr	r2, [pc, #16]	; (8007214 <HAL_IncTick+0x24>)
 8007202:	6013      	str	r3, [r2, #0]
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000040 	.word	0x20000040
 8007214:	200094ec 	.word	0x200094ec

08007218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return uwTick;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <HAL_GetTick+0x14>)
 800721e:	681b      	ldr	r3, [r3, #0]
}
 8007220:	4618      	mov	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	200094ec 	.word	0x200094ec

08007230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007238:	f7ff ffee 	bl	8007218 <HAL_GetTick>
 800723c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007248:	d005      	beq.n	8007256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800724a:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <HAL_Delay+0x44>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007256:	bf00      	nop
 8007258:	f7ff ffde 	bl	8007218 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d8f7      	bhi.n	8007258 <HAL_Delay+0x28>
  {
  }
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000040 	.word	0x20000040

08007278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e033      	b.n	80072f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fd f908 	bl	80044ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d118      	bne.n	80072e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072be:	f023 0302 	bic.w	r3, r3, #2
 80072c2:	f043 0202 	orr.w	r2, r3, #2
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa5a 	bl	8007784 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
 80072e6:	e001      	b.n	80072ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_ADC_Start_DMA+0x1e>
 800731a:	2302      	movs	r3, #2
 800731c:	e0e9      	b.n	80074f2 <HAL_ADC_Start_DMA+0x1f2>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b01      	cmp	r3, #1
 8007332:	d018      	beq.n	8007366 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007344:	4b6d      	ldr	r3, [pc, #436]	; (80074fc <HAL_ADC_Start_DMA+0x1fc>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a6d      	ldr	r2, [pc, #436]	; (8007500 <HAL_ADC_Start_DMA+0x200>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	0c9a      	lsrs	r2, r3, #18
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007358:	e002      	b.n	8007360 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3b01      	subs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f9      	bne.n	800735a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	d107      	bne.n	8007386 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007384:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	f040 80a1 	bne.w	80074d8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d4:	d106      	bne.n	80073e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	f023 0206 	bic.w	r2, r3, #6
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
 80073e2:	e002      	b.n	80073ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073f2:	4b44      	ldr	r3, [pc, #272]	; (8007504 <HAL_ADC_Start_DMA+0x204>)
 80073f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4a43      	ldr	r2, [pc, #268]	; (8007508 <HAL_ADC_Start_DMA+0x208>)
 80073fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	4a42      	ldr	r2, [pc, #264]	; (800750c <HAL_ADC_Start_DMA+0x20c>)
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	4a41      	ldr	r2, [pc, #260]	; (8007510 <HAL_ADC_Start_DMA+0x210>)
 800740c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007416:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007426:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007436:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	334c      	adds	r3, #76	; 0x4c
 8007442:	4619      	mov	r1, r3
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f000 fcda 	bl	8007e00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2b00      	cmp	r3, #0
 8007456:	d12a      	bne.n	80074ae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2d      	ldr	r2, [pc, #180]	; (8007514 <HAL_ADC_Start_DMA+0x214>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d015      	beq.n	800748e <HAL_ADC_Start_DMA+0x18e>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <HAL_ADC_Start_DMA+0x218>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d105      	bne.n	8007478 <HAL_ADC_Start_DMA+0x178>
 800746c:	4b25      	ldr	r3, [pc, #148]	; (8007504 <HAL_ADC_Start_DMA+0x204>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a27      	ldr	r2, [pc, #156]	; (800751c <HAL_ADC_Start_DMA+0x21c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d136      	bne.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_ADC_Start_DMA+0x204>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	2b00      	cmp	r3, #0
 800748c:	d130      	bne.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d129      	bne.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80074aa:	609a      	str	r2, [r3, #8]
 80074ac:	e020      	b.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a18      	ldr	r2, [pc, #96]	; (8007514 <HAL_ADC_Start_DMA+0x214>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d11b      	bne.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d114      	bne.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80074d4:	609a      	str	r2, [r3, #8]
 80074d6:	e00b      	b.n	80074f0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	f043 0210 	orr.w	r2, r3, #16
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e8:	f043 0201 	orr.w	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000030 	.word	0x20000030
 8007500:	431bde83 	.word	0x431bde83
 8007504:	40012300 	.word	0x40012300
 8007508:	0800797d 	.word	0x0800797d
 800750c:	08007a37 	.word	0x08007a37
 8007510:	08007a53 	.word	0x08007a53
 8007514:	40012000 	.word	0x40012000
 8007518:	40012100 	.word	0x40012100
 800751c:	40012200 	.word	0x40012200

08007520 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_ADC_ConfigChannel+0x1c>
 8007538:	2302      	movs	r3, #2
 800753a:	e113      	b.n	8007764 <HAL_ADC_ConfigChannel+0x244>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b09      	cmp	r3, #9
 800754a:	d925      	bls.n	8007598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68d9      	ldr	r1, [r3, #12]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	3b1e      	subs	r3, #30
 8007562:	2207      	movs	r2, #7
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	43da      	mvns	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	400a      	ands	r2, r1
 8007570:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68d9      	ldr	r1, [r3, #12]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	4618      	mov	r0, r3
 8007584:	4603      	mov	r3, r0
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	4403      	add	r3, r0
 800758a:	3b1e      	subs	r3, #30
 800758c:	409a      	lsls	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	e022      	b.n	80075de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6919      	ldr	r1, [r3, #16]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	2207      	movs	r2, #7
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43da      	mvns	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	400a      	ands	r2, r1
 80075ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6919      	ldr	r1, [r3, #16]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4618      	mov	r0, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4403      	add	r3, r0
 80075d4:	409a      	lsls	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d824      	bhi.n	8007630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	3b05      	subs	r3, #5
 80075f8:	221f      	movs	r2, #31
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43da      	mvns	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	400a      	ands	r2, r1
 8007606:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	4618      	mov	r0, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	3b05      	subs	r3, #5
 8007622:	fa00 f203 	lsl.w	r2, r0, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	635a      	str	r2, [r3, #52]	; 0x34
 800762e:	e04c      	b.n	80076ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d824      	bhi.n	8007682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	3b23      	subs	r3, #35	; 0x23
 800764a:	221f      	movs	r2, #31
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43da      	mvns	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	400a      	ands	r2, r1
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	4618      	mov	r0, r3
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	3b23      	subs	r3, #35	; 0x23
 8007674:	fa00 f203 	lsl.w	r2, r0, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	631a      	str	r2, [r3, #48]	; 0x30
 8007680:	e023      	b.n	80076ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	3b41      	subs	r3, #65	; 0x41
 8007694:	221f      	movs	r2, #31
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43da      	mvns	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	400a      	ands	r2, r1
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4618      	mov	r0, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	3b41      	subs	r3, #65	; 0x41
 80076be:	fa00 f203 	lsl.w	r2, r0, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <HAL_ADC_ConfigChannel+0x250>)
 80076cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a28      	ldr	r2, [pc, #160]	; (8007774 <HAL_ADC_ConfigChannel+0x254>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d10f      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x1d8>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b12      	cmp	r3, #18
 80076de:	d10b      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_ADC_ConfigChannel+0x254>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d12b      	bne.n	800775a <HAL_ADC_ConfigChannel+0x23a>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_ADC_ConfigChannel+0x258>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <HAL_ADC_ConfigChannel+0x1f4>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b11      	cmp	r3, #17
 8007712:	d122      	bne.n	800775a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a11      	ldr	r2, [pc, #68]	; (8007778 <HAL_ADC_ConfigChannel+0x258>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d111      	bne.n	800775a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007736:	4b11      	ldr	r3, [pc, #68]	; (800777c <HAL_ADC_ConfigChannel+0x25c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a11      	ldr	r2, [pc, #68]	; (8007780 <HAL_ADC_ConfigChannel+0x260>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	0c9a      	lsrs	r2, r3, #18
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800774c:	e002      	b.n	8007754 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3b01      	subs	r3, #1
 8007752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f9      	bne.n	800774e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	40012300 	.word	0x40012300
 8007774:	40012000 	.word	0x40012000
 8007778:	10000012 	.word	0x10000012
 800777c:	20000030 	.word	0x20000030
 8007780:	431bde83 	.word	0x431bde83

08007784 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800778c:	4b79      	ldr	r3, [pc, #484]	; (8007974 <ADC_Init+0x1f0>)
 800778e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6859      	ldr	r1, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	021a      	lsls	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6859      	ldr	r1, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6899      	ldr	r1, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	4a58      	ldr	r2, [pc, #352]	; (8007978 <ADC_Init+0x1f4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800782a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800784c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6899      	ldr	r1, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	609a      	str	r2, [r3, #8]
 8007860:	e00f      	b.n	8007882 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007880:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0202 	bic.w	r2, r2, #2
 8007890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6899      	ldr	r1, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	7e1b      	ldrb	r3, [r3, #24]
 800789c:	005a      	lsls	r2, r3, #1
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01b      	beq.n	80078e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6859      	ldr	r1, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	3b01      	subs	r3, #1
 80078dc:	035a      	lsls	r2, r3, #13
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	e007      	b.n	80078f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	3b01      	subs	r3, #1
 8007914:	051a      	lsls	r2, r3, #20
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800792c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800793a:	025a      	lsls	r2, r3, #9
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6899      	ldr	r1, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	029a      	lsls	r2, r3, #10
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	609a      	str	r2, [r3, #8]
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40012300 	.word	0x40012300
 8007978:	0f000001 	.word	0x0f000001

0800797c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007992:	2b00      	cmp	r3, #0
 8007994:	d13c      	bne.n	8007a10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d12b      	bne.n	8007a08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d127      	bne.n	8007a08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d006      	beq.n	80079d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d119      	bne.n	8007a08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0220 	bic.w	r2, r2, #32
 80079e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f043 0201 	orr.w	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7fc fc35 	bl	8004278 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a0e:	e00e      	b.n	8007a2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7fc fc6b 	bl	80042f8 <HAL_ADC_ErrorCallback>
}
 8007a22:	e004      	b.n	8007a2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7fc fc37 	bl	80042b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2240      	movs	r2, #64	; 0x40
 8007a64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7fc fc40 	bl	80042f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a90:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ab2:	4a04      	ldr	r2, [pc, #16]	; (8007ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	60d3      	str	r3, [r2, #12]
}
 8007ab8:	bf00      	nop
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	e000ed00 	.word	0xe000ed00

08007ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	0a1b      	lsrs	r3, r3, #8
 8007ad2:	f003 0307 	and.w	r3, r3, #7
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	db0b      	blt.n	8007b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	f003 021f 	and.w	r2, r3, #31
 8007afc:	4907      	ldr	r1, [pc, #28]	; (8007b1c <__NVIC_EnableIRQ+0x38>)
 8007afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	2001      	movs	r0, #1
 8007b06:	fa00 f202 	lsl.w	r2, r0, r2
 8007b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	e000e100 	.word	0xe000e100

08007b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db0a      	blt.n	8007b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	490c      	ldr	r1, [pc, #48]	; (8007b6c <__NVIC_SetPriority+0x4c>)
 8007b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3e:	0112      	lsls	r2, r2, #4
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	440b      	add	r3, r1
 8007b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b48:	e00a      	b.n	8007b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	4908      	ldr	r1, [pc, #32]	; (8007b70 <__NVIC_SetPriority+0x50>)
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	3b04      	subs	r3, #4
 8007b58:	0112      	lsls	r2, r2, #4
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	761a      	strb	r2, [r3, #24]
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	e000e100 	.word	0xe000e100
 8007b70:	e000ed00 	.word	0xe000ed00

08007b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	f1c3 0307 	rsb	r3, r3, #7
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	bf28      	it	cs
 8007b92:	2304      	movcs	r3, #4
 8007b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2b06      	cmp	r3, #6
 8007b9c:	d902      	bls.n	8007ba4 <NVIC_EncodePriority+0x30>
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	3b03      	subs	r3, #3
 8007ba2:	e000      	b.n	8007ba6 <NVIC_EncodePriority+0x32>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	43da      	mvns	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc6:	43d9      	mvns	r1, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bcc:	4313      	orrs	r3, r2
         );
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3724      	adds	r7, #36	; 0x24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bec:	d301      	bcc.n	8007bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e00f      	b.n	8007c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bf2:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <SysTick_Config+0x40>)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bfa:	210f      	movs	r1, #15
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c00:	f7ff ff8e 	bl	8007b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <SysTick_Config+0x40>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c0a:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <SysTick_Config+0x40>)
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	e000e010 	.word	0xe000e010

08007c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ff29 	bl	8007a80 <__NVIC_SetPriorityGrouping>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c48:	f7ff ff3e 	bl	8007ac8 <__NVIC_GetPriorityGrouping>
 8007c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	6978      	ldr	r0, [r7, #20]
 8007c54:	f7ff ff8e 	bl	8007b74 <NVIC_EncodePriority>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff ff5d 	bl	8007b20 <__NVIC_SetPriority>
}
 8007c66:	bf00      	nop
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	4603      	mov	r3, r0
 8007c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff ff31 	bl	8007ae4 <__NVIC_EnableIRQ>
}
 8007c82:	bf00      	nop
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff ffa2 	bl	8007bdc <SysTick_Config>
 8007c98:	4603      	mov	r3, r0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007cb0:	f7ff fab2 	bl	8007218 <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e099      	b.n	8007df4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ce0:	e00f      	b.n	8007d02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ce2:	f7ff fa99 	bl	8007218 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	d908      	bls.n	8007d02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2203      	movs	r2, #3
 8007cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e078      	b.n	8007df4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e8      	bne.n	8007ce2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4b38      	ldr	r3, [pc, #224]	; (8007dfc <HAL_DMA_Init+0x158>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d107      	bne.n	8007d6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	4313      	orrs	r3, r2
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	2b04      	cmp	r3, #4
 8007d94:	d117      	bne.n	8007dc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fb01 	bl	80083b0 <DMA_CheckFifoParam>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2240      	movs	r2, #64	; 0x40
 8007db8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e016      	b.n	8007df4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fab8 	bl	8008344 <DMA_CalcBaseAndBitshift>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ddc:	223f      	movs	r2, #63	; 0x3f
 8007dde:	409a      	lsls	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	f010803f 	.word	0xf010803f

08007e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_DMA_Start_IT+0x26>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e040      	b.n	8007ea8 <HAL_DMA_Start_IT+0xa8>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d12f      	bne.n	8007e9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fa4a 	bl	80082e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e58:	223f      	movs	r2, #63	; 0x3f
 8007e5a:	409a      	lsls	r2, r3
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0216 	orr.w	r2, r2, #22
 8007e6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	e005      	b.n	8007ea6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ebe:	f7ff f9ab 	bl	8007218 <HAL_GetTick>
 8007ec2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d008      	beq.n	8007ee2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2280      	movs	r2, #128	; 0x80
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e052      	b.n	8007f88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0216 	bic.w	r2, r2, #22
 8007ef0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <HAL_DMA_Abort+0x62>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0208 	bic.w	r2, r2, #8
 8007f20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0201 	bic.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f32:	e013      	b.n	8007f5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f34:	f7ff f970 	bl	8007218 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d90c      	bls.n	8007f5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e015      	b.n	8007f88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e4      	bne.n	8007f34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	223f      	movs	r2, #63	; 0x3f
 8007f70:	409a      	lsls	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d004      	beq.n	8007fae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2280      	movs	r2, #128	; 0x80
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e00c      	b.n	8007fc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2205      	movs	r2, #5
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fe0:	4b8e      	ldr	r3, [pc, #568]	; (800821c <HAL_DMA_IRQHandler+0x248>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a8e      	ldr	r2, [pc, #568]	; (8008220 <HAL_DMA_IRQHandler+0x24c>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	0a9b      	lsrs	r3, r3, #10
 8007fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ffe:	2208      	movs	r2, #8
 8008000:	409a      	lsls	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4013      	ands	r3, r2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01a      	beq.n	8008040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d013      	beq.n	8008040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0204 	bic.w	r2, r2, #4
 8008026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2208      	movs	r2, #8
 800802e:	409a      	lsls	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f043 0201 	orr.w	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008044:	2201      	movs	r2, #1
 8008046:	409a      	lsls	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4013      	ands	r3, r2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d012      	beq.n	8008076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	2201      	movs	r2, #1
 8008064:	409a      	lsls	r2, r3
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806e:	f043 0202 	orr.w	r2, r3, #2
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807a:	2204      	movs	r2, #4
 800807c:	409a      	lsls	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d012      	beq.n	80080ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00b      	beq.n	80080ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008098:	2204      	movs	r2, #4
 800809a:	409a      	lsls	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	f043 0204 	orr.w	r2, r3, #4
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	2210      	movs	r2, #16
 80080b2:	409a      	lsls	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d043      	beq.n	8008144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d03c      	beq.n	8008144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ce:	2210      	movs	r2, #16
 80080d0:	409a      	lsls	r2, r3
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d108      	bne.n	8008104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d024      	beq.n	8008144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
 8008102:	e01f      	b.n	8008144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01b      	beq.n	8008144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
 8008114:	e016      	b.n	8008144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008120:	2b00      	cmp	r3, #0
 8008122:	d107      	bne.n	8008134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0208 	bic.w	r2, r2, #8
 8008132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008148:	2220      	movs	r2, #32
 800814a:	409a      	lsls	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 808f 	beq.w	8008274 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8087 	beq.w	8008274 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816a:	2220      	movs	r2, #32
 800816c:	409a      	lsls	r2, r3
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b05      	cmp	r3, #5
 800817c:	d136      	bne.n	80081ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0216 	bic.w	r2, r2, #22
 800818c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695a      	ldr	r2, [r3, #20]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800819c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d103      	bne.n	80081ae <HAL_DMA_IRQHandler+0x1da>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0208 	bic.w	r2, r2, #8
 80081bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c2:	223f      	movs	r2, #63	; 0x3f
 80081c4:	409a      	lsls	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d07e      	beq.n	80082e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
        }
        return;
 80081ea:	e079      	b.n	80082e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01d      	beq.n	8008236 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10d      	bne.n	8008224 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820c:	2b00      	cmp	r3, #0
 800820e:	d031      	beq.n	8008274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	4798      	blx	r3
 8008218:	e02c      	b.n	8008274 <HAL_DMA_IRQHandler+0x2a0>
 800821a:	bf00      	nop
 800821c:	20000030 	.word	0x20000030
 8008220:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d023      	beq.n	8008274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	4798      	blx	r3
 8008234:	e01e      	b.n	8008274 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10f      	bne.n	8008264 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0210 	bic.w	r2, r2, #16
 8008252:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008278:	2b00      	cmp	r3, #0
 800827a:	d032      	beq.n	80082e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d022      	beq.n	80082ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2205      	movs	r2, #5
 800828c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0201 	bic.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60bb      	str	r3, [r7, #8]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d307      	bcc.n	80082bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f2      	bne.n	80082a0 <HAL_DMA_IRQHandler+0x2cc>
 80082ba:	e000      	b.n	80082be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	4798      	blx	r3
 80082de:	e000      	b.n	80082e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80082e0:	bf00      	nop
    }
  }
}
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d108      	bne.n	8008328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008326:	e007      	b.n	8008338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3b10      	subs	r3, #16
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <DMA_CalcBaseAndBitshift+0x64>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	091b      	lsrs	r3, r3, #4
 800835c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <DMA_CalcBaseAndBitshift+0x68>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d909      	bls.n	8008386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	659a      	str	r2, [r3, #88]	; 0x58
 8008384:	e007      	b.n	8008396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	aaaaaaab 	.word	0xaaaaaaab
 80083ac:	080152c4 	.word	0x080152c4

080083b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11f      	bne.n	800840a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d856      	bhi.n	800847e <DMA_CheckFifoParam+0xce>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <DMA_CheckFifoParam+0x28>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	080083e9 	.word	0x080083e9
 80083e4:	0800847f 	.word	0x0800847f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d046      	beq.n	8008482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f8:	e043      	b.n	8008482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008402:	d140      	bne.n	8008486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008408:	e03d      	b.n	8008486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008412:	d121      	bne.n	8008458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d837      	bhi.n	800848a <DMA_CheckFifoParam+0xda>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <DMA_CheckFifoParam+0x70>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008431 	.word	0x08008431
 8008424:	08008437 	.word	0x08008437
 8008428:	08008431 	.word	0x08008431
 800842c:	08008449 	.word	0x08008449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e030      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d025      	beq.n	800848e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008446:	e022      	b.n	800848e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008450:	d11f      	bne.n	8008492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008456:	e01c      	b.n	8008492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d903      	bls.n	8008466 <DMA_CheckFifoParam+0xb6>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d003      	beq.n	800846c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008464:	e018      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
      break;
 800846a:	e015      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e00b      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 800847e:	bf00      	nop
 8008480:	e00a      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008482:	bf00      	nop
 8008484:	e008      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008486:	bf00      	nop
 8008488:	e006      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 800848a:	bf00      	nop
 800848c:	e004      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 800848e:	bf00      	nop
 8008490:	e002      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;   
 8008492:	bf00      	nop
 8008494:	e000      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008496:	bf00      	nop
    }
  } 
  
  return status; 
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e165      	b.n	8008790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084c4:	2201      	movs	r2, #1
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4013      	ands	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f040 8154 	bne.w	800878a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d005      	beq.n	80084fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d130      	bne.n	800855c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	2203      	movs	r2, #3
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008530:	2201      	movs	r2, #1
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	4013      	ands	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	091b      	lsrs	r3, r3, #4
 8008546:	f003 0201 	and.w	r2, r3, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4313      	orrs	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	2b03      	cmp	r3, #3
 8008566:	d017      	beq.n	8008598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	2203      	movs	r2, #3
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	4013      	ands	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	fa02 f303 	lsl.w	r3, r2, r3
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	4313      	orrs	r3, r2
 8008590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d123      	bne.n	80085ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	08da      	lsrs	r2, r3, #3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3208      	adds	r2, #8
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	220f      	movs	r2, #15
 80085bc:	fa02 f303 	lsl.w	r3, r2, r3
 80085c0:	43db      	mvns	r3, r3
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	4013      	ands	r3, r2
 80085c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	4313      	orrs	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	08da      	lsrs	r2, r3, #3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3208      	adds	r2, #8
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	2203      	movs	r2, #3
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f003 0203 	and.w	r2, r3, #3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4313      	orrs	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80ae 	beq.w	800878a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	4b5d      	ldr	r3, [pc, #372]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	4a5c      	ldr	r2, [pc, #368]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800863c:	6453      	str	r3, [r2, #68]	; 0x44
 800863e:	4b5a      	ldr	r3, [pc, #360]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800864a:	4a58      	ldr	r2, [pc, #352]	; (80087ac <HAL_GPIO_Init+0x304>)
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	3302      	adds	r3, #2
 8008652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	220f      	movs	r2, #15
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	43db      	mvns	r3, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4013      	ands	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a4f      	ldr	r2, [pc, #316]	; (80087b0 <HAL_GPIO_Init+0x308>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d025      	beq.n	80086c2 <HAL_GPIO_Init+0x21a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a4e      	ldr	r2, [pc, #312]	; (80087b4 <HAL_GPIO_Init+0x30c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d01f      	beq.n	80086be <HAL_GPIO_Init+0x216>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a4d      	ldr	r2, [pc, #308]	; (80087b8 <HAL_GPIO_Init+0x310>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d019      	beq.n	80086ba <HAL_GPIO_Init+0x212>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a4c      	ldr	r2, [pc, #304]	; (80087bc <HAL_GPIO_Init+0x314>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d013      	beq.n	80086b6 <HAL_GPIO_Init+0x20e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a4b      	ldr	r2, [pc, #300]	; (80087c0 <HAL_GPIO_Init+0x318>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00d      	beq.n	80086b2 <HAL_GPIO_Init+0x20a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a4a      	ldr	r2, [pc, #296]	; (80087c4 <HAL_GPIO_Init+0x31c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d007      	beq.n	80086ae <HAL_GPIO_Init+0x206>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a49      	ldr	r2, [pc, #292]	; (80087c8 <HAL_GPIO_Init+0x320>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d101      	bne.n	80086aa <HAL_GPIO_Init+0x202>
 80086a6:	2306      	movs	r3, #6
 80086a8:	e00c      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086aa:	2307      	movs	r3, #7
 80086ac:	e00a      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e008      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e006      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e004      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e002      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086c2:	2300      	movs	r3, #0
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f002 0203 	and.w	r2, r2, #3
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	4093      	lsls	r3, r2
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086d4:	4935      	ldr	r1, [pc, #212]	; (80087ac <HAL_GPIO_Init+0x304>)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086e2:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <HAL_GPIO_Init+0x324>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008706:	4a31      	ldr	r2, [pc, #196]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800870c:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <HAL_GPIO_Init+0x324>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008736:	4b25      	ldr	r3, [pc, #148]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800875a:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_GPIO_Init+0x324>)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008784:	4a11      	ldr	r2, [pc, #68]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	f67f ae96 	bls.w	80084c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	; 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40013c00 	.word	0x40013c00

080087d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e001      	b.n	80087f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008810:	787b      	ldrb	r3, [r7, #1]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800881c:	e003      	b.n	8008826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008844:	887a      	ldrh	r2, [r7, #2]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4013      	ands	r3, r2
 800884a:	041a      	lsls	r2, r3, #16
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	43d9      	mvns	r1, r3
 8008850:	887b      	ldrh	r3, [r7, #2]
 8008852:	400b      	ands	r3, r1
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800887e:	4a05      	ldr	r2, [pc, #20]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	4618      	mov	r0, r3
 8008888:	f7fb fcd8 	bl	800423c <HAL_GPIO_EXTI_Callback>
  }
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40013c00 	.word	0x40013c00

08008898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e12b      	b.n	8008b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fb ff08 	bl	80046d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2224      	movs	r2, #36	; 0x24
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088fc:	f001 f9fc 	bl	8009cf8 <HAL_RCC_GetPCLK1Freq>
 8008900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4a81      	ldr	r2, [pc, #516]	; (8008b0c <HAL_I2C_Init+0x274>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d807      	bhi.n	800891c <HAL_I2C_Init+0x84>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a80      	ldr	r2, [pc, #512]	; (8008b10 <HAL_I2C_Init+0x278>)
 8008910:	4293      	cmp	r3, r2
 8008912:	bf94      	ite	ls
 8008914:	2301      	movls	r3, #1
 8008916:	2300      	movhi	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	e006      	b.n	800892a <HAL_I2C_Init+0x92>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a7d      	ldr	r2, [pc, #500]	; (8008b14 <HAL_I2C_Init+0x27c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	bf94      	ite	ls
 8008924:	2301      	movls	r3, #1
 8008926:	2300      	movhi	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e0e7      	b.n	8008b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4a78      	ldr	r2, [pc, #480]	; (8008b18 <HAL_I2C_Init+0x280>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	0c9b      	lsrs	r3, r3, #18
 800893c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a6a      	ldr	r2, [pc, #424]	; (8008b0c <HAL_I2C_Init+0x274>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d802      	bhi.n	800896c <HAL_I2C_Init+0xd4>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3301      	adds	r3, #1
 800896a:	e009      	b.n	8008980 <HAL_I2C_Init+0xe8>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	4a69      	ldr	r2, [pc, #420]	; (8008b1c <HAL_I2C_Init+0x284>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	099b      	lsrs	r3, r3, #6
 800897e:	3301      	adds	r3, #1
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6812      	ldr	r2, [r2, #0]
 8008984:	430b      	orrs	r3, r1
 8008986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	495c      	ldr	r1, [pc, #368]	; (8008b0c <HAL_I2C_Init+0x274>)
 800899c:	428b      	cmp	r3, r1
 800899e:	d819      	bhi.n	80089d4 <HAL_I2C_Init+0x13c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	1e59      	subs	r1, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80089ae:	1c59      	adds	r1, r3, #1
 80089b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089b4:	400b      	ands	r3, r1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <HAL_I2C_Init+0x138>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1e59      	subs	r1, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c8:	3301      	adds	r3, #1
 80089ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ce:	e051      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 80089d0:	2304      	movs	r3, #4
 80089d2:	e04f      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d111      	bne.n	8008a00 <HAL_I2C_Init+0x168>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1e58      	subs	r0, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6859      	ldr	r1, [r3, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	440b      	add	r3, r1
 80089ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	e012      	b.n	8008a26 <HAL_I2C_Init+0x18e>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	1e58      	subs	r0, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6859      	ldr	r1, [r3, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	0099      	lsls	r1, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a16:	3301      	adds	r3, #1
 8008a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_I2C_Init+0x196>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e022      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10e      	bne.n	8008a54 <HAL_I2C_Init+0x1bc>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1e58      	subs	r0, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6859      	ldr	r1, [r3, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	440b      	add	r3, r1
 8008a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a52:	e00f      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	1e58      	subs	r0, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	0099      	lsls	r1, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	6809      	ldr	r1, [r1, #0]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69da      	ldr	r2, [r3, #28]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6911      	ldr	r1, [r2, #16]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68d2      	ldr	r2, [r2, #12]
 8008aae:	4311      	orrs	r1, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0201 	orr.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	000186a0 	.word	0x000186a0
 8008b10:	001e847f 	.word	0x001e847f
 8008b14:	003d08ff 	.word	0x003d08ff
 8008b18:	431bde83 	.word	0x431bde83
 8008b1c:	10624dd3 	.word	0x10624dd3

08008b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	4608      	mov	r0, r1
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	817b      	strh	r3, [r7, #10]
 8008b32:	460b      	mov	r3, r1
 8008b34:	813b      	strh	r3, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b3a:	f7fe fb6d 	bl	8007218 <HAL_GetTick>
 8008b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	f040 80d9 	bne.w	8008d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	2319      	movs	r3, #25
 8008b54:	2201      	movs	r2, #1
 8008b56:	496d      	ldr	r1, [pc, #436]	; (8008d0c <HAL_I2C_Mem_Write+0x1ec>)
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fdad 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b64:	2302      	movs	r3, #2
 8008b66:	e0cc      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d101      	bne.n	8008b76 <HAL_I2C_Mem_Write+0x56>
 8008b72:	2302      	movs	r3, #2
 8008b74:	e0c5      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d007      	beq.n	8008b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0201 	orr.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2221      	movs	r2, #33	; 0x21
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2240      	movs	r2, #64	; 0x40
 8008bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a3a      	ldr	r2, [r7, #32]
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a4d      	ldr	r2, [pc, #308]	; (8008d10 <HAL_I2C_Mem_Write+0x1f0>)
 8008bdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bde:	88f8      	ldrh	r0, [r7, #6]
 8008be0:	893a      	ldrh	r2, [r7, #8]
 8008be2:	8979      	ldrh	r1, [r7, #10]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4603      	mov	r3, r0
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fbe4 	bl	80093bc <I2C_RequestMemoryWrite>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d052      	beq.n	8008ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e081      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fe2e 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d107      	bne.n	8008c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e06b      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d11b      	bne.n	8008ca0 <HAL_I2C_Mem_Write+0x180>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d017      	beq.n	8008ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	781a      	ldrb	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1aa      	bne.n	8008bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fe1a 	bl	80098e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00d      	beq.n	8008cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d107      	bne.n	8008cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e016      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e000      	b.n	8008d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008d00:	2302      	movs	r3, #2
  }
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	00100002 	.word	0x00100002
 8008d10:	ffff0000 	.word	0xffff0000

08008d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08c      	sub	sp, #48	; 0x30
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	4611      	mov	r1, r2
 8008d20:	461a      	mov	r2, r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	817b      	strh	r3, [r7, #10]
 8008d26:	460b      	mov	r3, r1
 8008d28:	813b      	strh	r3, [r7, #8]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d2e:	f7fe fa73 	bl	8007218 <HAL_GetTick>
 8008d32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	f040 8208 	bne.w	8009152 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	2319      	movs	r3, #25
 8008d48:	2201      	movs	r2, #1
 8008d4a:	497b      	ldr	r1, [pc, #492]	; (8008f38 <HAL_I2C_Mem_Read+0x224>)
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fcb3 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e1fb      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <HAL_I2C_Mem_Read+0x56>
 8008d66:	2302      	movs	r3, #2
 8008d68:	e1f4      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d007      	beq.n	8008d90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2222      	movs	r2, #34	; 0x22
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2240      	movs	r2, #64	; 0x40
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4a5b      	ldr	r2, [pc, #364]	; (8008f3c <HAL_I2C_Mem_Read+0x228>)
 8008dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dd2:	88f8      	ldrh	r0, [r7, #6]
 8008dd4:	893a      	ldrh	r2, [r7, #8]
 8008dd6:	8979      	ldrh	r1, [r7, #10]
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	4603      	mov	r3, r0
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fb80 	bl	80094e8 <I2C_RequestMemoryRead>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e1b0      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d113      	bne.n	8008e22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	623b      	str	r3, [r7, #32]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	623b      	str	r3, [r7, #32]
 8008e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	e184      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d11b      	bne.n	8008e62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e164      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d11b      	bne.n	8008ea2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	61bb      	str	r3, [r7, #24]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	e144      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008eb8:	e138      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	f200 80f1 	bhi.w	80090a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d123      	bne.n	8008f14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fd49 	bl	8009968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e139      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f12:	e10b      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d14e      	bne.n	8008fba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	2200      	movs	r2, #0
 8008f24:	4906      	ldr	r1, [pc, #24]	; (8008f40 <HAL_I2C_Mem_Read+0x22c>)
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fbc6 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e10e      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
 8008f36:	bf00      	nop
 8008f38:	00100002 	.word	0x00100002
 8008f3c:	ffff0000 	.word	0xffff0000
 8008f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fb8:	e0b8      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4966      	ldr	r1, [pc, #408]	; (800915c <HAL_I2C_Mem_Read+0x448>)
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fb77 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0bf      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	2200      	movs	r2, #0
 800901e:	494f      	ldr	r1, [pc, #316]	; (800915c <HAL_I2C_Mem_Read+0x448>)
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 fb49 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e091      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800903e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	b2d2      	uxtb	r2, r2
 800904c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090a4:	e042      	b.n	800912c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fc5c 	bl	8009968 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e04c      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d118      	bne.n	800912c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009122:	b29b      	uxth	r3, r3
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009130:	2b00      	cmp	r3, #0
 8009132:	f47f aec2 	bne.w	8008eba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	e000      	b.n	8009154 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009152:	2302      	movs	r3, #2
  }
}
 8009154:	4618      	mov	r0, r3
 8009156:	3728      	adds	r7, #40	; 0x28
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	00010004 	.word	0x00010004

08009160 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08a      	sub	sp, #40	; 0x28
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	460b      	mov	r3, r1
 800916e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009170:	f7fe f852 	bl	8007218 <HAL_GetTick>
 8009174:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b20      	cmp	r3, #32
 8009184:	f040 8111 	bne.w	80093aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2319      	movs	r3, #25
 800918e:	2201      	movs	r2, #1
 8009190:	4988      	ldr	r1, [pc, #544]	; (80093b4 <HAL_I2C_IsDeviceReady+0x254>)
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 fa90 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800919e:	2302      	movs	r3, #2
 80091a0:	e104      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_I2C_IsDeviceReady+0x50>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e0fd      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d007      	beq.n	80091d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f042 0201 	orr.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2224      	movs	r2, #36	; 0x24
 80091ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a70      	ldr	r2, [pc, #448]	; (80093b8 <HAL_I2C_IsDeviceReady+0x258>)
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009208:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2200      	movs	r2, #0
 8009212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fa4e 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00d      	beq.n	800923e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009230:	d103      	bne.n	800923a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009238:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e0b6      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800923e:	897b      	ldrh	r3, [r7, #10]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800924c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800924e:	f7fd ffe3 	bl	8007218 <HAL_GetTick>
 8009252:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b02      	cmp	r3, #2
 8009260:	bf0c      	ite	eq
 8009262:	2301      	moveq	r3, #1
 8009264:	2300      	movne	r3, #0
 8009266:	b2db      	uxtb	r3, r3
 8009268:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009278:	bf0c      	ite	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	2300      	movne	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009282:	e025      	b.n	80092d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009284:	f7fd ffc8 	bl	8007218 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <HAL_I2C_IsDeviceReady+0x13a>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d103      	bne.n	80092a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	22a0      	movs	r2, #160	; 0xa0
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	f003 0302 	and.w	r3, r3, #2
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	bf0c      	ite	eq
 80092b0:	2301      	moveq	r3, #1
 80092b2:	2300      	movne	r3, #0
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c6:	bf0c      	ite	eq
 80092c8:	2301      	moveq	r3, #1
 80092ca:	2300      	movne	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2ba0      	cmp	r3, #160	; 0xa0
 80092da:	d005      	beq.n	80092e8 <HAL_I2C_IsDeviceReady+0x188>
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <HAL_I2C_IsDeviceReady+0x188>
 80092e2:	7dbb      	ldrb	r3, [r7, #22]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0cd      	beq.n	8009284 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d129      	bne.n	8009352 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800930c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	613b      	str	r3, [r7, #16]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	613b      	str	r3, [r7, #16]
 8009322:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2319      	movs	r3, #25
 800932a:	2201      	movs	r2, #1
 800932c:	4921      	ldr	r1, [pc, #132]	; (80093b4 <HAL_I2C_IsDeviceReady+0x254>)
 800932e:	68f8      	ldr	r0, [r7, #12]
 8009330:	f000 f9c2 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e036      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	e02c      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009360:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800936a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2319      	movs	r3, #25
 8009372:	2201      	movs	r2, #1
 8009374:	490f      	ldr	r1, [pc, #60]	; (80093b4 <HAL_I2C_IsDeviceReady+0x254>)
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f99e 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e012      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	3301      	adds	r3, #1
 800938a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	f4ff af32 	bcc.w	80091fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80093aa:	2302      	movs	r3, #2
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	00100002 	.word	0x00100002
 80093b8:	ffff0000 	.word	0xffff0000

080093bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	4608      	mov	r0, r1
 80093c6:	4611      	mov	r1, r2
 80093c8:	461a      	mov	r2, r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	817b      	strh	r3, [r7, #10]
 80093ce:	460b      	mov	r3, r1
 80093d0:	813b      	strh	r3, [r7, #8]
 80093d2:	4613      	mov	r3, r2
 80093d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 f960 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00d      	beq.n	800941a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d103      	bne.n	8009416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e05f      	b.n	80094da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800941a:	897b      	ldrh	r3, [r7, #10]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	6a3a      	ldr	r2, [r7, #32]
 800942e:	492d      	ldr	r1, [pc, #180]	; (80094e4 <I2C_RequestMemoryWrite+0x128>)
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f998 	bl	8009766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e04c      	b.n	80094da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009458:	6a39      	ldr	r1, [r7, #32]
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fa02 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	2b04      	cmp	r3, #4
 800946c:	d107      	bne.n	800947e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800947c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e02b      	b.n	80094da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d105      	bne.n	8009494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009488:	893b      	ldrh	r3, [r7, #8]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	611a      	str	r2, [r3, #16]
 8009492:	e021      	b.n	80094d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009494:	893b      	ldrh	r3, [r7, #8]
 8009496:	0a1b      	lsrs	r3, r3, #8
 8009498:	b29b      	uxth	r3, r3
 800949a:	b2da      	uxtb	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a4:	6a39      	ldr	r1, [r7, #32]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f9dc 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d107      	bne.n	80094ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e005      	b.n	80094da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094ce:	893b      	ldrh	r3, [r7, #8]
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	00010002 	.word	0x00010002

080094e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b088      	sub	sp, #32
 80094ec:	af02      	add	r7, sp, #8
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	817b      	strh	r3, [r7, #10]
 80094fa:	460b      	mov	r3, r1
 80094fc:	813b      	strh	r3, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	2200      	movs	r2, #0
 800952a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 f8c2 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00d      	beq.n	8009556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009548:	d103      	bne.n	8009552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e0aa      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009556:	897b      	ldrh	r3, [r7, #10]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	461a      	mov	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	4952      	ldr	r1, [pc, #328]	; (80096b4 <I2C_RequestMemoryRead+0x1cc>)
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f8fa 	bl	8009766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e097      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800957c:	2300      	movs	r3, #0
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009594:	6a39      	ldr	r1, [r7, #32]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f964 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00d      	beq.n	80095be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d107      	bne.n	80095ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e076      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d105      	bne.n	80095d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c4:	893b      	ldrh	r3, [r7, #8]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	611a      	str	r2, [r3, #16]
 80095ce:	e021      	b.n	8009614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095d0:	893b      	ldrh	r3, [r7, #8]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e0:	6a39      	ldr	r1, [r7, #32]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 f93e 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00d      	beq.n	800960a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d107      	bne.n	8009606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e050      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800960a:	893b      	ldrh	r3, [r7, #8]
 800960c:	b2da      	uxtb	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009616:	6a39      	ldr	r1, [r7, #32]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f923 	bl	8009864 <I2C_WaitOnTXEFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00d      	beq.n	8009640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	2b04      	cmp	r3, #4
 800962a:	d107      	bne.n	800963c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e035      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800964e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	2200      	movs	r2, #0
 8009658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f82b 	bl	80096b8 <I2C_WaitOnFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00d      	beq.n	8009684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009676:	d103      	bne.n	8009680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800967e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e013      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009684:	897b      	ldrh	r3, [r7, #10]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	b2da      	uxtb	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	6a3a      	ldr	r2, [r7, #32]
 8009698:	4906      	ldr	r1, [pc, #24]	; (80096b4 <I2C_RequestMemoryRead+0x1cc>)
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f863 	bl	8009766 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	00010002 	.word	0x00010002

080096b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	4613      	mov	r3, r2
 80096c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096c8:	e025      	b.n	8009716 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d0:	d021      	beq.n	8009716 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d2:	f7fd fda1 	bl	8007218 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d302      	bcc.n	80096e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d116      	bne.n	8009716 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	f043 0220 	orr.w	r2, r3, #32
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e023      	b.n	800975e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	0c1b      	lsrs	r3, r3, #16
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b01      	cmp	r3, #1
 800971e:	d10d      	bne.n	800973c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	43da      	mvns	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4013      	ands	r3, r2
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	bf0c      	ite	eq
 8009732:	2301      	moveq	r3, #1
 8009734:	2300      	movne	r3, #0
 8009736:	b2db      	uxtb	r3, r3
 8009738:	461a      	mov	r2, r3
 800973a:	e00c      	b.n	8009756 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	43da      	mvns	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4013      	ands	r3, r2
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf0c      	ite	eq
 800974e:	2301      	moveq	r3, #1
 8009750:	2300      	movne	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	461a      	mov	r2, r3
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	429a      	cmp	r2, r3
 800975a:	d0b6      	beq.n	80096ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009774:	e051      	b.n	800981a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009784:	d123      	bne.n	80097ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009794:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800979e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f043 0204 	orr.w	r2, r3, #4
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e046      	b.n	800985c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d4:	d021      	beq.n	800981a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097d6:	f7fd fd1f 	bl	8007218 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d302      	bcc.n	80097ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d116      	bne.n	800981a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f043 0220 	orr.w	r2, r3, #32
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e020      	b.n	800985c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	0c1b      	lsrs	r3, r3, #16
 800981e:	b2db      	uxtb	r3, r3
 8009820:	2b01      	cmp	r3, #1
 8009822:	d10c      	bne.n	800983e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	43da      	mvns	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4013      	ands	r3, r2
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	bf14      	ite	ne
 8009836:	2301      	movne	r3, #1
 8009838:	2300      	moveq	r3, #0
 800983a:	b2db      	uxtb	r3, r3
 800983c:	e00b      	b.n	8009856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	43da      	mvns	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4013      	ands	r3, r2
 800984a:	b29b      	uxth	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf14      	ite	ne
 8009850:	2301      	movne	r3, #1
 8009852:	2300      	moveq	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d18d      	bne.n	8009776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009870:	e02d      	b.n	80098ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f8ce 	bl	8009a14 <I2C_IsAcknowledgeFailed>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e02d      	b.n	80098de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009888:	d021      	beq.n	80098ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800988a:	f7fd fcc5 	bl	8007218 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	d302      	bcc.n	80098a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d116      	bne.n	80098ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2220      	movs	r2, #32
 80098aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	f043 0220 	orr.w	r2, r3, #32
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e007      	b.n	80098de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098d8:	2b80      	cmp	r3, #128	; 0x80
 80098da:	d1ca      	bne.n	8009872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098f2:	e02d      	b.n	8009950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f88d 	bl	8009a14 <I2C_IsAcknowledgeFailed>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e02d      	b.n	8009960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800990a:	d021      	beq.n	8009950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990c:	f7fd fc84 	bl	8007218 <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	429a      	cmp	r2, r3
 800991a:	d302      	bcc.n	8009922 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d116      	bne.n	8009950 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	f043 0220 	orr.w	r2, r3, #32
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e007      	b.n	8009960 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b04      	cmp	r3, #4
 800995c:	d1ca      	bne.n	80098f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009974:	e042      	b.n	80099fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b10      	cmp	r3, #16
 8009982:	d119      	bne.n	80099b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f06f 0210 	mvn.w	r2, #16
 800998c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e029      	b.n	8009a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b8:	f7fd fc2e 	bl	8007218 <HAL_GetTick>
 80099bc:	4602      	mov	r2, r0
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d302      	bcc.n	80099ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d116      	bne.n	80099fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	f043 0220 	orr.w	r2, r3, #32
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e007      	b.n	8009a0c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d1b5      	bne.n	8009976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2a:	d11b      	bne.n	8009a64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	f043 0204 	orr.w	r2, r3, #4
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
	...

08009a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009a7e:	2300      	movs	r3, #0
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4b20      	ldr	r3, [pc, #128]	; (8009b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a8e:	4b1d      	ldr	r3, [pc, #116]	; (8009b04 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <HAL_PWREx_EnableOverDrive+0x94>)
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009aa0:	f7fd fbba 	bl	8007218 <HAL_GetTick>
 8009aa4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009aa6:	e009      	b.n	8009abc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009aa8:	f7fd fbb6 	bl	8007218 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ab6:	d901      	bls.n	8009abc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e01f      	b.n	8009afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ac8:	d1ee      	bne.n	8009aa8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009aca:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009acc:	2201      	movs	r2, #1
 8009ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ad0:	f7fd fba2 	bl	8007218 <HAL_GetTick>
 8009ad4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ad6:	e009      	b.n	8009aec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ad8:	f7fd fb9e 	bl	8007218 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ae6:	d901      	bls.n	8009aec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e007      	b.n	8009afc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009af8:	d1ee      	bne.n	8009ad8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	40023800 	.word	0x40023800
 8009b08:	420e0040 	.word	0x420e0040
 8009b0c:	40007000 	.word	0x40007000
 8009b10:	420e0044 	.word	0x420e0044

08009b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e0cc      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b28:	4b68      	ldr	r3, [pc, #416]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	683a      	ldr	r2, [r7, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d90c      	bls.n	8009b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b36:	4b65      	ldr	r3, [pc, #404]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	b2d2      	uxtb	r2, r2
 8009b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b3e:	4b63      	ldr	r3, [pc, #396]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d001      	beq.n	8009b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0b8      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d020      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0304 	and.w	r3, r3, #4
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b68:	4b59      	ldr	r3, [pc, #356]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4a58      	ldr	r2, [pc, #352]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0308 	and.w	r3, r3, #8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b80:	4b53      	ldr	r3, [pc, #332]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	4a52      	ldr	r2, [pc, #328]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b8c:	4b50      	ldr	r3, [pc, #320]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	494d      	ldr	r1, [pc, #308]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d044      	beq.n	8009c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d107      	bne.n	8009bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bb2:	4b47      	ldr	r3, [pc, #284]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d119      	bne.n	8009bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e07f      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d003      	beq.n	8009bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d107      	bne.n	8009be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bd2:	4b3f      	ldr	r3, [pc, #252]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d109      	bne.n	8009bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e06f      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009be2:	4b3b      	ldr	r3, [pc, #236]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e067      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bf2:	4b37      	ldr	r3, [pc, #220]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f023 0203 	bic.w	r2, r3, #3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4934      	ldr	r1, [pc, #208]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c04:	f7fd fb08 	bl	8007218 <HAL_GetTick>
 8009c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c0a:	e00a      	b.n	8009c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c0c:	f7fd fb04 	bl	8007218 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e04f      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c22:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f003 020c 	and.w	r2, r3, #12
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d1eb      	bne.n	8009c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d20c      	bcs.n	8009c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c42:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c4a:	4b20      	ldr	r3, [pc, #128]	; (8009ccc <HAL_RCC_ClockConfig+0x1b8>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 030f 	and.w	r3, r3, #15
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d001      	beq.n	8009c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e032      	b.n	8009cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c68:	4b19      	ldr	r3, [pc, #100]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	4916      	ldr	r1, [pc, #88]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d009      	beq.n	8009c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c86:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	490e      	ldr	r1, [pc, #56]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c9a:	f000 f855 	bl	8009d48 <HAL_RCC_GetSysClockFreq>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	091b      	lsrs	r3, r3, #4
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	490a      	ldr	r1, [pc, #40]	; (8009cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8009cac:	5ccb      	ldrb	r3, [r1, r3]
 8009cae:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb2:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8009cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cb6:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <HAL_RCC_ClockConfig+0x1c8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fd fa68 	bl	8007190 <HAL_InitTick>

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	40023c00 	.word	0x40023c00
 8009cd0:	40023800 	.word	0x40023800
 8009cd4:	080152a0 	.word	0x080152a0
 8009cd8:	20000030 	.word	0x20000030
 8009cdc:	2000003c 	.word	0x2000003c

08009ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ce4:	4b03      	ldr	r3, [pc, #12]	; (8009cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000030 	.word	0x20000030

08009cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009cfc:	f7ff fff0 	bl	8009ce0 <HAL_RCC_GetHCLKFreq>
 8009d00:	4602      	mov	r2, r0
 8009d02:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	0a9b      	lsrs	r3, r3, #10
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	4903      	ldr	r1, [pc, #12]	; (8009d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d0e:	5ccb      	ldrb	r3, [r1, r3]
 8009d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	080152b0 	.word	0x080152b0

08009d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009d24:	f7ff ffdc 	bl	8009ce0 <HAL_RCC_GetHCLKFreq>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	0b5b      	lsrs	r3, r3, #13
 8009d30:	f003 0307 	and.w	r3, r3, #7
 8009d34:	4903      	ldr	r1, [pc, #12]	; (8009d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d36:	5ccb      	ldrb	r3, [r1, r3]
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40023800 	.word	0x40023800
 8009d44:	080152b0 	.word	0x080152b0

08009d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d4c:	b0ae      	sub	sp, #184	; 0xb8
 8009d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d6e:	4bcb      	ldr	r3, [pc, #812]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 030c 	and.w	r3, r3, #12
 8009d76:	2b0c      	cmp	r3, #12
 8009d78:	f200 8206 	bhi.w	800a188 <HAL_RCC_GetSysClockFreq+0x440>
 8009d7c:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d82:	bf00      	nop
 8009d84:	08009db9 	.word	0x08009db9
 8009d88:	0800a189 	.word	0x0800a189
 8009d8c:	0800a189 	.word	0x0800a189
 8009d90:	0800a189 	.word	0x0800a189
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	0800a189 	.word	0x0800a189
 8009d9c:	0800a189 	.word	0x0800a189
 8009da0:	0800a189 	.word	0x0800a189
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	0800a189 	.word	0x0800a189
 8009dac:	0800a189 	.word	0x0800a189
 8009db0:	0800a189 	.word	0x0800a189
 8009db4:	08009fb9 	.word	0x08009fb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009db8:	4bb9      	ldr	r3, [pc, #740]	; (800a0a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8009dba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009dbe:	e1e7      	b.n	800a190 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009dc0:	4bb8      	ldr	r3, [pc, #736]	; (800a0a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009dc6:	e1e3      	b.n	800a190 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009dc8:	4bb4      	ldr	r3, [pc, #720]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009dd4:	4bb1      	ldr	r3, [pc, #708]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d071      	beq.n	8009ec4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009de0:	4bae      	ldr	r3, [pc, #696]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	099b      	lsrs	r3, r3, #6
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009dec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	f04f 0000 	mov.w	r0, #0
 8009e0e:	f04f 0100 	mov.w	r1, #0
 8009e12:	0159      	lsls	r1, r3, #5
 8009e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e18:	0150      	lsls	r0, r2, #5
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4621      	mov	r1, r4
 8009e20:	1a51      	subs	r1, r2, r1
 8009e22:	6439      	str	r1, [r7, #64]	; 0x40
 8009e24:	4629      	mov	r1, r5
 8009e26:	eb63 0301 	sbc.w	r3, r3, r1
 8009e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009e38:	4649      	mov	r1, r9
 8009e3a:	018b      	lsls	r3, r1, #6
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e42:	4641      	mov	r1, r8
 8009e44:	018a      	lsls	r2, r1, #6
 8009e46:	4641      	mov	r1, r8
 8009e48:	1a51      	subs	r1, r2, r1
 8009e4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8009e60:	4649      	mov	r1, r9
 8009e62:	00cb      	lsls	r3, r1, #3
 8009e64:	4641      	mov	r1, r8
 8009e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e6a:	4641      	mov	r1, r8
 8009e6c:	00ca      	lsls	r2, r1, #3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4619      	mov	r1, r3
 8009e72:	4603      	mov	r3, r0
 8009e74:	4622      	mov	r2, r4
 8009e76:	189b      	adds	r3, r3, r2
 8009e78:	633b      	str	r3, [r7, #48]	; 0x30
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	eb42 0303 	adc.w	r3, r2, r3
 8009e82:	637b      	str	r3, [r7, #52]	; 0x34
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e90:	4629      	mov	r1, r5
 8009e92:	024b      	lsls	r3, r1, #9
 8009e94:	4621      	mov	r1, r4
 8009e96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	024a      	lsls	r2, r1, #9
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009eac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009eb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009eb4:	f7f6 ff38 	bl	8000d28 <__aeabi_uldivmod>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ec2:	e067      	b.n	8009f94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ec4:	4b75      	ldr	r3, [pc, #468]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	099b      	lsrs	r3, r3, #6
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ed0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ede:	2300      	movs	r3, #0
 8009ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ee2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	462b      	mov	r3, r5
 8009eea:	f04f 0000 	mov.w	r0, #0
 8009eee:	f04f 0100 	mov.w	r1, #0
 8009ef2:	0159      	lsls	r1, r3, #5
 8009ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ef8:	0150      	lsls	r0, r2, #5
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	4621      	mov	r1, r4
 8009f00:	1a51      	subs	r1, r2, r1
 8009f02:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f04:	4629      	mov	r1, r5
 8009f06:	eb63 0301 	sbc.w	r3, r3, r1
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	f04f 0300 	mov.w	r3, #0
 8009f14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009f18:	4649      	mov	r1, r9
 8009f1a:	018b      	lsls	r3, r1, #6
 8009f1c:	4641      	mov	r1, r8
 8009f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f22:	4641      	mov	r1, r8
 8009f24:	018a      	lsls	r2, r1, #6
 8009f26:	4641      	mov	r1, r8
 8009f28:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f32:	f04f 0200 	mov.w	r2, #0
 8009f36:	f04f 0300 	mov.w	r3, #0
 8009f3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f46:	4692      	mov	sl, r2
 8009f48:	469b      	mov	fp, r3
 8009f4a:	4623      	mov	r3, r4
 8009f4c:	eb1a 0303 	adds.w	r3, sl, r3
 8009f50:	623b      	str	r3, [r7, #32]
 8009f52:	462b      	mov	r3, r5
 8009f54:	eb4b 0303 	adc.w	r3, fp, r3
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	f04f 0300 	mov.w	r3, #0
 8009f62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009f66:	4629      	mov	r1, r5
 8009f68:	028b      	lsls	r3, r1, #10
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f70:	4621      	mov	r1, r4
 8009f72:	028a      	lsls	r2, r1, #10
 8009f74:	4610      	mov	r0, r2
 8009f76:	4619      	mov	r1, r3
 8009f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	673b      	str	r3, [r7, #112]	; 0x70
 8009f80:	677a      	str	r2, [r7, #116]	; 0x74
 8009f82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009f86:	f7f6 fecf 	bl	8000d28 <__aeabi_uldivmod>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4613      	mov	r3, r2
 8009f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f94:	4b41      	ldr	r3, [pc, #260]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	0c1b      	lsrs	r3, r3, #16
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8009fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8009fb6:	e0eb      	b.n	800a190 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009fb8:	4b38      	ldr	r3, [pc, #224]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009fc4:	4b35      	ldr	r3, [pc, #212]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d06b      	beq.n	800a0a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fd0:	4b32      	ldr	r3, [pc, #200]	; (800a09c <HAL_RCC_GetSysClockFreq+0x354>)
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	099b      	lsrs	r3, r3, #6
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	667b      	str	r3, [r7, #100]	; 0x64
 8009fe8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009fec:	4622      	mov	r2, r4
 8009fee:	462b      	mov	r3, r5
 8009ff0:	f04f 0000 	mov.w	r0, #0
 8009ff4:	f04f 0100 	mov.w	r1, #0
 8009ff8:	0159      	lsls	r1, r3, #5
 8009ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ffe:	0150      	lsls	r0, r2, #5
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4621      	mov	r1, r4
 800a006:	1a51      	subs	r1, r2, r1
 800a008:	61b9      	str	r1, [r7, #24]
 800a00a:	4629      	mov	r1, r5
 800a00c:	eb63 0301 	sbc.w	r3, r3, r1
 800a010:	61fb      	str	r3, [r7, #28]
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800a01e:	4659      	mov	r1, fp
 800a020:	018b      	lsls	r3, r1, #6
 800a022:	4651      	mov	r1, sl
 800a024:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a028:	4651      	mov	r1, sl
 800a02a:	018a      	lsls	r2, r1, #6
 800a02c:	4651      	mov	r1, sl
 800a02e:	ebb2 0801 	subs.w	r8, r2, r1
 800a032:	4659      	mov	r1, fp
 800a034:	eb63 0901 	sbc.w	r9, r3, r1
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	f04f 0300 	mov.w	r3, #0
 800a040:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a044:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a048:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a04c:	4690      	mov	r8, r2
 800a04e:	4699      	mov	r9, r3
 800a050:	4623      	mov	r3, r4
 800a052:	eb18 0303 	adds.w	r3, r8, r3
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	462b      	mov	r3, r5
 800a05a:	eb49 0303 	adc.w	r3, r9, r3
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	f04f 0200 	mov.w	r2, #0
 800a064:	f04f 0300 	mov.w	r3, #0
 800a068:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800a06c:	4629      	mov	r1, r5
 800a06e:	024b      	lsls	r3, r1, #9
 800a070:	4621      	mov	r1, r4
 800a072:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a076:	4621      	mov	r1, r4
 800a078:	024a      	lsls	r2, r1, #9
 800a07a:	4610      	mov	r0, r2
 800a07c:	4619      	mov	r1, r3
 800a07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a082:	2200      	movs	r2, #0
 800a084:	65bb      	str	r3, [r7, #88]	; 0x58
 800a086:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a088:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a08c:	f7f6 fe4c 	bl	8000d28 <__aeabi_uldivmod>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4613      	mov	r3, r2
 800a096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a09a:	e065      	b.n	800a168 <HAL_RCC_GetSysClockFreq+0x420>
 800a09c:	40023800 	.word	0x40023800
 800a0a0:	00f42400 	.word	0x00f42400
 800a0a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0a8:	4b3d      	ldr	r3, [pc, #244]	; (800a1a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	099b      	lsrs	r3, r3, #6
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	657b      	str	r3, [r7, #84]	; 0x54
 800a0be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800a0c2:	4642      	mov	r2, r8
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	f04f 0000 	mov.w	r0, #0
 800a0ca:	f04f 0100 	mov.w	r1, #0
 800a0ce:	0159      	lsls	r1, r3, #5
 800a0d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a0d4:	0150      	lsls	r0, r2, #5
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4641      	mov	r1, r8
 800a0dc:	1a51      	subs	r1, r2, r1
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	eb63 0301 	sbc.w	r3, r3, r1
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	f04f 0200 	mov.w	r2, #0
 800a0ec:	f04f 0300 	mov.w	r3, #0
 800a0f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a0f4:	4659      	mov	r1, fp
 800a0f6:	018b      	lsls	r3, r1, #6
 800a0f8:	4651      	mov	r1, sl
 800a0fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a0fe:	4651      	mov	r1, sl
 800a100:	018a      	lsls	r2, r1, #6
 800a102:	4651      	mov	r1, sl
 800a104:	1a54      	subs	r4, r2, r1
 800a106:	4659      	mov	r1, fp
 800a108:	eb63 0501 	sbc.w	r5, r3, r1
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	00eb      	lsls	r3, r5, #3
 800a116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a11a:	00e2      	lsls	r2, r4, #3
 800a11c:	4614      	mov	r4, r2
 800a11e:	461d      	mov	r5, r3
 800a120:	4643      	mov	r3, r8
 800a122:	18e3      	adds	r3, r4, r3
 800a124:	603b      	str	r3, [r7, #0]
 800a126:	464b      	mov	r3, r9
 800a128:	eb45 0303 	adc.w	r3, r5, r3
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	f04f 0300 	mov.w	r3, #0
 800a136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a13a:	4629      	mov	r1, r5
 800a13c:	028b      	lsls	r3, r1, #10
 800a13e:	4621      	mov	r1, r4
 800a140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a144:	4621      	mov	r1, r4
 800a146:	028a      	lsls	r2, r1, #10
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a150:	2200      	movs	r2, #0
 800a152:	64bb      	str	r3, [r7, #72]	; 0x48
 800a154:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a156:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a15a:	f7f6 fde5 	bl	8000d28 <__aeabi_uldivmod>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4613      	mov	r3, r2
 800a164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800a168:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	0f1b      	lsrs	r3, r3, #28
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800a176:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a17a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a186:	e003      	b.n	800a190 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800a18a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800a18e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800a194:	4618      	mov	r0, r3
 800a196:	37b8      	adds	r7, #184	; 0xb8
 800a198:	46bd      	mov	sp, r7
 800a19a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a19e:	bf00      	nop
 800a1a0:	40023800 	.word	0x40023800
 800a1a4:	00f42400 	.word	0x00f42400

0800a1a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e28d      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 8083 	beq.w	800a2ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a1c8:	4b94      	ldr	r3, [pc, #592]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 030c 	and.w	r3, r3, #12
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d019      	beq.n	800a208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a1d4:	4b91      	ldr	r3, [pc, #580]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a1dc:	2b08      	cmp	r3, #8
 800a1de:	d106      	bne.n	800a1ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a1e0:	4b8e      	ldr	r3, [pc, #568]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1ec:	d00c      	beq.n	800a208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1ee:	4b8b      	ldr	r3, [pc, #556]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a1f6:	2b0c      	cmp	r3, #12
 800a1f8:	d112      	bne.n	800a220 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1fa:	4b88      	ldr	r3, [pc, #544]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a206:	d10b      	bne.n	800a220 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a208:	4b84      	ldr	r3, [pc, #528]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d05b      	beq.n	800a2cc <HAL_RCC_OscConfig+0x124>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d157      	bne.n	800a2cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e25a      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a228:	d106      	bne.n	800a238 <HAL_RCC_OscConfig+0x90>
 800a22a:	4b7c      	ldr	r3, [pc, #496]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a7b      	ldr	r2, [pc, #492]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	e01d      	b.n	800a274 <HAL_RCC_OscConfig+0xcc>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a240:	d10c      	bne.n	800a25c <HAL_RCC_OscConfig+0xb4>
 800a242:	4b76      	ldr	r3, [pc, #472]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a75      	ldr	r2, [pc, #468]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	4b73      	ldr	r3, [pc, #460]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a72      	ldr	r2, [pc, #456]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	e00b      	b.n	800a274 <HAL_RCC_OscConfig+0xcc>
 800a25c:	4b6f      	ldr	r3, [pc, #444]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a6e      	ldr	r2, [pc, #440]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	4b6c      	ldr	r3, [pc, #432]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a6b      	ldr	r2, [pc, #428]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a26e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d013      	beq.n	800a2a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fc ffcc 	bl	8007218 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a284:	f7fc ffc8 	bl	8007218 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b64      	cmp	r3, #100	; 0x64
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e21f      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a296:	4b61      	ldr	r3, [pc, #388]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0f0      	beq.n	800a284 <HAL_RCC_OscConfig+0xdc>
 800a2a2:	e014      	b.n	800a2ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fc ffb8 	bl	8007218 <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a2ac:	f7fc ffb4 	bl	8007218 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b64      	cmp	r3, #100	; 0x64
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e20b      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2be:	4b57      	ldr	r3, [pc, #348]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f0      	bne.n	800a2ac <HAL_RCC_OscConfig+0x104>
 800a2ca:	e000      	b.n	800a2ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d06f      	beq.n	800a3ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a2da:	4b50      	ldr	r3, [pc, #320]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f003 030c 	and.w	r3, r3, #12
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d017      	beq.n	800a316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a2e6:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d105      	bne.n	800a2fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a2f2:	4b4a      	ldr	r3, [pc, #296]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2fe:	4b47      	ldr	r3, [pc, #284]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a306:	2b0c      	cmp	r3, #12
 800a308:	d11c      	bne.n	800a344 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a30a:	4b44      	ldr	r3, [pc, #272]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d116      	bne.n	800a344 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a316:	4b41      	ldr	r3, [pc, #260]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <HAL_RCC_OscConfig+0x186>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d001      	beq.n	800a32e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e1d3      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a32e:	4b3b      	ldr	r3, [pc, #236]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4937      	ldr	r1, [pc, #220]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a342:	e03a      	b.n	800a3ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d020      	beq.n	800a38e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a34c:	4b34      	ldr	r3, [pc, #208]	; (800a420 <HAL_RCC_OscConfig+0x278>)
 800a34e:	2201      	movs	r2, #1
 800a350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a352:	f7fc ff61 	bl	8007218 <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a35a:	f7fc ff5d 	bl	8007218 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e1b4      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a36c:	4b2b      	ldr	r3, [pc, #172]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0f0      	beq.n	800a35a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a378:	4b28      	ldr	r3, [pc, #160]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	4925      	ldr	r1, [pc, #148]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	600b      	str	r3, [r1, #0]
 800a38c:	e015      	b.n	800a3ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <HAL_RCC_OscConfig+0x278>)
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7fc ff40 	bl	8007218 <HAL_GetTick>
 800a398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a39a:	e008      	b.n	800a3ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a39c:	f7fc ff3c 	bl	8007218 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d901      	bls.n	800a3ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e193      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1f0      	bne.n	800a39c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d036      	beq.n	800a434 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d016      	beq.n	800a3fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3ce:	4b15      	ldr	r3, [pc, #84]	; (800a424 <HAL_RCC_OscConfig+0x27c>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d4:	f7fc ff20 	bl	8007218 <HAL_GetTick>
 800a3d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3da:	e008      	b.n	800a3ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3dc:	f7fc ff1c 	bl	8007218 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e173      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_RCC_OscConfig+0x274>)
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0f0      	beq.n	800a3dc <HAL_RCC_OscConfig+0x234>
 800a3fa:	e01b      	b.n	800a434 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3fc:	4b09      	ldr	r3, [pc, #36]	; (800a424 <HAL_RCC_OscConfig+0x27c>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a402:	f7fc ff09 	bl	8007218 <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a408:	e00e      	b.n	800a428 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a40a:	f7fc ff05 	bl	8007218 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d907      	bls.n	800a428 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e15c      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
 800a41c:	40023800 	.word	0x40023800
 800a420:	42470000 	.word	0x42470000
 800a424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a428:	4b8a      	ldr	r3, [pc, #552]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1ea      	bne.n	800a40a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8097 	beq.w	800a570 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a446:	4b83      	ldr	r3, [pc, #524]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10f      	bne.n	800a472 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a452:	2300      	movs	r3, #0
 800a454:	60bb      	str	r3, [r7, #8]
 800a456:	4b7f      	ldr	r3, [pc, #508]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	4a7e      	ldr	r2, [pc, #504]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a460:	6413      	str	r3, [r2, #64]	; 0x40
 800a462:	4b7c      	ldr	r3, [pc, #496]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a46a:	60bb      	str	r3, [r7, #8]
 800a46c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a472:	4b79      	ldr	r3, [pc, #484]	; (800a658 <HAL_RCC_OscConfig+0x4b0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d118      	bne.n	800a4b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a47e:	4b76      	ldr	r3, [pc, #472]	; (800a658 <HAL_RCC_OscConfig+0x4b0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a75      	ldr	r2, [pc, #468]	; (800a658 <HAL_RCC_OscConfig+0x4b0>)
 800a484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a48a:	f7fc fec5 	bl	8007218 <HAL_GetTick>
 800a48e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a490:	e008      	b.n	800a4a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a492:	f7fc fec1 	bl	8007218 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d901      	bls.n	800a4a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e118      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4a4:	4b6c      	ldr	r3, [pc, #432]	; (800a658 <HAL_RCC_OscConfig+0x4b0>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f0      	beq.n	800a492 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d106      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x31e>
 800a4b8:	4b66      	ldr	r3, [pc, #408]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a65      	ldr	r2, [pc, #404]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	e01c      	b.n	800a500 <HAL_RCC_OscConfig+0x358>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d10c      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x340>
 800a4ce:	4b61      	ldr	r3, [pc, #388]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	4a60      	ldr	r2, [pc, #384]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4d4:	f043 0304 	orr.w	r3, r3, #4
 800a4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4da:	4b5e      	ldr	r3, [pc, #376]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	4a5d      	ldr	r2, [pc, #372]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e6:	e00b      	b.n	800a500 <HAL_RCC_OscConfig+0x358>
 800a4e8:	4b5a      	ldr	r3, [pc, #360]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	4a59      	ldr	r2, [pc, #356]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4ee:	f023 0301 	bic.w	r3, r3, #1
 800a4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f4:	4b57      	ldr	r3, [pc, #348]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f8:	4a56      	ldr	r2, [pc, #344]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a4fa:	f023 0304 	bic.w	r3, r3, #4
 800a4fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d015      	beq.n	800a534 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a508:	f7fc fe86 	bl	8007218 <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a50e:	e00a      	b.n	800a526 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a510:	f7fc fe82 	bl	8007218 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51e:	4293      	cmp	r3, r2
 800a520:	d901      	bls.n	800a526 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e0d7      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a526:	4b4b      	ldr	r3, [pc, #300]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ee      	beq.n	800a510 <HAL_RCC_OscConfig+0x368>
 800a532:	e014      	b.n	800a55e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a534:	f7fc fe70 	bl	8007218 <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a53c:	f7fc fe6c 	bl	8007218 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e0c1      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a552:	4b40      	ldr	r3, [pc, #256]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1ee      	bne.n	800a53c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d105      	bne.n	800a570 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a564:	4b3b      	ldr	r3, [pc, #236]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	4a3a      	ldr	r2, [pc, #232]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a56a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a56e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80ad 	beq.w	800a6d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a57a:	4b36      	ldr	r3, [pc, #216]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f003 030c 	and.w	r3, r3, #12
 800a582:	2b08      	cmp	r3, #8
 800a584:	d060      	beq.n	800a648 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d145      	bne.n	800a61a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a58e:	4b33      	ldr	r3, [pc, #204]	; (800a65c <HAL_RCC_OscConfig+0x4b4>)
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7fc fe40 	bl	8007218 <HAL_GetTick>
 800a598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a59c:	f7fc fe3c 	bl	8007218 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e093      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ae:	4b29      	ldr	r3, [pc, #164]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69da      	ldr	r2, [r3, #28]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c8:	019b      	lsls	r3, r3, #6
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	085b      	lsrs	r3, r3, #1
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	041b      	lsls	r3, r3, #16
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	061b      	lsls	r3, r3, #24
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e4:	071b      	lsls	r3, r3, #28
 800a5e6:	491b      	ldr	r1, [pc, #108]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5ec:	4b1b      	ldr	r3, [pc, #108]	; (800a65c <HAL_RCC_OscConfig+0x4b4>)
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5f2:	f7fc fe11 	bl	8007218 <HAL_GetTick>
 800a5f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5f8:	e008      	b.n	800a60c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5fa:	f7fc fe0d 	bl	8007218 <HAL_GetTick>
 800a5fe:	4602      	mov	r2, r0
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d901      	bls.n	800a60c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e064      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a60c:	4b11      	ldr	r3, [pc, #68]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0f0      	beq.n	800a5fa <HAL_RCC_OscConfig+0x452>
 800a618:	e05c      	b.n	800a6d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <HAL_RCC_OscConfig+0x4b4>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a620:	f7fc fdfa 	bl	8007218 <HAL_GetTick>
 800a624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a626:	e008      	b.n	800a63a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a628:	f7fc fdf6 	bl	8007218 <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	2b02      	cmp	r3, #2
 800a634:	d901      	bls.n	800a63a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e04d      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a63a:	4b06      	ldr	r3, [pc, #24]	; (800a654 <HAL_RCC_OscConfig+0x4ac>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f0      	bne.n	800a628 <HAL_RCC_OscConfig+0x480>
 800a646:	e045      	b.n	800a6d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d107      	bne.n	800a660 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e040      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
 800a654:	40023800 	.word	0x40023800
 800a658:	40007000 	.word	0x40007000
 800a65c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a660:	4b1f      	ldr	r3, [pc, #124]	; (800a6e0 <HAL_RCC_OscConfig+0x538>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d030      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a678:	429a      	cmp	r2, r3
 800a67a:	d129      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a686:	429a      	cmp	r2, r3
 800a688:	d122      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a690:	4013      	ands	r3, r2
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a698:	4293      	cmp	r3, r2
 800a69a:	d119      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	085b      	lsrs	r3, r3, #1
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d10f      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d001      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40023800 	.word	0x40023800

0800a6e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e07b      	b.n	800a7ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d108      	bne.n	800a710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a706:	d009      	beq.n	800a71c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	61da      	str	r2, [r3, #28]
 800a70e:	e005      	b.n	800a71c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7fa f814 	bl	8004764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a78c:	431a      	orrs	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a796:	431a      	orrs	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a0:	ea42 0103 	orr.w	r1, r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	f003 0104 	and.w	r1, r3, #4
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	f003 0210 	and.w	r2, r3, #16
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69da      	ldr	r2, [r3, #28]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b088      	sub	sp, #32
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	603b      	str	r3, [r7, #0]
 800a802:	4613      	mov	r3, r2
 800a804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a810:	2b01      	cmp	r3, #1
 800a812:	d101      	bne.n	800a818 <HAL_SPI_Transmit+0x22>
 800a814:	2302      	movs	r3, #2
 800a816:	e126      	b.n	800aa66 <HAL_SPI_Transmit+0x270>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a820:	f7fc fcfa 	bl	8007218 <HAL_GetTick>
 800a824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b01      	cmp	r3, #1
 800a834:	d002      	beq.n	800a83c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a836:	2302      	movs	r3, #2
 800a838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a83a:	e10b      	b.n	800aa54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <HAL_SPI_Transmit+0x52>
 800a842:	88fb      	ldrh	r3, [r7, #6]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a84c:	e102      	b.n	800aa54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2203      	movs	r2, #3
 800a852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	88fa      	ldrh	r2, [r7, #6]
 800a86c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a894:	d10f      	bne.n	800a8b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c0:	2b40      	cmp	r3, #64	; 0x40
 800a8c2:	d007      	beq.n	800a8d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8dc:	d14b      	bne.n	800a976 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <HAL_SPI_Transmit+0xf6>
 800a8e6:	8afb      	ldrh	r3, [r7, #22]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d13e      	bne.n	800a96a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f0:	881a      	ldrh	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fc:	1c9a      	adds	r2, r3, #2
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a906:	b29b      	uxth	r3, r3
 800a908:	3b01      	subs	r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a910:	e02b      	b.n	800a96a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d112      	bne.n	800a946 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a924:	881a      	ldrh	r2, [r3, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	1c9a      	adds	r2, r3, #2
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	3b01      	subs	r3, #1
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	86da      	strh	r2, [r3, #54]	; 0x36
 800a944:	e011      	b.n	800a96a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a946:	f7fc fc67 	bl	8007218 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	429a      	cmp	r2, r3
 800a954:	d803      	bhi.n	800a95e <HAL_SPI_Transmit+0x168>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95c:	d102      	bne.n	800a964 <HAL_SPI_Transmit+0x16e>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a968:	e074      	b.n	800aa54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ce      	bne.n	800a912 <HAL_SPI_Transmit+0x11c>
 800a974:	e04c      	b.n	800aa10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_SPI_Transmit+0x18e>
 800a97e:	8afb      	ldrh	r3, [r7, #22]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d140      	bne.n	800aa06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	330c      	adds	r3, #12
 800a98e:	7812      	ldrb	r2, [r2, #0]
 800a990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a9aa:	e02c      	b.n	800aa06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d113      	bne.n	800a9e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	7812      	ldrb	r2, [r2, #0]
 800a9c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	86da      	strh	r2, [r3, #54]	; 0x36
 800a9e0:	e011      	b.n	800aa06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9e2:	f7fc fc19 	bl	8007218 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d803      	bhi.n	800a9fa <HAL_SPI_Transmit+0x204>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f8:	d102      	bne.n	800aa00 <HAL_SPI_Transmit+0x20a>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa04:	e026      	b.n	800aa54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1cd      	bne.n	800a9ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 fafd 	bl	800b014 <SPI_EndRxTxTransaction>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2220      	movs	r2, #32
 800aa24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	613b      	str	r3, [r7, #16]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	613b      	str	r3, [r7, #16]
 800aa42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e000      	b.n	800aa54 <HAL_SPI_Transmit+0x25e>
  }

error:
 800aa52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa64:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3720      	adds	r7, #32
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d101      	bne.n	800aa90 <HAL_SPI_Transmit_DMA+0x20>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e09b      	b.n	800abc8 <HAL_SPI_Transmit_DMA+0x158>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d002      	beq.n	800aaaa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aaa8:	e089      	b.n	800abbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <HAL_SPI_Transmit_DMA+0x46>
 800aab0:	88fb      	ldrh	r3, [r7, #6]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aaba:	e080      	b.n	800abbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2203      	movs	r2, #3
 800aac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	88fa      	ldrh	r2, [r7, #6]
 800aad4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	88fa      	ldrh	r2, [r7, #6]
 800aada:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab02:	d10f      	bne.n	800ab24 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab28:	4a29      	ldr	r2, [pc, #164]	; (800abd0 <HAL_SPI_Transmit_DMA+0x160>)
 800ab2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab30:	4a28      	ldr	r2, [pc, #160]	; (800abd4 <HAL_SPI_Transmit_DMA+0x164>)
 800ab32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab38:	4a27      	ldr	r2, [pc, #156]	; (800abd8 <HAL_SPI_Transmit_DMA+0x168>)
 800ab3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab40:	2200      	movs	r2, #0
 800ab42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	330c      	adds	r3, #12
 800ab54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab5c:	f7fd f950 	bl	8007e00 <HAL_DMA_Start_IT>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00c      	beq.n	800ab80 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6a:	f043 0210 	orr.w	r2, r3, #16
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ab7e:	e01e      	b.n	800abbe <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8a:	2b40      	cmp	r3, #64	; 0x40
 800ab8c:	d007      	beq.n	800ab9e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab9c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f042 0220 	orr.w	r2, r2, #32
 800abac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0202 	orr.w	r2, r2, #2
 800abbc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	0800ae81 	.word	0x0800ae81
 800abd4:	0800add9 	.word	0x0800add9
 800abd8:	0800ae9d 	.word	0x0800ae9d

0800abdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10e      	bne.n	800ac1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d009      	beq.n	800ac1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
    return;
 800ac1a:	e0ce      	b.n	800adba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	f003 0302 	and.w	r3, r3, #2
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d009      	beq.n	800ac3a <HAL_SPI_IRQHandler+0x5e>
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d004      	beq.n	800ac3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	4798      	blx	r3
    return;
 800ac38:	e0bf      	b.n	800adba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	f003 0320 	and.w	r3, r3, #32
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <HAL_SPI_IRQHandler+0x7e>
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d105      	bne.n	800ac5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80b0 	beq.w	800adba <HAL_SPI_IRQHandler+0x1de>
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80aa 	beq.w	800adba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d023      	beq.n	800acb8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d011      	beq.n	800aca0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac80:	f043 0204 	orr.w	r2, r3, #4
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	e00b      	b.n	800acb8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aca0:	2300      	movs	r3, #0
 800aca2:	613b      	str	r3, [r7, #16]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	693b      	ldr	r3, [r7, #16]
        return;
 800acb6:	e080      	b.n	800adba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d014      	beq.n	800acec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc6:	f043 0201 	orr.w	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800acce:	2300      	movs	r3, #0
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ace8:	601a      	str	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00c      	beq.n	800ad10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfa:	f043 0208 	orr.w	r2, r3, #8
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	60bb      	str	r3, [r7, #8]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d04f      	beq.n	800adb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	f003 0302 	and.w	r3, r3, #2
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d104      	bne.n	800ad44 <HAL_SPI_IRQHandler+0x168>
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d034      	beq.n	800adae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f022 0203 	bic.w	r2, r2, #3
 800ad52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d011      	beq.n	800ad80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad60:	4a17      	ldr	r2, [pc, #92]	; (800adc0 <HAL_SPI_IRQHandler+0x1e4>)
 800ad62:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fd f911 	bl	8007f90 <HAL_DMA_Abort_IT>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d005      	beq.n	800ad80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d016      	beq.n	800adb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	; (800adc0 <HAL_SPI_IRQHandler+0x1e4>)
 800ad8e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fd f8fb 	bl	8007f90 <HAL_DMA_Abort_IT>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800adac:	e003      	b.n	800adb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7fa fb1a 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800adb4:	e000      	b.n	800adb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800adb6:	bf00      	nop
    return;
 800adb8:	bf00      	nop
  }
}
 800adba:	3720      	adds	r7, #32
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	0800aedd 	.word	0x0800aedd

0800adc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ade6:	f7fc fa17 	bl	8007218 <HAL_GetTick>
 800adea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adfa:	d03b      	beq.n	800ae74 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0220 	bic.w	r2, r2, #32
 800ae0a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0202 	bic.w	r2, r2, #2
 800ae1a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	2164      	movs	r1, #100	; 0x64
 800ae20:	6978      	ldr	r0, [r7, #20]
 800ae22:	f000 f8f7 	bl	800b014 <SPI_EndRxTxTransaction>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae30:	f043 0220 	orr.w	r2, r3, #32
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae6c:	6978      	ldr	r0, [r7, #20]
 800ae6e:	f7fa fabb 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae72:	e002      	b.n	800ae7a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ae74:	6978      	ldr	r0, [r7, #20]
 800ae76:	f7fa facd 	bl	8005414 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff ff98 	bl	800adc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae94:	bf00      	nop
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0203 	bic.w	r2, r2, #3
 800aeb8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aebe:	f043 0210 	orr.w	r2, r3, #16
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7fa fa8a 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aed4:	bf00      	nop
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7fa fa76 	bl	80053e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aefc:	bf00      	nop
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af14:	f7fc f980 	bl	8007218 <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1c:	1a9b      	subs	r3, r3, r2
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	4413      	add	r3, r2
 800af22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af24:	f7fc f978 	bl	8007218 <HAL_GetTick>
 800af28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af2a:	4b39      	ldr	r3, [pc, #228]	; (800b010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	015b      	lsls	r3, r3, #5
 800af30:	0d1b      	lsrs	r3, r3, #20
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	fb02 f303 	mul.w	r3, r2, r3
 800af38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af3a:	e054      	b.n	800afe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af42:	d050      	beq.n	800afe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af44:	f7fc f968 	bl	8007218 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	69fa      	ldr	r2, [r7, #28]
 800af50:	429a      	cmp	r2, r3
 800af52:	d902      	bls.n	800af5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d13d      	bne.n	800afd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af72:	d111      	bne.n	800af98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7c:	d004      	beq.n	800af88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af86:	d107      	bne.n	800af98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa0:	d10f      	bne.n	800afc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e017      	b.n	800b006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689a      	ldr	r2, [r3, #8]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4013      	ands	r3, r2
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	bf0c      	ite	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	2300      	movne	r3, #0
 800affa:	b2db      	uxtb	r3, r3
 800affc:	461a      	mov	r2, r3
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	429a      	cmp	r2, r3
 800b002:	d19b      	bne.n	800af3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20000030 	.word	0x20000030

0800b014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af02      	add	r7, sp, #8
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b020:	4b1b      	ldr	r3, [pc, #108]	; (800b090 <SPI_EndRxTxTransaction+0x7c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1b      	ldr	r2, [pc, #108]	; (800b094 <SPI_EndRxTxTransaction+0x80>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	0d5b      	lsrs	r3, r3, #21
 800b02c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b030:	fb02 f303 	mul.w	r3, r2, r3
 800b034:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b03e:	d112      	bne.n	800b066 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	2180      	movs	r1, #128	; 0x80
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff ff5a 	bl	800af04 <SPI_WaitFlagStateUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d016      	beq.n	800b084 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	f043 0220 	orr.w	r2, r3, #32
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e00f      	b.n	800b086 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	3b01      	subs	r3, #1
 800b070:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07c:	2b80      	cmp	r3, #128	; 0x80
 800b07e:	d0f2      	beq.n	800b066 <SPI_EndRxTxTransaction+0x52>
 800b080:	e000      	b.n	800b084 <SPI_EndRxTxTransaction+0x70>
        break;
 800b082:	bf00      	nop
  }

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000030 	.word	0x20000030
 800b094:	165e9f81 	.word	0x165e9f81

0800b098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e041      	b.n	800b12e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7f9 fbf2 	bl	80048a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f000 faa0 	bl	800b61c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d001      	beq.n	800b150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e04e      	b.n	800b1ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f042 0201 	orr.w	r2, r2, #1
 800b166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a23      	ldr	r2, [pc, #140]	; (800b1fc <HAL_TIM_Base_Start_IT+0xc4>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d022      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17a:	d01d      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a1f      	ldr	r2, [pc, #124]	; (800b200 <HAL_TIM_Base_Start_IT+0xc8>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d018      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a1e      	ldr	r2, [pc, #120]	; (800b204 <HAL_TIM_Base_Start_IT+0xcc>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d013      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4a1c      	ldr	r2, [pc, #112]	; (800b208 <HAL_TIM_Base_Start_IT+0xd0>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d00e      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a1b      	ldr	r2, [pc, #108]	; (800b20c <HAL_TIM_Base_Start_IT+0xd4>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d009      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a19      	ldr	r2, [pc, #100]	; (800b210 <HAL_TIM_Base_Start_IT+0xd8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d004      	beq.n	800b1b8 <HAL_TIM_Base_Start_IT+0x80>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a18      	ldr	r2, [pc, #96]	; (800b214 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d111      	bne.n	800b1dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b06      	cmp	r3, #6
 800b1c8:	d010      	beq.n	800b1ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f042 0201 	orr.w	r2, r2, #1
 800b1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1da:	e007      	b.n	800b1ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f042 0201 	orr.w	r2, r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	40010000 	.word	0x40010000
 800b200:	40000400 	.word	0x40000400
 800b204:	40000800 	.word	0x40000800
 800b208:	40000c00 	.word	0x40000c00
 800b20c:	40010400 	.word	0x40010400
 800b210:	40014000 	.word	0x40014000
 800b214:	40001800 	.word	0x40001800

0800b218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d122      	bne.n	800b274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d11b      	bne.n	800b274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f06f 0202 	mvn.w	r2, #2
 800b244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2201      	movs	r2, #1
 800b24a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f9bf 	bl	800b5de <HAL_TIM_IC_CaptureCallback>
 800b260:	e005      	b.n	800b26e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f9b1 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9c2 	bl	800b5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f003 0304 	and.w	r3, r3, #4
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d122      	bne.n	800b2c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b04      	cmp	r3, #4
 800b28e:	d11b      	bne.n	800b2c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f06f 0204 	mvn.w	r2, #4
 800b298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2202      	movs	r2, #2
 800b29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f995 	bl	800b5de <HAL_TIM_IC_CaptureCallback>
 800b2b4:	e005      	b.n	800b2c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f987 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f998 	bl	800b5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b08      	cmp	r3, #8
 800b2d4:	d122      	bne.n	800b31c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	2b08      	cmp	r3, #8
 800b2e2:	d11b      	bne.n	800b31c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f06f 0208 	mvn.w	r2, #8
 800b2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f96b 	bl	800b5de <HAL_TIM_IC_CaptureCallback>
 800b308:	e005      	b.n	800b316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f95d 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f96e 	bl	800b5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	f003 0310 	and.w	r3, r3, #16
 800b326:	2b10      	cmp	r3, #16
 800b328:	d122      	bne.n	800b370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f003 0310 	and.w	r3, r3, #16
 800b334:	2b10      	cmp	r3, #16
 800b336:	d11b      	bne.n	800b370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f06f 0210 	mvn.w	r2, #16
 800b340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2208      	movs	r2, #8
 800b346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f941 	bl	800b5de <HAL_TIM_IC_CaptureCallback>
 800b35c:	e005      	b.n	800b36a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f933 	bl	800b5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f944 	bl	800b5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0301 	and.w	r3, r3, #1
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0301 	and.w	r3, r3, #1
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0201 	mvn.w	r2, #1
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f90d 	bl	800b5b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a6:	2b80      	cmp	r3, #128	; 0x80
 800b3a8:	d10e      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b4:	2b80      	cmp	r3, #128	; 0x80
 800b3b6:	d107      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 faea 	bl	800b99c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d2:	2b40      	cmp	r3, #64	; 0x40
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b40      	cmp	r3, #64	; 0x40
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f909 	bl	800b606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	d10e      	bne.n	800b420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f003 0320 	and.w	r3, r3, #32
 800b40c:	2b20      	cmp	r3, #32
 800b40e:	d107      	bne.n	800b420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f06f 0220 	mvn.w	r2, #32
 800b418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fab4 	bl	800b988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_TIM_ConfigClockSource+0x1c>
 800b440:	2302      	movs	r3, #2
 800b442:	e0b4      	b.n	800b5ae <HAL_TIM_ConfigClockSource+0x186>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b46a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b47c:	d03e      	beq.n	800b4fc <HAL_TIM_ConfigClockSource+0xd4>
 800b47e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b482:	f200 8087 	bhi.w	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b48a:	f000 8086 	beq.w	800b59a <HAL_TIM_ConfigClockSource+0x172>
 800b48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b492:	d87f      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b494:	2b70      	cmp	r3, #112	; 0x70
 800b496:	d01a      	beq.n	800b4ce <HAL_TIM_ConfigClockSource+0xa6>
 800b498:	2b70      	cmp	r3, #112	; 0x70
 800b49a:	d87b      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b49c:	2b60      	cmp	r3, #96	; 0x60
 800b49e:	d050      	beq.n	800b542 <HAL_TIM_ConfigClockSource+0x11a>
 800b4a0:	2b60      	cmp	r3, #96	; 0x60
 800b4a2:	d877      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4a4:	2b50      	cmp	r3, #80	; 0x50
 800b4a6:	d03c      	beq.n	800b522 <HAL_TIM_ConfigClockSource+0xfa>
 800b4a8:	2b50      	cmp	r3, #80	; 0x50
 800b4aa:	d873      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4ac:	2b40      	cmp	r3, #64	; 0x40
 800b4ae:	d058      	beq.n	800b562 <HAL_TIM_ConfigClockSource+0x13a>
 800b4b0:	2b40      	cmp	r3, #64	; 0x40
 800b4b2:	d86f      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4b4:	2b30      	cmp	r3, #48	; 0x30
 800b4b6:	d064      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4b8:	2b30      	cmp	r3, #48	; 0x30
 800b4ba:	d86b      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d060      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4c0:	2b20      	cmp	r3, #32
 800b4c2:	d867      	bhi.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d05c      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4c8:	2b10      	cmp	r3, #16
 800b4ca:	d05a      	beq.n	800b582 <HAL_TIM_ConfigClockSource+0x15a>
 800b4cc:	e062      	b.n	800b594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	6899      	ldr	r1, [r3, #8]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f000 f9b7 	bl	800b850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	609a      	str	r2, [r3, #8]
      break;
 800b4fa:	e04f      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6818      	ldr	r0, [r3, #0]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	6899      	ldr	r1, [r3, #8]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f000 f9a0 	bl	800b850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b51e:	609a      	str	r2, [r3, #8]
      break;
 800b520:	e03c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6859      	ldr	r1, [r3, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	461a      	mov	r2, r3
 800b530:	f000 f914 	bl	800b75c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2150      	movs	r1, #80	; 0x50
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f96d 	bl	800b81a <TIM_ITRx_SetConfig>
      break;
 800b540:	e02c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	6859      	ldr	r1, [r3, #4]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	461a      	mov	r2, r3
 800b550:	f000 f933 	bl	800b7ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2160      	movs	r1, #96	; 0x60
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 f95d 	bl	800b81a <TIM_ITRx_SetConfig>
      break;
 800b560:	e01c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	6859      	ldr	r1, [r3, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	461a      	mov	r2, r3
 800b570:	f000 f8f4 	bl	800b75c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2140      	movs	r1, #64	; 0x40
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 f94d 	bl	800b81a <TIM_ITRx_SetConfig>
      break;
 800b580:	e00c      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4619      	mov	r1, r3
 800b58c:	4610      	mov	r0, r2
 800b58e:	f000 f944 	bl	800b81a <TIM_ITRx_SetConfig>
      break;
 800b592:	e003      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	73fb      	strb	r3, [r7, #15]
      break;
 800b598:	e000      	b.n	800b59c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b59a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b083      	sub	sp, #12
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5e6:	bf00      	nop
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b083      	sub	sp, #12
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5fa:	bf00      	nop
 800b5fc:	370c      	adds	r7, #12
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b60e:	bf00      	nop
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
	...

0800b61c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a40      	ldr	r2, [pc, #256]	; (800b730 <TIM_Base_SetConfig+0x114>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d013      	beq.n	800b65c <TIM_Base_SetConfig+0x40>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63a:	d00f      	beq.n	800b65c <TIM_Base_SetConfig+0x40>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a3d      	ldr	r2, [pc, #244]	; (800b734 <TIM_Base_SetConfig+0x118>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d00b      	beq.n	800b65c <TIM_Base_SetConfig+0x40>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a3c      	ldr	r2, [pc, #240]	; (800b738 <TIM_Base_SetConfig+0x11c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d007      	beq.n	800b65c <TIM_Base_SetConfig+0x40>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a3b      	ldr	r2, [pc, #236]	; (800b73c <TIM_Base_SetConfig+0x120>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d003      	beq.n	800b65c <TIM_Base_SetConfig+0x40>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a3a      	ldr	r2, [pc, #232]	; (800b740 <TIM_Base_SetConfig+0x124>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d108      	bne.n	800b66e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a2f      	ldr	r2, [pc, #188]	; (800b730 <TIM_Base_SetConfig+0x114>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d02b      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67c:	d027      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a2c      	ldr	r2, [pc, #176]	; (800b734 <TIM_Base_SetConfig+0x118>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d023      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a2b      	ldr	r2, [pc, #172]	; (800b738 <TIM_Base_SetConfig+0x11c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d01f      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a2a      	ldr	r2, [pc, #168]	; (800b73c <TIM_Base_SetConfig+0x120>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d01b      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a29      	ldr	r2, [pc, #164]	; (800b740 <TIM_Base_SetConfig+0x124>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d017      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a28      	ldr	r2, [pc, #160]	; (800b744 <TIM_Base_SetConfig+0x128>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d013      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a27      	ldr	r2, [pc, #156]	; (800b748 <TIM_Base_SetConfig+0x12c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00f      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a26      	ldr	r2, [pc, #152]	; (800b74c <TIM_Base_SetConfig+0x130>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00b      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a25      	ldr	r2, [pc, #148]	; (800b750 <TIM_Base_SetConfig+0x134>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d007      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a24      	ldr	r2, [pc, #144]	; (800b754 <TIM_Base_SetConfig+0x138>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d003      	beq.n	800b6ce <TIM_Base_SetConfig+0xb2>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a23      	ldr	r2, [pc, #140]	; (800b758 <TIM_Base_SetConfig+0x13c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d108      	bne.n	800b6e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	689a      	ldr	r2, [r3, #8]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a0a      	ldr	r2, [pc, #40]	; (800b730 <TIM_Base_SetConfig+0x114>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d003      	beq.n	800b714 <TIM_Base_SetConfig+0xf8>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <TIM_Base_SetConfig+0x124>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d103      	bne.n	800b71c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	691a      	ldr	r2, [r3, #16]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	615a      	str	r2, [r3, #20]
}
 800b722:	bf00      	nop
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	40010000 	.word	0x40010000
 800b734:	40000400 	.word	0x40000400
 800b738:	40000800 	.word	0x40000800
 800b73c:	40000c00 	.word	0x40000c00
 800b740:	40010400 	.word	0x40010400
 800b744:	40014000 	.word	0x40014000
 800b748:	40014400 	.word	0x40014400
 800b74c:	40014800 	.word	0x40014800
 800b750:	40001800 	.word	0x40001800
 800b754:	40001c00 	.word	0x40001c00
 800b758:	40002000 	.word	0x40002000

0800b75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	f023 0201 	bic.w	r2, r3, #1
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	4313      	orrs	r3, r2
 800b790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f023 030a 	bic.w	r3, r3, #10
 800b798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	621a      	str	r2, [r3, #32]
}
 800b7ae:	bf00      	nop
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b087      	sub	sp, #28
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f023 0210 	bic.w	r2, r3, #16
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6a1b      	ldr	r3, [r3, #32]
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	031b      	lsls	r3, r3, #12
 800b7ea:	697a      	ldr	r2, [r7, #20]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	693a      	ldr	r2, [r7, #16]
 800b80c:	621a      	str	r2, [r3, #32]
}
 800b80e:	bf00      	nop
 800b810:	371c      	adds	r7, #28
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b085      	sub	sp, #20
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4313      	orrs	r3, r2
 800b838:	f043 0307 	orr.w	r3, r3, #7
 800b83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	609a      	str	r2, [r3, #8]
}
 800b844:	bf00      	nop
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
 800b85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	021a      	lsls	r2, r3, #8
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	431a      	orrs	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	4313      	orrs	r3, r2
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	609a      	str	r2, [r3, #8]
}
 800b884:	bf00      	nop
 800b886:	371c      	adds	r7, #28
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d101      	bne.n	800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e05a      	b.n	800b95e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a21      	ldr	r2, [pc, #132]	; (800b96c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d022      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f4:	d01d      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a1d      	ldr	r2, [pc, #116]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d018      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a1b      	ldr	r2, [pc, #108]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d013      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a1a      	ldr	r2, [pc, #104]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d00e      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a18      	ldr	r2, [pc, #96]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d009      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a17      	ldr	r2, [pc, #92]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d004      	beq.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a15      	ldr	r2, [pc, #84]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d10c      	bne.n	800b94c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	4313      	orrs	r3, r2
 800b942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	40010000 	.word	0x40010000
 800b970:	40000400 	.word	0x40000400
 800b974:	40000800 	.word	0x40000800
 800b978:	40000c00 	.word	0x40000c00
 800b97c:	40010400 	.word	0x40010400
 800b980:	40014000 	.word	0x40014000
 800b984:	40001800 	.word	0x40001800

0800b988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e03f      	b.n	800ba42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d106      	bne.n	800b9dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7f8 ff8c 	bl	80048f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2224      	movs	r2, #36	; 0x24
 800b9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fddf 	bl	800c5b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	695a      	ldr	r2, [r3, #20]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b08a      	sub	sp, #40	; 0x28
 800ba4e:	af02      	add	r7, sp, #8
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	603b      	str	r3, [r7, #0]
 800ba56:	4613      	mov	r3, r2
 800ba58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b20      	cmp	r3, #32
 800ba68:	d17c      	bne.n	800bb64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <HAL_UART_Transmit+0x2c>
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e075      	b.n	800bb66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <HAL_UART_Transmit+0x3e>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e06e      	b.n	800bb66 <HAL_UART_Transmit+0x11c>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2221      	movs	r2, #33	; 0x21
 800ba9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba9e:	f7fb fbbb 	bl	8007218 <HAL_GetTick>
 800baa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	88fa      	ldrh	r2, [r7, #6]
 800baa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	88fa      	ldrh	r2, [r7, #6]
 800baae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bab8:	d108      	bne.n	800bacc <HAL_UART_Transmit+0x82>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d104      	bne.n	800bacc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bac2:	2300      	movs	r3, #0
 800bac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	61bb      	str	r3, [r7, #24]
 800baca:	e003      	b.n	800bad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800badc:	e02a      	b.n	800bb34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2200      	movs	r2, #0
 800bae6:	2180      	movs	r1, #128	; 0x80
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 fb1f 	bl	800c12c <UART_WaitOnFlagUntilTimeout>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e036      	b.n	800bb66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	461a      	mov	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	3302      	adds	r3, #2
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	e007      	b.n	800bb26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	781a      	ldrb	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	3301      	adds	r3, #1
 800bb24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1cf      	bne.n	800bade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2200      	movs	r2, #0
 800bb46:	2140      	movs	r1, #64	; 0x40
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 faef 	bl	800c12c <UART_WaitOnFlagUntilTimeout>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e006      	b.n	800bb66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	e000      	b.n	800bb66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb64:	2302      	movs	r3, #2
  }
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3720      	adds	r7, #32
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	60f8      	str	r0, [r7, #12]
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b20      	cmp	r3, #32
 800bb86:	d11d      	bne.n	800bbc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d002      	beq.n	800bb94 <HAL_UART_Receive_IT+0x26>
 800bb8e:	88fb      	ldrh	r3, [r7, #6]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e016      	b.n	800bbc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d101      	bne.n	800bba6 <HAL_UART_Receive_IT+0x38>
 800bba2:	2302      	movs	r3, #2
 800bba4:	e00f      	b.n	800bbc6 <HAL_UART_Receive_IT+0x58>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fb24 	bl	800c208 <UART_Start_Receive_IT>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	e000      	b.n	800bbc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bbc4:	2302      	movs	r3, #2
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
	...

0800bbd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b0ba      	sub	sp, #232	; 0xe8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc06:	f003 030f 	and.w	r3, r3, #15
 800bc0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10f      	bne.n	800bc36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d009      	beq.n	800bc36 <HAL_UART_IRQHandler+0x66>
 800bc22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc26:	f003 0320 	and.w	r3, r3, #32
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fc07 	bl	800c442 <UART_Receive_IT>
      return;
 800bc34:	e256      	b.n	800c0e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 80de 	beq.w	800bdfc <HAL_UART_IRQHandler+0x22c>
 800bc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d106      	bne.n	800bc5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 80d1 	beq.w	800bdfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <HAL_UART_IRQHandler+0xae>
 800bc66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d005      	beq.n	800bc7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc76:	f043 0201 	orr.w	r2, r3, #1
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc82:	f003 0304 	and.w	r3, r3, #4
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00b      	beq.n	800bca2 <HAL_UART_IRQHandler+0xd2>
 800bc8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	f043 0202 	orr.w	r2, r3, #2
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00b      	beq.n	800bcc6 <HAL_UART_IRQHandler+0xf6>
 800bcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	f043 0204 	orr.w	r2, r3, #4
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcca:	f003 0308 	and.w	r3, r3, #8
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d011      	beq.n	800bcf6 <HAL_UART_IRQHandler+0x126>
 800bcd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d105      	bne.n	800bcea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bcde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d005      	beq.n	800bcf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	f043 0208 	orr.w	r2, r3, #8
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 81ed 	beq.w	800c0da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd04:	f003 0320 	and.w	r3, r3, #32
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d008      	beq.n	800bd1e <HAL_UART_IRQHandler+0x14e>
 800bd0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd10:	f003 0320 	and.w	r3, r3, #32
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fb92 	bl	800c442 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	695b      	ldr	r3, [r3, #20]
 800bd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	bf0c      	ite	eq
 800bd2c:	2301      	moveq	r3, #1
 800bd2e:	2300      	movne	r3, #0
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3a:	f003 0308 	and.w	r3, r3, #8
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d103      	bne.n	800bd4a <HAL_UART_IRQHandler+0x17a>
 800bd42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d04f      	beq.n	800bdea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa9a 	bl	800c284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5a:	2b40      	cmp	r3, #64	; 0x40
 800bd5c:	d141      	bne.n	800bde2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3314      	adds	r3, #20
 800bd64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3314      	adds	r3, #20
 800bd86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bda2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1d9      	bne.n	800bd5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d013      	beq.n	800bdda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb6:	4a7d      	ldr	r2, [pc, #500]	; (800bfac <HAL_UART_IRQHandler+0x3dc>)
 800bdb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fc f8e6 	bl	8007f90 <HAL_DMA_Abort_IT>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d016      	beq.n	800bdf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd8:	e00e      	b.n	800bdf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f990 	bl	800c100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde0:	e00a      	b.n	800bdf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f98c 	bl	800c100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde8:	e006      	b.n	800bdf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f988 	bl	800c100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bdf6:	e170      	b.n	800c0da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf8:	bf00      	nop
    return;
 800bdfa:	e16e      	b.n	800c0da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be00:	2b01      	cmp	r3, #1
 800be02:	f040 814a 	bne.w	800c09a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0a:	f003 0310 	and.w	r3, r3, #16
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f000 8143 	beq.w	800c09a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be18:	f003 0310 	and.w	r3, r3, #16
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 813c 	beq.w	800c09a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be22:	2300      	movs	r3, #0
 800be24:	60bb      	str	r3, [r7, #8]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	60bb      	str	r3, [r7, #8]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	60bb      	str	r3, [r7, #8]
 800be36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be42:	2b40      	cmp	r3, #64	; 0x40
 800be44:	f040 80b4 	bne.w	800bfb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8140 	beq.w	800c0de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be66:	429a      	cmp	r2, r3
 800be68:	f080 8139 	bcs.w	800c0de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7e:	f000 8088 	beq.w	800bf92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	330c      	adds	r3, #12
 800be88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800beae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800beb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800beba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1d9      	bne.n	800be82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3314      	adds	r3, #20
 800bed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3314      	adds	r3, #20
 800beee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800befa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e1      	bne.n	800bece <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3314      	adds	r3, #20
 800bf10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3314      	adds	r3, #20
 800bf2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf36:	e841 2300 	strex	r3, r2, [r1]
 800bf3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1e3      	bne.n	800bf0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	330c      	adds	r3, #12
 800bf56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf62:	f023 0310 	bic.w	r3, r3, #16
 800bf66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	330c      	adds	r3, #12
 800bf70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf74:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bf82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e3      	bne.n	800bf50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fb ff8f 	bl	8007eb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f8b6 	bl	800c114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfa8:	e099      	b.n	800c0de <HAL_UART_IRQHandler+0x50e>
 800bfaa:	bf00      	nop
 800bfac:	0800c34b 	.word	0x0800c34b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	1ad3      	subs	r3, r2, r3
 800bfbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 808b 	beq.w	800c0e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bfcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 8086 	beq.w	800c0e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	330c      	adds	r3, #12
 800bff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bffa:	647a      	str	r2, [r7, #68]	; 0x44
 800bffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c002:	e841 2300 	strex	r3, r2, [r1]
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1e3      	bne.n	800bfd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3314      	adds	r3, #20
 800c014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	623b      	str	r3, [r7, #32]
   return(result);
 800c01e:	6a3b      	ldr	r3, [r7, #32]
 800c020:	f023 0301 	bic.w	r3, r3, #1
 800c024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3314      	adds	r3, #20
 800c02e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c032:	633a      	str	r2, [r7, #48]	; 0x30
 800c034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e3      	bne.n	800c00e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2220      	movs	r2, #32
 800c04a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	330c      	adds	r3, #12
 800c05a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	60fb      	str	r3, [r7, #12]
   return(result);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0310 	bic.w	r3, r3, #16
 800c06a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	330c      	adds	r3, #12
 800c074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c078:	61fa      	str	r2, [r7, #28]
 800c07a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07c:	69b9      	ldr	r1, [r7, #24]
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	e841 2300 	strex	r3, r2, [r1]
 800c084:	617b      	str	r3, [r7, #20]
   return(result);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1e3      	bne.n	800c054 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c08c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f83e 	bl	800c114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c098:	e023      	b.n	800c0e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d009      	beq.n	800c0ba <HAL_UART_IRQHandler+0x4ea>
 800c0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f95d 	bl	800c372 <UART_Transmit_IT>
    return;
 800c0b8:	e014      	b.n	800c0e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00e      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x514>
 800c0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f99d 	bl	800c412 <UART_EndTransmit_IT>
    return;
 800c0d8:	e004      	b.n	800c0e4 <HAL_UART_IRQHandler+0x514>
    return;
 800c0da:	bf00      	nop
 800c0dc:	e002      	b.n	800c0e4 <HAL_UART_IRQHandler+0x514>
      return;
 800c0de:	bf00      	nop
 800c0e0:	e000      	b.n	800c0e4 <HAL_UART_IRQHandler+0x514>
      return;
 800c0e2:	bf00      	nop
  }
}
 800c0e4:	37e8      	adds	r7, #232	; 0xe8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop

0800c0ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b090      	sub	sp, #64	; 0x40
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	603b      	str	r3, [r7, #0]
 800c138:	4613      	mov	r3, r2
 800c13a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c13c:	e050      	b.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c144:	d04c      	beq.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d007      	beq.n	800c15c <UART_WaitOnFlagUntilTimeout+0x30>
 800c14c:	f7fb f864 	bl	8007218 <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c158:	429a      	cmp	r2, r3
 800c15a:	d241      	bcs.n	800c1e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	330c      	adds	r3, #12
 800c162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c166:	e853 3f00 	ldrex	r3, [r3]
 800c16a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	330c      	adds	r3, #12
 800c17a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c17c:	637a      	str	r2, [r7, #52]	; 0x34
 800c17e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c184:	e841 2300 	strex	r3, r2, [r1]
 800c188:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e5      	bne.n	800c15c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3314      	adds	r3, #20
 800c196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	e853 3f00 	ldrex	r3, [r3]
 800c19e:	613b      	str	r3, [r7, #16]
   return(result);
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f023 0301 	bic.w	r3, r3, #1
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3314      	adds	r3, #20
 800c1ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b0:	623a      	str	r2, [r7, #32]
 800c1b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b4:	69f9      	ldr	r1, [r7, #28]
 800c1b6:	6a3a      	ldr	r2, [r7, #32]
 800c1b8:	e841 2300 	strex	r3, r2, [r1]
 800c1bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1e5      	bne.n	800c190 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2220      	movs	r2, #32
 800c1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	e00f      	b.n	800c200 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	bf0c      	ite	eq
 800c1f0:	2301      	moveq	r3, #1
 800c1f2:	2300      	movne	r3, #0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	79fb      	ldrb	r3, [r7, #7]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d09f      	beq.n	800c13e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3740      	adds	r7, #64	; 0x40
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	4613      	mov	r3, r2
 800c214:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	88fa      	ldrh	r2, [r7, #6]
 800c220:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	88fa      	ldrh	r2, [r7, #6]
 800c226:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2222      	movs	r2, #34	; 0x22
 800c232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d007      	beq.n	800c256 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68da      	ldr	r2, [r3, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c254:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f042 0201 	orr.w	r2, r2, #1
 800c264:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68da      	ldr	r2, [r3, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f042 0220 	orr.w	r2, r2, #32
 800c274:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c284:	b480      	push	{r7}
 800c286:	b095      	sub	sp, #84	; 0x54
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	330c      	adds	r3, #12
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2ac:	643a      	str	r2, [r7, #64]	; 0x40
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2b4:	e841 2300 	strex	r3, r2, [r1]
 800c2b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d1e5      	bne.n	800c28c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3314      	adds	r3, #20
 800c2de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2e8:	e841 2300 	strex	r3, r2, [r1]
 800c2ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e5      	bne.n	800c2c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d119      	bne.n	800c330 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	330c      	adds	r3, #12
 800c302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	e853 3f00 	ldrex	r3, [r3]
 800c30a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	f023 0310 	bic.w	r3, r3, #16
 800c312:	647b      	str	r3, [r7, #68]	; 0x44
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	330c      	adds	r3, #12
 800c31a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c31c:	61ba      	str	r2, [r7, #24]
 800c31e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6979      	ldr	r1, [r7, #20]
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	613b      	str	r3, [r7, #16]
   return(result);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e5      	bne.n	800c2fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c33e:	bf00      	nop
 800c340:	3754      	adds	r7, #84	; 0x54
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f7ff fecb 	bl	800c100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c36a:	bf00      	nop
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c380:	b2db      	uxtb	r3, r3
 800c382:	2b21      	cmp	r3, #33	; 0x21
 800c384:	d13e      	bne.n	800c404 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c38e:	d114      	bne.n	800c3ba <UART_Transmit_IT+0x48>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d110      	bne.n	800c3ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6a1b      	ldr	r3, [r3, #32]
 800c39c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	881b      	ldrh	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	1c9a      	adds	r2, r3, #2
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	621a      	str	r2, [r3, #32]
 800c3b8:	e008      	b.n	800c3cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	1c59      	adds	r1, r3, #1
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6211      	str	r1, [r2, #32]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10f      	bne.n	800c400 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68da      	ldr	r2, [r3, #12]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	e000      	b.n	800c406 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c404:	2302      	movs	r3, #2
  }
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c428:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f7ff fe5a 	bl	800c0ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08c      	sub	sp, #48	; 0x30
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b22      	cmp	r3, #34	; 0x22
 800c454:	f040 80ab 	bne.w	800c5ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c460:	d117      	bne.n	800c492 <UART_Receive_IT+0x50>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d113      	bne.n	800c492 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c480:	b29a      	uxth	r2, r3
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48a:	1c9a      	adds	r2, r3, #2
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	629a      	str	r2, [r3, #40]	; 0x28
 800c490:	e026      	b.n	800c4e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4a4:	d007      	beq.n	800c4b6 <UART_Receive_IT+0x74>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <UART_Receive_IT+0x82>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e008      	b.n	800c4d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d15a      	bne.n	800c5aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68da      	ldr	r2, [r3, #12]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f022 0220 	bic.w	r2, r2, #32
 800c502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	695a      	ldr	r2, [r3, #20]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f022 0201 	bic.w	r2, r2, #1
 800c522:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c530:	2b01      	cmp	r3, #1
 800c532:	d135      	bne.n	800c5a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	330c      	adds	r3, #12
 800c540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	613b      	str	r3, [r7, #16]
   return(result);
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f023 0310 	bic.w	r3, r3, #16
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	330c      	adds	r3, #12
 800c558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c55a:	623a      	str	r2, [r7, #32]
 800c55c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	69f9      	ldr	r1, [r7, #28]
 800c560:	6a3a      	ldr	r2, [r7, #32]
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	61bb      	str	r3, [r7, #24]
   return(result);
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e5      	bne.n	800c53a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0310 	and.w	r3, r3, #16
 800c578:	2b10      	cmp	r3, #16
 800c57a:	d10a      	bne.n	800c592 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c57c:	2300      	movs	r3, #0
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c596:	4619      	mov	r1, r3
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f7ff fdbb 	bl	800c114 <HAL_UARTEx_RxEventCallback>
 800c59e:	e002      	b.n	800c5a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7f7 feff 	bl	80043a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e002      	b.n	800c5b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e000      	b.n	800c5b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c5ae:	2302      	movs	r3, #2
  }
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3730      	adds	r7, #48	; 0x30
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5bc:	b0c0      	sub	sp, #256	; 0x100
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5d4:	68d9      	ldr	r1, [r3, #12]
 800c5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	ea40 0301 	orr.w	r3, r0, r1
 800c5e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c5e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5e6:	689a      	ldr	r2, [r3, #8]
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	431a      	orrs	r2, r3
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c610:	f021 010c 	bic.w	r1, r1, #12
 800c614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c61e:	430b      	orrs	r3, r1
 800c620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c632:	6999      	ldr	r1, [r3, #24]
 800c634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	ea40 0301 	orr.w	r3, r0, r1
 800c63e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	4b8f      	ldr	r3, [pc, #572]	; (800c884 <UART_SetConfig+0x2cc>)
 800c648:	429a      	cmp	r2, r3
 800c64a:	d005      	beq.n	800c658 <UART_SetConfig+0xa0>
 800c64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	4b8d      	ldr	r3, [pc, #564]	; (800c888 <UART_SetConfig+0x2d0>)
 800c654:	429a      	cmp	r2, r3
 800c656:	d104      	bne.n	800c662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c658:	f7fd fb62 	bl	8009d20 <HAL_RCC_GetPCLK2Freq>
 800c65c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c660:	e003      	b.n	800c66a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c662:	f7fd fb49 	bl	8009cf8 <HAL_RCC_GetPCLK1Freq>
 800c666:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c66e:	69db      	ldr	r3, [r3, #28]
 800c670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c674:	f040 810c 	bne.w	800c890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c67c:	2200      	movs	r2, #0
 800c67e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c682:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c68a:	4622      	mov	r2, r4
 800c68c:	462b      	mov	r3, r5
 800c68e:	1891      	adds	r1, r2, r2
 800c690:	65b9      	str	r1, [r7, #88]	; 0x58
 800c692:	415b      	adcs	r3, r3
 800c694:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c69a:	4621      	mov	r1, r4
 800c69c:	eb12 0801 	adds.w	r8, r2, r1
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	eb43 0901 	adc.w	r9, r3, r1
 800c6a6:	f04f 0200 	mov.w	r2, #0
 800c6aa:	f04f 0300 	mov.w	r3, #0
 800c6ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6ba:	4690      	mov	r8, r2
 800c6bc:	4699      	mov	r9, r3
 800c6be:	4623      	mov	r3, r4
 800c6c0:	eb18 0303 	adds.w	r3, r8, r3
 800c6c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	eb49 0303 	adc.w	r3, r9, r3
 800c6ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c6de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c6e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	18db      	adds	r3, r3, r3
 800c6ea:	653b      	str	r3, [r7, #80]	; 0x50
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	eb42 0303 	adc.w	r3, r2, r3
 800c6f2:	657b      	str	r3, [r7, #84]	; 0x54
 800c6f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c6f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c6fc:	f7f4 fb14 	bl	8000d28 <__aeabi_uldivmod>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4b61      	ldr	r3, [pc, #388]	; (800c88c <UART_SetConfig+0x2d4>)
 800c706:	fba3 2302 	umull	r2, r3, r3, r2
 800c70a:	095b      	lsrs	r3, r3, #5
 800c70c:	011c      	lsls	r4, r3, #4
 800c70e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c712:	2200      	movs	r2, #0
 800c714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c718:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c71c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c720:	4642      	mov	r2, r8
 800c722:	464b      	mov	r3, r9
 800c724:	1891      	adds	r1, r2, r2
 800c726:	64b9      	str	r1, [r7, #72]	; 0x48
 800c728:	415b      	adcs	r3, r3
 800c72a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c72c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c730:	4641      	mov	r1, r8
 800c732:	eb12 0a01 	adds.w	sl, r2, r1
 800c736:	4649      	mov	r1, r9
 800c738:	eb43 0b01 	adc.w	fp, r3, r1
 800c73c:	f04f 0200 	mov.w	r2, #0
 800c740:	f04f 0300 	mov.w	r3, #0
 800c744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c74c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c750:	4692      	mov	sl, r2
 800c752:	469b      	mov	fp, r3
 800c754:	4643      	mov	r3, r8
 800c756:	eb1a 0303 	adds.w	r3, sl, r3
 800c75a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c75e:	464b      	mov	r3, r9
 800c760:	eb4b 0303 	adc.w	r3, fp, r3
 800c764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c774:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c77c:	460b      	mov	r3, r1
 800c77e:	18db      	adds	r3, r3, r3
 800c780:	643b      	str	r3, [r7, #64]	; 0x40
 800c782:	4613      	mov	r3, r2
 800c784:	eb42 0303 	adc.w	r3, r2, r3
 800c788:	647b      	str	r3, [r7, #68]	; 0x44
 800c78a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c78e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c792:	f7f4 fac9 	bl	8000d28 <__aeabi_uldivmod>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	4611      	mov	r1, r2
 800c79c:	4b3b      	ldr	r3, [pc, #236]	; (800c88c <UART_SetConfig+0x2d4>)
 800c79e:	fba3 2301 	umull	r2, r3, r3, r1
 800c7a2:	095b      	lsrs	r3, r3, #5
 800c7a4:	2264      	movs	r2, #100	; 0x64
 800c7a6:	fb02 f303 	mul.w	r3, r2, r3
 800c7aa:	1acb      	subs	r3, r1, r3
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c7b2:	4b36      	ldr	r3, [pc, #216]	; (800c88c <UART_SetConfig+0x2d4>)
 800c7b4:	fba3 2302 	umull	r2, r3, r3, r2
 800c7b8:	095b      	lsrs	r3, r3, #5
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c7c0:	441c      	add	r4, r3
 800c7c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c7d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	464b      	mov	r3, r9
 800c7d8:	1891      	adds	r1, r2, r2
 800c7da:	63b9      	str	r1, [r7, #56]	; 0x38
 800c7dc:	415b      	adcs	r3, r3
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c7e4:	4641      	mov	r1, r8
 800c7e6:	1851      	adds	r1, r2, r1
 800c7e8:	6339      	str	r1, [r7, #48]	; 0x30
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	414b      	adcs	r3, r1
 800c7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c7f0:	f04f 0200 	mov.w	r2, #0
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c7fc:	4659      	mov	r1, fp
 800c7fe:	00cb      	lsls	r3, r1, #3
 800c800:	4651      	mov	r1, sl
 800c802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c806:	4651      	mov	r1, sl
 800c808:	00ca      	lsls	r2, r1, #3
 800c80a:	4610      	mov	r0, r2
 800c80c:	4619      	mov	r1, r3
 800c80e:	4603      	mov	r3, r0
 800c810:	4642      	mov	r2, r8
 800c812:	189b      	adds	r3, r3, r2
 800c814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c818:	464b      	mov	r3, r9
 800c81a:	460a      	mov	r2, r1
 800c81c:	eb42 0303 	adc.w	r3, r2, r3
 800c820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c830:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c838:	460b      	mov	r3, r1
 800c83a:	18db      	adds	r3, r3, r3
 800c83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c83e:	4613      	mov	r3, r2
 800c840:	eb42 0303 	adc.w	r3, r2, r3
 800c844:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c84a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c84e:	f7f4 fa6b 	bl	8000d28 <__aeabi_uldivmod>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <UART_SetConfig+0x2d4>)
 800c858:	fba3 1302 	umull	r1, r3, r3, r2
 800c85c:	095b      	lsrs	r3, r3, #5
 800c85e:	2164      	movs	r1, #100	; 0x64
 800c860:	fb01 f303 	mul.w	r3, r1, r3
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	3332      	adds	r3, #50	; 0x32
 800c86a:	4a08      	ldr	r2, [pc, #32]	; (800c88c <UART_SetConfig+0x2d4>)
 800c86c:	fba2 2303 	umull	r2, r3, r2, r3
 800c870:	095b      	lsrs	r3, r3, #5
 800c872:	f003 0207 	and.w	r2, r3, #7
 800c876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4422      	add	r2, r4
 800c87e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c880:	e106      	b.n	800ca90 <UART_SetConfig+0x4d8>
 800c882:	bf00      	nop
 800c884:	40011000 	.word	0x40011000
 800c888:	40011400 	.word	0x40011400
 800c88c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c894:	2200      	movs	r2, #0
 800c896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c89a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c89e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c8a2:	4642      	mov	r2, r8
 800c8a4:	464b      	mov	r3, r9
 800c8a6:	1891      	adds	r1, r2, r2
 800c8a8:	6239      	str	r1, [r7, #32]
 800c8aa:	415b      	adcs	r3, r3
 800c8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8b2:	4641      	mov	r1, r8
 800c8b4:	1854      	adds	r4, r2, r1
 800c8b6:	4649      	mov	r1, r9
 800c8b8:	eb43 0501 	adc.w	r5, r3, r1
 800c8bc:	f04f 0200 	mov.w	r2, #0
 800c8c0:	f04f 0300 	mov.w	r3, #0
 800c8c4:	00eb      	lsls	r3, r5, #3
 800c8c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8ca:	00e2      	lsls	r2, r4, #3
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	461d      	mov	r5, r3
 800c8d0:	4643      	mov	r3, r8
 800c8d2:	18e3      	adds	r3, r4, r3
 800c8d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8d8:	464b      	mov	r3, r9
 800c8da:	eb45 0303 	adc.w	r3, r5, r3
 800c8de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c8ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	f04f 0300 	mov.w	r3, #0
 800c8fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c8fe:	4629      	mov	r1, r5
 800c900:	008b      	lsls	r3, r1, #2
 800c902:	4621      	mov	r1, r4
 800c904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c908:	4621      	mov	r1, r4
 800c90a:	008a      	lsls	r2, r1, #2
 800c90c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c910:	f7f4 fa0a 	bl	8000d28 <__aeabi_uldivmod>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4b60      	ldr	r3, [pc, #384]	; (800ca9c <UART_SetConfig+0x4e4>)
 800c91a:	fba3 2302 	umull	r2, r3, r3, r2
 800c91e:	095b      	lsrs	r3, r3, #5
 800c920:	011c      	lsls	r4, r3, #4
 800c922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c926:	2200      	movs	r2, #0
 800c928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c92c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c934:	4642      	mov	r2, r8
 800c936:	464b      	mov	r3, r9
 800c938:	1891      	adds	r1, r2, r2
 800c93a:	61b9      	str	r1, [r7, #24]
 800c93c:	415b      	adcs	r3, r3
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c944:	4641      	mov	r1, r8
 800c946:	1851      	adds	r1, r2, r1
 800c948:	6139      	str	r1, [r7, #16]
 800c94a:	4649      	mov	r1, r9
 800c94c:	414b      	adcs	r3, r1
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	f04f 0200 	mov.w	r2, #0
 800c954:	f04f 0300 	mov.w	r3, #0
 800c958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c95c:	4659      	mov	r1, fp
 800c95e:	00cb      	lsls	r3, r1, #3
 800c960:	4651      	mov	r1, sl
 800c962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c966:	4651      	mov	r1, sl
 800c968:	00ca      	lsls	r2, r1, #3
 800c96a:	4610      	mov	r0, r2
 800c96c:	4619      	mov	r1, r3
 800c96e:	4603      	mov	r3, r0
 800c970:	4642      	mov	r2, r8
 800c972:	189b      	adds	r3, r3, r2
 800c974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c978:	464b      	mov	r3, r9
 800c97a:	460a      	mov	r2, r1
 800c97c:	eb42 0303 	adc.w	r3, r2, r3
 800c980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c98e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c990:	f04f 0200 	mov.w	r2, #0
 800c994:	f04f 0300 	mov.w	r3, #0
 800c998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c99c:	4649      	mov	r1, r9
 800c99e:	008b      	lsls	r3, r1, #2
 800c9a0:	4641      	mov	r1, r8
 800c9a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c9a6:	4641      	mov	r1, r8
 800c9a8:	008a      	lsls	r2, r1, #2
 800c9aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c9ae:	f7f4 f9bb 	bl	8000d28 <__aeabi_uldivmod>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4b38      	ldr	r3, [pc, #224]	; (800ca9c <UART_SetConfig+0x4e4>)
 800c9ba:	fba3 2301 	umull	r2, r3, r3, r1
 800c9be:	095b      	lsrs	r3, r3, #5
 800c9c0:	2264      	movs	r2, #100	; 0x64
 800c9c2:	fb02 f303 	mul.w	r3, r2, r3
 800c9c6:	1acb      	subs	r3, r1, r3
 800c9c8:	011b      	lsls	r3, r3, #4
 800c9ca:	3332      	adds	r3, #50	; 0x32
 800c9cc:	4a33      	ldr	r2, [pc, #204]	; (800ca9c <UART_SetConfig+0x4e4>)
 800c9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d2:	095b      	lsrs	r3, r3, #5
 800c9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9d8:	441c      	add	r4, r3
 800c9da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9de:	2200      	movs	r2, #0
 800c9e0:	673b      	str	r3, [r7, #112]	; 0x70
 800c9e2:	677a      	str	r2, [r7, #116]	; 0x74
 800c9e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c9e8:	4642      	mov	r2, r8
 800c9ea:	464b      	mov	r3, r9
 800c9ec:	1891      	adds	r1, r2, r2
 800c9ee:	60b9      	str	r1, [r7, #8]
 800c9f0:	415b      	adcs	r3, r3
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9f8:	4641      	mov	r1, r8
 800c9fa:	1851      	adds	r1, r2, r1
 800c9fc:	6039      	str	r1, [r7, #0]
 800c9fe:	4649      	mov	r1, r9
 800ca00:	414b      	adcs	r3, r1
 800ca02:	607b      	str	r3, [r7, #4]
 800ca04:	f04f 0200 	mov.w	r2, #0
 800ca08:	f04f 0300 	mov.w	r3, #0
 800ca0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ca10:	4659      	mov	r1, fp
 800ca12:	00cb      	lsls	r3, r1, #3
 800ca14:	4651      	mov	r1, sl
 800ca16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca1a:	4651      	mov	r1, sl
 800ca1c:	00ca      	lsls	r2, r1, #3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4619      	mov	r1, r3
 800ca22:	4603      	mov	r3, r0
 800ca24:	4642      	mov	r2, r8
 800ca26:	189b      	adds	r3, r3, r2
 800ca28:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	460a      	mov	r2, r1
 800ca2e:	eb42 0303 	adc.w	r3, r2, r3
 800ca32:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ca3e:	667a      	str	r2, [r7, #100]	; 0x64
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	008b      	lsls	r3, r1, #2
 800ca50:	4641      	mov	r1, r8
 800ca52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca56:	4641      	mov	r1, r8
 800ca58:	008a      	lsls	r2, r1, #2
 800ca5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca5e:	f7f4 f963 	bl	8000d28 <__aeabi_uldivmod>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <UART_SetConfig+0x4e4>)
 800ca68:	fba3 1302 	umull	r1, r3, r3, r2
 800ca6c:	095b      	lsrs	r3, r3, #5
 800ca6e:	2164      	movs	r1, #100	; 0x64
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	011b      	lsls	r3, r3, #4
 800ca78:	3332      	adds	r3, #50	; 0x32
 800ca7a:	4a08      	ldr	r2, [pc, #32]	; (800ca9c <UART_SetConfig+0x4e4>)
 800ca7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca80:	095b      	lsrs	r3, r3, #5
 800ca82:	f003 020f 	and.w	r2, r3, #15
 800ca86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4422      	add	r2, r4
 800ca8e:	609a      	str	r2, [r3, #8]
}
 800ca90:	bf00      	nop
 800ca92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ca96:	46bd      	mov	sp, r7
 800ca98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca9c:	51eb851f 	.word	0x51eb851f

0800caa0 <__cvt>:
 800caa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caa4:	ec55 4b10 	vmov	r4, r5, d0
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	460e      	mov	r6, r1
 800caac:	4619      	mov	r1, r3
 800caae:	462b      	mov	r3, r5
 800cab0:	bfbb      	ittet	lt
 800cab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cab6:	461d      	movlt	r5, r3
 800cab8:	2300      	movge	r3, #0
 800caba:	232d      	movlt	r3, #45	; 0x2d
 800cabc:	700b      	strb	r3, [r1, #0]
 800cabe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cac0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cac4:	4691      	mov	r9, r2
 800cac6:	f023 0820 	bic.w	r8, r3, #32
 800caca:	bfbc      	itt	lt
 800cacc:	4622      	movlt	r2, r4
 800cace:	4614      	movlt	r4, r2
 800cad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cad4:	d005      	beq.n	800cae2 <__cvt+0x42>
 800cad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cada:	d100      	bne.n	800cade <__cvt+0x3e>
 800cadc:	3601      	adds	r6, #1
 800cade:	2102      	movs	r1, #2
 800cae0:	e000      	b.n	800cae4 <__cvt+0x44>
 800cae2:	2103      	movs	r1, #3
 800cae4:	ab03      	add	r3, sp, #12
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	ab02      	add	r3, sp, #8
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	ec45 4b10 	vmov	d0, r4, r5
 800caf0:	4653      	mov	r3, sl
 800caf2:	4632      	mov	r2, r6
 800caf4:	f001 f88c 	bl	800dc10 <_dtoa_r>
 800caf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cafc:	4607      	mov	r7, r0
 800cafe:	d102      	bne.n	800cb06 <__cvt+0x66>
 800cb00:	f019 0f01 	tst.w	r9, #1
 800cb04:	d022      	beq.n	800cb4c <__cvt+0xac>
 800cb06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb0a:	eb07 0906 	add.w	r9, r7, r6
 800cb0e:	d110      	bne.n	800cb32 <__cvt+0x92>
 800cb10:	783b      	ldrb	r3, [r7, #0]
 800cb12:	2b30      	cmp	r3, #48	; 0x30
 800cb14:	d10a      	bne.n	800cb2c <__cvt+0x8c>
 800cb16:	2200      	movs	r2, #0
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f3 fff3 	bl	8000b08 <__aeabi_dcmpeq>
 800cb22:	b918      	cbnz	r0, 800cb2c <__cvt+0x8c>
 800cb24:	f1c6 0601 	rsb	r6, r6, #1
 800cb28:	f8ca 6000 	str.w	r6, [sl]
 800cb2c:	f8da 3000 	ldr.w	r3, [sl]
 800cb30:	4499      	add	r9, r3
 800cb32:	2200      	movs	r2, #0
 800cb34:	2300      	movs	r3, #0
 800cb36:	4620      	mov	r0, r4
 800cb38:	4629      	mov	r1, r5
 800cb3a:	f7f3 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 800cb3e:	b108      	cbz	r0, 800cb44 <__cvt+0xa4>
 800cb40:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb44:	2230      	movs	r2, #48	; 0x30
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	454b      	cmp	r3, r9
 800cb4a:	d307      	bcc.n	800cb5c <__cvt+0xbc>
 800cb4c:	9b03      	ldr	r3, [sp, #12]
 800cb4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb50:	1bdb      	subs	r3, r3, r7
 800cb52:	4638      	mov	r0, r7
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	b004      	add	sp, #16
 800cb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5c:	1c59      	adds	r1, r3, #1
 800cb5e:	9103      	str	r1, [sp, #12]
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	e7f0      	b.n	800cb46 <__cvt+0xa6>

0800cb64 <__exponent>:
 800cb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb66:	4603      	mov	r3, r0
 800cb68:	2900      	cmp	r1, #0
 800cb6a:	bfb8      	it	lt
 800cb6c:	4249      	neglt	r1, r1
 800cb6e:	f803 2b02 	strb.w	r2, [r3], #2
 800cb72:	bfb4      	ite	lt
 800cb74:	222d      	movlt	r2, #45	; 0x2d
 800cb76:	222b      	movge	r2, #43	; 0x2b
 800cb78:	2909      	cmp	r1, #9
 800cb7a:	7042      	strb	r2, [r0, #1]
 800cb7c:	dd2a      	ble.n	800cbd4 <__exponent+0x70>
 800cb7e:	f10d 0207 	add.w	r2, sp, #7
 800cb82:	4617      	mov	r7, r2
 800cb84:	260a      	movs	r6, #10
 800cb86:	4694      	mov	ip, r2
 800cb88:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb8c:	fb06 1415 	mls	r4, r6, r5, r1
 800cb90:	3430      	adds	r4, #48	; 0x30
 800cb92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb96:	460c      	mov	r4, r1
 800cb98:	2c63      	cmp	r4, #99	; 0x63
 800cb9a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cb9e:	4629      	mov	r1, r5
 800cba0:	dcf1      	bgt.n	800cb86 <__exponent+0x22>
 800cba2:	3130      	adds	r1, #48	; 0x30
 800cba4:	f1ac 0402 	sub.w	r4, ip, #2
 800cba8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cbac:	1c41      	adds	r1, r0, #1
 800cbae:	4622      	mov	r2, r4
 800cbb0:	42ba      	cmp	r2, r7
 800cbb2:	d30a      	bcc.n	800cbca <__exponent+0x66>
 800cbb4:	f10d 0209 	add.w	r2, sp, #9
 800cbb8:	eba2 020c 	sub.w	r2, r2, ip
 800cbbc:	42bc      	cmp	r4, r7
 800cbbe:	bf88      	it	hi
 800cbc0:	2200      	movhi	r2, #0
 800cbc2:	4413      	add	r3, r2
 800cbc4:	1a18      	subs	r0, r3, r0
 800cbc6:	b003      	add	sp, #12
 800cbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cbce:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cbd2:	e7ed      	b.n	800cbb0 <__exponent+0x4c>
 800cbd4:	2330      	movs	r3, #48	; 0x30
 800cbd6:	3130      	adds	r1, #48	; 0x30
 800cbd8:	7083      	strb	r3, [r0, #2]
 800cbda:	70c1      	strb	r1, [r0, #3]
 800cbdc:	1d03      	adds	r3, r0, #4
 800cbde:	e7f1      	b.n	800cbc4 <__exponent+0x60>

0800cbe0 <_printf_float>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	ed2d 8b02 	vpush	{d8}
 800cbe8:	b08d      	sub	sp, #52	; 0x34
 800cbea:	460c      	mov	r4, r1
 800cbec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	461f      	mov	r7, r3
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	f000 fecd 	bl	800d994 <_localeconv_r>
 800cbfa:	f8d0 a000 	ldr.w	sl, [r0]
 800cbfe:	4650      	mov	r0, sl
 800cc00:	f7f3 fb56 	bl	80002b0 <strlen>
 800cc04:	2300      	movs	r3, #0
 800cc06:	930a      	str	r3, [sp, #40]	; 0x28
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	9305      	str	r3, [sp, #20]
 800cc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc10:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc14:	3307      	adds	r3, #7
 800cc16:	f023 0307 	bic.w	r3, r3, #7
 800cc1a:	f103 0208 	add.w	r2, r3, #8
 800cc1e:	f8c8 2000 	str.w	r2, [r8]
 800cc22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc2a:	9307      	str	r3, [sp, #28]
 800cc2c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc30:	ee08 0a10 	vmov	s16, r0
 800cc34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cc38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc3c:	4b9e      	ldr	r3, [pc, #632]	; (800ceb8 <_printf_float+0x2d8>)
 800cc3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc42:	f7f3 ff93 	bl	8000b6c <__aeabi_dcmpun>
 800cc46:	bb88      	cbnz	r0, 800ccac <_printf_float+0xcc>
 800cc48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc4c:	4b9a      	ldr	r3, [pc, #616]	; (800ceb8 <_printf_float+0x2d8>)
 800cc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc52:	f7f3 ff6d 	bl	8000b30 <__aeabi_dcmple>
 800cc56:	bb48      	cbnz	r0, 800ccac <_printf_float+0xcc>
 800cc58:	2200      	movs	r2, #0
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	4649      	mov	r1, r9
 800cc60:	f7f3 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 800cc64:	b110      	cbz	r0, 800cc6c <_printf_float+0x8c>
 800cc66:	232d      	movs	r3, #45	; 0x2d
 800cc68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc6c:	4a93      	ldr	r2, [pc, #588]	; (800cebc <_printf_float+0x2dc>)
 800cc6e:	4b94      	ldr	r3, [pc, #592]	; (800cec0 <_printf_float+0x2e0>)
 800cc70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc74:	bf94      	ite	ls
 800cc76:	4690      	movls	r8, r2
 800cc78:	4698      	movhi	r8, r3
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	9b05      	ldr	r3, [sp, #20]
 800cc80:	f023 0304 	bic.w	r3, r3, #4
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	f04f 0900 	mov.w	r9, #0
 800cc8a:	9700      	str	r7, [sp, #0]
 800cc8c:	4633      	mov	r3, r6
 800cc8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc90:	4621      	mov	r1, r4
 800cc92:	4628      	mov	r0, r5
 800cc94:	f000 fa82 	bl	800d19c <_printf_common>
 800cc98:	3001      	adds	r0, #1
 800cc9a:	f040 8090 	bne.w	800cdbe <_printf_float+0x1de>
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cca2:	b00d      	add	sp, #52	; 0x34
 800cca4:	ecbd 8b02 	vpop	{d8}
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	4642      	mov	r2, r8
 800ccae:	464b      	mov	r3, r9
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	f7f3 ff5a 	bl	8000b6c <__aeabi_dcmpun>
 800ccb8:	b140      	cbz	r0, 800cccc <_printf_float+0xec>
 800ccba:	464b      	mov	r3, r9
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bfbc      	itt	lt
 800ccc0:	232d      	movlt	r3, #45	; 0x2d
 800ccc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ccc6:	4a7f      	ldr	r2, [pc, #508]	; (800cec4 <_printf_float+0x2e4>)
 800ccc8:	4b7f      	ldr	r3, [pc, #508]	; (800cec8 <_printf_float+0x2e8>)
 800ccca:	e7d1      	b.n	800cc70 <_printf_float+0x90>
 800cccc:	6863      	ldr	r3, [r4, #4]
 800ccce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccd2:	9206      	str	r2, [sp, #24]
 800ccd4:	1c5a      	adds	r2, r3, #1
 800ccd6:	d13f      	bne.n	800cd58 <_printf_float+0x178>
 800ccd8:	2306      	movs	r3, #6
 800ccda:	6063      	str	r3, [r4, #4]
 800ccdc:	9b05      	ldr	r3, [sp, #20]
 800ccde:	6861      	ldr	r1, [r4, #4]
 800cce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cce4:	2300      	movs	r3, #0
 800cce6:	9303      	str	r3, [sp, #12]
 800cce8:	ab0a      	add	r3, sp, #40	; 0x28
 800ccea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccee:	ab09      	add	r3, sp, #36	; 0x24
 800ccf0:	ec49 8b10 	vmov	d0, r8, r9
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	f7ff fecf 	bl	800caa0 <__cvt>
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd06:	2b47      	cmp	r3, #71	; 0x47
 800cd08:	4680      	mov	r8, r0
 800cd0a:	d108      	bne.n	800cd1e <_printf_float+0x13e>
 800cd0c:	1cc8      	adds	r0, r1, #3
 800cd0e:	db02      	blt.n	800cd16 <_printf_float+0x136>
 800cd10:	6863      	ldr	r3, [r4, #4]
 800cd12:	4299      	cmp	r1, r3
 800cd14:	dd41      	ble.n	800cd9a <_printf_float+0x1ba>
 800cd16:	f1ab 0302 	sub.w	r3, fp, #2
 800cd1a:	fa5f fb83 	uxtb.w	fp, r3
 800cd1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd22:	d820      	bhi.n	800cd66 <_printf_float+0x186>
 800cd24:	3901      	subs	r1, #1
 800cd26:	465a      	mov	r2, fp
 800cd28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd2c:	9109      	str	r1, [sp, #36]	; 0x24
 800cd2e:	f7ff ff19 	bl	800cb64 <__exponent>
 800cd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd34:	1813      	adds	r3, r2, r0
 800cd36:	2a01      	cmp	r2, #1
 800cd38:	4681      	mov	r9, r0
 800cd3a:	6123      	str	r3, [r4, #16]
 800cd3c:	dc02      	bgt.n	800cd44 <_printf_float+0x164>
 800cd3e:	6822      	ldr	r2, [r4, #0]
 800cd40:	07d2      	lsls	r2, r2, #31
 800cd42:	d501      	bpl.n	800cd48 <_printf_float+0x168>
 800cd44:	3301      	adds	r3, #1
 800cd46:	6123      	str	r3, [r4, #16]
 800cd48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d09c      	beq.n	800cc8a <_printf_float+0xaa>
 800cd50:	232d      	movs	r3, #45	; 0x2d
 800cd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd56:	e798      	b.n	800cc8a <_printf_float+0xaa>
 800cd58:	9a06      	ldr	r2, [sp, #24]
 800cd5a:	2a47      	cmp	r2, #71	; 0x47
 800cd5c:	d1be      	bne.n	800ccdc <_printf_float+0xfc>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1bc      	bne.n	800ccdc <_printf_float+0xfc>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e7b9      	b.n	800ccda <_printf_float+0xfa>
 800cd66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd6a:	d118      	bne.n	800cd9e <_printf_float+0x1be>
 800cd6c:	2900      	cmp	r1, #0
 800cd6e:	6863      	ldr	r3, [r4, #4]
 800cd70:	dd0b      	ble.n	800cd8a <_printf_float+0x1aa>
 800cd72:	6121      	str	r1, [r4, #16]
 800cd74:	b913      	cbnz	r3, 800cd7c <_printf_float+0x19c>
 800cd76:	6822      	ldr	r2, [r4, #0]
 800cd78:	07d0      	lsls	r0, r2, #31
 800cd7a:	d502      	bpl.n	800cd82 <_printf_float+0x1a2>
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	440b      	add	r3, r1
 800cd80:	6123      	str	r3, [r4, #16]
 800cd82:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd84:	f04f 0900 	mov.w	r9, #0
 800cd88:	e7de      	b.n	800cd48 <_printf_float+0x168>
 800cd8a:	b913      	cbnz	r3, 800cd92 <_printf_float+0x1b2>
 800cd8c:	6822      	ldr	r2, [r4, #0]
 800cd8e:	07d2      	lsls	r2, r2, #31
 800cd90:	d501      	bpl.n	800cd96 <_printf_float+0x1b6>
 800cd92:	3302      	adds	r3, #2
 800cd94:	e7f4      	b.n	800cd80 <_printf_float+0x1a0>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e7f2      	b.n	800cd80 <_printf_float+0x1a0>
 800cd9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda0:	4299      	cmp	r1, r3
 800cda2:	db05      	blt.n	800cdb0 <_printf_float+0x1d0>
 800cda4:	6823      	ldr	r3, [r4, #0]
 800cda6:	6121      	str	r1, [r4, #16]
 800cda8:	07d8      	lsls	r0, r3, #31
 800cdaa:	d5ea      	bpl.n	800cd82 <_printf_float+0x1a2>
 800cdac:	1c4b      	adds	r3, r1, #1
 800cdae:	e7e7      	b.n	800cd80 <_printf_float+0x1a0>
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	bfd4      	ite	le
 800cdb4:	f1c1 0202 	rsble	r2, r1, #2
 800cdb8:	2201      	movgt	r2, #1
 800cdba:	4413      	add	r3, r2
 800cdbc:	e7e0      	b.n	800cd80 <_printf_float+0x1a0>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	055a      	lsls	r2, r3, #21
 800cdc2:	d407      	bmi.n	800cdd4 <_printf_float+0x1f4>
 800cdc4:	6923      	ldr	r3, [r4, #16]
 800cdc6:	4642      	mov	r2, r8
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	d12c      	bne.n	800ce2c <_printf_float+0x24c>
 800cdd2:	e764      	b.n	800cc9e <_printf_float+0xbe>
 800cdd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdd8:	f240 80e0 	bls.w	800cf9c <_printf_float+0x3bc>
 800cddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cde0:	2200      	movs	r2, #0
 800cde2:	2300      	movs	r3, #0
 800cde4:	f7f3 fe90 	bl	8000b08 <__aeabi_dcmpeq>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d034      	beq.n	800ce56 <_printf_float+0x276>
 800cdec:	4a37      	ldr	r2, [pc, #220]	; (800cecc <_printf_float+0x2ec>)
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4631      	mov	r1, r6
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	47b8      	blx	r7
 800cdf6:	3001      	adds	r0, #1
 800cdf8:	f43f af51 	beq.w	800cc9e <_printf_float+0xbe>
 800cdfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce00:	429a      	cmp	r2, r3
 800ce02:	db02      	blt.n	800ce0a <_printf_float+0x22a>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	07d8      	lsls	r0, r3, #31
 800ce08:	d510      	bpl.n	800ce2c <_printf_float+0x24c>
 800ce0a:	ee18 3a10 	vmov	r3, s16
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f af41 	beq.w	800cc9e <_printf_float+0xbe>
 800ce1c:	f04f 0800 	mov.w	r8, #0
 800ce20:	f104 091a 	add.w	r9, r4, #26
 800ce24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce26:	3b01      	subs	r3, #1
 800ce28:	4543      	cmp	r3, r8
 800ce2a:	dc09      	bgt.n	800ce40 <_printf_float+0x260>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	079b      	lsls	r3, r3, #30
 800ce30:	f100 8107 	bmi.w	800d042 <_printf_float+0x462>
 800ce34:	68e0      	ldr	r0, [r4, #12]
 800ce36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce38:	4298      	cmp	r0, r3
 800ce3a:	bfb8      	it	lt
 800ce3c:	4618      	movlt	r0, r3
 800ce3e:	e730      	b.n	800cca2 <_printf_float+0xc2>
 800ce40:	2301      	movs	r3, #1
 800ce42:	464a      	mov	r2, r9
 800ce44:	4631      	mov	r1, r6
 800ce46:	4628      	mov	r0, r5
 800ce48:	47b8      	blx	r7
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	f43f af27 	beq.w	800cc9e <_printf_float+0xbe>
 800ce50:	f108 0801 	add.w	r8, r8, #1
 800ce54:	e7e6      	b.n	800ce24 <_printf_float+0x244>
 800ce56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dc39      	bgt.n	800ced0 <_printf_float+0x2f0>
 800ce5c:	4a1b      	ldr	r2, [pc, #108]	; (800cecc <_printf_float+0x2ec>)
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	47b8      	blx	r7
 800ce66:	3001      	adds	r0, #1
 800ce68:	f43f af19 	beq.w	800cc9e <_printf_float+0xbe>
 800ce6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce70:	4313      	orrs	r3, r2
 800ce72:	d102      	bne.n	800ce7a <_printf_float+0x29a>
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	07d9      	lsls	r1, r3, #31
 800ce78:	d5d8      	bpl.n	800ce2c <_printf_float+0x24c>
 800ce7a:	ee18 3a10 	vmov	r3, s16
 800ce7e:	4652      	mov	r2, sl
 800ce80:	4631      	mov	r1, r6
 800ce82:	4628      	mov	r0, r5
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f af09 	beq.w	800cc9e <_printf_float+0xbe>
 800ce8c:	f04f 0900 	mov.w	r9, #0
 800ce90:	f104 0a1a 	add.w	sl, r4, #26
 800ce94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce96:	425b      	negs	r3, r3
 800ce98:	454b      	cmp	r3, r9
 800ce9a:	dc01      	bgt.n	800cea0 <_printf_float+0x2c0>
 800ce9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9e:	e792      	b.n	800cdc6 <_printf_float+0x1e6>
 800cea0:	2301      	movs	r3, #1
 800cea2:	4652      	mov	r2, sl
 800cea4:	4631      	mov	r1, r6
 800cea6:	4628      	mov	r0, r5
 800cea8:	47b8      	blx	r7
 800ceaa:	3001      	adds	r0, #1
 800ceac:	f43f aef7 	beq.w	800cc9e <_printf_float+0xbe>
 800ceb0:	f109 0901 	add.w	r9, r9, #1
 800ceb4:	e7ee      	b.n	800ce94 <_printf_float+0x2b4>
 800ceb6:	bf00      	nop
 800ceb8:	7fefffff 	.word	0x7fefffff
 800cebc:	080152cc 	.word	0x080152cc
 800cec0:	080152d0 	.word	0x080152d0
 800cec4:	080152d4 	.word	0x080152d4
 800cec8:	080152d8 	.word	0x080152d8
 800cecc:	080154ef 	.word	0x080154ef
 800ced0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ced2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ced4:	429a      	cmp	r2, r3
 800ced6:	bfa8      	it	ge
 800ced8:	461a      	movge	r2, r3
 800ceda:	2a00      	cmp	r2, #0
 800cedc:	4691      	mov	r9, r2
 800cede:	dc37      	bgt.n	800cf50 <_printf_float+0x370>
 800cee0:	f04f 0b00 	mov.w	fp, #0
 800cee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cee8:	f104 021a 	add.w	r2, r4, #26
 800ceec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceee:	9305      	str	r3, [sp, #20]
 800cef0:	eba3 0309 	sub.w	r3, r3, r9
 800cef4:	455b      	cmp	r3, fp
 800cef6:	dc33      	bgt.n	800cf60 <_printf_float+0x380>
 800cef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cefc:	429a      	cmp	r2, r3
 800cefe:	db3b      	blt.n	800cf78 <_printf_float+0x398>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	07da      	lsls	r2, r3, #31
 800cf04:	d438      	bmi.n	800cf78 <_printf_float+0x398>
 800cf06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cf0a:	eba2 0903 	sub.w	r9, r2, r3
 800cf0e:	9b05      	ldr	r3, [sp, #20]
 800cf10:	1ad2      	subs	r2, r2, r3
 800cf12:	4591      	cmp	r9, r2
 800cf14:	bfa8      	it	ge
 800cf16:	4691      	movge	r9, r2
 800cf18:	f1b9 0f00 	cmp.w	r9, #0
 800cf1c:	dc35      	bgt.n	800cf8a <_printf_float+0x3aa>
 800cf1e:	f04f 0800 	mov.w	r8, #0
 800cf22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf26:	f104 0a1a 	add.w	sl, r4, #26
 800cf2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf2e:	1a9b      	subs	r3, r3, r2
 800cf30:	eba3 0309 	sub.w	r3, r3, r9
 800cf34:	4543      	cmp	r3, r8
 800cf36:	f77f af79 	ble.w	800ce2c <_printf_float+0x24c>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	f43f aeaa 	beq.w	800cc9e <_printf_float+0xbe>
 800cf4a:	f108 0801 	add.w	r8, r8, #1
 800cf4e:	e7ec      	b.n	800cf2a <_printf_float+0x34a>
 800cf50:	4613      	mov	r3, r2
 800cf52:	4631      	mov	r1, r6
 800cf54:	4642      	mov	r2, r8
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d1c0      	bne.n	800cee0 <_printf_float+0x300>
 800cf5e:	e69e      	b.n	800cc9e <_printf_float+0xbe>
 800cf60:	2301      	movs	r3, #1
 800cf62:	4631      	mov	r1, r6
 800cf64:	4628      	mov	r0, r5
 800cf66:	9205      	str	r2, [sp, #20]
 800cf68:	47b8      	blx	r7
 800cf6a:	3001      	adds	r0, #1
 800cf6c:	f43f ae97 	beq.w	800cc9e <_printf_float+0xbe>
 800cf70:	9a05      	ldr	r2, [sp, #20]
 800cf72:	f10b 0b01 	add.w	fp, fp, #1
 800cf76:	e7b9      	b.n	800ceec <_printf_float+0x30c>
 800cf78:	ee18 3a10 	vmov	r3, s16
 800cf7c:	4652      	mov	r2, sl
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4628      	mov	r0, r5
 800cf82:	47b8      	blx	r7
 800cf84:	3001      	adds	r0, #1
 800cf86:	d1be      	bne.n	800cf06 <_printf_float+0x326>
 800cf88:	e689      	b.n	800cc9e <_printf_float+0xbe>
 800cf8a:	9a05      	ldr	r2, [sp, #20]
 800cf8c:	464b      	mov	r3, r9
 800cf8e:	4442      	add	r2, r8
 800cf90:	4631      	mov	r1, r6
 800cf92:	4628      	mov	r0, r5
 800cf94:	47b8      	blx	r7
 800cf96:	3001      	adds	r0, #1
 800cf98:	d1c1      	bne.n	800cf1e <_printf_float+0x33e>
 800cf9a:	e680      	b.n	800cc9e <_printf_float+0xbe>
 800cf9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf9e:	2a01      	cmp	r2, #1
 800cfa0:	dc01      	bgt.n	800cfa6 <_printf_float+0x3c6>
 800cfa2:	07db      	lsls	r3, r3, #31
 800cfa4:	d53a      	bpl.n	800d01c <_printf_float+0x43c>
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4628      	mov	r0, r5
 800cfae:	47b8      	blx	r7
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	f43f ae74 	beq.w	800cc9e <_printf_float+0xbe>
 800cfb6:	ee18 3a10 	vmov	r3, s16
 800cfba:	4652      	mov	r2, sl
 800cfbc:	4631      	mov	r1, r6
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	47b8      	blx	r7
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	f43f ae6b 	beq.w	800cc9e <_printf_float+0xbe>
 800cfc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2300      	movs	r3, #0
 800cfd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cfd4:	f7f3 fd98 	bl	8000b08 <__aeabi_dcmpeq>
 800cfd8:	b9d8      	cbnz	r0, 800d012 <_printf_float+0x432>
 800cfda:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cfde:	f108 0201 	add.w	r2, r8, #1
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b8      	blx	r7
 800cfe8:	3001      	adds	r0, #1
 800cfea:	d10e      	bne.n	800d00a <_printf_float+0x42a>
 800cfec:	e657      	b.n	800cc9e <_printf_float+0xbe>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4652      	mov	r2, sl
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	f43f ae50 	beq.w	800cc9e <_printf_float+0xbe>
 800cffe:	f108 0801 	add.w	r8, r8, #1
 800d002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d004:	3b01      	subs	r3, #1
 800d006:	4543      	cmp	r3, r8
 800d008:	dcf1      	bgt.n	800cfee <_printf_float+0x40e>
 800d00a:	464b      	mov	r3, r9
 800d00c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d010:	e6da      	b.n	800cdc8 <_printf_float+0x1e8>
 800d012:	f04f 0800 	mov.w	r8, #0
 800d016:	f104 0a1a 	add.w	sl, r4, #26
 800d01a:	e7f2      	b.n	800d002 <_printf_float+0x422>
 800d01c:	2301      	movs	r3, #1
 800d01e:	4642      	mov	r2, r8
 800d020:	e7df      	b.n	800cfe2 <_printf_float+0x402>
 800d022:	2301      	movs	r3, #1
 800d024:	464a      	mov	r2, r9
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f ae36 	beq.w	800cc9e <_printf_float+0xbe>
 800d032:	f108 0801 	add.w	r8, r8, #1
 800d036:	68e3      	ldr	r3, [r4, #12]
 800d038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d03a:	1a5b      	subs	r3, r3, r1
 800d03c:	4543      	cmp	r3, r8
 800d03e:	dcf0      	bgt.n	800d022 <_printf_float+0x442>
 800d040:	e6f8      	b.n	800ce34 <_printf_float+0x254>
 800d042:	f04f 0800 	mov.w	r8, #0
 800d046:	f104 0919 	add.w	r9, r4, #25
 800d04a:	e7f4      	b.n	800d036 <_printf_float+0x456>

0800d04c <malloc>:
 800d04c:	4b02      	ldr	r3, [pc, #8]	; (800d058 <malloc+0xc>)
 800d04e:	4601      	mov	r1, r0
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	f000 b823 	b.w	800d09c <_malloc_r>
 800d056:	bf00      	nop
 800d058:	2000009c 	.word	0x2000009c

0800d05c <sbrk_aligned>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	4e0e      	ldr	r6, [pc, #56]	; (800d098 <sbrk_aligned+0x3c>)
 800d060:	460c      	mov	r4, r1
 800d062:	6831      	ldr	r1, [r6, #0]
 800d064:	4605      	mov	r5, r0
 800d066:	b911      	cbnz	r1, 800d06e <sbrk_aligned+0x12>
 800d068:	f000 fccc 	bl	800da04 <_sbrk_r>
 800d06c:	6030      	str	r0, [r6, #0]
 800d06e:	4621      	mov	r1, r4
 800d070:	4628      	mov	r0, r5
 800d072:	f000 fcc7 	bl	800da04 <_sbrk_r>
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	d00a      	beq.n	800d090 <sbrk_aligned+0x34>
 800d07a:	1cc4      	adds	r4, r0, #3
 800d07c:	f024 0403 	bic.w	r4, r4, #3
 800d080:	42a0      	cmp	r0, r4
 800d082:	d007      	beq.n	800d094 <sbrk_aligned+0x38>
 800d084:	1a21      	subs	r1, r4, r0
 800d086:	4628      	mov	r0, r5
 800d088:	f000 fcbc 	bl	800da04 <_sbrk_r>
 800d08c:	3001      	adds	r0, #1
 800d08e:	d101      	bne.n	800d094 <sbrk_aligned+0x38>
 800d090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d094:	4620      	mov	r0, r4
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	200094f4 	.word	0x200094f4

0800d09c <_malloc_r>:
 800d09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a0:	1ccd      	adds	r5, r1, #3
 800d0a2:	f025 0503 	bic.w	r5, r5, #3
 800d0a6:	3508      	adds	r5, #8
 800d0a8:	2d0c      	cmp	r5, #12
 800d0aa:	bf38      	it	cc
 800d0ac:	250c      	movcc	r5, #12
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	db01      	blt.n	800d0b8 <_malloc_r+0x1c>
 800d0b4:	42a9      	cmp	r1, r5
 800d0b6:	d905      	bls.n	800d0c4 <_malloc_r+0x28>
 800d0b8:	230c      	movs	r3, #12
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	2600      	movs	r6, #0
 800d0be:	4630      	mov	r0, r6
 800d0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d198 <_malloc_r+0xfc>
 800d0c8:	f000 fa2c 	bl	800d524 <__malloc_lock>
 800d0cc:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d0:	461c      	mov	r4, r3
 800d0d2:	bb5c      	cbnz	r4, 800d12c <_malloc_r+0x90>
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7ff ffc0 	bl	800d05c <sbrk_aligned>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	4604      	mov	r4, r0
 800d0e0:	d155      	bne.n	800d18e <_malloc_r+0xf2>
 800d0e2:	f8d8 4000 	ldr.w	r4, [r8]
 800d0e6:	4626      	mov	r6, r4
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	d145      	bne.n	800d178 <_malloc_r+0xdc>
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	d048      	beq.n	800d182 <_malloc_r+0xe6>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	eb04 0903 	add.w	r9, r4, r3
 800d0fa:	f000 fc83 	bl	800da04 <_sbrk_r>
 800d0fe:	4581      	cmp	r9, r0
 800d100:	d13f      	bne.n	800d182 <_malloc_r+0xe6>
 800d102:	6821      	ldr	r1, [r4, #0]
 800d104:	1a6d      	subs	r5, r5, r1
 800d106:	4629      	mov	r1, r5
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ffa7 	bl	800d05c <sbrk_aligned>
 800d10e:	3001      	adds	r0, #1
 800d110:	d037      	beq.n	800d182 <_malloc_r+0xe6>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	442b      	add	r3, r5
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	f8d8 3000 	ldr.w	r3, [r8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d038      	beq.n	800d192 <_malloc_r+0xf6>
 800d120:	685a      	ldr	r2, [r3, #4]
 800d122:	42a2      	cmp	r2, r4
 800d124:	d12b      	bne.n	800d17e <_malloc_r+0xe2>
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
 800d12a:	e00f      	b.n	800d14c <_malloc_r+0xb0>
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	1b52      	subs	r2, r2, r5
 800d130:	d41f      	bmi.n	800d172 <_malloc_r+0xd6>
 800d132:	2a0b      	cmp	r2, #11
 800d134:	d917      	bls.n	800d166 <_malloc_r+0xca>
 800d136:	1961      	adds	r1, r4, r5
 800d138:	42a3      	cmp	r3, r4
 800d13a:	6025      	str	r5, [r4, #0]
 800d13c:	bf18      	it	ne
 800d13e:	6059      	strne	r1, [r3, #4]
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	bf08      	it	eq
 800d144:	f8c8 1000 	streq.w	r1, [r8]
 800d148:	5162      	str	r2, [r4, r5]
 800d14a:	604b      	str	r3, [r1, #4]
 800d14c:	4638      	mov	r0, r7
 800d14e:	f104 060b 	add.w	r6, r4, #11
 800d152:	f000 f9ed 	bl	800d530 <__malloc_unlock>
 800d156:	f026 0607 	bic.w	r6, r6, #7
 800d15a:	1d23      	adds	r3, r4, #4
 800d15c:	1af2      	subs	r2, r6, r3
 800d15e:	d0ae      	beq.n	800d0be <_malloc_r+0x22>
 800d160:	1b9b      	subs	r3, r3, r6
 800d162:	50a3      	str	r3, [r4, r2]
 800d164:	e7ab      	b.n	800d0be <_malloc_r+0x22>
 800d166:	42a3      	cmp	r3, r4
 800d168:	6862      	ldr	r2, [r4, #4]
 800d16a:	d1dd      	bne.n	800d128 <_malloc_r+0x8c>
 800d16c:	f8c8 2000 	str.w	r2, [r8]
 800d170:	e7ec      	b.n	800d14c <_malloc_r+0xb0>
 800d172:	4623      	mov	r3, r4
 800d174:	6864      	ldr	r4, [r4, #4]
 800d176:	e7ac      	b.n	800d0d2 <_malloc_r+0x36>
 800d178:	4634      	mov	r4, r6
 800d17a:	6876      	ldr	r6, [r6, #4]
 800d17c:	e7b4      	b.n	800d0e8 <_malloc_r+0x4c>
 800d17e:	4613      	mov	r3, r2
 800d180:	e7cc      	b.n	800d11c <_malloc_r+0x80>
 800d182:	230c      	movs	r3, #12
 800d184:	603b      	str	r3, [r7, #0]
 800d186:	4638      	mov	r0, r7
 800d188:	f000 f9d2 	bl	800d530 <__malloc_unlock>
 800d18c:	e797      	b.n	800d0be <_malloc_r+0x22>
 800d18e:	6025      	str	r5, [r4, #0]
 800d190:	e7dc      	b.n	800d14c <_malloc_r+0xb0>
 800d192:	605b      	str	r3, [r3, #4]
 800d194:	deff      	udf	#255	; 0xff
 800d196:	bf00      	nop
 800d198:	200094f0 	.word	0x200094f0

0800d19c <_printf_common>:
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	4616      	mov	r6, r2
 800d1a2:	4699      	mov	r9, r3
 800d1a4:	688a      	ldr	r2, [r1, #8]
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	bfb8      	it	lt
 800d1b0:	4613      	movlt	r3, r2
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	b10a      	cbz	r2, 800d1c2 <_printf_common+0x26>
 800d1be:	3301      	adds	r3, #1
 800d1c0:	6033      	str	r3, [r6, #0]
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	0699      	lsls	r1, r3, #26
 800d1c6:	bf42      	ittt	mi
 800d1c8:	6833      	ldrmi	r3, [r6, #0]
 800d1ca:	3302      	addmi	r3, #2
 800d1cc:	6033      	strmi	r3, [r6, #0]
 800d1ce:	6825      	ldr	r5, [r4, #0]
 800d1d0:	f015 0506 	ands.w	r5, r5, #6
 800d1d4:	d106      	bne.n	800d1e4 <_printf_common+0x48>
 800d1d6:	f104 0a19 	add.w	sl, r4, #25
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	6832      	ldr	r2, [r6, #0]
 800d1de:	1a9b      	subs	r3, r3, r2
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	dc26      	bgt.n	800d232 <_printf_common+0x96>
 800d1e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1e8:	1e13      	subs	r3, r2, #0
 800d1ea:	6822      	ldr	r2, [r4, #0]
 800d1ec:	bf18      	it	ne
 800d1ee:	2301      	movne	r3, #1
 800d1f0:	0692      	lsls	r2, r2, #26
 800d1f2:	d42b      	bmi.n	800d24c <_printf_common+0xb0>
 800d1f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	47c0      	blx	r8
 800d1fe:	3001      	adds	r0, #1
 800d200:	d01e      	beq.n	800d240 <_printf_common+0xa4>
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	6922      	ldr	r2, [r4, #16]
 800d206:	f003 0306 	and.w	r3, r3, #6
 800d20a:	2b04      	cmp	r3, #4
 800d20c:	bf02      	ittt	eq
 800d20e:	68e5      	ldreq	r5, [r4, #12]
 800d210:	6833      	ldreq	r3, [r6, #0]
 800d212:	1aed      	subeq	r5, r5, r3
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	bf0c      	ite	eq
 800d218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d21c:	2500      	movne	r5, #0
 800d21e:	4293      	cmp	r3, r2
 800d220:	bfc4      	itt	gt
 800d222:	1a9b      	subgt	r3, r3, r2
 800d224:	18ed      	addgt	r5, r5, r3
 800d226:	2600      	movs	r6, #0
 800d228:	341a      	adds	r4, #26
 800d22a:	42b5      	cmp	r5, r6
 800d22c:	d11a      	bne.n	800d264 <_printf_common+0xc8>
 800d22e:	2000      	movs	r0, #0
 800d230:	e008      	b.n	800d244 <_printf_common+0xa8>
 800d232:	2301      	movs	r3, #1
 800d234:	4652      	mov	r2, sl
 800d236:	4649      	mov	r1, r9
 800d238:	4638      	mov	r0, r7
 800d23a:	47c0      	blx	r8
 800d23c:	3001      	adds	r0, #1
 800d23e:	d103      	bne.n	800d248 <_printf_common+0xac>
 800d240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d248:	3501      	adds	r5, #1
 800d24a:	e7c6      	b.n	800d1da <_printf_common+0x3e>
 800d24c:	18e1      	adds	r1, r4, r3
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	2030      	movs	r0, #48	; 0x30
 800d252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d256:	4422      	add	r2, r4
 800d258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d25c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d260:	3302      	adds	r3, #2
 800d262:	e7c7      	b.n	800d1f4 <_printf_common+0x58>
 800d264:	2301      	movs	r3, #1
 800d266:	4622      	mov	r2, r4
 800d268:	4649      	mov	r1, r9
 800d26a:	4638      	mov	r0, r7
 800d26c:	47c0      	blx	r8
 800d26e:	3001      	adds	r0, #1
 800d270:	d0e6      	beq.n	800d240 <_printf_common+0xa4>
 800d272:	3601      	adds	r6, #1
 800d274:	e7d9      	b.n	800d22a <_printf_common+0x8e>
	...

0800d278 <_printf_i>:
 800d278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d27c:	7e0f      	ldrb	r7, [r1, #24]
 800d27e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d280:	2f78      	cmp	r7, #120	; 0x78
 800d282:	4691      	mov	r9, r2
 800d284:	4680      	mov	r8, r0
 800d286:	460c      	mov	r4, r1
 800d288:	469a      	mov	sl, r3
 800d28a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d28e:	d807      	bhi.n	800d2a0 <_printf_i+0x28>
 800d290:	2f62      	cmp	r7, #98	; 0x62
 800d292:	d80a      	bhi.n	800d2aa <_printf_i+0x32>
 800d294:	2f00      	cmp	r7, #0
 800d296:	f000 80d4 	beq.w	800d442 <_printf_i+0x1ca>
 800d29a:	2f58      	cmp	r7, #88	; 0x58
 800d29c:	f000 80c0 	beq.w	800d420 <_printf_i+0x1a8>
 800d2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2a8:	e03a      	b.n	800d320 <_printf_i+0xa8>
 800d2aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2ae:	2b15      	cmp	r3, #21
 800d2b0:	d8f6      	bhi.n	800d2a0 <_printf_i+0x28>
 800d2b2:	a101      	add	r1, pc, #4	; (adr r1, 800d2b8 <_printf_i+0x40>)
 800d2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d325 	.word	0x0800d325
 800d2c0:	0800d2a1 	.word	0x0800d2a1
 800d2c4:	0800d2a1 	.word	0x0800d2a1
 800d2c8:	0800d2a1 	.word	0x0800d2a1
 800d2cc:	0800d2a1 	.word	0x0800d2a1
 800d2d0:	0800d325 	.word	0x0800d325
 800d2d4:	0800d2a1 	.word	0x0800d2a1
 800d2d8:	0800d2a1 	.word	0x0800d2a1
 800d2dc:	0800d2a1 	.word	0x0800d2a1
 800d2e0:	0800d2a1 	.word	0x0800d2a1
 800d2e4:	0800d429 	.word	0x0800d429
 800d2e8:	0800d351 	.word	0x0800d351
 800d2ec:	0800d3e3 	.word	0x0800d3e3
 800d2f0:	0800d2a1 	.word	0x0800d2a1
 800d2f4:	0800d2a1 	.word	0x0800d2a1
 800d2f8:	0800d44b 	.word	0x0800d44b
 800d2fc:	0800d2a1 	.word	0x0800d2a1
 800d300:	0800d351 	.word	0x0800d351
 800d304:	0800d2a1 	.word	0x0800d2a1
 800d308:	0800d2a1 	.word	0x0800d2a1
 800d30c:	0800d3eb 	.word	0x0800d3eb
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	1d1a      	adds	r2, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	602a      	str	r2, [r5, #0]
 800d318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d31c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d320:	2301      	movs	r3, #1
 800d322:	e09f      	b.n	800d464 <_printf_i+0x1ec>
 800d324:	6820      	ldr	r0, [r4, #0]
 800d326:	682b      	ldr	r3, [r5, #0]
 800d328:	0607      	lsls	r7, r0, #24
 800d32a:	f103 0104 	add.w	r1, r3, #4
 800d32e:	6029      	str	r1, [r5, #0]
 800d330:	d501      	bpl.n	800d336 <_printf_i+0xbe>
 800d332:	681e      	ldr	r6, [r3, #0]
 800d334:	e003      	b.n	800d33e <_printf_i+0xc6>
 800d336:	0646      	lsls	r6, r0, #25
 800d338:	d5fb      	bpl.n	800d332 <_printf_i+0xba>
 800d33a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d33e:	2e00      	cmp	r6, #0
 800d340:	da03      	bge.n	800d34a <_printf_i+0xd2>
 800d342:	232d      	movs	r3, #45	; 0x2d
 800d344:	4276      	negs	r6, r6
 800d346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d34a:	485a      	ldr	r0, [pc, #360]	; (800d4b4 <_printf_i+0x23c>)
 800d34c:	230a      	movs	r3, #10
 800d34e:	e012      	b.n	800d376 <_printf_i+0xfe>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	1d19      	adds	r1, r3, #4
 800d356:	6029      	str	r1, [r5, #0]
 800d358:	0605      	lsls	r5, r0, #24
 800d35a:	d501      	bpl.n	800d360 <_printf_i+0xe8>
 800d35c:	681e      	ldr	r6, [r3, #0]
 800d35e:	e002      	b.n	800d366 <_printf_i+0xee>
 800d360:	0641      	lsls	r1, r0, #25
 800d362:	d5fb      	bpl.n	800d35c <_printf_i+0xe4>
 800d364:	881e      	ldrh	r6, [r3, #0]
 800d366:	4853      	ldr	r0, [pc, #332]	; (800d4b4 <_printf_i+0x23c>)
 800d368:	2f6f      	cmp	r7, #111	; 0x6f
 800d36a:	bf0c      	ite	eq
 800d36c:	2308      	moveq	r3, #8
 800d36e:	230a      	movne	r3, #10
 800d370:	2100      	movs	r1, #0
 800d372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d376:	6865      	ldr	r5, [r4, #4]
 800d378:	60a5      	str	r5, [r4, #8]
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	bfa2      	ittt	ge
 800d37e:	6821      	ldrge	r1, [r4, #0]
 800d380:	f021 0104 	bicge.w	r1, r1, #4
 800d384:	6021      	strge	r1, [r4, #0]
 800d386:	b90e      	cbnz	r6, 800d38c <_printf_i+0x114>
 800d388:	2d00      	cmp	r5, #0
 800d38a:	d04b      	beq.n	800d424 <_printf_i+0x1ac>
 800d38c:	4615      	mov	r5, r2
 800d38e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d392:	fb03 6711 	mls	r7, r3, r1, r6
 800d396:	5dc7      	ldrb	r7, [r0, r7]
 800d398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d39c:	4637      	mov	r7, r6
 800d39e:	42bb      	cmp	r3, r7
 800d3a0:	460e      	mov	r6, r1
 800d3a2:	d9f4      	bls.n	800d38e <_printf_i+0x116>
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d10b      	bne.n	800d3c0 <_printf_i+0x148>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07de      	lsls	r6, r3, #31
 800d3ac:	d508      	bpl.n	800d3c0 <_printf_i+0x148>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	6861      	ldr	r1, [r4, #4]
 800d3b2:	4299      	cmp	r1, r3
 800d3b4:	bfde      	ittt	le
 800d3b6:	2330      	movle	r3, #48	; 0x30
 800d3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3c0:	1b52      	subs	r2, r2, r5
 800d3c2:	6122      	str	r2, [r4, #16]
 800d3c4:	f8cd a000 	str.w	sl, [sp]
 800d3c8:	464b      	mov	r3, r9
 800d3ca:	aa03      	add	r2, sp, #12
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7ff fee4 	bl	800d19c <_printf_common>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d14a      	bne.n	800d46e <_printf_i+0x1f6>
 800d3d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3dc:	b004      	add	sp, #16
 800d3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	4833      	ldr	r0, [pc, #204]	; (800d4b8 <_printf_i+0x240>)
 800d3ec:	2778      	movs	r7, #120	; 0x78
 800d3ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	6829      	ldr	r1, [r5, #0]
 800d3f6:	061f      	lsls	r7, r3, #24
 800d3f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d3fc:	d402      	bmi.n	800d404 <_printf_i+0x18c>
 800d3fe:	065f      	lsls	r7, r3, #25
 800d400:	bf48      	it	mi
 800d402:	b2b6      	uxthmi	r6, r6
 800d404:	07df      	lsls	r7, r3, #31
 800d406:	bf48      	it	mi
 800d408:	f043 0320 	orrmi.w	r3, r3, #32
 800d40c:	6029      	str	r1, [r5, #0]
 800d40e:	bf48      	it	mi
 800d410:	6023      	strmi	r3, [r4, #0]
 800d412:	b91e      	cbnz	r6, 800d41c <_printf_i+0x1a4>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	f023 0320 	bic.w	r3, r3, #32
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	2310      	movs	r3, #16
 800d41e:	e7a7      	b.n	800d370 <_printf_i+0xf8>
 800d420:	4824      	ldr	r0, [pc, #144]	; (800d4b4 <_printf_i+0x23c>)
 800d422:	e7e4      	b.n	800d3ee <_printf_i+0x176>
 800d424:	4615      	mov	r5, r2
 800d426:	e7bd      	b.n	800d3a4 <_printf_i+0x12c>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	6826      	ldr	r6, [r4, #0]
 800d42c:	6961      	ldr	r1, [r4, #20]
 800d42e:	1d18      	adds	r0, r3, #4
 800d430:	6028      	str	r0, [r5, #0]
 800d432:	0635      	lsls	r5, r6, #24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	d501      	bpl.n	800d43c <_printf_i+0x1c4>
 800d438:	6019      	str	r1, [r3, #0]
 800d43a:	e002      	b.n	800d442 <_printf_i+0x1ca>
 800d43c:	0670      	lsls	r0, r6, #25
 800d43e:	d5fb      	bpl.n	800d438 <_printf_i+0x1c0>
 800d440:	8019      	strh	r1, [r3, #0]
 800d442:	2300      	movs	r3, #0
 800d444:	6123      	str	r3, [r4, #16]
 800d446:	4615      	mov	r5, r2
 800d448:	e7bc      	b.n	800d3c4 <_printf_i+0x14c>
 800d44a:	682b      	ldr	r3, [r5, #0]
 800d44c:	1d1a      	adds	r2, r3, #4
 800d44e:	602a      	str	r2, [r5, #0]
 800d450:	681d      	ldr	r5, [r3, #0]
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	2100      	movs	r1, #0
 800d456:	4628      	mov	r0, r5
 800d458:	f7f2 feda 	bl	8000210 <memchr>
 800d45c:	b108      	cbz	r0, 800d462 <_printf_i+0x1ea>
 800d45e:	1b40      	subs	r0, r0, r5
 800d460:	6060      	str	r0, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	2300      	movs	r3, #0
 800d468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d46c:	e7aa      	b.n	800d3c4 <_printf_i+0x14c>
 800d46e:	6923      	ldr	r3, [r4, #16]
 800d470:	462a      	mov	r2, r5
 800d472:	4649      	mov	r1, r9
 800d474:	4640      	mov	r0, r8
 800d476:	47d0      	blx	sl
 800d478:	3001      	adds	r0, #1
 800d47a:	d0ad      	beq.n	800d3d8 <_printf_i+0x160>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	079b      	lsls	r3, r3, #30
 800d480:	d413      	bmi.n	800d4aa <_printf_i+0x232>
 800d482:	68e0      	ldr	r0, [r4, #12]
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	4298      	cmp	r0, r3
 800d488:	bfb8      	it	lt
 800d48a:	4618      	movlt	r0, r3
 800d48c:	e7a6      	b.n	800d3dc <_printf_i+0x164>
 800d48e:	2301      	movs	r3, #1
 800d490:	4632      	mov	r2, r6
 800d492:	4649      	mov	r1, r9
 800d494:	4640      	mov	r0, r8
 800d496:	47d0      	blx	sl
 800d498:	3001      	adds	r0, #1
 800d49a:	d09d      	beq.n	800d3d8 <_printf_i+0x160>
 800d49c:	3501      	adds	r5, #1
 800d49e:	68e3      	ldr	r3, [r4, #12]
 800d4a0:	9903      	ldr	r1, [sp, #12]
 800d4a2:	1a5b      	subs	r3, r3, r1
 800d4a4:	42ab      	cmp	r3, r5
 800d4a6:	dcf2      	bgt.n	800d48e <_printf_i+0x216>
 800d4a8:	e7eb      	b.n	800d482 <_printf_i+0x20a>
 800d4aa:	2500      	movs	r5, #0
 800d4ac:	f104 0619 	add.w	r6, r4, #25
 800d4b0:	e7f5      	b.n	800d49e <_printf_i+0x226>
 800d4b2:	bf00      	nop
 800d4b4:	080152dc 	.word	0x080152dc
 800d4b8:	080152ed 	.word	0x080152ed

0800d4bc <sniprintf>:
 800d4bc:	b40c      	push	{r2, r3}
 800d4be:	b530      	push	{r4, r5, lr}
 800d4c0:	4b17      	ldr	r3, [pc, #92]	; (800d520 <sniprintf+0x64>)
 800d4c2:	1e0c      	subs	r4, r1, #0
 800d4c4:	681d      	ldr	r5, [r3, #0]
 800d4c6:	b09d      	sub	sp, #116	; 0x74
 800d4c8:	da08      	bge.n	800d4dc <sniprintf+0x20>
 800d4ca:	238b      	movs	r3, #139	; 0x8b
 800d4cc:	602b      	str	r3, [r5, #0]
 800d4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4d2:	b01d      	add	sp, #116	; 0x74
 800d4d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4d8:	b002      	add	sp, #8
 800d4da:	4770      	bx	lr
 800d4dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4e4:	bf14      	ite	ne
 800d4e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d4ea:	4623      	moveq	r3, r4
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	9307      	str	r3, [sp, #28]
 800d4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4f4:	9002      	str	r0, [sp, #8]
 800d4f6:	9006      	str	r0, [sp, #24]
 800d4f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4fe:	ab21      	add	r3, sp, #132	; 0x84
 800d500:	a902      	add	r1, sp, #8
 800d502:	4628      	mov	r0, r5
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	f001 fa1b 	bl	800e940 <_svfiprintf_r>
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	bfbc      	itt	lt
 800d50e:	238b      	movlt	r3, #139	; 0x8b
 800d510:	602b      	strlt	r3, [r5, #0]
 800d512:	2c00      	cmp	r4, #0
 800d514:	d0dd      	beq.n	800d4d2 <sniprintf+0x16>
 800d516:	9b02      	ldr	r3, [sp, #8]
 800d518:	2200      	movs	r2, #0
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	e7d9      	b.n	800d4d2 <sniprintf+0x16>
 800d51e:	bf00      	nop
 800d520:	2000009c 	.word	0x2000009c

0800d524 <__malloc_lock>:
 800d524:	4801      	ldr	r0, [pc, #4]	; (800d52c <__malloc_lock+0x8>)
 800d526:	f000 baba 	b.w	800da9e <__retarget_lock_acquire_recursive>
 800d52a:	bf00      	nop
 800d52c:	20009638 	.word	0x20009638

0800d530 <__malloc_unlock>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__malloc_unlock+0x8>)
 800d532:	f000 bab5 	b.w	800daa0 <__retarget_lock_release_recursive>
 800d536:	bf00      	nop
 800d538:	20009638 	.word	0x20009638

0800d53c <siprintf>:
 800d53c:	b40e      	push	{r1, r2, r3}
 800d53e:	b500      	push	{lr}
 800d540:	b09c      	sub	sp, #112	; 0x70
 800d542:	ab1d      	add	r3, sp, #116	; 0x74
 800d544:	9002      	str	r0, [sp, #8]
 800d546:	9006      	str	r0, [sp, #24]
 800d548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d54c:	4809      	ldr	r0, [pc, #36]	; (800d574 <siprintf+0x38>)
 800d54e:	9107      	str	r1, [sp, #28]
 800d550:	9104      	str	r1, [sp, #16]
 800d552:	4909      	ldr	r1, [pc, #36]	; (800d578 <siprintf+0x3c>)
 800d554:	f853 2b04 	ldr.w	r2, [r3], #4
 800d558:	9105      	str	r1, [sp, #20]
 800d55a:	6800      	ldr	r0, [r0, #0]
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	a902      	add	r1, sp, #8
 800d560:	f001 f9ee 	bl	800e940 <_svfiprintf_r>
 800d564:	9b02      	ldr	r3, [sp, #8]
 800d566:	2200      	movs	r2, #0
 800d568:	701a      	strb	r2, [r3, #0]
 800d56a:	b01c      	add	sp, #112	; 0x70
 800d56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d570:	b003      	add	sp, #12
 800d572:	4770      	bx	lr
 800d574:	2000009c 	.word	0x2000009c
 800d578:	ffff0208 	.word	0xffff0208

0800d57c <siscanf>:
 800d57c:	b40e      	push	{r1, r2, r3}
 800d57e:	b510      	push	{r4, lr}
 800d580:	b09f      	sub	sp, #124	; 0x7c
 800d582:	ac21      	add	r4, sp, #132	; 0x84
 800d584:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d588:	f854 2b04 	ldr.w	r2, [r4], #4
 800d58c:	9201      	str	r2, [sp, #4]
 800d58e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d592:	9004      	str	r0, [sp, #16]
 800d594:	9008      	str	r0, [sp, #32]
 800d596:	f7f2 fe8b 	bl	80002b0 <strlen>
 800d59a:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <siscanf+0x50>)
 800d59c:	9005      	str	r0, [sp, #20]
 800d59e:	9009      	str	r0, [sp, #36]	; 0x24
 800d5a0:	930d      	str	r3, [sp, #52]	; 0x34
 800d5a2:	480b      	ldr	r0, [pc, #44]	; (800d5d0 <siscanf+0x54>)
 800d5a4:	9a01      	ldr	r2, [sp, #4]
 800d5a6:	6800      	ldr	r0, [r0, #0]
 800d5a8:	9403      	str	r4, [sp, #12]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9311      	str	r3, [sp, #68]	; 0x44
 800d5ae:	9316      	str	r3, [sp, #88]	; 0x58
 800d5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d5b8:	a904      	add	r1, sp, #16
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	f001 fb18 	bl	800ebf0 <__ssvfiscanf_r>
 800d5c0:	b01f      	add	sp, #124	; 0x7c
 800d5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5c6:	b003      	add	sp, #12
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	0800d5f7 	.word	0x0800d5f7
 800d5d0:	2000009c 	.word	0x2000009c

0800d5d4 <__sread>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5dc:	f000 fa00 	bl	800d9e0 <_read_r>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	bfab      	itete	ge
 800d5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5e8:	181b      	addge	r3, r3, r0
 800d5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ee:	bfac      	ite	ge
 800d5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5f2:	81a3      	strhlt	r3, [r4, #12]
 800d5f4:	bd10      	pop	{r4, pc}

0800d5f6 <__seofread>:
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	4770      	bx	lr

0800d5fa <__swrite>:
 800d5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fe:	461f      	mov	r7, r3
 800d600:	898b      	ldrh	r3, [r1, #12]
 800d602:	05db      	lsls	r3, r3, #23
 800d604:	4605      	mov	r5, r0
 800d606:	460c      	mov	r4, r1
 800d608:	4616      	mov	r6, r2
 800d60a:	d505      	bpl.n	800d618 <__swrite+0x1e>
 800d60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d610:	2302      	movs	r3, #2
 800d612:	2200      	movs	r2, #0
 800d614:	f000 f9d2 	bl	800d9bc <_lseek_r>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	4632      	mov	r2, r6
 800d626:	463b      	mov	r3, r7
 800d628:	4628      	mov	r0, r5
 800d62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d62e:	f000 b9f9 	b.w	800da24 <_write_r>

0800d632 <__sseek>:
 800d632:	b510      	push	{r4, lr}
 800d634:	460c      	mov	r4, r1
 800d636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d63a:	f000 f9bf 	bl	800d9bc <_lseek_r>
 800d63e:	1c43      	adds	r3, r0, #1
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	bf15      	itete	ne
 800d644:	6560      	strne	r0, [r4, #84]	; 0x54
 800d646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d64e:	81a3      	strheq	r3, [r4, #12]
 800d650:	bf18      	it	ne
 800d652:	81a3      	strhne	r3, [r4, #12]
 800d654:	bd10      	pop	{r4, pc}

0800d656 <__sclose>:
 800d656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d65a:	f000 b99f 	b.w	800d99c <_close_r>
	...

0800d660 <std>:
 800d660:	2300      	movs	r3, #0
 800d662:	b510      	push	{r4, lr}
 800d664:	4604      	mov	r4, r0
 800d666:	e9c0 3300 	strd	r3, r3, [r0]
 800d66a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d66e:	6083      	str	r3, [r0, #8]
 800d670:	8181      	strh	r1, [r0, #12]
 800d672:	6643      	str	r3, [r0, #100]	; 0x64
 800d674:	81c2      	strh	r2, [r0, #14]
 800d676:	6183      	str	r3, [r0, #24]
 800d678:	4619      	mov	r1, r3
 800d67a:	2208      	movs	r2, #8
 800d67c:	305c      	adds	r0, #92	; 0x5c
 800d67e:	f000 f981 	bl	800d984 <memset>
 800d682:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <std+0x58>)
 800d684:	6263      	str	r3, [r4, #36]	; 0x24
 800d686:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <std+0x5c>)
 800d688:	62a3      	str	r3, [r4, #40]	; 0x28
 800d68a:	4b0d      	ldr	r3, [pc, #52]	; (800d6c0 <std+0x60>)
 800d68c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d68e:	4b0d      	ldr	r3, [pc, #52]	; (800d6c4 <std+0x64>)
 800d690:	6323      	str	r3, [r4, #48]	; 0x30
 800d692:	4b0d      	ldr	r3, [pc, #52]	; (800d6c8 <std+0x68>)
 800d694:	6224      	str	r4, [r4, #32]
 800d696:	429c      	cmp	r4, r3
 800d698:	d006      	beq.n	800d6a8 <std+0x48>
 800d69a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d69e:	4294      	cmp	r4, r2
 800d6a0:	d002      	beq.n	800d6a8 <std+0x48>
 800d6a2:	33d0      	adds	r3, #208	; 0xd0
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	d105      	bne.n	800d6b4 <std+0x54>
 800d6a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6b0:	f000 b9f4 	b.w	800da9c <__retarget_lock_init_recursive>
 800d6b4:	bd10      	pop	{r4, pc}
 800d6b6:	bf00      	nop
 800d6b8:	0800d5d5 	.word	0x0800d5d5
 800d6bc:	0800d5fb 	.word	0x0800d5fb
 800d6c0:	0800d633 	.word	0x0800d633
 800d6c4:	0800d657 	.word	0x0800d657
 800d6c8:	200094f8 	.word	0x200094f8

0800d6cc <stdio_exit_handler>:
 800d6cc:	4a02      	ldr	r2, [pc, #8]	; (800d6d8 <stdio_exit_handler+0xc>)
 800d6ce:	4903      	ldr	r1, [pc, #12]	; (800d6dc <stdio_exit_handler+0x10>)
 800d6d0:	4803      	ldr	r0, [pc, #12]	; (800d6e0 <stdio_exit_handler+0x14>)
 800d6d2:	f000 b8ed 	b.w	800d8b0 <_fwalk_sglue>
 800d6d6:	bf00      	nop
 800d6d8:	20000044 	.word	0x20000044
 800d6dc:	0800f585 	.word	0x0800f585
 800d6e0:	20000050 	.word	0x20000050

0800d6e4 <cleanup_stdio>:
 800d6e4:	6841      	ldr	r1, [r0, #4]
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <cleanup_stdio+0x34>)
 800d6e8:	4299      	cmp	r1, r3
 800d6ea:	b510      	push	{r4, lr}
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	d001      	beq.n	800d6f4 <cleanup_stdio+0x10>
 800d6f0:	f001 ff48 	bl	800f584 <_fflush_r>
 800d6f4:	68a1      	ldr	r1, [r4, #8]
 800d6f6:	4b09      	ldr	r3, [pc, #36]	; (800d71c <cleanup_stdio+0x38>)
 800d6f8:	4299      	cmp	r1, r3
 800d6fa:	d002      	beq.n	800d702 <cleanup_stdio+0x1e>
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f001 ff41 	bl	800f584 <_fflush_r>
 800d702:	68e1      	ldr	r1, [r4, #12]
 800d704:	4b06      	ldr	r3, [pc, #24]	; (800d720 <cleanup_stdio+0x3c>)
 800d706:	4299      	cmp	r1, r3
 800d708:	d004      	beq.n	800d714 <cleanup_stdio+0x30>
 800d70a:	4620      	mov	r0, r4
 800d70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d710:	f001 bf38 	b.w	800f584 <_fflush_r>
 800d714:	bd10      	pop	{r4, pc}
 800d716:	bf00      	nop
 800d718:	200094f8 	.word	0x200094f8
 800d71c:	20009560 	.word	0x20009560
 800d720:	200095c8 	.word	0x200095c8

0800d724 <global_stdio_init.part.0>:
 800d724:	b510      	push	{r4, lr}
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <global_stdio_init.part.0+0x30>)
 800d728:	4c0b      	ldr	r4, [pc, #44]	; (800d758 <global_stdio_init.part.0+0x34>)
 800d72a:	4a0c      	ldr	r2, [pc, #48]	; (800d75c <global_stdio_init.part.0+0x38>)
 800d72c:	601a      	str	r2, [r3, #0]
 800d72e:	4620      	mov	r0, r4
 800d730:	2200      	movs	r2, #0
 800d732:	2104      	movs	r1, #4
 800d734:	f7ff ff94 	bl	800d660 <std>
 800d738:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d73c:	2201      	movs	r2, #1
 800d73e:	2109      	movs	r1, #9
 800d740:	f7ff ff8e 	bl	800d660 <std>
 800d744:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d748:	2202      	movs	r2, #2
 800d74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74e:	2112      	movs	r1, #18
 800d750:	f7ff bf86 	b.w	800d660 <std>
 800d754:	20009630 	.word	0x20009630
 800d758:	200094f8 	.word	0x200094f8
 800d75c:	0800d6cd 	.word	0x0800d6cd

0800d760 <__sfp_lock_acquire>:
 800d760:	4801      	ldr	r0, [pc, #4]	; (800d768 <__sfp_lock_acquire+0x8>)
 800d762:	f000 b99c 	b.w	800da9e <__retarget_lock_acquire_recursive>
 800d766:	bf00      	nop
 800d768:	20009639 	.word	0x20009639

0800d76c <__sfp_lock_release>:
 800d76c:	4801      	ldr	r0, [pc, #4]	; (800d774 <__sfp_lock_release+0x8>)
 800d76e:	f000 b997 	b.w	800daa0 <__retarget_lock_release_recursive>
 800d772:	bf00      	nop
 800d774:	20009639 	.word	0x20009639

0800d778 <__sinit>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	4604      	mov	r4, r0
 800d77c:	f7ff fff0 	bl	800d760 <__sfp_lock_acquire>
 800d780:	6a23      	ldr	r3, [r4, #32]
 800d782:	b11b      	cbz	r3, 800d78c <__sinit+0x14>
 800d784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d788:	f7ff bff0 	b.w	800d76c <__sfp_lock_release>
 800d78c:	4b04      	ldr	r3, [pc, #16]	; (800d7a0 <__sinit+0x28>)
 800d78e:	6223      	str	r3, [r4, #32]
 800d790:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <__sinit+0x2c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1f5      	bne.n	800d784 <__sinit+0xc>
 800d798:	f7ff ffc4 	bl	800d724 <global_stdio_init.part.0>
 800d79c:	e7f2      	b.n	800d784 <__sinit+0xc>
 800d79e:	bf00      	nop
 800d7a0:	0800d6e5 	.word	0x0800d6e5
 800d7a4:	20009630 	.word	0x20009630

0800d7a8 <_strtol_l.constprop.0>:
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ae:	d001      	beq.n	800d7b4 <_strtol_l.constprop.0+0xc>
 800d7b0:	2b24      	cmp	r3, #36	; 0x24
 800d7b2:	d906      	bls.n	800d7c2 <_strtol_l.constprop.0+0x1a>
 800d7b4:	f000 f948 	bl	800da48 <__errno>
 800d7b8:	2316      	movs	r3, #22
 800d7ba:	6003      	str	r3, [r0, #0]
 800d7bc:	2000      	movs	r0, #0
 800d7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d8a8 <_strtol_l.constprop.0+0x100>
 800d7c6:	460d      	mov	r5, r1
 800d7c8:	462e      	mov	r6, r5
 800d7ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d7ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d7d2:	f017 0708 	ands.w	r7, r7, #8
 800d7d6:	d1f7      	bne.n	800d7c8 <_strtol_l.constprop.0+0x20>
 800d7d8:	2c2d      	cmp	r4, #45	; 0x2d
 800d7da:	d132      	bne.n	800d842 <_strtol_l.constprop.0+0x9a>
 800d7dc:	782c      	ldrb	r4, [r5, #0]
 800d7de:	2701      	movs	r7, #1
 800d7e0:	1cb5      	adds	r5, r6, #2
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d05b      	beq.n	800d89e <_strtol_l.constprop.0+0xf6>
 800d7e6:	2b10      	cmp	r3, #16
 800d7e8:	d109      	bne.n	800d7fe <_strtol_l.constprop.0+0x56>
 800d7ea:	2c30      	cmp	r4, #48	; 0x30
 800d7ec:	d107      	bne.n	800d7fe <_strtol_l.constprop.0+0x56>
 800d7ee:	782c      	ldrb	r4, [r5, #0]
 800d7f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d7f4:	2c58      	cmp	r4, #88	; 0x58
 800d7f6:	d14d      	bne.n	800d894 <_strtol_l.constprop.0+0xec>
 800d7f8:	786c      	ldrb	r4, [r5, #1]
 800d7fa:	2310      	movs	r3, #16
 800d7fc:	3502      	adds	r5, #2
 800d7fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d802:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d806:	f04f 0e00 	mov.w	lr, #0
 800d80a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d80e:	4676      	mov	r6, lr
 800d810:	fb03 8a19 	mls	sl, r3, r9, r8
 800d814:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d818:	f1bc 0f09 	cmp.w	ip, #9
 800d81c:	d816      	bhi.n	800d84c <_strtol_l.constprop.0+0xa4>
 800d81e:	4664      	mov	r4, ip
 800d820:	42a3      	cmp	r3, r4
 800d822:	dd24      	ble.n	800d86e <_strtol_l.constprop.0+0xc6>
 800d824:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d828:	d008      	beq.n	800d83c <_strtol_l.constprop.0+0x94>
 800d82a:	45b1      	cmp	r9, r6
 800d82c:	d31c      	bcc.n	800d868 <_strtol_l.constprop.0+0xc0>
 800d82e:	d101      	bne.n	800d834 <_strtol_l.constprop.0+0x8c>
 800d830:	45a2      	cmp	sl, r4
 800d832:	db19      	blt.n	800d868 <_strtol_l.constprop.0+0xc0>
 800d834:	fb06 4603 	mla	r6, r6, r3, r4
 800d838:	f04f 0e01 	mov.w	lr, #1
 800d83c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d840:	e7e8      	b.n	800d814 <_strtol_l.constprop.0+0x6c>
 800d842:	2c2b      	cmp	r4, #43	; 0x2b
 800d844:	bf04      	itt	eq
 800d846:	782c      	ldrbeq	r4, [r5, #0]
 800d848:	1cb5      	addeq	r5, r6, #2
 800d84a:	e7ca      	b.n	800d7e2 <_strtol_l.constprop.0+0x3a>
 800d84c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d850:	f1bc 0f19 	cmp.w	ip, #25
 800d854:	d801      	bhi.n	800d85a <_strtol_l.constprop.0+0xb2>
 800d856:	3c37      	subs	r4, #55	; 0x37
 800d858:	e7e2      	b.n	800d820 <_strtol_l.constprop.0+0x78>
 800d85a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d85e:	f1bc 0f19 	cmp.w	ip, #25
 800d862:	d804      	bhi.n	800d86e <_strtol_l.constprop.0+0xc6>
 800d864:	3c57      	subs	r4, #87	; 0x57
 800d866:	e7db      	b.n	800d820 <_strtol_l.constprop.0+0x78>
 800d868:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800d86c:	e7e6      	b.n	800d83c <_strtol_l.constprop.0+0x94>
 800d86e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d872:	d105      	bne.n	800d880 <_strtol_l.constprop.0+0xd8>
 800d874:	2322      	movs	r3, #34	; 0x22
 800d876:	6003      	str	r3, [r0, #0]
 800d878:	4646      	mov	r6, r8
 800d87a:	b942      	cbnz	r2, 800d88e <_strtol_l.constprop.0+0xe6>
 800d87c:	4630      	mov	r0, r6
 800d87e:	e79e      	b.n	800d7be <_strtol_l.constprop.0+0x16>
 800d880:	b107      	cbz	r7, 800d884 <_strtol_l.constprop.0+0xdc>
 800d882:	4276      	negs	r6, r6
 800d884:	2a00      	cmp	r2, #0
 800d886:	d0f9      	beq.n	800d87c <_strtol_l.constprop.0+0xd4>
 800d888:	f1be 0f00 	cmp.w	lr, #0
 800d88c:	d000      	beq.n	800d890 <_strtol_l.constprop.0+0xe8>
 800d88e:	1e69      	subs	r1, r5, #1
 800d890:	6011      	str	r1, [r2, #0]
 800d892:	e7f3      	b.n	800d87c <_strtol_l.constprop.0+0xd4>
 800d894:	2430      	movs	r4, #48	; 0x30
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1b1      	bne.n	800d7fe <_strtol_l.constprop.0+0x56>
 800d89a:	2308      	movs	r3, #8
 800d89c:	e7af      	b.n	800d7fe <_strtol_l.constprop.0+0x56>
 800d89e:	2c30      	cmp	r4, #48	; 0x30
 800d8a0:	d0a5      	beq.n	800d7ee <_strtol_l.constprop.0+0x46>
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	e7ab      	b.n	800d7fe <_strtol_l.constprop.0+0x56>
 800d8a6:	bf00      	nop
 800d8a8:	080152ff 	.word	0x080152ff

0800d8ac <_strtol_r>:
 800d8ac:	f7ff bf7c 	b.w	800d7a8 <_strtol_l.constprop.0>

0800d8b0 <_fwalk_sglue>:
 800d8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	4688      	mov	r8, r1
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	2600      	movs	r6, #0
 800d8bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8c0:	f1b9 0901 	subs.w	r9, r9, #1
 800d8c4:	d505      	bpl.n	800d8d2 <_fwalk_sglue+0x22>
 800d8c6:	6824      	ldr	r4, [r4, #0]
 800d8c8:	2c00      	cmp	r4, #0
 800d8ca:	d1f7      	bne.n	800d8bc <_fwalk_sglue+0xc>
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	89ab      	ldrh	r3, [r5, #12]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d907      	bls.n	800d8e8 <_fwalk_sglue+0x38>
 800d8d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	d003      	beq.n	800d8e8 <_fwalk_sglue+0x38>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	47c0      	blx	r8
 800d8e6:	4306      	orrs	r6, r0
 800d8e8:	3568      	adds	r5, #104	; 0x68
 800d8ea:	e7e9      	b.n	800d8c0 <_fwalk_sglue+0x10>

0800d8ec <_vsniprintf_r>:
 800d8ec:	b530      	push	{r4, r5, lr}
 800d8ee:	4614      	mov	r4, r2
 800d8f0:	2c00      	cmp	r4, #0
 800d8f2:	b09b      	sub	sp, #108	; 0x6c
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	da05      	bge.n	800d906 <_vsniprintf_r+0x1a>
 800d8fa:	238b      	movs	r3, #139	; 0x8b
 800d8fc:	6003      	str	r3, [r0, #0]
 800d8fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d902:	b01b      	add	sp, #108	; 0x6c
 800d904:	bd30      	pop	{r4, r5, pc}
 800d906:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d90a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d90e:	bf14      	ite	ne
 800d910:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d914:	4623      	moveq	r3, r4
 800d916:	9302      	str	r3, [sp, #8]
 800d918:	9305      	str	r3, [sp, #20]
 800d91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d91e:	9100      	str	r1, [sp, #0]
 800d920:	9104      	str	r1, [sp, #16]
 800d922:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d926:	4669      	mov	r1, sp
 800d928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d92a:	f001 f809 	bl	800e940 <_svfiprintf_r>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	bfbc      	itt	lt
 800d932:	238b      	movlt	r3, #139	; 0x8b
 800d934:	602b      	strlt	r3, [r5, #0]
 800d936:	2c00      	cmp	r4, #0
 800d938:	d0e3      	beq.n	800d902 <_vsniprintf_r+0x16>
 800d93a:	9b00      	ldr	r3, [sp, #0]
 800d93c:	2200      	movs	r2, #0
 800d93e:	701a      	strb	r2, [r3, #0]
 800d940:	e7df      	b.n	800d902 <_vsniprintf_r+0x16>
	...

0800d944 <vsniprintf>:
 800d944:	b507      	push	{r0, r1, r2, lr}
 800d946:	9300      	str	r3, [sp, #0]
 800d948:	4613      	mov	r3, r2
 800d94a:	460a      	mov	r2, r1
 800d94c:	4601      	mov	r1, r0
 800d94e:	4803      	ldr	r0, [pc, #12]	; (800d95c <vsniprintf+0x18>)
 800d950:	6800      	ldr	r0, [r0, #0]
 800d952:	f7ff ffcb 	bl	800d8ec <_vsniprintf_r>
 800d956:	b003      	add	sp, #12
 800d958:	f85d fb04 	ldr.w	pc, [sp], #4
 800d95c:	2000009c 	.word	0x2000009c

0800d960 <iprintf>:
 800d960:	b40f      	push	{r0, r1, r2, r3}
 800d962:	b507      	push	{r0, r1, r2, lr}
 800d964:	4906      	ldr	r1, [pc, #24]	; (800d980 <iprintf+0x20>)
 800d966:	ab04      	add	r3, sp, #16
 800d968:	6808      	ldr	r0, [r1, #0]
 800d96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96e:	6881      	ldr	r1, [r0, #8]
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	f001 fadf 	bl	800ef34 <_vfiprintf_r>
 800d976:	b003      	add	sp, #12
 800d978:	f85d eb04 	ldr.w	lr, [sp], #4
 800d97c:	b004      	add	sp, #16
 800d97e:	4770      	bx	lr
 800d980:	2000009c 	.word	0x2000009c

0800d984 <memset>:
 800d984:	4402      	add	r2, r0
 800d986:	4603      	mov	r3, r0
 800d988:	4293      	cmp	r3, r2
 800d98a:	d100      	bne.n	800d98e <memset+0xa>
 800d98c:	4770      	bx	lr
 800d98e:	f803 1b01 	strb.w	r1, [r3], #1
 800d992:	e7f9      	b.n	800d988 <memset+0x4>

0800d994 <_localeconv_r>:
 800d994:	4800      	ldr	r0, [pc, #0]	; (800d998 <_localeconv_r+0x4>)
 800d996:	4770      	bx	lr
 800d998:	20000190 	.word	0x20000190

0800d99c <_close_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <_close_r+0x1c>)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	f7f7 f913 	bl	8004bd2 <_close>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_close_r+0x1a>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_close_r+0x1a>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20009634 	.word	0x20009634

0800d9bc <_lseek_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d07      	ldr	r5, [pc, #28]	; (800d9dc <_lseek_r+0x20>)
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f7 f928 	bl	8004c20 <_lseek>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_lseek_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_lseek_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	20009634 	.word	0x20009634

0800d9e0 <_read_r>:
 800d9e0:	b538      	push	{r3, r4, r5, lr}
 800d9e2:	4d07      	ldr	r5, [pc, #28]	; (800da00 <_read_r+0x20>)
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	4608      	mov	r0, r1
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	602a      	str	r2, [r5, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	f7f7 f8b6 	bl	8004b60 <_read>
 800d9f4:	1c43      	adds	r3, r0, #1
 800d9f6:	d102      	bne.n	800d9fe <_read_r+0x1e>
 800d9f8:	682b      	ldr	r3, [r5, #0]
 800d9fa:	b103      	cbz	r3, 800d9fe <_read_r+0x1e>
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	bd38      	pop	{r3, r4, r5, pc}
 800da00:	20009634 	.word	0x20009634

0800da04 <_sbrk_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4d06      	ldr	r5, [pc, #24]	; (800da20 <_sbrk_r+0x1c>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	f7f7 f914 	bl	8004c3c <_sbrk>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d102      	bne.n	800da1e <_sbrk_r+0x1a>
 800da18:	682b      	ldr	r3, [r5, #0]
 800da1a:	b103      	cbz	r3, 800da1e <_sbrk_r+0x1a>
 800da1c:	6023      	str	r3, [r4, #0]
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	20009634 	.word	0x20009634

0800da24 <_write_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d07      	ldr	r5, [pc, #28]	; (800da44 <_write_r+0x20>)
 800da28:	4604      	mov	r4, r0
 800da2a:	4608      	mov	r0, r1
 800da2c:	4611      	mov	r1, r2
 800da2e:	2200      	movs	r2, #0
 800da30:	602a      	str	r2, [r5, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	f7f7 f8b1 	bl	8004b9a <_write>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_write_r+0x1e>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_write_r+0x1e>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	20009634 	.word	0x20009634

0800da48 <__errno>:
 800da48:	4b01      	ldr	r3, [pc, #4]	; (800da50 <__errno+0x8>)
 800da4a:	6818      	ldr	r0, [r3, #0]
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	2000009c 	.word	0x2000009c

0800da54 <__libc_init_array>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	4d0d      	ldr	r5, [pc, #52]	; (800da8c <__libc_init_array+0x38>)
 800da58:	4c0d      	ldr	r4, [pc, #52]	; (800da90 <__libc_init_array+0x3c>)
 800da5a:	1b64      	subs	r4, r4, r5
 800da5c:	10a4      	asrs	r4, r4, #2
 800da5e:	2600      	movs	r6, #0
 800da60:	42a6      	cmp	r6, r4
 800da62:	d109      	bne.n	800da78 <__libc_init_array+0x24>
 800da64:	4d0b      	ldr	r5, [pc, #44]	; (800da94 <__libc_init_array+0x40>)
 800da66:	4c0c      	ldr	r4, [pc, #48]	; (800da98 <__libc_init_array+0x44>)
 800da68:	f003 f80e 	bl	8010a88 <_init>
 800da6c:	1b64      	subs	r4, r4, r5
 800da6e:	10a4      	asrs	r4, r4, #2
 800da70:	2600      	movs	r6, #0
 800da72:	42a6      	cmp	r6, r4
 800da74:	d105      	bne.n	800da82 <__libc_init_array+0x2e>
 800da76:	bd70      	pop	{r4, r5, r6, pc}
 800da78:	f855 3b04 	ldr.w	r3, [r5], #4
 800da7c:	4798      	blx	r3
 800da7e:	3601      	adds	r6, #1
 800da80:	e7ee      	b.n	800da60 <__libc_init_array+0xc>
 800da82:	f855 3b04 	ldr.w	r3, [r5], #4
 800da86:	4798      	blx	r3
 800da88:	3601      	adds	r6, #1
 800da8a:	e7f2      	b.n	800da72 <__libc_init_array+0x1e>
 800da8c:	08015660 	.word	0x08015660
 800da90:	08015660 	.word	0x08015660
 800da94:	08015660 	.word	0x08015660
 800da98:	08015664 	.word	0x08015664

0800da9c <__retarget_lock_init_recursive>:
 800da9c:	4770      	bx	lr

0800da9e <__retarget_lock_acquire_recursive>:
 800da9e:	4770      	bx	lr

0800daa0 <__retarget_lock_release_recursive>:
 800daa0:	4770      	bx	lr

0800daa2 <memcpy>:
 800daa2:	440a      	add	r2, r1
 800daa4:	4291      	cmp	r1, r2
 800daa6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800daaa:	d100      	bne.n	800daae <memcpy+0xc>
 800daac:	4770      	bx	lr
 800daae:	b510      	push	{r4, lr}
 800dab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab8:	4291      	cmp	r1, r2
 800daba:	d1f9      	bne.n	800dab0 <memcpy+0xe>
 800dabc:	bd10      	pop	{r4, pc}
	...

0800dac0 <__assert_func>:
 800dac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dac2:	4614      	mov	r4, r2
 800dac4:	461a      	mov	r2, r3
 800dac6:	4b09      	ldr	r3, [pc, #36]	; (800daec <__assert_func+0x2c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4605      	mov	r5, r0
 800dacc:	68d8      	ldr	r0, [r3, #12]
 800dace:	b14c      	cbz	r4, 800dae4 <__assert_func+0x24>
 800dad0:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <__assert_func+0x30>)
 800dad2:	9100      	str	r1, [sp, #0]
 800dad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dad8:	4906      	ldr	r1, [pc, #24]	; (800daf4 <__assert_func+0x34>)
 800dada:	462b      	mov	r3, r5
 800dadc:	f002 f8f6 	bl	800fccc <fiprintf>
 800dae0:	f002 fb18 	bl	8010114 <abort>
 800dae4:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <__assert_func+0x38>)
 800dae6:	461c      	mov	r4, r3
 800dae8:	e7f3      	b.n	800dad2 <__assert_func+0x12>
 800daea:	bf00      	nop
 800daec:	2000009c 	.word	0x2000009c
 800daf0:	080153ff 	.word	0x080153ff
 800daf4:	0801540c 	.word	0x0801540c
 800daf8:	0801543a 	.word	0x0801543a

0800dafc <quorem>:
 800dafc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	6903      	ldr	r3, [r0, #16]
 800db02:	690c      	ldr	r4, [r1, #16]
 800db04:	42a3      	cmp	r3, r4
 800db06:	4607      	mov	r7, r0
 800db08:	db7e      	blt.n	800dc08 <quorem+0x10c>
 800db0a:	3c01      	subs	r4, #1
 800db0c:	f101 0814 	add.w	r8, r1, #20
 800db10:	f100 0514 	add.w	r5, r0, #20
 800db14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db22:	3301      	adds	r3, #1
 800db24:	429a      	cmp	r2, r3
 800db26:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db2e:	fbb2 f6f3 	udiv	r6, r2, r3
 800db32:	d331      	bcc.n	800db98 <quorem+0x9c>
 800db34:	f04f 0e00 	mov.w	lr, #0
 800db38:	4640      	mov	r0, r8
 800db3a:	46ac      	mov	ip, r5
 800db3c:	46f2      	mov	sl, lr
 800db3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800db42:	b293      	uxth	r3, r2
 800db44:	fb06 e303 	mla	r3, r6, r3, lr
 800db48:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db4c:	0c1a      	lsrs	r2, r3, #16
 800db4e:	b29b      	uxth	r3, r3
 800db50:	ebaa 0303 	sub.w	r3, sl, r3
 800db54:	f8dc a000 	ldr.w	sl, [ip]
 800db58:	fa13 f38a 	uxtah	r3, r3, sl
 800db5c:	fb06 220e 	mla	r2, r6, lr, r2
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	9b00      	ldr	r3, [sp, #0]
 800db64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db68:	b292      	uxth	r2, r2
 800db6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db72:	f8bd 3000 	ldrh.w	r3, [sp]
 800db76:	4581      	cmp	r9, r0
 800db78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db7c:	f84c 3b04 	str.w	r3, [ip], #4
 800db80:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db84:	d2db      	bcs.n	800db3e <quorem+0x42>
 800db86:	f855 300b 	ldr.w	r3, [r5, fp]
 800db8a:	b92b      	cbnz	r3, 800db98 <quorem+0x9c>
 800db8c:	9b01      	ldr	r3, [sp, #4]
 800db8e:	3b04      	subs	r3, #4
 800db90:	429d      	cmp	r5, r3
 800db92:	461a      	mov	r2, r3
 800db94:	d32c      	bcc.n	800dbf0 <quorem+0xf4>
 800db96:	613c      	str	r4, [r7, #16]
 800db98:	4638      	mov	r0, r7
 800db9a:	f001 ff97 	bl	800facc <__mcmp>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	db22      	blt.n	800dbe8 <quorem+0xec>
 800dba2:	3601      	adds	r6, #1
 800dba4:	4629      	mov	r1, r5
 800dba6:	2000      	movs	r0, #0
 800dba8:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbac:	f8d1 c000 	ldr.w	ip, [r1]
 800dbb0:	b293      	uxth	r3, r2
 800dbb2:	1ac3      	subs	r3, r0, r3
 800dbb4:	0c12      	lsrs	r2, r2, #16
 800dbb6:	fa13 f38c 	uxtah	r3, r3, ip
 800dbba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dbbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbc8:	45c1      	cmp	r9, r8
 800dbca:	f841 3b04 	str.w	r3, [r1], #4
 800dbce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbd2:	d2e9      	bcs.n	800dba8 <quorem+0xac>
 800dbd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbdc:	b922      	cbnz	r2, 800dbe8 <quorem+0xec>
 800dbde:	3b04      	subs	r3, #4
 800dbe0:	429d      	cmp	r5, r3
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	d30a      	bcc.n	800dbfc <quorem+0x100>
 800dbe6:	613c      	str	r4, [r7, #16]
 800dbe8:	4630      	mov	r0, r6
 800dbea:	b003      	add	sp, #12
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	6812      	ldr	r2, [r2, #0]
 800dbf2:	3b04      	subs	r3, #4
 800dbf4:	2a00      	cmp	r2, #0
 800dbf6:	d1ce      	bne.n	800db96 <quorem+0x9a>
 800dbf8:	3c01      	subs	r4, #1
 800dbfa:	e7c9      	b.n	800db90 <quorem+0x94>
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	3b04      	subs	r3, #4
 800dc00:	2a00      	cmp	r2, #0
 800dc02:	d1f0      	bne.n	800dbe6 <quorem+0xea>
 800dc04:	3c01      	subs	r4, #1
 800dc06:	e7eb      	b.n	800dbe0 <quorem+0xe4>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	e7ee      	b.n	800dbea <quorem+0xee>
 800dc0c:	0000      	movs	r0, r0
	...

0800dc10 <_dtoa_r>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	ed2d 8b04 	vpush	{d8-d9}
 800dc18:	69c5      	ldr	r5, [r0, #28]
 800dc1a:	b093      	sub	sp, #76	; 0x4c
 800dc1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc20:	ec57 6b10 	vmov	r6, r7, d0
 800dc24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc28:	9107      	str	r1, [sp, #28]
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	920a      	str	r2, [sp, #40]	; 0x28
 800dc2e:	930d      	str	r3, [sp, #52]	; 0x34
 800dc30:	b975      	cbnz	r5, 800dc50 <_dtoa_r+0x40>
 800dc32:	2010      	movs	r0, #16
 800dc34:	f7ff fa0a 	bl	800d04c <malloc>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	61e0      	str	r0, [r4, #28]
 800dc3c:	b920      	cbnz	r0, 800dc48 <_dtoa_r+0x38>
 800dc3e:	4bae      	ldr	r3, [pc, #696]	; (800def8 <_dtoa_r+0x2e8>)
 800dc40:	21ef      	movs	r1, #239	; 0xef
 800dc42:	48ae      	ldr	r0, [pc, #696]	; (800defc <_dtoa_r+0x2ec>)
 800dc44:	f7ff ff3c 	bl	800dac0 <__assert_func>
 800dc48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc4c:	6005      	str	r5, [r0, #0]
 800dc4e:	60c5      	str	r5, [r0, #12]
 800dc50:	69e3      	ldr	r3, [r4, #28]
 800dc52:	6819      	ldr	r1, [r3, #0]
 800dc54:	b151      	cbz	r1, 800dc6c <_dtoa_r+0x5c>
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	604a      	str	r2, [r1, #4]
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	4093      	lsls	r3, r2
 800dc5e:	608b      	str	r3, [r1, #8]
 800dc60:	4620      	mov	r0, r4
 800dc62:	f001 fcf7 	bl	800f654 <_Bfree>
 800dc66:	69e3      	ldr	r3, [r4, #28]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	1e3b      	subs	r3, r7, #0
 800dc6e:	bfbb      	ittet	lt
 800dc70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc74:	9303      	strlt	r3, [sp, #12]
 800dc76:	2300      	movge	r3, #0
 800dc78:	2201      	movlt	r2, #1
 800dc7a:	bfac      	ite	ge
 800dc7c:	f8c8 3000 	strge.w	r3, [r8]
 800dc80:	f8c8 2000 	strlt.w	r2, [r8]
 800dc84:	4b9e      	ldr	r3, [pc, #632]	; (800df00 <_dtoa_r+0x2f0>)
 800dc86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dc8a:	ea33 0308 	bics.w	r3, r3, r8
 800dc8e:	d11b      	bne.n	800dcc8 <_dtoa_r+0xb8>
 800dc90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc92:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dc9c:	4333      	orrs	r3, r6
 800dc9e:	f000 8593 	beq.w	800e7c8 <_dtoa_r+0xbb8>
 800dca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dca4:	b963      	cbnz	r3, 800dcc0 <_dtoa_r+0xb0>
 800dca6:	4b97      	ldr	r3, [pc, #604]	; (800df04 <_dtoa_r+0x2f4>)
 800dca8:	e027      	b.n	800dcfa <_dtoa_r+0xea>
 800dcaa:	4b97      	ldr	r3, [pc, #604]	; (800df08 <_dtoa_r+0x2f8>)
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	3308      	adds	r3, #8
 800dcb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcb2:	6013      	str	r3, [r2, #0]
 800dcb4:	9800      	ldr	r0, [sp, #0]
 800dcb6:	b013      	add	sp, #76	; 0x4c
 800dcb8:	ecbd 8b04 	vpop	{d8-d9}
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc0:	4b90      	ldr	r3, [pc, #576]	; (800df04 <_dtoa_r+0x2f4>)
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	3303      	adds	r3, #3
 800dcc6:	e7f3      	b.n	800dcb0 <_dtoa_r+0xa0>
 800dcc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dccc:	2200      	movs	r2, #0
 800dcce:	ec51 0b17 	vmov	r0, r1, d7
 800dcd2:	eeb0 8a47 	vmov.f32	s16, s14
 800dcd6:	eef0 8a67 	vmov.f32	s17, s15
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f7f2 ff14 	bl	8000b08 <__aeabi_dcmpeq>
 800dce0:	4681      	mov	r9, r0
 800dce2:	b160      	cbz	r0, 800dcfe <_dtoa_r+0xee>
 800dce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dce6:	2301      	movs	r3, #1
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f000 8568 	beq.w	800e7c2 <_dtoa_r+0xbb2>
 800dcf2:	4b86      	ldr	r3, [pc, #536]	; (800df0c <_dtoa_r+0x2fc>)
 800dcf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	e7da      	b.n	800dcb4 <_dtoa_r+0xa4>
 800dcfe:	aa10      	add	r2, sp, #64	; 0x40
 800dd00:	a911      	add	r1, sp, #68	; 0x44
 800dd02:	4620      	mov	r0, r4
 800dd04:	eeb0 0a48 	vmov.f32	s0, s16
 800dd08:	eef0 0a68 	vmov.f32	s1, s17
 800dd0c:	f001 ff84 	bl	800fc18 <__d2b>
 800dd10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dd14:	4682      	mov	sl, r0
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	d07f      	beq.n	800de1a <_dtoa_r+0x20a>
 800dd1a:	ee18 3a90 	vmov	r3, s17
 800dd1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dd26:	ec51 0b18 	vmov	r0, r1, d8
 800dd2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dd36:	4619      	mov	r1, r3
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4b75      	ldr	r3, [pc, #468]	; (800df10 <_dtoa_r+0x300>)
 800dd3c:	f7f2 fac4 	bl	80002c8 <__aeabi_dsub>
 800dd40:	a367      	add	r3, pc, #412	; (adr r3, 800dee0 <_dtoa_r+0x2d0>)
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	f7f2 fc77 	bl	8000638 <__aeabi_dmul>
 800dd4a:	a367      	add	r3, pc, #412	; (adr r3, 800dee8 <_dtoa_r+0x2d8>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fabc 	bl	80002cc <__adddf3>
 800dd54:	4606      	mov	r6, r0
 800dd56:	4628      	mov	r0, r5
 800dd58:	460f      	mov	r7, r1
 800dd5a:	f7f2 fc03 	bl	8000564 <__aeabi_i2d>
 800dd5e:	a364      	add	r3, pc, #400	; (adr r3, 800def0 <_dtoa_r+0x2e0>)
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	f7f2 fc68 	bl	8000638 <__aeabi_dmul>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	4639      	mov	r1, r7
 800dd70:	f7f2 faac 	bl	80002cc <__adddf3>
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	f7f2 ff0e 	bl	8000b98 <__aeabi_d2iz>
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	4683      	mov	fp, r0
 800dd80:	2300      	movs	r3, #0
 800dd82:	4630      	mov	r0, r6
 800dd84:	4639      	mov	r1, r7
 800dd86:	f7f2 fec9 	bl	8000b1c <__aeabi_dcmplt>
 800dd8a:	b148      	cbz	r0, 800dda0 <_dtoa_r+0x190>
 800dd8c:	4658      	mov	r0, fp
 800dd8e:	f7f2 fbe9 	bl	8000564 <__aeabi_i2d>
 800dd92:	4632      	mov	r2, r6
 800dd94:	463b      	mov	r3, r7
 800dd96:	f7f2 feb7 	bl	8000b08 <__aeabi_dcmpeq>
 800dd9a:	b908      	cbnz	r0, 800dda0 <_dtoa_r+0x190>
 800dd9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dda0:	f1bb 0f16 	cmp.w	fp, #22
 800dda4:	d857      	bhi.n	800de56 <_dtoa_r+0x246>
 800dda6:	4b5b      	ldr	r3, [pc, #364]	; (800df14 <_dtoa_r+0x304>)
 800dda8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	ec51 0b18 	vmov	r0, r1, d8
 800ddb4:	f7f2 feb2 	bl	8000b1c <__aeabi_dcmplt>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d04e      	beq.n	800de5a <_dtoa_r+0x24a>
 800ddbc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	930c      	str	r3, [sp, #48]	; 0x30
 800ddc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddc6:	1b5b      	subs	r3, r3, r5
 800ddc8:	1e5a      	subs	r2, r3, #1
 800ddca:	bf45      	ittet	mi
 800ddcc:	f1c3 0301 	rsbmi	r3, r3, #1
 800ddd0:	9305      	strmi	r3, [sp, #20]
 800ddd2:	2300      	movpl	r3, #0
 800ddd4:	2300      	movmi	r3, #0
 800ddd6:	9206      	str	r2, [sp, #24]
 800ddd8:	bf54      	ite	pl
 800ddda:	9305      	strpl	r3, [sp, #20]
 800dddc:	9306      	strmi	r3, [sp, #24]
 800ddde:	f1bb 0f00 	cmp.w	fp, #0
 800dde2:	db3c      	blt.n	800de5e <_dtoa_r+0x24e>
 800dde4:	9b06      	ldr	r3, [sp, #24]
 800dde6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ddea:	445b      	add	r3, fp
 800ddec:	9306      	str	r3, [sp, #24]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9308      	str	r3, [sp, #32]
 800ddf2:	9b07      	ldr	r3, [sp, #28]
 800ddf4:	2b09      	cmp	r3, #9
 800ddf6:	d868      	bhi.n	800deca <_dtoa_r+0x2ba>
 800ddf8:	2b05      	cmp	r3, #5
 800ddfa:	bfc4      	itt	gt
 800ddfc:	3b04      	subgt	r3, #4
 800ddfe:	9307      	strgt	r3, [sp, #28]
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	f1a3 0302 	sub.w	r3, r3, #2
 800de06:	bfcc      	ite	gt
 800de08:	2500      	movgt	r5, #0
 800de0a:	2501      	movle	r5, #1
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	f200 8085 	bhi.w	800df1c <_dtoa_r+0x30c>
 800de12:	e8df f003 	tbb	[pc, r3]
 800de16:	3b2e      	.short	0x3b2e
 800de18:	5839      	.short	0x5839
 800de1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800de1e:	441d      	add	r5, r3
 800de20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800de24:	2b20      	cmp	r3, #32
 800de26:	bfc1      	itttt	gt
 800de28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800de30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800de34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800de38:	bfd6      	itet	le
 800de3a:	f1c3 0320 	rsble	r3, r3, #32
 800de3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800de42:	fa06 f003 	lslle.w	r0, r6, r3
 800de46:	f7f2 fb7d 	bl	8000544 <__aeabi_ui2d>
 800de4a:	2201      	movs	r2, #1
 800de4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800de50:	3d01      	subs	r5, #1
 800de52:	920e      	str	r2, [sp, #56]	; 0x38
 800de54:	e76f      	b.n	800dd36 <_dtoa_r+0x126>
 800de56:	2301      	movs	r3, #1
 800de58:	e7b3      	b.n	800ddc2 <_dtoa_r+0x1b2>
 800de5a:	900c      	str	r0, [sp, #48]	; 0x30
 800de5c:	e7b2      	b.n	800ddc4 <_dtoa_r+0x1b4>
 800de5e:	9b05      	ldr	r3, [sp, #20]
 800de60:	eba3 030b 	sub.w	r3, r3, fp
 800de64:	9305      	str	r3, [sp, #20]
 800de66:	f1cb 0300 	rsb	r3, fp, #0
 800de6a:	9308      	str	r3, [sp, #32]
 800de6c:	2300      	movs	r3, #0
 800de6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de70:	e7bf      	b.n	800ddf2 <_dtoa_r+0x1e2>
 800de72:	2300      	movs	r3, #0
 800de74:	9309      	str	r3, [sp, #36]	; 0x24
 800de76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de78:	2b00      	cmp	r3, #0
 800de7a:	dc52      	bgt.n	800df22 <_dtoa_r+0x312>
 800de7c:	2301      	movs	r3, #1
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	9304      	str	r3, [sp, #16]
 800de82:	461a      	mov	r2, r3
 800de84:	920a      	str	r2, [sp, #40]	; 0x28
 800de86:	e00b      	b.n	800dea0 <_dtoa_r+0x290>
 800de88:	2301      	movs	r3, #1
 800de8a:	e7f3      	b.n	800de74 <_dtoa_r+0x264>
 800de8c:	2300      	movs	r3, #0
 800de8e:	9309      	str	r3, [sp, #36]	; 0x24
 800de90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de92:	445b      	add	r3, fp
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	3301      	adds	r3, #1
 800de98:	2b01      	cmp	r3, #1
 800de9a:	9304      	str	r3, [sp, #16]
 800de9c:	bfb8      	it	lt
 800de9e:	2301      	movlt	r3, #1
 800dea0:	69e0      	ldr	r0, [r4, #28]
 800dea2:	2100      	movs	r1, #0
 800dea4:	2204      	movs	r2, #4
 800dea6:	f102 0614 	add.w	r6, r2, #20
 800deaa:	429e      	cmp	r6, r3
 800deac:	d93d      	bls.n	800df2a <_dtoa_r+0x31a>
 800deae:	6041      	str	r1, [r0, #4]
 800deb0:	4620      	mov	r0, r4
 800deb2:	f001 fb8f 	bl	800f5d4 <_Balloc>
 800deb6:	9000      	str	r0, [sp, #0]
 800deb8:	2800      	cmp	r0, #0
 800deba:	d139      	bne.n	800df30 <_dtoa_r+0x320>
 800debc:	4b16      	ldr	r3, [pc, #88]	; (800df18 <_dtoa_r+0x308>)
 800debe:	4602      	mov	r2, r0
 800dec0:	f240 11af 	movw	r1, #431	; 0x1af
 800dec4:	e6bd      	b.n	800dc42 <_dtoa_r+0x32>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e7e1      	b.n	800de8e <_dtoa_r+0x27e>
 800deca:	2501      	movs	r5, #1
 800decc:	2300      	movs	r3, #0
 800dece:	9307      	str	r3, [sp, #28]
 800ded0:	9509      	str	r5, [sp, #36]	; 0x24
 800ded2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	9304      	str	r3, [sp, #16]
 800deda:	2200      	movs	r2, #0
 800dedc:	2312      	movs	r3, #18
 800dede:	e7d1      	b.n	800de84 <_dtoa_r+0x274>
 800dee0:	636f4361 	.word	0x636f4361
 800dee4:	3fd287a7 	.word	0x3fd287a7
 800dee8:	8b60c8b3 	.word	0x8b60c8b3
 800deec:	3fc68a28 	.word	0x3fc68a28
 800def0:	509f79fb 	.word	0x509f79fb
 800def4:	3fd34413 	.word	0x3fd34413
 800def8:	08015448 	.word	0x08015448
 800defc:	0801545f 	.word	0x0801545f
 800df00:	7ff00000 	.word	0x7ff00000
 800df04:	08015444 	.word	0x08015444
 800df08:	0801543b 	.word	0x0801543b
 800df0c:	080154f0 	.word	0x080154f0
 800df10:	3ff80000 	.word	0x3ff80000
 800df14:	08015578 	.word	0x08015578
 800df18:	080154b7 	.word	0x080154b7
 800df1c:	2301      	movs	r3, #1
 800df1e:	9309      	str	r3, [sp, #36]	; 0x24
 800df20:	e7d7      	b.n	800ded2 <_dtoa_r+0x2c2>
 800df22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	9304      	str	r3, [sp, #16]
 800df28:	e7ba      	b.n	800dea0 <_dtoa_r+0x290>
 800df2a:	3101      	adds	r1, #1
 800df2c:	0052      	lsls	r2, r2, #1
 800df2e:	e7ba      	b.n	800dea6 <_dtoa_r+0x296>
 800df30:	69e3      	ldr	r3, [r4, #28]
 800df32:	9a00      	ldr	r2, [sp, #0]
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	9b04      	ldr	r3, [sp, #16]
 800df38:	2b0e      	cmp	r3, #14
 800df3a:	f200 80a8 	bhi.w	800e08e <_dtoa_r+0x47e>
 800df3e:	2d00      	cmp	r5, #0
 800df40:	f000 80a5 	beq.w	800e08e <_dtoa_r+0x47e>
 800df44:	f1bb 0f00 	cmp.w	fp, #0
 800df48:	dd38      	ble.n	800dfbc <_dtoa_r+0x3ac>
 800df4a:	4bc0      	ldr	r3, [pc, #768]	; (800e24c <_dtoa_r+0x63c>)
 800df4c:	f00b 020f 	and.w	r2, fp, #15
 800df50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800df58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800df60:	d019      	beq.n	800df96 <_dtoa_r+0x386>
 800df62:	4bbb      	ldr	r3, [pc, #748]	; (800e250 <_dtoa_r+0x640>)
 800df64:	ec51 0b18 	vmov	r0, r1, d8
 800df68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df6c:	f7f2 fc8e 	bl	800088c <__aeabi_ddiv>
 800df70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df74:	f008 080f 	and.w	r8, r8, #15
 800df78:	2503      	movs	r5, #3
 800df7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e250 <_dtoa_r+0x640>
 800df7e:	f1b8 0f00 	cmp.w	r8, #0
 800df82:	d10a      	bne.n	800df9a <_dtoa_r+0x38a>
 800df84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df88:	4632      	mov	r2, r6
 800df8a:	463b      	mov	r3, r7
 800df8c:	f7f2 fc7e 	bl	800088c <__aeabi_ddiv>
 800df90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df94:	e02b      	b.n	800dfee <_dtoa_r+0x3de>
 800df96:	2502      	movs	r5, #2
 800df98:	e7ef      	b.n	800df7a <_dtoa_r+0x36a>
 800df9a:	f018 0f01 	tst.w	r8, #1
 800df9e:	d008      	beq.n	800dfb2 <_dtoa_r+0x3a2>
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dfa8:	f7f2 fb46 	bl	8000638 <__aeabi_dmul>
 800dfac:	3501      	adds	r5, #1
 800dfae:	4606      	mov	r6, r0
 800dfb0:	460f      	mov	r7, r1
 800dfb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dfb6:	f109 0908 	add.w	r9, r9, #8
 800dfba:	e7e0      	b.n	800df7e <_dtoa_r+0x36e>
 800dfbc:	f000 809f 	beq.w	800e0fe <_dtoa_r+0x4ee>
 800dfc0:	f1cb 0600 	rsb	r6, fp, #0
 800dfc4:	4ba1      	ldr	r3, [pc, #644]	; (800e24c <_dtoa_r+0x63c>)
 800dfc6:	4fa2      	ldr	r7, [pc, #648]	; (800e250 <_dtoa_r+0x640>)
 800dfc8:	f006 020f 	and.w	r2, r6, #15
 800dfcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd4:	ec51 0b18 	vmov	r0, r1, d8
 800dfd8:	f7f2 fb2e 	bl	8000638 <__aeabi_dmul>
 800dfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfe0:	1136      	asrs	r6, r6, #4
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2502      	movs	r5, #2
 800dfe6:	2e00      	cmp	r6, #0
 800dfe8:	d17e      	bne.n	800e0e8 <_dtoa_r+0x4d8>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1d0      	bne.n	800df90 <_dtoa_r+0x380>
 800dfee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dff0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 8084 	beq.w	800e102 <_dtoa_r+0x4f2>
 800dffa:	4b96      	ldr	r3, [pc, #600]	; (800e254 <_dtoa_r+0x644>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	4640      	mov	r0, r8
 800e000:	4649      	mov	r1, r9
 800e002:	f7f2 fd8b 	bl	8000b1c <__aeabi_dcmplt>
 800e006:	2800      	cmp	r0, #0
 800e008:	d07b      	beq.n	800e102 <_dtoa_r+0x4f2>
 800e00a:	9b04      	ldr	r3, [sp, #16]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d078      	beq.n	800e102 <_dtoa_r+0x4f2>
 800e010:	9b01      	ldr	r3, [sp, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	dd39      	ble.n	800e08a <_dtoa_r+0x47a>
 800e016:	4b90      	ldr	r3, [pc, #576]	; (800e258 <_dtoa_r+0x648>)
 800e018:	2200      	movs	r2, #0
 800e01a:	4640      	mov	r0, r8
 800e01c:	4649      	mov	r1, r9
 800e01e:	f7f2 fb0b 	bl	8000638 <__aeabi_dmul>
 800e022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e026:	9e01      	ldr	r6, [sp, #4]
 800e028:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e02c:	3501      	adds	r5, #1
 800e02e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e032:	4628      	mov	r0, r5
 800e034:	f7f2 fa96 	bl	8000564 <__aeabi_i2d>
 800e038:	4642      	mov	r2, r8
 800e03a:	464b      	mov	r3, r9
 800e03c:	f7f2 fafc 	bl	8000638 <__aeabi_dmul>
 800e040:	4b86      	ldr	r3, [pc, #536]	; (800e25c <_dtoa_r+0x64c>)
 800e042:	2200      	movs	r2, #0
 800e044:	f7f2 f942 	bl	80002cc <__adddf3>
 800e048:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e050:	9303      	str	r3, [sp, #12]
 800e052:	2e00      	cmp	r6, #0
 800e054:	d158      	bne.n	800e108 <_dtoa_r+0x4f8>
 800e056:	4b82      	ldr	r3, [pc, #520]	; (800e260 <_dtoa_r+0x650>)
 800e058:	2200      	movs	r2, #0
 800e05a:	4640      	mov	r0, r8
 800e05c:	4649      	mov	r1, r9
 800e05e:	f7f2 f933 	bl	80002c8 <__aeabi_dsub>
 800e062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e066:	4680      	mov	r8, r0
 800e068:	4689      	mov	r9, r1
 800e06a:	f7f2 fd75 	bl	8000b58 <__aeabi_dcmpgt>
 800e06e:	2800      	cmp	r0, #0
 800e070:	f040 8296 	bne.w	800e5a0 <_dtoa_r+0x990>
 800e074:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e078:	4640      	mov	r0, r8
 800e07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e07e:	4649      	mov	r1, r9
 800e080:	f7f2 fd4c 	bl	8000b1c <__aeabi_dcmplt>
 800e084:	2800      	cmp	r0, #0
 800e086:	f040 8289 	bne.w	800e59c <_dtoa_r+0x98c>
 800e08a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e08e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e090:	2b00      	cmp	r3, #0
 800e092:	f2c0 814e 	blt.w	800e332 <_dtoa_r+0x722>
 800e096:	f1bb 0f0e 	cmp.w	fp, #14
 800e09a:	f300 814a 	bgt.w	800e332 <_dtoa_r+0x722>
 800e09e:	4b6b      	ldr	r3, [pc, #428]	; (800e24c <_dtoa_r+0x63c>)
 800e0a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f280 80dc 	bge.w	800e268 <_dtoa_r+0x658>
 800e0b0:	9b04      	ldr	r3, [sp, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f300 80d8 	bgt.w	800e268 <_dtoa_r+0x658>
 800e0b8:	f040 826f 	bne.w	800e59a <_dtoa_r+0x98a>
 800e0bc:	4b68      	ldr	r3, [pc, #416]	; (800e260 <_dtoa_r+0x650>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	f7f2 fab8 	bl	8000638 <__aeabi_dmul>
 800e0c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0cc:	f7f2 fd3a 	bl	8000b44 <__aeabi_dcmpge>
 800e0d0:	9e04      	ldr	r6, [sp, #16]
 800e0d2:	4637      	mov	r7, r6
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	f040 8245 	bne.w	800e564 <_dtoa_r+0x954>
 800e0da:	9d00      	ldr	r5, [sp, #0]
 800e0dc:	2331      	movs	r3, #49	; 0x31
 800e0de:	f805 3b01 	strb.w	r3, [r5], #1
 800e0e2:	f10b 0b01 	add.w	fp, fp, #1
 800e0e6:	e241      	b.n	800e56c <_dtoa_r+0x95c>
 800e0e8:	07f2      	lsls	r2, r6, #31
 800e0ea:	d505      	bpl.n	800e0f8 <_dtoa_r+0x4e8>
 800e0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0f0:	f7f2 faa2 	bl	8000638 <__aeabi_dmul>
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	1076      	asrs	r6, r6, #1
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	e773      	b.n	800dfe6 <_dtoa_r+0x3d6>
 800e0fe:	2502      	movs	r5, #2
 800e100:	e775      	b.n	800dfee <_dtoa_r+0x3de>
 800e102:	9e04      	ldr	r6, [sp, #16]
 800e104:	465f      	mov	r7, fp
 800e106:	e792      	b.n	800e02e <_dtoa_r+0x41e>
 800e108:	9900      	ldr	r1, [sp, #0]
 800e10a:	4b50      	ldr	r3, [pc, #320]	; (800e24c <_dtoa_r+0x63c>)
 800e10c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e110:	4431      	add	r1, r6
 800e112:	9102      	str	r1, [sp, #8]
 800e114:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e116:	eeb0 9a47 	vmov.f32	s18, s14
 800e11a:	eef0 9a67 	vmov.f32	s19, s15
 800e11e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e126:	2900      	cmp	r1, #0
 800e128:	d044      	beq.n	800e1b4 <_dtoa_r+0x5a4>
 800e12a:	494e      	ldr	r1, [pc, #312]	; (800e264 <_dtoa_r+0x654>)
 800e12c:	2000      	movs	r0, #0
 800e12e:	f7f2 fbad 	bl	800088c <__aeabi_ddiv>
 800e132:	ec53 2b19 	vmov	r2, r3, d9
 800e136:	f7f2 f8c7 	bl	80002c8 <__aeabi_dsub>
 800e13a:	9d00      	ldr	r5, [sp, #0]
 800e13c:	ec41 0b19 	vmov	d9, r0, r1
 800e140:	4649      	mov	r1, r9
 800e142:	4640      	mov	r0, r8
 800e144:	f7f2 fd28 	bl	8000b98 <__aeabi_d2iz>
 800e148:	4606      	mov	r6, r0
 800e14a:	f7f2 fa0b 	bl	8000564 <__aeabi_i2d>
 800e14e:	4602      	mov	r2, r0
 800e150:	460b      	mov	r3, r1
 800e152:	4640      	mov	r0, r8
 800e154:	4649      	mov	r1, r9
 800e156:	f7f2 f8b7 	bl	80002c8 <__aeabi_dsub>
 800e15a:	3630      	adds	r6, #48	; 0x30
 800e15c:	f805 6b01 	strb.w	r6, [r5], #1
 800e160:	ec53 2b19 	vmov	r2, r3, d9
 800e164:	4680      	mov	r8, r0
 800e166:	4689      	mov	r9, r1
 800e168:	f7f2 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d164      	bne.n	800e23a <_dtoa_r+0x62a>
 800e170:	4642      	mov	r2, r8
 800e172:	464b      	mov	r3, r9
 800e174:	4937      	ldr	r1, [pc, #220]	; (800e254 <_dtoa_r+0x644>)
 800e176:	2000      	movs	r0, #0
 800e178:	f7f2 f8a6 	bl	80002c8 <__aeabi_dsub>
 800e17c:	ec53 2b19 	vmov	r2, r3, d9
 800e180:	f7f2 fccc 	bl	8000b1c <__aeabi_dcmplt>
 800e184:	2800      	cmp	r0, #0
 800e186:	f040 80b6 	bne.w	800e2f6 <_dtoa_r+0x6e6>
 800e18a:	9b02      	ldr	r3, [sp, #8]
 800e18c:	429d      	cmp	r5, r3
 800e18e:	f43f af7c 	beq.w	800e08a <_dtoa_r+0x47a>
 800e192:	4b31      	ldr	r3, [pc, #196]	; (800e258 <_dtoa_r+0x648>)
 800e194:	ec51 0b19 	vmov	r0, r1, d9
 800e198:	2200      	movs	r2, #0
 800e19a:	f7f2 fa4d 	bl	8000638 <__aeabi_dmul>
 800e19e:	4b2e      	ldr	r3, [pc, #184]	; (800e258 <_dtoa_r+0x648>)
 800e1a0:	ec41 0b19 	vmov	d9, r0, r1
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 fa45 	bl	8000638 <__aeabi_dmul>
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	4689      	mov	r9, r1
 800e1b2:	e7c5      	b.n	800e140 <_dtoa_r+0x530>
 800e1b4:	ec51 0b17 	vmov	r0, r1, d7
 800e1b8:	f7f2 fa3e 	bl	8000638 <__aeabi_dmul>
 800e1bc:	9b02      	ldr	r3, [sp, #8]
 800e1be:	9d00      	ldr	r5, [sp, #0]
 800e1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1c2:	ec41 0b19 	vmov	d9, r0, r1
 800e1c6:	4649      	mov	r1, r9
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	f7f2 fce5 	bl	8000b98 <__aeabi_d2iz>
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	f7f2 f9c8 	bl	8000564 <__aeabi_i2d>
 800e1d4:	3630      	adds	r6, #48	; 0x30
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	4640      	mov	r0, r8
 800e1dc:	4649      	mov	r1, r9
 800e1de:	f7f2 f873 	bl	80002c8 <__aeabi_dsub>
 800e1e2:	f805 6b01 	strb.w	r6, [r5], #1
 800e1e6:	9b02      	ldr	r3, [sp, #8]
 800e1e8:	429d      	cmp	r5, r3
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	4689      	mov	r9, r1
 800e1ee:	f04f 0200 	mov.w	r2, #0
 800e1f2:	d124      	bne.n	800e23e <_dtoa_r+0x62e>
 800e1f4:	4b1b      	ldr	r3, [pc, #108]	; (800e264 <_dtoa_r+0x654>)
 800e1f6:	ec51 0b19 	vmov	r0, r1, d9
 800e1fa:	f7f2 f867 	bl	80002cc <__adddf3>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4640      	mov	r0, r8
 800e204:	4649      	mov	r1, r9
 800e206:	f7f2 fca7 	bl	8000b58 <__aeabi_dcmpgt>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d173      	bne.n	800e2f6 <_dtoa_r+0x6e6>
 800e20e:	ec53 2b19 	vmov	r2, r3, d9
 800e212:	4914      	ldr	r1, [pc, #80]	; (800e264 <_dtoa_r+0x654>)
 800e214:	2000      	movs	r0, #0
 800e216:	f7f2 f857 	bl	80002c8 <__aeabi_dsub>
 800e21a:	4602      	mov	r2, r0
 800e21c:	460b      	mov	r3, r1
 800e21e:	4640      	mov	r0, r8
 800e220:	4649      	mov	r1, r9
 800e222:	f7f2 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 800e226:	2800      	cmp	r0, #0
 800e228:	f43f af2f 	beq.w	800e08a <_dtoa_r+0x47a>
 800e22c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e22e:	1e6b      	subs	r3, r5, #1
 800e230:	930f      	str	r3, [sp, #60]	; 0x3c
 800e232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e236:	2b30      	cmp	r3, #48	; 0x30
 800e238:	d0f8      	beq.n	800e22c <_dtoa_r+0x61c>
 800e23a:	46bb      	mov	fp, r7
 800e23c:	e04a      	b.n	800e2d4 <_dtoa_r+0x6c4>
 800e23e:	4b06      	ldr	r3, [pc, #24]	; (800e258 <_dtoa_r+0x648>)
 800e240:	f7f2 f9fa 	bl	8000638 <__aeabi_dmul>
 800e244:	4680      	mov	r8, r0
 800e246:	4689      	mov	r9, r1
 800e248:	e7bd      	b.n	800e1c6 <_dtoa_r+0x5b6>
 800e24a:	bf00      	nop
 800e24c:	08015578 	.word	0x08015578
 800e250:	08015550 	.word	0x08015550
 800e254:	3ff00000 	.word	0x3ff00000
 800e258:	40240000 	.word	0x40240000
 800e25c:	401c0000 	.word	0x401c0000
 800e260:	40140000 	.word	0x40140000
 800e264:	3fe00000 	.word	0x3fe00000
 800e268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e26c:	9d00      	ldr	r5, [sp, #0]
 800e26e:	4642      	mov	r2, r8
 800e270:	464b      	mov	r3, r9
 800e272:	4630      	mov	r0, r6
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 fb09 	bl	800088c <__aeabi_ddiv>
 800e27a:	f7f2 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800e27e:	9001      	str	r0, [sp, #4]
 800e280:	f7f2 f970 	bl	8000564 <__aeabi_i2d>
 800e284:	4642      	mov	r2, r8
 800e286:	464b      	mov	r3, r9
 800e288:	f7f2 f9d6 	bl	8000638 <__aeabi_dmul>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f2 f818 	bl	80002c8 <__aeabi_dsub>
 800e298:	9e01      	ldr	r6, [sp, #4]
 800e29a:	9f04      	ldr	r7, [sp, #16]
 800e29c:	3630      	adds	r6, #48	; 0x30
 800e29e:	f805 6b01 	strb.w	r6, [r5], #1
 800e2a2:	9e00      	ldr	r6, [sp, #0]
 800e2a4:	1bae      	subs	r6, r5, r6
 800e2a6:	42b7      	cmp	r7, r6
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	d134      	bne.n	800e318 <_dtoa_r+0x708>
 800e2ae:	f7f2 f80d 	bl	80002cc <__adddf3>
 800e2b2:	4642      	mov	r2, r8
 800e2b4:	464b      	mov	r3, r9
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	460f      	mov	r7, r1
 800e2ba:	f7f2 fc4d 	bl	8000b58 <__aeabi_dcmpgt>
 800e2be:	b9c8      	cbnz	r0, 800e2f4 <_dtoa_r+0x6e4>
 800e2c0:	4642      	mov	r2, r8
 800e2c2:	464b      	mov	r3, r9
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 fc1e 	bl	8000b08 <__aeabi_dcmpeq>
 800e2cc:	b110      	cbz	r0, 800e2d4 <_dtoa_r+0x6c4>
 800e2ce:	9b01      	ldr	r3, [sp, #4]
 800e2d0:	07db      	lsls	r3, r3, #31
 800e2d2:	d40f      	bmi.n	800e2f4 <_dtoa_r+0x6e4>
 800e2d4:	4651      	mov	r1, sl
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f001 f9bc 	bl	800f654 <_Bfree>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2e0:	702b      	strb	r3, [r5, #0]
 800e2e2:	f10b 0301 	add.w	r3, fp, #1
 800e2e6:	6013      	str	r3, [r2, #0]
 800e2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f43f ace2 	beq.w	800dcb4 <_dtoa_r+0xa4>
 800e2f0:	601d      	str	r5, [r3, #0]
 800e2f2:	e4df      	b.n	800dcb4 <_dtoa_r+0xa4>
 800e2f4:	465f      	mov	r7, fp
 800e2f6:	462b      	mov	r3, r5
 800e2f8:	461d      	mov	r5, r3
 800e2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2fe:	2a39      	cmp	r2, #57	; 0x39
 800e300:	d106      	bne.n	800e310 <_dtoa_r+0x700>
 800e302:	9a00      	ldr	r2, [sp, #0]
 800e304:	429a      	cmp	r2, r3
 800e306:	d1f7      	bne.n	800e2f8 <_dtoa_r+0x6e8>
 800e308:	9900      	ldr	r1, [sp, #0]
 800e30a:	2230      	movs	r2, #48	; 0x30
 800e30c:	3701      	adds	r7, #1
 800e30e:	700a      	strb	r2, [r1, #0]
 800e310:	781a      	ldrb	r2, [r3, #0]
 800e312:	3201      	adds	r2, #1
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	e790      	b.n	800e23a <_dtoa_r+0x62a>
 800e318:	4ba3      	ldr	r3, [pc, #652]	; (800e5a8 <_dtoa_r+0x998>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	f7f2 f98c 	bl	8000638 <__aeabi_dmul>
 800e320:	2200      	movs	r2, #0
 800e322:	2300      	movs	r3, #0
 800e324:	4606      	mov	r6, r0
 800e326:	460f      	mov	r7, r1
 800e328:	f7f2 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d09e      	beq.n	800e26e <_dtoa_r+0x65e>
 800e330:	e7d0      	b.n	800e2d4 <_dtoa_r+0x6c4>
 800e332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e334:	2a00      	cmp	r2, #0
 800e336:	f000 80ca 	beq.w	800e4ce <_dtoa_r+0x8be>
 800e33a:	9a07      	ldr	r2, [sp, #28]
 800e33c:	2a01      	cmp	r2, #1
 800e33e:	f300 80ad 	bgt.w	800e49c <_dtoa_r+0x88c>
 800e342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e344:	2a00      	cmp	r2, #0
 800e346:	f000 80a5 	beq.w	800e494 <_dtoa_r+0x884>
 800e34a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e34e:	9e08      	ldr	r6, [sp, #32]
 800e350:	9d05      	ldr	r5, [sp, #20]
 800e352:	9a05      	ldr	r2, [sp, #20]
 800e354:	441a      	add	r2, r3
 800e356:	9205      	str	r2, [sp, #20]
 800e358:	9a06      	ldr	r2, [sp, #24]
 800e35a:	2101      	movs	r1, #1
 800e35c:	441a      	add	r2, r3
 800e35e:	4620      	mov	r0, r4
 800e360:	9206      	str	r2, [sp, #24]
 800e362:	f001 fa2d 	bl	800f7c0 <__i2b>
 800e366:	4607      	mov	r7, r0
 800e368:	b165      	cbz	r5, 800e384 <_dtoa_r+0x774>
 800e36a:	9b06      	ldr	r3, [sp, #24]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	dd09      	ble.n	800e384 <_dtoa_r+0x774>
 800e370:	42ab      	cmp	r3, r5
 800e372:	9a05      	ldr	r2, [sp, #20]
 800e374:	bfa8      	it	ge
 800e376:	462b      	movge	r3, r5
 800e378:	1ad2      	subs	r2, r2, r3
 800e37a:	9205      	str	r2, [sp, #20]
 800e37c:	9a06      	ldr	r2, [sp, #24]
 800e37e:	1aed      	subs	r5, r5, r3
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	9306      	str	r3, [sp, #24]
 800e384:	9b08      	ldr	r3, [sp, #32]
 800e386:	b1f3      	cbz	r3, 800e3c6 <_dtoa_r+0x7b6>
 800e388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	f000 80a3 	beq.w	800e4d6 <_dtoa_r+0x8c6>
 800e390:	2e00      	cmp	r6, #0
 800e392:	dd10      	ble.n	800e3b6 <_dtoa_r+0x7a6>
 800e394:	4639      	mov	r1, r7
 800e396:	4632      	mov	r2, r6
 800e398:	4620      	mov	r0, r4
 800e39a:	f001 fad1 	bl	800f940 <__pow5mult>
 800e39e:	4652      	mov	r2, sl
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	4607      	mov	r7, r0
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f001 fa21 	bl	800f7ec <__multiply>
 800e3aa:	4651      	mov	r1, sl
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 f950 	bl	800f654 <_Bfree>
 800e3b4:	46c2      	mov	sl, r8
 800e3b6:	9b08      	ldr	r3, [sp, #32]
 800e3b8:	1b9a      	subs	r2, r3, r6
 800e3ba:	d004      	beq.n	800e3c6 <_dtoa_r+0x7b6>
 800e3bc:	4651      	mov	r1, sl
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f001 fabe 	bl	800f940 <__pow5mult>
 800e3c4:	4682      	mov	sl, r0
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f001 f9f9 	bl	800f7c0 <__i2b>
 800e3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	f340 8081 	ble.w	800e4da <_dtoa_r+0x8ca>
 800e3d8:	461a      	mov	r2, r3
 800e3da:	4601      	mov	r1, r0
 800e3dc:	4620      	mov	r0, r4
 800e3de:	f001 faaf 	bl	800f940 <__pow5mult>
 800e3e2:	9b07      	ldr	r3, [sp, #28]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	dd7a      	ble.n	800e4e0 <_dtoa_r+0x8d0>
 800e3ea:	f04f 0800 	mov.w	r8, #0
 800e3ee:	6933      	ldr	r3, [r6, #16]
 800e3f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e3f4:	6918      	ldr	r0, [r3, #16]
 800e3f6:	f001 f995 	bl	800f724 <__hi0bits>
 800e3fa:	f1c0 0020 	rsb	r0, r0, #32
 800e3fe:	9b06      	ldr	r3, [sp, #24]
 800e400:	4418      	add	r0, r3
 800e402:	f010 001f 	ands.w	r0, r0, #31
 800e406:	f000 8094 	beq.w	800e532 <_dtoa_r+0x922>
 800e40a:	f1c0 0320 	rsb	r3, r0, #32
 800e40e:	2b04      	cmp	r3, #4
 800e410:	f340 8085 	ble.w	800e51e <_dtoa_r+0x90e>
 800e414:	9b05      	ldr	r3, [sp, #20]
 800e416:	f1c0 001c 	rsb	r0, r0, #28
 800e41a:	4403      	add	r3, r0
 800e41c:	9305      	str	r3, [sp, #20]
 800e41e:	9b06      	ldr	r3, [sp, #24]
 800e420:	4403      	add	r3, r0
 800e422:	4405      	add	r5, r0
 800e424:	9306      	str	r3, [sp, #24]
 800e426:	9b05      	ldr	r3, [sp, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dd05      	ble.n	800e438 <_dtoa_r+0x828>
 800e42c:	4651      	mov	r1, sl
 800e42e:	461a      	mov	r2, r3
 800e430:	4620      	mov	r0, r4
 800e432:	f001 fadf 	bl	800f9f4 <__lshift>
 800e436:	4682      	mov	sl, r0
 800e438:	9b06      	ldr	r3, [sp, #24]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dd05      	ble.n	800e44a <_dtoa_r+0x83a>
 800e43e:	4631      	mov	r1, r6
 800e440:	461a      	mov	r2, r3
 800e442:	4620      	mov	r0, r4
 800e444:	f001 fad6 	bl	800f9f4 <__lshift>
 800e448:	4606      	mov	r6, r0
 800e44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d072      	beq.n	800e536 <_dtoa_r+0x926>
 800e450:	4631      	mov	r1, r6
 800e452:	4650      	mov	r0, sl
 800e454:	f001 fb3a 	bl	800facc <__mcmp>
 800e458:	2800      	cmp	r0, #0
 800e45a:	da6c      	bge.n	800e536 <_dtoa_r+0x926>
 800e45c:	2300      	movs	r3, #0
 800e45e:	4651      	mov	r1, sl
 800e460:	220a      	movs	r2, #10
 800e462:	4620      	mov	r0, r4
 800e464:	f001 f918 	bl	800f698 <__multadd>
 800e468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e46a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e46e:	4682      	mov	sl, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 81b0 	beq.w	800e7d6 <_dtoa_r+0xbc6>
 800e476:	2300      	movs	r3, #0
 800e478:	4639      	mov	r1, r7
 800e47a:	220a      	movs	r2, #10
 800e47c:	4620      	mov	r0, r4
 800e47e:	f001 f90b 	bl	800f698 <__multadd>
 800e482:	9b01      	ldr	r3, [sp, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	4607      	mov	r7, r0
 800e488:	f300 8096 	bgt.w	800e5b8 <_dtoa_r+0x9a8>
 800e48c:	9b07      	ldr	r3, [sp, #28]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	dc59      	bgt.n	800e546 <_dtoa_r+0x936>
 800e492:	e091      	b.n	800e5b8 <_dtoa_r+0x9a8>
 800e494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e49a:	e758      	b.n	800e34e <_dtoa_r+0x73e>
 800e49c:	9b04      	ldr	r3, [sp, #16]
 800e49e:	1e5e      	subs	r6, r3, #1
 800e4a0:	9b08      	ldr	r3, [sp, #32]
 800e4a2:	42b3      	cmp	r3, r6
 800e4a4:	bfbf      	itttt	lt
 800e4a6:	9b08      	ldrlt	r3, [sp, #32]
 800e4a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e4aa:	9608      	strlt	r6, [sp, #32]
 800e4ac:	1af3      	sublt	r3, r6, r3
 800e4ae:	bfb4      	ite	lt
 800e4b0:	18d2      	addlt	r2, r2, r3
 800e4b2:	1b9e      	subge	r6, r3, r6
 800e4b4:	9b04      	ldr	r3, [sp, #16]
 800e4b6:	bfbc      	itt	lt
 800e4b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e4ba:	2600      	movlt	r6, #0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	bfb7      	itett	lt
 800e4c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e4c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e4c8:	1a9d      	sublt	r5, r3, r2
 800e4ca:	2300      	movlt	r3, #0
 800e4cc:	e741      	b.n	800e352 <_dtoa_r+0x742>
 800e4ce:	9e08      	ldr	r6, [sp, #32]
 800e4d0:	9d05      	ldr	r5, [sp, #20]
 800e4d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e4d4:	e748      	b.n	800e368 <_dtoa_r+0x758>
 800e4d6:	9a08      	ldr	r2, [sp, #32]
 800e4d8:	e770      	b.n	800e3bc <_dtoa_r+0x7ac>
 800e4da:	9b07      	ldr	r3, [sp, #28]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	dc19      	bgt.n	800e514 <_dtoa_r+0x904>
 800e4e0:	9b02      	ldr	r3, [sp, #8]
 800e4e2:	b9bb      	cbnz	r3, 800e514 <_dtoa_r+0x904>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4ea:	b99b      	cbnz	r3, 800e514 <_dtoa_r+0x904>
 800e4ec:	9b03      	ldr	r3, [sp, #12]
 800e4ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4f2:	0d1b      	lsrs	r3, r3, #20
 800e4f4:	051b      	lsls	r3, r3, #20
 800e4f6:	b183      	cbz	r3, 800e51a <_dtoa_r+0x90a>
 800e4f8:	9b05      	ldr	r3, [sp, #20]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	9305      	str	r3, [sp, #20]
 800e4fe:	9b06      	ldr	r3, [sp, #24]
 800e500:	3301      	adds	r3, #1
 800e502:	9306      	str	r3, [sp, #24]
 800e504:	f04f 0801 	mov.w	r8, #1
 800e508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f47f af6f 	bne.w	800e3ee <_dtoa_r+0x7de>
 800e510:	2001      	movs	r0, #1
 800e512:	e774      	b.n	800e3fe <_dtoa_r+0x7ee>
 800e514:	f04f 0800 	mov.w	r8, #0
 800e518:	e7f6      	b.n	800e508 <_dtoa_r+0x8f8>
 800e51a:	4698      	mov	r8, r3
 800e51c:	e7f4      	b.n	800e508 <_dtoa_r+0x8f8>
 800e51e:	d082      	beq.n	800e426 <_dtoa_r+0x816>
 800e520:	9a05      	ldr	r2, [sp, #20]
 800e522:	331c      	adds	r3, #28
 800e524:	441a      	add	r2, r3
 800e526:	9205      	str	r2, [sp, #20]
 800e528:	9a06      	ldr	r2, [sp, #24]
 800e52a:	441a      	add	r2, r3
 800e52c:	441d      	add	r5, r3
 800e52e:	9206      	str	r2, [sp, #24]
 800e530:	e779      	b.n	800e426 <_dtoa_r+0x816>
 800e532:	4603      	mov	r3, r0
 800e534:	e7f4      	b.n	800e520 <_dtoa_r+0x910>
 800e536:	9b04      	ldr	r3, [sp, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	dc37      	bgt.n	800e5ac <_dtoa_r+0x99c>
 800e53c:	9b07      	ldr	r3, [sp, #28]
 800e53e:	2b02      	cmp	r3, #2
 800e540:	dd34      	ble.n	800e5ac <_dtoa_r+0x99c>
 800e542:	9b04      	ldr	r3, [sp, #16]
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	9b01      	ldr	r3, [sp, #4]
 800e548:	b963      	cbnz	r3, 800e564 <_dtoa_r+0x954>
 800e54a:	4631      	mov	r1, r6
 800e54c:	2205      	movs	r2, #5
 800e54e:	4620      	mov	r0, r4
 800e550:	f001 f8a2 	bl	800f698 <__multadd>
 800e554:	4601      	mov	r1, r0
 800e556:	4606      	mov	r6, r0
 800e558:	4650      	mov	r0, sl
 800e55a:	f001 fab7 	bl	800facc <__mcmp>
 800e55e:	2800      	cmp	r0, #0
 800e560:	f73f adbb 	bgt.w	800e0da <_dtoa_r+0x4ca>
 800e564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e566:	9d00      	ldr	r5, [sp, #0]
 800e568:	ea6f 0b03 	mvn.w	fp, r3
 800e56c:	f04f 0800 	mov.w	r8, #0
 800e570:	4631      	mov	r1, r6
 800e572:	4620      	mov	r0, r4
 800e574:	f001 f86e 	bl	800f654 <_Bfree>
 800e578:	2f00      	cmp	r7, #0
 800e57a:	f43f aeab 	beq.w	800e2d4 <_dtoa_r+0x6c4>
 800e57e:	f1b8 0f00 	cmp.w	r8, #0
 800e582:	d005      	beq.n	800e590 <_dtoa_r+0x980>
 800e584:	45b8      	cmp	r8, r7
 800e586:	d003      	beq.n	800e590 <_dtoa_r+0x980>
 800e588:	4641      	mov	r1, r8
 800e58a:	4620      	mov	r0, r4
 800e58c:	f001 f862 	bl	800f654 <_Bfree>
 800e590:	4639      	mov	r1, r7
 800e592:	4620      	mov	r0, r4
 800e594:	f001 f85e 	bl	800f654 <_Bfree>
 800e598:	e69c      	b.n	800e2d4 <_dtoa_r+0x6c4>
 800e59a:	2600      	movs	r6, #0
 800e59c:	4637      	mov	r7, r6
 800e59e:	e7e1      	b.n	800e564 <_dtoa_r+0x954>
 800e5a0:	46bb      	mov	fp, r7
 800e5a2:	4637      	mov	r7, r6
 800e5a4:	e599      	b.n	800e0da <_dtoa_r+0x4ca>
 800e5a6:	bf00      	nop
 800e5a8:	40240000 	.word	0x40240000
 800e5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f000 80c8 	beq.w	800e744 <_dtoa_r+0xb34>
 800e5b4:	9b04      	ldr	r3, [sp, #16]
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	2d00      	cmp	r5, #0
 800e5ba:	dd05      	ble.n	800e5c8 <_dtoa_r+0x9b8>
 800e5bc:	4639      	mov	r1, r7
 800e5be:	462a      	mov	r2, r5
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f001 fa17 	bl	800f9f4 <__lshift>
 800e5c6:	4607      	mov	r7, r0
 800e5c8:	f1b8 0f00 	cmp.w	r8, #0
 800e5cc:	d05b      	beq.n	800e686 <_dtoa_r+0xa76>
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 ffff 	bl	800f5d4 <_Balloc>
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	b928      	cbnz	r0, 800e5e6 <_dtoa_r+0x9d6>
 800e5da:	4b83      	ldr	r3, [pc, #524]	; (800e7e8 <_dtoa_r+0xbd8>)
 800e5dc:	4602      	mov	r2, r0
 800e5de:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e5e2:	f7ff bb2e 	b.w	800dc42 <_dtoa_r+0x32>
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	3202      	adds	r2, #2
 800e5ea:	0092      	lsls	r2, r2, #2
 800e5ec:	f107 010c 	add.w	r1, r7, #12
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	f7ff fa56 	bl	800daa2 <memcpy>
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f001 f9fa 	bl	800f9f4 <__lshift>
 800e600:	9b00      	ldr	r3, [sp, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	9304      	str	r3, [sp, #16]
 800e606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e60a:	4413      	add	r3, r2
 800e60c:	9308      	str	r3, [sp, #32]
 800e60e:	9b02      	ldr	r3, [sp, #8]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	46b8      	mov	r8, r7
 800e616:	9306      	str	r3, [sp, #24]
 800e618:	4607      	mov	r7, r0
 800e61a:	9b04      	ldr	r3, [sp, #16]
 800e61c:	4631      	mov	r1, r6
 800e61e:	3b01      	subs	r3, #1
 800e620:	4650      	mov	r0, sl
 800e622:	9301      	str	r3, [sp, #4]
 800e624:	f7ff fa6a 	bl	800dafc <quorem>
 800e628:	4641      	mov	r1, r8
 800e62a:	9002      	str	r0, [sp, #8]
 800e62c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e630:	4650      	mov	r0, sl
 800e632:	f001 fa4b 	bl	800facc <__mcmp>
 800e636:	463a      	mov	r2, r7
 800e638:	9005      	str	r0, [sp, #20]
 800e63a:	4631      	mov	r1, r6
 800e63c:	4620      	mov	r0, r4
 800e63e:	f001 fa61 	bl	800fb04 <__mdiff>
 800e642:	68c2      	ldr	r2, [r0, #12]
 800e644:	4605      	mov	r5, r0
 800e646:	bb02      	cbnz	r2, 800e68a <_dtoa_r+0xa7a>
 800e648:	4601      	mov	r1, r0
 800e64a:	4650      	mov	r0, sl
 800e64c:	f001 fa3e 	bl	800facc <__mcmp>
 800e650:	4602      	mov	r2, r0
 800e652:	4629      	mov	r1, r5
 800e654:	4620      	mov	r0, r4
 800e656:	9209      	str	r2, [sp, #36]	; 0x24
 800e658:	f000 fffc 	bl	800f654 <_Bfree>
 800e65c:	9b07      	ldr	r3, [sp, #28]
 800e65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e660:	9d04      	ldr	r5, [sp, #16]
 800e662:	ea43 0102 	orr.w	r1, r3, r2
 800e666:	9b06      	ldr	r3, [sp, #24]
 800e668:	4319      	orrs	r1, r3
 800e66a:	d110      	bne.n	800e68e <_dtoa_r+0xa7e>
 800e66c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e670:	d029      	beq.n	800e6c6 <_dtoa_r+0xab6>
 800e672:	9b05      	ldr	r3, [sp, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	dd02      	ble.n	800e67e <_dtoa_r+0xa6e>
 800e678:	9b02      	ldr	r3, [sp, #8]
 800e67a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e67e:	9b01      	ldr	r3, [sp, #4]
 800e680:	f883 9000 	strb.w	r9, [r3]
 800e684:	e774      	b.n	800e570 <_dtoa_r+0x960>
 800e686:	4638      	mov	r0, r7
 800e688:	e7ba      	b.n	800e600 <_dtoa_r+0x9f0>
 800e68a:	2201      	movs	r2, #1
 800e68c:	e7e1      	b.n	800e652 <_dtoa_r+0xa42>
 800e68e:	9b05      	ldr	r3, [sp, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	db04      	blt.n	800e69e <_dtoa_r+0xa8e>
 800e694:	9907      	ldr	r1, [sp, #28]
 800e696:	430b      	orrs	r3, r1
 800e698:	9906      	ldr	r1, [sp, #24]
 800e69a:	430b      	orrs	r3, r1
 800e69c:	d120      	bne.n	800e6e0 <_dtoa_r+0xad0>
 800e69e:	2a00      	cmp	r2, #0
 800e6a0:	dded      	ble.n	800e67e <_dtoa_r+0xa6e>
 800e6a2:	4651      	mov	r1, sl
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f001 f9a4 	bl	800f9f4 <__lshift>
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4682      	mov	sl, r0
 800e6b0:	f001 fa0c 	bl	800facc <__mcmp>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	dc03      	bgt.n	800e6c0 <_dtoa_r+0xab0>
 800e6b8:	d1e1      	bne.n	800e67e <_dtoa_r+0xa6e>
 800e6ba:	f019 0f01 	tst.w	r9, #1
 800e6be:	d0de      	beq.n	800e67e <_dtoa_r+0xa6e>
 800e6c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6c4:	d1d8      	bne.n	800e678 <_dtoa_r+0xa68>
 800e6c6:	9a01      	ldr	r2, [sp, #4]
 800e6c8:	2339      	movs	r3, #57	; 0x39
 800e6ca:	7013      	strb	r3, [r2, #0]
 800e6cc:	462b      	mov	r3, r5
 800e6ce:	461d      	mov	r5, r3
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6d6:	2a39      	cmp	r2, #57	; 0x39
 800e6d8:	d06c      	beq.n	800e7b4 <_dtoa_r+0xba4>
 800e6da:	3201      	adds	r2, #1
 800e6dc:	701a      	strb	r2, [r3, #0]
 800e6de:	e747      	b.n	800e570 <_dtoa_r+0x960>
 800e6e0:	2a00      	cmp	r2, #0
 800e6e2:	dd07      	ble.n	800e6f4 <_dtoa_r+0xae4>
 800e6e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6e8:	d0ed      	beq.n	800e6c6 <_dtoa_r+0xab6>
 800e6ea:	9a01      	ldr	r2, [sp, #4]
 800e6ec:	f109 0301 	add.w	r3, r9, #1
 800e6f0:	7013      	strb	r3, [r2, #0]
 800e6f2:	e73d      	b.n	800e570 <_dtoa_r+0x960>
 800e6f4:	9b04      	ldr	r3, [sp, #16]
 800e6f6:	9a08      	ldr	r2, [sp, #32]
 800e6f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d043      	beq.n	800e788 <_dtoa_r+0xb78>
 800e700:	4651      	mov	r1, sl
 800e702:	2300      	movs	r3, #0
 800e704:	220a      	movs	r2, #10
 800e706:	4620      	mov	r0, r4
 800e708:	f000 ffc6 	bl	800f698 <__multadd>
 800e70c:	45b8      	cmp	r8, r7
 800e70e:	4682      	mov	sl, r0
 800e710:	f04f 0300 	mov.w	r3, #0
 800e714:	f04f 020a 	mov.w	r2, #10
 800e718:	4641      	mov	r1, r8
 800e71a:	4620      	mov	r0, r4
 800e71c:	d107      	bne.n	800e72e <_dtoa_r+0xb1e>
 800e71e:	f000 ffbb 	bl	800f698 <__multadd>
 800e722:	4680      	mov	r8, r0
 800e724:	4607      	mov	r7, r0
 800e726:	9b04      	ldr	r3, [sp, #16]
 800e728:	3301      	adds	r3, #1
 800e72a:	9304      	str	r3, [sp, #16]
 800e72c:	e775      	b.n	800e61a <_dtoa_r+0xa0a>
 800e72e:	f000 ffb3 	bl	800f698 <__multadd>
 800e732:	4639      	mov	r1, r7
 800e734:	4680      	mov	r8, r0
 800e736:	2300      	movs	r3, #0
 800e738:	220a      	movs	r2, #10
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 ffac 	bl	800f698 <__multadd>
 800e740:	4607      	mov	r7, r0
 800e742:	e7f0      	b.n	800e726 <_dtoa_r+0xb16>
 800e744:	9b04      	ldr	r3, [sp, #16]
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	9d00      	ldr	r5, [sp, #0]
 800e74a:	4631      	mov	r1, r6
 800e74c:	4650      	mov	r0, sl
 800e74e:	f7ff f9d5 	bl	800dafc <quorem>
 800e752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e756:	9b00      	ldr	r3, [sp, #0]
 800e758:	f805 9b01 	strb.w	r9, [r5], #1
 800e75c:	1aea      	subs	r2, r5, r3
 800e75e:	9b01      	ldr	r3, [sp, #4]
 800e760:	4293      	cmp	r3, r2
 800e762:	dd07      	ble.n	800e774 <_dtoa_r+0xb64>
 800e764:	4651      	mov	r1, sl
 800e766:	2300      	movs	r3, #0
 800e768:	220a      	movs	r2, #10
 800e76a:	4620      	mov	r0, r4
 800e76c:	f000 ff94 	bl	800f698 <__multadd>
 800e770:	4682      	mov	sl, r0
 800e772:	e7ea      	b.n	800e74a <_dtoa_r+0xb3a>
 800e774:	9b01      	ldr	r3, [sp, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	bfc8      	it	gt
 800e77a:	461d      	movgt	r5, r3
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	bfd8      	it	le
 800e780:	2501      	movle	r5, #1
 800e782:	441d      	add	r5, r3
 800e784:	f04f 0800 	mov.w	r8, #0
 800e788:	4651      	mov	r1, sl
 800e78a:	2201      	movs	r2, #1
 800e78c:	4620      	mov	r0, r4
 800e78e:	f001 f931 	bl	800f9f4 <__lshift>
 800e792:	4631      	mov	r1, r6
 800e794:	4682      	mov	sl, r0
 800e796:	f001 f999 	bl	800facc <__mcmp>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	dc96      	bgt.n	800e6cc <_dtoa_r+0xabc>
 800e79e:	d102      	bne.n	800e7a6 <_dtoa_r+0xb96>
 800e7a0:	f019 0f01 	tst.w	r9, #1
 800e7a4:	d192      	bne.n	800e6cc <_dtoa_r+0xabc>
 800e7a6:	462b      	mov	r3, r5
 800e7a8:	461d      	mov	r5, r3
 800e7aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7ae:	2a30      	cmp	r2, #48	; 0x30
 800e7b0:	d0fa      	beq.n	800e7a8 <_dtoa_r+0xb98>
 800e7b2:	e6dd      	b.n	800e570 <_dtoa_r+0x960>
 800e7b4:	9a00      	ldr	r2, [sp, #0]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d189      	bne.n	800e6ce <_dtoa_r+0xabe>
 800e7ba:	f10b 0b01 	add.w	fp, fp, #1
 800e7be:	2331      	movs	r3, #49	; 0x31
 800e7c0:	e796      	b.n	800e6f0 <_dtoa_r+0xae0>
 800e7c2:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <_dtoa_r+0xbdc>)
 800e7c4:	f7ff ba99 	b.w	800dcfa <_dtoa_r+0xea>
 800e7c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f47f aa6d 	bne.w	800dcaa <_dtoa_r+0x9a>
 800e7d0:	4b07      	ldr	r3, [pc, #28]	; (800e7f0 <_dtoa_r+0xbe0>)
 800e7d2:	f7ff ba92 	b.w	800dcfa <_dtoa_r+0xea>
 800e7d6:	9b01      	ldr	r3, [sp, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dcb5      	bgt.n	800e748 <_dtoa_r+0xb38>
 800e7dc:	9b07      	ldr	r3, [sp, #28]
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	f73f aeb1 	bgt.w	800e546 <_dtoa_r+0x936>
 800e7e4:	e7b0      	b.n	800e748 <_dtoa_r+0xb38>
 800e7e6:	bf00      	nop
 800e7e8:	080154b7 	.word	0x080154b7
 800e7ec:	080154ef 	.word	0x080154ef
 800e7f0:	0801543b 	.word	0x0801543b

0800e7f4 <_free_r>:
 800e7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7f6:	2900      	cmp	r1, #0
 800e7f8:	d044      	beq.n	800e884 <_free_r+0x90>
 800e7fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7fe:	9001      	str	r0, [sp, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	f1a1 0404 	sub.w	r4, r1, #4
 800e806:	bfb8      	it	lt
 800e808:	18e4      	addlt	r4, r4, r3
 800e80a:	f7fe fe8b 	bl	800d524 <__malloc_lock>
 800e80e:	4a1e      	ldr	r2, [pc, #120]	; (800e888 <_free_r+0x94>)
 800e810:	9801      	ldr	r0, [sp, #4]
 800e812:	6813      	ldr	r3, [r2, #0]
 800e814:	b933      	cbnz	r3, 800e824 <_free_r+0x30>
 800e816:	6063      	str	r3, [r4, #4]
 800e818:	6014      	str	r4, [r2, #0]
 800e81a:	b003      	add	sp, #12
 800e81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e820:	f7fe be86 	b.w	800d530 <__malloc_unlock>
 800e824:	42a3      	cmp	r3, r4
 800e826:	d908      	bls.n	800e83a <_free_r+0x46>
 800e828:	6825      	ldr	r5, [r4, #0]
 800e82a:	1961      	adds	r1, r4, r5
 800e82c:	428b      	cmp	r3, r1
 800e82e:	bf01      	itttt	eq
 800e830:	6819      	ldreq	r1, [r3, #0]
 800e832:	685b      	ldreq	r3, [r3, #4]
 800e834:	1949      	addeq	r1, r1, r5
 800e836:	6021      	streq	r1, [r4, #0]
 800e838:	e7ed      	b.n	800e816 <_free_r+0x22>
 800e83a:	461a      	mov	r2, r3
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	b10b      	cbz	r3, 800e844 <_free_r+0x50>
 800e840:	42a3      	cmp	r3, r4
 800e842:	d9fa      	bls.n	800e83a <_free_r+0x46>
 800e844:	6811      	ldr	r1, [r2, #0]
 800e846:	1855      	adds	r5, r2, r1
 800e848:	42a5      	cmp	r5, r4
 800e84a:	d10b      	bne.n	800e864 <_free_r+0x70>
 800e84c:	6824      	ldr	r4, [r4, #0]
 800e84e:	4421      	add	r1, r4
 800e850:	1854      	adds	r4, r2, r1
 800e852:	42a3      	cmp	r3, r4
 800e854:	6011      	str	r1, [r2, #0]
 800e856:	d1e0      	bne.n	800e81a <_free_r+0x26>
 800e858:	681c      	ldr	r4, [r3, #0]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	6053      	str	r3, [r2, #4]
 800e85e:	440c      	add	r4, r1
 800e860:	6014      	str	r4, [r2, #0]
 800e862:	e7da      	b.n	800e81a <_free_r+0x26>
 800e864:	d902      	bls.n	800e86c <_free_r+0x78>
 800e866:	230c      	movs	r3, #12
 800e868:	6003      	str	r3, [r0, #0]
 800e86a:	e7d6      	b.n	800e81a <_free_r+0x26>
 800e86c:	6825      	ldr	r5, [r4, #0]
 800e86e:	1961      	adds	r1, r4, r5
 800e870:	428b      	cmp	r3, r1
 800e872:	bf04      	itt	eq
 800e874:	6819      	ldreq	r1, [r3, #0]
 800e876:	685b      	ldreq	r3, [r3, #4]
 800e878:	6063      	str	r3, [r4, #4]
 800e87a:	bf04      	itt	eq
 800e87c:	1949      	addeq	r1, r1, r5
 800e87e:	6021      	streq	r1, [r4, #0]
 800e880:	6054      	str	r4, [r2, #4]
 800e882:	e7ca      	b.n	800e81a <_free_r+0x26>
 800e884:	b003      	add	sp, #12
 800e886:	bd30      	pop	{r4, r5, pc}
 800e888:	200094f0 	.word	0x200094f0

0800e88c <__ssputs_r>:
 800e88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e890:	688e      	ldr	r6, [r1, #8]
 800e892:	461f      	mov	r7, r3
 800e894:	42be      	cmp	r6, r7
 800e896:	680b      	ldr	r3, [r1, #0]
 800e898:	4682      	mov	sl, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	4690      	mov	r8, r2
 800e89e:	d82c      	bhi.n	800e8fa <__ssputs_r+0x6e>
 800e8a0:	898a      	ldrh	r2, [r1, #12]
 800e8a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8a6:	d026      	beq.n	800e8f6 <__ssputs_r+0x6a>
 800e8a8:	6965      	ldr	r5, [r4, #20]
 800e8aa:	6909      	ldr	r1, [r1, #16]
 800e8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8b0:	eba3 0901 	sub.w	r9, r3, r1
 800e8b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8b8:	1c7b      	adds	r3, r7, #1
 800e8ba:	444b      	add	r3, r9
 800e8bc:	106d      	asrs	r5, r5, #1
 800e8be:	429d      	cmp	r5, r3
 800e8c0:	bf38      	it	cc
 800e8c2:	461d      	movcc	r5, r3
 800e8c4:	0553      	lsls	r3, r2, #21
 800e8c6:	d527      	bpl.n	800e918 <__ssputs_r+0x8c>
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7fe fbe7 	bl	800d09c <_malloc_r>
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	b360      	cbz	r0, 800e92c <__ssputs_r+0xa0>
 800e8d2:	6921      	ldr	r1, [r4, #16]
 800e8d4:	464a      	mov	r2, r9
 800e8d6:	f7ff f8e4 	bl	800daa2 <memcpy>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	6126      	str	r6, [r4, #16]
 800e8e8:	6165      	str	r5, [r4, #20]
 800e8ea:	444e      	add	r6, r9
 800e8ec:	eba5 0509 	sub.w	r5, r5, r9
 800e8f0:	6026      	str	r6, [r4, #0]
 800e8f2:	60a5      	str	r5, [r4, #8]
 800e8f4:	463e      	mov	r6, r7
 800e8f6:	42be      	cmp	r6, r7
 800e8f8:	d900      	bls.n	800e8fc <__ssputs_r+0x70>
 800e8fa:	463e      	mov	r6, r7
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	4632      	mov	r2, r6
 800e900:	4641      	mov	r1, r8
 800e902:	f001 fbcb 	bl	801009c <memmove>
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	1b9b      	subs	r3, r3, r6
 800e90a:	60a3      	str	r3, [r4, #8]
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	4433      	add	r3, r6
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	2000      	movs	r0, #0
 800e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e918:	462a      	mov	r2, r5
 800e91a:	f001 fa23 	bl	800fd64 <_realloc_r>
 800e91e:	4606      	mov	r6, r0
 800e920:	2800      	cmp	r0, #0
 800e922:	d1e0      	bne.n	800e8e6 <__ssputs_r+0x5a>
 800e924:	6921      	ldr	r1, [r4, #16]
 800e926:	4650      	mov	r0, sl
 800e928:	f7ff ff64 	bl	800e7f4 <_free_r>
 800e92c:	230c      	movs	r3, #12
 800e92e:	f8ca 3000 	str.w	r3, [sl]
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e93e:	e7e9      	b.n	800e914 <__ssputs_r+0x88>

0800e940 <_svfiprintf_r>:
 800e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	4698      	mov	r8, r3
 800e946:	898b      	ldrh	r3, [r1, #12]
 800e948:	061b      	lsls	r3, r3, #24
 800e94a:	b09d      	sub	sp, #116	; 0x74
 800e94c:	4607      	mov	r7, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	4614      	mov	r4, r2
 800e952:	d50e      	bpl.n	800e972 <_svfiprintf_r+0x32>
 800e954:	690b      	ldr	r3, [r1, #16]
 800e956:	b963      	cbnz	r3, 800e972 <_svfiprintf_r+0x32>
 800e958:	2140      	movs	r1, #64	; 0x40
 800e95a:	f7fe fb9f 	bl	800d09c <_malloc_r>
 800e95e:	6028      	str	r0, [r5, #0]
 800e960:	6128      	str	r0, [r5, #16]
 800e962:	b920      	cbnz	r0, 800e96e <_svfiprintf_r+0x2e>
 800e964:	230c      	movs	r3, #12
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e96c:	e0d0      	b.n	800eb10 <_svfiprintf_r+0x1d0>
 800e96e:	2340      	movs	r3, #64	; 0x40
 800e970:	616b      	str	r3, [r5, #20]
 800e972:	2300      	movs	r3, #0
 800e974:	9309      	str	r3, [sp, #36]	; 0x24
 800e976:	2320      	movs	r3, #32
 800e978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e97c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e980:	2330      	movs	r3, #48	; 0x30
 800e982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eb28 <_svfiprintf_r+0x1e8>
 800e986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e98a:	f04f 0901 	mov.w	r9, #1
 800e98e:	4623      	mov	r3, r4
 800e990:	469a      	mov	sl, r3
 800e992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e996:	b10a      	cbz	r2, 800e99c <_svfiprintf_r+0x5c>
 800e998:	2a25      	cmp	r2, #37	; 0x25
 800e99a:	d1f9      	bne.n	800e990 <_svfiprintf_r+0x50>
 800e99c:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a0:	d00b      	beq.n	800e9ba <_svfiprintf_r+0x7a>
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	4638      	mov	r0, r7
 800e9aa:	f7ff ff6f 	bl	800e88c <__ssputs_r>
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f000 80a9 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b6:	445a      	add	r2, fp
 800e9b8:	9209      	str	r2, [sp, #36]	; 0x24
 800e9ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f000 80a1 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ce:	f10a 0a01 	add.w	sl, sl, #1
 800e9d2:	9304      	str	r3, [sp, #16]
 800e9d4:	9307      	str	r3, [sp, #28]
 800e9d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9da:	931a      	str	r3, [sp, #104]	; 0x68
 800e9dc:	4654      	mov	r4, sl
 800e9de:	2205      	movs	r2, #5
 800e9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e4:	4850      	ldr	r0, [pc, #320]	; (800eb28 <_svfiprintf_r+0x1e8>)
 800e9e6:	f7f1 fc13 	bl	8000210 <memchr>
 800e9ea:	9a04      	ldr	r2, [sp, #16]
 800e9ec:	b9d8      	cbnz	r0, 800ea26 <_svfiprintf_r+0xe6>
 800e9ee:	06d0      	lsls	r0, r2, #27
 800e9f0:	bf44      	itt	mi
 800e9f2:	2320      	movmi	r3, #32
 800e9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9f8:	0711      	lsls	r1, r2, #28
 800e9fa:	bf44      	itt	mi
 800e9fc:	232b      	movmi	r3, #43	; 0x2b
 800e9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea02:	f89a 3000 	ldrb.w	r3, [sl]
 800ea06:	2b2a      	cmp	r3, #42	; 0x2a
 800ea08:	d015      	beq.n	800ea36 <_svfiprintf_r+0xf6>
 800ea0a:	9a07      	ldr	r2, [sp, #28]
 800ea0c:	4654      	mov	r4, sl
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f04f 0c0a 	mov.w	ip, #10
 800ea14:	4621      	mov	r1, r4
 800ea16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1a:	3b30      	subs	r3, #48	; 0x30
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	d94d      	bls.n	800eabc <_svfiprintf_r+0x17c>
 800ea20:	b1b0      	cbz	r0, 800ea50 <_svfiprintf_r+0x110>
 800ea22:	9207      	str	r2, [sp, #28]
 800ea24:	e014      	b.n	800ea50 <_svfiprintf_r+0x110>
 800ea26:	eba0 0308 	sub.w	r3, r0, r8
 800ea2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	9304      	str	r3, [sp, #16]
 800ea32:	46a2      	mov	sl, r4
 800ea34:	e7d2      	b.n	800e9dc <_svfiprintf_r+0x9c>
 800ea36:	9b03      	ldr	r3, [sp, #12]
 800ea38:	1d19      	adds	r1, r3, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	9103      	str	r1, [sp, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bfbb      	ittet	lt
 800ea42:	425b      	neglt	r3, r3
 800ea44:	f042 0202 	orrlt.w	r2, r2, #2
 800ea48:	9307      	strge	r3, [sp, #28]
 800ea4a:	9307      	strlt	r3, [sp, #28]
 800ea4c:	bfb8      	it	lt
 800ea4e:	9204      	strlt	r2, [sp, #16]
 800ea50:	7823      	ldrb	r3, [r4, #0]
 800ea52:	2b2e      	cmp	r3, #46	; 0x2e
 800ea54:	d10c      	bne.n	800ea70 <_svfiprintf_r+0x130>
 800ea56:	7863      	ldrb	r3, [r4, #1]
 800ea58:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5a:	d134      	bne.n	800eac6 <_svfiprintf_r+0x186>
 800ea5c:	9b03      	ldr	r3, [sp, #12]
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	9203      	str	r2, [sp, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bfb8      	it	lt
 800ea68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea6c:	3402      	adds	r4, #2
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb38 <_svfiprintf_r+0x1f8>
 800ea74:	7821      	ldrb	r1, [r4, #0]
 800ea76:	2203      	movs	r2, #3
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f7f1 fbc9 	bl	8000210 <memchr>
 800ea7e:	b138      	cbz	r0, 800ea90 <_svfiprintf_r+0x150>
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	eba0 000a 	sub.w	r0, r0, sl
 800ea86:	2240      	movs	r2, #64	; 0x40
 800ea88:	4082      	lsls	r2, r0
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	3401      	adds	r4, #1
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea94:	4825      	ldr	r0, [pc, #148]	; (800eb2c <_svfiprintf_r+0x1ec>)
 800ea96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea9a:	2206      	movs	r2, #6
 800ea9c:	f7f1 fbb8 	bl	8000210 <memchr>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d038      	beq.n	800eb16 <_svfiprintf_r+0x1d6>
 800eaa4:	4b22      	ldr	r3, [pc, #136]	; (800eb30 <_svfiprintf_r+0x1f0>)
 800eaa6:	bb1b      	cbnz	r3, 800eaf0 <_svfiprintf_r+0x1b0>
 800eaa8:	9b03      	ldr	r3, [sp, #12]
 800eaaa:	3307      	adds	r3, #7
 800eaac:	f023 0307 	bic.w	r3, r3, #7
 800eab0:	3308      	adds	r3, #8
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab6:	4433      	add	r3, r6
 800eab8:	9309      	str	r3, [sp, #36]	; 0x24
 800eaba:	e768      	b.n	800e98e <_svfiprintf_r+0x4e>
 800eabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac0:	460c      	mov	r4, r1
 800eac2:	2001      	movs	r0, #1
 800eac4:	e7a6      	b.n	800ea14 <_svfiprintf_r+0xd4>
 800eac6:	2300      	movs	r3, #0
 800eac8:	3401      	adds	r4, #1
 800eaca:	9305      	str	r3, [sp, #20]
 800eacc:	4619      	mov	r1, r3
 800eace:	f04f 0c0a 	mov.w	ip, #10
 800ead2:	4620      	mov	r0, r4
 800ead4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead8:	3a30      	subs	r2, #48	; 0x30
 800eada:	2a09      	cmp	r2, #9
 800eadc:	d903      	bls.n	800eae6 <_svfiprintf_r+0x1a6>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0c6      	beq.n	800ea70 <_svfiprintf_r+0x130>
 800eae2:	9105      	str	r1, [sp, #20]
 800eae4:	e7c4      	b.n	800ea70 <_svfiprintf_r+0x130>
 800eae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaea:	4604      	mov	r4, r0
 800eaec:	2301      	movs	r3, #1
 800eaee:	e7f0      	b.n	800ead2 <_svfiprintf_r+0x192>
 800eaf0:	ab03      	add	r3, sp, #12
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <_svfiprintf_r+0x1f4>)
 800eaf8:	a904      	add	r1, sp, #16
 800eafa:	4638      	mov	r0, r7
 800eafc:	f7fe f870 	bl	800cbe0 <_printf_float>
 800eb00:	1c42      	adds	r2, r0, #1
 800eb02:	4606      	mov	r6, r0
 800eb04:	d1d6      	bne.n	800eab4 <_svfiprintf_r+0x174>
 800eb06:	89ab      	ldrh	r3, [r5, #12]
 800eb08:	065b      	lsls	r3, r3, #25
 800eb0a:	f53f af2d 	bmi.w	800e968 <_svfiprintf_r+0x28>
 800eb0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb10:	b01d      	add	sp, #116	; 0x74
 800eb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb16:	ab03      	add	r3, sp, #12
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <_svfiprintf_r+0x1f4>)
 800eb1e:	a904      	add	r1, sp, #16
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7fe fba9 	bl	800d278 <_printf_i>
 800eb26:	e7eb      	b.n	800eb00 <_svfiprintf_r+0x1c0>
 800eb28:	080154c8 	.word	0x080154c8
 800eb2c:	080154d2 	.word	0x080154d2
 800eb30:	0800cbe1 	.word	0x0800cbe1
 800eb34:	0800e88d 	.word	0x0800e88d
 800eb38:	080154ce 	.word	0x080154ce

0800eb3c <_sungetc_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	1c4b      	adds	r3, r1, #1
 800eb40:	4614      	mov	r4, r2
 800eb42:	d103      	bne.n	800eb4c <_sungetc_r+0x10>
 800eb44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800eb48:	4628      	mov	r0, r5
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	8993      	ldrh	r3, [r2, #12]
 800eb4e:	f023 0320 	bic.w	r3, r3, #32
 800eb52:	8193      	strh	r3, [r2, #12]
 800eb54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb56:	6852      	ldr	r2, [r2, #4]
 800eb58:	b2cd      	uxtb	r5, r1
 800eb5a:	b18b      	cbz	r3, 800eb80 <_sungetc_r+0x44>
 800eb5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	dd08      	ble.n	800eb74 <_sungetc_r+0x38>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	1e5a      	subs	r2, r3, #1
 800eb66:	6022      	str	r2, [r4, #0]
 800eb68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800eb6c:	6863      	ldr	r3, [r4, #4]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	6063      	str	r3, [r4, #4]
 800eb72:	e7e9      	b.n	800eb48 <_sungetc_r+0xc>
 800eb74:	4621      	mov	r1, r4
 800eb76:	f001 f8bb 	bl	800fcf0 <__submore>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d0f1      	beq.n	800eb62 <_sungetc_r+0x26>
 800eb7e:	e7e1      	b.n	800eb44 <_sungetc_r+0x8>
 800eb80:	6921      	ldr	r1, [r4, #16]
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	b151      	cbz	r1, 800eb9c <_sungetc_r+0x60>
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d208      	bcs.n	800eb9c <_sungetc_r+0x60>
 800eb8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800eb8e:	42a9      	cmp	r1, r5
 800eb90:	d104      	bne.n	800eb9c <_sungetc_r+0x60>
 800eb92:	3b01      	subs	r3, #1
 800eb94:	3201      	adds	r2, #1
 800eb96:	6023      	str	r3, [r4, #0]
 800eb98:	6062      	str	r2, [r4, #4]
 800eb9a:	e7d5      	b.n	800eb48 <_sungetc_r+0xc>
 800eb9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800eba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eba4:	6363      	str	r3, [r4, #52]	; 0x34
 800eba6:	2303      	movs	r3, #3
 800eba8:	63a3      	str	r3, [r4, #56]	; 0x38
 800ebaa:	4623      	mov	r3, r4
 800ebac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e7dc      	b.n	800eb70 <_sungetc_r+0x34>

0800ebb6 <__ssrefill_r>:
 800ebb6:	b510      	push	{r4, lr}
 800ebb8:	460c      	mov	r4, r1
 800ebba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ebbc:	b169      	cbz	r1, 800ebda <__ssrefill_r+0x24>
 800ebbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebc2:	4299      	cmp	r1, r3
 800ebc4:	d001      	beq.n	800ebca <__ssrefill_r+0x14>
 800ebc6:	f7ff fe15 	bl	800e7f4 <_free_r>
 800ebca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebcc:	6063      	str	r3, [r4, #4]
 800ebce:	2000      	movs	r0, #0
 800ebd0:	6360      	str	r0, [r4, #52]	; 0x34
 800ebd2:	b113      	cbz	r3, 800ebda <__ssrefill_r+0x24>
 800ebd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ebd6:	6023      	str	r3, [r4, #0]
 800ebd8:	bd10      	pop	{r4, pc}
 800ebda:	6923      	ldr	r3, [r4, #16]
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6063      	str	r3, [r4, #4]
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	f043 0320 	orr.w	r3, r3, #32
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebee:	e7f3      	b.n	800ebd8 <__ssrefill_r+0x22>

0800ebf0 <__ssvfiscanf_r>:
 800ebf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ec00:	49a6      	ldr	r1, [pc, #664]	; (800ee9c <__ssvfiscanf_r+0x2ac>)
 800ec02:	91a0      	str	r1, [sp, #640]	; 0x280
 800ec04:	f10d 0804 	add.w	r8, sp, #4
 800ec08:	49a5      	ldr	r1, [pc, #660]	; (800eea0 <__ssvfiscanf_r+0x2b0>)
 800ec0a:	4fa6      	ldr	r7, [pc, #664]	; (800eea4 <__ssvfiscanf_r+0x2b4>)
 800ec0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800eea8 <__ssvfiscanf_r+0x2b8>
 800ec10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ec14:	4606      	mov	r6, r0
 800ec16:	91a1      	str	r1, [sp, #644]	; 0x284
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	7813      	ldrb	r3, [r2, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 815a 	beq.w	800eed6 <__ssvfiscanf_r+0x2e6>
 800ec22:	5cf9      	ldrb	r1, [r7, r3]
 800ec24:	f011 0108 	ands.w	r1, r1, #8
 800ec28:	f102 0501 	add.w	r5, r2, #1
 800ec2c:	d019      	beq.n	800ec62 <__ssvfiscanf_r+0x72>
 800ec2e:	6863      	ldr	r3, [r4, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	dd0f      	ble.n	800ec54 <__ssvfiscanf_r+0x64>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	781a      	ldrb	r2, [r3, #0]
 800ec38:	5cba      	ldrb	r2, [r7, r2]
 800ec3a:	0712      	lsls	r2, r2, #28
 800ec3c:	d401      	bmi.n	800ec42 <__ssvfiscanf_r+0x52>
 800ec3e:	462a      	mov	r2, r5
 800ec40:	e7eb      	b.n	800ec1a <__ssvfiscanf_r+0x2a>
 800ec42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ec44:	3201      	adds	r2, #1
 800ec46:	9245      	str	r2, [sp, #276]	; 0x114
 800ec48:	6862      	ldr	r2, [r4, #4]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	3a01      	subs	r2, #1
 800ec4e:	6062      	str	r2, [r4, #4]
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	e7ec      	b.n	800ec2e <__ssvfiscanf_r+0x3e>
 800ec54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ec56:	4621      	mov	r1, r4
 800ec58:	4630      	mov	r0, r6
 800ec5a:	4798      	blx	r3
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d0e9      	beq.n	800ec34 <__ssvfiscanf_r+0x44>
 800ec60:	e7ed      	b.n	800ec3e <__ssvfiscanf_r+0x4e>
 800ec62:	2b25      	cmp	r3, #37	; 0x25
 800ec64:	d012      	beq.n	800ec8c <__ssvfiscanf_r+0x9c>
 800ec66:	469a      	mov	sl, r3
 800ec68:	6863      	ldr	r3, [r4, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f340 8091 	ble.w	800ed92 <__ssvfiscanf_r+0x1a2>
 800ec70:	6822      	ldr	r2, [r4, #0]
 800ec72:	7813      	ldrb	r3, [r2, #0]
 800ec74:	4553      	cmp	r3, sl
 800ec76:	f040 812e 	bne.w	800eed6 <__ssvfiscanf_r+0x2e6>
 800ec7a:	6863      	ldr	r3, [r4, #4]
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	6063      	str	r3, [r4, #4]
 800ec80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ec82:	3201      	adds	r2, #1
 800ec84:	3301      	adds	r3, #1
 800ec86:	6022      	str	r2, [r4, #0]
 800ec88:	9345      	str	r3, [sp, #276]	; 0x114
 800ec8a:	e7d8      	b.n	800ec3e <__ssvfiscanf_r+0x4e>
 800ec8c:	9141      	str	r1, [sp, #260]	; 0x104
 800ec8e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ec90:	7853      	ldrb	r3, [r2, #1]
 800ec92:	2b2a      	cmp	r3, #42	; 0x2a
 800ec94:	bf02      	ittt	eq
 800ec96:	2310      	moveq	r3, #16
 800ec98:	1c95      	addeq	r5, r2, #2
 800ec9a:	9341      	streq	r3, [sp, #260]	; 0x104
 800ec9c:	220a      	movs	r2, #10
 800ec9e:	46aa      	mov	sl, r5
 800eca0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800eca4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800eca8:	2b09      	cmp	r3, #9
 800ecaa:	d91c      	bls.n	800ece6 <__ssvfiscanf_r+0xf6>
 800ecac:	487e      	ldr	r0, [pc, #504]	; (800eea8 <__ssvfiscanf_r+0x2b8>)
 800ecae:	2203      	movs	r2, #3
 800ecb0:	f7f1 faae 	bl	8000210 <memchr>
 800ecb4:	b138      	cbz	r0, 800ecc6 <__ssvfiscanf_r+0xd6>
 800ecb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ecb8:	eba0 0009 	sub.w	r0, r0, r9
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	4083      	lsls	r3, r0
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	9341      	str	r3, [sp, #260]	; 0x104
 800ecc4:	4655      	mov	r5, sl
 800ecc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ecca:	2b78      	cmp	r3, #120	; 0x78
 800eccc:	d806      	bhi.n	800ecdc <__ssvfiscanf_r+0xec>
 800ecce:	2b57      	cmp	r3, #87	; 0x57
 800ecd0:	d810      	bhi.n	800ecf4 <__ssvfiscanf_r+0x104>
 800ecd2:	2b25      	cmp	r3, #37	; 0x25
 800ecd4:	d0c7      	beq.n	800ec66 <__ssvfiscanf_r+0x76>
 800ecd6:	d857      	bhi.n	800ed88 <__ssvfiscanf_r+0x198>
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d065      	beq.n	800eda8 <__ssvfiscanf_r+0x1b8>
 800ecdc:	2303      	movs	r3, #3
 800ecde:	9347      	str	r3, [sp, #284]	; 0x11c
 800ece0:	230a      	movs	r3, #10
 800ece2:	9342      	str	r3, [sp, #264]	; 0x108
 800ece4:	e076      	b.n	800edd4 <__ssvfiscanf_r+0x1e4>
 800ece6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ece8:	fb02 1103 	mla	r1, r2, r3, r1
 800ecec:	3930      	subs	r1, #48	; 0x30
 800ecee:	9143      	str	r1, [sp, #268]	; 0x10c
 800ecf0:	4655      	mov	r5, sl
 800ecf2:	e7d4      	b.n	800ec9e <__ssvfiscanf_r+0xae>
 800ecf4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ecf8:	2a20      	cmp	r2, #32
 800ecfa:	d8ef      	bhi.n	800ecdc <__ssvfiscanf_r+0xec>
 800ecfc:	a101      	add	r1, pc, #4	; (adr r1, 800ed04 <__ssvfiscanf_r+0x114>)
 800ecfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ed02:	bf00      	nop
 800ed04:	0800edb7 	.word	0x0800edb7
 800ed08:	0800ecdd 	.word	0x0800ecdd
 800ed0c:	0800ecdd 	.word	0x0800ecdd
 800ed10:	0800ee15 	.word	0x0800ee15
 800ed14:	0800ecdd 	.word	0x0800ecdd
 800ed18:	0800ecdd 	.word	0x0800ecdd
 800ed1c:	0800ecdd 	.word	0x0800ecdd
 800ed20:	0800ecdd 	.word	0x0800ecdd
 800ed24:	0800ecdd 	.word	0x0800ecdd
 800ed28:	0800ecdd 	.word	0x0800ecdd
 800ed2c:	0800ecdd 	.word	0x0800ecdd
 800ed30:	0800ee2b 	.word	0x0800ee2b
 800ed34:	0800ee11 	.word	0x0800ee11
 800ed38:	0800ed8f 	.word	0x0800ed8f
 800ed3c:	0800ed8f 	.word	0x0800ed8f
 800ed40:	0800ed8f 	.word	0x0800ed8f
 800ed44:	0800ecdd 	.word	0x0800ecdd
 800ed48:	0800edcd 	.word	0x0800edcd
 800ed4c:	0800ecdd 	.word	0x0800ecdd
 800ed50:	0800ecdd 	.word	0x0800ecdd
 800ed54:	0800ecdd 	.word	0x0800ecdd
 800ed58:	0800ecdd 	.word	0x0800ecdd
 800ed5c:	0800ee3b 	.word	0x0800ee3b
 800ed60:	0800ee09 	.word	0x0800ee09
 800ed64:	0800edaf 	.word	0x0800edaf
 800ed68:	0800ecdd 	.word	0x0800ecdd
 800ed6c:	0800ecdd 	.word	0x0800ecdd
 800ed70:	0800ee37 	.word	0x0800ee37
 800ed74:	0800ecdd 	.word	0x0800ecdd
 800ed78:	0800ee11 	.word	0x0800ee11
 800ed7c:	0800ecdd 	.word	0x0800ecdd
 800ed80:	0800ecdd 	.word	0x0800ecdd
 800ed84:	0800edb7 	.word	0x0800edb7
 800ed88:	3b45      	subs	r3, #69	; 0x45
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d8a6      	bhi.n	800ecdc <__ssvfiscanf_r+0xec>
 800ed8e:	2305      	movs	r3, #5
 800ed90:	e01f      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800ed92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ed94:	4621      	mov	r1, r4
 800ed96:	4630      	mov	r0, r6
 800ed98:	4798      	blx	r3
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	f43f af68 	beq.w	800ec70 <__ssvfiscanf_r+0x80>
 800eda0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800eda2:	2800      	cmp	r0, #0
 800eda4:	f040 808d 	bne.w	800eec2 <__ssvfiscanf_r+0x2d2>
 800eda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edac:	e08f      	b.n	800eece <__ssvfiscanf_r+0x2de>
 800edae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800edb0:	f042 0220 	orr.w	r2, r2, #32
 800edb4:	9241      	str	r2, [sp, #260]	; 0x104
 800edb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800edb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800edbc:	9241      	str	r2, [sp, #260]	; 0x104
 800edbe:	2210      	movs	r2, #16
 800edc0:	2b6f      	cmp	r3, #111	; 0x6f
 800edc2:	9242      	str	r2, [sp, #264]	; 0x108
 800edc4:	bf34      	ite	cc
 800edc6:	2303      	movcc	r3, #3
 800edc8:	2304      	movcs	r3, #4
 800edca:	e002      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800edcc:	2300      	movs	r3, #0
 800edce:	9342      	str	r3, [sp, #264]	; 0x108
 800edd0:	2303      	movs	r3, #3
 800edd2:	9347      	str	r3, [sp, #284]	; 0x11c
 800edd4:	6863      	ldr	r3, [r4, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dd3d      	ble.n	800ee56 <__ssvfiscanf_r+0x266>
 800edda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800eddc:	0659      	lsls	r1, r3, #25
 800edde:	d404      	bmi.n	800edea <__ssvfiscanf_r+0x1fa>
 800ede0:	6823      	ldr	r3, [r4, #0]
 800ede2:	781a      	ldrb	r2, [r3, #0]
 800ede4:	5cba      	ldrb	r2, [r7, r2]
 800ede6:	0712      	lsls	r2, r2, #28
 800ede8:	d43c      	bmi.n	800ee64 <__ssvfiscanf_r+0x274>
 800edea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800edec:	2b02      	cmp	r3, #2
 800edee:	dc4b      	bgt.n	800ee88 <__ssvfiscanf_r+0x298>
 800edf0:	466b      	mov	r3, sp
 800edf2:	4622      	mov	r2, r4
 800edf4:	a941      	add	r1, sp, #260	; 0x104
 800edf6:	4630      	mov	r0, r6
 800edf8:	f000 f9b6 	bl	800f168 <_scanf_chars>
 800edfc:	2801      	cmp	r0, #1
 800edfe:	d06a      	beq.n	800eed6 <__ssvfiscanf_r+0x2e6>
 800ee00:	2802      	cmp	r0, #2
 800ee02:	f47f af1c 	bne.w	800ec3e <__ssvfiscanf_r+0x4e>
 800ee06:	e7cb      	b.n	800eda0 <__ssvfiscanf_r+0x1b0>
 800ee08:	2308      	movs	r3, #8
 800ee0a:	9342      	str	r3, [sp, #264]	; 0x108
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	e7e0      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800ee10:	220a      	movs	r2, #10
 800ee12:	e7d5      	b.n	800edc0 <__ssvfiscanf_r+0x1d0>
 800ee14:	4629      	mov	r1, r5
 800ee16:	4640      	mov	r0, r8
 800ee18:	f000 faf4 	bl	800f404 <__sccl>
 800ee1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ee1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee22:	9341      	str	r3, [sp, #260]	; 0x104
 800ee24:	4605      	mov	r5, r0
 800ee26:	2301      	movs	r3, #1
 800ee28:	e7d3      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800ee2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ee2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee30:	9341      	str	r3, [sp, #260]	; 0x104
 800ee32:	2300      	movs	r3, #0
 800ee34:	e7cd      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800ee36:	2302      	movs	r3, #2
 800ee38:	e7cb      	b.n	800edd2 <__ssvfiscanf_r+0x1e2>
 800ee3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ee3c:	06c3      	lsls	r3, r0, #27
 800ee3e:	f53f aefe 	bmi.w	800ec3e <__ssvfiscanf_r+0x4e>
 800ee42:	9b00      	ldr	r3, [sp, #0]
 800ee44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ee46:	1d19      	adds	r1, r3, #4
 800ee48:	9100      	str	r1, [sp, #0]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	07c0      	lsls	r0, r0, #31
 800ee4e:	bf4c      	ite	mi
 800ee50:	801a      	strhmi	r2, [r3, #0]
 800ee52:	601a      	strpl	r2, [r3, #0]
 800ee54:	e6f3      	b.n	800ec3e <__ssvfiscanf_r+0x4e>
 800ee56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee58:	4621      	mov	r1, r4
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	4798      	blx	r3
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d0bb      	beq.n	800edda <__ssvfiscanf_r+0x1ea>
 800ee62:	e79d      	b.n	800eda0 <__ssvfiscanf_r+0x1b0>
 800ee64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ee66:	3201      	adds	r2, #1
 800ee68:	9245      	str	r2, [sp, #276]	; 0x114
 800ee6a:	6862      	ldr	r2, [r4, #4]
 800ee6c:	3a01      	subs	r2, #1
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	6062      	str	r2, [r4, #4]
 800ee72:	dd02      	ble.n	800ee7a <__ssvfiscanf_r+0x28a>
 800ee74:	3301      	adds	r3, #1
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	e7b2      	b.n	800ede0 <__ssvfiscanf_r+0x1f0>
 800ee7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4630      	mov	r0, r6
 800ee80:	4798      	blx	r3
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d0ac      	beq.n	800ede0 <__ssvfiscanf_r+0x1f0>
 800ee86:	e78b      	b.n	800eda0 <__ssvfiscanf_r+0x1b0>
 800ee88:	2b04      	cmp	r3, #4
 800ee8a:	dc0f      	bgt.n	800eeac <__ssvfiscanf_r+0x2bc>
 800ee8c:	466b      	mov	r3, sp
 800ee8e:	4622      	mov	r2, r4
 800ee90:	a941      	add	r1, sp, #260	; 0x104
 800ee92:	4630      	mov	r0, r6
 800ee94:	f000 f9c2 	bl	800f21c <_scanf_i>
 800ee98:	e7b0      	b.n	800edfc <__ssvfiscanf_r+0x20c>
 800ee9a:	bf00      	nop
 800ee9c:	0800eb3d 	.word	0x0800eb3d
 800eea0:	0800ebb7 	.word	0x0800ebb7
 800eea4:	080152ff 	.word	0x080152ff
 800eea8:	080154ce 	.word	0x080154ce
 800eeac:	4b0b      	ldr	r3, [pc, #44]	; (800eedc <__ssvfiscanf_r+0x2ec>)
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f43f aec5 	beq.w	800ec3e <__ssvfiscanf_r+0x4e>
 800eeb4:	466b      	mov	r3, sp
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	a941      	add	r1, sp, #260	; 0x104
 800eeba:	4630      	mov	r0, r6
 800eebc:	f3af 8000 	nop.w
 800eec0:	e79c      	b.n	800edfc <__ssvfiscanf_r+0x20c>
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800eec8:	bf18      	it	ne
 800eeca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800eece:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800eed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800eed8:	e7f9      	b.n	800eece <__ssvfiscanf_r+0x2de>
 800eeda:	bf00      	nop
 800eedc:	00000000 	.word	0x00000000

0800eee0 <__sfputc_r>:
 800eee0:	6893      	ldr	r3, [r2, #8]
 800eee2:	3b01      	subs	r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	b410      	push	{r4}
 800eee8:	6093      	str	r3, [r2, #8]
 800eeea:	da08      	bge.n	800eefe <__sfputc_r+0x1e>
 800eeec:	6994      	ldr	r4, [r2, #24]
 800eeee:	42a3      	cmp	r3, r4
 800eef0:	db01      	blt.n	800eef6 <__sfputc_r+0x16>
 800eef2:	290a      	cmp	r1, #10
 800eef4:	d103      	bne.n	800eefe <__sfputc_r+0x1e>
 800eef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eefa:	f000 bfd7 	b.w	800feac <__swbuf_r>
 800eefe:	6813      	ldr	r3, [r2, #0]
 800ef00:	1c58      	adds	r0, r3, #1
 800ef02:	6010      	str	r0, [r2, #0]
 800ef04:	7019      	strb	r1, [r3, #0]
 800ef06:	4608      	mov	r0, r1
 800ef08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <__sfputs_r>:
 800ef0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef10:	4606      	mov	r6, r0
 800ef12:	460f      	mov	r7, r1
 800ef14:	4614      	mov	r4, r2
 800ef16:	18d5      	adds	r5, r2, r3
 800ef18:	42ac      	cmp	r4, r5
 800ef1a:	d101      	bne.n	800ef20 <__sfputs_r+0x12>
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	e007      	b.n	800ef30 <__sfputs_r+0x22>
 800ef20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef24:	463a      	mov	r2, r7
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff ffda 	bl	800eee0 <__sfputc_r>
 800ef2c:	1c43      	adds	r3, r0, #1
 800ef2e:	d1f3      	bne.n	800ef18 <__sfputs_r+0xa>
 800ef30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef34 <_vfiprintf_r>:
 800ef34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef38:	460d      	mov	r5, r1
 800ef3a:	b09d      	sub	sp, #116	; 0x74
 800ef3c:	4614      	mov	r4, r2
 800ef3e:	4698      	mov	r8, r3
 800ef40:	4606      	mov	r6, r0
 800ef42:	b118      	cbz	r0, 800ef4c <_vfiprintf_r+0x18>
 800ef44:	6a03      	ldr	r3, [r0, #32]
 800ef46:	b90b      	cbnz	r3, 800ef4c <_vfiprintf_r+0x18>
 800ef48:	f7fe fc16 	bl	800d778 <__sinit>
 800ef4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef4e:	07d9      	lsls	r1, r3, #31
 800ef50:	d405      	bmi.n	800ef5e <_vfiprintf_r+0x2a>
 800ef52:	89ab      	ldrh	r3, [r5, #12]
 800ef54:	059a      	lsls	r2, r3, #22
 800ef56:	d402      	bmi.n	800ef5e <_vfiprintf_r+0x2a>
 800ef58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef5a:	f7fe fda0 	bl	800da9e <__retarget_lock_acquire_recursive>
 800ef5e:	89ab      	ldrh	r3, [r5, #12]
 800ef60:	071b      	lsls	r3, r3, #28
 800ef62:	d501      	bpl.n	800ef68 <_vfiprintf_r+0x34>
 800ef64:	692b      	ldr	r3, [r5, #16]
 800ef66:	b99b      	cbnz	r3, 800ef90 <_vfiprintf_r+0x5c>
 800ef68:	4629      	mov	r1, r5
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f000 ffdc 	bl	800ff28 <__swsetup_r>
 800ef70:	b170      	cbz	r0, 800ef90 <_vfiprintf_r+0x5c>
 800ef72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef74:	07dc      	lsls	r4, r3, #31
 800ef76:	d504      	bpl.n	800ef82 <_vfiprintf_r+0x4e>
 800ef78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef7c:	b01d      	add	sp, #116	; 0x74
 800ef7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef82:	89ab      	ldrh	r3, [r5, #12]
 800ef84:	0598      	lsls	r0, r3, #22
 800ef86:	d4f7      	bmi.n	800ef78 <_vfiprintf_r+0x44>
 800ef88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef8a:	f7fe fd89 	bl	800daa0 <__retarget_lock_release_recursive>
 800ef8e:	e7f3      	b.n	800ef78 <_vfiprintf_r+0x44>
 800ef90:	2300      	movs	r3, #0
 800ef92:	9309      	str	r3, [sp, #36]	; 0x24
 800ef94:	2320      	movs	r3, #32
 800ef96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef9e:	2330      	movs	r3, #48	; 0x30
 800efa0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f154 <_vfiprintf_r+0x220>
 800efa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efa8:	f04f 0901 	mov.w	r9, #1
 800efac:	4623      	mov	r3, r4
 800efae:	469a      	mov	sl, r3
 800efb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efb4:	b10a      	cbz	r2, 800efba <_vfiprintf_r+0x86>
 800efb6:	2a25      	cmp	r2, #37	; 0x25
 800efb8:	d1f9      	bne.n	800efae <_vfiprintf_r+0x7a>
 800efba:	ebba 0b04 	subs.w	fp, sl, r4
 800efbe:	d00b      	beq.n	800efd8 <_vfiprintf_r+0xa4>
 800efc0:	465b      	mov	r3, fp
 800efc2:	4622      	mov	r2, r4
 800efc4:	4629      	mov	r1, r5
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7ff ffa1 	bl	800ef0e <__sfputs_r>
 800efcc:	3001      	adds	r0, #1
 800efce:	f000 80a9 	beq.w	800f124 <_vfiprintf_r+0x1f0>
 800efd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efd4:	445a      	add	r2, fp
 800efd6:	9209      	str	r2, [sp, #36]	; 0x24
 800efd8:	f89a 3000 	ldrb.w	r3, [sl]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f000 80a1 	beq.w	800f124 <_vfiprintf_r+0x1f0>
 800efe2:	2300      	movs	r3, #0
 800efe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efec:	f10a 0a01 	add.w	sl, sl, #1
 800eff0:	9304      	str	r3, [sp, #16]
 800eff2:	9307      	str	r3, [sp, #28]
 800eff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eff8:	931a      	str	r3, [sp, #104]	; 0x68
 800effa:	4654      	mov	r4, sl
 800effc:	2205      	movs	r2, #5
 800effe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f002:	4854      	ldr	r0, [pc, #336]	; (800f154 <_vfiprintf_r+0x220>)
 800f004:	f7f1 f904 	bl	8000210 <memchr>
 800f008:	9a04      	ldr	r2, [sp, #16]
 800f00a:	b9d8      	cbnz	r0, 800f044 <_vfiprintf_r+0x110>
 800f00c:	06d1      	lsls	r1, r2, #27
 800f00e:	bf44      	itt	mi
 800f010:	2320      	movmi	r3, #32
 800f012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f016:	0713      	lsls	r3, r2, #28
 800f018:	bf44      	itt	mi
 800f01a:	232b      	movmi	r3, #43	; 0x2b
 800f01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f020:	f89a 3000 	ldrb.w	r3, [sl]
 800f024:	2b2a      	cmp	r3, #42	; 0x2a
 800f026:	d015      	beq.n	800f054 <_vfiprintf_r+0x120>
 800f028:	9a07      	ldr	r2, [sp, #28]
 800f02a:	4654      	mov	r4, sl
 800f02c:	2000      	movs	r0, #0
 800f02e:	f04f 0c0a 	mov.w	ip, #10
 800f032:	4621      	mov	r1, r4
 800f034:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f038:	3b30      	subs	r3, #48	; 0x30
 800f03a:	2b09      	cmp	r3, #9
 800f03c:	d94d      	bls.n	800f0da <_vfiprintf_r+0x1a6>
 800f03e:	b1b0      	cbz	r0, 800f06e <_vfiprintf_r+0x13a>
 800f040:	9207      	str	r2, [sp, #28]
 800f042:	e014      	b.n	800f06e <_vfiprintf_r+0x13a>
 800f044:	eba0 0308 	sub.w	r3, r0, r8
 800f048:	fa09 f303 	lsl.w	r3, r9, r3
 800f04c:	4313      	orrs	r3, r2
 800f04e:	9304      	str	r3, [sp, #16]
 800f050:	46a2      	mov	sl, r4
 800f052:	e7d2      	b.n	800effa <_vfiprintf_r+0xc6>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	1d19      	adds	r1, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	9103      	str	r1, [sp, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfbb      	ittet	lt
 800f060:	425b      	neglt	r3, r3
 800f062:	f042 0202 	orrlt.w	r2, r2, #2
 800f066:	9307      	strge	r3, [sp, #28]
 800f068:	9307      	strlt	r3, [sp, #28]
 800f06a:	bfb8      	it	lt
 800f06c:	9204      	strlt	r2, [sp, #16]
 800f06e:	7823      	ldrb	r3, [r4, #0]
 800f070:	2b2e      	cmp	r3, #46	; 0x2e
 800f072:	d10c      	bne.n	800f08e <_vfiprintf_r+0x15a>
 800f074:	7863      	ldrb	r3, [r4, #1]
 800f076:	2b2a      	cmp	r3, #42	; 0x2a
 800f078:	d134      	bne.n	800f0e4 <_vfiprintf_r+0x1b0>
 800f07a:	9b03      	ldr	r3, [sp, #12]
 800f07c:	1d1a      	adds	r2, r3, #4
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	9203      	str	r2, [sp, #12]
 800f082:	2b00      	cmp	r3, #0
 800f084:	bfb8      	it	lt
 800f086:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f08a:	3402      	adds	r4, #2
 800f08c:	9305      	str	r3, [sp, #20]
 800f08e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f164 <_vfiprintf_r+0x230>
 800f092:	7821      	ldrb	r1, [r4, #0]
 800f094:	2203      	movs	r2, #3
 800f096:	4650      	mov	r0, sl
 800f098:	f7f1 f8ba 	bl	8000210 <memchr>
 800f09c:	b138      	cbz	r0, 800f0ae <_vfiprintf_r+0x17a>
 800f09e:	9b04      	ldr	r3, [sp, #16]
 800f0a0:	eba0 000a 	sub.w	r0, r0, sl
 800f0a4:	2240      	movs	r2, #64	; 0x40
 800f0a6:	4082      	lsls	r2, r0
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	3401      	adds	r4, #1
 800f0ac:	9304      	str	r3, [sp, #16]
 800f0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0b2:	4829      	ldr	r0, [pc, #164]	; (800f158 <_vfiprintf_r+0x224>)
 800f0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0b8:	2206      	movs	r2, #6
 800f0ba:	f7f1 f8a9 	bl	8000210 <memchr>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d03f      	beq.n	800f142 <_vfiprintf_r+0x20e>
 800f0c2:	4b26      	ldr	r3, [pc, #152]	; (800f15c <_vfiprintf_r+0x228>)
 800f0c4:	bb1b      	cbnz	r3, 800f10e <_vfiprintf_r+0x1da>
 800f0c6:	9b03      	ldr	r3, [sp, #12]
 800f0c8:	3307      	adds	r3, #7
 800f0ca:	f023 0307 	bic.w	r3, r3, #7
 800f0ce:	3308      	adds	r3, #8
 800f0d0:	9303      	str	r3, [sp, #12]
 800f0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0d4:	443b      	add	r3, r7
 800f0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d8:	e768      	b.n	800efac <_vfiprintf_r+0x78>
 800f0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0de:	460c      	mov	r4, r1
 800f0e0:	2001      	movs	r0, #1
 800f0e2:	e7a6      	b.n	800f032 <_vfiprintf_r+0xfe>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9305      	str	r3, [sp, #20]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	f04f 0c0a 	mov.w	ip, #10
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0f6:	3a30      	subs	r2, #48	; 0x30
 800f0f8:	2a09      	cmp	r2, #9
 800f0fa:	d903      	bls.n	800f104 <_vfiprintf_r+0x1d0>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d0c6      	beq.n	800f08e <_vfiprintf_r+0x15a>
 800f100:	9105      	str	r1, [sp, #20]
 800f102:	e7c4      	b.n	800f08e <_vfiprintf_r+0x15a>
 800f104:	fb0c 2101 	mla	r1, ip, r1, r2
 800f108:	4604      	mov	r4, r0
 800f10a:	2301      	movs	r3, #1
 800f10c:	e7f0      	b.n	800f0f0 <_vfiprintf_r+0x1bc>
 800f10e:	ab03      	add	r3, sp, #12
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	462a      	mov	r2, r5
 800f114:	4b12      	ldr	r3, [pc, #72]	; (800f160 <_vfiprintf_r+0x22c>)
 800f116:	a904      	add	r1, sp, #16
 800f118:	4630      	mov	r0, r6
 800f11a:	f7fd fd61 	bl	800cbe0 <_printf_float>
 800f11e:	4607      	mov	r7, r0
 800f120:	1c78      	adds	r0, r7, #1
 800f122:	d1d6      	bne.n	800f0d2 <_vfiprintf_r+0x19e>
 800f124:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f126:	07d9      	lsls	r1, r3, #31
 800f128:	d405      	bmi.n	800f136 <_vfiprintf_r+0x202>
 800f12a:	89ab      	ldrh	r3, [r5, #12]
 800f12c:	059a      	lsls	r2, r3, #22
 800f12e:	d402      	bmi.n	800f136 <_vfiprintf_r+0x202>
 800f130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f132:	f7fe fcb5 	bl	800daa0 <__retarget_lock_release_recursive>
 800f136:	89ab      	ldrh	r3, [r5, #12]
 800f138:	065b      	lsls	r3, r3, #25
 800f13a:	f53f af1d 	bmi.w	800ef78 <_vfiprintf_r+0x44>
 800f13e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f140:	e71c      	b.n	800ef7c <_vfiprintf_r+0x48>
 800f142:	ab03      	add	r3, sp, #12
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	462a      	mov	r2, r5
 800f148:	4b05      	ldr	r3, [pc, #20]	; (800f160 <_vfiprintf_r+0x22c>)
 800f14a:	a904      	add	r1, sp, #16
 800f14c:	4630      	mov	r0, r6
 800f14e:	f7fe f893 	bl	800d278 <_printf_i>
 800f152:	e7e4      	b.n	800f11e <_vfiprintf_r+0x1ea>
 800f154:	080154c8 	.word	0x080154c8
 800f158:	080154d2 	.word	0x080154d2
 800f15c:	0800cbe1 	.word	0x0800cbe1
 800f160:	0800ef0f 	.word	0x0800ef0f
 800f164:	080154ce 	.word	0x080154ce

0800f168 <_scanf_chars>:
 800f168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f16c:	4615      	mov	r5, r2
 800f16e:	688a      	ldr	r2, [r1, #8]
 800f170:	4680      	mov	r8, r0
 800f172:	460c      	mov	r4, r1
 800f174:	b932      	cbnz	r2, 800f184 <_scanf_chars+0x1c>
 800f176:	698a      	ldr	r2, [r1, #24]
 800f178:	2a00      	cmp	r2, #0
 800f17a:	bf0c      	ite	eq
 800f17c:	2201      	moveq	r2, #1
 800f17e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800f182:	608a      	str	r2, [r1, #8]
 800f184:	6822      	ldr	r2, [r4, #0]
 800f186:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f218 <_scanf_chars+0xb0>
 800f18a:	06d1      	lsls	r1, r2, #27
 800f18c:	bf5f      	itttt	pl
 800f18e:	681a      	ldrpl	r2, [r3, #0]
 800f190:	1d11      	addpl	r1, r2, #4
 800f192:	6019      	strpl	r1, [r3, #0]
 800f194:	6816      	ldrpl	r6, [r2, #0]
 800f196:	2700      	movs	r7, #0
 800f198:	69a0      	ldr	r0, [r4, #24]
 800f19a:	b188      	cbz	r0, 800f1c0 <_scanf_chars+0x58>
 800f19c:	2801      	cmp	r0, #1
 800f19e:	d107      	bne.n	800f1b0 <_scanf_chars+0x48>
 800f1a0:	682a      	ldr	r2, [r5, #0]
 800f1a2:	7811      	ldrb	r1, [r2, #0]
 800f1a4:	6962      	ldr	r2, [r4, #20]
 800f1a6:	5c52      	ldrb	r2, [r2, r1]
 800f1a8:	b952      	cbnz	r2, 800f1c0 <_scanf_chars+0x58>
 800f1aa:	2f00      	cmp	r7, #0
 800f1ac:	d031      	beq.n	800f212 <_scanf_chars+0xaa>
 800f1ae:	e022      	b.n	800f1f6 <_scanf_chars+0x8e>
 800f1b0:	2802      	cmp	r0, #2
 800f1b2:	d120      	bne.n	800f1f6 <_scanf_chars+0x8e>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f1bc:	071b      	lsls	r3, r3, #28
 800f1be:	d41a      	bmi.n	800f1f6 <_scanf_chars+0x8e>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	06da      	lsls	r2, r3, #27
 800f1c4:	bf5e      	ittt	pl
 800f1c6:	682b      	ldrpl	r3, [r5, #0]
 800f1c8:	781b      	ldrbpl	r3, [r3, #0]
 800f1ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f1ce:	682a      	ldr	r2, [r5, #0]
 800f1d0:	686b      	ldr	r3, [r5, #4]
 800f1d2:	3201      	adds	r2, #1
 800f1d4:	602a      	str	r2, [r5, #0]
 800f1d6:	68a2      	ldr	r2, [r4, #8]
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	3a01      	subs	r2, #1
 800f1dc:	606b      	str	r3, [r5, #4]
 800f1de:	3701      	adds	r7, #1
 800f1e0:	60a2      	str	r2, [r4, #8]
 800f1e2:	b142      	cbz	r2, 800f1f6 <_scanf_chars+0x8e>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dcd7      	bgt.n	800f198 <_scanf_chars+0x30>
 800f1e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4798      	blx	r3
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d0d0      	beq.n	800f198 <_scanf_chars+0x30>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	f013 0310 	ands.w	r3, r3, #16
 800f1fc:	d105      	bne.n	800f20a <_scanf_chars+0xa2>
 800f1fe:	68e2      	ldr	r2, [r4, #12]
 800f200:	3201      	adds	r2, #1
 800f202:	60e2      	str	r2, [r4, #12]
 800f204:	69a2      	ldr	r2, [r4, #24]
 800f206:	b102      	cbz	r2, 800f20a <_scanf_chars+0xa2>
 800f208:	7033      	strb	r3, [r6, #0]
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	443b      	add	r3, r7
 800f20e:	6123      	str	r3, [r4, #16]
 800f210:	2000      	movs	r0, #0
 800f212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f216:	bf00      	nop
 800f218:	080152ff 	.word	0x080152ff

0800f21c <_scanf_i>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	4698      	mov	r8, r3
 800f222:	4b74      	ldr	r3, [pc, #464]	; (800f3f4 <_scanf_i+0x1d8>)
 800f224:	460c      	mov	r4, r1
 800f226:	4682      	mov	sl, r0
 800f228:	4616      	mov	r6, r2
 800f22a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f22e:	b087      	sub	sp, #28
 800f230:	ab03      	add	r3, sp, #12
 800f232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f236:	4b70      	ldr	r3, [pc, #448]	; (800f3f8 <_scanf_i+0x1dc>)
 800f238:	69a1      	ldr	r1, [r4, #24]
 800f23a:	4a70      	ldr	r2, [pc, #448]	; (800f3fc <_scanf_i+0x1e0>)
 800f23c:	2903      	cmp	r1, #3
 800f23e:	bf18      	it	ne
 800f240:	461a      	movne	r2, r3
 800f242:	68a3      	ldr	r3, [r4, #8]
 800f244:	9201      	str	r2, [sp, #4]
 800f246:	1e5a      	subs	r2, r3, #1
 800f248:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f24c:	bf88      	it	hi
 800f24e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f252:	4627      	mov	r7, r4
 800f254:	bf82      	ittt	hi
 800f256:	eb03 0905 	addhi.w	r9, r3, r5
 800f25a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f25e:	60a3      	strhi	r3, [r4, #8]
 800f260:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f264:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f268:	bf98      	it	ls
 800f26a:	f04f 0900 	movls.w	r9, #0
 800f26e:	6023      	str	r3, [r4, #0]
 800f270:	463d      	mov	r5, r7
 800f272:	f04f 0b00 	mov.w	fp, #0
 800f276:	6831      	ldr	r1, [r6, #0]
 800f278:	ab03      	add	r3, sp, #12
 800f27a:	7809      	ldrb	r1, [r1, #0]
 800f27c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f280:	2202      	movs	r2, #2
 800f282:	f7f0 ffc5 	bl	8000210 <memchr>
 800f286:	b328      	cbz	r0, 800f2d4 <_scanf_i+0xb8>
 800f288:	f1bb 0f01 	cmp.w	fp, #1
 800f28c:	d159      	bne.n	800f342 <_scanf_i+0x126>
 800f28e:	6862      	ldr	r2, [r4, #4]
 800f290:	b92a      	cbnz	r2, 800f29e <_scanf_i+0x82>
 800f292:	6822      	ldr	r2, [r4, #0]
 800f294:	2308      	movs	r3, #8
 800f296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f29a:	6063      	str	r3, [r4, #4]
 800f29c:	6022      	str	r2, [r4, #0]
 800f29e:	6822      	ldr	r2, [r4, #0]
 800f2a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f2a4:	6022      	str	r2, [r4, #0]
 800f2a6:	68a2      	ldr	r2, [r4, #8]
 800f2a8:	1e51      	subs	r1, r2, #1
 800f2aa:	60a1      	str	r1, [r4, #8]
 800f2ac:	b192      	cbz	r2, 800f2d4 <_scanf_i+0xb8>
 800f2ae:	6832      	ldr	r2, [r6, #0]
 800f2b0:	1c51      	adds	r1, r2, #1
 800f2b2:	6031      	str	r1, [r6, #0]
 800f2b4:	7812      	ldrb	r2, [r2, #0]
 800f2b6:	f805 2b01 	strb.w	r2, [r5], #1
 800f2ba:	6872      	ldr	r2, [r6, #4]
 800f2bc:	3a01      	subs	r2, #1
 800f2be:	2a00      	cmp	r2, #0
 800f2c0:	6072      	str	r2, [r6, #4]
 800f2c2:	dc07      	bgt.n	800f2d4 <_scanf_i+0xb8>
 800f2c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	4650      	mov	r0, sl
 800f2cc:	4790      	blx	r2
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f040 8085 	bne.w	800f3de <_scanf_i+0x1c2>
 800f2d4:	f10b 0b01 	add.w	fp, fp, #1
 800f2d8:	f1bb 0f03 	cmp.w	fp, #3
 800f2dc:	d1cb      	bne.n	800f276 <_scanf_i+0x5a>
 800f2de:	6863      	ldr	r3, [r4, #4]
 800f2e0:	b90b      	cbnz	r3, 800f2e6 <_scanf_i+0xca>
 800f2e2:	230a      	movs	r3, #10
 800f2e4:	6063      	str	r3, [r4, #4]
 800f2e6:	6863      	ldr	r3, [r4, #4]
 800f2e8:	4945      	ldr	r1, [pc, #276]	; (800f400 <_scanf_i+0x1e4>)
 800f2ea:	6960      	ldr	r0, [r4, #20]
 800f2ec:	1ac9      	subs	r1, r1, r3
 800f2ee:	f000 f889 	bl	800f404 <__sccl>
 800f2f2:	f04f 0b00 	mov.w	fp, #0
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	6822      	ldr	r2, [r4, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d03d      	beq.n	800f37a <_scanf_i+0x15e>
 800f2fe:	6831      	ldr	r1, [r6, #0]
 800f300:	6960      	ldr	r0, [r4, #20]
 800f302:	f891 c000 	ldrb.w	ip, [r1]
 800f306:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d035      	beq.n	800f37a <_scanf_i+0x15e>
 800f30e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f312:	d124      	bne.n	800f35e <_scanf_i+0x142>
 800f314:	0510      	lsls	r0, r2, #20
 800f316:	d522      	bpl.n	800f35e <_scanf_i+0x142>
 800f318:	f10b 0b01 	add.w	fp, fp, #1
 800f31c:	f1b9 0f00 	cmp.w	r9, #0
 800f320:	d003      	beq.n	800f32a <_scanf_i+0x10e>
 800f322:	3301      	adds	r3, #1
 800f324:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f328:	60a3      	str	r3, [r4, #8]
 800f32a:	6873      	ldr	r3, [r6, #4]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	6073      	str	r3, [r6, #4]
 800f332:	dd1b      	ble.n	800f36c <_scanf_i+0x150>
 800f334:	6833      	ldr	r3, [r6, #0]
 800f336:	3301      	adds	r3, #1
 800f338:	6033      	str	r3, [r6, #0]
 800f33a:	68a3      	ldr	r3, [r4, #8]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	60a3      	str	r3, [r4, #8]
 800f340:	e7d9      	b.n	800f2f6 <_scanf_i+0xda>
 800f342:	f1bb 0f02 	cmp.w	fp, #2
 800f346:	d1ae      	bne.n	800f2a6 <_scanf_i+0x8a>
 800f348:	6822      	ldr	r2, [r4, #0]
 800f34a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f34e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f352:	d1bf      	bne.n	800f2d4 <_scanf_i+0xb8>
 800f354:	2310      	movs	r3, #16
 800f356:	6063      	str	r3, [r4, #4]
 800f358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f35c:	e7a2      	b.n	800f2a4 <_scanf_i+0x88>
 800f35e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f362:	6022      	str	r2, [r4, #0]
 800f364:	780b      	ldrb	r3, [r1, #0]
 800f366:	f805 3b01 	strb.w	r3, [r5], #1
 800f36a:	e7de      	b.n	800f32a <_scanf_i+0x10e>
 800f36c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f370:	4631      	mov	r1, r6
 800f372:	4650      	mov	r0, sl
 800f374:	4798      	blx	r3
 800f376:	2800      	cmp	r0, #0
 800f378:	d0df      	beq.n	800f33a <_scanf_i+0x11e>
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	05d9      	lsls	r1, r3, #23
 800f37e:	d50d      	bpl.n	800f39c <_scanf_i+0x180>
 800f380:	42bd      	cmp	r5, r7
 800f382:	d909      	bls.n	800f398 <_scanf_i+0x17c>
 800f384:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f38c:	4632      	mov	r2, r6
 800f38e:	4650      	mov	r0, sl
 800f390:	4798      	blx	r3
 800f392:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f396:	464d      	mov	r5, r9
 800f398:	42bd      	cmp	r5, r7
 800f39a:	d028      	beq.n	800f3ee <_scanf_i+0x1d2>
 800f39c:	6822      	ldr	r2, [r4, #0]
 800f39e:	f012 0210 	ands.w	r2, r2, #16
 800f3a2:	d113      	bne.n	800f3cc <_scanf_i+0x1b0>
 800f3a4:	702a      	strb	r2, [r5, #0]
 800f3a6:	6863      	ldr	r3, [r4, #4]
 800f3a8:	9e01      	ldr	r6, [sp, #4]
 800f3aa:	4639      	mov	r1, r7
 800f3ac:	4650      	mov	r0, sl
 800f3ae:	47b0      	blx	r6
 800f3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f3b4:	6821      	ldr	r1, [r4, #0]
 800f3b6:	1d1a      	adds	r2, r3, #4
 800f3b8:	f8c8 2000 	str.w	r2, [r8]
 800f3bc:	f011 0f20 	tst.w	r1, #32
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	d00f      	beq.n	800f3e4 <_scanf_i+0x1c8>
 800f3c4:	6018      	str	r0, [r3, #0]
 800f3c6:	68e3      	ldr	r3, [r4, #12]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	60e3      	str	r3, [r4, #12]
 800f3cc:	6923      	ldr	r3, [r4, #16]
 800f3ce:	1bed      	subs	r5, r5, r7
 800f3d0:	445d      	add	r5, fp
 800f3d2:	442b      	add	r3, r5
 800f3d4:	6123      	str	r3, [r4, #16]
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	b007      	add	sp, #28
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3de:	f04f 0b00 	mov.w	fp, #0
 800f3e2:	e7ca      	b.n	800f37a <_scanf_i+0x15e>
 800f3e4:	07ca      	lsls	r2, r1, #31
 800f3e6:	bf4c      	ite	mi
 800f3e8:	8018      	strhmi	r0, [r3, #0]
 800f3ea:	6018      	strpl	r0, [r3, #0]
 800f3ec:	e7eb      	b.n	800f3c6 <_scanf_i+0x1aa>
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	e7f2      	b.n	800f3d8 <_scanf_i+0x1bc>
 800f3f2:	bf00      	nop
 800f3f4:	080111ec 	.word	0x080111ec
 800f3f8:	0800fea9 	.word	0x0800fea9
 800f3fc:	0800d8ad 	.word	0x0800d8ad
 800f400:	080154e9 	.word	0x080154e9

0800f404 <__sccl>:
 800f404:	b570      	push	{r4, r5, r6, lr}
 800f406:	780b      	ldrb	r3, [r1, #0]
 800f408:	4604      	mov	r4, r0
 800f40a:	2b5e      	cmp	r3, #94	; 0x5e
 800f40c:	bf0b      	itete	eq
 800f40e:	784b      	ldrbeq	r3, [r1, #1]
 800f410:	1c4a      	addne	r2, r1, #1
 800f412:	1c8a      	addeq	r2, r1, #2
 800f414:	2100      	movne	r1, #0
 800f416:	bf08      	it	eq
 800f418:	2101      	moveq	r1, #1
 800f41a:	3801      	subs	r0, #1
 800f41c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f420:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f424:	42a8      	cmp	r0, r5
 800f426:	d1fb      	bne.n	800f420 <__sccl+0x1c>
 800f428:	b90b      	cbnz	r3, 800f42e <__sccl+0x2a>
 800f42a:	1e50      	subs	r0, r2, #1
 800f42c:	bd70      	pop	{r4, r5, r6, pc}
 800f42e:	f081 0101 	eor.w	r1, r1, #1
 800f432:	54e1      	strb	r1, [r4, r3]
 800f434:	4610      	mov	r0, r2
 800f436:	4602      	mov	r2, r0
 800f438:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f43c:	2d2d      	cmp	r5, #45	; 0x2d
 800f43e:	d005      	beq.n	800f44c <__sccl+0x48>
 800f440:	2d5d      	cmp	r5, #93	; 0x5d
 800f442:	d016      	beq.n	800f472 <__sccl+0x6e>
 800f444:	2d00      	cmp	r5, #0
 800f446:	d0f1      	beq.n	800f42c <__sccl+0x28>
 800f448:	462b      	mov	r3, r5
 800f44a:	e7f2      	b.n	800f432 <__sccl+0x2e>
 800f44c:	7846      	ldrb	r6, [r0, #1]
 800f44e:	2e5d      	cmp	r6, #93	; 0x5d
 800f450:	d0fa      	beq.n	800f448 <__sccl+0x44>
 800f452:	42b3      	cmp	r3, r6
 800f454:	dcf8      	bgt.n	800f448 <__sccl+0x44>
 800f456:	3002      	adds	r0, #2
 800f458:	461a      	mov	r2, r3
 800f45a:	3201      	adds	r2, #1
 800f45c:	4296      	cmp	r6, r2
 800f45e:	54a1      	strb	r1, [r4, r2]
 800f460:	dcfb      	bgt.n	800f45a <__sccl+0x56>
 800f462:	1af2      	subs	r2, r6, r3
 800f464:	3a01      	subs	r2, #1
 800f466:	1c5d      	adds	r5, r3, #1
 800f468:	42b3      	cmp	r3, r6
 800f46a:	bfa8      	it	ge
 800f46c:	2200      	movge	r2, #0
 800f46e:	18ab      	adds	r3, r5, r2
 800f470:	e7e1      	b.n	800f436 <__sccl+0x32>
 800f472:	4610      	mov	r0, r2
 800f474:	e7da      	b.n	800f42c <__sccl+0x28>
	...

0800f478 <__sflush_r>:
 800f478:	898a      	ldrh	r2, [r1, #12]
 800f47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47e:	4605      	mov	r5, r0
 800f480:	0710      	lsls	r0, r2, #28
 800f482:	460c      	mov	r4, r1
 800f484:	d458      	bmi.n	800f538 <__sflush_r+0xc0>
 800f486:	684b      	ldr	r3, [r1, #4]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	dc05      	bgt.n	800f498 <__sflush_r+0x20>
 800f48c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f48e:	2b00      	cmp	r3, #0
 800f490:	dc02      	bgt.n	800f498 <__sflush_r+0x20>
 800f492:	2000      	movs	r0, #0
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f49a:	2e00      	cmp	r6, #0
 800f49c:	d0f9      	beq.n	800f492 <__sflush_r+0x1a>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4a4:	682f      	ldr	r7, [r5, #0]
 800f4a6:	6a21      	ldr	r1, [r4, #32]
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	d032      	beq.n	800f512 <__sflush_r+0x9a>
 800f4ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4ae:	89a3      	ldrh	r3, [r4, #12]
 800f4b0:	075a      	lsls	r2, r3, #29
 800f4b2:	d505      	bpl.n	800f4c0 <__sflush_r+0x48>
 800f4b4:	6863      	ldr	r3, [r4, #4]
 800f4b6:	1ac0      	subs	r0, r0, r3
 800f4b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4ba:	b10b      	cbz	r3, 800f4c0 <__sflush_r+0x48>
 800f4bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4be:	1ac0      	subs	r0, r0, r3
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4c6:	6a21      	ldr	r1, [r4, #32]
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b0      	blx	r6
 800f4cc:	1c43      	adds	r3, r0, #1
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	d106      	bne.n	800f4e0 <__sflush_r+0x68>
 800f4d2:	6829      	ldr	r1, [r5, #0]
 800f4d4:	291d      	cmp	r1, #29
 800f4d6:	d82b      	bhi.n	800f530 <__sflush_r+0xb8>
 800f4d8:	4a29      	ldr	r2, [pc, #164]	; (800f580 <__sflush_r+0x108>)
 800f4da:	410a      	asrs	r2, r1
 800f4dc:	07d6      	lsls	r6, r2, #31
 800f4de:	d427      	bmi.n	800f530 <__sflush_r+0xb8>
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	6062      	str	r2, [r4, #4]
 800f4e4:	04d9      	lsls	r1, r3, #19
 800f4e6:	6922      	ldr	r2, [r4, #16]
 800f4e8:	6022      	str	r2, [r4, #0]
 800f4ea:	d504      	bpl.n	800f4f6 <__sflush_r+0x7e>
 800f4ec:	1c42      	adds	r2, r0, #1
 800f4ee:	d101      	bne.n	800f4f4 <__sflush_r+0x7c>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	b903      	cbnz	r3, 800f4f6 <__sflush_r+0x7e>
 800f4f4:	6560      	str	r0, [r4, #84]	; 0x54
 800f4f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4f8:	602f      	str	r7, [r5, #0]
 800f4fa:	2900      	cmp	r1, #0
 800f4fc:	d0c9      	beq.n	800f492 <__sflush_r+0x1a>
 800f4fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f502:	4299      	cmp	r1, r3
 800f504:	d002      	beq.n	800f50c <__sflush_r+0x94>
 800f506:	4628      	mov	r0, r5
 800f508:	f7ff f974 	bl	800e7f4 <_free_r>
 800f50c:	2000      	movs	r0, #0
 800f50e:	6360      	str	r0, [r4, #52]	; 0x34
 800f510:	e7c0      	b.n	800f494 <__sflush_r+0x1c>
 800f512:	2301      	movs	r3, #1
 800f514:	4628      	mov	r0, r5
 800f516:	47b0      	blx	r6
 800f518:	1c41      	adds	r1, r0, #1
 800f51a:	d1c8      	bne.n	800f4ae <__sflush_r+0x36>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d0c5      	beq.n	800f4ae <__sflush_r+0x36>
 800f522:	2b1d      	cmp	r3, #29
 800f524:	d001      	beq.n	800f52a <__sflush_r+0xb2>
 800f526:	2b16      	cmp	r3, #22
 800f528:	d101      	bne.n	800f52e <__sflush_r+0xb6>
 800f52a:	602f      	str	r7, [r5, #0]
 800f52c:	e7b1      	b.n	800f492 <__sflush_r+0x1a>
 800f52e:	89a3      	ldrh	r3, [r4, #12]
 800f530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f534:	81a3      	strh	r3, [r4, #12]
 800f536:	e7ad      	b.n	800f494 <__sflush_r+0x1c>
 800f538:	690f      	ldr	r7, [r1, #16]
 800f53a:	2f00      	cmp	r7, #0
 800f53c:	d0a9      	beq.n	800f492 <__sflush_r+0x1a>
 800f53e:	0793      	lsls	r3, r2, #30
 800f540:	680e      	ldr	r6, [r1, #0]
 800f542:	bf08      	it	eq
 800f544:	694b      	ldreq	r3, [r1, #20]
 800f546:	600f      	str	r7, [r1, #0]
 800f548:	bf18      	it	ne
 800f54a:	2300      	movne	r3, #0
 800f54c:	eba6 0807 	sub.w	r8, r6, r7
 800f550:	608b      	str	r3, [r1, #8]
 800f552:	f1b8 0f00 	cmp.w	r8, #0
 800f556:	dd9c      	ble.n	800f492 <__sflush_r+0x1a>
 800f558:	6a21      	ldr	r1, [r4, #32]
 800f55a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f55c:	4643      	mov	r3, r8
 800f55e:	463a      	mov	r2, r7
 800f560:	4628      	mov	r0, r5
 800f562:	47b0      	blx	r6
 800f564:	2800      	cmp	r0, #0
 800f566:	dc06      	bgt.n	800f576 <__sflush_r+0xfe>
 800f568:	89a3      	ldrh	r3, [r4, #12]
 800f56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f56e:	81a3      	strh	r3, [r4, #12]
 800f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f574:	e78e      	b.n	800f494 <__sflush_r+0x1c>
 800f576:	4407      	add	r7, r0
 800f578:	eba8 0800 	sub.w	r8, r8, r0
 800f57c:	e7e9      	b.n	800f552 <__sflush_r+0xda>
 800f57e:	bf00      	nop
 800f580:	dfbffffe 	.word	0xdfbffffe

0800f584 <_fflush_r>:
 800f584:	b538      	push	{r3, r4, r5, lr}
 800f586:	690b      	ldr	r3, [r1, #16]
 800f588:	4605      	mov	r5, r0
 800f58a:	460c      	mov	r4, r1
 800f58c:	b913      	cbnz	r3, 800f594 <_fflush_r+0x10>
 800f58e:	2500      	movs	r5, #0
 800f590:	4628      	mov	r0, r5
 800f592:	bd38      	pop	{r3, r4, r5, pc}
 800f594:	b118      	cbz	r0, 800f59e <_fflush_r+0x1a>
 800f596:	6a03      	ldr	r3, [r0, #32]
 800f598:	b90b      	cbnz	r3, 800f59e <_fflush_r+0x1a>
 800f59a:	f7fe f8ed 	bl	800d778 <__sinit>
 800f59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0f3      	beq.n	800f58e <_fflush_r+0xa>
 800f5a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5a8:	07d0      	lsls	r0, r2, #31
 800f5aa:	d404      	bmi.n	800f5b6 <_fflush_r+0x32>
 800f5ac:	0599      	lsls	r1, r3, #22
 800f5ae:	d402      	bmi.n	800f5b6 <_fflush_r+0x32>
 800f5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5b2:	f7fe fa74 	bl	800da9e <__retarget_lock_acquire_recursive>
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	f7ff ff5d 	bl	800f478 <__sflush_r>
 800f5be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5c0:	07da      	lsls	r2, r3, #31
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	d4e4      	bmi.n	800f590 <_fflush_r+0xc>
 800f5c6:	89a3      	ldrh	r3, [r4, #12]
 800f5c8:	059b      	lsls	r3, r3, #22
 800f5ca:	d4e1      	bmi.n	800f590 <_fflush_r+0xc>
 800f5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5ce:	f7fe fa67 	bl	800daa0 <__retarget_lock_release_recursive>
 800f5d2:	e7dd      	b.n	800f590 <_fflush_r+0xc>

0800f5d4 <_Balloc>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	69c6      	ldr	r6, [r0, #28]
 800f5d8:	4604      	mov	r4, r0
 800f5da:	460d      	mov	r5, r1
 800f5dc:	b976      	cbnz	r6, 800f5fc <_Balloc+0x28>
 800f5de:	2010      	movs	r0, #16
 800f5e0:	f7fd fd34 	bl	800d04c <malloc>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	61e0      	str	r0, [r4, #28]
 800f5e8:	b920      	cbnz	r0, 800f5f4 <_Balloc+0x20>
 800f5ea:	4b18      	ldr	r3, [pc, #96]	; (800f64c <_Balloc+0x78>)
 800f5ec:	4818      	ldr	r0, [pc, #96]	; (800f650 <_Balloc+0x7c>)
 800f5ee:	216b      	movs	r1, #107	; 0x6b
 800f5f0:	f7fe fa66 	bl	800dac0 <__assert_func>
 800f5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5f8:	6006      	str	r6, [r0, #0]
 800f5fa:	60c6      	str	r6, [r0, #12]
 800f5fc:	69e6      	ldr	r6, [r4, #28]
 800f5fe:	68f3      	ldr	r3, [r6, #12]
 800f600:	b183      	cbz	r3, 800f624 <_Balloc+0x50>
 800f602:	69e3      	ldr	r3, [r4, #28]
 800f604:	68db      	ldr	r3, [r3, #12]
 800f606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f60a:	b9b8      	cbnz	r0, 800f63c <_Balloc+0x68>
 800f60c:	2101      	movs	r1, #1
 800f60e:	fa01 f605 	lsl.w	r6, r1, r5
 800f612:	1d72      	adds	r2, r6, #5
 800f614:	0092      	lsls	r2, r2, #2
 800f616:	4620      	mov	r0, r4
 800f618:	f000 fd83 	bl	8010122 <_calloc_r>
 800f61c:	b160      	cbz	r0, 800f638 <_Balloc+0x64>
 800f61e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f622:	e00e      	b.n	800f642 <_Balloc+0x6e>
 800f624:	2221      	movs	r2, #33	; 0x21
 800f626:	2104      	movs	r1, #4
 800f628:	4620      	mov	r0, r4
 800f62a:	f000 fd7a 	bl	8010122 <_calloc_r>
 800f62e:	69e3      	ldr	r3, [r4, #28]
 800f630:	60f0      	str	r0, [r6, #12]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d1e4      	bne.n	800f602 <_Balloc+0x2e>
 800f638:	2000      	movs	r0, #0
 800f63a:	bd70      	pop	{r4, r5, r6, pc}
 800f63c:	6802      	ldr	r2, [r0, #0]
 800f63e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f642:	2300      	movs	r3, #0
 800f644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f648:	e7f7      	b.n	800f63a <_Balloc+0x66>
 800f64a:	bf00      	nop
 800f64c:	08015448 	.word	0x08015448
 800f650:	080154f4 	.word	0x080154f4

0800f654 <_Bfree>:
 800f654:	b570      	push	{r4, r5, r6, lr}
 800f656:	69c6      	ldr	r6, [r0, #28]
 800f658:	4605      	mov	r5, r0
 800f65a:	460c      	mov	r4, r1
 800f65c:	b976      	cbnz	r6, 800f67c <_Bfree+0x28>
 800f65e:	2010      	movs	r0, #16
 800f660:	f7fd fcf4 	bl	800d04c <malloc>
 800f664:	4602      	mov	r2, r0
 800f666:	61e8      	str	r0, [r5, #28]
 800f668:	b920      	cbnz	r0, 800f674 <_Bfree+0x20>
 800f66a:	4b09      	ldr	r3, [pc, #36]	; (800f690 <_Bfree+0x3c>)
 800f66c:	4809      	ldr	r0, [pc, #36]	; (800f694 <_Bfree+0x40>)
 800f66e:	218f      	movs	r1, #143	; 0x8f
 800f670:	f7fe fa26 	bl	800dac0 <__assert_func>
 800f674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f678:	6006      	str	r6, [r0, #0]
 800f67a:	60c6      	str	r6, [r0, #12]
 800f67c:	b13c      	cbz	r4, 800f68e <_Bfree+0x3a>
 800f67e:	69eb      	ldr	r3, [r5, #28]
 800f680:	6862      	ldr	r2, [r4, #4]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f688:	6021      	str	r1, [r4, #0]
 800f68a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	08015448 	.word	0x08015448
 800f694:	080154f4 	.word	0x080154f4

0800f698 <__multadd>:
 800f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69c:	690d      	ldr	r5, [r1, #16]
 800f69e:	4607      	mov	r7, r0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	461e      	mov	r6, r3
 800f6a4:	f101 0c14 	add.w	ip, r1, #20
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	f8dc 3000 	ldr.w	r3, [ip]
 800f6ae:	b299      	uxth	r1, r3
 800f6b0:	fb02 6101 	mla	r1, r2, r1, r6
 800f6b4:	0c1e      	lsrs	r6, r3, #16
 800f6b6:	0c0b      	lsrs	r3, r1, #16
 800f6b8:	fb02 3306 	mla	r3, r2, r6, r3
 800f6bc:	b289      	uxth	r1, r1
 800f6be:	3001      	adds	r0, #1
 800f6c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f6c4:	4285      	cmp	r5, r0
 800f6c6:	f84c 1b04 	str.w	r1, [ip], #4
 800f6ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f6ce:	dcec      	bgt.n	800f6aa <__multadd+0x12>
 800f6d0:	b30e      	cbz	r6, 800f716 <__multadd+0x7e>
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	42ab      	cmp	r3, r5
 800f6d6:	dc19      	bgt.n	800f70c <__multadd+0x74>
 800f6d8:	6861      	ldr	r1, [r4, #4]
 800f6da:	4638      	mov	r0, r7
 800f6dc:	3101      	adds	r1, #1
 800f6de:	f7ff ff79 	bl	800f5d4 <_Balloc>
 800f6e2:	4680      	mov	r8, r0
 800f6e4:	b928      	cbnz	r0, 800f6f2 <__multadd+0x5a>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	4b0c      	ldr	r3, [pc, #48]	; (800f71c <__multadd+0x84>)
 800f6ea:	480d      	ldr	r0, [pc, #52]	; (800f720 <__multadd+0x88>)
 800f6ec:	21ba      	movs	r1, #186	; 0xba
 800f6ee:	f7fe f9e7 	bl	800dac0 <__assert_func>
 800f6f2:	6922      	ldr	r2, [r4, #16]
 800f6f4:	3202      	adds	r2, #2
 800f6f6:	f104 010c 	add.w	r1, r4, #12
 800f6fa:	0092      	lsls	r2, r2, #2
 800f6fc:	300c      	adds	r0, #12
 800f6fe:	f7fe f9d0 	bl	800daa2 <memcpy>
 800f702:	4621      	mov	r1, r4
 800f704:	4638      	mov	r0, r7
 800f706:	f7ff ffa5 	bl	800f654 <_Bfree>
 800f70a:	4644      	mov	r4, r8
 800f70c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f710:	3501      	adds	r5, #1
 800f712:	615e      	str	r6, [r3, #20]
 800f714:	6125      	str	r5, [r4, #16]
 800f716:	4620      	mov	r0, r4
 800f718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f71c:	080154b7 	.word	0x080154b7
 800f720:	080154f4 	.word	0x080154f4

0800f724 <__hi0bits>:
 800f724:	0c03      	lsrs	r3, r0, #16
 800f726:	041b      	lsls	r3, r3, #16
 800f728:	b9d3      	cbnz	r3, 800f760 <__hi0bits+0x3c>
 800f72a:	0400      	lsls	r0, r0, #16
 800f72c:	2310      	movs	r3, #16
 800f72e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f732:	bf04      	itt	eq
 800f734:	0200      	lsleq	r0, r0, #8
 800f736:	3308      	addeq	r3, #8
 800f738:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f73c:	bf04      	itt	eq
 800f73e:	0100      	lsleq	r0, r0, #4
 800f740:	3304      	addeq	r3, #4
 800f742:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f746:	bf04      	itt	eq
 800f748:	0080      	lsleq	r0, r0, #2
 800f74a:	3302      	addeq	r3, #2
 800f74c:	2800      	cmp	r0, #0
 800f74e:	db05      	blt.n	800f75c <__hi0bits+0x38>
 800f750:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f754:	f103 0301 	add.w	r3, r3, #1
 800f758:	bf08      	it	eq
 800f75a:	2320      	moveq	r3, #32
 800f75c:	4618      	mov	r0, r3
 800f75e:	4770      	bx	lr
 800f760:	2300      	movs	r3, #0
 800f762:	e7e4      	b.n	800f72e <__hi0bits+0xa>

0800f764 <__lo0bits>:
 800f764:	6803      	ldr	r3, [r0, #0]
 800f766:	f013 0207 	ands.w	r2, r3, #7
 800f76a:	d00c      	beq.n	800f786 <__lo0bits+0x22>
 800f76c:	07d9      	lsls	r1, r3, #31
 800f76e:	d422      	bmi.n	800f7b6 <__lo0bits+0x52>
 800f770:	079a      	lsls	r2, r3, #30
 800f772:	bf49      	itett	mi
 800f774:	085b      	lsrmi	r3, r3, #1
 800f776:	089b      	lsrpl	r3, r3, #2
 800f778:	6003      	strmi	r3, [r0, #0]
 800f77a:	2201      	movmi	r2, #1
 800f77c:	bf5c      	itt	pl
 800f77e:	6003      	strpl	r3, [r0, #0]
 800f780:	2202      	movpl	r2, #2
 800f782:	4610      	mov	r0, r2
 800f784:	4770      	bx	lr
 800f786:	b299      	uxth	r1, r3
 800f788:	b909      	cbnz	r1, 800f78e <__lo0bits+0x2a>
 800f78a:	0c1b      	lsrs	r3, r3, #16
 800f78c:	2210      	movs	r2, #16
 800f78e:	b2d9      	uxtb	r1, r3
 800f790:	b909      	cbnz	r1, 800f796 <__lo0bits+0x32>
 800f792:	3208      	adds	r2, #8
 800f794:	0a1b      	lsrs	r3, r3, #8
 800f796:	0719      	lsls	r1, r3, #28
 800f798:	bf04      	itt	eq
 800f79a:	091b      	lsreq	r3, r3, #4
 800f79c:	3204      	addeq	r2, #4
 800f79e:	0799      	lsls	r1, r3, #30
 800f7a0:	bf04      	itt	eq
 800f7a2:	089b      	lsreq	r3, r3, #2
 800f7a4:	3202      	addeq	r2, #2
 800f7a6:	07d9      	lsls	r1, r3, #31
 800f7a8:	d403      	bmi.n	800f7b2 <__lo0bits+0x4e>
 800f7aa:	085b      	lsrs	r3, r3, #1
 800f7ac:	f102 0201 	add.w	r2, r2, #1
 800f7b0:	d003      	beq.n	800f7ba <__lo0bits+0x56>
 800f7b2:	6003      	str	r3, [r0, #0]
 800f7b4:	e7e5      	b.n	800f782 <__lo0bits+0x1e>
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	e7e3      	b.n	800f782 <__lo0bits+0x1e>
 800f7ba:	2220      	movs	r2, #32
 800f7bc:	e7e1      	b.n	800f782 <__lo0bits+0x1e>
	...

0800f7c0 <__i2b>:
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	460c      	mov	r4, r1
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	f7ff ff05 	bl	800f5d4 <_Balloc>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	b928      	cbnz	r0, 800f7da <__i2b+0x1a>
 800f7ce:	4b05      	ldr	r3, [pc, #20]	; (800f7e4 <__i2b+0x24>)
 800f7d0:	4805      	ldr	r0, [pc, #20]	; (800f7e8 <__i2b+0x28>)
 800f7d2:	f240 1145 	movw	r1, #325	; 0x145
 800f7d6:	f7fe f973 	bl	800dac0 <__assert_func>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	6144      	str	r4, [r0, #20]
 800f7de:	6103      	str	r3, [r0, #16]
 800f7e0:	bd10      	pop	{r4, pc}
 800f7e2:	bf00      	nop
 800f7e4:	080154b7 	.word	0x080154b7
 800f7e8:	080154f4 	.word	0x080154f4

0800f7ec <__multiply>:
 800f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f0:	4691      	mov	r9, r2
 800f7f2:	690a      	ldr	r2, [r1, #16]
 800f7f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	bfb8      	it	lt
 800f7fc:	460b      	movlt	r3, r1
 800f7fe:	460c      	mov	r4, r1
 800f800:	bfbc      	itt	lt
 800f802:	464c      	movlt	r4, r9
 800f804:	4699      	movlt	r9, r3
 800f806:	6927      	ldr	r7, [r4, #16]
 800f808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f80c:	68a3      	ldr	r3, [r4, #8]
 800f80e:	6861      	ldr	r1, [r4, #4]
 800f810:	eb07 060a 	add.w	r6, r7, sl
 800f814:	42b3      	cmp	r3, r6
 800f816:	b085      	sub	sp, #20
 800f818:	bfb8      	it	lt
 800f81a:	3101      	addlt	r1, #1
 800f81c:	f7ff feda 	bl	800f5d4 <_Balloc>
 800f820:	b930      	cbnz	r0, 800f830 <__multiply+0x44>
 800f822:	4602      	mov	r2, r0
 800f824:	4b44      	ldr	r3, [pc, #272]	; (800f938 <__multiply+0x14c>)
 800f826:	4845      	ldr	r0, [pc, #276]	; (800f93c <__multiply+0x150>)
 800f828:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f82c:	f7fe f948 	bl	800dac0 <__assert_func>
 800f830:	f100 0514 	add.w	r5, r0, #20
 800f834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f838:	462b      	mov	r3, r5
 800f83a:	2200      	movs	r2, #0
 800f83c:	4543      	cmp	r3, r8
 800f83e:	d321      	bcc.n	800f884 <__multiply+0x98>
 800f840:	f104 0314 	add.w	r3, r4, #20
 800f844:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f848:	f109 0314 	add.w	r3, r9, #20
 800f84c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f850:	9202      	str	r2, [sp, #8]
 800f852:	1b3a      	subs	r2, r7, r4
 800f854:	3a15      	subs	r2, #21
 800f856:	f022 0203 	bic.w	r2, r2, #3
 800f85a:	3204      	adds	r2, #4
 800f85c:	f104 0115 	add.w	r1, r4, #21
 800f860:	428f      	cmp	r7, r1
 800f862:	bf38      	it	cc
 800f864:	2204      	movcc	r2, #4
 800f866:	9201      	str	r2, [sp, #4]
 800f868:	9a02      	ldr	r2, [sp, #8]
 800f86a:	9303      	str	r3, [sp, #12]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d80c      	bhi.n	800f88a <__multiply+0x9e>
 800f870:	2e00      	cmp	r6, #0
 800f872:	dd03      	ble.n	800f87c <__multiply+0x90>
 800f874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d05b      	beq.n	800f934 <__multiply+0x148>
 800f87c:	6106      	str	r6, [r0, #16]
 800f87e:	b005      	add	sp, #20
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	f843 2b04 	str.w	r2, [r3], #4
 800f888:	e7d8      	b.n	800f83c <__multiply+0x50>
 800f88a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f88e:	f1ba 0f00 	cmp.w	sl, #0
 800f892:	d024      	beq.n	800f8de <__multiply+0xf2>
 800f894:	f104 0e14 	add.w	lr, r4, #20
 800f898:	46a9      	mov	r9, r5
 800f89a:	f04f 0c00 	mov.w	ip, #0
 800f89e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f8a2:	f8d9 1000 	ldr.w	r1, [r9]
 800f8a6:	fa1f fb82 	uxth.w	fp, r2
 800f8aa:	b289      	uxth	r1, r1
 800f8ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800f8b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f8b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f8b8:	4461      	add	r1, ip
 800f8ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8be:	fb0a c20b 	mla	r2, sl, fp, ip
 800f8c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8c6:	b289      	uxth	r1, r1
 800f8c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8cc:	4577      	cmp	r7, lr
 800f8ce:	f849 1b04 	str.w	r1, [r9], #4
 800f8d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f8d6:	d8e2      	bhi.n	800f89e <__multiply+0xb2>
 800f8d8:	9a01      	ldr	r2, [sp, #4]
 800f8da:	f845 c002 	str.w	ip, [r5, r2]
 800f8de:	9a03      	ldr	r2, [sp, #12]
 800f8e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	f1b9 0f00 	cmp.w	r9, #0
 800f8ea:	d021      	beq.n	800f930 <__multiply+0x144>
 800f8ec:	6829      	ldr	r1, [r5, #0]
 800f8ee:	f104 0c14 	add.w	ip, r4, #20
 800f8f2:	46ae      	mov	lr, r5
 800f8f4:	f04f 0a00 	mov.w	sl, #0
 800f8f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f8fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f900:	fb09 220b 	mla	r2, r9, fp, r2
 800f904:	4452      	add	r2, sl
 800f906:	b289      	uxth	r1, r1
 800f908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f90c:	f84e 1b04 	str.w	r1, [lr], #4
 800f910:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f918:	f8be 1000 	ldrh.w	r1, [lr]
 800f91c:	fb09 110a 	mla	r1, r9, sl, r1
 800f920:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f924:	4567      	cmp	r7, ip
 800f926:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f92a:	d8e5      	bhi.n	800f8f8 <__multiply+0x10c>
 800f92c:	9a01      	ldr	r2, [sp, #4]
 800f92e:	50a9      	str	r1, [r5, r2]
 800f930:	3504      	adds	r5, #4
 800f932:	e799      	b.n	800f868 <__multiply+0x7c>
 800f934:	3e01      	subs	r6, #1
 800f936:	e79b      	b.n	800f870 <__multiply+0x84>
 800f938:	080154b7 	.word	0x080154b7
 800f93c:	080154f4 	.word	0x080154f4

0800f940 <__pow5mult>:
 800f940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f944:	4615      	mov	r5, r2
 800f946:	f012 0203 	ands.w	r2, r2, #3
 800f94a:	4606      	mov	r6, r0
 800f94c:	460f      	mov	r7, r1
 800f94e:	d007      	beq.n	800f960 <__pow5mult+0x20>
 800f950:	4c25      	ldr	r4, [pc, #148]	; (800f9e8 <__pow5mult+0xa8>)
 800f952:	3a01      	subs	r2, #1
 800f954:	2300      	movs	r3, #0
 800f956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f95a:	f7ff fe9d 	bl	800f698 <__multadd>
 800f95e:	4607      	mov	r7, r0
 800f960:	10ad      	asrs	r5, r5, #2
 800f962:	d03d      	beq.n	800f9e0 <__pow5mult+0xa0>
 800f964:	69f4      	ldr	r4, [r6, #28]
 800f966:	b97c      	cbnz	r4, 800f988 <__pow5mult+0x48>
 800f968:	2010      	movs	r0, #16
 800f96a:	f7fd fb6f 	bl	800d04c <malloc>
 800f96e:	4602      	mov	r2, r0
 800f970:	61f0      	str	r0, [r6, #28]
 800f972:	b928      	cbnz	r0, 800f980 <__pow5mult+0x40>
 800f974:	4b1d      	ldr	r3, [pc, #116]	; (800f9ec <__pow5mult+0xac>)
 800f976:	481e      	ldr	r0, [pc, #120]	; (800f9f0 <__pow5mult+0xb0>)
 800f978:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f97c:	f7fe f8a0 	bl	800dac0 <__assert_func>
 800f980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f984:	6004      	str	r4, [r0, #0]
 800f986:	60c4      	str	r4, [r0, #12]
 800f988:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f98c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f990:	b94c      	cbnz	r4, 800f9a6 <__pow5mult+0x66>
 800f992:	f240 2171 	movw	r1, #625	; 0x271
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ff12 	bl	800f7c0 <__i2b>
 800f99c:	2300      	movs	r3, #0
 800f99e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	f04f 0900 	mov.w	r9, #0
 800f9aa:	07eb      	lsls	r3, r5, #31
 800f9ac:	d50a      	bpl.n	800f9c4 <__pow5mult+0x84>
 800f9ae:	4639      	mov	r1, r7
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	f7ff ff1a 	bl	800f7ec <__multiply>
 800f9b8:	4639      	mov	r1, r7
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	4630      	mov	r0, r6
 800f9be:	f7ff fe49 	bl	800f654 <_Bfree>
 800f9c2:	4647      	mov	r7, r8
 800f9c4:	106d      	asrs	r5, r5, #1
 800f9c6:	d00b      	beq.n	800f9e0 <__pow5mult+0xa0>
 800f9c8:	6820      	ldr	r0, [r4, #0]
 800f9ca:	b938      	cbnz	r0, 800f9dc <__pow5mult+0x9c>
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7ff ff0b 	bl	800f7ec <__multiply>
 800f9d6:	6020      	str	r0, [r4, #0]
 800f9d8:	f8c0 9000 	str.w	r9, [r0]
 800f9dc:	4604      	mov	r4, r0
 800f9de:	e7e4      	b.n	800f9aa <__pow5mult+0x6a>
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9e6:	bf00      	nop
 800f9e8:	08015640 	.word	0x08015640
 800f9ec:	08015448 	.word	0x08015448
 800f9f0:	080154f4 	.word	0x080154f4

0800f9f4 <__lshift>:
 800f9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f8:	460c      	mov	r4, r1
 800f9fa:	6849      	ldr	r1, [r1, #4]
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	4607      	mov	r7, r0
 800fa06:	4691      	mov	r9, r2
 800fa08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa0c:	f108 0601 	add.w	r6, r8, #1
 800fa10:	42b3      	cmp	r3, r6
 800fa12:	db0b      	blt.n	800fa2c <__lshift+0x38>
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff fddd 	bl	800f5d4 <_Balloc>
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	b948      	cbnz	r0, 800fa32 <__lshift+0x3e>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	4b28      	ldr	r3, [pc, #160]	; (800fac4 <__lshift+0xd0>)
 800fa22:	4829      	ldr	r0, [pc, #164]	; (800fac8 <__lshift+0xd4>)
 800fa24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa28:	f7fe f84a 	bl	800dac0 <__assert_func>
 800fa2c:	3101      	adds	r1, #1
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	e7ee      	b.n	800fa10 <__lshift+0x1c>
 800fa32:	2300      	movs	r3, #0
 800fa34:	f100 0114 	add.w	r1, r0, #20
 800fa38:	f100 0210 	add.w	r2, r0, #16
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	4553      	cmp	r3, sl
 800fa40:	db33      	blt.n	800faaa <__lshift+0xb6>
 800fa42:	6920      	ldr	r0, [r4, #16]
 800fa44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa48:	f104 0314 	add.w	r3, r4, #20
 800fa4c:	f019 091f 	ands.w	r9, r9, #31
 800fa50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa58:	d02b      	beq.n	800fab2 <__lshift+0xbe>
 800fa5a:	f1c9 0e20 	rsb	lr, r9, #32
 800fa5e:	468a      	mov	sl, r1
 800fa60:	2200      	movs	r2, #0
 800fa62:	6818      	ldr	r0, [r3, #0]
 800fa64:	fa00 f009 	lsl.w	r0, r0, r9
 800fa68:	4310      	orrs	r0, r2
 800fa6a:	f84a 0b04 	str.w	r0, [sl], #4
 800fa6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa72:	459c      	cmp	ip, r3
 800fa74:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa78:	d8f3      	bhi.n	800fa62 <__lshift+0x6e>
 800fa7a:	ebac 0304 	sub.w	r3, ip, r4
 800fa7e:	3b15      	subs	r3, #21
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	3304      	adds	r3, #4
 800fa86:	f104 0015 	add.w	r0, r4, #21
 800fa8a:	4584      	cmp	ip, r0
 800fa8c:	bf38      	it	cc
 800fa8e:	2304      	movcc	r3, #4
 800fa90:	50ca      	str	r2, [r1, r3]
 800fa92:	b10a      	cbz	r2, 800fa98 <__lshift+0xa4>
 800fa94:	f108 0602 	add.w	r6, r8, #2
 800fa98:	3e01      	subs	r6, #1
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	612e      	str	r6, [r5, #16]
 800fa9e:	4621      	mov	r1, r4
 800faa0:	f7ff fdd8 	bl	800f654 <_Bfree>
 800faa4:	4628      	mov	r0, r5
 800faa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800faae:	3301      	adds	r3, #1
 800fab0:	e7c5      	b.n	800fa3e <__lshift+0x4a>
 800fab2:	3904      	subs	r1, #4
 800fab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fab8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fabc:	459c      	cmp	ip, r3
 800fabe:	d8f9      	bhi.n	800fab4 <__lshift+0xc0>
 800fac0:	e7ea      	b.n	800fa98 <__lshift+0xa4>
 800fac2:	bf00      	nop
 800fac4:	080154b7 	.word	0x080154b7
 800fac8:	080154f4 	.word	0x080154f4

0800facc <__mcmp>:
 800facc:	b530      	push	{r4, r5, lr}
 800face:	6902      	ldr	r2, [r0, #16]
 800fad0:	690c      	ldr	r4, [r1, #16]
 800fad2:	1b12      	subs	r2, r2, r4
 800fad4:	d10e      	bne.n	800faf4 <__mcmp+0x28>
 800fad6:	f100 0314 	add.w	r3, r0, #20
 800fada:	3114      	adds	r1, #20
 800fadc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fae4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fae8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800faec:	42a5      	cmp	r5, r4
 800faee:	d003      	beq.n	800faf8 <__mcmp+0x2c>
 800faf0:	d305      	bcc.n	800fafe <__mcmp+0x32>
 800faf2:	2201      	movs	r2, #1
 800faf4:	4610      	mov	r0, r2
 800faf6:	bd30      	pop	{r4, r5, pc}
 800faf8:	4283      	cmp	r3, r0
 800fafa:	d3f3      	bcc.n	800fae4 <__mcmp+0x18>
 800fafc:	e7fa      	b.n	800faf4 <__mcmp+0x28>
 800fafe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb02:	e7f7      	b.n	800faf4 <__mcmp+0x28>

0800fb04 <__mdiff>:
 800fb04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb08:	460c      	mov	r4, r1
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4690      	mov	r8, r2
 800fb12:	f7ff ffdb 	bl	800facc <__mcmp>
 800fb16:	1e05      	subs	r5, r0, #0
 800fb18:	d110      	bne.n	800fb3c <__mdiff+0x38>
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f7ff fd59 	bl	800f5d4 <_Balloc>
 800fb22:	b930      	cbnz	r0, 800fb32 <__mdiff+0x2e>
 800fb24:	4b3a      	ldr	r3, [pc, #232]	; (800fc10 <__mdiff+0x10c>)
 800fb26:	4602      	mov	r2, r0
 800fb28:	f240 2137 	movw	r1, #567	; 0x237
 800fb2c:	4839      	ldr	r0, [pc, #228]	; (800fc14 <__mdiff+0x110>)
 800fb2e:	f7fd ffc7 	bl	800dac0 <__assert_func>
 800fb32:	2301      	movs	r3, #1
 800fb34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3c:	bfa4      	itt	ge
 800fb3e:	4643      	movge	r3, r8
 800fb40:	46a0      	movge	r8, r4
 800fb42:	4630      	mov	r0, r6
 800fb44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb48:	bfa6      	itte	ge
 800fb4a:	461c      	movge	r4, r3
 800fb4c:	2500      	movge	r5, #0
 800fb4e:	2501      	movlt	r5, #1
 800fb50:	f7ff fd40 	bl	800f5d4 <_Balloc>
 800fb54:	b920      	cbnz	r0, 800fb60 <__mdiff+0x5c>
 800fb56:	4b2e      	ldr	r3, [pc, #184]	; (800fc10 <__mdiff+0x10c>)
 800fb58:	4602      	mov	r2, r0
 800fb5a:	f240 2145 	movw	r1, #581	; 0x245
 800fb5e:	e7e5      	b.n	800fb2c <__mdiff+0x28>
 800fb60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb64:	6926      	ldr	r6, [r4, #16]
 800fb66:	60c5      	str	r5, [r0, #12]
 800fb68:	f104 0914 	add.w	r9, r4, #20
 800fb6c:	f108 0514 	add.w	r5, r8, #20
 800fb70:	f100 0e14 	add.w	lr, r0, #20
 800fb74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb7c:	f108 0210 	add.w	r2, r8, #16
 800fb80:	46f2      	mov	sl, lr
 800fb82:	2100      	movs	r1, #0
 800fb84:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb8c:	fa11 f88b 	uxtah	r8, r1, fp
 800fb90:	b299      	uxth	r1, r3
 800fb92:	0c1b      	lsrs	r3, r3, #16
 800fb94:	eba8 0801 	sub.w	r8, r8, r1
 800fb98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fba0:	fa1f f888 	uxth.w	r8, r8
 800fba4:	1419      	asrs	r1, r3, #16
 800fba6:	454e      	cmp	r6, r9
 800fba8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fbac:	f84a 3b04 	str.w	r3, [sl], #4
 800fbb0:	d8e8      	bhi.n	800fb84 <__mdiff+0x80>
 800fbb2:	1b33      	subs	r3, r6, r4
 800fbb4:	3b15      	subs	r3, #21
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	3304      	adds	r3, #4
 800fbbc:	3415      	adds	r4, #21
 800fbbe:	42a6      	cmp	r6, r4
 800fbc0:	bf38      	it	cc
 800fbc2:	2304      	movcc	r3, #4
 800fbc4:	441d      	add	r5, r3
 800fbc6:	4473      	add	r3, lr
 800fbc8:	469e      	mov	lr, r3
 800fbca:	462e      	mov	r6, r5
 800fbcc:	4566      	cmp	r6, ip
 800fbce:	d30e      	bcc.n	800fbee <__mdiff+0xea>
 800fbd0:	f10c 0203 	add.w	r2, ip, #3
 800fbd4:	1b52      	subs	r2, r2, r5
 800fbd6:	f022 0203 	bic.w	r2, r2, #3
 800fbda:	3d03      	subs	r5, #3
 800fbdc:	45ac      	cmp	ip, r5
 800fbde:	bf38      	it	cc
 800fbe0:	2200      	movcc	r2, #0
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fbe8:	b17a      	cbz	r2, 800fc0a <__mdiff+0x106>
 800fbea:	6107      	str	r7, [r0, #16]
 800fbec:	e7a4      	b.n	800fb38 <__mdiff+0x34>
 800fbee:	f856 8b04 	ldr.w	r8, [r6], #4
 800fbf2:	fa11 f288 	uxtah	r2, r1, r8
 800fbf6:	1414      	asrs	r4, r2, #16
 800fbf8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbfc:	b292      	uxth	r2, r2
 800fbfe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc02:	f84e 2b04 	str.w	r2, [lr], #4
 800fc06:	1421      	asrs	r1, r4, #16
 800fc08:	e7e0      	b.n	800fbcc <__mdiff+0xc8>
 800fc0a:	3f01      	subs	r7, #1
 800fc0c:	e7ea      	b.n	800fbe4 <__mdiff+0xe0>
 800fc0e:	bf00      	nop
 800fc10:	080154b7 	.word	0x080154b7
 800fc14:	080154f4 	.word	0x080154f4

0800fc18 <__d2b>:
 800fc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc1c:	460f      	mov	r7, r1
 800fc1e:	2101      	movs	r1, #1
 800fc20:	ec59 8b10 	vmov	r8, r9, d0
 800fc24:	4616      	mov	r6, r2
 800fc26:	f7ff fcd5 	bl	800f5d4 <_Balloc>
 800fc2a:	4604      	mov	r4, r0
 800fc2c:	b930      	cbnz	r0, 800fc3c <__d2b+0x24>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	4b24      	ldr	r3, [pc, #144]	; (800fcc4 <__d2b+0xac>)
 800fc32:	4825      	ldr	r0, [pc, #148]	; (800fcc8 <__d2b+0xb0>)
 800fc34:	f240 310f 	movw	r1, #783	; 0x30f
 800fc38:	f7fd ff42 	bl	800dac0 <__assert_func>
 800fc3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc44:	bb2d      	cbnz	r5, 800fc92 <__d2b+0x7a>
 800fc46:	9301      	str	r3, [sp, #4]
 800fc48:	f1b8 0300 	subs.w	r3, r8, #0
 800fc4c:	d026      	beq.n	800fc9c <__d2b+0x84>
 800fc4e:	4668      	mov	r0, sp
 800fc50:	9300      	str	r3, [sp, #0]
 800fc52:	f7ff fd87 	bl	800f764 <__lo0bits>
 800fc56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc5a:	b1e8      	cbz	r0, 800fc98 <__d2b+0x80>
 800fc5c:	f1c0 0320 	rsb	r3, r0, #32
 800fc60:	fa02 f303 	lsl.w	r3, r2, r3
 800fc64:	430b      	orrs	r3, r1
 800fc66:	40c2      	lsrs	r2, r0
 800fc68:	6163      	str	r3, [r4, #20]
 800fc6a:	9201      	str	r2, [sp, #4]
 800fc6c:	9b01      	ldr	r3, [sp, #4]
 800fc6e:	61a3      	str	r3, [r4, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bf14      	ite	ne
 800fc74:	2202      	movne	r2, #2
 800fc76:	2201      	moveq	r2, #1
 800fc78:	6122      	str	r2, [r4, #16]
 800fc7a:	b1bd      	cbz	r5, 800fcac <__d2b+0x94>
 800fc7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc80:	4405      	add	r5, r0
 800fc82:	603d      	str	r5, [r7, #0]
 800fc84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc88:	6030      	str	r0, [r6, #0]
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	b003      	add	sp, #12
 800fc8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc96:	e7d6      	b.n	800fc46 <__d2b+0x2e>
 800fc98:	6161      	str	r1, [r4, #20]
 800fc9a:	e7e7      	b.n	800fc6c <__d2b+0x54>
 800fc9c:	a801      	add	r0, sp, #4
 800fc9e:	f7ff fd61 	bl	800f764 <__lo0bits>
 800fca2:	9b01      	ldr	r3, [sp, #4]
 800fca4:	6163      	str	r3, [r4, #20]
 800fca6:	3020      	adds	r0, #32
 800fca8:	2201      	movs	r2, #1
 800fcaa:	e7e5      	b.n	800fc78 <__d2b+0x60>
 800fcac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fcb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcb4:	6038      	str	r0, [r7, #0]
 800fcb6:	6918      	ldr	r0, [r3, #16]
 800fcb8:	f7ff fd34 	bl	800f724 <__hi0bits>
 800fcbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fcc0:	e7e2      	b.n	800fc88 <__d2b+0x70>
 800fcc2:	bf00      	nop
 800fcc4:	080154b7 	.word	0x080154b7
 800fcc8:	080154f4 	.word	0x080154f4

0800fccc <fiprintf>:
 800fccc:	b40e      	push	{r1, r2, r3}
 800fcce:	b503      	push	{r0, r1, lr}
 800fcd0:	4601      	mov	r1, r0
 800fcd2:	ab03      	add	r3, sp, #12
 800fcd4:	4805      	ldr	r0, [pc, #20]	; (800fcec <fiprintf+0x20>)
 800fcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	f7ff f929 	bl	800ef34 <_vfiprintf_r>
 800fce2:	b002      	add	sp, #8
 800fce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fce8:	b003      	add	sp, #12
 800fcea:	4770      	bx	lr
 800fcec:	2000009c 	.word	0x2000009c

0800fcf0 <__submore>:
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fcf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcfc:	4299      	cmp	r1, r3
 800fcfe:	d11d      	bne.n	800fd3c <__submore+0x4c>
 800fd00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fd04:	f7fd f9ca 	bl	800d09c <_malloc_r>
 800fd08:	b918      	cbnz	r0, 800fd12 <__submore+0x22>
 800fd0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd16:	63a3      	str	r3, [r4, #56]	; 0x38
 800fd18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fd1c:	6360      	str	r0, [r4, #52]	; 0x34
 800fd1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fd22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fd26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fd2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fd2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800fd32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800fd36:	6020      	str	r0, [r4, #0]
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e7e8      	b.n	800fd0e <__submore+0x1e>
 800fd3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800fd3e:	0077      	lsls	r7, r6, #1
 800fd40:	463a      	mov	r2, r7
 800fd42:	f000 f80f 	bl	800fd64 <_realloc_r>
 800fd46:	4605      	mov	r5, r0
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d0de      	beq.n	800fd0a <__submore+0x1a>
 800fd4c:	eb00 0806 	add.w	r8, r0, r6
 800fd50:	4601      	mov	r1, r0
 800fd52:	4632      	mov	r2, r6
 800fd54:	4640      	mov	r0, r8
 800fd56:	f7fd fea4 	bl	800daa2 <memcpy>
 800fd5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800fd5e:	f8c4 8000 	str.w	r8, [r4]
 800fd62:	e7e9      	b.n	800fd38 <__submore+0x48>

0800fd64 <_realloc_r>:
 800fd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd68:	4680      	mov	r8, r0
 800fd6a:	4614      	mov	r4, r2
 800fd6c:	460e      	mov	r6, r1
 800fd6e:	b921      	cbnz	r1, 800fd7a <_realloc_r+0x16>
 800fd70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd74:	4611      	mov	r1, r2
 800fd76:	f7fd b991 	b.w	800d09c <_malloc_r>
 800fd7a:	b92a      	cbnz	r2, 800fd88 <_realloc_r+0x24>
 800fd7c:	f7fe fd3a 	bl	800e7f4 <_free_r>
 800fd80:	4625      	mov	r5, r4
 800fd82:	4628      	mov	r0, r5
 800fd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd88:	f000 f9f3 	bl	8010172 <_malloc_usable_size_r>
 800fd8c:	4284      	cmp	r4, r0
 800fd8e:	4607      	mov	r7, r0
 800fd90:	d802      	bhi.n	800fd98 <_realloc_r+0x34>
 800fd92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd96:	d812      	bhi.n	800fdbe <_realloc_r+0x5a>
 800fd98:	4621      	mov	r1, r4
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	f7fd f97e 	bl	800d09c <_malloc_r>
 800fda0:	4605      	mov	r5, r0
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d0ed      	beq.n	800fd82 <_realloc_r+0x1e>
 800fda6:	42bc      	cmp	r4, r7
 800fda8:	4622      	mov	r2, r4
 800fdaa:	4631      	mov	r1, r6
 800fdac:	bf28      	it	cs
 800fdae:	463a      	movcs	r2, r7
 800fdb0:	f7fd fe77 	bl	800daa2 <memcpy>
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	f7fe fd1c 	bl	800e7f4 <_free_r>
 800fdbc:	e7e1      	b.n	800fd82 <_realloc_r+0x1e>
 800fdbe:	4635      	mov	r5, r6
 800fdc0:	e7df      	b.n	800fd82 <_realloc_r+0x1e>
	...

0800fdc4 <_strtoul_l.constprop.0>:
 800fdc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdc8:	4f36      	ldr	r7, [pc, #216]	; (800fea4 <_strtoul_l.constprop.0+0xe0>)
 800fdca:	4686      	mov	lr, r0
 800fdcc:	460d      	mov	r5, r1
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdd4:	5d3e      	ldrb	r6, [r7, r4]
 800fdd6:	f016 0608 	ands.w	r6, r6, #8
 800fdda:	d1f8      	bne.n	800fdce <_strtoul_l.constprop.0+0xa>
 800fddc:	2c2d      	cmp	r4, #45	; 0x2d
 800fdde:	d130      	bne.n	800fe42 <_strtoul_l.constprop.0+0x7e>
 800fde0:	782c      	ldrb	r4, [r5, #0]
 800fde2:	2601      	movs	r6, #1
 800fde4:	1c85      	adds	r5, r0, #2
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d057      	beq.n	800fe9a <_strtoul_l.constprop.0+0xd6>
 800fdea:	2b10      	cmp	r3, #16
 800fdec:	d109      	bne.n	800fe02 <_strtoul_l.constprop.0+0x3e>
 800fdee:	2c30      	cmp	r4, #48	; 0x30
 800fdf0:	d107      	bne.n	800fe02 <_strtoul_l.constprop.0+0x3e>
 800fdf2:	7828      	ldrb	r0, [r5, #0]
 800fdf4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fdf8:	2858      	cmp	r0, #88	; 0x58
 800fdfa:	d149      	bne.n	800fe90 <_strtoul_l.constprop.0+0xcc>
 800fdfc:	786c      	ldrb	r4, [r5, #1]
 800fdfe:	2310      	movs	r3, #16
 800fe00:	3502      	adds	r5, #2
 800fe02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800fe06:	2700      	movs	r7, #0
 800fe08:	fbb8 f8f3 	udiv	r8, r8, r3
 800fe0c:	fb03 f908 	mul.w	r9, r3, r8
 800fe10:	ea6f 0909 	mvn.w	r9, r9
 800fe14:	4638      	mov	r0, r7
 800fe16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fe1a:	f1bc 0f09 	cmp.w	ip, #9
 800fe1e:	d815      	bhi.n	800fe4c <_strtoul_l.constprop.0+0x88>
 800fe20:	4664      	mov	r4, ip
 800fe22:	42a3      	cmp	r3, r4
 800fe24:	dd23      	ble.n	800fe6e <_strtoul_l.constprop.0+0xaa>
 800fe26:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800fe2a:	d007      	beq.n	800fe3c <_strtoul_l.constprop.0+0x78>
 800fe2c:	4580      	cmp	r8, r0
 800fe2e:	d31b      	bcc.n	800fe68 <_strtoul_l.constprop.0+0xa4>
 800fe30:	d101      	bne.n	800fe36 <_strtoul_l.constprop.0+0x72>
 800fe32:	45a1      	cmp	r9, r4
 800fe34:	db18      	blt.n	800fe68 <_strtoul_l.constprop.0+0xa4>
 800fe36:	fb00 4003 	mla	r0, r0, r3, r4
 800fe3a:	2701      	movs	r7, #1
 800fe3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe40:	e7e9      	b.n	800fe16 <_strtoul_l.constprop.0+0x52>
 800fe42:	2c2b      	cmp	r4, #43	; 0x2b
 800fe44:	bf04      	itt	eq
 800fe46:	782c      	ldrbeq	r4, [r5, #0]
 800fe48:	1c85      	addeq	r5, r0, #2
 800fe4a:	e7cc      	b.n	800fde6 <_strtoul_l.constprop.0+0x22>
 800fe4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fe50:	f1bc 0f19 	cmp.w	ip, #25
 800fe54:	d801      	bhi.n	800fe5a <_strtoul_l.constprop.0+0x96>
 800fe56:	3c37      	subs	r4, #55	; 0x37
 800fe58:	e7e3      	b.n	800fe22 <_strtoul_l.constprop.0+0x5e>
 800fe5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe5e:	f1bc 0f19 	cmp.w	ip, #25
 800fe62:	d804      	bhi.n	800fe6e <_strtoul_l.constprop.0+0xaa>
 800fe64:	3c57      	subs	r4, #87	; 0x57
 800fe66:	e7dc      	b.n	800fe22 <_strtoul_l.constprop.0+0x5e>
 800fe68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fe6c:	e7e6      	b.n	800fe3c <_strtoul_l.constprop.0+0x78>
 800fe6e:	1c7b      	adds	r3, r7, #1
 800fe70:	d106      	bne.n	800fe80 <_strtoul_l.constprop.0+0xbc>
 800fe72:	2322      	movs	r3, #34	; 0x22
 800fe74:	f8ce 3000 	str.w	r3, [lr]
 800fe78:	4638      	mov	r0, r7
 800fe7a:	b932      	cbnz	r2, 800fe8a <_strtoul_l.constprop.0+0xc6>
 800fe7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe80:	b106      	cbz	r6, 800fe84 <_strtoul_l.constprop.0+0xc0>
 800fe82:	4240      	negs	r0, r0
 800fe84:	2a00      	cmp	r2, #0
 800fe86:	d0f9      	beq.n	800fe7c <_strtoul_l.constprop.0+0xb8>
 800fe88:	b107      	cbz	r7, 800fe8c <_strtoul_l.constprop.0+0xc8>
 800fe8a:	1e69      	subs	r1, r5, #1
 800fe8c:	6011      	str	r1, [r2, #0]
 800fe8e:	e7f5      	b.n	800fe7c <_strtoul_l.constprop.0+0xb8>
 800fe90:	2430      	movs	r4, #48	; 0x30
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1b5      	bne.n	800fe02 <_strtoul_l.constprop.0+0x3e>
 800fe96:	2308      	movs	r3, #8
 800fe98:	e7b3      	b.n	800fe02 <_strtoul_l.constprop.0+0x3e>
 800fe9a:	2c30      	cmp	r4, #48	; 0x30
 800fe9c:	d0a9      	beq.n	800fdf2 <_strtoul_l.constprop.0+0x2e>
 800fe9e:	230a      	movs	r3, #10
 800fea0:	e7af      	b.n	800fe02 <_strtoul_l.constprop.0+0x3e>
 800fea2:	bf00      	nop
 800fea4:	080152ff 	.word	0x080152ff

0800fea8 <_strtoul_r>:
 800fea8:	f7ff bf8c 	b.w	800fdc4 <_strtoul_l.constprop.0>

0800feac <__swbuf_r>:
 800feac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feae:	460e      	mov	r6, r1
 800feb0:	4614      	mov	r4, r2
 800feb2:	4605      	mov	r5, r0
 800feb4:	b118      	cbz	r0, 800febe <__swbuf_r+0x12>
 800feb6:	6a03      	ldr	r3, [r0, #32]
 800feb8:	b90b      	cbnz	r3, 800febe <__swbuf_r+0x12>
 800feba:	f7fd fc5d 	bl	800d778 <__sinit>
 800febe:	69a3      	ldr	r3, [r4, #24]
 800fec0:	60a3      	str	r3, [r4, #8]
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	071a      	lsls	r2, r3, #28
 800fec6:	d525      	bpl.n	800ff14 <__swbuf_r+0x68>
 800fec8:	6923      	ldr	r3, [r4, #16]
 800feca:	b31b      	cbz	r3, 800ff14 <__swbuf_r+0x68>
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	6922      	ldr	r2, [r4, #16]
 800fed0:	1a98      	subs	r0, r3, r2
 800fed2:	6963      	ldr	r3, [r4, #20]
 800fed4:	b2f6      	uxtb	r6, r6
 800fed6:	4283      	cmp	r3, r0
 800fed8:	4637      	mov	r7, r6
 800feda:	dc04      	bgt.n	800fee6 <__swbuf_r+0x3a>
 800fedc:	4621      	mov	r1, r4
 800fede:	4628      	mov	r0, r5
 800fee0:	f7ff fb50 	bl	800f584 <_fflush_r>
 800fee4:	b9e0      	cbnz	r0, 800ff20 <__swbuf_r+0x74>
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	3b01      	subs	r3, #1
 800feea:	60a3      	str	r3, [r4, #8]
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	6022      	str	r2, [r4, #0]
 800fef2:	701e      	strb	r6, [r3, #0]
 800fef4:	6962      	ldr	r2, [r4, #20]
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d004      	beq.n	800ff06 <__swbuf_r+0x5a>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	07db      	lsls	r3, r3, #31
 800ff00:	d506      	bpl.n	800ff10 <__swbuf_r+0x64>
 800ff02:	2e0a      	cmp	r6, #10
 800ff04:	d104      	bne.n	800ff10 <__swbuf_r+0x64>
 800ff06:	4621      	mov	r1, r4
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f7ff fb3b 	bl	800f584 <_fflush_r>
 800ff0e:	b938      	cbnz	r0, 800ff20 <__swbuf_r+0x74>
 800ff10:	4638      	mov	r0, r7
 800ff12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff14:	4621      	mov	r1, r4
 800ff16:	4628      	mov	r0, r5
 800ff18:	f000 f806 	bl	800ff28 <__swsetup_r>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d0d5      	beq.n	800fecc <__swbuf_r+0x20>
 800ff20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ff24:	e7f4      	b.n	800ff10 <__swbuf_r+0x64>
	...

0800ff28 <__swsetup_r>:
 800ff28:	b538      	push	{r3, r4, r5, lr}
 800ff2a:	4b2a      	ldr	r3, [pc, #168]	; (800ffd4 <__swsetup_r+0xac>)
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	6818      	ldr	r0, [r3, #0]
 800ff30:	460c      	mov	r4, r1
 800ff32:	b118      	cbz	r0, 800ff3c <__swsetup_r+0x14>
 800ff34:	6a03      	ldr	r3, [r0, #32]
 800ff36:	b90b      	cbnz	r3, 800ff3c <__swsetup_r+0x14>
 800ff38:	f7fd fc1e 	bl	800d778 <__sinit>
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff42:	0718      	lsls	r0, r3, #28
 800ff44:	d422      	bmi.n	800ff8c <__swsetup_r+0x64>
 800ff46:	06d9      	lsls	r1, r3, #27
 800ff48:	d407      	bmi.n	800ff5a <__swsetup_r+0x32>
 800ff4a:	2309      	movs	r3, #9
 800ff4c:	602b      	str	r3, [r5, #0]
 800ff4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ff52:	81a3      	strh	r3, [r4, #12]
 800ff54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff58:	e034      	b.n	800ffc4 <__swsetup_r+0x9c>
 800ff5a:	0758      	lsls	r0, r3, #29
 800ff5c:	d512      	bpl.n	800ff84 <__swsetup_r+0x5c>
 800ff5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff60:	b141      	cbz	r1, 800ff74 <__swsetup_r+0x4c>
 800ff62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff66:	4299      	cmp	r1, r3
 800ff68:	d002      	beq.n	800ff70 <__swsetup_r+0x48>
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7fe fc42 	bl	800e7f4 <_free_r>
 800ff70:	2300      	movs	r3, #0
 800ff72:	6363      	str	r3, [r4, #52]	; 0x34
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff7a:	81a3      	strh	r3, [r4, #12]
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	6063      	str	r3, [r4, #4]
 800ff80:	6923      	ldr	r3, [r4, #16]
 800ff82:	6023      	str	r3, [r4, #0]
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f043 0308 	orr.w	r3, r3, #8
 800ff8a:	81a3      	strh	r3, [r4, #12]
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	b94b      	cbnz	r3, 800ffa4 <__swsetup_r+0x7c>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff9a:	d003      	beq.n	800ffa4 <__swsetup_r+0x7c>
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f000 f840 	bl	8010024 <__smakebuf_r>
 800ffa4:	89a0      	ldrh	r0, [r4, #12]
 800ffa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffaa:	f010 0301 	ands.w	r3, r0, #1
 800ffae:	d00a      	beq.n	800ffc6 <__swsetup_r+0x9e>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	60a3      	str	r3, [r4, #8]
 800ffb4:	6963      	ldr	r3, [r4, #20]
 800ffb6:	425b      	negs	r3, r3
 800ffb8:	61a3      	str	r3, [r4, #24]
 800ffba:	6923      	ldr	r3, [r4, #16]
 800ffbc:	b943      	cbnz	r3, 800ffd0 <__swsetup_r+0xa8>
 800ffbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ffc2:	d1c4      	bne.n	800ff4e <__swsetup_r+0x26>
 800ffc4:	bd38      	pop	{r3, r4, r5, pc}
 800ffc6:	0781      	lsls	r1, r0, #30
 800ffc8:	bf58      	it	pl
 800ffca:	6963      	ldrpl	r3, [r4, #20]
 800ffcc:	60a3      	str	r3, [r4, #8]
 800ffce:	e7f4      	b.n	800ffba <__swsetup_r+0x92>
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	e7f7      	b.n	800ffc4 <__swsetup_r+0x9c>
 800ffd4:	2000009c 	.word	0x2000009c

0800ffd8 <__swhatbuf_r>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	460c      	mov	r4, r1
 800ffdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe0:	2900      	cmp	r1, #0
 800ffe2:	b096      	sub	sp, #88	; 0x58
 800ffe4:	4615      	mov	r5, r2
 800ffe6:	461e      	mov	r6, r3
 800ffe8:	da0d      	bge.n	8010006 <__swhatbuf_r+0x2e>
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fff0:	f04f 0100 	mov.w	r1, #0
 800fff4:	bf0c      	ite	eq
 800fff6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fffa:	2340      	movne	r3, #64	; 0x40
 800fffc:	2000      	movs	r0, #0
 800fffe:	6031      	str	r1, [r6, #0]
 8010000:	602b      	str	r3, [r5, #0]
 8010002:	b016      	add	sp, #88	; 0x58
 8010004:	bd70      	pop	{r4, r5, r6, pc}
 8010006:	466a      	mov	r2, sp
 8010008:	f000 f862 	bl	80100d0 <_fstat_r>
 801000c:	2800      	cmp	r0, #0
 801000e:	dbec      	blt.n	800ffea <__swhatbuf_r+0x12>
 8010010:	9901      	ldr	r1, [sp, #4]
 8010012:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010016:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801001a:	4259      	negs	r1, r3
 801001c:	4159      	adcs	r1, r3
 801001e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010022:	e7eb      	b.n	800fffc <__swhatbuf_r+0x24>

08010024 <__smakebuf_r>:
 8010024:	898b      	ldrh	r3, [r1, #12]
 8010026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010028:	079d      	lsls	r5, r3, #30
 801002a:	4606      	mov	r6, r0
 801002c:	460c      	mov	r4, r1
 801002e:	d507      	bpl.n	8010040 <__smakebuf_r+0x1c>
 8010030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	6123      	str	r3, [r4, #16]
 8010038:	2301      	movs	r3, #1
 801003a:	6163      	str	r3, [r4, #20]
 801003c:	b002      	add	sp, #8
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	ab01      	add	r3, sp, #4
 8010042:	466a      	mov	r2, sp
 8010044:	f7ff ffc8 	bl	800ffd8 <__swhatbuf_r>
 8010048:	9900      	ldr	r1, [sp, #0]
 801004a:	4605      	mov	r5, r0
 801004c:	4630      	mov	r0, r6
 801004e:	f7fd f825 	bl	800d09c <_malloc_r>
 8010052:	b948      	cbnz	r0, 8010068 <__smakebuf_r+0x44>
 8010054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010058:	059a      	lsls	r2, r3, #22
 801005a:	d4ef      	bmi.n	801003c <__smakebuf_r+0x18>
 801005c:	f023 0303 	bic.w	r3, r3, #3
 8010060:	f043 0302 	orr.w	r3, r3, #2
 8010064:	81a3      	strh	r3, [r4, #12]
 8010066:	e7e3      	b.n	8010030 <__smakebuf_r+0xc>
 8010068:	89a3      	ldrh	r3, [r4, #12]
 801006a:	6020      	str	r0, [r4, #0]
 801006c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010070:	81a3      	strh	r3, [r4, #12]
 8010072:	9b00      	ldr	r3, [sp, #0]
 8010074:	6163      	str	r3, [r4, #20]
 8010076:	9b01      	ldr	r3, [sp, #4]
 8010078:	6120      	str	r0, [r4, #16]
 801007a:	b15b      	cbz	r3, 8010094 <__smakebuf_r+0x70>
 801007c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010080:	4630      	mov	r0, r6
 8010082:	f000 f837 	bl	80100f4 <_isatty_r>
 8010086:	b128      	cbz	r0, 8010094 <__smakebuf_r+0x70>
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	f023 0303 	bic.w	r3, r3, #3
 801008e:	f043 0301 	orr.w	r3, r3, #1
 8010092:	81a3      	strh	r3, [r4, #12]
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	431d      	orrs	r5, r3
 8010098:	81a5      	strh	r5, [r4, #12]
 801009a:	e7cf      	b.n	801003c <__smakebuf_r+0x18>

0801009c <memmove>:
 801009c:	4288      	cmp	r0, r1
 801009e:	b510      	push	{r4, lr}
 80100a0:	eb01 0402 	add.w	r4, r1, r2
 80100a4:	d902      	bls.n	80100ac <memmove+0x10>
 80100a6:	4284      	cmp	r4, r0
 80100a8:	4623      	mov	r3, r4
 80100aa:	d807      	bhi.n	80100bc <memmove+0x20>
 80100ac:	1e43      	subs	r3, r0, #1
 80100ae:	42a1      	cmp	r1, r4
 80100b0:	d008      	beq.n	80100c4 <memmove+0x28>
 80100b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100ba:	e7f8      	b.n	80100ae <memmove+0x12>
 80100bc:	4402      	add	r2, r0
 80100be:	4601      	mov	r1, r0
 80100c0:	428a      	cmp	r2, r1
 80100c2:	d100      	bne.n	80100c6 <memmove+0x2a>
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100ce:	e7f7      	b.n	80100c0 <memmove+0x24>

080100d0 <_fstat_r>:
 80100d0:	b538      	push	{r3, r4, r5, lr}
 80100d2:	4d07      	ldr	r5, [pc, #28]	; (80100f0 <_fstat_r+0x20>)
 80100d4:	2300      	movs	r3, #0
 80100d6:	4604      	mov	r4, r0
 80100d8:	4608      	mov	r0, r1
 80100da:	4611      	mov	r1, r2
 80100dc:	602b      	str	r3, [r5, #0]
 80100de:	f7f4 fd84 	bl	8004bea <_fstat>
 80100e2:	1c43      	adds	r3, r0, #1
 80100e4:	d102      	bne.n	80100ec <_fstat_r+0x1c>
 80100e6:	682b      	ldr	r3, [r5, #0]
 80100e8:	b103      	cbz	r3, 80100ec <_fstat_r+0x1c>
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	bd38      	pop	{r3, r4, r5, pc}
 80100ee:	bf00      	nop
 80100f0:	20009634 	.word	0x20009634

080100f4 <_isatty_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d06      	ldr	r5, [pc, #24]	; (8010110 <_isatty_r+0x1c>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	602b      	str	r3, [r5, #0]
 8010100:	f7f4 fd83 	bl	8004c0a <_isatty>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d102      	bne.n	801010e <_isatty_r+0x1a>
 8010108:	682b      	ldr	r3, [r5, #0]
 801010a:	b103      	cbz	r3, 801010e <_isatty_r+0x1a>
 801010c:	6023      	str	r3, [r4, #0]
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	20009634 	.word	0x20009634

08010114 <abort>:
 8010114:	b508      	push	{r3, lr}
 8010116:	2006      	movs	r0, #6
 8010118:	f000 f868 	bl	80101ec <raise>
 801011c:	2001      	movs	r0, #1
 801011e:	f7f4 fd15 	bl	8004b4c <_exit>

08010122 <_calloc_r>:
 8010122:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010124:	fba1 2402 	umull	r2, r4, r1, r2
 8010128:	b94c      	cbnz	r4, 801013e <_calloc_r+0x1c>
 801012a:	4611      	mov	r1, r2
 801012c:	9201      	str	r2, [sp, #4]
 801012e:	f7fc ffb5 	bl	800d09c <_malloc_r>
 8010132:	9a01      	ldr	r2, [sp, #4]
 8010134:	4605      	mov	r5, r0
 8010136:	b930      	cbnz	r0, 8010146 <_calloc_r+0x24>
 8010138:	4628      	mov	r0, r5
 801013a:	b003      	add	sp, #12
 801013c:	bd30      	pop	{r4, r5, pc}
 801013e:	220c      	movs	r2, #12
 8010140:	6002      	str	r2, [r0, #0]
 8010142:	2500      	movs	r5, #0
 8010144:	e7f8      	b.n	8010138 <_calloc_r+0x16>
 8010146:	4621      	mov	r1, r4
 8010148:	f7fd fc1c 	bl	800d984 <memset>
 801014c:	e7f4      	b.n	8010138 <_calloc_r+0x16>

0801014e <__ascii_mbtowc>:
 801014e:	b082      	sub	sp, #8
 8010150:	b901      	cbnz	r1, 8010154 <__ascii_mbtowc+0x6>
 8010152:	a901      	add	r1, sp, #4
 8010154:	b142      	cbz	r2, 8010168 <__ascii_mbtowc+0x1a>
 8010156:	b14b      	cbz	r3, 801016c <__ascii_mbtowc+0x1e>
 8010158:	7813      	ldrb	r3, [r2, #0]
 801015a:	600b      	str	r3, [r1, #0]
 801015c:	7812      	ldrb	r2, [r2, #0]
 801015e:	1e10      	subs	r0, r2, #0
 8010160:	bf18      	it	ne
 8010162:	2001      	movne	r0, #1
 8010164:	b002      	add	sp, #8
 8010166:	4770      	bx	lr
 8010168:	4610      	mov	r0, r2
 801016a:	e7fb      	b.n	8010164 <__ascii_mbtowc+0x16>
 801016c:	f06f 0001 	mvn.w	r0, #1
 8010170:	e7f8      	b.n	8010164 <__ascii_mbtowc+0x16>

08010172 <_malloc_usable_size_r>:
 8010172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010176:	1f18      	subs	r0, r3, #4
 8010178:	2b00      	cmp	r3, #0
 801017a:	bfbc      	itt	lt
 801017c:	580b      	ldrlt	r3, [r1, r0]
 801017e:	18c0      	addlt	r0, r0, r3
 8010180:	4770      	bx	lr

08010182 <__ascii_wctomb>:
 8010182:	b149      	cbz	r1, 8010198 <__ascii_wctomb+0x16>
 8010184:	2aff      	cmp	r2, #255	; 0xff
 8010186:	bf85      	ittet	hi
 8010188:	238a      	movhi	r3, #138	; 0x8a
 801018a:	6003      	strhi	r3, [r0, #0]
 801018c:	700a      	strbls	r2, [r1, #0]
 801018e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010192:	bf98      	it	ls
 8010194:	2001      	movls	r0, #1
 8010196:	4770      	bx	lr
 8010198:	4608      	mov	r0, r1
 801019a:	4770      	bx	lr

0801019c <_raise_r>:
 801019c:	291f      	cmp	r1, #31
 801019e:	b538      	push	{r3, r4, r5, lr}
 80101a0:	4604      	mov	r4, r0
 80101a2:	460d      	mov	r5, r1
 80101a4:	d904      	bls.n	80101b0 <_raise_r+0x14>
 80101a6:	2316      	movs	r3, #22
 80101a8:	6003      	str	r3, [r0, #0]
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101b2:	b112      	cbz	r2, 80101ba <_raise_r+0x1e>
 80101b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101b8:	b94b      	cbnz	r3, 80101ce <_raise_r+0x32>
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 f830 	bl	8010220 <_getpid_r>
 80101c0:	462a      	mov	r2, r5
 80101c2:	4601      	mov	r1, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ca:	f000 b817 	b.w	80101fc <_kill_r>
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d00a      	beq.n	80101e8 <_raise_r+0x4c>
 80101d2:	1c59      	adds	r1, r3, #1
 80101d4:	d103      	bne.n	80101de <_raise_r+0x42>
 80101d6:	2316      	movs	r3, #22
 80101d8:	6003      	str	r3, [r0, #0]
 80101da:	2001      	movs	r0, #1
 80101dc:	e7e7      	b.n	80101ae <_raise_r+0x12>
 80101de:	2400      	movs	r4, #0
 80101e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101e4:	4628      	mov	r0, r5
 80101e6:	4798      	blx	r3
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7e0      	b.n	80101ae <_raise_r+0x12>

080101ec <raise>:
 80101ec:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <raise+0xc>)
 80101ee:	4601      	mov	r1, r0
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	f7ff bfd3 	b.w	801019c <_raise_r>
 80101f6:	bf00      	nop
 80101f8:	2000009c 	.word	0x2000009c

080101fc <_kill_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4d07      	ldr	r5, [pc, #28]	; (801021c <_kill_r+0x20>)
 8010200:	2300      	movs	r3, #0
 8010202:	4604      	mov	r4, r0
 8010204:	4608      	mov	r0, r1
 8010206:	4611      	mov	r1, r2
 8010208:	602b      	str	r3, [r5, #0]
 801020a:	f7f4 fc8f 	bl	8004b2c <_kill>
 801020e:	1c43      	adds	r3, r0, #1
 8010210:	d102      	bne.n	8010218 <_kill_r+0x1c>
 8010212:	682b      	ldr	r3, [r5, #0]
 8010214:	b103      	cbz	r3, 8010218 <_kill_r+0x1c>
 8010216:	6023      	str	r3, [r4, #0]
 8010218:	bd38      	pop	{r3, r4, r5, pc}
 801021a:	bf00      	nop
 801021c:	20009634 	.word	0x20009634

08010220 <_getpid_r>:
 8010220:	f7f4 bc7c 	b.w	8004b1c <_getpid>

08010224 <acos>:
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	ed2d 8b02 	vpush	{d8}
 801022a:	ec55 4b10 	vmov	r4, r5, d0
 801022e:	f000 f82f 	bl	8010290 <__ieee754_acos>
 8010232:	4622      	mov	r2, r4
 8010234:	462b      	mov	r3, r5
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	eeb0 8a40 	vmov.f32	s16, s0
 801023e:	eef0 8a60 	vmov.f32	s17, s1
 8010242:	f7f0 fc93 	bl	8000b6c <__aeabi_dcmpun>
 8010246:	b9a8      	cbnz	r0, 8010274 <acos+0x50>
 8010248:	ec45 4b10 	vmov	d0, r4, r5
 801024c:	f000 faac 	bl	80107a8 <fabs>
 8010250:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <acos+0x60>)
 8010252:	ec51 0b10 	vmov	r0, r1, d0
 8010256:	2200      	movs	r2, #0
 8010258:	f7f0 fc7e 	bl	8000b58 <__aeabi_dcmpgt>
 801025c:	b150      	cbz	r0, 8010274 <acos+0x50>
 801025e:	f7fd fbf3 	bl	800da48 <__errno>
 8010262:	ecbd 8b02 	vpop	{d8}
 8010266:	2321      	movs	r3, #33	; 0x21
 8010268:	6003      	str	r3, [r0, #0]
 801026a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801026e:	4806      	ldr	r0, [pc, #24]	; (8010288 <acos+0x64>)
 8010270:	f000 bc02 	b.w	8010a78 <nan>
 8010274:	eeb0 0a48 	vmov.f32	s0, s16
 8010278:	eef0 0a68 	vmov.f32	s1, s17
 801027c:	ecbd 8b02 	vpop	{d8}
 8010280:	bd38      	pop	{r3, r4, r5, pc}
 8010282:	bf00      	nop
 8010284:	3ff00000 	.word	0x3ff00000
 8010288:	0801543a 	.word	0x0801543a
 801028c:	00000000 	.word	0x00000000

08010290 <__ieee754_acos>:
 8010290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010294:	ec55 4b10 	vmov	r4, r5, d0
 8010298:	49b7      	ldr	r1, [pc, #732]	; (8010578 <__ieee754_acos+0x2e8>)
 801029a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801029e:	428b      	cmp	r3, r1
 80102a0:	dd1b      	ble.n	80102da <__ieee754_acos+0x4a>
 80102a2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80102a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80102aa:	4323      	orrs	r3, r4
 80102ac:	d106      	bne.n	80102bc <__ieee754_acos+0x2c>
 80102ae:	2d00      	cmp	r5, #0
 80102b0:	f300 8211 	bgt.w	80106d6 <__ieee754_acos+0x446>
 80102b4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8010510 <__ieee754_acos+0x280>
 80102b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102bc:	ee10 2a10 	vmov	r2, s0
 80102c0:	462b      	mov	r3, r5
 80102c2:	ee10 0a10 	vmov	r0, s0
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7ef fffe 	bl	80002c8 <__aeabi_dsub>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	f7f0 fadc 	bl	800088c <__aeabi_ddiv>
 80102d4:	ec41 0b10 	vmov	d0, r0, r1
 80102d8:	e7ee      	b.n	80102b8 <__ieee754_acos+0x28>
 80102da:	49a8      	ldr	r1, [pc, #672]	; (801057c <__ieee754_acos+0x2ec>)
 80102dc:	428b      	cmp	r3, r1
 80102de:	f300 8087 	bgt.w	80103f0 <__ieee754_acos+0x160>
 80102e2:	4aa7      	ldr	r2, [pc, #668]	; (8010580 <__ieee754_acos+0x2f0>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	f340 81f9 	ble.w	80106dc <__ieee754_acos+0x44c>
 80102ea:	ee10 2a10 	vmov	r2, s0
 80102ee:	ee10 0a10 	vmov	r0, s0
 80102f2:	462b      	mov	r3, r5
 80102f4:	4629      	mov	r1, r5
 80102f6:	f7f0 f99f 	bl	8000638 <__aeabi_dmul>
 80102fa:	a387      	add	r3, pc, #540	; (adr r3, 8010518 <__ieee754_acos+0x288>)
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	4606      	mov	r6, r0
 8010302:	460f      	mov	r7, r1
 8010304:	f7f0 f998 	bl	8000638 <__aeabi_dmul>
 8010308:	a385      	add	r3, pc, #532	; (adr r3, 8010520 <__ieee754_acos+0x290>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	f7ef ffdd 	bl	80002cc <__adddf3>
 8010312:	4632      	mov	r2, r6
 8010314:	463b      	mov	r3, r7
 8010316:	f7f0 f98f 	bl	8000638 <__aeabi_dmul>
 801031a:	a383      	add	r3, pc, #524	; (adr r3, 8010528 <__ieee754_acos+0x298>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	f7ef ffd2 	bl	80002c8 <__aeabi_dsub>
 8010324:	4632      	mov	r2, r6
 8010326:	463b      	mov	r3, r7
 8010328:	f7f0 f986 	bl	8000638 <__aeabi_dmul>
 801032c:	a380      	add	r3, pc, #512	; (adr r3, 8010530 <__ieee754_acos+0x2a0>)
 801032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010332:	f7ef ffcb 	bl	80002cc <__adddf3>
 8010336:	4632      	mov	r2, r6
 8010338:	463b      	mov	r3, r7
 801033a:	f7f0 f97d 	bl	8000638 <__aeabi_dmul>
 801033e:	a37e      	add	r3, pc, #504	; (adr r3, 8010538 <__ieee754_acos+0x2a8>)
 8010340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010344:	f7ef ffc0 	bl	80002c8 <__aeabi_dsub>
 8010348:	4632      	mov	r2, r6
 801034a:	463b      	mov	r3, r7
 801034c:	f7f0 f974 	bl	8000638 <__aeabi_dmul>
 8010350:	a37b      	add	r3, pc, #492	; (adr r3, 8010540 <__ieee754_acos+0x2b0>)
 8010352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010356:	f7ef ffb9 	bl	80002cc <__adddf3>
 801035a:	4632      	mov	r2, r6
 801035c:	463b      	mov	r3, r7
 801035e:	f7f0 f96b 	bl	8000638 <__aeabi_dmul>
 8010362:	a379      	add	r3, pc, #484	; (adr r3, 8010548 <__ieee754_acos+0x2b8>)
 8010364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010368:	4680      	mov	r8, r0
 801036a:	4689      	mov	r9, r1
 801036c:	4630      	mov	r0, r6
 801036e:	4639      	mov	r1, r7
 8010370:	f7f0 f962 	bl	8000638 <__aeabi_dmul>
 8010374:	a376      	add	r3, pc, #472	; (adr r3, 8010550 <__ieee754_acos+0x2c0>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ffa5 	bl	80002c8 <__aeabi_dsub>
 801037e:	4632      	mov	r2, r6
 8010380:	463b      	mov	r3, r7
 8010382:	f7f0 f959 	bl	8000638 <__aeabi_dmul>
 8010386:	a374      	add	r3, pc, #464	; (adr r3, 8010558 <__ieee754_acos+0x2c8>)
 8010388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038c:	f7ef ff9e 	bl	80002cc <__adddf3>
 8010390:	4632      	mov	r2, r6
 8010392:	463b      	mov	r3, r7
 8010394:	f7f0 f950 	bl	8000638 <__aeabi_dmul>
 8010398:	a371      	add	r3, pc, #452	; (adr r3, 8010560 <__ieee754_acos+0x2d0>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7ef ff93 	bl	80002c8 <__aeabi_dsub>
 80103a2:	4632      	mov	r2, r6
 80103a4:	463b      	mov	r3, r7
 80103a6:	f7f0 f947 	bl	8000638 <__aeabi_dmul>
 80103aa:	4b76      	ldr	r3, [pc, #472]	; (8010584 <__ieee754_acos+0x2f4>)
 80103ac:	2200      	movs	r2, #0
 80103ae:	f7ef ff8d 	bl	80002cc <__adddf3>
 80103b2:	4602      	mov	r2, r0
 80103b4:	460b      	mov	r3, r1
 80103b6:	4640      	mov	r0, r8
 80103b8:	4649      	mov	r1, r9
 80103ba:	f7f0 fa67 	bl	800088c <__aeabi_ddiv>
 80103be:	4622      	mov	r2, r4
 80103c0:	462b      	mov	r3, r5
 80103c2:	f7f0 f939 	bl	8000638 <__aeabi_dmul>
 80103c6:	4602      	mov	r2, r0
 80103c8:	460b      	mov	r3, r1
 80103ca:	a167      	add	r1, pc, #412	; (adr r1, 8010568 <__ieee754_acos+0x2d8>)
 80103cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103d0:	f7ef ff7a 	bl	80002c8 <__aeabi_dsub>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4620      	mov	r0, r4
 80103da:	4629      	mov	r1, r5
 80103dc:	f7ef ff74 	bl	80002c8 <__aeabi_dsub>
 80103e0:	4602      	mov	r2, r0
 80103e2:	460b      	mov	r3, r1
 80103e4:	a162      	add	r1, pc, #392	; (adr r1, 8010570 <__ieee754_acos+0x2e0>)
 80103e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103ea:	f7ef ff6d 	bl	80002c8 <__aeabi_dsub>
 80103ee:	e771      	b.n	80102d4 <__ieee754_acos+0x44>
 80103f0:	2d00      	cmp	r5, #0
 80103f2:	f280 80cb 	bge.w	801058c <__ieee754_acos+0x2fc>
 80103f6:	ee10 0a10 	vmov	r0, s0
 80103fa:	4b62      	ldr	r3, [pc, #392]	; (8010584 <__ieee754_acos+0x2f4>)
 80103fc:	2200      	movs	r2, #0
 80103fe:	4629      	mov	r1, r5
 8010400:	f7ef ff64 	bl	80002cc <__adddf3>
 8010404:	4b60      	ldr	r3, [pc, #384]	; (8010588 <__ieee754_acos+0x2f8>)
 8010406:	2200      	movs	r2, #0
 8010408:	f7f0 f916 	bl	8000638 <__aeabi_dmul>
 801040c:	a342      	add	r3, pc, #264	; (adr r3, 8010518 <__ieee754_acos+0x288>)
 801040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010412:	4604      	mov	r4, r0
 8010414:	460d      	mov	r5, r1
 8010416:	f7f0 f90f 	bl	8000638 <__aeabi_dmul>
 801041a:	a341      	add	r3, pc, #260	; (adr r3, 8010520 <__ieee754_acos+0x290>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f7ef ff54 	bl	80002cc <__adddf3>
 8010424:	4622      	mov	r2, r4
 8010426:	462b      	mov	r3, r5
 8010428:	f7f0 f906 	bl	8000638 <__aeabi_dmul>
 801042c:	a33e      	add	r3, pc, #248	; (adr r3, 8010528 <__ieee754_acos+0x298>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f7ef ff49 	bl	80002c8 <__aeabi_dsub>
 8010436:	4622      	mov	r2, r4
 8010438:	462b      	mov	r3, r5
 801043a:	f7f0 f8fd 	bl	8000638 <__aeabi_dmul>
 801043e:	a33c      	add	r3, pc, #240	; (adr r3, 8010530 <__ieee754_acos+0x2a0>)
 8010440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010444:	f7ef ff42 	bl	80002cc <__adddf3>
 8010448:	4622      	mov	r2, r4
 801044a:	462b      	mov	r3, r5
 801044c:	f7f0 f8f4 	bl	8000638 <__aeabi_dmul>
 8010450:	a339      	add	r3, pc, #228	; (adr r3, 8010538 <__ieee754_acos+0x2a8>)
 8010452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010456:	f7ef ff37 	bl	80002c8 <__aeabi_dsub>
 801045a:	4622      	mov	r2, r4
 801045c:	462b      	mov	r3, r5
 801045e:	f7f0 f8eb 	bl	8000638 <__aeabi_dmul>
 8010462:	a337      	add	r3, pc, #220	; (adr r3, 8010540 <__ieee754_acos+0x2b0>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	f7ef ff30 	bl	80002cc <__adddf3>
 801046c:	4622      	mov	r2, r4
 801046e:	462b      	mov	r3, r5
 8010470:	f7f0 f8e2 	bl	8000638 <__aeabi_dmul>
 8010474:	ec45 4b10 	vmov	d0, r4, r5
 8010478:	4680      	mov	r8, r0
 801047a:	4689      	mov	r9, r1
 801047c:	f000 f99e 	bl	80107bc <__ieee754_sqrt>
 8010480:	a331      	add	r3, pc, #196	; (adr r3, 8010548 <__ieee754_acos+0x2b8>)
 8010482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010486:	4620      	mov	r0, r4
 8010488:	4629      	mov	r1, r5
 801048a:	ec57 6b10 	vmov	r6, r7, d0
 801048e:	f7f0 f8d3 	bl	8000638 <__aeabi_dmul>
 8010492:	a32f      	add	r3, pc, #188	; (adr r3, 8010550 <__ieee754_acos+0x2c0>)
 8010494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010498:	f7ef ff16 	bl	80002c8 <__aeabi_dsub>
 801049c:	4622      	mov	r2, r4
 801049e:	462b      	mov	r3, r5
 80104a0:	f7f0 f8ca 	bl	8000638 <__aeabi_dmul>
 80104a4:	a32c      	add	r3, pc, #176	; (adr r3, 8010558 <__ieee754_acos+0x2c8>)
 80104a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104aa:	f7ef ff0f 	bl	80002cc <__adddf3>
 80104ae:	4622      	mov	r2, r4
 80104b0:	462b      	mov	r3, r5
 80104b2:	f7f0 f8c1 	bl	8000638 <__aeabi_dmul>
 80104b6:	a32a      	add	r3, pc, #168	; (adr r3, 8010560 <__ieee754_acos+0x2d0>)
 80104b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104bc:	f7ef ff04 	bl	80002c8 <__aeabi_dsub>
 80104c0:	4622      	mov	r2, r4
 80104c2:	462b      	mov	r3, r5
 80104c4:	f7f0 f8b8 	bl	8000638 <__aeabi_dmul>
 80104c8:	4b2e      	ldr	r3, [pc, #184]	; (8010584 <__ieee754_acos+0x2f4>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	f7ef fefe 	bl	80002cc <__adddf3>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4640      	mov	r0, r8
 80104d6:	4649      	mov	r1, r9
 80104d8:	f7f0 f9d8 	bl	800088c <__aeabi_ddiv>
 80104dc:	4632      	mov	r2, r6
 80104de:	463b      	mov	r3, r7
 80104e0:	f7f0 f8aa 	bl	8000638 <__aeabi_dmul>
 80104e4:	a320      	add	r3, pc, #128	; (adr r3, 8010568 <__ieee754_acos+0x2d8>)
 80104e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ea:	f7ef feed 	bl	80002c8 <__aeabi_dsub>
 80104ee:	4632      	mov	r2, r6
 80104f0:	463b      	mov	r3, r7
 80104f2:	f7ef feeb 	bl	80002cc <__adddf3>
 80104f6:	4602      	mov	r2, r0
 80104f8:	460b      	mov	r3, r1
 80104fa:	f7ef fee7 	bl	80002cc <__adddf3>
 80104fe:	4602      	mov	r2, r0
 8010500:	460b      	mov	r3, r1
 8010502:	a103      	add	r1, pc, #12	; (adr r1, 8010510 <__ieee754_acos+0x280>)
 8010504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010508:	e76f      	b.n	80103ea <__ieee754_acos+0x15a>
 801050a:	bf00      	nop
 801050c:	f3af 8000 	nop.w
 8010510:	54442d18 	.word	0x54442d18
 8010514:	400921fb 	.word	0x400921fb
 8010518:	0dfdf709 	.word	0x0dfdf709
 801051c:	3f023de1 	.word	0x3f023de1
 8010520:	7501b288 	.word	0x7501b288
 8010524:	3f49efe0 	.word	0x3f49efe0
 8010528:	b5688f3b 	.word	0xb5688f3b
 801052c:	3fa48228 	.word	0x3fa48228
 8010530:	0e884455 	.word	0x0e884455
 8010534:	3fc9c155 	.word	0x3fc9c155
 8010538:	03eb6f7d 	.word	0x03eb6f7d
 801053c:	3fd4d612 	.word	0x3fd4d612
 8010540:	55555555 	.word	0x55555555
 8010544:	3fc55555 	.word	0x3fc55555
 8010548:	b12e9282 	.word	0xb12e9282
 801054c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010550:	1b8d0159 	.word	0x1b8d0159
 8010554:	3fe6066c 	.word	0x3fe6066c
 8010558:	9c598ac8 	.word	0x9c598ac8
 801055c:	40002ae5 	.word	0x40002ae5
 8010560:	1c8a2d4b 	.word	0x1c8a2d4b
 8010564:	40033a27 	.word	0x40033a27
 8010568:	33145c07 	.word	0x33145c07
 801056c:	3c91a626 	.word	0x3c91a626
 8010570:	54442d18 	.word	0x54442d18
 8010574:	3ff921fb 	.word	0x3ff921fb
 8010578:	3fefffff 	.word	0x3fefffff
 801057c:	3fdfffff 	.word	0x3fdfffff
 8010580:	3c600000 	.word	0x3c600000
 8010584:	3ff00000 	.word	0x3ff00000
 8010588:	3fe00000 	.word	0x3fe00000
 801058c:	ee10 2a10 	vmov	r2, s0
 8010590:	462b      	mov	r3, r5
 8010592:	496d      	ldr	r1, [pc, #436]	; (8010748 <__ieee754_acos+0x4b8>)
 8010594:	2000      	movs	r0, #0
 8010596:	f7ef fe97 	bl	80002c8 <__aeabi_dsub>
 801059a:	4b6c      	ldr	r3, [pc, #432]	; (801074c <__ieee754_acos+0x4bc>)
 801059c:	2200      	movs	r2, #0
 801059e:	f7f0 f84b 	bl	8000638 <__aeabi_dmul>
 80105a2:	4604      	mov	r4, r0
 80105a4:	460d      	mov	r5, r1
 80105a6:	ec45 4b10 	vmov	d0, r4, r5
 80105aa:	f000 f907 	bl	80107bc <__ieee754_sqrt>
 80105ae:	a34e      	add	r3, pc, #312	; (adr r3, 80106e8 <__ieee754_acos+0x458>)
 80105b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	ec59 8b10 	vmov	r8, r9, d0
 80105bc:	f7f0 f83c 	bl	8000638 <__aeabi_dmul>
 80105c0:	a34b      	add	r3, pc, #300	; (adr r3, 80106f0 <__ieee754_acos+0x460>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	f7ef fe81 	bl	80002cc <__adddf3>
 80105ca:	4622      	mov	r2, r4
 80105cc:	462b      	mov	r3, r5
 80105ce:	f7f0 f833 	bl	8000638 <__aeabi_dmul>
 80105d2:	a349      	add	r3, pc, #292	; (adr r3, 80106f8 <__ieee754_acos+0x468>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	f7ef fe76 	bl	80002c8 <__aeabi_dsub>
 80105dc:	4622      	mov	r2, r4
 80105de:	462b      	mov	r3, r5
 80105e0:	f7f0 f82a 	bl	8000638 <__aeabi_dmul>
 80105e4:	a346      	add	r3, pc, #280	; (adr r3, 8010700 <__ieee754_acos+0x470>)
 80105e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ea:	f7ef fe6f 	bl	80002cc <__adddf3>
 80105ee:	4622      	mov	r2, r4
 80105f0:	462b      	mov	r3, r5
 80105f2:	f7f0 f821 	bl	8000638 <__aeabi_dmul>
 80105f6:	a344      	add	r3, pc, #272	; (adr r3, 8010708 <__ieee754_acos+0x478>)
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	f7ef fe64 	bl	80002c8 <__aeabi_dsub>
 8010600:	4622      	mov	r2, r4
 8010602:	462b      	mov	r3, r5
 8010604:	f7f0 f818 	bl	8000638 <__aeabi_dmul>
 8010608:	a341      	add	r3, pc, #260	; (adr r3, 8010710 <__ieee754_acos+0x480>)
 801060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060e:	f7ef fe5d 	bl	80002cc <__adddf3>
 8010612:	4622      	mov	r2, r4
 8010614:	462b      	mov	r3, r5
 8010616:	f7f0 f80f 	bl	8000638 <__aeabi_dmul>
 801061a:	a33f      	add	r3, pc, #252	; (adr r3, 8010718 <__ieee754_acos+0x488>)
 801061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010620:	4682      	mov	sl, r0
 8010622:	468b      	mov	fp, r1
 8010624:	4620      	mov	r0, r4
 8010626:	4629      	mov	r1, r5
 8010628:	f7f0 f806 	bl	8000638 <__aeabi_dmul>
 801062c:	a33c      	add	r3, pc, #240	; (adr r3, 8010720 <__ieee754_acos+0x490>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	f7ef fe49 	bl	80002c8 <__aeabi_dsub>
 8010636:	4622      	mov	r2, r4
 8010638:	462b      	mov	r3, r5
 801063a:	f7ef fffd 	bl	8000638 <__aeabi_dmul>
 801063e:	a33a      	add	r3, pc, #232	; (adr r3, 8010728 <__ieee754_acos+0x498>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	f7ef fe42 	bl	80002cc <__adddf3>
 8010648:	4622      	mov	r2, r4
 801064a:	462b      	mov	r3, r5
 801064c:	f7ef fff4 	bl	8000638 <__aeabi_dmul>
 8010650:	a337      	add	r3, pc, #220	; (adr r3, 8010730 <__ieee754_acos+0x4a0>)
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	f7ef fe37 	bl	80002c8 <__aeabi_dsub>
 801065a:	4622      	mov	r2, r4
 801065c:	462b      	mov	r3, r5
 801065e:	f7ef ffeb 	bl	8000638 <__aeabi_dmul>
 8010662:	4b39      	ldr	r3, [pc, #228]	; (8010748 <__ieee754_acos+0x4b8>)
 8010664:	2200      	movs	r2, #0
 8010666:	f7ef fe31 	bl	80002cc <__adddf3>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	4650      	mov	r0, sl
 8010670:	4659      	mov	r1, fp
 8010672:	f7f0 f90b 	bl	800088c <__aeabi_ddiv>
 8010676:	4642      	mov	r2, r8
 8010678:	464b      	mov	r3, r9
 801067a:	f7ef ffdd 	bl	8000638 <__aeabi_dmul>
 801067e:	2600      	movs	r6, #0
 8010680:	4682      	mov	sl, r0
 8010682:	468b      	mov	fp, r1
 8010684:	4632      	mov	r2, r6
 8010686:	464b      	mov	r3, r9
 8010688:	4630      	mov	r0, r6
 801068a:	4649      	mov	r1, r9
 801068c:	f7ef ffd4 	bl	8000638 <__aeabi_dmul>
 8010690:	4602      	mov	r2, r0
 8010692:	460b      	mov	r3, r1
 8010694:	4620      	mov	r0, r4
 8010696:	4629      	mov	r1, r5
 8010698:	f7ef fe16 	bl	80002c8 <__aeabi_dsub>
 801069c:	4632      	mov	r2, r6
 801069e:	4604      	mov	r4, r0
 80106a0:	460d      	mov	r5, r1
 80106a2:	464b      	mov	r3, r9
 80106a4:	4640      	mov	r0, r8
 80106a6:	4649      	mov	r1, r9
 80106a8:	f7ef fe10 	bl	80002cc <__adddf3>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4620      	mov	r0, r4
 80106b2:	4629      	mov	r1, r5
 80106b4:	f7f0 f8ea 	bl	800088c <__aeabi_ddiv>
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	4650      	mov	r0, sl
 80106be:	4659      	mov	r1, fp
 80106c0:	f7ef fe04 	bl	80002cc <__adddf3>
 80106c4:	4632      	mov	r2, r6
 80106c6:	464b      	mov	r3, r9
 80106c8:	f7ef fe00 	bl	80002cc <__adddf3>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	f7ef fdfc 	bl	80002cc <__adddf3>
 80106d4:	e5fe      	b.n	80102d4 <__ieee754_acos+0x44>
 80106d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010738 <__ieee754_acos+0x4a8>
 80106da:	e5ed      	b.n	80102b8 <__ieee754_acos+0x28>
 80106dc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8010740 <__ieee754_acos+0x4b0>
 80106e0:	e5ea      	b.n	80102b8 <__ieee754_acos+0x28>
 80106e2:	bf00      	nop
 80106e4:	f3af 8000 	nop.w
 80106e8:	0dfdf709 	.word	0x0dfdf709
 80106ec:	3f023de1 	.word	0x3f023de1
 80106f0:	7501b288 	.word	0x7501b288
 80106f4:	3f49efe0 	.word	0x3f49efe0
 80106f8:	b5688f3b 	.word	0xb5688f3b
 80106fc:	3fa48228 	.word	0x3fa48228
 8010700:	0e884455 	.word	0x0e884455
 8010704:	3fc9c155 	.word	0x3fc9c155
 8010708:	03eb6f7d 	.word	0x03eb6f7d
 801070c:	3fd4d612 	.word	0x3fd4d612
 8010710:	55555555 	.word	0x55555555
 8010714:	3fc55555 	.word	0x3fc55555
 8010718:	b12e9282 	.word	0xb12e9282
 801071c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010720:	1b8d0159 	.word	0x1b8d0159
 8010724:	3fe6066c 	.word	0x3fe6066c
 8010728:	9c598ac8 	.word	0x9c598ac8
 801072c:	40002ae5 	.word	0x40002ae5
 8010730:	1c8a2d4b 	.word	0x1c8a2d4b
 8010734:	40033a27 	.word	0x40033a27
	...
 8010740:	54442d18 	.word	0x54442d18
 8010744:	3ff921fb 	.word	0x3ff921fb
 8010748:	3ff00000 	.word	0x3ff00000
 801074c:	3fe00000 	.word	0x3fe00000

08010750 <sqrt>:
 8010750:	b538      	push	{r3, r4, r5, lr}
 8010752:	ed2d 8b02 	vpush	{d8}
 8010756:	ec55 4b10 	vmov	r4, r5, d0
 801075a:	f000 f82f 	bl	80107bc <__ieee754_sqrt>
 801075e:	4622      	mov	r2, r4
 8010760:	462b      	mov	r3, r5
 8010762:	4620      	mov	r0, r4
 8010764:	4629      	mov	r1, r5
 8010766:	eeb0 8a40 	vmov.f32	s16, s0
 801076a:	eef0 8a60 	vmov.f32	s17, s1
 801076e:	f7f0 f9fd 	bl	8000b6c <__aeabi_dcmpun>
 8010772:	b990      	cbnz	r0, 801079a <sqrt+0x4a>
 8010774:	2200      	movs	r2, #0
 8010776:	2300      	movs	r3, #0
 8010778:	4620      	mov	r0, r4
 801077a:	4629      	mov	r1, r5
 801077c:	f7f0 f9ce 	bl	8000b1c <__aeabi_dcmplt>
 8010780:	b158      	cbz	r0, 801079a <sqrt+0x4a>
 8010782:	f7fd f961 	bl	800da48 <__errno>
 8010786:	2321      	movs	r3, #33	; 0x21
 8010788:	6003      	str	r3, [r0, #0]
 801078a:	2200      	movs	r2, #0
 801078c:	2300      	movs	r3, #0
 801078e:	4610      	mov	r0, r2
 8010790:	4619      	mov	r1, r3
 8010792:	f7f0 f87b 	bl	800088c <__aeabi_ddiv>
 8010796:	ec41 0b18 	vmov	d8, r0, r1
 801079a:	eeb0 0a48 	vmov.f32	s0, s16
 801079e:	eef0 0a68 	vmov.f32	s1, s17
 80107a2:	ecbd 8b02 	vpop	{d8}
 80107a6:	bd38      	pop	{r3, r4, r5, pc}

080107a8 <fabs>:
 80107a8:	ec51 0b10 	vmov	r0, r1, d0
 80107ac:	ee10 2a10 	vmov	r2, s0
 80107b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107b4:	ec43 2b10 	vmov	d0, r2, r3
 80107b8:	4770      	bx	lr
	...

080107bc <__ieee754_sqrt>:
 80107bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	ec55 4b10 	vmov	r4, r5, d0
 80107c4:	4e67      	ldr	r6, [pc, #412]	; (8010964 <__ieee754_sqrt+0x1a8>)
 80107c6:	43ae      	bics	r6, r5
 80107c8:	ee10 0a10 	vmov	r0, s0
 80107cc:	ee10 2a10 	vmov	r2, s0
 80107d0:	4629      	mov	r1, r5
 80107d2:	462b      	mov	r3, r5
 80107d4:	d10d      	bne.n	80107f2 <__ieee754_sqrt+0x36>
 80107d6:	f7ef ff2f 	bl	8000638 <__aeabi_dmul>
 80107da:	4602      	mov	r2, r0
 80107dc:	460b      	mov	r3, r1
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7ef fd73 	bl	80002cc <__adddf3>
 80107e6:	4604      	mov	r4, r0
 80107e8:	460d      	mov	r5, r1
 80107ea:	ec45 4b10 	vmov	d0, r4, r5
 80107ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f2:	2d00      	cmp	r5, #0
 80107f4:	dc0b      	bgt.n	801080e <__ieee754_sqrt+0x52>
 80107f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80107fa:	4326      	orrs	r6, r4
 80107fc:	d0f5      	beq.n	80107ea <__ieee754_sqrt+0x2e>
 80107fe:	b135      	cbz	r5, 801080e <__ieee754_sqrt+0x52>
 8010800:	f7ef fd62 	bl	80002c8 <__aeabi_dsub>
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	f7f0 f840 	bl	800088c <__aeabi_ddiv>
 801080c:	e7eb      	b.n	80107e6 <__ieee754_sqrt+0x2a>
 801080e:	1509      	asrs	r1, r1, #20
 8010810:	f000 808d 	beq.w	801092e <__ieee754_sqrt+0x172>
 8010814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010818:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801081c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010820:	07c9      	lsls	r1, r1, #31
 8010822:	bf5c      	itt	pl
 8010824:	005b      	lslpl	r3, r3, #1
 8010826:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801082a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801082e:	bf58      	it	pl
 8010830:	0052      	lslpl	r2, r2, #1
 8010832:	2500      	movs	r5, #0
 8010834:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010838:	1076      	asrs	r6, r6, #1
 801083a:	0052      	lsls	r2, r2, #1
 801083c:	f04f 0e16 	mov.w	lr, #22
 8010840:	46ac      	mov	ip, r5
 8010842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010846:	eb0c 0001 	add.w	r0, ip, r1
 801084a:	4298      	cmp	r0, r3
 801084c:	bfde      	ittt	le
 801084e:	1a1b      	suble	r3, r3, r0
 8010850:	eb00 0c01 	addle.w	ip, r0, r1
 8010854:	186d      	addle	r5, r5, r1
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	f1be 0e01 	subs.w	lr, lr, #1
 801085c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010860:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010864:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010868:	d1ed      	bne.n	8010846 <__ieee754_sqrt+0x8a>
 801086a:	4674      	mov	r4, lr
 801086c:	2720      	movs	r7, #32
 801086e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010872:	4563      	cmp	r3, ip
 8010874:	eb01 000e 	add.w	r0, r1, lr
 8010878:	dc02      	bgt.n	8010880 <__ieee754_sqrt+0xc4>
 801087a:	d113      	bne.n	80108a4 <__ieee754_sqrt+0xe8>
 801087c:	4290      	cmp	r0, r2
 801087e:	d811      	bhi.n	80108a4 <__ieee754_sqrt+0xe8>
 8010880:	2800      	cmp	r0, #0
 8010882:	eb00 0e01 	add.w	lr, r0, r1
 8010886:	da57      	bge.n	8010938 <__ieee754_sqrt+0x17c>
 8010888:	f1be 0f00 	cmp.w	lr, #0
 801088c:	db54      	blt.n	8010938 <__ieee754_sqrt+0x17c>
 801088e:	f10c 0801 	add.w	r8, ip, #1
 8010892:	eba3 030c 	sub.w	r3, r3, ip
 8010896:	4290      	cmp	r0, r2
 8010898:	bf88      	it	hi
 801089a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801089e:	1a12      	subs	r2, r2, r0
 80108a0:	440c      	add	r4, r1
 80108a2:	46c4      	mov	ip, r8
 80108a4:	005b      	lsls	r3, r3, #1
 80108a6:	3f01      	subs	r7, #1
 80108a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80108ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80108b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80108b4:	d1dd      	bne.n	8010872 <__ieee754_sqrt+0xb6>
 80108b6:	4313      	orrs	r3, r2
 80108b8:	d01b      	beq.n	80108f2 <__ieee754_sqrt+0x136>
 80108ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010968 <__ieee754_sqrt+0x1ac>
 80108be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801096c <__ieee754_sqrt+0x1b0>
 80108c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80108c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80108ca:	f7ef fcfd 	bl	80002c8 <__aeabi_dsub>
 80108ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80108d2:	4602      	mov	r2, r0
 80108d4:	460b      	mov	r3, r1
 80108d6:	4640      	mov	r0, r8
 80108d8:	4649      	mov	r1, r9
 80108da:	f7f0 f929 	bl	8000b30 <__aeabi_dcmple>
 80108de:	b140      	cbz	r0, 80108f2 <__ieee754_sqrt+0x136>
 80108e0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80108e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80108e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80108ec:	d126      	bne.n	801093c <__ieee754_sqrt+0x180>
 80108ee:	3501      	adds	r5, #1
 80108f0:	463c      	mov	r4, r7
 80108f2:	106a      	asrs	r2, r5, #1
 80108f4:	0863      	lsrs	r3, r4, #1
 80108f6:	07e9      	lsls	r1, r5, #31
 80108f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80108fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010900:	bf48      	it	mi
 8010902:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010906:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801090a:	461c      	mov	r4, r3
 801090c:	e76d      	b.n	80107ea <__ieee754_sqrt+0x2e>
 801090e:	0ad3      	lsrs	r3, r2, #11
 8010910:	3815      	subs	r0, #21
 8010912:	0552      	lsls	r2, r2, #21
 8010914:	2b00      	cmp	r3, #0
 8010916:	d0fa      	beq.n	801090e <__ieee754_sqrt+0x152>
 8010918:	02dc      	lsls	r4, r3, #11
 801091a:	d50a      	bpl.n	8010932 <__ieee754_sqrt+0x176>
 801091c:	f1c1 0420 	rsb	r4, r1, #32
 8010920:	fa22 f404 	lsr.w	r4, r2, r4
 8010924:	1e4d      	subs	r5, r1, #1
 8010926:	408a      	lsls	r2, r1
 8010928:	4323      	orrs	r3, r4
 801092a:	1b41      	subs	r1, r0, r5
 801092c:	e772      	b.n	8010814 <__ieee754_sqrt+0x58>
 801092e:	4608      	mov	r0, r1
 8010930:	e7f0      	b.n	8010914 <__ieee754_sqrt+0x158>
 8010932:	005b      	lsls	r3, r3, #1
 8010934:	3101      	adds	r1, #1
 8010936:	e7ef      	b.n	8010918 <__ieee754_sqrt+0x15c>
 8010938:	46e0      	mov	r8, ip
 801093a:	e7aa      	b.n	8010892 <__ieee754_sqrt+0xd6>
 801093c:	f7ef fcc6 	bl	80002cc <__adddf3>
 8010940:	e9da 8900 	ldrd	r8, r9, [sl]
 8010944:	4602      	mov	r2, r0
 8010946:	460b      	mov	r3, r1
 8010948:	4640      	mov	r0, r8
 801094a:	4649      	mov	r1, r9
 801094c:	f7f0 f8e6 	bl	8000b1c <__aeabi_dcmplt>
 8010950:	b120      	cbz	r0, 801095c <__ieee754_sqrt+0x1a0>
 8010952:	1ca0      	adds	r0, r4, #2
 8010954:	bf08      	it	eq
 8010956:	3501      	addeq	r5, #1
 8010958:	3402      	adds	r4, #2
 801095a:	e7ca      	b.n	80108f2 <__ieee754_sqrt+0x136>
 801095c:	3401      	adds	r4, #1
 801095e:	f024 0401 	bic.w	r4, r4, #1
 8010962:	e7c6      	b.n	80108f2 <__ieee754_sqrt+0x136>
 8010964:	7ff00000 	.word	0x7ff00000
 8010968:	20000210 	.word	0x20000210
 801096c:	20000218 	.word	0x20000218

08010970 <round>:
 8010970:	ec53 2b10 	vmov	r2, r3, d0
 8010974:	b570      	push	{r4, r5, r6, lr}
 8010976:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801097a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801097e:	2813      	cmp	r0, #19
 8010980:	ee10 5a10 	vmov	r5, s0
 8010984:	4619      	mov	r1, r3
 8010986:	dc18      	bgt.n	80109ba <round+0x4a>
 8010988:	2800      	cmp	r0, #0
 801098a:	da09      	bge.n	80109a0 <round+0x30>
 801098c:	3001      	adds	r0, #1
 801098e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8010992:	d103      	bne.n	801099c <round+0x2c>
 8010994:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8010998:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801099c:	2300      	movs	r3, #0
 801099e:	e02a      	b.n	80109f6 <round+0x86>
 80109a0:	4c16      	ldr	r4, [pc, #88]	; (80109fc <round+0x8c>)
 80109a2:	4104      	asrs	r4, r0
 80109a4:	ea03 0604 	and.w	r6, r3, r4
 80109a8:	4316      	orrs	r6, r2
 80109aa:	d011      	beq.n	80109d0 <round+0x60>
 80109ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80109b0:	4103      	asrs	r3, r0
 80109b2:	440b      	add	r3, r1
 80109b4:	ea23 0104 	bic.w	r1, r3, r4
 80109b8:	e7f0      	b.n	801099c <round+0x2c>
 80109ba:	2833      	cmp	r0, #51	; 0x33
 80109bc:	dd0b      	ble.n	80109d6 <round+0x66>
 80109be:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80109c2:	d105      	bne.n	80109d0 <round+0x60>
 80109c4:	ee10 0a10 	vmov	r0, s0
 80109c8:	f7ef fc80 	bl	80002cc <__adddf3>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	ec43 2b10 	vmov	d0, r2, r3
 80109d4:	bd70      	pop	{r4, r5, r6, pc}
 80109d6:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80109da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80109de:	40f4      	lsrs	r4, r6
 80109e0:	4214      	tst	r4, r2
 80109e2:	d0f5      	beq.n	80109d0 <round+0x60>
 80109e4:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80109e8:	2301      	movs	r3, #1
 80109ea:	4083      	lsls	r3, r0
 80109ec:	195b      	adds	r3, r3, r5
 80109ee:	bf28      	it	cs
 80109f0:	3101      	addcs	r1, #1
 80109f2:	ea23 0304 	bic.w	r3, r3, r4
 80109f6:	461a      	mov	r2, r3
 80109f8:	460b      	mov	r3, r1
 80109fa:	e7e9      	b.n	80109d0 <round+0x60>
 80109fc:	000fffff 	.word	0x000fffff

08010a00 <trunc>:
 8010a00:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8010a04:	ec5c bb10 	vmov	fp, ip, d0
 8010a08:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8010a0c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8010a10:	2913      	cmp	r1, #19
 8010a12:	4664      	mov	r4, ip
 8010a14:	dc11      	bgt.n	8010a3a <trunc+0x3a>
 8010a16:	2900      	cmp	r1, #0
 8010a18:	bfa7      	ittee	ge
 8010a1a:	4b15      	ldrge	r3, [pc, #84]	; (8010a70 <trunc+0x70>)
 8010a1c:	fa43 f101 	asrge.w	r1, r3, r1
 8010a20:	2200      	movlt	r2, #0
 8010a22:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8010a26:	bfa4      	itt	ge
 8010a28:	2200      	movge	r2, #0
 8010a2a:	ea01 030c 	andge.w	r3, r1, ip
 8010a2e:	4693      	mov	fp, r2
 8010a30:	469c      	mov	ip, r3
 8010a32:	ec4c bb10 	vmov	d0, fp, ip
 8010a36:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8010a3a:	2933      	cmp	r1, #51	; 0x33
 8010a3c:	dd0d      	ble.n	8010a5a <trunc+0x5a>
 8010a3e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a42:	d1f6      	bne.n	8010a32 <trunc+0x32>
 8010a44:	4663      	mov	r3, ip
 8010a46:	ee10 2a10 	vmov	r2, s0
 8010a4a:	ee10 0a10 	vmov	r0, s0
 8010a4e:	4621      	mov	r1, r4
 8010a50:	f7ef fc3c 	bl	80002cc <__adddf3>
 8010a54:	4683      	mov	fp, r0
 8010a56:	468c      	mov	ip, r1
 8010a58:	e7eb      	b.n	8010a32 <trunc+0x32>
 8010a5a:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8010a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a62:	40c3      	lsrs	r3, r0
 8010a64:	ea2b 0603 	bic.w	r6, fp, r3
 8010a68:	46b3      	mov	fp, r6
 8010a6a:	46a4      	mov	ip, r4
 8010a6c:	e7e1      	b.n	8010a32 <trunc+0x32>
 8010a6e:	bf00      	nop
 8010a70:	fff00000 	.word	0xfff00000
 8010a74:	00000000 	.word	0x00000000

08010a78 <nan>:
 8010a78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010a80 <nan+0x8>
 8010a7c:	4770      	bx	lr
 8010a7e:	bf00      	nop
 8010a80:	00000000 	.word	0x00000000
 8010a84:	7ff80000 	.word	0x7ff80000

08010a88 <_init>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	bf00      	nop
 8010a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8e:	bc08      	pop	{r3}
 8010a90:	469e      	mov	lr, r3
 8010a92:	4770      	bx	lr

08010a94 <_fini>:
 8010a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a96:	bf00      	nop
 8010a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a9a:	bc08      	pop	{r3}
 8010a9c:	469e      	mov	lr, r3
 8010a9e:	4770      	bx	lr
